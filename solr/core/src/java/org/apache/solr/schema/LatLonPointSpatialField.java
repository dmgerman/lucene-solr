begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LatLonPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|DoubleDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexOrDocValuesQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|SpatialStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialArgs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|SpatialOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|query
operator|.
name|UnsupportedSpatialOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|context
operator|.
name|SpatialContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|distance
operator|.
name|DistanceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Circle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Point
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Rectangle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|locationtech
operator|.
name|spatial4j
operator|.
name|shape
operator|.
name|Shape
import|;
end_import

begin_comment
comment|/**  * A spatial implementation based on Lucene's {@code LatLonPoint} and {@code LatLonDocValuesField}. The  * first is based on Lucene's "Points" API, which is a BKD Index.  This field type is strictly limited to  * coordinates in lat/lon decimal degrees.  The accuracy is about a centimeter.  */
end_comment

begin_comment
comment|// TODO once LLP& LLDVF are out of Lucene Sandbox, we should be able to javadoc reference them.
end_comment

begin_class
DECL|class|LatLonPointSpatialField
specifier|public
class|class
name|LatLonPointSpatialField
extends|extends
name|AbstractSpatialFieldType
implements|implements
name|SchemaAware
block|{
DECL|field|schema
specifier|private
name|IndexSchema
name|schema
decl_stmt|;
comment|// TODO handle polygons
annotation|@
name|Override
DECL|method|checkSchemaField
specifier|public
name|void
name|checkSchemaField
parameter_list|(
name|SchemaField
name|field
parameter_list|)
block|{
comment|// override because if we didn't, FieldType will complain about docValues not being supported (we do support it)
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|IndexSchema
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newSpatialStrategy
specifier|protected
name|SpatialStrategy
name|newSpatialStrategy
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
comment|// TODO change AbstractSpatialFieldType so we get schemaField?
return|return
operator|new
name|LatLonPointSpatialStrategy
argument_list|(
name|ctx
argument_list|,
name|fieldName
argument_list|,
name|schemaField
operator|.
name|indexed
argument_list|()
argument_list|,
name|schemaField
operator|.
name|hasDocValues
argument_list|()
argument_list|)
return|;
block|}
comment|// TODO move to Lucene-spatial-extras once LatLonPoint& LatLonDocValuesField moves out of sandbox
DECL|class|LatLonPointSpatialStrategy
specifier|public
specifier|static
class|class
name|LatLonPointSpatialStrategy
extends|extends
name|SpatialStrategy
block|{
DECL|field|indexed
specifier|private
specifier|final
name|boolean
name|indexed
decl_stmt|;
comment|// for query/filter
DECL|field|docValues
specifier|private
specifier|final
name|boolean
name|docValues
decl_stmt|;
comment|// for sort. Can be used to query/filter.
DECL|method|LatLonPointSpatialStrategy
specifier|public
name|LatLonPointSpatialStrategy
parameter_list|(
name|SpatialContext
name|ctx
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|boolean
name|indexed
parameter_list|,
name|boolean
name|docValues
parameter_list|)
block|{
name|super
argument_list|(
name|ctx
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ctx
operator|.
name|isGeo
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"ctx must be geo=true: "
operator|+
name|ctx
argument_list|)
throw|;
block|}
name|this
operator|.
name|indexed
operator|=
name|indexed
expr_stmt|;
name|this
operator|.
name|docValues
operator|=
name|docValues
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createIndexableFields
specifier|public
name|Field
index|[]
name|createIndexableFields
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|shape
operator|instanceof
name|Point
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" only supports indexing points; got: "
operator|+
name|shape
argument_list|)
throw|;
block|}
name|Point
name|point
init|=
operator|(
name|Point
operator|)
name|shape
decl_stmt|;
name|int
name|fieldsLen
init|=
operator|(
name|indexed
condition|?
literal|1
else|:
literal|0
operator|)
operator|+
operator|(
name|docValues
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
name|fieldsLen
index|]
decl_stmt|;
name|int
name|fieldsIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|indexed
condition|)
block|{
name|fields
index|[
name|fieldsIdx
operator|++
index|]
operator|=
operator|new
name|LatLonPoint
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|docValues
condition|)
block|{
name|fields
index|[
name|fieldsIdx
operator|++
index|]
operator|=
operator|new
name|LatLonDocValuesField
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
annotation|@
name|Override
DECL|method|makeQuery
specifier|public
name|Query
name|makeQuery
parameter_list|(
name|SpatialArgs
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|getOperation
argument_list|()
operator|!=
name|SpatialOperation
operator|.
name|Intersects
condition|)
block|{
throw|throw
operator|new
name|UnsupportedSpatialOperation
argument_list|(
name|args
operator|.
name|getOperation
argument_list|()
argument_list|)
throw|;
block|}
name|Shape
name|shape
init|=
name|args
operator|.
name|getShape
argument_list|()
decl_stmt|;
if|if
condition|(
name|indexed
operator|&&
name|docValues
condition|)
block|{
return|return
operator|new
name|IndexOrDocValuesQuery
argument_list|(
name|makeQueryFromIndex
argument_list|(
name|shape
argument_list|)
argument_list|,
name|makeQueryFromDocValues
argument_list|(
name|shape
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|indexed
condition|)
block|{
return|return
name|makeQueryFromIndex
argument_list|(
name|shape
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|docValues
condition|)
block|{
return|return
name|makeQueryFromDocValues
argument_list|(
name|shape
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|getFieldName
argument_list|()
operator|+
literal|" needs indexed (preferred) or docValues to support search"
argument_list|)
throw|;
block|}
block|}
comment|// Uses LatLonPoint
DECL|method|makeQueryFromIndex
specifier|protected
name|Query
name|makeQueryFromIndex
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
comment|// note: latitude then longitude order for LLP's methods
if|if
condition|(
name|shape
operator|instanceof
name|Circle
condition|)
block|{
name|Circle
name|circle
init|=
operator|(
name|Circle
operator|)
name|shape
decl_stmt|;
name|double
name|radiusMeters
init|=
name|circle
operator|.
name|getRadius
argument_list|()
operator|*
name|DistanceUtils
operator|.
name|DEG_TO_KM
operator|*
literal|1000
decl_stmt|;
return|return
name|LatLonPoint
operator|.
name|newDistanceQuery
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|circle
operator|.
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
argument_list|,
name|circle
operator|.
name|getCenter
argument_list|()
operator|.
name|getX
argument_list|()
argument_list|,
name|radiusMeters
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Rectangle
condition|)
block|{
name|Rectangle
name|rect
init|=
operator|(
name|Rectangle
operator|)
name|shape
decl_stmt|;
return|return
name|LatLonPoint
operator|.
name|newBoxQuery
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|rect
operator|.
name|getMinY
argument_list|()
argument_list|,
name|rect
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|rect
operator|.
name|getMinX
argument_list|()
argument_list|,
name|rect
operator|.
name|getMaxX
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Point
condition|)
block|{
name|Point
name|point
init|=
operator|(
name|Point
operator|)
name|shape
decl_stmt|;
return|return
name|LatLonPoint
operator|.
name|newDistanceQuery
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Shape "
operator|+
name|shape
operator|.
name|getClass
argument_list|()
operator|+
literal|" is not supported by "
operator|+
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|//      } else if (shape instanceof LucenePolygonShape) {
comment|//        // TODO support multi-polygon
comment|//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;
comment|//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);
block|}
comment|// Uses DocValuesField  (otherwise identical to above)
DECL|method|makeQueryFromDocValues
specifier|protected
name|Query
name|makeQueryFromDocValues
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
comment|// note: latitude then longitude order for LLP's methods
if|if
condition|(
name|shape
operator|instanceof
name|Circle
condition|)
block|{
name|Circle
name|circle
init|=
operator|(
name|Circle
operator|)
name|shape
decl_stmt|;
name|double
name|radiusMeters
init|=
name|circle
operator|.
name|getRadius
argument_list|()
operator|*
name|DistanceUtils
operator|.
name|DEG_TO_KM
operator|*
literal|1000
decl_stmt|;
return|return
name|LatLonDocValuesField
operator|.
name|newDistanceQuery
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|circle
operator|.
name|getCenter
argument_list|()
operator|.
name|getY
argument_list|()
argument_list|,
name|circle
operator|.
name|getCenter
argument_list|()
operator|.
name|getX
argument_list|()
argument_list|,
name|radiusMeters
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Rectangle
condition|)
block|{
name|Rectangle
name|rect
init|=
operator|(
name|Rectangle
operator|)
name|shape
decl_stmt|;
return|return
name|LatLonDocValuesField
operator|.
name|newBoxQuery
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|rect
operator|.
name|getMinY
argument_list|()
argument_list|,
name|rect
operator|.
name|getMaxY
argument_list|()
argument_list|,
name|rect
operator|.
name|getMinX
argument_list|()
argument_list|,
name|rect
operator|.
name|getMaxX
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|shape
operator|instanceof
name|Point
condition|)
block|{
name|Point
name|point
init|=
operator|(
name|Point
operator|)
name|shape
decl_stmt|;
return|return
name|LatLonDocValuesField
operator|.
name|newDistanceQuery
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|point
operator|.
name|getY
argument_list|()
argument_list|,
name|point
operator|.
name|getX
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Shape "
operator|+
name|shape
operator|.
name|getClass
argument_list|()
operator|+
literal|" is not supported by "
operator|+
name|getClass
argument_list|()
argument_list|)
throw|;
block|}
comment|//      } else if (shape instanceof LucenePolygonShape) {
comment|//        // TODO support multi-polygon
comment|//        Polygon poly = ((LucenePolygonShape)shape).lucenePolygon;
comment|//        return LatLonPoint.newPolygonQuery(getFieldName(), poly);
block|}
annotation|@
name|Override
DECL|method|makeDistanceValueSource
specifier|public
name|ValueSource
name|makeDistanceValueSource
parameter_list|(
name|Point
name|queryPoint
parameter_list|,
name|double
name|multiplier
parameter_list|)
block|{
if|if
condition|(
operator|!
name|docValues
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|getFieldName
argument_list|()
operator|+
literal|" must have docValues enabled to support this feature"
argument_list|)
throw|;
block|}
comment|// Internally, the distance from LatLonPointSortField/Comparator is in meters. So we must also go from meters to
comment|//  degrees, which is what Lucene spatial-extras is oriented around.
return|return
operator|new
name|DistanceSortValueSource
argument_list|(
name|getFieldName
argument_list|()
argument_list|,
name|queryPoint
argument_list|,
name|DistanceUtils
operator|.
name|KM_TO_DEG
operator|/
literal|1000.0
operator|*
name|multiplier
argument_list|)
return|;
block|}
comment|/**      * A {@link ValueSource} based around {@code LatLonDocValuesField#newDistanceSort(String, double, double)}.      */
DECL|class|DistanceSortValueSource
specifier|private
specifier|static
class|class
name|DistanceSortValueSource
extends|extends
name|ValueSource
block|{
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|queryPoint
specifier|private
specifier|final
name|Point
name|queryPoint
decl_stmt|;
DECL|field|multiplier
specifier|private
specifier|final
name|double
name|multiplier
decl_stmt|;
DECL|method|DistanceSortValueSource
name|DistanceSortValueSource
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Point
name|queryPoint
parameter_list|,
name|double
name|multiplier
parameter_list|)
block|{
name|this
operator|.
name|fieldName
operator|=
name|fieldName
expr_stmt|;
name|this
operator|.
name|queryPoint
operator|=
name|queryPoint
expr_stmt|;
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|DistanceSortValueSource
name|that
init|=
operator|(
name|DistanceSortValueSource
operator|)
name|o
decl_stmt|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|that
operator|.
name|multiplier
argument_list|,
name|multiplier
argument_list|)
operator|==
literal|0
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|,
name|that
operator|.
name|fieldName
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|queryPoint
argument_list|,
name|that
operator|.
name|queryPoint
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|fieldName
argument_list|,
name|queryPoint
argument_list|,
name|multiplier
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|DoubleDocValues
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|FieldComparator
argument_list|<
name|Double
argument_list|>
name|comparator
init|=
operator|(
name|FieldComparator
argument_list|<
name|Double
argument_list|>
operator|)
name|getSortField
argument_list|(
literal|false
argument_list|)
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|LeafFieldComparator
name|leafComparator
init|=
name|comparator
operator|.
name|getLeafComparator
argument_list|(
name|readerContext
argument_list|)
decl_stmt|;
specifier|final
name|double
name|mult
init|=
name|multiplier
decl_stmt|;
comment|// so it's a local field
comment|// Since this computation is expensive, it's worth caching it just in case.
name|double
name|cacheDoc
init|=
operator|-
literal|1
decl_stmt|;
name|double
name|cacheVal
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|doubleVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
if|if
condition|(
name|cacheDoc
operator|!=
name|doc
condition|)
block|{
try|try
block|{
name|leafComparator
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|cacheVal
operator|=
name|comparator
operator|.
name|value
argument_list|(
literal|0
argument_list|)
operator|*
name|mult
expr_stmt|;
name|cacheDoc
operator|=
name|doc
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|cacheVal
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
return|return
operator|!
name|Double
operator|.
name|isInfinite
argument_list|(
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"distSort("
operator|+
name|fieldName
operator|+
literal|", "
operator|+
name|queryPoint
operator|+
literal|", mult:"
operator|+
name|multiplier
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|boolean
name|reverse
parameter_list|)
block|{
if|if
condition|(
name|reverse
condition|)
block|{
return|return
name|super
operator|.
name|getSortField
argument_list|(
literal|true
argument_list|)
return|;
comment|// will use an impl that calls getValues
block|}
return|return
name|LatLonDocValuesField
operator|.
name|newDistanceSort
argument_list|(
name|fieldName
argument_list|,
name|queryPoint
operator|.
name|getY
argument_list|()
argument_list|,
name|queryPoint
operator|.
name|getX
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

