begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
operator|.
name|ContentStreamLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
operator|.
name|CSVLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
operator|.
name|JavabinLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
operator|.
name|JsonLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|loader
operator|.
name|XMLLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|AggregateMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
operator|.
name|solr
operator|.
name|SolrReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DeleteUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|MergeIndexesCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|RollbackUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|MetricUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Handler to collect and aggregate metric reports.  Each report indicates the target registry where  * metrics values should be collected and aggregated. Metrics with the same names are  * aggregated using {@link AggregateMetric} instances, which track the source of updates and  * their count, as well as providing simple statistics over collected values.  *  * Each report consists of {@link SolrInputDocument}-s that are expected to contain  * the following fields:  *<ul>  *<li>{@link SolrReporter#GROUP_ID} - (required) specifies target registry name where metrics will be grouped.</li>  *<li>{@link SolrReporter#REPORTER_ID} - (required) id of the reporter that sent this update. This can be eg.  *   node name or replica name or other id that uniquely identifies the source of metrics values.</li>  *<li>{@link MetricUtils#METRIC_NAME} - (required) metric name (in the source registry)</li>  *<li>{@link SolrReporter#LABEL_ID} - (optional) label to prepend to metric names in the target registry.</li>  *<li>{@link SolrReporter#REGISTRY_ID} - (optional) name of the source registry.</li>  *</ul>  * Remaining fields are assumed to be single-valued, and to contain metric attributes and their values. Example:  *<pre>  *&lt;doc&gt;  *&lt;field name="_group_"&gt;solr.core.collection1.shard1.leader&lt;/field&gt;  *&lt;field name="_reporter_"&gt;core_node3&lt;/field&gt;  *&lt;field name="metric"&gt;INDEX.merge.errors&lt;/field&gt;  *&lt;field name="value"&gt;0&lt;/field&gt;  *&lt;/doc&gt;  *</pre>  */
end_comment

begin_class
DECL|class|MetricsCollectorHandler
specifier|public
class|class
name|MetricsCollectorHandler
extends|extends
name|RequestHandlerBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|HANDLER_PATH
specifier|public
specifier|static
specifier|final
name|String
name|HANDLER_PATH
init|=
literal|"/admin/metrics/collector"
decl_stmt|;
DECL|field|coreContainer
specifier|private
specifier|final
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|field|metricManager
specifier|private
specifier|final
name|SolrMetricManager
name|metricManager
decl_stmt|;
DECL|field|loaders
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ContentStreamLoader
argument_list|>
name|loaders
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|params
specifier|private
name|SolrParams
name|params
decl_stmt|;
DECL|method|MetricsCollectorHandler
specifier|public
name|MetricsCollectorHandler
parameter_list|(
specifier|final
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
name|this
operator|.
name|metricManager
operator|=
name|coreContainer
operator|.
name|getMetricManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|initArgs
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|initArgs
argument_list|)
expr_stmt|;
if|if
condition|(
name|initArgs
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|initArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
block|}
name|loaders
operator|.
name|put
argument_list|(
literal|"application/xml"
argument_list|,
operator|new
name|XMLLoader
argument_list|()
operator|.
name|init
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|put
argument_list|(
literal|"application/json"
argument_list|,
operator|new
name|JsonLoader
argument_list|()
operator|.
name|init
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|put
argument_list|(
literal|"application/csv"
argument_list|,
operator|new
name|CSVLoader
argument_list|()
operator|.
name|init
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|put
argument_list|(
literal|"application/javabin"
argument_list|,
operator|new
name|JavabinLoader
argument_list|()
operator|.
name|init
argument_list|(
name|params
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|put
argument_list|(
literal|"text/csv"
argument_list|,
name|loaders
operator|.
name|get
argument_list|(
literal|"application/csv"
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|put
argument_list|(
literal|"text/xml"
argument_list|,
name|loaders
operator|.
name|get
argument_list|(
literal|"application/xml"
argument_list|)
argument_list|)
expr_stmt|;
name|loaders
operator|.
name|put
argument_list|(
literal|"text/json"
argument_list|,
name|loaders
operator|.
name|get
argument_list|(
literal|"application/json"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|coreContainer
operator|==
literal|null
operator|||
name|coreContainer
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
comment|// silently drop request
return|return;
block|}
comment|//log.info("#### " + req.toString());
if|if
condition|(
name|req
operator|.
name|getContentStreams
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// no content
return|return;
block|}
for|for
control|(
name|ContentStream
name|cs
range|:
name|req
operator|.
name|getContentStreams
argument_list|()
control|)
block|{
if|if
condition|(
name|cs
operator|.
name|getContentType
argument_list|()
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Missing content type - ignoring"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ContentStreamLoader
name|loader
init|=
name|loaders
operator|.
name|get
argument_list|(
name|cs
operator|.
name|getContentType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|loader
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|UNSUPPORTED_MEDIA_TYPE
argument_list|,
literal|"Unsupported content type for stream: "
operator|+
name|cs
operator|.
name|getSourceInfo
argument_list|()
operator|+
literal|", contentType="
operator|+
name|cs
operator|.
name|getContentType
argument_list|()
argument_list|)
throw|;
block|}
name|loader
operator|.
name|load
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|cs
argument_list|,
operator|new
name|MetricUpdateProcessor
argument_list|(
name|metricManager
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Handler for collecting and aggregating metric reports."
return|;
block|}
DECL|class|MetricUpdateProcessor
specifier|private
specifier|static
class|class
name|MetricUpdateProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|metricManager
specifier|private
specifier|final
name|SolrMetricManager
name|metricManager
decl_stmt|;
DECL|method|MetricUpdateProcessor
specifier|public
name|MetricUpdateProcessor
parameter_list|(
name|SolrMetricManager
name|metricManager
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|metricManager
operator|=
name|metricManager
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrInputDocument
name|doc
init|=
name|cmd
operator|.
name|solrDoc
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|metricName
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
name|MetricUtils
operator|.
name|METRIC_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|metricName
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Missing "
operator|+
name|MetricUtils
operator|.
name|METRIC_NAME
operator|+
literal|" field in document, skipping: "
operator|+
name|doc
argument_list|)
expr_stmt|;
return|return;
block|}
name|doc
operator|.
name|remove
argument_list|(
name|MetricUtils
operator|.
name|METRIC_NAME
argument_list|)
expr_stmt|;
comment|// XXX we could modify keys by using this original registry name
name|doc
operator|.
name|remove
argument_list|(
name|SolrReporter
operator|.
name|REGISTRY_ID
argument_list|)
expr_stmt|;
name|String
name|groupId
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
name|SolrReporter
operator|.
name|GROUP_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Missing "
operator|+
name|SolrReporter
operator|.
name|GROUP_ID
operator|+
literal|" field in document, skipping: "
operator|+
name|doc
argument_list|)
expr_stmt|;
return|return;
block|}
name|doc
operator|.
name|remove
argument_list|(
name|SolrReporter
operator|.
name|GROUP_ID
argument_list|)
expr_stmt|;
name|String
name|reporterId
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
name|SolrReporter
operator|.
name|REPORTER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|reporterId
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Missing "
operator|+
name|SolrReporter
operator|.
name|REPORTER_ID
operator|+
literal|" field in document, skipping: "
operator|+
name|doc
argument_list|)
expr_stmt|;
return|return;
block|}
name|doc
operator|.
name|remove
argument_list|(
name|SolrReporter
operator|.
name|REPORTER_ID
argument_list|)
expr_stmt|;
name|String
name|labelId
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
name|SolrReporter
operator|.
name|LABEL_ID
argument_list|)
decl_stmt|;
name|doc
operator|.
name|remove
argument_list|(
name|SolrReporter
operator|.
name|LABEL_ID
argument_list|)
expr_stmt|;
name|doc
operator|.
name|forEach
argument_list|(
name|f
lambda|->
block|{
name|String
name|key
init|=
name|MetricRegistry
operator|.
name|name
argument_list|(
name|labelId
argument_list|,
name|metricName
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MetricRegistry
name|registry
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|groupId
argument_list|)
decl_stmt|;
name|AggregateMetric
name|metric
init|=
name|getOrRegister
argument_list|(
name|registry
argument_list|,
name|key
argument_list|,
operator|new
name|AggregateMetric
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|f
operator|.
name|getFirstValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
name|metric
operator|.
name|set
argument_list|(
name|reporterId
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// remove missing values
name|metric
operator|.
name|clear
argument_list|(
name|reporterId
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getOrRegister
specifier|private
name|AggregateMetric
name|getOrRegister
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|String
name|name
parameter_list|,
name|AggregateMetric
name|add
parameter_list|)
block|{
name|AggregateMetric
name|existing
init|=
operator|(
name|AggregateMetric
operator|)
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
return|return
name|existing
return|;
block|}
try|try
block|{
name|registry
operator|.
name|register
argument_list|(
name|name
argument_list|,
name|add
argument_list|)
expr_stmt|;
return|return
name|add
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// someone added before us
name|existing
operator|=
operator|(
name|AggregateMetric
operator|)
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
comment|// now, that is weird...
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Inconsistent metric status, "
operator|+
name|name
argument_list|)
throw|;
block|}
return|return
name|existing
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|processDelete
specifier|public
name|void
name|processDelete
parameter_list|(
name|DeleteUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"processDelete"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|processMergeIndexes
specifier|public
name|void
name|processMergeIndexes
parameter_list|(
name|MergeIndexesCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"processMergeIndexes"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|processCommit
specifier|public
name|void
name|processCommit
parameter_list|(
name|CommitUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"processCommit"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|processRollback
specifier|public
name|void
name|processRollback
parameter_list|(
name|RollbackUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"processRollback"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

