begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|CallInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CommitUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|PrepRecoveryOp
class|class
name|PrepRecoveryOp
implements|implements
name|CoreAdminHandler
operator|.
name|CoreAdminOp
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|CallInfo
name|it
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
name|cname
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|nodeName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"nodeName"
argument_list|)
decl_stmt|;
name|String
name|coreNodeName
init|=
name|params
operator|.
name|get
argument_list|(
literal|"coreNodeName"
argument_list|)
decl_stmt|;
name|Replica
operator|.
name|State
name|waitForState
init|=
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
name|params
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
decl_stmt|;
name|Boolean
name|checkLive
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"checkLive"
argument_list|)
decl_stmt|;
name|Boolean
name|onlyIfLeader
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"onlyIfLeader"
argument_list|)
decl_stmt|;
name|Boolean
name|onlyIfLeaderActive
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"onlyIfLeaderActive"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Going to wait for coreNodeName: "
operator|+
name|coreNodeName
operator|+
literal|", state: "
operator|+
name|waitForState
operator|+
literal|", checkLive: "
operator|+
name|checkLive
operator|+
literal|", onlyIfLeader: "
operator|+
name|onlyIfLeader
operator|+
literal|", onlyIfLeaderActive: "
operator|+
name|onlyIfLeaderActive
argument_list|)
expr_stmt|;
name|int
name|maxTries
init|=
literal|0
decl_stmt|;
name|Replica
operator|.
name|State
name|state
init|=
literal|null
decl_stmt|;
name|boolean
name|live
init|=
literal|false
decl_stmt|;
name|int
name|retry
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|CoreContainer
name|coreContainer
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
operator|&&
name|retry
operator|==
literal|30
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"core not found:"
operator|+
name|cname
argument_list|)
throw|;
block|}
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|onlyIfLeader
operator|!=
literal|null
operator|&&
name|onlyIfLeader
condition|)
block|{
if|if
condition|(
operator|!
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|isLeader
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"We are not the leader"
argument_list|)
throw|;
block|}
block|}
comment|// wait until we are sure the recovering node is ready
comment|// to accept updates
name|CloudDescriptor
name|cloudDescriptor
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
if|if
condition|(
name|retry
operator|%
literal|15
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|retry
operator|>
literal|0
operator|&&
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
name|log
operator|.
name|info
argument_list|(
literal|"After "
operator|+
name|retry
operator|+
literal|" seconds, core "
operator|+
name|cname
operator|+
literal|" ("
operator|+
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
operator|+
literal|" of "
operator|+
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
operator|+
literal|") still does not have state: "
operator|+
name|waitForState
operator|+
literal|"; forcing ClusterState update from ZooKeeper"
argument_list|)
expr_stmt|;
comment|// force a cluster state update
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxTries
operator|==
literal|0
condition|)
block|{
comment|// wait long enough for the leader conflict to work itself out plus a little extra
name|int
name|conflictWaitMs
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getLeaderConflictResolveWait
argument_list|()
decl_stmt|;
name|maxTries
operator|=
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
name|conflictWaitMs
operator|/
literal|1000
argument_list|)
operator|+
literal|3
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Will wait a max of "
operator|+
name|maxTries
operator|+
literal|" seconds to see "
operator|+
name|cname
operator|+
literal|" ("
operator|+
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
operator|+
literal|" of "
operator|+
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
operator|+
literal|") have state: "
operator|+
name|waitForState
argument_list|)
expr_stmt|;
block|}
name|ClusterState
name|clusterState
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Replica
name|replica
init|=
name|slice
operator|.
name|getReplicasMap
argument_list|()
operator|.
name|get
argument_list|(
name|coreNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replica
operator|!=
literal|null
condition|)
block|{
name|state
operator|=
name|replica
operator|.
name|getState
argument_list|()
expr_stmt|;
name|live
operator|=
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
specifier|final
name|Replica
operator|.
name|State
name|localState
init|=
name|cloudDescriptor
operator|.
name|getLastPublished
argument_list|()
decl_stmt|;
comment|// TODO: This is funky but I've seen this in testing where the replica asks the
comment|// leader to be in recovery? Need to track down how that happens ... in the meantime,
comment|// this is a safeguard
name|boolean
name|leaderDoesNotNeedRecovery
init|=
operator|(
name|onlyIfLeader
operator|!=
literal|null
operator|&&
name|onlyIfLeader
operator|&&
name|core
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
operator|&&
name|waitForState
operator|==
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
operator|&&
name|localState
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
name|state
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|)
decl_stmt|;
if|if
condition|(
name|leaderDoesNotNeedRecovery
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Leader "
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|" ignoring request to be in the recovering state because it is live and active."
argument_list|)
expr_stmt|;
block|}
name|boolean
name|onlyIfActiveCheckResult
init|=
name|onlyIfLeaderActive
operator|!=
literal|null
operator|&&
name|onlyIfLeaderActive
operator|&&
name|localState
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"In WaitForState("
operator|+
name|waitForState
operator|+
literal|"): collection="
operator|+
name|collectionName
operator|+
literal|", shard="
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|", thisCore="
operator|+
name|core
operator|.
name|getName
argument_list|()
operator|+
literal|", leaderDoesNotNeedRecovery="
operator|+
name|leaderDoesNotNeedRecovery
operator|+
literal|", isLeader? "
operator|+
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|isLeader
argument_list|()
operator|+
literal|", live="
operator|+
name|live
operator|+
literal|", checkLive="
operator|+
name|checkLive
operator|+
literal|", currentState="
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|", localState="
operator|+
name|localState
operator|+
literal|", nodeName="
operator|+
name|nodeName
operator|+
literal|", coreNodeName="
operator|+
name|coreNodeName
operator|+
literal|", onlyIfActiveCheckResult="
operator|+
name|onlyIfActiveCheckResult
operator|+
literal|", nodeProps: "
operator|+
name|replica
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|onlyIfActiveCheckResult
operator|&&
name|replica
operator|!=
literal|null
operator|&&
operator|(
name|state
operator|==
name|waitForState
operator|||
name|leaderDoesNotNeedRecovery
operator|)
condition|)
block|{
if|if
condition|(
name|checkLive
operator|==
literal|null
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
name|checkLive
operator|&&
name|live
condition|)
block|{
break|break;
block|}
elseif|else
if|if
condition|(
operator|!
name|checkLive
operator|&&
operator|!
name|live
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|retry
operator|++
operator|==
name|maxTries
condition|)
block|{
name|String
name|collection
init|=
literal|null
decl_stmt|;
name|String
name|leaderInfo
init|=
literal|null
decl_stmt|;
name|String
name|shardId
init|=
literal|null
decl_stmt|;
try|try
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|collection
operator|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
name|shardId
operator|=
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|leaderInfo
operator|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderUrl
argument_list|(
name|collection
argument_list|,
name|shardId
argument_list|,
literal|5000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|exc
parameter_list|)
block|{
name|leaderInfo
operator|=
literal|"Not available due to: "
operator|+
name|exc
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"I was asked to wait on state "
operator|+
name|waitForState
operator|+
literal|" for "
operator|+
name|shardId
operator|+
literal|" in "
operator|+
name|collection
operator|+
literal|" on "
operator|+
name|nodeName
operator|+
literal|" but I still do not see the requested state. I see state: "
operator|+
name|state
operator|.
name|toString
argument_list|()
operator|+
literal|" live:"
operator|+
name|live
operator|+
literal|" leader from ZK: "
operator|+
name|leaderInfo
argument_list|)
throw|;
block|}
if|if
condition|(
name|coreContainer
operator|.
name|isShutDown
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Solr is shutting down"
argument_list|)
throw|;
block|}
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|LocalSolrQueryRequest
name|r
init|=
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
decl_stmt|;
name|CommitUpdateCommand
name|commitCmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|r
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|commitCmd
operator|.
name|softCommit
operator|=
literal|true
expr_stmt|;
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|commit
argument_list|(
name|commitCmd
argument_list|)
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|core
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" to replicate "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
operator|+
literal|" gen:"
operator|+
name|core
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getGeneration
argument_list|()
operator|+
literal|" data:"
operator|+
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error in solrcloud_debug block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Waited coreNodeName: "
operator|+
name|coreNodeName
operator|+
literal|", state: "
operator|+
name|waitForState
operator|+
literal|", checkLive: "
operator|+
name|checkLive
operator|+
literal|", onlyIfLeader: "
operator|+
name|onlyIfLeader
operator|+
literal|" for: "
operator|+
name|retry
operator|+
literal|" seconds."
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

