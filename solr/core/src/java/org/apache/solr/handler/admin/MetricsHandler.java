begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|MetricUtils
import|;
end_import

begin_comment
comment|/**  * Request handler to return metrics  */
end_comment

begin_class
DECL|class|MetricsHandler
specifier|public
class|class
name|MetricsHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|PermissionNameProvider
block|{
DECL|field|container
specifier|final
name|CoreContainer
name|container
decl_stmt|;
DECL|field|metricManager
specifier|final
name|SolrMetricManager
name|metricManager
decl_stmt|;
DECL|field|COMPACT_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|COMPACT_PARAM
init|=
literal|"compact"
decl_stmt|;
DECL|method|MetricsHandler
specifier|public
name|MetricsHandler
parameter_list|()
block|{
name|this
operator|.
name|container
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|metricManager
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|MetricsHandler
specifier|public
name|MetricsHandler
parameter_list|(
name|CoreContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|metricManager
operator|=
name|this
operator|.
name|container
operator|.
name|getMetricManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPermissionName
specifier|public
name|Name
name|getPermissionName
parameter_list|(
name|AuthorizationContext
name|request
parameter_list|)
block|{
return|return
name|Name
operator|.
name|METRICS_READ_PERM
return|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|container
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|INVALID_STATE
argument_list|,
literal|"Core container instance not initialized"
argument_list|)
throw|;
block|}
name|boolean
name|compact
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|COMPACT_PARAM
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|MetricFilter
name|mustMatchFilter
init|=
name|parseMustMatchFilter
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MetricType
argument_list|>
name|metricTypes
init|=
name|parseMetricTypes
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MetricFilter
argument_list|>
name|metricFilters
init|=
name|metricTypes
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|MetricType
operator|::
name|asMetricFilter
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|requestedRegistries
init|=
name|parseRegistries
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|NamedList
name|response
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|registryName
range|:
name|requestedRegistries
control|)
block|{
name|MetricRegistry
name|registry
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
decl_stmt|;
name|response
operator|.
name|add
argument_list|(
name|registryName
argument_list|,
name|MetricUtils
operator|.
name|toNamedList
argument_list|(
name|registry
argument_list|,
name|metricFilters
argument_list|,
name|mustMatchFilter
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|compact
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"metrics"
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
DECL|method|parseMustMatchFilter
specifier|private
name|MetricFilter
name|parseMustMatchFilter
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|String
index|[]
name|prefixes
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
literal|"prefix"
argument_list|)
decl_stmt|;
name|MetricFilter
name|mustMatchFilter
decl_stmt|;
if|if
condition|(
name|prefixes
operator|!=
literal|null
operator|&&
name|prefixes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|prefixSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
name|prefixSet
operator|.
name|addAll
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|prefix
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mustMatchFilter
operator|=
operator|new
name|SolrMetricManager
operator|.
name|PrefixFilter
argument_list|(
operator|(
name|String
index|[]
operator|)
name|prefixSet
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|prefixSet
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mustMatchFilter
operator|=
name|MetricFilter
operator|.
name|ALL
expr_stmt|;
block|}
return|return
name|mustMatchFilter
return|;
block|}
DECL|method|parseRegistries
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|parseRegistries
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|String
index|[]
name|groupStr
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|String
index|[]
name|registryStr
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
literal|"registry"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|groupStr
operator|==
literal|null
operator|||
name|groupStr
operator|.
name|length
operator|==
literal|0
operator|)
operator|&&
operator|(
name|registryStr
operator|==
literal|null
operator|||
name|registryStr
operator|.
name|length
operator|==
literal|0
operator|)
condition|)
block|{
comment|// return all registries
return|return
name|container
operator|.
name|getMetricManager
argument_list|()
operator|.
name|registryNames
argument_list|()
return|;
block|}
name|boolean
name|allRegistries
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|initialPrefixes
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|groupStr
operator|!=
literal|null
operator|&&
name|groupStr
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|initialPrefixes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|g
range|:
name|groupStr
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|g
argument_list|,
literal|','
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|split
control|)
block|{
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|allRegistries
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|initialPrefixes
operator|.
name|add
argument_list|(
name|SolrMetricManager
operator|.
name|overridableRegistryName
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allRegistries
condition|)
block|{
return|return
name|container
operator|.
name|getMetricManager
argument_list|()
operator|.
name|registryNames
argument_list|()
return|;
block|}
block|}
block|}
if|if
condition|(
name|registryStr
operator|!=
literal|null
operator|&&
name|registryStr
operator|.
name|length
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|initialPrefixes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|initialPrefixes
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|r
range|:
name|registryStr
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|split
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|r
argument_list|,
literal|','
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|split
control|)
block|{
if|if
condition|(
name|s
operator|.
name|trim
argument_list|()
operator|.
name|equals
argument_list|(
literal|"all"
argument_list|)
condition|)
block|{
name|allRegistries
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|initialPrefixes
operator|.
name|add
argument_list|(
name|SolrMetricManager
operator|.
name|overridableRegistryName
argument_list|(
name|s
operator|.
name|trim
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allRegistries
condition|)
block|{
return|return
name|container
operator|.
name|getMetricManager
argument_list|()
operator|.
name|registryNames
argument_list|()
return|;
block|}
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|validRegistries
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|r
range|:
name|container
operator|.
name|getMetricManager
argument_list|()
operator|.
name|registryNames
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|initialPrefixes
control|)
block|{
if|if
condition|(
name|r
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|validRegistries
operator|.
name|add
argument_list|(
name|r
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|validRegistries
return|;
block|}
DECL|method|parseMetricTypes
specifier|private
name|List
argument_list|<
name|MetricType
argument_list|>
name|parseMetricTypes
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|String
index|[]
name|typeStr
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|types
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|typeStr
operator|!=
literal|null
operator|&&
name|typeStr
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|types
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|type
range|:
name|typeStr
control|)
block|{
name|types
operator|.
name|addAll
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|type
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|MetricType
argument_list|>
name|metricTypes
init|=
name|Collections
operator|.
name|singletonList
argument_list|(
name|MetricType
operator|.
name|all
argument_list|)
decl_stmt|;
comment|// include all metrics by default
try|try
block|{
if|if
condition|(
name|types
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|metricTypes
operator|=
name|types
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|String
operator|::
name|trim
argument_list|)
operator|.
name|map
argument_list|(
name|MetricType
operator|::
name|valueOf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid metric type in: "
operator|+
name|types
operator|+
literal|" specified. Must be one of (all, meter, timer, histogram, counter, gauge)"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|metricTypes
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A handler to return all the metrics gathered by Solr"
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|ADMIN
return|;
block|}
DECL|enum|MetricType
enum|enum
name|MetricType
block|{
DECL|enum constant|histogram
name|histogram
parameter_list|(
name|Histogram
operator|.
name|class
parameter_list|)
operator|,
DECL|enum constant|meter
constructor|meter(Meter.class
block|)
enum|,
DECL|enum constant|timer
name|timer
parameter_list|(
name|Timer
operator|.
name|class
parameter_list|)
operator|,
DECL|enum constant|counter
constructor|counter(Counter.class
block|)
operator|,
DECL|enum constant|gauge
name|gauge
argument_list|(
name|Gauge
operator|.
name|class
argument_list|)
operator|,
DECL|enum constant|all
name|all
argument_list|(
literal|null
argument_list|)
expr_stmt|;
end_class

begin_decl_stmt
DECL|field|klass
specifier|private
specifier|final
name|Class
name|klass
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|MetricType
name|MetricType
argument_list|(
name|Class
name|klass
argument_list|)
block|{
name|this
operator|.
name|klass
operator|=
name|klass
block|;     }
DECL|method|asMetricFilter
specifier|public
name|MetricFilter
name|asMetricFilter
argument_list|()
block|{
return|return
parameter_list|(
name|name
parameter_list|,
name|metric
parameter_list|)
lambda|->
name|klass
operator|==
literal|null
operator|||
name|klass
operator|.
name|isInstance
argument_list|(
name|metric
argument_list|)
return|;
block|}
end_expr_stmt

unit|} }
end_unit

