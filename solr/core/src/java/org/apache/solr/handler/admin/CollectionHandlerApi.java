begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CollectionsHandler
operator|.
name|CollectionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CollectionsHandler
operator|.
name|CollectionOperation
operator|.
name|*
import|;
end_import

begin_class
DECL|class|CollectionHandlerApi
specifier|public
class|class
name|CollectionHandlerApi
extends|extends
name|BaseHandlerApiSupport
block|{
DECL|field|handler
specifier|final
name|CollectionsHandler
name|handler
decl_stmt|;
DECL|method|CollectionHandlerApi
specifier|public
name|CollectionHandlerApi
parameter_list|(
name|CollectionsHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getCommands
specifier|protected
name|List
argument_list|<
name|ApiCommand
argument_list|>
name|getCommands
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|Cmd
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getEndPoints
specifier|protected
name|List
argument_list|<
name|V2EndPoint
argument_list|>
name|getEndPoints
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
name|EndPoint
operator|.
name|values
argument_list|()
argument_list|)
return|;
block|}
DECL|enum|Cmd
enum|enum
name|Cmd
implements|implements
name|ApiCommand
block|{
DECL|enum constant|GET_COLLECTIONS
name|GET_COLLECTIONS
parameter_list|(
name|EndPoint
operator|.
name|COLLECTIONS
parameter_list|,
name|GET
parameter_list|,
name|LIST_OP
parameter_list|)
operator|,
DECL|enum constant|GET_CLUSTER
constructor|GET_CLUSTER(EndPoint.CLUSTER
operator|,
constructor|GET
operator|,
constructor|LIST_OP
operator|,
constructor|"/cluster"
operator|,
constructor|null
block|)
enum|,
DECL|enum constant|GET_CLUSTER_OVERSEER
name|GET_CLUSTER_OVERSEER
argument_list|(
name|EndPoint
operator|.
name|CLUSTER
argument_list|,
name|GET
argument_list|,
name|OVERSEERSTATUS_OP
argument_list|,
literal|"/cluster/overseer"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|GET_CLUSTER_STATUS_CMD
name|GET_CLUSTER_STATUS_CMD
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_CMD_STATUS
argument_list|,
name|GET
argument_list|,
name|REQUESTSTATUS_OP
argument_list|)
operator|,
DECL|enum constant|DELETE_CLUSTER_STATUS
name|DELETE_CLUSTER_STATUS
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_CMD_STATUS_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETESTATUS_OP
argument_list|)
operator|,
DECL|enum constant|GET_A_COLLECTION
name|GET_A_COLLECTION
argument_list|(
name|EndPoint
operator|.
name|COLLECTION_STATE
argument_list|,
name|GET
argument_list|,
name|CLUSTERSTATUS_OP
argument_list|)
operator|,
DECL|enum constant|LIST_ALIASES
name|LIST_ALIASES
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_ALIASES
argument_list|,
name|GET
argument_list|,
name|LISTALIASES_OP
argument_list|)
operator|,
DECL|enum constant|CREATE_COLLECTION
name|CREATE_COLLECTION
argument_list|(
name|EndPoint
operator|.
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CREATE_OP
argument_list|,
name|CREATE_OP
operator|.
name|action
operator|.
name|toLower
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|COLL_CONF
argument_list|,
literal|"config"
argument_list|,
literal|"createNodeSet.shuffle"
argument_list|,
literal|"shuffleNodes"
argument_list|,
literal|"createNodeSet"
argument_list|,
literal|"nodeSet"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"properties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_COLL
name|DELETE_COLL
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETE_OP
argument_list|,
name|DELETE_OP
operator|.
name|action
operator|.
name|toLower
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NAME
argument_list|,
literal|"collection"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|RELOAD_COLL
name|RELOAD_COLL
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|RELOAD_OP
argument_list|,
name|RELOAD_OP
operator|.
name|action
operator|.
name|toLower
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NAME
argument_list|,
literal|"collection"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|MODIFYCOLLECTION
name|MODIFYCOLLECTION
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|MODIFYCOLLECTION_OP
argument_list|,
literal|"modify"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|MIGRATE_DOCS
name|MIGRATE_DOCS
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|MIGRATE_OP
argument_list|,
literal|"migrate-docs"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"split.key"
argument_list|,
literal|"splitKey"
argument_list|,
literal|"target.collection"
argument_list|,
literal|"target"
argument_list|,
literal|"forward.timeout"
argument_list|,
literal|"forwardTimeout"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|REBALANCELEADERS
name|REBALANCELEADERS
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|REBALANCELEADERS_OP
argument_list|,
literal|"rebalance-leaders"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|CREATE_ALIAS
name|CREATE_ALIAS
argument_list|(
name|EndPoint
operator|.
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CREATEALIAS_OP
argument_list|,
literal|"create-alias"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|DELETE_ALIAS
name|DELETE_ALIAS
argument_list|(
name|EndPoint
operator|.
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|DELETEALIAS_OP
argument_list|,
literal|"delete-alias"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|method|CREATE_SHARD
DECL|method|CREATE_SHARD
name|CREATE_SHARD
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CREATESHARD_OP
argument_list|,
literal|"create"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|CREATE_NODE_SET
argument_list|,
literal|"nodeSet"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"coreProperties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
block|{       @
name|Override
specifier|public
name|String
name|getParamSubstitute
argument_list|(
name|String
name|param
argument_list|)
block|{
return|return
name|super
operator|.
name|getParamSubstitute
argument_list|(
name|param
argument_list|)
return|;
block|}
block|}
end_class

begin_operator
operator|,
end_operator

begin_expr_stmt
DECL|enum constant|SPLIT_SHARD
name|SPLIT_SHARD
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|SPLITSHARD_OP
argument_list|,
literal|"split"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"split.key"
argument_list|,
literal|"splitKey"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"coreProperties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_SHARD
name|DELETE_SHARD
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETESHARD_OP
argument_list|)
operator|,
DECL|enum constant|CREATE_REPLICA
name|CREATE_REPLICA
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|ADDREPLICA_OP
argument_list|,
literal|"add-replica"
argument_list|,
literal|null
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"coreProperties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_REPLICA
name|DELETE_REPLICA
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETEREPLICA_OP
argument_list|)
operator|,
DECL|enum constant|SYNC_SHARD
name|SYNC_SHARD
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|,
name|POST
argument_list|,
name|SYNCSHARD_OP
argument_list|,
literal|"synch-shard"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|ADDREPLICAPROP
name|ADDREPLICAPROP
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|ADDREPLICAPROP_OP
argument_list|,
literal|"add-replica-property"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"property"
argument_list|,
literal|"name"
argument_list|,
literal|"property.value"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETEREPLICAPROP
name|DELETEREPLICAPROP
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|DELETEREPLICAPROP_OP
argument_list|,
literal|"delete-replica-property"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|ADDROLE
name|ADDROLE
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_CMD
argument_list|,
name|POST
argument_list|,
name|ADDROLE_OP
argument_list|,
literal|"add-role"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|REMOVEROLE
name|REMOVEROLE
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_CMD
argument_list|,
name|POST
argument_list|,
name|REMOVEROLE_OP
argument_list|,
literal|"remove-role"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|CLUSTERPROP
name|CLUSTERPROP
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_CMD
argument_list|,
name|POST
argument_list|,
name|CLUSTERPROP_OP
argument_list|,
literal|"set-property"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|BACKUP
name|BACKUP
argument_list|(
name|EndPoint
operator|.
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|BACKUP_OP
argument_list|,
literal|"backup-collection"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|RESTORE
name|RESTORE
argument_list|(
name|EndPoint
operator|.
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|RESTORE_OP
argument_list|,
literal|"restore-collection"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|method|GET_NODES
DECL|method|GET_NODES
name|GET_NODES
argument_list|(
name|EndPoint
operator|.
name|CLUSTER_NODES
argument_list|,
name|GET
argument_list|,
literal|null
argument_list|)
block|{       @
name|Override
specifier|public
name|void
name|invoke
argument_list|(
name|SolrQueryRequest
name|req
argument_list|,
name|SolrQueryResponse
name|rsp
argument_list|,
name|BaseHandlerApiSupport
name|apiHandler
argument_list|)
throws|throws
name|Exception
block|{
name|rsp
operator|.
name|add
argument_list|(
literal|"nodes"
argument_list|,
operator|(
operator|(
name|CollectionHandlerApi
operator|)
name|apiHandler
operator|)
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
block|;       }
end_expr_stmt

begin_expr_stmt
unit|},
DECL|enum constant|FORCELEADER
name|FORCELEADER
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|,
name|POST
argument_list|,
name|FORCELEADER_OP
argument_list|,
literal|"force-leader"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|SYNCSHARD
name|SYNCSHARD
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|,
name|POST
argument_list|,
name|SYNCSHARD_OP
argument_list|,
literal|"sync-shard"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|BALANCESHARDUNIQUE
name|BALANCESHARDUNIQUE
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|BALANCESHARDUNIQUE_OP
argument_list|,
literal|"balance-shard-unique"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
DECL|field|commandName
specifier|public
specifier|final
name|String
name|commandName
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|endPoint
specifier|public
specifier|final
name|EndPoint
name|endPoint
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|method
specifier|public
specifier|final
name|SolrRequest
operator|.
name|METHOD
name|method
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|target
specifier|public
specifier|final
name|CollectionOperation
name|target
decl_stmt|;
end_decl_stmt

begin_comment
comment|//mapping of http param name to json attribute
end_comment

begin_decl_stmt
DECL|field|paramstoAttr
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramstoAttr
decl_stmt|;
end_decl_stmt

begin_comment
comment|//mapping of old prefix to new for instance properties.a=val can be substituted with property:{a:val}
end_comment

begin_decl_stmt
DECL|field|prefixSubstitutes
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixSubstitutes
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|getMethod
specifier|public
name|SolrRequest
operator|.
name|METHOD
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
end_function

begin_expr_stmt
DECL|method|Cmd
name|Cmd
argument_list|(
name|EndPoint
name|endPoint
argument_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
argument_list|,
name|CollectionOperation
name|target
argument_list|)
block|{
name|this
argument_list|(
name|endPoint
argument_list|,
name|method
argument_list|,
name|target
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|;     }
DECL|method|Cmd
name|Cmd
argument_list|(
name|EndPoint
name|endPoint
argument_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
argument_list|,
name|CollectionOperation
name|target
argument_list|,
name|String
name|commandName
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramstoAttr
argument_list|)
block|{
name|this
argument_list|(
name|endPoint
argument_list|,
name|method
argument_list|,
name|target
argument_list|,
name|commandName
argument_list|,
name|paramstoAttr
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
block|;      }
DECL|method|Cmd
name|Cmd
argument_list|(
name|EndPoint
name|endPoint
argument_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
argument_list|,
name|CollectionOperation
name|target
argument_list|,
name|String
name|commandName
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramstoAttr
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixSubstitutes
argument_list|)
block|{
name|this
operator|.
name|commandName
operator|=
name|commandName
block|;
name|this
operator|.
name|endPoint
operator|=
name|endPoint
block|;
name|this
operator|.
name|method
operator|=
name|method
block|;
name|this
operator|.
name|target
operator|=
name|target
block|;
name|this
operator|.
name|paramstoAttr
operator|=
name|paramstoAttr
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|paramstoAttr
block|;
name|this
operator|.
name|prefixSubstitutes
operator|=
name|prefixSubstitutes
block|;      }
expr|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
argument_list|()
block|{
return|return
name|commandName
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|getHttpMethod
specifier|public
name|SolrRequest
operator|.
name|METHOD
name|getHttpMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getEndPoint
specifier|public
name|V2EndPoint
name|getEndPoint
parameter_list|()
block|{
return|return
name|endPoint
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getParamNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getParamNames
parameter_list|(
name|CommandOperation
name|op
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|paramNames
init|=
name|BaseHandlerApiSupport
operator|.
name|getParamNames
argument_list|(
name|op
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefixSubstitutes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|paramNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|prefixSubstitutes
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|paramName
range|:
name|paramNames
control|)
block|{
if|if
condition|(
name|paramName
operator|.
name|startsWith
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|paramName
operator|.
name|replace
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
block|}
block|}
name|paramNames
operator|=
name|result
expr_stmt|;
block|}
block|}
return|return
name|paramNames
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getParamSubstitute
specifier|public
name|String
name|getParamSubstitute
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|String
name|s
init|=
name|paramstoAttr
operator|.
name|containsKey
argument_list|(
name|param
argument_list|)
condition|?
name|paramstoAttr
operator|.
name|get
argument_list|(
name|param
argument_list|)
else|:
name|param
decl_stmt|;
if|if
condition|(
name|prefixSubstitutes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|prefixSubstitutes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|s
operator|.
name|replace
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|s
return|;
block|}
end_function

begin_function
DECL|method|invoke
specifier|public
name|void
name|invoke
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|BaseHandlerApiSupport
name|apiHandler
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|(
name|CollectionHandlerApi
operator|)
name|apiHandler
operator|)
operator|.
name|handler
operator|.
name|invokeAction
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
operator|(
operator|(
name|CollectionHandlerApi
operator|)
name|apiHandler
operator|)
operator|.
name|handler
operator|.
name|coreContainer
argument_list|,
name|target
operator|.
name|action
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
end_function

begin_expr_stmt
unit|}    enum
DECL|enum|EndPoint
name|EndPoint
expr|implements
name|V2EndPoint
block|{
DECL|enum constant|CLUSTER
name|CLUSTER
argument_list|(
literal|"cluster"
argument_list|)
block|,
DECL|enum constant|CLUSTER_ALIASES
name|CLUSTER_ALIASES
argument_list|(
literal|"cluster.aliases"
argument_list|)
block|,
DECL|enum constant|CLUSTER_CMD
name|CLUSTER_CMD
argument_list|(
literal|"cluster.Commands"
argument_list|)
block|,
DECL|enum constant|CLUSTER_NODES
name|CLUSTER_NODES
argument_list|(
literal|"cluster.nodes"
argument_list|)
block|,
DECL|enum constant|CLUSTER_CMD_STATUS
name|CLUSTER_CMD_STATUS
argument_list|(
literal|"cluster.commandstatus"
argument_list|)
block|,
DECL|enum constant|CLUSTER_CMD_STATUS_DELETE
name|CLUSTER_CMD_STATUS_DELETE
argument_list|(
literal|"cluster.commandstatus.delete"
argument_list|)
block|,
DECL|enum constant|COLLECTIONS_COMMANDS
name|COLLECTIONS_COMMANDS
argument_list|(
literal|"collections.Commands"
argument_list|)
block|,
DECL|enum constant|COLLECTIONS
name|COLLECTIONS
argument_list|(
literal|"collections"
argument_list|)
block|,
DECL|enum constant|COLLECTION_STATE
name|COLLECTION_STATE
argument_list|(
literal|"collections.collection"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION
name|PER_COLLECTION
argument_list|(
literal|"collections.collection.Commands"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_DELETE
name|PER_COLLECTION_DELETE
argument_list|(
literal|"collections.collection.delete"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_SHARDS_COMMANDS
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|(
literal|"collections.collection.shards.Commands"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_PER_SHARD_COMMANDS
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|(
literal|"collections.collection.shards.shard.Commands"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_PER_SHARD_DELETE
name|PER_COLLECTION_PER_SHARD_DELETE
argument_list|(
literal|"collections.collection.shards.shard.delete"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
name|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
argument_list|(
literal|"collections.collection.shards.shard.replica.delete"
argument_list|)
block|;
DECL|field|specName
name|final
name|String
name|specName
block|;
DECL|method|EndPoint
name|EndPoint
argument_list|(
name|String
name|specName
argument_list|)
block|{
name|this
operator|.
name|specName
operator|=
name|specName
block|;     }
expr|@
name|Override
DECL|method|getSpecName
specifier|public
name|String
name|getSpecName
argument_list|()
block|{
return|return
name|specName
return|;
block|}
end_expr_stmt

unit|}  }
end_unit

