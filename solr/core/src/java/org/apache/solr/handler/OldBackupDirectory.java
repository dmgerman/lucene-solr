begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_class
DECL|class|OldBackupDirectory
class|class
name|OldBackupDirectory
implements|implements
name|Comparable
argument_list|<
name|OldBackupDirectory
argument_list|>
block|{
DECL|field|dirNamePattern
specifier|private
specifier|static
specifier|final
name|Pattern
name|dirNamePattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^snapshot[.](.*)$"
argument_list|)
decl_stmt|;
DECL|field|basePath
specifier|private
name|URI
name|basePath
decl_stmt|;
DECL|field|dirName
specifier|private
name|String
name|dirName
decl_stmt|;
DECL|field|timestamp
specifier|private
name|Optional
argument_list|<
name|Date
argument_list|>
name|timestamp
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
DECL|method|OldBackupDirectory
specifier|public
name|OldBackupDirectory
parameter_list|(
name|URI
name|basePath
parameter_list|,
name|String
name|dirName
parameter_list|)
block|{
name|this
operator|.
name|dirName
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|dirName
argument_list|)
expr_stmt|;
name|this
operator|.
name|basePath
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
name|Matcher
name|m
init|=
name|dirNamePattern
operator|.
name|matcher
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|timestamp
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|SimpleDateFormat
argument_list|(
name|SnapShooter
operator|.
name|DATE_FMT
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|parse
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|this
operator|.
name|timestamp
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getPath
specifier|public
name|URI
name|getPath
parameter_list|()
block|{
return|return
name|this
operator|.
name|basePath
operator|.
name|resolve
argument_list|(
name|dirName
argument_list|)
return|;
block|}
DECL|method|getDirName
specifier|public
name|String
name|getDirName
parameter_list|()
block|{
return|return
name|dirName
return|;
block|}
DECL|method|getTimestamp
specifier|public
name|Optional
argument_list|<
name|Date
argument_list|>
name|getTimestamp
parameter_list|()
block|{
return|return
name|timestamp
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|OldBackupDirectory
name|that
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|timestamp
operator|.
name|isPresent
argument_list|()
operator|&&
name|that
operator|.
name|timestamp
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|that
operator|.
name|timestamp
operator|.
name|get
argument_list|()
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|timestamp
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
comment|// Use absolute value of path in case the time-stamp is missing on either side.
return|return
name|that
operator|.
name|getPath
argument_list|()
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

