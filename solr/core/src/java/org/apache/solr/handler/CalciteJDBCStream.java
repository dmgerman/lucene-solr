begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSetMetaData
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|JDBCStream
import|;
end_import

begin_comment
comment|/**  * Used with o.a.s.Handler.SQLHandler.  *   * @lucene.internal  */
end_comment

begin_class
DECL|class|CalciteJDBCStream
specifier|public
class|class
name|CalciteJDBCStream
extends|extends
name|JDBCStream
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|CalciteJDBCStream
specifier|public
name|CalciteJDBCStream
parameter_list|(
name|String
name|connectionUrl
parameter_list|,
name|String
name|sqlQuery
parameter_list|,
name|StreamComparator
name|definedSort
parameter_list|,
name|Properties
name|connectionProperties
parameter_list|,
name|String
name|driverClassName
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|connectionUrl
argument_list|,
name|sqlQuery
argument_list|,
name|definedSort
argument_list|,
name|connectionProperties
argument_list|,
name|driverClassName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|determineValueSelector
specifier|protected
name|ResultSetValueSelector
name|determineValueSelector
parameter_list|(
name|int
name|columnIdx
parameter_list|,
name|ResultSetMetaData
name|metadata
parameter_list|)
throws|throws
name|SQLException
block|{
name|ResultSetValueSelector
name|valueSelector
init|=
name|super
operator|.
name|determineValueSelector
argument_list|(
name|columnIdx
argument_list|,
name|metadata
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueSelector
operator|==
literal|null
condition|)
block|{
specifier|final
name|int
name|columnNumber
init|=
name|columnIdx
operator|+
literal|1
decl_stmt|;
specifier|final
name|String
name|columnName
init|=
name|metadata
operator|.
name|getColumnLabel
argument_list|(
name|columnNumber
argument_list|)
decl_stmt|;
specifier|final
name|String
name|className
init|=
name|metadata
operator|.
name|getColumnClassName
argument_list|(
name|columnNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|Array
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|className
argument_list|)
condition|)
block|{
name|valueSelector
operator|=
operator|new
name|ResultSetValueSelector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|selectValue
parameter_list|(
name|ResultSet
name|resultSet
parameter_list|)
throws|throws
name|SQLException
block|{
name|Object
name|o
init|=
name|resultSet
operator|.
name|getObject
argument_list|(
name|columnNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultSet
operator|.
name|wasNull
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|Array
condition|)
block|{
name|Array
name|array
init|=
operator|(
name|Array
operator|)
name|o
decl_stmt|;
return|return
name|array
operator|.
name|getArray
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|o
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|columnName
return|;
block|}
block|}
expr_stmt|;
block|}
block|}
return|return
name|valueSelector
return|;
block|}
block|}
end_class

end_unit

