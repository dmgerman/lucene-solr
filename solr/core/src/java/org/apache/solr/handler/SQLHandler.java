begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|ExceptionStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|JDBCStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|sql
operator|.
name|SolrSchemaFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|SQLHandler
specifier|public
class|class
name|SQLHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|SolrCoreAware
implements|,
name|PermissionNameProvider
block|{
DECL|field|defaultZkhost
specifier|private
specifier|static
name|String
name|defaultZkhost
init|=
literal|null
decl_stmt|;
DECL|field|defaultWorkerCollection
specifier|private
specifier|static
name|String
name|defaultWorkerCollection
init|=
literal|null
decl_stmt|;
DECL|field|logger
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|CoreContainer
name|coreContainer
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|defaultZkhost
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkServerAddress
argument_list|()
expr_stmt|;
name|defaultWorkerCollection
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getPermissionName
specifier|public
name|PermissionNameProvider
operator|.
name|Name
name|getPermissionName
parameter_list|(
name|AuthorizationContext
name|request
parameter_list|)
block|{
return|return
name|PermissionNameProvider
operator|.
name|Name
operator|.
name|READ_PERM
return|;
block|}
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|params
operator|=
name|adjustParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|req
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|String
name|sql
init|=
name|params
operator|.
name|get
argument_list|(
literal|"stmt"
argument_list|)
decl_stmt|;
name|TupleStream
name|tupleStream
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|sql
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"stmt parameter cannot be null"
argument_list|)
throw|;
block|}
name|Properties
name|info
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
literal|"model"
argument_list|,
literal|"inline:{\n"
operator|+
literal|"  \"version\": \"1.0\",\n"
operator|+
literal|"  \"defaultSchema\": \""
operator|+
name|defaultZkhost
operator|+
literal|"\",\n"
operator|+
literal|"  \"schemas\": [\n"
operator|+
literal|"    {\n"
operator|+
literal|"      \"name\": \""
operator|+
name|defaultZkhost
operator|+
literal|"\",\n"
operator|+
literal|"      \"type\": \"custom\",\n"
operator|+
literal|"      \"factory\": \""
operator|+
name|SolrSchemaFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|"\",\n"
operator|+
literal|"      \"operand\": {\n"
operator|+
literal|"        \"zk\": \""
operator|+
name|defaultZkhost
operator|+
literal|"\"\n"
operator|+
literal|"      }\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|info
operator|.
name|setProperty
argument_list|(
literal|"lex"
argument_list|,
literal|"MYSQL"
argument_list|)
expr_stmt|;
name|tupleStream
operator|=
operator|new
name|StreamHandler
operator|.
name|TimerStream
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
operator|new
name|JDBCStream
argument_list|(
literal|"jdbc:calcite:"
argument_list|,
name|sql
argument_list|,
literal|null
argument_list|,
name|info
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"result-set"
argument_list|,
name|tupleStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//Catch the SQL parsing and query transformation exceptions.
if|if
condition|(
name|tupleStream
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|SolrException
operator|.
name|log
argument_list|(
name|logger
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"result-set"
argument_list|,
operator|new
name|StreamHandler
operator|.
name|DummyErrorStream
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|adjustParams
specifier|private
name|SolrParams
name|adjustParams
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|ModifiableSolrParams
name|adjustedParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|adjustedParams
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|adjustedParams
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|OMIT_HEADER
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|adjustedParams
return|;
block|}
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"SQLHandler"
return|;
block|}
DECL|method|getSource
specifier|public
name|String
name|getSource
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

