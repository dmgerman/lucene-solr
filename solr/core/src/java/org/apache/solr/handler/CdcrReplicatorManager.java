begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
operator|.
name|Builder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|CdcrUpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|RESPONSE_STATUS
import|;
end_import

begin_class
DECL|class|CdcrReplicatorManager
class|class
name|CdcrReplicatorManager
implements|implements
name|CdcrStateManager
operator|.
name|CdcrStateObserver
block|{
DECL|field|MAX_BOOTSTRAP_ATTEMPTS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BOOTSTRAP_ATTEMPTS
init|=
literal|5
decl_stmt|;
DECL|field|BOOTSTRAP_RETRY_DELAY_MS
specifier|private
specifier|static
specifier|final
name|int
name|BOOTSTRAP_RETRY_DELAY_MS
init|=
literal|2000
decl_stmt|;
comment|// 6 hours is hopefully long enough for most indexes
DECL|field|BOOTSTRAP_TIMEOUT_SECONDS
specifier|private
specifier|static
specifier|final
name|long
name|BOOTSTRAP_TIMEOUT_SECONDS
init|=
literal|6L
operator|*
literal|3600L
operator|*
literal|3600L
decl_stmt|;
DECL|field|replicatorStates
specifier|private
name|List
argument_list|<
name|CdcrReplicatorState
argument_list|>
name|replicatorStates
decl_stmt|;
DECL|field|scheduler
specifier|private
specifier|final
name|CdcrReplicatorScheduler
name|scheduler
decl_stmt|;
DECL|field|processStateManager
specifier|private
name|CdcrProcessStateManager
name|processStateManager
decl_stmt|;
DECL|field|leaderStateManager
specifier|private
name|CdcrLeaderStateManager
name|leaderStateManager
decl_stmt|;
DECL|field|core
specifier|private
name|SolrCore
name|core
decl_stmt|;
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|field|bootstrapExecutor
specifier|private
name|ExecutorService
name|bootstrapExecutor
decl_stmt|;
DECL|field|bootstrapStatusRunnable
specifier|private
specifier|volatile
name|BootstrapStatusRunnable
name|bootstrapStatusRunnable
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|CdcrReplicatorManager
name|CdcrReplicatorManager
parameter_list|(
specifier|final
name|SolrCore
name|core
parameter_list|,
name|String
name|path
parameter_list|,
name|SolrParams
name|replicatorConfiguration
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|SolrParams
argument_list|>
argument_list|>
name|replicasConfiguration
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
comment|// create states
name|replicatorStates
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|myCollection
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|SolrParams
argument_list|>
name|targets
init|=
name|replicasConfiguration
operator|.
name|get
argument_list|(
name|myCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|targets
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|SolrParams
name|params
range|:
name|targets
control|)
block|{
name|String
name|zkHost
init|=
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|ZK_HOST_PARAM
argument_list|)
decl_stmt|;
name|String
name|targetCollection
init|=
name|params
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|TARGET_COLLECTION_PARAM
argument_list|)
decl_stmt|;
name|CloudSolrClient
name|client
init|=
operator|new
name|Builder
argument_list|()
operator|.
name|withZkHost
argument_list|(
name|zkHost
argument_list|)
operator|.
name|sendUpdatesOnlyToShardLeaders
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|client
operator|.
name|setDefaultCollection
argument_list|(
name|targetCollection
argument_list|)
expr_stmt|;
name|replicatorStates
operator|.
name|add
argument_list|(
operator|new
name|CdcrReplicatorState
argument_list|(
name|targetCollection
argument_list|,
name|zkHost
argument_list|,
name|client
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|scheduler
operator|=
operator|new
name|CdcrReplicatorScheduler
argument_list|(
name|this
argument_list|,
name|replicatorConfiguration
argument_list|)
expr_stmt|;
block|}
DECL|method|setProcessStateManager
name|void
name|setProcessStateManager
parameter_list|(
specifier|final
name|CdcrProcessStateManager
name|processStateManager
parameter_list|)
block|{
name|this
operator|.
name|processStateManager
operator|=
name|processStateManager
expr_stmt|;
name|this
operator|.
name|processStateManager
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|method|setLeaderStateManager
name|void
name|setLeaderStateManager
parameter_list|(
specifier|final
name|CdcrLeaderStateManager
name|leaderStateManager
parameter_list|)
block|{
name|this
operator|.
name|leaderStateManager
operator|=
name|leaderStateManager
expr_stmt|;
name|this
operator|.
name|leaderStateManager
operator|.
name|register
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**    *<p>    * Inform the replicator manager of a change of state, and tell him to update its own state.    *</p>    *<p>    * If we are the leader and the process state is STARTED, we need to initialise the log readers and start the    * scheduled thread poll.    * Otherwise, if the process state is STOPPED or if we are not the leader, we need to close the log readers and stop    * the thread pool.    *</p>    *<p>    * This method is synchronised as it can both be called by the leaderStateManager and the processStateManager.    *</p>    */
annotation|@
name|Override
DECL|method|stateUpdate
specifier|public
specifier|synchronized
name|void
name|stateUpdate
parameter_list|()
block|{
if|if
condition|(
name|leaderStateManager
operator|.
name|amILeader
argument_list|()
operator|&&
name|processStateManager
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
name|CdcrParams
operator|.
name|ProcessState
operator|.
name|STARTED
argument_list|)
condition|)
block|{
if|if
condition|(
name|replicatorStates
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|bootstrapExecutor
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareFixedThreadPool
argument_list|(
name|replicatorStates
operator|.
name|size
argument_list|()
argument_list|,
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"cdcr-bootstrap-status"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|initLogReaders
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|bootstrapExecutor
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bootstrapStatusRunnable
argument_list|)
expr_stmt|;
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|bootstrapExecutor
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|closeLogReaders
argument_list|()
expr_stmt|;
block|}
DECL|method|getReplicatorStates
name|List
argument_list|<
name|CdcrReplicatorState
argument_list|>
name|getReplicatorStates
parameter_list|()
block|{
return|return
name|replicatorStates
return|;
block|}
DECL|method|initLogReaders
specifier|private
name|void
name|initLogReaders
parameter_list|()
block|{
name|String
name|collectionName
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
decl_stmt|;
name|CdcrUpdateLog
name|ulog
init|=
operator|(
name|CdcrUpdateLog
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorStates
control|)
block|{
name|state
operator|.
name|closeLogReader
argument_list|()
expr_stmt|;
try|try
block|{
name|long
name|checkpoint
init|=
name|this
operator|.
name|getCheckpoint
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Create new update log reader for target {} with checkpoint {} @ {}:{}"
argument_list|,
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|checkpoint
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|boolean
name|seek
init|=
name|reader
operator|.
name|seek
argument_list|(
name|checkpoint
argument_list|)
decl_stmt|;
name|state
operator|.
name|init
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|seek
condition|)
block|{
comment|// targetVersion is lower than the oldest known entry.
comment|// In this scenario, it probably means that there is a gap in the updates log.
comment|// the best we can do here is to bootstrap the target leader by replicating the full index
specifier|final
name|String
name|targetCollection
init|=
name|state
operator|.
name|getTargetCollection
argument_list|()
decl_stmt|;
name|state
operator|.
name|setBootstrapInProgress
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to bootstrap target collection: {}, shard: {}"
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|bootstrapStatusRunnable
operator|=
operator|new
name|BootstrapStatusRunnable
argument_list|(
name|core
argument_list|,
name|state
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Submitting bootstrap task to executor"
argument_list|)
expr_stmt|;
try|try
block|{
name|bootstrapExecutor
operator|.
name|submit
argument_list|(
name|bootstrapStatusRunnable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to submit bootstrap call to executor"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SolrServerException
decl||
name|SolrException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to instantiate the log reader for target collection "
operator|+
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Thread interrupted while instantiate the log reader for target collection "
operator|+
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|getCheckpoint
specifier|private
name|long
name|getCheckpoint
parameter_list|(
name|CdcrReplicatorState
name|state
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|NamedList
name|response
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
decl_stmt|;
return|return
operator|(
name|Long
operator|)
name|response
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
return|;
block|}
DECL|method|closeLogReaders
name|void
name|closeLogReaders
parameter_list|()
block|{
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorStates
control|)
block|{
name|state
operator|.
name|closeLogReader
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Shutdown all the {@link org.apache.solr.handler.CdcrReplicatorState} by closing their    * {@link org.apache.solr.client.solrj.impl.CloudSolrClient} and    * {@link org.apache.solr.update.CdcrUpdateLog.CdcrLogReader}.    */
DECL|method|shutdown
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|bootstrapExecutor
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|bootstrapStatusRunnable
argument_list|)
expr_stmt|;
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|bootstrapExecutor
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CdcrReplicatorState
name|state
range|:
name|replicatorStates
control|)
block|{
name|state
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|replicatorStates
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|class|BootstrapStatusRunnable
specifier|private
class|class
name|BootstrapStatusRunnable
implements|implements
name|Runnable
implements|,
name|Closeable
block|{
DECL|field|state
specifier|private
specifier|final
name|CdcrReplicatorState
name|state
decl_stmt|;
DECL|field|targetCollection
specifier|private
specifier|final
name|String
name|targetCollection
decl_stmt|;
DECL|field|shard
specifier|private
specifier|final
name|String
name|shard
decl_stmt|;
DECL|field|collectionName
specifier|private
specifier|final
name|String
name|collectionName
decl_stmt|;
DECL|field|ulog
specifier|private
specifier|final
name|CdcrUpdateLog
name|ulog
decl_stmt|;
DECL|field|myCoreUrl
specifier|private
specifier|final
name|String
name|myCoreUrl
decl_stmt|;
DECL|field|closed
specifier|private
specifier|volatile
name|boolean
name|closed
init|=
literal|false
decl_stmt|;
DECL|method|BootstrapStatusRunnable
name|BootstrapStatusRunnable
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|CdcrReplicatorState
name|state
parameter_list|)
block|{
name|this
operator|.
name|collectionName
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getCollectionName
argument_list|()
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getShardId
argument_list|()
expr_stmt|;
name|this
operator|.
name|ulog
operator|=
operator|(
name|CdcrUpdateLog
operator|)
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|targetCollection
operator|=
name|state
operator|.
name|getTargetCollection
argument_list|()
expr_stmt|;
name|String
name|baseUrl
init|=
name|core
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|this
operator|.
name|myCoreUrl
operator|=
name|ZkCoreNodeProps
operator|.
name|getCoreUrl
argument_list|(
name|baseUrl
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closed
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|Replica
name|leader
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|targetCollection
argument_list|,
name|shard
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// assume same shard exists on target
name|String
name|leaderCoreUrl
init|=
name|leader
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|leaderCoreUrl
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|sendCdcrCommand
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|CANCEL_BOOTSTRAP
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error sending cancel bootstrap message to target collection: {} shard: {} leader: {}"
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|,
name|leaderCoreUrl
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Interrupted while closing BootstrapStatusRunnable"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|int
name|retries
init|=
literal|1
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|closed
operator|&&
name|sendBootstrapCommand
argument_list|()
operator|!=
name|BootstrapStatus
operator|.
name|SUBMITTED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|BOOTSTRAP_RETRY_DELAY_MS
argument_list|)
expr_stmt|;
block|}
name|TimeOut
name|timeOut
init|=
operator|new
name|TimeOut
argument_list|(
name|BOOTSTRAP_TIMEOUT_SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|timeOut
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
if|if
condition|(
name|closed
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Cancelling waiting for bootstrap on target: {} shard: {} to complete"
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|state
operator|.
name|setBootstrapInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|BootstrapStatus
name|status
init|=
name|getBoostrapStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|BootstrapStatus
operator|.
name|RUNNING
condition|)
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"CDCR bootstrap running for {} seconds, sleeping for {} ms"
argument_list|,
name|BOOTSTRAP_TIMEOUT_SECONDS
operator|-
name|timeOut
operator|.
name|timeLeft
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|,
name|BOOTSTRAP_RETRY_DELAY_MS
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|BOOTSTRAP_RETRY_DELAY_MS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|BootstrapStatus
operator|.
name|COMPLETED
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"CDCR bootstrap successful in {} seconds"
argument_list|,
name|BOOTSTRAP_TIMEOUT_SECONDS
operator|-
name|timeOut
operator|.
name|timeLeft
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|checkpoint
init|=
name|CdcrReplicatorManager
operator|.
name|this
operator|.
name|getCheckpoint
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Create new update log reader for target {} with checkpoint {} @ {}:{}"
argument_list|,
name|state
operator|.
name|getTargetCollection
argument_list|()
argument_list|,
name|checkpoint
argument_list|,
name|collectionName
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|CdcrUpdateLog
operator|.
name|CdcrLogReader
name|reader1
init|=
name|ulog
operator|.
name|newLogReader
argument_list|()
decl_stmt|;
name|reader1
operator|.
name|seek
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|BootstrapStatus
operator|.
name|FAILED
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"CDCR bootstrap failed in {} seconds"
argument_list|,
name|BOOTSTRAP_TIMEOUT_SECONDS
operator|-
name|timeOut
operator|.
name|timeLeft
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// let's retry a fixed number of times before giving up
if|if
condition|(
name|retries
operator|>=
name|MAX_BOOTSTRAP_ATTEMPTS
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to bootstrap the target collection: {}, shard: {} even after {} retries"
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|,
name|retries
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Retry: {} - Attempting to bootstrap target collection: {} shard: {}"
argument_list|,
name|retries
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|closed
operator|&&
name|sendBootstrapCommand
argument_list|()
operator|!=
name|BootstrapStatus
operator|.
name|SUBMITTED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|BOOTSTRAP_RETRY_DELAY_MS
argument_list|)
expr_stmt|;
block|}
name|timeOut
operator|=
operator|new
name|TimeOut
argument_list|(
name|BOOTSTRAP_TIMEOUT_SECONDS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// reset the timer
name|retries
operator|++
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|BootstrapStatus
operator|.
name|NOTFOUND
condition|)
block|{
comment|// the leader of the target shard may have changed and therefore there is no record of the
comment|// bootstrap process so we must retry the operation
while|while
condition|(
operator|!
name|closed
operator|&&
name|sendBootstrapCommand
argument_list|()
operator|!=
name|BootstrapStatus
operator|.
name|SUBMITTED
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|BOOTSTRAP_RETRY_DELAY_MS
argument_list|)
expr_stmt|;
block|}
name|retries
operator|=
literal|1
expr_stmt|;
name|timeOut
operator|=
operator|new
name|TimeOut
argument_list|(
literal|6L
operator|*
literal|3600L
operator|*
literal|3600L
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// reset the timer
block|}
elseif|else
if|if
condition|(
name|status
operator|==
name|BootstrapStatus
operator|.
name|UNKNOWN
condition|)
block|{
comment|// we were not able to query the status on the remote end
comment|// so just sleep for a bit and try again
name|Thread
operator|.
name|sleep
argument_list|(
name|BOOTSTRAP_RETRY_DELAY_MS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bootstrap thread interrupted"
argument_list|)
expr_stmt|;
name|state
operator|.
name|reportError
argument_list|(
name|CdcrReplicatorState
operator|.
name|ErrorType
operator|.
name|INTERNAL
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|SolrServerException
decl||
name|SolrException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to bootstrap the target collection "
operator|+
name|targetCollection
operator|+
literal|" shard: "
operator|+
name|shard
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|state
operator|.
name|reportError
argument_list|(
name|CdcrReplicatorState
operator|.
name|ErrorType
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Bootstrap successful, giving the go-ahead to replicator"
argument_list|)
expr_stmt|;
name|state
operator|.
name|setBootstrapInProgress
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|sendBootstrapCommand
specifier|private
name|BootstrapStatus
name|sendBootstrapCommand
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|Replica
name|leader
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|targetCollection
argument_list|,
name|shard
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// assume same shard exists on target
name|String
name|leaderCoreUrl
init|=
name|leader
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|leaderCoreUrl
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Attempting to bootstrap target collection: {} shard: {} leader: {}"
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|,
name|leaderCoreUrl
argument_list|)
expr_stmt|;
try|try
block|{
name|NamedList
name|response
init|=
name|sendCdcrCommand
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|BOOTSTRAP
argument_list|,
name|ReplicationHandler
operator|.
name|MASTER_URL
argument_list|,
name|myCoreUrl
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"CDCR Bootstrap response: {}"
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|String
name|status
init|=
name|response
operator|.
name|get
argument_list|(
name|RESPONSE_STATUS
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|BootstrapStatus
operator|.
name|valueOf
argument_list|(
name|status
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception submitting bootstrap request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BootstrapStatus
operator|.
name|UNKNOWN
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"There shouldn't be an IOException while closing but there was!"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|BootstrapStatus
operator|.
name|UNKNOWN
return|;
block|}
DECL|method|getBoostrapStatus
specifier|private
name|BootstrapStatus
name|getBoostrapStatus
parameter_list|()
throws|throws
name|InterruptedException
block|{
try|try
block|{
name|Replica
name|leader
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
name|targetCollection
argument_list|,
name|shard
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
comment|// assume same shard exists on target
name|String
name|leaderCoreUrl
init|=
name|leader
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|state
operator|.
name|getClient
argument_list|()
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|leaderCoreUrl
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|NamedList
name|response
init|=
name|sendCdcrCommand
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|BOOTSTRAP_STATUS
argument_list|)
decl_stmt|;
name|String
name|status
init|=
operator|(
name|String
operator|)
name|response
operator|.
name|get
argument_list|(
name|RESPONSE_STATUS
argument_list|)
decl_stmt|;
name|BootstrapStatus
name|bootstrapStatus
init|=
name|BootstrapStatus
operator|.
name|valueOf
argument_list|(
name|status
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bootstrapStatus
operator|==
name|BootstrapStatus
operator|.
name|RUNNING
condition|)
block|{
return|return
name|BootstrapStatus
operator|.
name|RUNNING
return|;
block|}
elseif|else
if|if
condition|(
name|bootstrapStatus
operator|==
name|BootstrapStatus
operator|.
name|COMPLETED
condition|)
block|{
return|return
name|BootstrapStatus
operator|.
name|COMPLETED
return|;
block|}
elseif|else
if|if
condition|(
name|bootstrapStatus
operator|==
name|BootstrapStatus
operator|.
name|FAILED
condition|)
block|{
return|return
name|BootstrapStatus
operator|.
name|FAILED
return|;
block|}
elseif|else
if|if
condition|(
name|bootstrapStatus
operator|==
name|BootstrapStatus
operator|.
name|NOTFOUND
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Bootstrap process was not found on target collection: {} shard: {}, leader: {}"
argument_list|,
name|targetCollection
argument_list|,
name|shard
argument_list|,
name|leaderCoreUrl
argument_list|)
expr_stmt|;
return|return
name|BootstrapStatus
operator|.
name|NOTFOUND
return|;
block|}
elseif|else
if|if
condition|(
name|bootstrapStatus
operator|==
name|BootstrapStatus
operator|.
name|CANCELLED
condition|)
block|{
return|return
name|BootstrapStatus
operator|.
name|CANCELLED
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown status: "
operator|+
name|status
operator|+
literal|" returned by BOOTSTRAP_STATUS command"
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Exception during bootstrap status request"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BootstrapStatus
operator|.
name|UNKNOWN
return|;
block|}
block|}
block|}
DECL|method|sendCdcrCommand
specifier|private
name|NamedList
name|sendCdcrCommand
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|CdcrParams
operator|.
name|CdcrAction
name|action
parameter_list|,
name|String
modifier|...
name|params
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/cdcr"
argument_list|)
expr_stmt|;
name|solrParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|solrParams
operator|.
name|set
argument_list|(
name|params
index|[
name|i
index|]
argument_list|,
name|params
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|solrParams
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
return|;
block|}
DECL|enum|BootstrapStatus
specifier|private
enum|enum
name|BootstrapStatus
block|{
DECL|enum constant|SUBMITTED
name|SUBMITTED
block|,
DECL|enum constant|RUNNING
name|RUNNING
block|,
DECL|enum constant|COMPLETED
name|COMPLETED
block|,
DECL|enum constant|FAILED
name|FAILED
block|,
DECL|enum constant|NOTFOUND
name|NOTFOUND
block|,
DECL|enum constant|CANCELLED
name|CANCELLED
block|,
DECL|enum constant|UNKNOWN
name|UNKNOWN
block|}
block|}
end_class

end_unit

