begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.sql
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultipleFieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|MultipleFieldEqualitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|StreamEqualitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|AndEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|BooleanEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|EqualsEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|GreaterThanEqualToEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|GreaterThanEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|LessThanEqualToEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|LessThanEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|NotEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|OrEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|RawValueEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_comment
comment|/**  * Table based on a Solr collection  */
end_comment

begin_class
DECL|class|SolrTable
class|class
name|SolrTable
extends|extends
name|AbstractQueryableTable
implements|implements
name|TranslatableTable
block|{
DECL|field|DEFAULT_QUERY
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_QUERY
init|=
literal|"*:*"
decl_stmt|;
DECL|field|DEFAULT_VERSION_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_VERSION_FIELD
init|=
literal|"_version_"
decl_stmt|;
DECL|field|collection
specifier|private
specifier|final
name|String
name|collection
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|SolrSchema
name|schema
decl_stmt|;
DECL|field|protoRowType
specifier|private
name|RelProtoDataType
name|protoRowType
decl_stmt|;
DECL|method|SolrTable
name|SolrTable
parameter_list|(
name|SolrSchema
name|schema
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SolrTable {"
operator|+
name|collection
operator|+
literal|"}"
return|;
block|}
DECL|method|getRowType
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
if|if
condition|(
name|protoRowType
operator|==
literal|null
condition|)
block|{
name|protoRowType
operator|=
name|schema
operator|.
name|getRelDataType
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
return|return
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
DECL|method|query
specifier|private
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|properties
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Executes a Solr query on the underlying table.    *    * @param properties Connections properties    * @param fields List of fields to project    * @param query A string for the query    * @return Enumerator of results    */
DECL|method|query
specifier|private
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|buckets
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metricPairs
parameter_list|,
specifier|final
name|String
name|limit
parameter_list|,
specifier|final
name|String
name|negativeQuery
parameter_list|,
specifier|final
name|String
name|havingPredicate
parameter_list|)
block|{
comment|// SolrParams should be a ModifiableParams instead of a map
name|boolean
name|mapReduce
init|=
literal|"map_reduce"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"aggregationMode"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|negative
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|negativeQuery
argument_list|)
decl_stmt|;
name|String
name|q
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|q
operator|=
name|DEFAULT_QUERY
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|negative
condition|)
block|{
name|q
operator|=
name|DEFAULT_QUERY
operator|+
literal|" AND "
operator|+
name|query
expr_stmt|;
block|}
else|else
block|{
name|q
operator|=
name|query
expr_stmt|;
block|}
block|}
name|TupleStream
name|tupleStream
decl_stmt|;
name|String
name|zk
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"zk"
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|metricPairs
operator|.
name|isEmpty
argument_list|()
operator|&&
name|buckets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tupleStream
operator|=
name|handleSelect
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|q
argument_list|,
name|fields
argument_list|,
name|orders
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|buckets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tupleStream
operator|=
name|handleStats
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|q
argument_list|,
name|metricPairs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|mapReduce
condition|)
block|{
name|tupleStream
operator|=
name|handleGroupByMapReduce
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|properties
argument_list|,
name|fields
argument_list|,
name|q
argument_list|,
name|orders
argument_list|,
name|buckets
argument_list|,
name|metricPairs
argument_list|,
name|limit
argument_list|,
name|havingPredicate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tupleStream
operator|=
name|handleGroupByFacet
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|fields
argument_list|,
name|q
argument_list|,
name|orders
argument_list|,
name|buckets
argument_list|,
name|metricPairs
argument_list|,
name|limit
argument_list|,
name|havingPredicate
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|TupleStream
name|finalStream
init|=
name|tupleStream
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
comment|// Use original fields list to make sure only the fields specified are enumerated
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|SolrEnumerator
argument_list|(
name|finalStream
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|bucketSortComp
specifier|private
specifier|static
name|StreamComparator
name|bucketSortComp
parameter_list|(
name|List
argument_list|<
name|Bucket
argument_list|>
name|buckets
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dirs
parameter_list|)
block|{
name|FieldComparator
index|[]
name|comps
init|=
operator|new
name|FieldComparator
index|[
name|buckets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ComparatorOrder
name|comparatorOrder
init|=
name|ComparatorOrder
operator|.
name|fromString
argument_list|(
name|dirs
operator|.
name|get
argument_list|(
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|sortKey
init|=
name|buckets
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|comps
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
name|sortKey
argument_list|,
name|comparatorOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comps
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|comps
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultipleFieldComparator
argument_list|(
name|comps
argument_list|)
return|;
block|}
block|}
DECL|method|bucketSortComp
specifier|private
specifier|static
name|StreamComparator
name|bucketSortComp
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|FieldComparator
index|[]
name|comps
init|=
operator|new
name|FieldComparator
index|[
name|buckets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|ComparatorOrder
name|comparatorOrder
init|=
name|ascDescComp
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|String
name|sortKey
init|=
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|comps
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
name|sortKey
argument_list|,
name|comparatorOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comps
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|comps
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultipleFieldComparator
argument_list|(
name|comps
argument_list|)
return|;
block|}
block|}
DECL|method|getSortDirection
specifier|private
name|String
name|getSortDirection
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|order
parameter_list|)
block|{
name|String
name|direction
init|=
name|order
operator|.
name|getValue
argument_list|()
decl_stmt|;
return|return
name|direction
operator|==
literal|null
condition|?
literal|"asc"
else|:
name|direction
return|;
block|}
DECL|method|getComp
specifier|private
name|StreamComparator
name|getComp
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|)
block|{
name|FieldComparator
index|[]
name|comps
init|=
operator|new
name|FieldComparator
index|[
name|orders
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|order
init|=
name|orders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|direction
init|=
name|getSortDirection
argument_list|(
name|order
argument_list|)
decl_stmt|;
name|ComparatorOrder
name|comparatorOrder
init|=
name|ComparatorOrder
operator|.
name|fromString
argument_list|(
name|direction
argument_list|)
decl_stmt|;
name|String
name|sortKey
init|=
name|order
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|comps
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
name|sortKey
argument_list|,
name|comparatorOrder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|comps
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|comps
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|MultipleFieldComparator
argument_list|(
name|comps
argument_list|)
return|;
block|}
block|}
DECL|method|buildMetrics
specifier|private
name|List
argument_list|<
name|Metric
argument_list|>
name|buildMetrics
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metricPairs
parameter_list|,
name|boolean
name|ifEmptyCount
parameter_list|)
block|{
name|List
argument_list|<
name|Metric
argument_list|>
name|metrics
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|metricPairs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|metrics
operator|.
name|addAll
argument_list|(
name|metricPairs
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|getMetric
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|metrics
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|&&
name|ifEmptyCount
condition|)
block|{
name|metrics
operator|.
name|add
argument_list|(
operator|new
name|CountMetric
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|metrics
return|;
block|}
DECL|method|getMetric
specifier|private
name|Metric
name|getMetric
parameter_list|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metricPair
parameter_list|)
block|{
switch|switch
condition|(
name|metricPair
operator|.
name|getKey
argument_list|()
condition|)
block|{
case|case
literal|"COUNT"
case|:
return|return
operator|new
name|CountMetric
argument_list|(
name|metricPair
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
case|case
literal|"SUM"
case|:
case|case
literal|"$SUM0"
case|:
return|return
operator|new
name|SumMetric
argument_list|(
name|metricPair
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
case|case
literal|"MIN"
case|:
return|return
operator|new
name|MinMetric
argument_list|(
name|metricPair
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
case|case
literal|"MAX"
case|:
return|return
operator|new
name|MaxMetric
argument_list|(
name|metricPair
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
case|case
literal|"AVG"
case|:
return|return
operator|new
name|MeanMetric
argument_list|(
name|metricPair
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|metricPair
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
DECL|method|handleSelect
specifier|private
name|TupleStream
name|handleSelect
parameter_list|(
name|String
name|zk
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|,
name|String
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|query
argument_list|)
expr_stmt|;
comment|//Validate the fields
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|entry
range|:
name|fields
control|)
block|{
name|String
name|fname
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|limit
operator|==
literal|null
operator|&&
literal|"score"
operator|.
name|equals
argument_list|(
name|fname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"score is not a valid field for unlimited queries."
argument_list|)
throw|;
block|}
if|if
condition|(
name|fname
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"* is not supported for column selection."
argument_list|)
throw|;
block|}
block|}
name|String
name|fl
init|=
name|getFields
argument_list|(
name|fields
argument_list|)
decl_stmt|;
if|if
condition|(
name|orders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|getSort
argument_list|(
name|orders
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|limit
operator|==
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
literal|"_version_ desc"
argument_list|)
expr_stmt|;
name|fl
operator|=
name|fl
operator|+
literal|",_version_"
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
literal|"score desc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fl
operator|.
name|indexOf
argument_list|(
literal|"score"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|fl
operator|=
name|fl
operator|+
literal|",score"
expr_stmt|;
block|}
block|}
block|}
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|fl
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
operator|new
name|LimitStream
argument_list|(
operator|new
name|CloudSolrStream
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
name|params
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
return|return
operator|new
name|CloudSolrStream
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
return|;
block|}
block|}
DECL|method|getSort
specifier|private
name|String
name|getSort
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|pair
range|:
name|orders
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|pair
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getSingleSort
specifier|private
name|String
name|getSingleSort
parameter_list|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|order
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|order
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|order
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFields
specifier|private
name|String
name|getFields
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFields
specifier|private
name|String
name|getFields
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|fieldSet
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getFieldSet
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getFieldSet
parameter_list|(
name|Metric
index|[]
name|metrics
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|)
block|{
name|HashSet
name|set
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Metric
name|metric
range|:
name|metrics
control|)
block|{
for|for
control|(
name|String
name|column
range|:
name|metric
operator|.
name|getColumns
argument_list|()
control|)
block|{
name|set
operator|.
name|add
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|field
operator|.
name|getKey
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|set
operator|.
name|add
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|set
return|;
block|}
DECL|method|getSortDirection
specifier|private
specifier|static
name|String
name|getSortDirection
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|)
block|{
if|if
condition|(
name|orders
operator|!=
literal|null
operator|&&
name|orders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|item
range|:
name|orders
control|)
block|{
return|return
name|item
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|"asc"
return|;
block|}
DECL|method|bucketSort
specifier|private
specifier|static
name|String
name|bucketSort
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|,
name|String
name|dir
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|getPartitionKeys
specifier|private
specifier|static
name|String
name|getPartitionKeys
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|sortsEqual
specifier|private
specifier|static
name|boolean
name|sortsEqual
parameter_list|(
name|Bucket
index|[]
name|buckets
parameter_list|,
name|String
name|direction
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|)
block|{
if|if
condition|(
name|buckets
operator|.
name|length
operator|!=
name|orders
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Bucket
name|bucket
init|=
name|buckets
index|[
name|i
index|]
decl_stmt|;
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|order
init|=
name|orders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bucket
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|order
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|order
operator|.
name|getValue
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
name|direction
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|handleGroupByMapReduce
specifier|private
name|TupleStream
name|handleGroupByMapReduce
parameter_list|(
name|String
name|zk
parameter_list|,
name|String
name|collection
parameter_list|,
name|Properties
name|properties
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|_buckets
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metricPairs
parameter_list|,
specifier|final
name|String
name|limit
parameter_list|,
specifier|final
name|String
name|havingPredicate
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numWorkers
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
name|buildBuckets
argument_list|(
name|_buckets
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
name|buildMetrics
argument_list|(
name|metricPairs
argument_list|,
literal|false
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Metric
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|handleSelectDistinctMapReduce
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|properties
argument_list|,
name|fields
argument_list|,
name|query
argument_list|,
name|orders
argument_list|,
name|buckets
argument_list|,
name|limit
argument_list|)
return|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|fieldSet
init|=
name|getFieldSet
argument_list|(
name|metrics
argument_list|,
name|fields
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Group by queries must include atleast one aggregate function."
argument_list|)
throw|;
block|}
name|String
name|fl
init|=
name|getFields
argument_list|(
name|fieldSet
argument_list|)
decl_stmt|;
name|String
name|sortDirection
init|=
name|getSortDirection
argument_list|(
name|orders
argument_list|)
decl_stmt|;
name|String
name|sort
init|=
name|bucketSort
argument_list|(
name|buckets
argument_list|,
name|sortDirection
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|fl
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|CommonParams
operator|.
name|JAVABIN
argument_list|)
expr_stmt|;
comment|//Always use the /export handler for Group By Queries because it requires exporting full result sets.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numWorkers
operator|>
literal|1
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"partitionKeys"
argument_list|,
name|getPartitionKeys
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"sort"
argument_list|,
name|sort
argument_list|)
expr_stmt|;
name|TupleStream
name|tupleStream
init|=
literal|null
decl_stmt|;
name|CloudSolrStream
name|cstream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|RollupStream
argument_list|(
name|cstream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"and"
argument_list|,
name|AndEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"or"
argument_list|,
name|OrEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"not"
argument_list|,
name|NotEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"eq"
argument_list|,
name|EqualsEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gt"
argument_list|,
name|GreaterThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lt"
argument_list|,
name|LessThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"val"
argument_list|,
name|RawValueEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lteq"
argument_list|,
name|LessThanEqualToEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"having"
argument_list|,
name|HavingStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gteq"
argument_list|,
name|GreaterThanEqualToEvaluator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|havingPredicate
operator|!=
literal|null
condition|)
block|{
name|BooleanEvaluator
name|booleanOperation
init|=
operator|(
name|BooleanEvaluator
operator|)
name|factory
operator|.
name|constructEvaluator
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
name|havingPredicate
argument_list|)
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|HavingStream
argument_list|(
name|tupleStream
argument_list|,
name|booleanOperation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|numWorkers
operator|>
literal|1
condition|)
block|{
comment|// Do the rollups in parallel
comment|// Maintain the sort of the Tuples coming from the workers.
name|StreamComparator
name|comp
init|=
name|bucketSortComp
argument_list|(
name|buckets
argument_list|,
name|sortDirection
argument_list|)
decl_stmt|;
name|ParallelStream
name|parallelStream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|tupleStream
argument_list|,
name|numWorkers
argument_list|,
name|comp
argument_list|)
decl_stmt|;
name|parallelStream
operator|.
name|setStreamFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|tupleStream
operator|=
name|parallelStream
expr_stmt|;
block|}
comment|//TODO: Currently we are not pushing down the having clause.
comment|//      We need to push down the having clause to ensure that LIMIT does not cut off records prior to the having filter.
if|if
condition|(
name|orders
operator|!=
literal|null
operator|&&
name|orders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|sortsEqual
argument_list|(
name|buckets
argument_list|,
name|sortDirection
argument_list|,
name|orders
argument_list|)
condition|)
block|{
name|int
name|lim
init|=
operator|(
name|limit
operator|==
literal|null
operator|)
condition|?
literal|100
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
decl_stmt|;
name|StreamComparator
name|comp
init|=
name|getComp
argument_list|(
name|orders
argument_list|)
decl_stmt|;
comment|//Rank the Tuples
comment|//If parallel stream is used ALL the Rolled up tuples from the workers will be ranked
comment|//Providing a true Top or Bottom.
name|tupleStream
operator|=
operator|new
name|RankStream
argument_list|(
name|tupleStream
argument_list|,
name|lim
argument_list|,
name|comp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Sort is the same as the same as the underlying stream
comment|// Only need to limit the result, not Rank the result
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|LimitStream
argument_list|(
name|tupleStream
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//No order by, check for limit
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|LimitStream
argument_list|(
name|tupleStream
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tupleStream
return|;
block|}
DECL|method|buildBuckets
specifier|private
name|Bucket
index|[]
name|buildBuckets
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|buckets
parameter_list|,
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|)
block|{
name|Bucket
index|[]
name|bucketsArray
init|=
operator|new
name|Bucket
index|[
name|buckets
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
name|field
range|:
name|fields
control|)
block|{
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|buckets
operator|.
name|contains
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
name|bucketsArray
index|[
name|i
operator|++
index|]
operator|=
operator|new
name|Bucket
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bucketsArray
return|;
block|}
DECL|method|handleGroupByFacet
specifier|private
name|TupleStream
name|handleGroupByFacet
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|bucketFields
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metricPairs
parameter_list|,
specifier|final
name|String
name|lim
parameter_list|,
specifier|final
name|String
name|havingPredicate
parameter_list|)
throws|throws
name|IOException
block|{
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|Bucket
index|[]
name|buckets
init|=
name|buildBuckets
argument_list|(
name|bucketFields
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
name|buildMetrics
argument_list|(
name|metricPairs
argument_list|,
literal|true
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Metric
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|metrics
operator|=
operator|new
name|Metric
index|[
literal|1
index|]
expr_stmt|;
name|metrics
index|[
literal|0
index|]
operator|=
operator|new
name|CountMetric
argument_list|()
expr_stmt|;
block|}
name|int
name|limit
init|=
name|lim
operator|!=
literal|null
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|lim
argument_list|)
else|:
literal|1000
decl_stmt|;
name|FieldComparator
index|[]
name|sorts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|orders
operator|==
literal|null
operator|||
name|orders
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sorts
operator|=
operator|new
name|FieldComparator
index|[
name|buckets
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sorts
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"index"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sorts
operator|=
name|getComps
argument_list|(
name|orders
argument_list|)
expr_stmt|;
block|}
name|int
name|overfetch
init|=
call|(
name|int
call|)
argument_list|(
name|limit
operator|*
literal|1.25
argument_list|)
decl_stmt|;
name|TupleStream
name|tupleStream
init|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|solrParams
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
name|overfetch
argument_list|)
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"and"
argument_list|,
name|AndEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"or"
argument_list|,
name|OrEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"not"
argument_list|,
name|NotEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"eq"
argument_list|,
name|EqualsEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"val"
argument_list|,
name|RawValueEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gt"
argument_list|,
name|GreaterThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lt"
argument_list|,
name|LessThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lteq"
argument_list|,
name|LessThanEqualToEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gteq"
argument_list|,
name|GreaterThanEqualToEvaluator
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|havingPredicate
operator|!=
literal|null
condition|)
block|{
name|BooleanEvaluator
name|booleanOperation
init|=
operator|(
name|BooleanEvaluator
operator|)
name|factory
operator|.
name|constructEvaluator
argument_list|(
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
name|havingPredicate
argument_list|)
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|HavingStream
argument_list|(
name|tupleStream
argument_list|,
name|booleanOperation
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lim
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|LimitStream
argument_list|(
name|tupleStream
argument_list|,
name|limit
argument_list|)
expr_stmt|;
block|}
return|return
name|tupleStream
return|;
block|}
DECL|method|handleSelectDistinctMapReduce
specifier|private
name|TupleStream
name|handleSelectDistinctMapReduce
parameter_list|(
specifier|final
name|String
name|zkHost
parameter_list|,
specifier|final
name|String
name|collection
parameter_list|,
specifier|final
name|Properties
name|properties
parameter_list|,
specifier|final
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
specifier|final
name|String
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|,
specifier|final
name|Bucket
index|[]
name|buckets
parameter_list|,
specifier|final
name|String
name|limit
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numWorkers
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"numWorkers"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|fl
init|=
name|getFields
argument_list|(
name|fields
argument_list|)
decl_stmt|;
name|String
name|sort
init|=
literal|null
decl_stmt|;
name|StreamEqualitor
name|ecomp
init|=
literal|null
decl_stmt|;
name|StreamComparator
name|comp
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|orders
operator|!=
literal|null
operator|&&
name|orders
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|StreamComparator
index|[]
name|adjustedSorts
init|=
name|adjustSorts
argument_list|(
name|orders
argument_list|,
name|buckets
argument_list|)
decl_stmt|;
comment|// Because of the way adjustSorts works we know that each FieldComparator has a single
comment|// field name. For this reason we can just look at the leftFieldName
name|FieldEqualitor
index|[]
name|fieldEqualitors
init|=
operator|new
name|FieldEqualitor
index|[
name|adjustedSorts
operator|.
name|length
index|]
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|adjustedSorts
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|FieldComparator
name|fieldComparator
init|=
operator|(
name|FieldComparator
operator|)
name|adjustedSorts
index|[
name|i
index|]
decl_stmt|;
name|fieldEqualitors
index|[
name|i
index|]
operator|=
operator|new
name|FieldEqualitor
argument_list|(
name|fieldComparator
operator|.
name|getLeftFieldName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|fieldComparator
operator|.
name|getLeftFieldName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|fieldComparator
operator|.
name|getOrder
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sort
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|adjustedSorts
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|ecomp
operator|=
name|fieldEqualitors
index|[
literal|0
index|]
expr_stmt|;
name|comp
operator|=
name|adjustedSorts
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|ecomp
operator|=
operator|new
name|MultipleFieldEqualitor
argument_list|(
name|fieldEqualitors
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|MultipleFieldComparator
argument_list|(
name|adjustedSorts
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|StringBuilder
name|sortBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|FieldEqualitor
index|[]
name|equalitors
init|=
operator|new
name|FieldEqualitor
index|[
name|buckets
operator|.
name|length
index|]
decl_stmt|;
name|StreamComparator
index|[]
name|streamComparators
init|=
operator|new
name|StreamComparator
index|[
name|buckets
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|equalitors
index|[
name|i
index|]
operator|=
operator|new
name|FieldEqualitor
argument_list|(
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|streamComparators
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sortBuf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|sortBuf
operator|.
name|append
argument_list|(
name|buckets
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" asc"
argument_list|)
expr_stmt|;
block|}
name|sort
operator|=
name|sortBuf
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|equalitors
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|ecomp
operator|=
name|equalitors
index|[
literal|0
index|]
expr_stmt|;
name|comp
operator|=
name|streamComparators
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|ecomp
operator|=
operator|new
name|MultipleFieldEqualitor
argument_list|(
name|equalitors
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|MultipleFieldComparator
argument_list|(
name|streamComparators
argument_list|)
expr_stmt|;
block|}
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|fl
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
name|CommonParams
operator|.
name|JAVABIN
argument_list|)
expr_stmt|;
comment|//Always use the /export handler for Distinct Queries because it requires exporting full result sets.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numWorkers
operator|>
literal|1
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"partitionKeys"
argument_list|,
name|getPartitionKeys
argument_list|(
name|buckets
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"sort"
argument_list|,
name|sort
argument_list|)
expr_stmt|;
name|TupleStream
name|tupleStream
init|=
literal|null
decl_stmt|;
name|CloudSolrStream
name|cstream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|cstream
argument_list|,
name|ecomp
argument_list|)
expr_stmt|;
if|if
condition|(
name|numWorkers
operator|>
literal|1
condition|)
block|{
comment|// Do the unique in parallel
comment|// Maintain the sort of the Tuples coming from the workers.
name|ParallelStream
name|parallelStream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|tupleStream
argument_list|,
name|numWorkers
argument_list|,
name|comp
argument_list|)
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|parallelStream
operator|.
name|setStreamFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|tupleStream
operator|=
name|parallelStream
expr_stmt|;
block|}
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|LimitStream
argument_list|(
name|tupleStream
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tupleStream
return|;
block|}
DECL|method|adjustSorts
specifier|private
name|StreamComparator
index|[]
name|adjustSorts
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|,
name|Bucket
index|[]
name|buckets
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|FieldComparator
argument_list|>
name|adjustedSorts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|bucketFields
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|sortFields
init|=
operator|new
name|HashSet
argument_list|()
decl_stmt|;
name|ComparatorOrder
name|comparatorOrder
init|=
name|ComparatorOrder
operator|.
name|ASCENDING
decl_stmt|;
for|for
control|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|order
range|:
name|orders
control|)
block|{
name|sortFields
operator|.
name|add
argument_list|(
name|order
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|adjustedSorts
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|order
operator|.
name|getKey
argument_list|()
argument_list|,
name|ascDescComp
argument_list|(
name|order
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|comparatorOrder
operator|=
name|ascDescComp
argument_list|(
name|order
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|bucketFields
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|sf
range|:
name|sortFields
control|)
block|{
if|if
condition|(
operator|!
name|bucketFields
operator|.
name|contains
argument_list|(
name|sf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"All sort fields must be in the field list."
argument_list|)
throw|;
block|}
block|}
comment|//Add sort fields if needed
if|if
condition|(
name|sortFields
operator|.
name|size
argument_list|()
operator|<
name|buckets
operator|.
name|length
condition|)
block|{
for|for
control|(
name|Bucket
name|bucket
range|:
name|buckets
control|)
block|{
name|String
name|b
init|=
name|bucket
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sortFields
operator|.
name|contains
argument_list|(
name|b
argument_list|)
condition|)
block|{
name|adjustedSorts
operator|.
name|add
argument_list|(
operator|new
name|FieldComparator
argument_list|(
name|bucket
operator|.
name|toString
argument_list|()
argument_list|,
name|comparatorOrder
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|adjustedSorts
operator|.
name|toArray
argument_list|(
operator|new
name|FieldComparator
index|[
name|adjustedSorts
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|handleStats
specifier|private
name|TupleStream
name|handleStats
parameter_list|(
name|String
name|zk
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metricPairs
parameter_list|)
block|{
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|Metric
index|[]
name|metrics
init|=
name|buildMetrics
argument_list|(
name|metricPairs
argument_list|,
literal|false
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|Metric
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
return|return
operator|new
name|StatsStream
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|solrParams
argument_list|,
name|metrics
argument_list|)
return|;
block|}
DECL|method|asQueryable
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|SolrQueryable
argument_list|<>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
return|;
block|}
DECL|method|toRel
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
return|return
operator|new
name|SolrTableScan
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|SolrRel
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|relOptTable
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"WeakerAccess"
argument_list|)
DECL|class|SolrQueryable
specifier|public
specifier|static
class|class
name|SolrQueryable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
block|{
DECL|method|SolrQueryable
name|SolrQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|SolrTable
name|table
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
DECL|method|enumerator
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
init|=
operator|(
name|Enumerable
argument_list|<
name|T
argument_list|>
operator|)
name|getTable
argument_list|()
operator|.
name|query
argument_list|(
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|enumerable
operator|.
name|enumerator
argument_list|()
return|;
block|}
DECL|method|getTable
specifier|private
name|SolrTable
name|getTable
parameter_list|()
block|{
return|return
operator|(
name|SolrTable
operator|)
name|table
return|;
block|}
DECL|method|getProperties
specifier|private
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|schema
operator|.
name|unwrap
argument_list|(
name|SolrSchema
operator|.
name|class
argument_list|)
operator|.
name|properties
return|;
block|}
comment|/** Called via code-generation.      *      * @see SolrMethod#SOLR_QUERYABLE_QUERY      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
DECL|method|query
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
name|List
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|>
argument_list|>
name|fields
parameter_list|,
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|order
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|buckets
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|metricPairs
parameter_list|,
name|String
name|limit
parameter_list|,
name|String
name|negativeQuery
parameter_list|,
name|String
name|havingPredicate
parameter_list|)
block|{
return|return
name|getTable
argument_list|()
operator|.
name|query
argument_list|(
name|getProperties
argument_list|()
argument_list|,
name|fields
argument_list|,
name|query
argument_list|,
name|order
argument_list|,
name|buckets
argument_list|,
name|metricPairs
argument_list|,
name|limit
argument_list|,
name|negativeQuery
argument_list|,
name|havingPredicate
argument_list|)
return|;
block|}
block|}
DECL|method|getComps
specifier|private
specifier|static
name|FieldComparator
index|[]
name|getComps
parameter_list|(
name|List
argument_list|<
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|orders
parameter_list|)
block|{
name|FieldComparator
index|[]
name|comps
init|=
operator|new
name|FieldComparator
index|[
name|orders
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orders
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortItem
init|=
name|orders
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|ordering
init|=
name|sortItem
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|ComparatorOrder
name|comparatorOrder
init|=
name|ascDescComp
argument_list|(
name|ordering
argument_list|)
decl_stmt|;
name|String
name|sortKey
init|=
name|sortItem
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|comps
index|[
name|i
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
name|sortKey
argument_list|,
name|comparatorOrder
argument_list|)
expr_stmt|;
block|}
return|return
name|comps
return|;
block|}
DECL|method|ascDescComp
specifier|private
specifier|static
name|ComparatorOrder
name|ascDescComp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|contains
argument_list|(
literal|"desc"
argument_list|)
condition|)
block|{
return|return
name|ComparatorOrder
operator|.
name|DESCENDING
return|;
block|}
else|else
block|{
return|return
name|ComparatorOrder
operator|.
name|ASCENDING
return|;
block|}
block|}
block|}
end_class

end_unit

