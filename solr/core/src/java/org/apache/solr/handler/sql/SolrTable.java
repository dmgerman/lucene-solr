begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.sql
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|adapter
operator|.
name|java
operator|.
name|AbstractQueryableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|AbstractEnumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Enumerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|QueryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|linq4j
operator|.
name|Queryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|RelOptTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelDataTypeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|type
operator|.
name|RelProtoDataType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|SchemaPlus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|TranslatableTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|schema
operator|.
name|impl
operator|.
name|AbstractTableQueryable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|CloudSolrStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_comment
comment|/**  * Table based on a Solr collection  */
end_comment

begin_class
DECL|class|SolrTable
specifier|public
class|class
name|SolrTable
extends|extends
name|AbstractQueryableTable
implements|implements
name|TranslatableTable
block|{
DECL|field|DEFAULT_SORT_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_SORT_FIELD
init|=
literal|"_version_"
decl_stmt|;
DECL|field|collection
specifier|private
specifier|final
name|String
name|collection
decl_stmt|;
DECL|field|schema
specifier|private
specifier|final
name|SolrSchema
name|schema
decl_stmt|;
DECL|field|protoRowType
specifier|private
name|RelProtoDataType
name|protoRowType
decl_stmt|;
DECL|method|SolrTable
specifier|public
name|SolrTable
parameter_list|(
name|SolrSchema
name|schema
parameter_list|,
name|String
name|collection
parameter_list|)
block|{
name|super
argument_list|(
name|Object
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SolrTable {"
operator|+
name|collection
operator|+
literal|"}"
return|;
block|}
DECL|method|getRowType
specifier|public
name|RelDataType
name|getRowType
parameter_list|(
name|RelDataTypeFactory
name|typeFactory
parameter_list|)
block|{
if|if
condition|(
name|protoRowType
operator|==
literal|null
condition|)
block|{
name|protoRowType
operator|=
name|schema
operator|.
name|getRelDataType
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
return|return
name|protoRowType
operator|.
name|apply
argument_list|(
name|typeFactory
argument_list|)
return|;
block|}
DECL|method|query
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
return|return
name|query
argument_list|(
name|properties
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** Executes a Solr query on the underlying table.    *    * @param properties Connections properties    * @param fields List of fields to project    * @param query A string for the query    * @return Enumerator of results    */
DECL|method|query
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|,
name|String
name|limit
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|solrParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//solrParams.put(CommonParams.OMIT_HEADER, "true");
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
comment|//solrParams.put(CommonParams.QT, "/export");
if|if
condition|(
name|fields
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|fields
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// SolrParams should be a ModifiableParams instead of a map so we could add multiple FQs
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
comment|// Build and issue the query and return an Enumerator over the results
if|if
condition|(
name|order
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|DEFAULT_SORT_FIELD
operator|+
literal|" desc"
argument_list|)
expr_stmt|;
comment|// Make sure the default sort field is in the field list
name|String
name|fl
init|=
name|solrParams
operator|.
name|get
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fl
operator|.
name|contains
argument_list|(
name|DEFAULT_SORT_FIELD
argument_list|)
condition|)
block|{
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|FL
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|fl
argument_list|,
name|DEFAULT_SORT_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|solrParams
operator|.
name|put
argument_list|(
name|CommonParams
operator|.
name|SORT
argument_list|,
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|order
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|TupleStream
name|tupleStream
decl_stmt|;
try|try
block|{
name|String
name|zk
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"zk"
argument_list|)
decl_stmt|;
name|tupleStream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zk
argument_list|,
name|collection
argument_list|,
name|solrParams
argument_list|)
expr_stmt|;
if|if
condition|(
name|limit
operator|!=
literal|null
condition|)
block|{
name|tupleStream
operator|=
operator|new
name|LimitStream
argument_list|(
name|tupleStream
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|TupleStream
name|finalStream
init|=
name|tupleStream
decl_stmt|;
return|return
operator|new
name|AbstractEnumerable
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
specifier|public
name|Enumerator
argument_list|<
name|Object
argument_list|>
name|enumerator
parameter_list|()
block|{
return|return
operator|new
name|SolrEnumerator
argument_list|(
name|finalStream
argument_list|,
name|fields
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|asQueryable
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Queryable
argument_list|<
name|T
argument_list|>
name|asQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
operator|new
name|SolrQueryable
argument_list|<>
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|this
argument_list|,
name|tableName
argument_list|)
return|;
block|}
DECL|method|toRel
specifier|public
name|RelNode
name|toRel
parameter_list|(
name|RelOptTable
operator|.
name|ToRelContext
name|context
parameter_list|,
name|RelOptTable
name|relOptTable
parameter_list|)
block|{
specifier|final
name|RelOptCluster
name|cluster
init|=
name|context
operator|.
name|getCluster
argument_list|()
decl_stmt|;
return|return
operator|new
name|SolrTableScan
argument_list|(
name|cluster
argument_list|,
name|cluster
operator|.
name|traitSetOf
argument_list|(
name|SolrRel
operator|.
name|CONVENTION
argument_list|)
argument_list|,
name|relOptTable
argument_list|,
name|this
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|class|SolrQueryable
specifier|public
specifier|static
class|class
name|SolrQueryable
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractTableQueryable
argument_list|<
name|T
argument_list|>
block|{
DECL|method|SolrQueryable
name|SolrQueryable
parameter_list|(
name|QueryProvider
name|queryProvider
parameter_list|,
name|SchemaPlus
name|schema
parameter_list|,
name|SolrTable
name|table
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|super
argument_list|(
name|queryProvider
argument_list|,
name|schema
argument_list|,
name|table
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
DECL|method|enumerator
specifier|public
name|Enumerator
argument_list|<
name|T
argument_list|>
name|enumerator
parameter_list|()
block|{
comment|//noinspection unchecked
specifier|final
name|Enumerable
argument_list|<
name|T
argument_list|>
name|enumerable
init|=
operator|(
name|Enumerable
argument_list|<
name|T
argument_list|>
operator|)
name|getTable
argument_list|()
operator|.
name|query
argument_list|(
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|enumerable
operator|.
name|enumerator
argument_list|()
return|;
block|}
DECL|method|getTable
specifier|private
name|SolrTable
name|getTable
parameter_list|()
block|{
return|return
operator|(
name|SolrTable
operator|)
name|table
return|;
block|}
DECL|method|getProperties
specifier|private
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|schema
operator|.
name|unwrap
argument_list|(
name|SolrSchema
operator|.
name|class
argument_list|)
operator|.
name|properties
return|;
block|}
comment|/** Called via code-generation.      *      * @see SolrMethod#SOLR_QUERYABLE_QUERY      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
DECL|method|query
specifier|public
name|Enumerable
argument_list|<
name|Object
argument_list|>
name|query
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fields
parameter_list|,
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|order
parameter_list|,
name|String
name|limit
parameter_list|)
block|{
return|return
name|getTable
argument_list|()
operator|.
name|query
argument_list|(
name|getProperties
argument_list|()
argument_list|,
name|fields
argument_list|,
name|query
argument_list|,
name|order
argument_list|,
name|limit
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

