begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|DirectoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotMetaDataManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotMetaDataManager
operator|.
name|SnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|CoreAdminOp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|NumberUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|COMPLETED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|CallInfo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|FAILED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|RESPONSE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|RESPONSE_MESSAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|RESPONSE_STATUS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|RUNNING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|buildCoreParams
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
operator|.
name|normalizePath
import|;
end_import

begin_enum
DECL|enum|CoreAdminOperation
enum|enum
name|CoreAdminOperation
implements|implements
name|CoreAdminOp
block|{
DECL|enum constant|CREATE_OP
name|CREATE_OP
argument_list|(
name|CREATE
argument_list|,
name|it
lambda|->
block|{
assert|assert
name|TestInjection
operator|.
name|injectRandomDelayInCoreCreation
argument_list|()
assert|;
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"core create command {}"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|String
name|coreName
init|=
name|params
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|coreParams
init|=
name|buildCoreParams
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|CoreContainer
name|coreContainer
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
decl_stmt|;
name|Path
name|instancePath
init|=
name|coreContainer
operator|.
name|getCoreRootDirectory
argument_list|()
operator|.
name|resolve
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
comment|// TODO: Should we nuke setting odd instance paths?  They break core discovery, generally
name|String
name|instanceDir
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
name|instanceDir
operator|==
literal|null
condition|)
name|instanceDir
operator|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"property.instanceDir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|instanceDir
operator|!=
literal|null
condition|)
block|{
name|instanceDir
operator|=
name|PropertiesUtil
operator|.
name|substituteProperty
argument_list|(
name|instanceDir
argument_list|,
name|coreContainer
operator|.
name|getContainerProperties
argument_list|()
argument_list|)
expr_stmt|;
name|instancePath
operator|=
name|coreContainer
operator|.
name|getCoreRootDirectory
argument_list|()
operator|.
name|resolve
argument_list|(
name|instanceDir
argument_list|)
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
name|boolean
name|newCollection
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|NEW_COLLECTION
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|coreContainer
operator|.
name|create
argument_list|(
name|coreName
argument_list|,
name|instancePath
argument_list|,
name|coreParams
argument_list|,
name|newCollection
argument_list|)
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
block|}
argument_list|)
block|,
DECL|enum constant|UNLOAD_OP
name|UNLOAD_OP
argument_list|(
name|UNLOAD
argument_list|,
name|it
lambda|->
block|{
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|boolean
name|deleteIndexDir
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|deleteDataDir
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|deleteInstanceDir
init|=
name|params
operator|.
name|getBool
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INSTANCE_DIR
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|unload
argument_list|(
name|cname
argument_list|,
name|deleteIndexDir
argument_list|,
name|deleteDataDir
argument_list|,
name|deleteInstanceDir
argument_list|)
expr_stmt|;
assert|assert
name|TestInjection
operator|.
name|injectNonExistentCoreExceptionAfterUnload
argument_list|(
name|cname
argument_list|)
assert|;
block|}
argument_list|)
block|,
DECL|enum constant|RELOAD_OP
name|RELOAD_OP
argument_list|(
name|RELOAD
argument_list|,
name|it
lambda|->
block|{
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
try|try
block|{
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|reload
argument_list|(
name|cname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error handling 'reload' action"
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
argument_list|)
block|,
DECL|enum constant|STATUS_OP
name|STATUS_OP
argument_list|(
name|STATUS
argument_list|,
operator|new
name|StatusOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|SWAP_OP
name|SWAP_OP
argument_list|(
name|SWAP
argument_list|,
name|it
lambda|->
block|{
specifier|final
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
specifier|final
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|String
name|other
init|=
name|params
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|swap
argument_list|(
name|cname
argument_list|,
name|other
argument_list|)
expr_stmt|;
block|}
argument_list|)
block|,
DECL|enum constant|RENAME_OP
name|RENAME_OP
argument_list|(
name|RENAME
argument_list|,
name|it
lambda|->
block|{
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|OTHER
argument_list|)
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return;
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|rename
argument_list|(
name|cname
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
argument_list|)
block|,
DECL|enum constant|MERGEINDEXES_OP
name|MERGEINDEXES_OP
argument_list|(
name|MERGEINDEXES
argument_list|,
operator|new
name|MergeIndexesOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|SPLIT_OP
name|SPLIT_OP
argument_list|(
name|SPLIT
argument_list|,
operator|new
name|SplitOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|PREPRECOVERY_OP
name|PREPRECOVERY_OP
argument_list|(
name|PREPRECOVERY
argument_list|,
operator|new
name|PrepRecoveryOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|REQUESTRECOVERY_OP
name|REQUESTRECOVERY_OP
argument_list|(
name|REQUESTRECOVERY
argument_list|,
name|it
lambda|->
block|{
specifier|final
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
specifier|final
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"It has been requested that we recover: core="
operator|+
name|cname
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
comment|// This can take a while, but doRecovery is already async so don't worry about it here
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|doRecovery
argument_list|(
name|it
operator|.
name|handler
operator|.
name|coreContainer
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to locate core "
operator|+
name|cname
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enum constant|REQUESTSYNCSHARD_OP
name|REQUESTSYNCSHARD_OP
argument_list|(
name|REQUESTSYNCSHARD
argument_list|,
operator|new
name|RequestSyncShardOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|REQUESTBUFFERUPDATES_OP
name|REQUESTBUFFERUPDATES_OP
argument_list|(
name|REQUESTBUFFERUPDATES
argument_list|,
name|it
lambda|->
block|{
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"Starting to buffer updates on core:"
operator|+
name|cname
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Core ["
operator|+
name|cname
operator|+
literal|"] does not exist"
argument_list|)
throw|;
name|UpdateLog
name|updateLog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|updateLog
operator|.
name|getState
argument_list|()
operator|!=
name|UpdateLog
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Core "
operator|+
name|cname
operator|+
literal|" not in active state"
argument_list|)
throw|;
block|}
name|updateLog
operator|.
name|bufferUpdates
argument_list|()
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"core"
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
literal|"BUFFERING"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SolrException
condition|)
throw|throw
operator|(
name|SolrException
operator|)
name|e
throw|;
else|else
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not start buffering updates"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|it
operator|.
name|req
operator|!=
literal|null
condition|)
name|it
operator|.
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
block|,
DECL|enum constant|REQUESTAPPLYUPDATES_OP
name|REQUESTAPPLYUPDATES_OP
argument_list|(
name|REQUESTAPPLYUPDATES
argument_list|,
operator|new
name|RequestApplyUpdatesOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|REQUESTSTATUS_OP
name|REQUESTSTATUS_OP
argument_list|(
name|REQUESTSTATUS
argument_list|,
name|it
lambda|->
block|{
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|requestId
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|)
decl_stmt|;
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"Checking request status for : "
operator|+
name|requestId
argument_list|)
expr_stmt|;
if|if
condition|(
name|it
operator|.
name|handler
operator|.
name|getRequestStatusMap
argument_list|(
name|RUNNING
argument_list|)
operator|.
name|containsKey
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
name|RUNNING
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|it
operator|.
name|handler
operator|.
name|getRequestStatusMap
argument_list|(
name|COMPLETED
argument_list|)
operator|.
name|containsKey
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
name|COMPLETED
argument_list|)
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE
argument_list|,
name|it
operator|.
name|handler
operator|.
name|getRequestStatusMap
argument_list|(
name|COMPLETED
argument_list|)
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|.
name|getRspObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|it
operator|.
name|handler
operator|.
name|getRequestStatusMap
argument_list|(
name|FAILED
argument_list|)
operator|.
name|containsKey
argument_list|(
name|requestId
argument_list|)
condition|)
block|{
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
name|FAILED
argument_list|)
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE
argument_list|,
name|it
operator|.
name|handler
operator|.
name|getRequestStatusMap
argument_list|(
name|FAILED
argument_list|)
operator|.
name|get
argument_list|(
name|requestId
argument_list|)
operator|.
name|getRspObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_STATUS
argument_list|,
literal|"notfound"
argument_list|)
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|RESPONSE_MESSAGE
argument_list|,
literal|"No task found in running, completed or failed tasks"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|,
DECL|enum constant|OVERSEEROP_OP
name|OVERSEEROP_OP
argument_list|(
name|OVERSEEROP
argument_list|,
name|it
lambda|->
block|{
name|ZkController
name|zkController
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|String
name|op
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
decl_stmt|;
name|String
name|electionNode
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"electionNode"
argument_list|)
decl_stmt|;
if|if
condition|(
name|electionNode
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|rejoinOverseerElection
argument_list|(
name|electionNode
argument_list|,
literal|"rejoinAtHead"
operator|.
name|equals
argument_list|(
name|op
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"electionNode is required param"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enum constant|REJOINLEADERELECTION_OP
name|REJOINLEADERELECTION_OP
argument_list|(
name|REJOINLEADERELECTION
argument_list|,
name|it
lambda|->
block|{
name|ZkController
name|zkController
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|!=
literal|null
condition|)
block|{
name|zkController
operator|.
name|rejoinShardLeaderElection
argument_list|(
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
argument_list|()
operator|.
name|warn
argument_list|(
literal|"zkController is null in CoreAdminHandler.handleRequestInternal:REJOINLEADERELECTION. No action taken."
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|,
DECL|enum constant|INVOKE_OP
name|INVOKE_OP
argument_list|(
name|INVOKE
argument_list|,
operator|new
name|InvokeOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|FORCEPREPAREFORLEADERSHIP_OP
name|FORCEPREPAREFORLEADERSHIP_OP
argument_list|(
name|FORCEPREPAREFORLEADERSHIP
argument_list|,
name|it
lambda|->
block|{
specifier|final
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"I have been forcefully prepare myself for leadership."
argument_list|)
expr_stmt|;
name|ZkController
name|zkController
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|zkController
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Only valid for SolrCloud"
argument_list|)
throw|;
block|}
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
operator|+
literal|" is required"
argument_list|)
throw|;
block|}
try|try
init|(
name|SolrCore
name|core
init|=
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
comment|// Setting the last published state for this core to be ACTIVE
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|setLastPublished
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|log
argument_list|()
operator|.
name|info
argument_list|(
literal|"Setting the last published state for this core, {}, to {}"
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|()
argument_list|,
literal|"Could not find core: "
operator|+
name|cname
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
block|,
DECL|enum constant|BACKUPCORE_OP
name|BACKUPCORE_OP
argument_list|(
name|BACKUPCORE
argument_list|,
operator|new
name|BackupCoreOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|RESTORECORE_OP
name|RESTORECORE_OP
argument_list|(
name|RESTORECORE
argument_list|,
operator|new
name|RestoreCoreOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|CREATESNAPSHOT_OP
name|CREATESNAPSHOT_OP
argument_list|(
name|CREATESNAPSHOT
argument_list|,
operator|new
name|CreateSnapshotOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|DELETESNAPSHOT_OP
name|DELETESNAPSHOT_OP
argument_list|(
name|DELETESNAPSHOT
argument_list|,
operator|new
name|DeleteSnapshotOp
argument_list|()
argument_list|)
block|,
DECL|enum constant|LISTSNAPSHOTS_OP
name|LISTSNAPSHOTS_OP
argument_list|(
name|LISTSNAPSHOTS
argument_list|,
name|it
lambda|->
block|{
name|CoreContainer
name|cc
init|=
name|it
operator|.
name|handler
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
specifier|final
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|required
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrCore
name|core
init|=
name|cc
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to locate core "
operator|+
name|cname
argument_list|)
throw|;
block|}
name|SolrSnapshotMetaDataManager
name|mgr
init|=
name|core
operator|.
name|getSnapshotMetaDataManager
argument_list|()
decl_stmt|;
name|NamedList
name|result
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|mgr
operator|.
name|listSnapshots
argument_list|()
control|)
block|{
name|Optional
argument_list|<
name|SnapshotMetaData
argument_list|>
name|metadata
init|=
name|mgr
operator|.
name|getSnapshotMetaData
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|NamedList
argument_list|<
name|String
argument_list|>
name|props
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|props
operator|.
name|add
argument_list|(
name|SolrSnapshotManager
operator|.
name|GENERATION_NUM
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|metadata
operator|.
name|get
argument_list|()
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|props
operator|.
name|add
argument_list|(
name|SolrSnapshotManager
operator|.
name|INDEX_DIR_PATH
argument_list|,
name|metadata
operator|.
name|get
argument_list|()
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
block|}
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
block|;
DECL|field|action
specifier|final
name|CoreAdminParams
operator|.
name|CoreAdminAction
name|action
decl_stmt|;
DECL|field|fun
specifier|final
name|CoreAdminOp
name|fun
decl_stmt|;
DECL|method|CoreAdminOperation
name|CoreAdminOperation
parameter_list|(
name|CoreAdminParams
operator|.
name|CoreAdminAction
name|action
parameter_list|,
name|CoreAdminOp
name|fun
parameter_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
name|this
operator|.
name|fun
operator|=
name|fun
expr_stmt|;
block|}
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|log
specifier|static
name|Logger
name|log
parameter_list|()
block|{
return|return
name|log
return|;
block|}
comment|/**    * Returns the core status for a particular core.    * @param cores - the enclosing core container    * @param cname - the core to return    * @param isIndexInfoNeeded - add what may be expensive index information. NOT returned if the core is not loaded    * @return - a named list of key/value pairs from the core.    * @throws IOException - LukeRequestHandler can throw an I/O exception    */
DECL|method|getCoreStatus
specifier|static
name|NamedList
argument_list|<
name|Object
argument_list|>
name|getCoreStatus
parameter_list|(
name|CoreContainer
name|cores
parameter_list|,
name|String
name|cname
parameter_list|,
name|boolean
name|isIndexInfoNeeded
parameter_list|)
throws|throws
name|IOException
block|{
name|NamedList
argument_list|<
name|Object
argument_list|>
name|info
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cores
operator|.
name|isLoaded
argument_list|(
name|cname
argument_list|)
condition|)
block|{
comment|// Lazily-loaded core, fill in what we can.
comment|// It would be a real mistake to load the cores just to get the status
name|CoreDescriptor
name|desc
init|=
name|cores
operator|.
name|getUnloadedCoreDescriptor
argument_list|(
name|cname
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|add
argument_list|(
name|NAME
argument_list|,
name|desc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"instanceDir"
argument_list|,
name|desc
operator|.
name|getInstanceDir
argument_list|()
argument_list|)
expr_stmt|;
comment|// None of the following are guaranteed to be present in a not-yet-loaded core.
name|String
name|tmp
init|=
name|desc
operator|.
name|getDataDir
argument_list|()
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmp
argument_list|)
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"dataDir"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|desc
operator|.
name|getConfigName
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmp
argument_list|)
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"config"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|desc
operator|.
name|getSchemaName
argument_list|()
expr_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|tmp
argument_list|)
condition|)
name|info
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|tmp
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"isLoaded"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|cores
operator|.
name|getCore
argument_list|(
name|cname
argument_list|)
init|)
block|{
if|if
condition|(
name|core
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|add
argument_list|(
name|NAME
argument_list|,
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"instanceDir"
argument_list|,
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getInstancePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"dataDir"
argument_list|,
name|normalizePath
argument_list|(
name|core
operator|.
name|getDataDir
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"config"
argument_list|,
name|core
operator|.
name|getConfigResource
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"schema"
argument_list|,
name|core
operator|.
name|getSchemaResource
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"startTime"
argument_list|,
name|core
operator|.
name|getStartTimeStamp
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"uptime"
argument_list|,
name|core
operator|.
name|getUptimeMs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cores
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|info
operator|.
name|add
argument_list|(
literal|"lastPublished"
argument_list|,
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getLastPublished
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"configVersion"
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getZnodeVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isIndexInfoNeeded
condition|)
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcher
init|=
name|core
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|indexInfo
init|=
name|LukeRequestHandler
operator|.
name|getIndexInfo
argument_list|(
name|searcher
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|size
init|=
name|getIndexSize
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"sizeInBytes"
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|indexInfo
operator|.
name|add
argument_list|(
literal|"size"
argument_list|,
name|NumberUtils
operator|.
name|readableSize
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|add
argument_list|(
literal|"index"
argument_list|,
name|indexInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcher
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|info
return|;
block|}
DECL|method|getIndexSize
specifier|static
name|long
name|getIndexSize
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|Directory
name|dir
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|dir
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|get
argument_list|(
name|core
operator|.
name|getIndexDir
argument_list|()
argument_list|,
name|DirectoryFactory
operator|.
name|DirContext
operator|.
name|DEFAULT
argument_list|,
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|lockType
argument_list|)
expr_stmt|;
try|try
block|{
name|size
operator|=
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|size
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|getDirectoryFactory
argument_list|()
operator|.
name|release
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"IO error while trying to get the size of the Directory"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|CallInfo
name|it
parameter_list|)
throws|throws
name|Exception
block|{
name|fun
operator|.
name|execute
argument_list|(
name|it
argument_list|)
expr_stmt|;
block|}
block|}
end_enum

end_unit

