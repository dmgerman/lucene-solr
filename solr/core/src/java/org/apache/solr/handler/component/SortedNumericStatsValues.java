begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|NumberType
import|;
end_import

begin_class
DECL|class|SortedNumericStatsValues
specifier|public
class|class
name|SortedNumericStatsValues
implements|implements
name|StatsValues
block|{
DECL|field|nsv
specifier|private
specifier|final
name|NumericStatsValues
name|nsv
decl_stmt|;
DECL|field|fieldName
specifier|private
specifier|final
name|String
name|fieldName
decl_stmt|;
DECL|field|numberType
specifier|private
specifier|final
name|NumberType
name|numberType
decl_stmt|;
DECL|field|sndv
specifier|private
name|SortedNumericDocValues
name|sndv
decl_stmt|;
DECL|method|SortedNumericStatsValues
specifier|public
name|SortedNumericStatsValues
parameter_list|(
name|NumericStatsValues
name|nsv
parameter_list|,
name|StatsField
name|field
parameter_list|)
block|{
name|this
operator|.
name|nsv
operator|=
name|nsv
expr_stmt|;
name|this
operator|.
name|fieldName
operator|=
name|field
operator|.
name|getSchemaField
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
name|this
operator|.
name|numberType
operator|=
name|field
operator|.
name|getSchemaField
argument_list|()
operator|.
name|getType
argument_list|()
operator|.
name|getNumberType
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|NamedList
name|stv
parameter_list|)
block|{
name|nsv
operator|.
name|accumulate
argument_list|(
name|stv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|int
name|docId
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|sndv
operator|.
name|advanceExact
argument_list|(
name|docId
argument_list|)
condition|)
block|{
name|missing
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sndv
operator|.
name|docValueCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|nsv
operator|.
name|accumulate
argument_list|(
name|toCorrectType
argument_list|(
name|sndv
operator|.
name|nextValue
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|toCorrectType
specifier|private
name|Number
name|toCorrectType
parameter_list|(
name|long
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|numberType
condition|)
block|{
case|case
name|INTEGER
case|:
case|case
name|LONG
case|:
return|return
name|value
return|;
case|case
name|FLOAT
case|:
return|return
name|NumericUtils
operator|.
name|sortableIntToFloat
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|NumericUtils
operator|.
name|sortableLongToDouble
argument_list|(
name|value
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unsupported number type"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|accumulate
specifier|public
name|void
name|accumulate
parameter_list|(
name|BytesRef
name|value
parameter_list|,
name|int
name|count
parameter_list|)
block|{
name|nsv
operator|.
name|accumulate
argument_list|(
name|value
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|missing
specifier|public
name|void
name|missing
parameter_list|()
block|{
name|nsv
operator|.
name|missing
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addMissing
specifier|public
name|void
name|addMissing
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|nsv
operator|.
name|addMissing
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addFacet
specifier|public
name|void
name|addFacet
parameter_list|(
name|String
name|facetName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|StatsValues
argument_list|>
name|facetValues
parameter_list|)
block|{
name|nsv
operator|.
name|addFacet
argument_list|(
name|facetName
argument_list|,
name|facetValues
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStatsValues
specifier|public
name|NamedList
argument_list|<
name|?
argument_list|>
name|getStatsValues
parameter_list|()
block|{
return|return
name|nsv
operator|.
name|getStatsValues
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|sndv
operator|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|ctx
operator|.
name|reader
argument_list|()
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
assert|assert
name|sndv
operator|!=
literal|null
assert|;
block|}
block|}
end_class

end_unit

