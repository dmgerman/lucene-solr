begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.sql
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|sql
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|plan
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|RelNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|core
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rel
operator|.
name|metadata
operator|.
name|RelMetadataQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexInputRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexLiteral
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|rex
operator|.
name|RexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|sql
operator|.
name|SqlKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|calcite
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Implementation of a {@link org.apache.calcite.rel.core.Filter} relational expression in Solr.  */
end_comment

begin_class
DECL|class|SolrFilter
class|class
name|SolrFilter
extends|extends
name|Filter
implements|implements
name|SolrRel
block|{
DECL|method|SolrFilter
name|SolrFilter
parameter_list|(
name|RelOptCluster
name|cluster
parameter_list|,
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|child
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
name|super
argument_list|(
name|cluster
argument_list|,
name|traitSet
argument_list|,
name|child
argument_list|,
name|condition
argument_list|)
expr_stmt|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|SolrRel
operator|.
name|CONVENTION
assert|;
assert|assert
name|getConvention
argument_list|()
operator|==
name|child
operator|.
name|getConvention
argument_list|()
assert|;
block|}
DECL|method|computeSelfCost
annotation|@
name|Override
specifier|public
name|RelOptCost
name|computeSelfCost
parameter_list|(
name|RelOptPlanner
name|planner
parameter_list|,
name|RelMetadataQuery
name|mq
parameter_list|)
block|{
return|return
name|super
operator|.
name|computeSelfCost
argument_list|(
name|planner
argument_list|,
name|mq
argument_list|)
operator|.
name|multiplyBy
argument_list|(
literal|0.1
argument_list|)
return|;
block|}
DECL|method|copy
specifier|public
name|SolrFilter
name|copy
parameter_list|(
name|RelTraitSet
name|traitSet
parameter_list|,
name|RelNode
name|input
parameter_list|,
name|RexNode
name|condition
parameter_list|)
block|{
return|return
operator|new
name|SolrFilter
argument_list|(
name|getCluster
argument_list|()
argument_list|,
name|traitSet
argument_list|,
name|input
argument_list|,
name|condition
argument_list|)
return|;
block|}
DECL|method|implement
specifier|public
name|void
name|implement
parameter_list|(
name|Implementor
name|implementor
parameter_list|)
block|{
name|implementor
operator|.
name|visitChild
argument_list|(
literal|0
argument_list|,
name|getInput
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|getInput
argument_list|()
operator|instanceof
name|SolrAggregate
condition|)
block|{
name|HavingTranslator
name|translator
init|=
operator|new
name|HavingTranslator
argument_list|(
name|SolrRules
operator|.
name|solrFieldNames
argument_list|(
name|getRowType
argument_list|()
argument_list|)
argument_list|,
name|implementor
operator|.
name|reverseAggMappings
argument_list|)
decl_stmt|;
name|String
name|havingPredicate
init|=
name|translator
operator|.
name|translateMatch
argument_list|(
name|condition
argument_list|)
decl_stmt|;
name|implementor
operator|.
name|setHavingPredicate
argument_list|(
name|havingPredicate
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Translator
name|translator
init|=
operator|new
name|Translator
argument_list|(
name|SolrRules
operator|.
name|solrFieldNames
argument_list|(
name|getRowType
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|query
init|=
name|translator
operator|.
name|translateMatch
argument_list|(
name|condition
argument_list|)
decl_stmt|;
name|implementor
operator|.
name|addQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|implementor
operator|.
name|setNegativeQuery
argument_list|(
name|translator
operator|.
name|negativeQuery
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|Translator
specifier|private
specifier|static
class|class
name|Translator
block|{
DECL|field|fieldNames
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|negativeQuery
specifier|public
name|boolean
name|negativeQuery
init|=
literal|true
decl_stmt|;
DECL|method|Translator
name|Translator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
block|}
DECL|method|translateMatch
specifier|private
name|String
name|translateMatch
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
if|if
condition|(
name|condition
operator|.
name|getKind
argument_list|()
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|COMPARISON
argument_list|)
condition|)
block|{
return|return
name|translateComparison
argument_list|(
name|condition
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|condition
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|AND
argument_list|)
condition|)
block|{
return|return
literal|"("
operator|+
name|translateAnd
argument_list|(
name|condition
argument_list|)
operator|+
literal|")"
return|;
block|}
elseif|else
if|if
condition|(
name|condition
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|OR
argument_list|)
condition|)
block|{
return|return
literal|"("
operator|+
name|translateOr
argument_list|(
name|condition
argument_list|)
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|translateOr
specifier|private
name|String
name|translateOr
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|condition
argument_list|)
control|)
block|{
name|ors
operator|.
name|add
argument_list|(
name|translateMatch
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|String
operator|.
name|join
argument_list|(
literal|" OR "
argument_list|,
name|ors
argument_list|)
return|;
block|}
DECL|method|translateAnd
specifier|private
name|String
name|translateAnd
parameter_list|(
name|RexNode
name|node0
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|andStrings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notStrings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|ands
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|nots
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|node0
argument_list|,
name|ands
argument_list|,
name|nots
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|ands
control|)
block|{
name|andStrings
operator|.
name|add
argument_list|(
name|translateMatch
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|andString
init|=
name|String
operator|.
name|join
argument_list|(
literal|" AND "
argument_list|,
name|andStrings
argument_list|)
decl_stmt|;
if|if
condition|(
name|nots
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|RexNode
name|node
range|:
name|nots
control|)
block|{
name|notStrings
operator|.
name|add
argument_list|(
name|translateMatch
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|notString
init|=
name|String
operator|.
name|join
argument_list|(
literal|" NOT "
argument_list|,
name|notStrings
argument_list|)
decl_stmt|;
return|return
literal|"("
operator|+
name|andString
operator|+
literal|") NOT ("
operator|+
name|notString
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
name|andString
return|;
block|}
block|}
DECL|method|translateComparison
specifier|private
name|String
name|translateComparison
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|binaryTranslated
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|binaryTranslated
operator|=
name|translateBinary
argument_list|(
operator|(
name|RexCall
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|NOT
case|:
return|return
literal|"-"
operator|+
name|translateComparison
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
case|case
name|EQUALS
case|:
name|String
name|terms
init|=
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|terms
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
operator|&&
operator|!
name|terms
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
operator|&&
operator|!
name|terms
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
condition|)
block|{
name|terms
operator|=
literal|"\""
operator|+
name|terms
operator|+
literal|"\""
expr_stmt|;
block|}
name|String
name|clause
init|=
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|terms
decl_stmt|;
name|this
operator|.
name|negativeQuery
operator|=
literal|false
expr_stmt|;
return|return
name|clause
return|;
case|case
name|NOT_EQUALS
case|:
return|return
literal|"-("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|":"
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|")"
return|;
case|case
name|LESS_THAN
case|:
name|this
operator|.
name|negativeQuery
operator|=
literal|false
expr_stmt|;
return|return
literal|"("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|": [ * TO "
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|" })"
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
name|this
operator|.
name|negativeQuery
operator|=
literal|false
expr_stmt|;
return|return
literal|"("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|": [ * TO "
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|" ])"
return|;
case|case
name|GREATER_THAN
case|:
name|this
operator|.
name|negativeQuery
operator|=
literal|false
expr_stmt|;
return|return
literal|"("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|": { "
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|" TO * ])"
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
name|this
operator|.
name|negativeQuery
operator|=
literal|false
expr_stmt|;
return|return
literal|"("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|": [ "
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|" TO * ])"
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
comment|/**      * Translates a call to a binary operator, reversing arguments if necessary.      */
DECL|method|translateBinary
specifier|private
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|translateBinary
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid number of arguments - "
operator|+
name|operands
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|RexNode
name|left
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|right
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|a
init|=
name|translateBinary2
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
return|return
name|a
return|;
block|}
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|b
init|=
name|translateBinary2
argument_list|(
name|right
argument_list|,
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate call "
operator|+
name|call
argument_list|)
throw|;
block|}
comment|/**      * Translates a call to a binary operator. Returns whether successful.      */
DECL|method|translateBinary2
specifier|private
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|translateBinary2
parameter_list|(
name|RexNode
name|left
parameter_list|,
name|RexNode
name|right
parameter_list|)
block|{
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
break|break;
default|default:
return|return
literal|null
return|;
block|}
specifier|final
name|RexLiteral
name|rightLiteral
init|=
operator|(
name|RexLiteral
operator|)
name|right
decl_stmt|;
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|RexInputRef
name|left1
init|=
operator|(
name|RexInputRef
operator|)
name|left
decl_stmt|;
name|String
name|name
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|left1
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|name
argument_list|,
name|rightLiteral
argument_list|)
return|;
case|case
name|CAST
case|:
return|return
name|translateBinary2
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|left
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|right
argument_list|)
return|;
comment|//        case OTHER_FUNCTION:
comment|//          String itemName = SolrRules.isItem((RexCall) left);
comment|//          if (itemName != null) {
comment|//            return translateOp2(op, itemName, rightLiteral);
comment|//          }
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
DECL|class|HavingTranslator
specifier|private
specifier|static
class|class
name|HavingTranslator
block|{
DECL|field|fieldNames
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
decl_stmt|;
DECL|field|reverseAggMappings
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reverseAggMappings
decl_stmt|;
DECL|method|HavingTranslator
name|HavingTranslator
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reverseAggMappings
parameter_list|)
block|{
name|this
operator|.
name|fieldNames
operator|=
name|fieldNames
expr_stmt|;
name|this
operator|.
name|reverseAggMappings
operator|=
name|reverseAggMappings
expr_stmt|;
block|}
DECL|method|translateMatch
specifier|private
name|String
name|translateMatch
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
if|if
condition|(
name|condition
operator|.
name|getKind
argument_list|()
operator|.
name|belongsTo
argument_list|(
name|SqlKind
operator|.
name|COMPARISON
argument_list|)
condition|)
block|{
return|return
name|translateComparison
argument_list|(
name|condition
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|condition
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|AND
argument_list|)
condition|)
block|{
return|return
name|translateAnd
argument_list|(
name|condition
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|condition
operator|.
name|isA
argument_list|(
name|SqlKind
operator|.
name|OR
argument_list|)
condition|)
block|{
return|return
name|translateOr
argument_list|(
name|condition
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
DECL|method|translateOr
specifier|private
name|String
name|translateOr
parameter_list|(
name|RexNode
name|condition
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|RelOptUtil
operator|.
name|disjunctions
argument_list|(
name|condition
argument_list|)
control|)
block|{
name|ors
operator|.
name|add
argument_list|(
name|translateMatch
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"or("
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|ors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|ors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|translateAnd
specifier|private
name|String
name|translateAnd
parameter_list|(
name|RexNode
name|node0
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|andStrings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|notStrings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|ands
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RexNode
argument_list|>
name|nots
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|RelOptUtil
operator|.
name|decomposeConjunction
argument_list|(
name|node0
argument_list|,
name|ands
argument_list|,
name|nots
argument_list|)
expr_stmt|;
for|for
control|(
name|RexNode
name|node
range|:
name|ands
control|)
block|{
name|andStrings
operator|.
name|add
argument_list|(
name|translateMatch
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"and("
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|andStrings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|andStrings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|nots
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|RexNode
name|node
range|:
name|nots
control|)
block|{
name|notStrings
operator|.
name|add
argument_list|(
name|translateMatch
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|notBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|notStrings
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|notBuilder
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|notBuilder
operator|.
name|append
argument_list|(
literal|"not("
argument_list|)
expr_stmt|;
name|notBuilder
operator|.
name|append
argument_list|(
name|notStrings
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|notBuilder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
literal|"and("
operator|+
name|builder
operator|.
name|toString
argument_list|()
operator|+
literal|","
operator|+
name|notBuilder
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
else|else
block|{
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
DECL|method|translateComparison
specifier|private
name|String
name|translateComparison
parameter_list|(
name|RexNode
name|node
parameter_list|)
block|{
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|binaryTranslated
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|RexCall
operator|)
name|node
operator|)
operator|.
name|getOperands
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|binaryTranslated
operator|=
name|translateBinary
argument_list|(
operator|(
name|RexCall
operator|)
name|node
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|node
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|EQUALS
case|:
name|String
name|terms
init|=
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
name|String
name|clause
init|=
literal|"eq("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|terms
operator|+
literal|")"
decl_stmt|;
return|return
name|clause
return|;
case|case
name|NOT_EQUALS
case|:
return|return
literal|"not(eq("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|"))"
return|;
case|case
name|LESS_THAN
case|:
return|return
literal|"lt("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|")"
return|;
case|case
name|LESS_THAN_OR_EQUAL
case|:
return|return
literal|"lteq("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|")"
return|;
case|case
name|GREATER_THAN
case|:
return|return
literal|"gt("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|")"
return|;
case|case
name|GREATER_THAN_OR_EQUAL
case|:
return|return
literal|"gteq("
operator|+
name|binaryTranslated
operator|.
name|getKey
argument_list|()
operator|+
literal|","
operator|+
name|binaryTranslated
operator|.
name|getValue
argument_list|()
operator|.
name|getValue2
argument_list|()
operator|+
literal|")"
return|;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate "
operator|+
name|node
argument_list|)
throw|;
block|}
block|}
comment|/**      * Translates a call to a binary operator, reversing arguments if necessary.      */
DECL|method|translateBinary
specifier|private
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|translateBinary
parameter_list|(
name|RexCall
name|call
parameter_list|)
block|{
name|List
argument_list|<
name|RexNode
argument_list|>
name|operands
init|=
name|call
operator|.
name|getOperands
argument_list|()
decl_stmt|;
if|if
condition|(
name|operands
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Invalid number of arguments - "
operator|+
name|operands
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|RexNode
name|left
init|=
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|RexNode
name|right
init|=
name|operands
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|a
init|=
name|translateBinary2
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reverseAggMappings
operator|.
name|containsKey
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
argument_list|(
name|reverseAggMappings
operator|.
name|get
argument_list|(
name|a
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|a
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
return|return
name|a
return|;
block|}
specifier|final
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|b
init|=
name|translateBinary2
argument_list|(
name|right
argument_list|,
name|left
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|b
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"cannot translate call "
operator|+
name|call
argument_list|)
throw|;
block|}
comment|/**      * Translates a call to a binary operator. Returns whether successful.      */
DECL|method|translateBinary2
specifier|private
name|Pair
argument_list|<
name|String
argument_list|,
name|RexLiteral
argument_list|>
name|translateBinary2
parameter_list|(
name|RexNode
name|left
parameter_list|,
name|RexNode
name|right
parameter_list|)
block|{
switch|switch
condition|(
name|right
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|LITERAL
case|:
break|break;
default|default:
return|return
literal|null
return|;
block|}
specifier|final
name|RexLiteral
name|rightLiteral
init|=
operator|(
name|RexLiteral
operator|)
name|right
decl_stmt|;
switch|switch
condition|(
name|left
operator|.
name|getKind
argument_list|()
condition|)
block|{
case|case
name|INPUT_REF
case|:
specifier|final
name|RexInputRef
name|left1
init|=
operator|(
name|RexInputRef
operator|)
name|left
decl_stmt|;
name|String
name|name
init|=
name|fieldNames
operator|.
name|get
argument_list|(
name|left1
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|name
argument_list|,
name|rightLiteral
argument_list|)
return|;
case|case
name|CAST
case|:
return|return
name|translateBinary2
argument_list|(
operator|(
operator|(
name|RexCall
operator|)
name|left
operator|)
operator|.
name|operands
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|right
argument_list|)
return|;
comment|//        case OTHER_FUNCTION:
comment|//          String itemName = SolrRules.isItem((RexCall) left);
comment|//          if (itemName != null) {
comment|//            return translateOp2(op, itemName, rightLiteral);
comment|//          }
default|default:
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

