begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_class
DECL|class|ShufflingReplicaListTransformer
class|class
name|ShufflingReplicaListTransformer
implements|implements
name|ReplicaListTransformer
block|{
DECL|field|r
specifier|private
specifier|final
name|Random
name|r
decl_stmt|;
DECL|method|ShufflingReplicaListTransformer
specifier|public
name|ShufflingReplicaListTransformer
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|this
operator|.
name|r
operator|=
name|r
expr_stmt|;
block|}
DECL|method|transform
specifier|public
name|void
name|transform
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|choices
parameter_list|)
block|{
if|if
condition|(
name|choices
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|choices
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

