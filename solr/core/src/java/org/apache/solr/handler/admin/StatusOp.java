begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_class
DECL|class|StatusOp
class|class
name|StatusOp
implements|implements
name|CoreAdminHandler
operator|.
name|CoreAdminOp
block|{
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|CoreAdminHandler
operator|.
name|CallInfo
name|it
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|it
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|String
name|cname
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|String
name|indexInfo
init|=
name|params
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|INDEX_INFO
argument_list|)
decl_stmt|;
name|boolean
name|isIndexInfoNeeded
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
literal|null
operator|==
name|indexInfo
condition|?
literal|"true"
else|:
name|indexInfo
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|status
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Exception
argument_list|>
name|failures
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|CoreContainer
operator|.
name|CoreLoadFailure
argument_list|>
name|failure
range|:
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|failures
operator|.
name|put
argument_list|(
name|failure
operator|.
name|getKey
argument_list|()
argument_list|,
name|failure
operator|.
name|getValue
argument_list|()
operator|.
name|exception
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|cname
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|it
operator|.
name|handler
operator|.
name|coreContainer
operator|.
name|getAllCoreNames
argument_list|()
control|)
block|{
name|status
operator|.
name|add
argument_list|(
name|name
argument_list|,
name|CoreAdminOperation
operator|.
name|getCoreStatus
argument_list|(
name|it
operator|.
name|handler
operator|.
name|coreContainer
argument_list|,
name|name
argument_list|,
name|isIndexInfoNeeded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"initFailures"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|failures
operator|=
name|failures
operator|.
name|containsKey
argument_list|(
name|cname
argument_list|)
condition|?
name|Collections
operator|.
name|singletonMap
argument_list|(
name|cname
argument_list|,
name|failures
operator|.
name|get
argument_list|(
name|cname
argument_list|)
argument_list|)
else|:
name|Collections
operator|.
expr|<
name|String
operator|,
name|Exception
operator|>
name|emptyMap
argument_list|()
expr_stmt|;
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"initFailures"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
name|status
operator|.
name|add
argument_list|(
name|cname
argument_list|,
name|CoreAdminOperation
operator|.
name|getCoreStatus
argument_list|(
name|it
operator|.
name|handler
operator|.
name|coreContainer
argument_list|,
name|cname
argument_list|,
name|isIndexInfoNeeded
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|it
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"status"
argument_list|,
name|status
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error handling 'status' action "
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

