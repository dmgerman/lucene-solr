begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|ResultContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|transform
operator|.
name|DocTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrDocumentFetcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ReturnFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrReturnFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|IndexFingerprint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|PeerSync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|DISTRIB
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|VERSION_FIELD
import|;
end_import

begin_class
DECL|class|RealTimeGetComponent
specifier|public
class|class
name|RealTimeGetComponent
extends|extends
name|SearchComponent
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"get"
decl_stmt|;
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Set field flags
name|ReturnFields
name|returnFields
init|=
operator|new
name|SolrReturnFields
argument_list|(
name|rb
operator|.
name|req
argument_list|)
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|setReturnFields
argument_list|(
name|returnFields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// This seems rather kludgey, may there is better way to indicate
comment|// that replica can support handling version ranges
name|String
name|val
init|=
name|params
operator|.
name|get
argument_list|(
literal|"checkCanHandleVersionRanges"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"canHandleVersionRanges"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|val
operator|=
name|params
operator|.
name|get
argument_list|(
literal|"getFingerprint"
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|processGetFingeprint
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return;
block|}
name|val
operator|=
name|params
operator|.
name|get
argument_list|(
literal|"getVersions"
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|processGetVersions
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return;
block|}
name|val
operator|=
name|params
operator|.
name|get
argument_list|(
literal|"getUpdates"
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
comment|// solrcloud_debug
if|if
condition|(
name|log
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
try|try
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searchHolder
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getNewestSearcher
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|searchHolder
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" min count to sync to (from most recent searcher view) "
operator|+
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
literal|1
argument_list|)
operator|.
name|totalHits
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searchHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Error in solrcloud_debug block"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|processGetUpdates
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return;
block|}
name|val
operator|=
name|params
operator|.
name|get
argument_list|(
literal|"getInputDocument"
argument_list|)
expr_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|processGetInputDocument
argument_list|(
name|rb
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|IdsRequsted
name|reqIds
init|=
name|IdsRequsted
operator|.
name|parseParams
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqIds
operator|.
name|allIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// parse any existing filters
try|try
block|{
name|String
index|[]
name|fqs
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|)
decl_stmt|;
if|if
condition|(
name|fqs
operator|!=
literal|null
operator|&&
name|fqs
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|List
argument_list|<
name|Query
argument_list|>
name|filters
init|=
name|rb
operator|.
name|getFilters
argument_list|()
decl_stmt|;
comment|// if filters already exists, make a copy instead of modifying the original
name|filters
operator|=
name|filters
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|(
name|fqs
operator|.
name|length
argument_list|)
else|:
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|filters
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fq
range|:
name|fqs
control|)
block|{
if|if
condition|(
name|fq
operator|!=
literal|null
operator|&&
name|fq
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|QParser
name|fqp
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|fq
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|filters
operator|.
name|add
argument_list|(
name|fqp
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|rb
operator|.
name|setFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|SolrCore
name|core
init|=
name|req
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|SchemaField
name|idField
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|FieldType
name|fieldType
init|=
name|idField
operator|.
name|getType
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|docList
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|SearcherInfo
name|searcherInfo
init|=
operator|new
name|SearcherInfo
argument_list|(
name|core
argument_list|)
decl_stmt|;
comment|// this is initialized& set on the context *after* any searcher (re-)opening
name|ResultContext
name|resultContext
init|=
literal|null
decl_stmt|;
specifier|final
name|DocTransformer
name|transformer
init|=
name|rsp
operator|.
name|getReturnFields
argument_list|()
operator|.
name|getTransformer
argument_list|()
decl_stmt|;
comment|// true in any situation where we have to use a realtime searcher rather then returning docs
comment|// directly from the UpdateLog
specifier|final
name|boolean
name|mustUseRealtimeSearcher
init|=
comment|// if we have filters, we need to check those against the indexed form of the doc
operator|(
name|rb
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
operator|)
operator|||
operator|(
operator|(
literal|null
operator|!=
name|transformer
operator|)
operator|&&
name|transformer
operator|.
name|needsSolrIndexSearcher
argument_list|()
operator|)
decl_stmt|;
try|try
block|{
name|BytesRefBuilder
name|idBytes
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|idStr
range|:
name|reqIds
operator|.
name|allIds
control|)
block|{
name|fieldType
operator|.
name|readableToIndexed
argument_list|(
name|idStr
argument_list|,
name|idBytes
argument_list|)
expr_stmt|;
if|if
condition|(
name|ulog
operator|!=
literal|null
condition|)
block|{
name|Object
name|o
init|=
name|ulog
operator|.
name|lookup
argument_list|(
name|idBytes
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
comment|// should currently be a List<Oper,Ver,Doc/Id>
name|List
name|entry
init|=
operator|(
name|List
operator|)
name|o
decl_stmt|;
assert|assert
name|entry
operator|.
name|size
argument_list|()
operator|>=
literal|3
assert|;
name|int
name|oper
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|get
argument_list|(
name|UpdateLog
operator|.
name|FLAGS_IDX
argument_list|)
operator|&
name|UpdateLog
operator|.
name|OPERATION_MASK
decl_stmt|;
switch|switch
condition|(
name|oper
condition|)
block|{
case|case
name|UpdateLog
operator|.
name|UPDATE_INPLACE
case|:
comment|// fall through to ADD
case|case
name|UpdateLog
operator|.
name|ADD
case|:
if|if
condition|(
name|mustUseRealtimeSearcher
condition|)
block|{
comment|// close handles to current searchers& result context
name|searcherInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
name|resultContext
operator|=
literal|null
expr_stmt|;
name|ulog
operator|.
name|openRealtimeSearcher
argument_list|()
expr_stmt|;
comment|// force open a new realtime searcher
name|o
operator|=
literal|null
expr_stmt|;
comment|// pretend we never found this record and fall through to use the searcher
break|break;
block|}
name|SolrDocument
name|doc
decl_stmt|;
if|if
condition|(
name|oper
operator|==
name|UpdateLog
operator|.
name|ADD
condition|)
block|{
name|doc
operator|=
name|toSolrDoc
argument_list|(
operator|(
name|SolrInputDocument
operator|)
name|entry
operator|.
name|get
argument_list|(
name|entry
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oper
operator|==
name|UpdateLog
operator|.
name|UPDATE_INPLACE
condition|)
block|{
assert|assert
name|entry
operator|.
name|size
argument_list|()
operator|==
literal|5
assert|;
comment|// For in-place update case, we have obtained the partial document till now. We need to
comment|// resolve it to a full document to be returned to the user.
name|doc
operator|=
name|resolveFullDocument
argument_list|(
name|core
argument_list|,
name|idBytes
operator|.
name|get
argument_list|()
argument_list|,
name|rsp
operator|.
name|getReturnFields
argument_list|()
argument_list|,
operator|(
name|SolrInputDocument
operator|)
name|entry
operator|.
name|get
argument_list|(
name|entry
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
break|break;
comment|// document has been deleted as the resolve was going on
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|INVALID_STATE
argument_list|,
literal|"Expected ADD or UPDATE_INPLACE. Got: "
operator|+
name|oper
argument_list|)
throw|;
block|}
if|if
condition|(
name|transformer
operator|!=
literal|null
condition|)
block|{
name|transformer
operator|.
name|transform
argument_list|(
name|doc
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// unknown docID
block|}
name|docList
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
break|break;
case|case
name|UpdateLog
operator|.
name|DELETE
case|:
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown Operation! "
operator|+
name|oper
argument_list|)
throw|;
block|}
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
continue|continue;
block|}
block|}
comment|// didn't find it in the update log, so it should be in the newest searcher opened
name|searcherInfo
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// don't bother with ResultContext yet, we won't need it if doc doesn't match filters
name|int
name|docid
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|segAndId
init|=
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
operator|.
name|lookupId
argument_list|(
name|idBytes
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|segAndId
operator|>=
literal|0
condition|)
block|{
name|int
name|segid
init|=
operator|(
name|int
operator|)
name|segAndId
decl_stmt|;
name|LeafReaderContext
name|ctx
init|=
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
call|(
name|int
call|)
argument_list|(
name|segAndId
operator|>>
literal|32
argument_list|)
argument_list|)
decl_stmt|;
name|docid
operator|=
name|segid
operator|+
name|ctx
operator|.
name|docBase
expr_stmt|;
if|if
condition|(
name|rb
operator|.
name|getFilters
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Query
name|raw
range|:
name|rb
operator|.
name|getFilters
argument_list|()
control|)
block|{
name|Query
name|q
init|=
name|raw
operator|.
name|rewrite
argument_list|(
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
argument_list|)
decl_stmt|;
name|Scorer
name|scorer
init|=
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
operator|.
name|createWeight
argument_list|(
name|q
argument_list|,
literal|false
argument_list|,
literal|1f
argument_list|)
operator|.
name|scorer
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|==
literal|null
operator|||
name|segid
operator|!=
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|segid
argument_list|)
condition|)
block|{
comment|// filter doesn't match.
name|docid
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|docid
operator|<
literal|0
condition|)
continue|continue;
name|Document
name|luceneDocument
init|=
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
operator|.
name|doc
argument_list|(
name|docid
argument_list|,
name|rsp
operator|.
name|getReturnFields
argument_list|()
operator|.
name|getLuceneFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|SolrDocument
name|doc
init|=
name|toSolrDoc
argument_list|(
name|luceneDocument
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
decl_stmt|;
name|SolrDocumentFetcher
name|docFetcher
init|=
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
operator|.
name|getDocFetcher
argument_list|()
decl_stmt|;
name|docFetcher
operator|.
name|decorateDocValueFields
argument_list|(
name|doc
argument_list|,
name|docid
argument_list|,
name|docFetcher
operator|.
name|getNonStoredDVs
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|transformer
condition|)
block|{
if|if
condition|(
literal|null
operator|==
name|resultContext
condition|)
block|{
comment|// either first pass, or we've re-opened searcher - either way now we setContext
name|resultContext
operator|=
operator|new
name|RTGResultContext
argument_list|(
name|rsp
operator|.
name|getReturnFields
argument_list|()
argument_list|,
name|searcherInfo
operator|.
name|getSearcher
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setContext
argument_list|(
name|resultContext
argument_list|)
expr_stmt|;
block|}
name|transformer
operator|.
name|transform
argument_list|(
name|doc
argument_list|,
name|docid
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|docList
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|searcherInfo
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|addDocListToResponse
argument_list|(
name|rb
argument_list|,
name|docList
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the requested SolrInputDocument from the tlog/index. This will    * always be a full document, i.e. any partial in-place document will be resolved.    */
DECL|method|processGetInputDocument
name|void
name|processGetInputDocument
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|idStr
init|=
name|params
operator|.
name|get
argument_list|(
literal|"getInputDocument"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|idStr
operator|==
literal|null
condition|)
return|return;
name|AtomicLong
name|version
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
name|getInputDocument
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|idStr
argument_list|)
argument_list|,
name|version
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"getInputDocument called for id="
operator|+
name|idStr
operator|+
literal|", returning: "
operator|+
name|doc
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"inputDocument"
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"version"
argument_list|,
name|version
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * A SearcherInfo provides mechanism for obtaining RT searcher, from    * a SolrCore, and closing it, while taking care of the RefCounted references.    */
DECL|class|SearcherInfo
specifier|private
specifier|static
class|class
name|SearcherInfo
block|{
DECL|field|searcherHolder
specifier|private
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherHolder
init|=
literal|null
decl_stmt|;
DECL|field|searcher
specifier|private
name|SolrIndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
DECL|field|core
specifier|final
name|SolrCore
name|core
decl_stmt|;
DECL|method|SearcherInfo
specifier|public
name|SearcherInfo
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|core
operator|=
name|core
expr_stmt|;
block|}
DECL|method|clear
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|searcherHolder
operator|!=
literal|null
condition|)
block|{
comment|// close handles to current searchers
name|searcher
operator|=
literal|null
expr_stmt|;
name|searcherHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
name|searcherHolder
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|init
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|searcher
operator|==
literal|null
condition|)
block|{
name|searcherHolder
operator|=
name|core
operator|.
name|getRealtimeSearcher
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|searcherHolder
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getSearcher
specifier|public
name|SolrIndexSearcher
name|getSearcher
parameter_list|()
block|{
assert|assert
literal|null
operator|!=
name|searcher
operator|:
literal|"init not called!"
assert|;
return|return
name|searcher
return|;
block|}
block|}
comment|/***    * Given a partial document obtained from the transaction log (e.g. as a result of RTG), resolve to a full document    * by populating all the partial updates that were applied on top of that last full document update.    *     * @param onlyTheseFields When a non-null set of field names is passed in, the resolve process only attempts to populate    *        the given fields in this set. When this set is null, it resolves all fields.    * @return Returns the merged document, i.e. the resolved full document, or null if the document was not found (deleted    *          after the resolving began)    */
DECL|method|resolveFullDocument
specifier|private
specifier|static
name|SolrDocument
name|resolveFullDocument
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|BytesRef
name|idBytes
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|,
name|SolrInputDocument
name|partialDoc
parameter_list|,
name|List
name|logEntry
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|onlyTheseFields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|idBytes
operator|==
literal|null
operator|||
name|logEntry
operator|.
name|size
argument_list|()
operator|!=
literal|5
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|INVALID_STATE
argument_list|,
literal|"Either Id field not present in partial document or log entry doesn't have previous version."
argument_list|)
throw|;
block|}
name|long
name|prevPointer
init|=
operator|(
name|long
operator|)
name|logEntry
operator|.
name|get
argument_list|(
name|UpdateLog
operator|.
name|PREV_POINTER_IDX
argument_list|)
decl_stmt|;
name|long
name|prevVersion
init|=
operator|(
name|long
operator|)
name|logEntry
operator|.
name|get
argument_list|(
name|UpdateLog
operator|.
name|PREV_VERSION_IDX
argument_list|)
decl_stmt|;
comment|// get the last full document from ulog
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|long
name|lastPrevPointer
init|=
name|ulog
operator|.
name|applyPartialUpdates
argument_list|(
name|idBytes
argument_list|,
name|prevPointer
argument_list|,
name|prevVersion
argument_list|,
name|onlyTheseFields
argument_list|,
name|partialDoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastPrevPointer
operator|==
operator|-
literal|1
condition|)
block|{
comment|// full document was not found in tlog, but exists in index
name|SolrDocument
name|mergedDoc
init|=
name|mergePartialDocWithFullDocFromIndex
argument_list|(
name|core
argument_list|,
name|idBytes
argument_list|,
name|returnFields
argument_list|,
name|onlyTheseFields
argument_list|,
name|partialDoc
argument_list|)
decl_stmt|;
return|return
name|mergedDoc
return|;
block|}
elseif|else
if|if
condition|(
name|lastPrevPointer
operator|>
literal|0
condition|)
block|{
comment|// We were supposed to have found the last full doc also in the tlogs, but the prevPointer links led to nowhere
comment|// We should reopen a new RT searcher and get the doc. This should be a rare occurrence
name|Term
name|idTerm
init|=
operator|new
name|Term
argument_list|(
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|idBytes
argument_list|)
decl_stmt|;
name|SolrDocument
name|mergedDoc
init|=
name|reopenRealtimeSearcherAndGet
argument_list|(
name|core
argument_list|,
name|idTerm
argument_list|,
name|returnFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergedDoc
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
comment|// the document may have been deleted as the resolving was going on.
block|}
return|return
name|mergedDoc
return|;
block|}
else|else
block|{
comment|// i.e. lastPrevPointer==0
assert|assert
name|lastPrevPointer
operator|==
literal|0
assert|;
comment|// We have successfully resolved the document based off the tlogs
return|return
name|toSolrDoc
argument_list|(
name|partialDoc
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Re-open the RT searcher and get the document, referred to by the idTerm, from that searcher.     * @return Returns the document or null if not found.    */
DECL|method|reopenRealtimeSearcherAndGet
specifier|private
specifier|static
name|SolrDocument
name|reopenRealtimeSearcherAndGet
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|Term
name|idTerm
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|)
throws|throws
name|IOException
block|{
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|ulog
operator|.
name|openRealtimeSearcher
argument_list|()
expr_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherHolder
init|=
name|core
operator|.
name|getRealtimeSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|searcherHolder
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|docid
init|=
name|searcher
operator|.
name|getFirstMatch
argument_list|(
name|idTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|docid
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Document
name|luceneDocument
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docid
argument_list|,
name|returnFields
operator|.
name|getLuceneFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|SolrDocument
name|doc
init|=
name|toSolrDoc
argument_list|(
name|luceneDocument
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
decl_stmt|;
name|SolrDocumentFetcher
name|docFetcher
init|=
name|searcher
operator|.
name|getDocFetcher
argument_list|()
decl_stmt|;
name|docFetcher
operator|.
name|decorateDocValueFields
argument_list|(
name|doc
argument_list|,
name|docid
argument_list|,
name|docFetcher
operator|.
name|getNonStoredDVs
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
finally|finally
block|{
name|searcherHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,    * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns    * the resultant document.    *    * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema    * @param idBytes        Binary representation of the value of the unique key field    * @param returnFields   Return fields, as requested    * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge    *        the given fields in this set. When this set is null, it merges all fields.    * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document    *                       from index; this maybe be null.    * @return If partial document is null, this returns document from the index or null if not found.     *         If partial document is not null, this returns a document from index merged with the partial document, or null if    *         document doesn't exist in the index.    */
DECL|method|mergePartialDocWithFullDocFromIndex
specifier|private
specifier|static
name|SolrDocument
name|mergePartialDocWithFullDocFromIndex
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|BytesRef
name|idBytes
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|onlyTheseFields
parameter_list|,
name|SolrInputDocument
name|partialDoc
parameter_list|)
throws|throws
name|IOException
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherHolder
init|=
name|core
operator|.
name|getRealtimeSearcher
argument_list|()
decl_stmt|;
comment|//Searcher();
try|try
block|{
comment|// now fetch last document from index, and merge partialDoc on top of it
name|SolrIndexSearcher
name|searcher
init|=
name|searcherHolder
operator|.
name|get
argument_list|()
decl_stmt|;
name|SchemaField
name|idField
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|Term
name|idTerm
init|=
operator|new
name|Term
argument_list|(
name|idField
operator|.
name|getName
argument_list|()
argument_list|,
name|idBytes
argument_list|)
decl_stmt|;
name|int
name|docid
init|=
name|searcher
operator|.
name|getFirstMatch
argument_list|(
name|idTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|docid
operator|<
literal|0
condition|)
block|{
comment|// The document was not found in index! Reopen a new RT searcher (to be sure) and get again.
comment|// This should be because the document was deleted recently.
name|SolrDocument
name|doc
init|=
name|reopenRealtimeSearcherAndGet
argument_list|(
name|core
argument_list|,
name|idTerm
argument_list|,
name|returnFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
comment|// Unable to resolve the last full doc in tlog fully,
comment|// and document not found in index even after opening new rt searcher.
comment|// This must be a case of deleted doc
return|return
literal|null
return|;
block|}
return|return
name|doc
return|;
block|}
name|SolrDocument
name|doc
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|decorateFields
init|=
name|onlyTheseFields
operator|==
literal|null
condition|?
name|searcher
operator|.
name|getDocFetcher
argument_list|()
operator|.
name|getNonStoredDVs
argument_list|(
literal|false
argument_list|)
else|:
name|onlyTheseFields
decl_stmt|;
name|Document
name|luceneDocument
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|docid
argument_list|,
name|returnFields
operator|.
name|getLuceneFieldNames
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|=
name|toSolrDoc
argument_list|(
name|luceneDocument
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|getDocFetcher
argument_list|()
operator|.
name|decorateDocValueFields
argument_list|(
name|doc
argument_list|,
name|docid
argument_list|,
name|decorateFields
argument_list|)
expr_stmt|;
name|long
name|docVersion
init|=
operator|(
name|long
operator|)
name|doc
operator|.
name|getFirstValue
argument_list|(
name|VERSION_FIELD
argument_list|)
decl_stmt|;
name|Object
name|partialVersionObj
init|=
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
name|VERSION_FIELD
argument_list|)
decl_stmt|;
name|long
name|partialDocVersion
init|=
name|partialVersionObj
operator|instanceof
name|Field
condition|?
operator|(
operator|(
name|Field
operator|)
name|partialVersionObj
operator|)
operator|.
name|numericValue
argument_list|()
operator|.
name|longValue
argument_list|()
else|:
name|partialVersionObj
operator|instanceof
name|Number
condition|?
operator|(
operator|(
name|Number
operator|)
name|partialVersionObj
operator|)
operator|.
name|longValue
argument_list|()
else|:
name|Long
operator|.
name|parseLong
argument_list|(
name|partialVersionObj
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|docVersion
operator|>
name|partialDocVersion
condition|)
block|{
return|return
name|doc
return|;
block|}
for|for
control|(
name|String
name|fieldName
range|:
name|partialDoc
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|doc
operator|.
name|setField
argument_list|(
name|fieldName
operator|.
name|toString
argument_list|()
argument_list|,
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
comment|// since partial doc will only contain single valued fields, this is fine
block|}
return|return
name|doc
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|searcherHolder
operator|!=
literal|null
condition|)
block|{
name|searcherHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|DELETED
specifier|public
specifier|static
name|SolrInputDocument
name|DELETED
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
comment|/** returns the SolrInputDocument from the current tlog, or DELETED if it has been deleted, or    * null if there is no record of it in the current update log.  If null is returned, it could    * still be in the latest index.    * @param versionReturned If a non-null AtomicLong is passed in, it is set to the version of the update returned from the TLog.    * @param resolveFullDocument In case the document is fetched from the tlog, it could only be a partial document if the last update    *                  was an in-place update. In that case, should this partial document be resolved to a full document (by following    *                  back prevPointer/prevVersion)?    */
DECL|method|getInputDocumentFromTlog
specifier|public
specifier|static
name|SolrInputDocument
name|getInputDocumentFromTlog
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|BytesRef
name|idBytes
parameter_list|,
name|AtomicLong
name|versionReturned
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|onlyTheseNonStoredDVs
parameter_list|,
name|boolean
name|resolveFullDocument
parameter_list|)
block|{
name|UpdateLog
name|ulog
init|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|ulog
operator|!=
literal|null
condition|)
block|{
name|Object
name|o
init|=
name|ulog
operator|.
name|lookup
argument_list|(
name|idBytes
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
comment|// should currently be a List<Oper,Ver,Doc/Id>
name|List
name|entry
init|=
operator|(
name|List
operator|)
name|o
decl_stmt|;
assert|assert
name|entry
operator|.
name|size
argument_list|()
operator|>=
literal|3
assert|;
name|int
name|oper
init|=
operator|(
name|Integer
operator|)
name|entry
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|&
name|UpdateLog
operator|.
name|OPERATION_MASK
decl_stmt|;
if|if
condition|(
name|versionReturned
operator|!=
literal|null
condition|)
block|{
name|versionReturned
operator|.
name|set
argument_list|(
operator|(
name|long
operator|)
name|entry
operator|.
name|get
argument_list|(
name|UpdateLog
operator|.
name|VERSION_IDX
argument_list|)
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|oper
condition|)
block|{
case|case
name|UpdateLog
operator|.
name|UPDATE_INPLACE
case|:
assert|assert
name|entry
operator|.
name|size
argument_list|()
operator|==
literal|5
assert|;
if|if
condition|(
name|resolveFullDocument
condition|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|(
name|SolrInputDocument
operator|)
name|entry
operator|.
name|get
argument_list|(
name|entry
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// For in-place update case, we have obtained the partial document till now. We need to
comment|// resolve it to a full document to be returned to the user.
name|SolrDocument
name|sdoc
init|=
name|resolveFullDocument
argument_list|(
name|core
argument_list|,
name|idBytes
argument_list|,
operator|new
name|SolrReturnFields
argument_list|()
argument_list|,
name|doc
argument_list|,
name|entry
argument_list|,
name|onlyTheseNonStoredDVs
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdoc
operator|==
literal|null
condition|)
block|{
return|return
name|DELETED
return|;
block|}
name|doc
operator|=
name|toSolrInputDocument
argument_list|(
name|sdoc
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|doc
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error while resolving full document. "
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// fall through to ADD, so as to get only the partial document
block|}
case|case
name|UpdateLog
operator|.
name|ADD
case|:
return|return
operator|(
name|SolrInputDocument
operator|)
name|entry
operator|.
name|get
argument_list|(
name|entry
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
case|case
name|UpdateLog
operator|.
name|DELETE
case|:
return|return
name|DELETED
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unknown Operation! "
operator|+
name|oper
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Obtains the latest document for a given id from the tlog or index (if not found in the tlog).    *     * NOTE: This method uses the effective value for avoidRetrievingStoredFields param as false and    * for nonStoredDVs as null in the call to @see {@link RealTimeGetComponent#getInputDocument(SolrCore, BytesRef, AtomicLong, boolean, Set, boolean)},    * so as to retrieve all stored and non-stored DV fields from all documents. Also, it uses the effective value of    * resolveFullDocument param as true, i.e. it resolves any partial documents (in-place updates), in case the     * document is fetched from the tlog, to a full document.    */
DECL|method|getInputDocument
specifier|public
specifier|static
name|SolrInputDocument
name|getInputDocument
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|BytesRef
name|idBytes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getInputDocument
argument_list|(
name|core
argument_list|,
name|idBytes
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * Obtains the latest document for a given id from the tlog or through the realtime searcher (if not found in the tlog).     * @param versionReturned If a non-null AtomicLong is passed in, it is set to the version of the update returned from the TLog.    * @param avoidRetrievingStoredFields Setting this to true avoids fetching stored fields through the realtime searcher,    *                  however has no effect on documents obtained from the tlog.     *                  Non-stored docValues fields are populated anyway, and are not affected by this parameter. Note that if    *                  the id field is a stored field, it will not be populated if this parameter is true and the document is    *                  obtained from the index.    * @param onlyTheseNonStoredDVs If not-null, populate only these DV fields in the document fetched through the realtime searcher.     *                  If this is null, decorate all non-stored  DVs (that are not targets of copy fields) from the searcher.    * @param resolveFullDocument In case the document is fetched from the tlog, it could only be a partial document if the last update    *                  was an in-place update. In that case, should this partial document be resolved to a full document (by following    *                  back prevPointer/prevVersion)?    */
DECL|method|getInputDocument
specifier|public
specifier|static
name|SolrInputDocument
name|getInputDocument
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|BytesRef
name|idBytes
parameter_list|,
name|AtomicLong
name|versionReturned
parameter_list|,
name|boolean
name|avoidRetrievingStoredFields
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|onlyTheseNonStoredDVs
parameter_list|,
name|boolean
name|resolveFullDocument
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrInputDocument
name|sid
init|=
literal|null
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherHolder
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SolrIndexSearcher
name|searcher
init|=
literal|null
decl_stmt|;
name|sid
operator|=
name|getInputDocumentFromTlog
argument_list|(
name|core
argument_list|,
name|idBytes
argument_list|,
name|versionReturned
argument_list|,
name|onlyTheseNonStoredDVs
argument_list|,
name|resolveFullDocument
argument_list|)
expr_stmt|;
if|if
condition|(
name|sid
operator|==
name|DELETED
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|sid
operator|==
literal|null
condition|)
block|{
comment|// didn't find it in the update log, so it should be in the newest searcher opened
if|if
condition|(
name|searcher
operator|==
literal|null
condition|)
block|{
name|searcherHolder
operator|=
name|core
operator|.
name|getRealtimeSearcher
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|searcherHolder
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
comment|// SolrCore.verbose("RealTimeGet using searcher ", searcher);
name|SchemaField
name|idField
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getUniqueKeyField
argument_list|()
decl_stmt|;
name|int
name|docid
init|=
name|searcher
operator|.
name|getFirstMatch
argument_list|(
operator|new
name|Term
argument_list|(
name|idField
operator|.
name|getName
argument_list|()
argument_list|,
name|idBytes
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|docid
operator|<
literal|0
condition|)
return|return
literal|null
return|;
name|SolrDocumentFetcher
name|docFetcher
init|=
name|searcher
operator|.
name|getDocFetcher
argument_list|()
decl_stmt|;
if|if
condition|(
name|avoidRetrievingStoredFields
condition|)
block|{
name|sid
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Document
name|luceneDocument
init|=
name|docFetcher
operator|.
name|doc
argument_list|(
name|docid
argument_list|)
decl_stmt|;
name|sid
operator|=
name|toSolrInputDocument
argument_list|(
name|luceneDocument
argument_list|,
name|core
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|onlyTheseNonStoredDVs
operator|!=
literal|null
condition|)
block|{
name|docFetcher
operator|.
name|decorateDocValueFields
argument_list|(
name|sid
argument_list|,
name|docid
argument_list|,
name|onlyTheseNonStoredDVs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docFetcher
operator|.
name|decorateDocValueFields
argument_list|(
name|sid
argument_list|,
name|docid
argument_list|,
name|docFetcher
operator|.
name|getNonStoredDVsWithoutCopyTargets
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|searcherHolder
operator|!=
literal|null
condition|)
block|{
name|searcherHolder
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|versionReturned
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sid
operator|.
name|containsKey
argument_list|(
name|VERSION_FIELD
argument_list|)
condition|)
block|{
name|versionReturned
operator|.
name|set
argument_list|(
operator|(
name|long
operator|)
name|sid
operator|.
name|getFieldValue
argument_list|(
name|VERSION_FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sid
return|;
block|}
DECL|method|toSolrInputDocument
specifier|private
specifier|static
name|SolrInputDocument
name|toSolrInputDocument
parameter_list|(
name|Document
name|doc
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|SolrInputDocument
name|out
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
name|String
name|fname
init|=
name|f
operator|.
name|name
argument_list|()
decl_stmt|;
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|&&
operator|!
name|sf
operator|.
name|stored
argument_list|()
operator|)
operator|||
name|schema
operator|.
name|isCopyFieldTarget
argument_list|(
name|sf
argument_list|)
condition|)
continue|continue;
name|val
operator|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// object or external string?
block|}
else|else
block|{
name|val
operator|=
name|f
operator|.
name|stringValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
name|f
operator|.
name|numericValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
name|f
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
name|f
expr_stmt|;
block|}
comment|// todo: how to handle targets of copy fields (including polyfield sub-fields)?
name|out
operator|.
name|addField
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|out
return|;
block|}
DECL|method|toSolrInputDocument
specifier|private
specifier|static
name|SolrInputDocument
name|toSolrInputDocument
parameter_list|(
name|SolrDocument
name|doc
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|SolrInputDocument
name|out
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fname
range|:
name|doc
operator|.
name|getFieldNames
argument_list|()
control|)
block|{
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|&&
operator|!
name|sf
operator|.
name|stored
argument_list|()
operator|)
operator|||
name|schema
operator|.
name|isCopyFieldTarget
argument_list|(
name|sf
argument_list|)
condition|)
continue|continue;
block|}
for|for
control|(
name|Object
name|val
range|:
name|doc
operator|.
name|getFieldValues
argument_list|(
name|fname
argument_list|)
control|)
block|{
if|if
condition|(
name|val
operator|instanceof
name|Field
condition|)
block|{
name|Field
name|f
init|=
operator|(
name|Field
operator|)
name|val
decl_stmt|;
if|if
condition|(
name|sf
operator|!=
literal|null
condition|)
block|{
name|val
operator|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// object or external string?
block|}
else|else
block|{
name|val
operator|=
name|f
operator|.
name|stringValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
name|f
operator|.
name|numericValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
name|f
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
name|val
operator|=
name|f
expr_stmt|;
block|}
block|}
name|out
operator|.
name|addField
argument_list|(
name|fname
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
DECL|method|toSolrDoc
specifier|private
specifier|static
name|SolrDocument
name|toSolrDoc
parameter_list|(
name|Document
name|doc
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|SolrDocument
name|out
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
comment|// Make sure multivalued fields are represented as lists
name|Object
name|existing
init|=
name|out
operator|.
name|get
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
comment|// don't return copyField targets
if|if
condition|(
name|sf
operator|!=
literal|null
operator|&&
name|schema
operator|.
name|isCopyFieldTarget
argument_list|(
name|sf
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|sf
operator|!=
literal|null
operator|&&
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|SORTED_NUMERIC
condition|)
block|{
comment|// SORTED_NUMERICS store sortable bits version of the value, need to retrieve the original
name|vals
operator|.
name|add
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
comment|// (will materialize by side-effect)
block|}
else|else
block|{
name|vals
operator|.
name|add
argument_list|(
name|materialize
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|setField
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|setField
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
name|materialize
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|out
operator|.
name|addField
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|,
name|materialize
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|out
return|;
block|}
comment|/**    * Ensure we don't have {@link org.apache.lucene.document.LazyDocument.LazyField} or equivalent.    * It can pose problems if the searcher is about to be closed and we haven't fetched a value yet.    */
DECL|method|materialize
specifier|private
specifier|static
name|IndexableField
name|materialize
parameter_list|(
name|IndexableField
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|instanceof
name|Field
condition|)
block|{
comment|// already materialized
return|return
name|in
return|;
block|}
return|return
operator|new
name|ClonedField
argument_list|(
name|in
argument_list|)
return|;
block|}
DECL|class|ClonedField
specifier|private
specifier|static
class|class
name|ClonedField
extends|extends
name|Field
block|{
comment|// TODO Lucene Field has no copy constructor; maybe it should?
DECL|method|ClonedField
name|ClonedField
parameter_list|(
name|IndexableField
name|in
parameter_list|)
block|{
name|super
argument_list|(
name|in
operator|.
name|name
argument_list|()
argument_list|,
name|in
operator|.
name|fieldType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|fieldsData
operator|=
name|in
operator|.
name|numericValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fieldsData
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fieldsData
operator|=
name|in
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fieldsData
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|fieldsData
operator|=
name|in
operator|.
name|stringValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|fieldsData
operator|==
literal|null
condition|)
block|{
comment|// fallback:
assert|assert
literal|false
operator|:
name|in
assert|;
comment|// unexpected
block|}
block|}
block|}
block|}
block|}
comment|/**    * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance.     * @lucene.experimental    */
DECL|method|toSolrDoc
specifier|public
specifier|static
name|SolrDocument
name|toSolrDoc
parameter_list|(
name|SolrInputDocument
name|sdoc
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
comment|// TODO: do something more performant than this double conversion
name|Document
name|doc
init|=
name|DocumentBuilder
operator|.
name|toDocument
argument_list|(
name|sdoc
argument_list|,
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
comment|// copy the stored fields only
name|Document
name|out
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|doc
operator|.
name|getFields
argument_list|()
control|)
block|{
if|if
condition|(
name|f
operator|.
name|fieldType
argument_list|()
operator|.
name|stored
argument_list|()
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|.
name|fieldType
argument_list|()
operator|.
name|docValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
name|SchemaField
name|schemaField
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|f
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaField
operator|!=
literal|null
operator|&&
operator|!
name|schemaField
operator|.
name|stored
argument_list|()
operator|&&
name|schemaField
operator|.
name|useDocValuesAsStored
argument_list|()
condition|)
block|{
name|out
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Don't know how to handle field "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|toSolrDoc
argument_list|(
name|out
argument_list|,
name|schema
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|<
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|==
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
return|return
name|createSubRequests
argument_list|(
name|rb
argument_list|)
return|;
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
DECL|method|createSubRequests
specifier|public
name|int
name|createSubRequests
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|IdsRequsted
name|reqIds
init|=
name|IdsRequsted
operator|.
name|parseParams
argument_list|(
name|rb
operator|.
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqIds
operator|.
name|allIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
comment|// TODO: handle collection=...?
name|ZkController
name|zkController
init|=
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
decl_stmt|;
comment|// if shards=... then use that
if|if
condition|(
name|zkController
operator|!=
literal|null
operator|&&
name|params
operator|.
name|get
argument_list|(
name|ShardParams
operator|.
name|SHARDS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|String
name|collection
init|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkController
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|sliceToId
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|reqIds
operator|.
name|allIds
control|)
block|{
name|Slice
name|slice
init|=
name|coll
operator|.
name|getRouter
argument_list|()
operator|.
name|getTargetSlice
argument_list|(
name|id
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|params
argument_list|,
name|coll
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|idsForShard
init|=
name|sliceToId
operator|.
name|get
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|idsForShard
operator|==
literal|null
condition|)
block|{
name|idsForShard
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|sliceToId
operator|.
name|put
argument_list|(
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|idsForShard
argument_list|)
expr_stmt|;
block|}
name|idsForShard
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|sliceToId
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|shard
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ShardRequest
name|sreq
init|=
name|createShardRequest
argument_list|(
name|rb
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
comment|// sreq.shards = new String[]{shard};    // TODO: would be nice if this would work...
name|sreq
operator|.
name|shards
operator|=
name|sliceToShards
argument_list|(
name|rb
argument_list|,
name|collection
argument_list|,
name|shard
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ShardRequest
name|sreq
init|=
name|createShardRequest
argument_list|(
name|rb
argument_list|,
name|reqIds
operator|.
name|allIds
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
literal|null
expr_stmt|;
comment|// ALL
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
comment|/**    * Helper method for creating a new ShardRequest for the specified ids, based on the params     * specified for the current request.  The new ShardRequest does not yet know anything about     * which shard/slice it will be sent to.    */
DECL|method|createShardRequest
specifier|private
name|ShardRequest
name|createShardRequest
parameter_list|(
specifier|final
name|ResponseBuilder
name|rb
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
block|{
specifier|final
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: how to avoid hardcoding this and hit the same handler?
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|ShardParams
operator|.
name|SHARDS_QT
argument_list|,
literal|"/get"
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|DISTRIB
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ShardParams
operator|.
name|SHARDS
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|ID
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
literal|"ids"
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
literal|"ids"
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|ids
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sreq
return|;
block|}
DECL|method|sliceToShards
specifier|private
name|String
index|[]
name|sliceToShards
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|slice
parameter_list|)
block|{
name|String
name|lookup
init|=
name|collection
operator|+
literal|'_'
operator|+
name|slice
decl_stmt|;
comment|// seems either form may be filled in rb.slices?
comment|// We use this since the shard handler already filled in the slice to shards mapping.
comment|// A better approach would be to avoid filling out every slice each time, or to cache
comment|// the mappings.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rb
operator|.
name|slices
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"LOOKUP_SLICE:"
operator|+
name|rb
operator|.
name|slices
index|[
name|i
index|]
operator|+
literal|"="
operator|+
name|rb
operator|.
name|shards
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|lookup
operator|.
name|equals
argument_list|(
name|rb
operator|.
name|slices
index|[
name|i
index|]
argument_list|)
operator|||
name|slice
operator|.
name|equals
argument_list|(
name|rb
operator|.
name|slices
index|[
name|i
index|]
argument_list|)
condition|)
block|{
return|return
operator|new
name|String
index|[]
block|{
name|rb
operator|.
name|shards
index|[
name|i
index|]
block|}
return|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Can't find shard '"
operator|+
name|lookup
operator|+
literal|"'"
argument_list|)
throw|;
block|}
comment|/***   private void handleRegularResponses(ResponseBuilder rb, ShardRequest sreq) {   }   ***/
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
return|return;
block|}
name|mergeResponses
argument_list|(
name|rb
argument_list|)
expr_stmt|;
block|}
DECL|method|mergeResponses
specifier|private
name|void
name|mergeResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
name|SolrDocumentList
name|docList
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|finished
control|)
block|{
comment|// if shards=shard1,shard2 was used, then  we query both shards for each id and
comment|// can get more than one response
for|for
control|(
name|ShardResponse
name|srsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrResponse
name|sr
init|=
name|srsp
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|NamedList
name|nl
init|=
name|sr
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|SolrDocumentList
name|subList
init|=
operator|(
name|SolrDocumentList
operator|)
name|nl
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|docList
operator|.
name|addAll
argument_list|(
name|subList
argument_list|)
expr_stmt|;
block|}
block|}
name|addDocListToResponse
argument_list|(
name|rb
argument_list|,
name|docList
argument_list|)
expr_stmt|;
block|}
comment|/**    * Encapsulates logic for how a {@link SolrDocumentList} should be added to the response    * based on the request params used    */
DECL|method|addDocListToResponse
specifier|private
name|void
name|addDocListToResponse
parameter_list|(
specifier|final
name|ResponseBuilder
name|rb
parameter_list|,
specifier|final
name|SolrDocumentList
name|docList
parameter_list|)
block|{
assert|assert
literal|null
operator|!=
name|docList
assert|;
specifier|final
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
specifier|final
name|IdsRequsted
name|reqIds
init|=
name|IdsRequsted
operator|.
name|parseParams
argument_list|(
name|rb
operator|.
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqIds
operator|.
name|useSingleDocResponse
condition|)
block|{
assert|assert
name|docList
operator|.
name|size
argument_list|()
operator|<=
literal|1
assert|;
comment|// if the doc was not found, then use a value of null.
name|rsp
operator|.
name|add
argument_list|(
literal|"doc"
argument_list|,
name|docList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
name|docList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docList
operator|.
name|setNumFound
argument_list|(
name|docList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|addResponse
argument_list|(
name|docList
argument_list|)
expr_stmt|;
block|}
block|}
comment|////////////////////////////////////////////
comment|///  SolrInfoBean
comment|////////////////////////////////////////////
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"query"
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|QUERY
return|;
block|}
DECL|method|processGetFingeprint
specifier|public
name|void
name|processGetFingeprint
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|long
name|maxVersion
init|=
name|params
operator|.
name|getLong
argument_list|(
literal|"getFingerprint"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|IndexFingerprint
name|fingerprint
init|=
name|IndexFingerprint
operator|.
name|getFingerprint
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|maxVersion
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"fingerprint"
argument_list|,
name|fingerprint
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////////////////////////////////////////////////////////////
comment|// Returns last versions added to index
comment|///////////////////////////////////////////////////////////////////////////////////
DECL|method|processGetVersions
specifier|public
name|void
name|processGetVersions
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|int
name|nVersions
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"getVersions"
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|nVersions
operator|==
operator|-
literal|1
condition|)
return|return;
name|boolean
name|doFingerprint
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"fingerprint"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|sync
init|=
name|params
operator|.
name|get
argument_list|(
literal|"sync"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sync
operator|!=
literal|null
condition|)
block|{
name|processSync
argument_list|(
name|rb
argument_list|,
name|nVersions
argument_list|,
name|sync
argument_list|)
expr_stmt|;
return|return;
block|}
name|UpdateLog
name|ulog
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|ulog
operator|==
literal|null
condition|)
return|return;
comment|// get fingerprint first as it will cause a soft commit
comment|// and would avoid mismatch if documents are being actively index especially during PeerSync
if|if
condition|(
name|doFingerprint
condition|)
block|{
name|IndexFingerprint
name|fingerprint
init|=
name|IndexFingerprint
operator|.
name|getFingerprint
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"fingerprint"
argument_list|,
name|fingerprint
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|UpdateLog
operator|.
name|RecentUpdates
name|recentUpdates
init|=
name|ulog
operator|.
name|getRecentUpdates
argument_list|()
init|)
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|versions
init|=
name|recentUpdates
operator|.
name|getVersions
argument_list|(
name|nVersions
argument_list|)
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"versions"
argument_list|,
name|versions
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|processSync
specifier|public
name|void
name|processSync
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|int
name|nVersions
parameter_list|,
name|String
name|sync
parameter_list|)
block|{
name|boolean
name|onlyIfActive
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
literal|"onlyIfActive"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyIfActive
condition|)
block|{
if|if
condition|(
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
operator|.
name|getLastPublished
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Last published state was not ACTIVE, cannot sync."
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"sync"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|replicas
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|sync
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|cantReachIsSuccess
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
literal|"cantReachIsSuccess"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|PeerSync
name|peerSync
init|=
operator|new
name|PeerSync
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|replicas
argument_list|,
name|nVersions
argument_list|,
name|cantReachIsSuccess
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
name|peerSync
operator|.
name|sync
argument_list|()
operator|.
name|isSuccess
argument_list|()
decl_stmt|;
comment|// TODO: more complex response?
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"sync"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
DECL|method|processGetUpdates
specifier|public
name|void
name|processGetUpdates
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|rb
operator|.
name|req
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
name|rb
operator|.
name|rsp
decl_stmt|;
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|params
operator|.
name|getBool
argument_list|(
name|COMPONENT_NAME
argument_list|,
literal|true
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|versionsStr
init|=
name|params
operator|.
name|get
argument_list|(
literal|"getUpdates"
argument_list|)
decl_stmt|;
if|if
condition|(
name|versionsStr
operator|==
literal|null
condition|)
return|return;
name|UpdateLog
name|ulog
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|ulog
operator|==
literal|null
condition|)
return|return;
comment|// handle version ranges
name|List
argument_list|<
name|Long
argument_list|>
name|versions
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|versionsStr
operator|.
name|indexOf
argument_list|(
literal|"..."
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|versions
operator|=
name|resolveVersionRanges
argument_list|(
name|versionsStr
argument_list|,
name|ulog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|versions
operator|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|versionsStr
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Long
operator|::
name|parseLong
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// find fingerprint for max version for which updates are requested
name|boolean
name|doFingerprint
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"fingerprint"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|doFingerprint
condition|)
block|{
name|long
name|maxVersionForUpdate
init|=
name|Collections
operator|.
name|min
argument_list|(
name|versions
argument_list|,
name|PeerSync
operator|.
name|absComparator
argument_list|)
decl_stmt|;
name|IndexFingerprint
name|fingerprint
init|=
name|IndexFingerprint
operator|.
name|getFingerprint
argument_list|(
name|req
operator|.
name|getCore
argument_list|()
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|maxVersionForUpdate
argument_list|)
argument_list|)
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"fingerprint"
argument_list|,
name|fingerprint
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|updates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|versions
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|minVersion
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
comment|// TODO: get this from cache instead of rebuilding?
try|try
init|(
name|UpdateLog
operator|.
name|RecentUpdates
name|recentUpdates
init|=
name|ulog
operator|.
name|getRecentUpdates
argument_list|()
init|)
block|{
for|for
control|(
name|Long
name|version
range|:
name|versions
control|)
block|{
try|try
block|{
name|Object
name|o
init|=
name|recentUpdates
operator|.
name|lookup
argument_list|(
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|version
operator|>
literal|0
condition|)
block|{
name|minVersion
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minVersion
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|// TODO: do any kind of validation here?
name|updates
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
decl||
name|ClassCastException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception reading log for updates"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Must return all delete-by-query commands that occur after the first add requested
comment|// since they may apply.
name|updates
operator|.
name|addAll
argument_list|(
name|recentUpdates
operator|.
name|getDeleteByQuery
argument_list|(
name|minVersion
argument_list|)
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"updates"
argument_list|,
name|updates
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|resolveVersionRanges
specifier|private
name|List
argument_list|<
name|Long
argument_list|>
name|resolveVersionRanges
parameter_list|(
name|String
name|versionsStr
parameter_list|,
name|UpdateLog
name|ulog
parameter_list|)
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|versionsStr
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|ranges
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|versionsStr
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// TODO merge ranges.
comment|// get all the versions from updatelog and sort them
name|List
argument_list|<
name|Long
argument_list|>
name|versionAvailable
init|=
literal|null
decl_stmt|;
try|try
init|(
name|UpdateLog
operator|.
name|RecentUpdates
name|recentUpdates
init|=
name|ulog
operator|.
name|getRecentUpdates
argument_list|()
init|)
block|{
name|versionAvailable
operator|=
name|recentUpdates
operator|.
name|getVersions
argument_list|(
name|ulog
operator|.
name|getNumRecordsToKeep
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// sort versions
name|Collections
operator|.
name|sort
argument_list|(
name|versionAvailable
argument_list|,
name|PeerSync
operator|.
name|absComparator
argument_list|)
expr_stmt|;
comment|// This can be done with single pass over both ranges and versionsAvailable, that would require
comment|// merging ranges. We currently use Set to ensure there are no duplicates.
name|Set
argument_list|<
name|Long
argument_list|>
name|versionsToRet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|ulog
operator|.
name|getNumRecordsToKeep
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|range
range|:
name|ranges
control|)
block|{
name|String
index|[]
name|rangeBounds
init|=
name|range
operator|.
name|split
argument_list|(
literal|"\\.{3}"
argument_list|)
decl_stmt|;
name|int
name|indexStart
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|versionAvailable
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|rangeBounds
index|[
literal|1
index|]
argument_list|)
argument_list|,
name|PeerSync
operator|.
name|absComparator
argument_list|)
decl_stmt|;
name|int
name|indexEnd
init|=
name|Collections
operator|.
name|binarySearch
argument_list|(
name|versionAvailable
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|rangeBounds
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|PeerSync
operator|.
name|absComparator
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexStart
operator|>=
literal|0
operator|&&
name|indexEnd
operator|>=
literal|0
condition|)
block|{
name|versionsToRet
operator|.
name|addAll
argument_list|(
name|versionAvailable
operator|.
name|subList
argument_list|(
name|indexStart
argument_list|,
name|indexEnd
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// indexEnd is exclusive
block|}
block|}
comment|// TODO do we need to sort versions using PeerSync.absComparator?
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|versionsToRet
argument_list|)
return|;
block|}
comment|/**     * Simple struct for tracking what ids were requested and what response format is expected     * acording to the request params    */
DECL|class|IdsRequsted
specifier|private
specifier|final
specifier|static
class|class
name|IdsRequsted
block|{
comment|/** An List (which may be empty but will never be null) of the uniqueKeys requested. */
DECL|field|allIds
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allIds
decl_stmt|;
comment|/**       * true if the params provided by the user indicate that a single doc response structure       * should be used.        * Value is meaninless if<code>ids</code> is empty.      */
DECL|field|useSingleDocResponse
specifier|public
specifier|final
name|boolean
name|useSingleDocResponse
decl_stmt|;
DECL|method|IdsRequsted
specifier|private
name|IdsRequsted
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|allIds
parameter_list|,
name|boolean
name|useSingleDocResponse
parameter_list|)
block|{
assert|assert
literal|null
operator|!=
name|allIds
assert|;
name|this
operator|.
name|allIds
operator|=
name|allIds
expr_stmt|;
name|this
operator|.
name|useSingleDocResponse
operator|=
name|useSingleDocResponse
expr_stmt|;
block|}
comment|/**      * Parsers the<code>id</code> and<code>ids</code> params attached to the specified request object,       * and returns an<code>IdsRequsted</code> struct to use for this request.      * The<code>IdsRequsted</code> is cached in the {@link SolrQueryRequest#getContext} so subsequent       * method calls on the same request will not re-parse the params.      */
DECL|method|parseParams
specifier|public
specifier|static
name|IdsRequsted
name|parseParams
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
specifier|final
name|String
name|contextKey
init|=
name|IdsRequsted
operator|.
name|class
operator|.
name|toString
argument_list|()
operator|+
literal|"_PARSED_ID_PARAMS"
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|containsKey
argument_list|(
name|contextKey
argument_list|)
condition|)
block|{
return|return
operator|(
name|IdsRequsted
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|contextKey
argument_list|)
return|;
block|}
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
specifier|final
name|String
name|id
index|[]
init|=
name|params
operator|.
name|getParams
argument_list|(
name|ID
argument_list|)
decl_stmt|;
specifier|final
name|String
name|ids
index|[]
init|=
name|params
operator|.
name|getParams
argument_list|(
literal|"ids"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|&&
name|ids
operator|==
literal|null
condition|)
block|{
name|IdsRequsted
name|result
init|=
operator|new
name|IdsRequsted
argument_list|(
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|contextKey
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allIds
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
literal|null
operator|==
name|id
condition|?
literal|0
else|:
name|id
operator|.
name|length
operator|)
operator|+
operator|(
literal|null
operator|==
name|ids
condition|?
literal|0
else|:
operator|(
literal|2
operator|*
name|ids
operator|.
name|length
operator|)
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|id
condition|)
block|{
for|for
control|(
name|String
name|singleId
range|:
name|id
control|)
block|{
name|allIds
operator|.
name|add
argument_list|(
name|singleId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|null
operator|!=
name|ids
condition|)
block|{
for|for
control|(
name|String
name|idList
range|:
name|ids
control|)
block|{
name|allIds
operator|.
name|addAll
argument_list|(
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|idList
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if the client specified a single id=foo, then use "doc":{
comment|// otherwise use a standard doclist
name|IdsRequsted
name|result
init|=
operator|new
name|IdsRequsted
argument_list|(
name|allIds
argument_list|,
operator|(
name|ids
operator|==
literal|null
operator|&&
name|allIds
operator|.
name|size
argument_list|()
operator|<=
literal|1
operator|)
argument_list|)
decl_stmt|;
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|contextKey
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
comment|/**    * A lite weight ResultContext for use with RTG requests that can point at Realtime Searchers    */
DECL|class|RTGResultContext
specifier|private
specifier|static
specifier|final
class|class
name|RTGResultContext
extends|extends
name|ResultContext
block|{
DECL|field|returnFields
specifier|final
name|ReturnFields
name|returnFields
decl_stmt|;
DECL|field|searcher
specifier|final
name|SolrIndexSearcher
name|searcher
decl_stmt|;
DECL|field|req
specifier|final
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|method|RTGResultContext
specifier|public
name|RTGResultContext
parameter_list|(
name|ReturnFields
name|returnFields
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|this
operator|.
name|returnFields
operator|=
name|returnFields
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
block|}
comment|/** @returns null */
DECL|method|getDocList
specifier|public
name|DocList
name|getDocList
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getReturnFields
specifier|public
name|ReturnFields
name|getReturnFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|returnFields
return|;
block|}
DECL|method|getSearcher
specifier|public
name|SolrIndexSearcher
name|getSearcher
parameter_list|()
block|{
return|return
name|this
operator|.
name|searcher
return|;
block|}
comment|/** @returns null */
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getRequest
specifier|public
name|SolrQueryRequest
name|getRequest
parameter_list|()
block|{
return|return
name|this
operator|.
name|req
return|;
block|}
comment|/** @returns null */
DECL|method|getProcessedDocuments
specifier|public
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|getProcessedDocuments
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

