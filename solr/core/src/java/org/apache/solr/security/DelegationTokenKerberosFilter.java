begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|RetryPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|AuthInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFramework
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|CuratorFrameworkFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|framework
operator|.
name|api
operator|.
name|ACLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|curator
operator|.
name|retry
operator|.
name|ExponentialBackoffRetry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|HttpUserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SecurityAwareZkACLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkACLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|ACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This is an authentication filter based on Hadoop's {@link DelegationTokenAuthenticationFilter}.  * The Kerberos plugin can be configured to use delegation tokens, which allow an  * application to reuse the authentication of an end-user or another application.  */
end_comment

begin_class
DECL|class|DelegationTokenKerberosFilter
specifier|public
class|class
name|DelegationTokenKerberosFilter
extends|extends
name|DelegationTokenAuthenticationFilter
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|curatorFramework
specifier|private
name|CuratorFramework
name|curatorFramework
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|conf
parameter_list|)
throws|throws
name|ServletException
block|{
if|if
condition|(
name|conf
operator|!=
literal|null
operator|&&
literal|"zookeeper"
operator|.
name|equals
argument_list|(
name|conf
operator|.
name|getInitParameter
argument_list|(
literal|"signer.secret.provider"
argument_list|)
argument_list|)
condition|)
block|{
name|SolrZkClient
name|zkClient
init|=
operator|(
name|SolrZkClient
operator|)
name|conf
operator|.
name|getServletContext
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|KerberosPlugin
operator|.
name|DELEGATION_TOKEN_ZK_CLIENT
argument_list|)
decl_stmt|;
name|conf
operator|.
name|getServletContext
argument_list|()
operator|.
name|setAttribute
argument_list|(
literal|"signer.secret.provider.zookeeper.curator.client"
argument_list|,
name|getCuratorClient
argument_list|(
name|zkClient
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return the ProxyUser Configuration.  FilterConfig properties beginning with    * "solr.impersonator.user.name" will be added to the configuration.    */
annotation|@
name|Override
DECL|method|getProxyuserConfiguration
specifier|protected
name|Configuration
name|getProxyuserConfiguration
parameter_list|(
name|FilterConfig
name|filterConf
parameter_list|)
throws|throws
name|ServletException
block|{
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Enumeration
argument_list|<
name|?
argument_list|>
name|names
init|=
name|filterConf
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|KerberosPlugin
operator|.
name|IMPERSONATOR_PREFIX
argument_list|)
condition|)
block|{
name|String
name|value
init|=
name|filterConf
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|PROXYUSER_PREFIX
operator|+
literal|"."
operator|+
name|name
operator|.
name|substring
argument_list|(
name|KerberosPlugin
operator|.
name|IMPERSONATOR_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conf
return|;
block|}
annotation|@
name|Override
DECL|method|doFilter
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|// HttpClient 4.4.x throws NPE if query string is null and parsed through URLEncodedUtils.
comment|// See HTTPCLIENT-1746 and HADOOP-12767
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|String
name|queryString
init|=
name|httpRequest
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|nonNullQueryString
init|=
name|queryString
operator|==
literal|null
condition|?
literal|""
else|:
name|queryString
decl_stmt|;
name|HttpServletRequest
name|requestNonNullQueryString
init|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|httpRequest
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|nonNullQueryString
return|;
block|}
block|}
decl_stmt|;
comment|// include Impersonator User Name in case someone (e.g. logger) wants it
name|FilterChain
name|filterChainWrapper
init|=
operator|new
name|FilterChain
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|servletRequest
decl_stmt|;
name|UserGroupInformation
name|ugi
init|=
name|HttpUserGroupInformation
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ugi
operator|!=
literal|null
operator|&&
name|ugi
operator|.
name|getAuthenticationMethod
argument_list|()
operator|==
name|UserGroupInformation
operator|.
name|AuthenticationMethod
operator|.
name|PROXY
condition|)
block|{
name|UserGroupInformation
name|realUserUgi
init|=
name|ugi
operator|.
name|getRealUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|realUserUgi
operator|!=
literal|null
condition|)
block|{
name|httpRequest
operator|.
name|setAttribute
argument_list|(
name|KerberosPlugin
operator|.
name|IMPERSONATOR_USER_NAME
argument_list|,
name|realUserUgi
operator|.
name|getShortUserName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|filterChain
operator|.
name|doFilter
argument_list|(
name|servletRequest
argument_list|,
name|servletResponse
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|super
operator|.
name|doFilter
argument_list|(
name|requestNonNullQueryString
argument_list|,
name|response
argument_list|,
name|filterChainWrapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|super
operator|.
name|destroy
argument_list|()
expr_stmt|;
if|if
condition|(
name|curatorFramework
operator|!=
literal|null
condition|)
name|curatorFramework
operator|.
name|close
argument_list|()
expr_stmt|;
name|curatorFramework
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initializeAuthHandler
specifier|protected
name|void
name|initializeAuthHandler
parameter_list|(
name|String
name|authHandlerClassName
parameter_list|,
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
comment|// set the internal authentication handler in order to record whether the request should continue
name|super
operator|.
name|initializeAuthHandler
argument_list|(
name|authHandlerClassName
argument_list|,
name|filterConfig
argument_list|)
expr_stmt|;
name|AuthenticationHandler
name|authHandler
init|=
name|getAuthenticationHandler
argument_list|()
decl_stmt|;
name|super
operator|.
name|initializeAuthHandler
argument_list|(
name|RequestContinuesRecorderAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|filterConfig
argument_list|)
expr_stmt|;
name|RequestContinuesRecorderAuthenticationHandler
name|newAuthHandler
init|=
operator|(
name|RequestContinuesRecorderAuthenticationHandler
operator|)
name|getAuthenticationHandler
argument_list|()
decl_stmt|;
name|newAuthHandler
operator|.
name|setAuthHandler
argument_list|(
name|authHandler
argument_list|)
expr_stmt|;
block|}
DECL|method|getCuratorClient
specifier|protected
name|CuratorFramework
name|getCuratorClient
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
comment|// should we try to build a RetryPolicy off of the ZkController?
name|RetryPolicy
name|retryPolicy
init|=
operator|new
name|ExponentialBackoffRetry
argument_list|(
literal|1000
argument_list|,
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkClient
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"zkClient required"
argument_list|)
throw|;
block|}
name|String
name|zkHost
init|=
name|zkClient
operator|.
name|getZkServerAddress
argument_list|()
decl_stmt|;
name|String
name|zkChroot
init|=
name|zkHost
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|?
name|zkHost
operator|.
name|substring
argument_list|(
name|zkHost
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|zkNamespace
init|=
name|zkChroot
operator|+
name|SecurityAwareZkACLProvider
operator|.
name|SECURITY_ZNODE_PATH
decl_stmt|;
name|zkNamespace
operator|=
name|zkNamespace
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|zkNamespace
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|zkNamespace
expr_stmt|;
name|String
name|zkConnectionString
init|=
name|zkHost
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|?
name|zkHost
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|zkHost
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
else|:
name|zkHost
decl_stmt|;
name|SolrZkToCuratorCredentialsACLs
name|curatorToSolrZk
init|=
operator|new
name|SolrZkToCuratorCredentialsACLs
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
specifier|final
name|int
name|connectionTimeoutMs
init|=
literal|30000
decl_stmt|;
comment|// this value is currently hard coded, see SOLR-7561.
name|curatorFramework
operator|=
name|CuratorFrameworkFactory
operator|.
name|builder
argument_list|()
operator|.
name|namespace
argument_list|(
name|zkNamespace
argument_list|)
operator|.
name|connectString
argument_list|(
name|zkConnectionString
argument_list|)
operator|.
name|retryPolicy
argument_list|(
name|retryPolicy
argument_list|)
operator|.
name|aclProvider
argument_list|(
name|curatorToSolrZk
operator|.
name|getACLProvider
argument_list|()
argument_list|)
operator|.
name|authorization
argument_list|(
name|curatorToSolrZk
operator|.
name|getAuthInfos
argument_list|()
argument_list|)
operator|.
name|sessionTimeoutMs
argument_list|(
name|zkClient
operator|.
name|getZkClientTimeout
argument_list|()
argument_list|)
operator|.
name|connectionTimeoutMs
argument_list|(
name|connectionTimeoutMs
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|curatorFramework
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|curatorFramework
return|;
block|}
comment|/**    * Convert Solr Zk Credentials/ACLs to Curator versions    */
DECL|class|SolrZkToCuratorCredentialsACLs
specifier|protected
specifier|static
class|class
name|SolrZkToCuratorCredentialsACLs
block|{
DECL|field|aclProvider
specifier|private
specifier|final
name|ACLProvider
name|aclProvider
decl_stmt|;
DECL|field|authInfos
specifier|private
specifier|final
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|authInfos
decl_stmt|;
DECL|method|SolrZkToCuratorCredentialsACLs
specifier|public
name|SolrZkToCuratorCredentialsACLs
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|this
operator|.
name|aclProvider
operator|=
name|createACLProvider
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
name|this
operator|.
name|authInfos
operator|=
name|createAuthInfo
argument_list|(
name|zkClient
argument_list|)
expr_stmt|;
block|}
DECL|method|getACLProvider
specifier|public
name|ACLProvider
name|getACLProvider
parameter_list|()
block|{
return|return
name|aclProvider
return|;
block|}
DECL|method|getAuthInfos
specifier|public
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|getAuthInfos
parameter_list|()
block|{
return|return
name|authInfos
return|;
block|}
DECL|method|createACLProvider
specifier|private
name|ACLProvider
name|createACLProvider
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
specifier|final
name|ZkACLProvider
name|zkACLProvider
init|=
name|zkClient
operator|.
name|getZkACLProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|ACLProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|getDefaultAcl
parameter_list|()
block|{
return|return
name|zkACLProvider
operator|.
name|getACLsToAdd
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ACL
argument_list|>
name|getAclForPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|List
argument_list|<
name|ACL
argument_list|>
name|acls
init|=
name|zkACLProvider
operator|.
name|getACLsToAdd
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|acls
return|;
block|}
block|}
return|;
block|}
DECL|method|createAuthInfo
specifier|private
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|createAuthInfo
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|)
block|{
name|List
argument_list|<
name|AuthInfo
argument_list|>
name|ret
init|=
operator|new
name|LinkedList
argument_list|<
name|AuthInfo
argument_list|>
argument_list|()
decl_stmt|;
comment|// In theory the credentials to add could change here if zookeeper hasn't been initialized
name|ZkCredentialsProvider
name|credentialsProvider
init|=
name|zkClient
operator|.
name|getZkClientConnectionStrategy
argument_list|()
operator|.
name|getZkCredentialsToAddAutomatically
argument_list|()
decl_stmt|;
for|for
control|(
name|ZkCredentialsProvider
operator|.
name|ZkCredentials
name|zkCredentials
range|:
name|credentialsProvider
operator|.
name|getCredentials
argument_list|()
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
operator|new
name|AuthInfo
argument_list|(
name|zkCredentials
operator|.
name|getScheme
argument_list|()
argument_list|,
name|zkCredentials
operator|.
name|getAuth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
block|}
block|}
end_class

end_unit

