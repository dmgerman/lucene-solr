begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|NotImplementedException
import|;
end_import

begin_comment
comment|/**  * Wrapper for PrintWriter that delegates to constructor arg  */
end_comment

begin_class
DECL|class|PrintWriterWrapper
specifier|public
class|class
name|PrintWriterWrapper
extends|extends
name|PrintWriter
block|{
DECL|field|printWriter
specifier|private
name|PrintWriter
name|printWriter
decl_stmt|;
DECL|method|PrintWriterWrapper
specifier|public
name|PrintWriterWrapper
parameter_list|(
name|PrintWriter
name|printWriter
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|printWriter
operator|=
name|printWriter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|PrintWriter
name|append
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|printWriter
operator|.
name|append
argument_list|(
name|c
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|PrintWriter
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|)
block|{
return|return
name|printWriter
operator|.
name|append
argument_list|(
name|csq
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|append
specifier|public
name|PrintWriter
name|append
parameter_list|(
name|CharSequence
name|csq
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
name|printWriter
operator|.
name|append
argument_list|(
name|csq
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkError
specifier|public
name|boolean
name|checkError
parameter_list|()
block|{
return|return
name|printWriter
operator|.
name|checkError
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|clearError
specifier|protected
name|void
name|clearError
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|printWriter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|()
block|{
name|printWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|format
specifier|public
name|PrintWriter
name|format
parameter_list|(
name|Locale
name|l
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|printWriter
operator|.
name|format
argument_list|(
name|l
argument_list|,
name|format
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|format
specifier|public
name|PrintWriter
name|format
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Forbidden API"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|char
name|c
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|char
index|[]
name|s
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|double
name|d
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|float
name|f
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|print
specifier|public
name|void
name|print
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|printWriter
operator|.
name|print
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|printf
specifier|public
name|PrintWriter
name|printf
parameter_list|(
name|Locale
name|l
parameter_list|,
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
return|return
name|printWriter
operator|.
name|printf
argument_list|(
name|l
argument_list|,
name|format
argument_list|,
name|args
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|printf
specifier|public
name|PrintWriter
name|printf
parameter_list|(
name|String
name|format
parameter_list|,
name|Object
modifier|...
name|args
parameter_list|)
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|(
literal|"Forbidden API"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|()
block|{
name|printWriter
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|boolean
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|char
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|char
index|[]
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|double
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|float
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|int
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|long
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|Object
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|println
specifier|public
name|void
name|println
parameter_list|(
name|String
name|x
parameter_list|)
block|{
name|printWriter
operator|.
name|println
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setError
specifier|protected
name|void
name|setError
parameter_list|()
block|{
throw|throw
operator|new
name|NotImplementedException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|buf
parameter_list|)
block|{
name|printWriter
operator|.
name|write
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|char
index|[]
name|buf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|printWriter
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|int
name|c
parameter_list|)
block|{
name|printWriter
operator|.
name|write
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|printWriter
operator|.
name|write
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|String
name|s
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|printWriter
operator|.
name|write
argument_list|(
name|s
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

