begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponseWrapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|iterators
operator|.
name|IteratorEnumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|Krb5HttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|SolrHttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SecurityAwareZkACLProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|KerberosPlugin
specifier|public
class|class
name|KerberosPlugin
extends|extends
name|AuthenticationPlugin
implements|implements
name|HttpClientBuilderPlugin
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|kerberosBuilder
name|Krb5HttpClientBuilder
name|kerberosBuilder
init|=
operator|new
name|Krb5HttpClientBuilder
argument_list|()
decl_stmt|;
DECL|field|kerberosFilter
specifier|private
name|Filter
name|kerberosFilter
decl_stmt|;
DECL|field|NAME_RULES_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|NAME_RULES_PARAM
init|=
literal|"solr.kerberos.name.rules"
decl_stmt|;
DECL|field|COOKIE_DOMAIN_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|COOKIE_DOMAIN_PARAM
init|=
literal|"solr.kerberos.cookie.domain"
decl_stmt|;
DECL|field|COOKIE_PATH_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|COOKIE_PATH_PARAM
init|=
literal|"solr.kerberos.cookie.path"
decl_stmt|;
DECL|field|PRINCIPAL_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|PRINCIPAL_PARAM
init|=
literal|"solr.kerberos.principal"
decl_stmt|;
DECL|field|KEYTAB_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|KEYTAB_PARAM
init|=
literal|"solr.kerberos.keytab"
decl_stmt|;
DECL|field|TOKEN_VALID_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|TOKEN_VALID_PARAM
init|=
literal|"solr.kerberos.token.valid"
decl_stmt|;
DECL|field|COOKIE_PORT_AWARE_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|COOKIE_PORT_AWARE_PARAM
init|=
literal|"solr.kerberos.cookie.portaware"
decl_stmt|;
DECL|field|IMPERSONATOR_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|IMPERSONATOR_PREFIX
init|=
literal|"solr.kerberos.impersonator.user."
decl_stmt|;
DECL|field|DELEGATION_TOKEN_ENABLED
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_ENABLED
init|=
literal|"solr.kerberos.delegation.token.enabled"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_KIND
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_KIND
init|=
literal|"solr.kerberos.delegation.token.kind"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_VALIDITY
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_VALIDITY
init|=
literal|"solr.kerberos.delegation.token.validity"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_SECRET_PROVIDER
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SECRET_PROVIDER
init|=
literal|"solr.kerberos.delegation.token.signer.secret.provider"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH
init|=
literal|"solr.kerberos.delegation.token.signer.secret.provider.zookeper.path"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH
init|=
literal|"solr.kerberos.delegation.token.secret.manager.znode.working.path"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_TYPE_DEFAULT
specifier|public
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_TYPE_DEFAULT
init|=
literal|"solr-dt"
decl_stmt|;
DECL|field|IMPERSONATOR_DO_AS_HTTP_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|IMPERSONATOR_DO_AS_HTTP_PARAM
init|=
literal|"doAs"
decl_stmt|;
DECL|field|IMPERSONATOR_USER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|IMPERSONATOR_USER_NAME
init|=
literal|"solr.impersonator.user.name"
decl_stmt|;
DECL|field|DELEGATION_TOKEN_ZK_CLIENT
specifier|static
specifier|final
name|String
name|DELEGATION_TOKEN_ZK_CLIENT
init|=
literal|"solr.kerberos.delegation.token.zk.client"
decl_stmt|;
DECL|field|coreContainer
specifier|private
specifier|final
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|method|KerberosPlugin
specifier|public
name|KerberosPlugin
parameter_list|(
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pluginConfig
parameter_list|)
block|{
try|try
block|{
name|FilterConfig
name|conf
init|=
name|getInitFilterConfig
argument_list|(
name|pluginConfig
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|kerberosFilter
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error initializing kerberos authentication plugin: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|VisibleForTesting
DECL|method|getInitFilterConfig
specifier|protected
name|FilterConfig
name|getInitFilterConfig
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pluginConfig
parameter_list|,
name|boolean
name|skipKerberosChecking
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
literal|"kerberos"
argument_list|)
expr_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"kerberos.name.rules"
argument_list|,
name|NAME_RULES_PARAM
argument_list|,
literal|"DEFAULT"
argument_list|)
expr_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"token.valid"
argument_list|,
name|TOKEN_VALID_PARAM
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"cookie.path"
argument_list|,
name|COOKIE_PATH_PARAM
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipKerberosChecking
condition|)
block|{
name|putParam
argument_list|(
name|params
argument_list|,
literal|"kerberos.principal"
argument_list|,
name|PRINCIPAL_PARAM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"kerberos.keytab"
argument_list|,
name|KEYTAB_PARAM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|putParamOptional
argument_list|(
name|params
argument_list|,
literal|"kerberos.principal"
argument_list|,
name|PRINCIPAL_PARAM
argument_list|)
expr_stmt|;
name|putParamOptional
argument_list|(
name|params
argument_list|,
literal|"kerberos.keytab"
argument_list|,
name|KEYTAB_PARAM
argument_list|)
expr_stmt|;
block|}
name|String
name|delegationTokenStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|DELEGATION_TOKEN_ENABLED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|delegationTokenEnabled
init|=
operator|(
name|delegationTokenStr
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|delegationTokenStr
argument_list|)
decl_stmt|;
name|ZkController
name|controller
init|=
name|coreContainer
operator|.
name|getZkController
argument_list|()
decl_stmt|;
if|if
condition|(
name|delegationTokenEnabled
condition|)
block|{
name|putParam
argument_list|(
name|params
argument_list|,
literal|"delegation-token.token-kind"
argument_list|,
name|DELEGATION_TOKEN_KIND
argument_list|,
name|DELEGATION_TOKEN_TYPE_DEFAULT
argument_list|)
expr_stmt|;
if|if
condition|(
name|coreContainer
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|putParam
argument_list|(
name|params
argument_list|,
literal|"signer.secret.provider"
argument_list|,
name|DELEGATION_TOKEN_SECRET_PROVIDER
argument_list|,
literal|"zookeeper"
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"zookeeper"
operator|.
name|equals
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"signer.secret.provider"
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|zkHost
init|=
name|controller
operator|.
name|getZkServerAddress
argument_list|()
decl_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"token.validity"
argument_list|,
name|DELEGATION_TOKEN_VALIDITY
argument_list|,
literal|"36000"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"zk-dt-secret-manager.enable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|chrootPath
init|=
name|zkHost
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|?
name|zkHost
operator|.
name|substring
argument_list|(
name|zkHost
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
else|:
literal|""
decl_stmt|;
name|String
name|znodeWorkingPath
init|=
name|chrootPath
operator|+
name|SecurityAwareZkACLProvider
operator|.
name|SECURITY_ZNODE_PATH
operator|+
literal|"/zkdtsm"
decl_stmt|;
comment|// Note - Curator complains if the znodeWorkingPath starts with /
name|znodeWorkingPath
operator|=
name|znodeWorkingPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|znodeWorkingPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|znodeWorkingPath
expr_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"zk-dt-secret-manager.znodeWorkingPath"
argument_list|,
name|DELEGATION_TOKEN_SECRET_MANAGER_ZNODE_WORKING_PATH
argument_list|,
name|znodeWorkingPath
argument_list|)
expr_stmt|;
name|putParam
argument_list|(
name|params
argument_list|,
literal|"signer.secret.provider.zookeeper.path"
argument_list|,
name|DELEGATION_TOKEN_SECRET_PROVIDER_ZK_PATH
argument_list|,
literal|"/token"
argument_list|)
expr_stmt|;
comment|// ensure krb5 is setup properly before running curator
name|getHttpClientBuilder
argument_list|(
name|SolrHttpClientBuilder
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"CoreContainer is not ZooKeeperAware, not setting ZK-related delegation token properties"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Special handling for the "cookie.domain" based on whether port should be
comment|// appended to the domain. Useful for situations where multiple solr nodes are
comment|// on the same host.
name|String
name|usePortStr
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|COOKIE_PORT_AWARE_PARAM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|needPortAwareCookies
init|=
operator|(
name|usePortStr
operator|==
literal|null
operator|)
condition|?
literal|false
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|usePortStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|needPortAwareCookies
operator|||
operator|!
name|coreContainer
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
name|putParam
argument_list|(
name|params
argument_list|,
literal|"cookie.domain"
argument_list|,
name|COOKIE_DOMAIN_PARAM
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we need port aware cookies and we are in SolrCloud mode.
name|String
name|host
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|COOKIE_DOMAIN_PARAM
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Missing required parameter '"
operator|+
name|COOKIE_DOMAIN_PARAM
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|int
name|port
init|=
name|controller
operator|.
name|getHostPort
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"cookie.domain"
argument_list|,
name|host
operator|+
literal|":"
operator|+
name|port
argument_list|)
expr_stmt|;
block|}
comment|// check impersonator config
for|for
control|(
name|Enumeration
name|e
init|=
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|nextElement
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|IMPERSONATOR_PREFIX
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|delegationTokenEnabled
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Impersonator configuration requires delegation tokens to be enabled: "
operator|+
name|key
argument_list|)
throw|;
block|}
name|params
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|ServletContext
name|servletContext
init|=
operator|new
name|AttributeOnlyServletContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|controller
operator|!=
literal|null
condition|)
block|{
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|DELEGATION_TOKEN_ZK_CLIENT
argument_list|,
name|controller
operator|.
name|getZkClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|delegationTokenEnabled
condition|)
block|{
name|kerberosFilter
operator|=
operator|new
name|DelegationTokenKerberosFilter
argument_list|()
expr_stmt|;
comment|// pass an attribute-enabled context in order to pass the zkClient
comment|// and because the filter may pass a curator instance.
block|}
else|else
block|{
name|kerberosFilter
operator|=
operator|new
name|KerberosFilter
argument_list|()
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Params: "
operator|+
name|params
argument_list|)
expr_stmt|;
name|FilterConfig
name|conf
init|=
operator|new
name|FilterConfig
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|servletContext
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getInitParameterNames
parameter_list|()
block|{
return|return
operator|new
name|IteratorEnumeration
argument_list|(
name|params
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|param
parameter_list|)
block|{
return|return
name|params
operator|.
name|get
argument_list|(
name|param
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilterName
parameter_list|()
block|{
return|return
literal|"KerberosFilter"
return|;
block|}
block|}
decl_stmt|;
return|return
name|conf
return|;
block|}
DECL|method|putParam
specifier|private
name|void
name|putParam
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|internalParamName
parameter_list|,
name|String
name|externalParamName
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|externalParamName
argument_list|,
name|defaultValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Missing required parameter '"
operator|+
name|externalParamName
operator|+
literal|"'."
argument_list|)
throw|;
block|}
name|params
operator|.
name|put
argument_list|(
name|internalParamName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|putParamOptional
specifier|private
name|void
name|putParamOptional
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|internalParamName
parameter_list|,
name|String
name|externalParamName
parameter_list|)
block|{
name|String
name|value
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|externalParamName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|internalParamName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doAuthenticate
specifier|public
name|boolean
name|doAuthenticate
parameter_list|(
name|ServletRequest
name|req
parameter_list|,
name|ServletResponse
name|rsp
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Request to authenticate using kerberos: "
operator|+
name|req
argument_list|)
expr_stmt|;
specifier|final
name|HttpServletResponse
name|frsp
init|=
operator|(
name|HttpServletResponse
operator|)
name|rsp
decl_stmt|;
comment|// kerberosFilter may close the stream and write to closed streams,
comment|// see HADOOP-13346.  To work around, pass a PrintWriter that ignores
comment|// closes
name|HttpServletResponse
name|rspCloseShield
init|=
operator|new
name|HttpServletResponseWrapper
argument_list|(
name|frsp
argument_list|)
block|{
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Hadoop DelegationTokenAuthenticationFilter uses response writer, this"
operator|+
literal|"is providing a CloseShield on top of that"
argument_list|)
annotation|@
name|Override
specifier|public
name|PrintWriter
name|getWriter
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriterWrapper
argument_list|(
name|frsp
operator|.
name|getWriter
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{}
empty_stmt|;
block|}
decl_stmt|;
return|return
name|pw
return|;
block|}
block|}
decl_stmt|;
name|kerberosFilter
operator|.
name|doFilter
argument_list|(
name|req
argument_list|,
name|rspCloseShield
argument_list|,
name|chain
argument_list|)
expr_stmt|;
name|String
name|requestContinuesAttr
init|=
operator|(
name|String
operator|)
name|req
operator|.
name|getAttribute
argument_list|(
name|RequestContinuesRecorderAuthenticationHandler
operator|.
name|REQUEST_CONTINUES_ATTR
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestContinuesAttr
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not find "
operator|+
name|RequestContinuesRecorderAuthenticationHandler
operator|.
name|REQUEST_CONTINUES_ATTR
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|requestContinuesAttr
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getHttpClientBuilder
specifier|public
name|SolrHttpClientBuilder
name|getHttpClientBuilder
parameter_list|(
name|SolrHttpClientBuilder
name|builder
parameter_list|)
block|{
return|return
name|kerberosBuilder
operator|.
name|getBuilder
argument_list|(
name|builder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|kerberosFilter
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|kerberosBuilder
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getKerberosFilter
specifier|protected
name|Filter
name|getKerberosFilter
parameter_list|()
block|{
return|return
name|kerberosFilter
return|;
block|}
DECL|method|setKerberosFilter
specifier|protected
name|void
name|setKerberosFilter
parameter_list|(
name|Filter
name|kerberosFilter
parameter_list|)
block|{
name|this
operator|.
name|kerberosFilter
operator|=
name|kerberosFilter
expr_stmt|;
block|}
block|}
end_class

end_unit

