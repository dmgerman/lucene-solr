begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpClientBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|SolrHttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_comment
comment|/**  * This class extends {@linkplain HadoopAuthPlugin} by enabling configuration of  * authentication mechanism for Solr internal communication.  **/
end_comment

begin_class
DECL|class|ConfigurableInternodeAuthHadoopPlugin
specifier|public
class|class
name|ConfigurableInternodeAuthHadoopPlugin
extends|extends
name|HadoopAuthPlugin
implements|implements
name|HttpClientBuilderPlugin
block|{
comment|/**    * A property specifying the {@linkplain HttpClientBuilderFactory} used for the Solr internal    * communication.    */
DECL|field|HTTPCLIENT_BUILDER_FACTORY
specifier|private
specifier|static
specifier|final
name|String
name|HTTPCLIENT_BUILDER_FACTORY
init|=
literal|"clientBuilderFactory"
decl_stmt|;
DECL|field|factory
specifier|private
name|HttpClientBuilderFactory
name|factory
init|=
literal|null
decl_stmt|;
DECL|method|ConfigurableInternodeAuthHadoopPlugin
specifier|public
name|ConfigurableInternodeAuthHadoopPlugin
parameter_list|(
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|super
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pluginConfig
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|pluginConfig
argument_list|)
expr_stmt|;
name|String
name|httpClientBuilderFactory
init|=
operator|(
name|String
operator|)
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|pluginConfig
operator|.
name|get
argument_list|(
name|HTTPCLIENT_BUILDER_FACTORY
argument_list|)
argument_list|,
literal|"Please specify clientBuilderFactory to be used for Solr internal communication."
argument_list|)
decl_stmt|;
name|factory
operator|=
name|this
operator|.
name|coreContainer
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|newInstance
argument_list|(
name|httpClientBuilderFactory
argument_list|,
name|HttpClientBuilderFactory
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHttpClientBuilder
specifier|public
name|SolrHttpClientBuilder
name|getHttpClientBuilder
parameter_list|(
name|SolrHttpClientBuilder
name|builder
parameter_list|)
block|{
return|return
name|factory
operator|.
name|getHttpClientBuilder
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|builder
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
block|{
name|factory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

