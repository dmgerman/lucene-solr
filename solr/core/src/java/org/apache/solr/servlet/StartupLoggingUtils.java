begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Appender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|ConsoleAppender
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|impl
operator|.
name|StaticLoggerBinder
import|;
end_import

begin_comment
comment|/**  * Handles dynamic modification of during startup, before CoreContainer is created  *<p>  *   WARNING: This class should only be used during startup. For modifying log levels etc  *   during runtime, SLF4J and LogWatcher must be used.  *</p>  */
end_comment

begin_class
DECL|class|StartupLoggingUtils
specifier|final
class|class
name|StartupLoggingUtils
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|binder
specifier|private
specifier|final
specifier|static
name|StaticLoggerBinder
name|binder
init|=
name|StaticLoggerBinder
operator|.
name|getSingleton
argument_list|()
decl_stmt|;
comment|/**    * Disables all log4j ConsoleAppender's by modifying log4j configuration dynamically.    * Must only be used during early startup    * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath    */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Legitimate log4j access"
argument_list|)
DECL|method|muteConsole
specifier|static
name|boolean
name|muteConsole
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isLog4jActive
argument_list|()
condition|)
block|{
name|logNotSupported
argument_list|(
literal|"Could not mute logging to console."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
name|rootLogger
init|=
name|LogManager
operator|.
name|getRootLogger
argument_list|()
decl_stmt|;
name|Enumeration
name|appenders
init|=
name|rootLogger
operator|.
name|getAllAppenders
argument_list|()
decl_stmt|;
while|while
condition|(
name|appenders
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|Appender
name|appender
init|=
operator|(
name|Appender
operator|)
name|appenders
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|appender
operator|instanceof
name|ConsoleAppender
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Property solr.log.muteconsole given. Muting ConsoleAppender named "
operator|+
name|appender
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|rootLogger
operator|.
name|removeAppender
argument_list|(
name|appender
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logNotSupported
argument_list|(
literal|"Could not mute logging to console."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Dynamically change log4j log level through property solr.log.level    * @param logLevel String with level, should be one of the supported, e.g. TRACE, DEBUG, INFO, WARN, ERROR...    * @return true if ok or else false if something happened, e.g. log4j classes were not in classpath    */
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Legitimate log4j access"
argument_list|)
DECL|method|changeLogLevel
specifier|static
name|boolean
name|changeLogLevel
parameter_list|(
name|String
name|logLevel
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|isLog4jActive
argument_list|()
condition|)
block|{
name|logNotSupported
argument_list|(
literal|"Could not mute logging to console."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Log level override, property solr.log.level="
operator|+
name|logLevel
argument_list|)
expr_stmt|;
name|LogManager
operator|.
name|getRootLogger
argument_list|()
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|toLevel
argument_list|(
name|logLevel
argument_list|,
name|Level
operator|.
name|INFO
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logNotSupported
argument_list|(
literal|"Could not change log level."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|isLog4jActive
specifier|private
specifier|static
name|boolean
name|isLog4jActive
parameter_list|()
block|{
try|try
block|{
comment|// Make sure we have log4j LogManager in classpath
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.log4j.LogManager"
argument_list|)
expr_stmt|;
comment|// Make sure that log4j is really selected as logger in slf4j - we could have LogManager in the bridge class :)
return|return
name|binder
operator|.
name|getLoggerFactoryClassStr
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Log4jLoggerFactory"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|method|logNotSupported
specifier|private
specifier|static
name|void
name|logNotSupported
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"{} Dynamic log manipulation currently only supported for Log4j. "
operator|+
literal|"Please consult your logging framework of choice on how to configure the appropriate logging."
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

