begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoBean
import|;
end_import

begin_comment
comment|/**  * Wraps meta-data for a metric.  */
end_comment

begin_class
DECL|class|SolrMetricInfo
specifier|public
specifier|final
class|class
name|SolrMetricInfo
block|{
DECL|field|name
specifier|public
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|scope
specifier|public
specifier|final
name|String
name|scope
decl_stmt|;
DECL|field|category
specifier|public
specifier|final
name|SolrInfoBean
operator|.
name|Category
name|category
decl_stmt|;
comment|/**    * Creates a new instance of {@link SolrMetricInfo}.    *    * @param category the category of the metric (e.g. `QUERY`)    * @param scope    the scope of the metric (e.g. `/admin/ping`)    * @param name     the name of the metric (e.g. `Requests`)    */
DECL|method|SolrMetricInfo
specifier|public
name|SolrMetricInfo
parameter_list|(
name|SolrInfoBean
operator|.
name|Category
name|category
parameter_list|,
name|String
name|scope
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|category
operator|=
name|category
expr_stmt|;
block|}
DECL|method|of
specifier|public
specifier|static
name|SolrMetricInfo
name|of
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
if|if
condition|(
name|fullName
operator|==
literal|null
operator|||
name|fullName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
index|[]
name|names
init|=
name|fullName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|<
literal|2
condition|)
block|{
comment|// not a valid info
return|return
literal|null
return|;
block|}
comment|// check top-level name for valid category
name|SolrInfoBean
operator|.
name|Category
name|category
decl_stmt|;
try|try
block|{
name|category
operator|=
name|SolrInfoBean
operator|.
name|Category
operator|.
name|valueOf
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// not a valid category
return|return
literal|null
return|;
block|}
name|String
name|scope
decl_stmt|;
name|String
name|name
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|scope
operator|=
literal|null
expr_stmt|;
name|name
operator|=
name|fullName
operator|.
name|substring
argument_list|(
name|names
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|scope
operator|=
name|names
index|[
literal|1
index|]
expr_stmt|;
name|name
operator|=
name|fullName
operator|.
name|substring
argument_list|(
name|names
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
operator|+
name|names
index|[
literal|1
index|]
operator|.
name|length
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|SolrMetricInfo
argument_list|(
name|category
argument_list|,
name|scope
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Returns the metric name defined by this object.    * For example, if the name is `Requests`, scope is `/admin/ping`,    * and category is `QUERY`, then the metric name is    * `QUERY./admin/ping.Requests`.    *    * @return the metric name defined by this object    */
DECL|method|getMetricName
specifier|public
name|String
name|getMetricName
parameter_list|()
block|{
return|return
name|MetricRegistry
operator|.
name|name
argument_list|(
name|category
operator|.
name|toString
argument_list|()
argument_list|,
name|scope
argument_list|,
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"SolrMetricInfo{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", scope='"
operator|+
name|scope
operator|+
literal|'\''
operator|+
literal|", category="
operator|+
name|category
operator|+
literal|'}'
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|SolrMetricInfo
name|that
init|=
operator|(
name|SolrMetricInfo
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|?
operator|!
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
else|:
name|that
operator|.
name|name
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|scope
operator|!=
literal|null
condition|?
operator|!
name|scope
operator|.
name|equals
argument_list|(
name|that
operator|.
name|scope
argument_list|)
else|:
name|that
operator|.
name|scope
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|category
operator|==
name|that
operator|.
name|category
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|name
operator|!=
literal|null
condition|?
name|name
operator|.
name|hashCode
argument_list|()
else|:
literal|0
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|scope
operator|!=
literal|null
condition|?
name|scope
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|category
operator|!=
literal|null
condition|?
name|category
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

