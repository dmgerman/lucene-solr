begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics.reporters
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|JmxReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|JmxUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A {@link SolrMetricReporter} that finds (or creates) a MBeanServer from  * the given configuration and registers metrics to it with JMX.  */
end_comment

begin_class
DECL|class|SolrJmxReporter
specifier|public
class|class
name|SolrJmxReporter
extends|extends
name|SolrMetricReporter
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|domain
specifier|private
name|String
name|domain
decl_stmt|;
DECL|field|agentId
specifier|private
name|String
name|agentId
decl_stmt|;
DECL|field|serviceUrl
specifier|private
name|String
name|serviceUrl
decl_stmt|;
DECL|field|reporter
specifier|private
name|JmxReporter
name|reporter
decl_stmt|;
DECL|field|mBeanServer
specifier|private
name|MBeanServer
name|mBeanServer
decl_stmt|;
comment|/**    * Creates a new instance of {@link SolrJmxReporter}.    *    * @param registryName name of the registry to report    */
DECL|method|SolrJmxReporter
specifier|public
name|SolrJmxReporter
parameter_list|(
name|SolrMetricManager
name|metricManager
parameter_list|,
name|String
name|registryName
parameter_list|)
block|{
name|super
argument_list|(
name|metricManager
argument_list|,
name|registryName
argument_list|)
expr_stmt|;
name|setDomain
argument_list|(
name|registryName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initializes the reporter by finding (or creating) a MBeanServer    * and registering the metricManager's metric registry.    *    * @param pluginInfo the configuration for the reporter    */
annotation|@
name|Override
DECL|method|init
specifier|public
specifier|synchronized
name|void
name|init
parameter_list|(
name|PluginInfo
name|pluginInfo
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|pluginInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|serviceUrl
operator|!=
literal|null
operator|&&
name|agentId
operator|!=
literal|null
condition|)
block|{
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
expr_stmt|;
comment|// Ensure at least one MBeanServer is available.
name|mBeanServer
operator|=
name|JmxUtil
operator|.
name|findFirstMBeanServer
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No more than one of serviceUrl(%s) and agentId(%s) should be configured, using first MBeanServer instead of configuration."
argument_list|,
name|serviceUrl
argument_list|,
name|agentId
argument_list|,
name|mBeanServer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|serviceUrl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|mBeanServer
operator|=
name|JmxUtil
operator|.
name|findMBeanServerForServiceUrl
argument_list|(
name|serviceUrl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"findMBeanServerForServiceUrl(%s) exception: %s"
argument_list|,
name|serviceUrl
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|mBeanServer
operator|=
literal|null
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|agentId
operator|!=
literal|null
condition|)
block|{
name|mBeanServer
operator|=
name|JmxUtil
operator|.
name|findMBeanServerForAgentId
argument_list|(
name|agentId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
expr_stmt|;
comment|// Ensure at least one MBeanServer is available.
name|mBeanServer
operator|=
name|JmxUtil
operator|.
name|findFirstMBeanServer
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"No serviceUrl or agentId was configured, using first MBeanServer."
argument_list|,
name|mBeanServer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mBeanServer
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No JMX server found. Not exposing Solr metrics."
argument_list|)
expr_stmt|;
return|return;
block|}
name|JmxObjectNameFactory
name|jmxObjectNameFactory
init|=
operator|new
name|JmxObjectNameFactory
argument_list|(
name|pluginInfo
operator|.
name|name
argument_list|,
name|domain
argument_list|)
decl_stmt|;
name|reporter
operator|=
name|JmxReporter
operator|.
name|forRegistry
argument_list|(
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
argument_list|)
operator|.
name|registerWith
argument_list|(
name|mBeanServer
argument_list|)
operator|.
name|inDomain
argument_list|(
name|domain
argument_list|)
operator|.
name|createsObjectNamesWith
argument_list|(
name|jmxObjectNameFactory
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|reporter
operator|.
name|start
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"JMX monitoring enabled at server: "
operator|+
name|mBeanServer
argument_list|)
expr_stmt|;
block|}
comment|/**    * Stops the reporter from publishing metrics.    */
annotation|@
name|Override
DECL|method|close
specifier|public
specifier|synchronized
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|close
argument_list|()
expr_stmt|;
name|reporter
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    * Validates that the reporter has been correctly configured.    * Note that all configurable arguments are currently optional.    *    * @throws IllegalStateException if the reporter is not properly configured    */
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|IllegalStateException
block|{
comment|// Nothing to validate
block|}
comment|/**    * Sets the domain with which MBeans are published. If none is set,    * the domain defaults to the name of the core.    *    * @param domain the domain    */
DECL|method|setDomain
specifier|public
name|void
name|setDomain
parameter_list|(
name|String
name|domain
parameter_list|)
block|{
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|domain
operator|=
name|domain
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|domain
operator|=
name|registryName
expr_stmt|;
block|}
block|}
comment|/**    * Sets the service url for a JMX server.    * Note that this configuration is optional.    *    * @param serviceUrl the service url    */
DECL|method|setServiceUrl
specifier|public
name|void
name|setServiceUrl
parameter_list|(
name|String
name|serviceUrl
parameter_list|)
block|{
name|this
operator|.
name|serviceUrl
operator|=
name|serviceUrl
expr_stmt|;
block|}
comment|/**    * Sets the agent id for a JMX server.    * Note that this configuration is optional.    *    * @param agentId the agent id    */
DECL|method|setAgentId
specifier|public
name|void
name|setAgentId
parameter_list|(
name|String
name|agentId
parameter_list|)
block|{
name|this
operator|.
name|agentId
operator|=
name|agentId
expr_stmt|;
block|}
comment|/**    * Retrieves the reporter's MBeanServer.    *    * @return the reporter's MBeanServer    */
DECL|method|getMBeanServer
specifier|public
name|MBeanServer
name|getMBeanServer
parameter_list|()
block|{
return|return
name|mBeanServer
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"[%s@%s: domain = %s, service url = %s, agent id = %s]"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|domain
argument_list|,
name|serviceUrl
argument_list|,
name|agentId
argument_list|)
return|;
block|}
block|}
end_class

end_unit

