begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics.reporters
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Simple cache for reusable service clients used by some implementations of  * {@link org.apache.solr.metrics.SolrMetricReporter}.  */
end_comment

begin_class
DECL|class|ReporterClientCache
specifier|public
class|class
name|ReporterClientCache
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Closeable
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cache
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|T
argument_list|>
name|cache
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Provide an instance of service client.    * @param<T> formal type    */
DECL|interface|ClientProvider
specifier|public
interface|interface
name|ClientProvider
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * Get an instance of a service client. It's not specified that each time this      * method is invoked a new client instance should be returned.      * @return client instance      * @throws Exception when client creation encountered an error.      */
DECL|method|get
name|T
name|get
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
comment|/**    * Get existing or register a new client.    * @param id client id    * @param clientProvider provider of new client instances    */
DECL|method|getOrCreate
specifier|public
specifier|synchronized
name|T
name|getOrCreate
parameter_list|(
name|String
name|id
parameter_list|,
name|ClientProvider
argument_list|<
name|T
argument_list|>
name|clientProvider
parameter_list|)
block|{
name|T
name|item
init|=
name|cache
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|item
operator|=
name|clientProvider
operator|.
name|get
argument_list|()
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error providing a new client for id="
operator|+
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|item
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|item
return|;
block|}
comment|/**    * Empty this cache, and close all clients that are {@link Closeable}.    */
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
for|for
control|(
name|T
name|client
range|:
name|cache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|client
operator|instanceof
name|Closeable
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|Closeable
operator|)
name|client
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error closing client "
operator|+
name|client
operator|+
literal|", ignoring..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|cache
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

