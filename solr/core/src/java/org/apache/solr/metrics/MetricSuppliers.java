begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|ExponentiallyDecayingReservoir
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Reservoir
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|SlidingTimeWindowReservoir
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|SlidingWindowReservoir
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|UniformReservoir
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Helper class for constructing instances of {@link com.codahale.metrics.MetricRegistry.MetricSupplier}  * based on plugin configuration. This allows us to customize eg. {@link com.codahale.metrics.Reservoir}  * implementations and parameters for timers and histograms.  *<p>Custom supplier implementations must provide a zero-args constructor, and may optionally implement  * {@link org.apache.solr.util.plugin.PluginInfoInitialized} interface for configuration - if they don't then  * {@link org.apache.solr.util.SolrPluginUtils#invokeSetters(Object, Iterable, boolean)} will be used for initialization.</p>  */
end_comment

begin_class
DECL|class|MetricSuppliers
specifier|public
class|class
name|MetricSuppliers
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Default {@link Counter} supplier. No configuration available.    */
DECL|class|DefaultCounterSupplier
specifier|public
specifier|static
specifier|final
class|class
name|DefaultCounterSupplier
implements|implements
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Counter
argument_list|>
block|{
annotation|@
name|Override
DECL|method|newMetric
specifier|public
name|Counter
name|newMetric
parameter_list|()
block|{
return|return
operator|new
name|Counter
argument_list|()
return|;
block|}
block|}
DECL|field|CPU_CLOCK
specifier|private
specifier|static
specifier|final
name|Clock
name|CPU_CLOCK
init|=
operator|new
name|Clock
operator|.
name|CpuTimeClock
argument_list|()
decl_stmt|;
DECL|field|USER_CLOCK
specifier|private
specifier|static
specifier|final
name|Clock
name|USER_CLOCK
init|=
operator|new
name|Clock
operator|.
name|UserTimeClock
argument_list|()
decl_stmt|;
comment|/** Clock type parameter. */
DECL|field|CLOCK
specifier|public
specifier|static
specifier|final
name|String
name|CLOCK
init|=
literal|"clock"
decl_stmt|;
comment|/** User-time clock. */
DECL|field|CLOCK_USER
specifier|public
specifier|static
specifier|final
name|String
name|CLOCK_USER
init|=
literal|"user"
decl_stmt|;
comment|/** CPU-time clock. */
DECL|field|CLOCK_CPU
specifier|public
specifier|static
specifier|final
name|String
name|CLOCK_CPU
init|=
literal|"cpu"
decl_stmt|;
comment|/**    * Default {@link Meter} supplier. The following configuration is available, either as attribute    * or initArgs:    *<ul>    *<li>clock - (string) can be set to {@link #CLOCK_USER} for {@link com.codahale.metrics.Clock.UserTimeClock} or    *   {@link #CLOCK_CPU} for {@link com.codahale.metrics.Clock.CpuTimeClock}. If not set then the value of    *   {@link Clock#defaultClock()} will be used.</li>    *</ul>    */
DECL|class|DefaultMeterSupplier
specifier|public
specifier|static
specifier|final
class|class
name|DefaultMeterSupplier
implements|implements
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Meter
argument_list|>
implements|,
name|PluginInfoInitialized
block|{
DECL|field|clk
specifier|public
name|Clock
name|clk
init|=
name|Clock
operator|.
name|defaultClock
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|clk
operator|=
name|getClock
argument_list|(
name|info
argument_list|,
name|CLOCK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newMetric
specifier|public
name|Meter
name|newMetric
parameter_list|()
block|{
return|return
operator|new
name|Meter
argument_list|(
name|clk
argument_list|)
return|;
block|}
block|}
DECL|method|getClock
specifier|private
specifier|static
name|Clock
name|getClock
parameter_list|(
name|PluginInfo
name|info
parameter_list|,
name|String
name|param
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
name|Clock
operator|.
name|defaultClock
argument_list|()
return|;
block|}
name|String
name|clock
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|attributes
operator|!=
literal|null
condition|)
block|{
name|clock
operator|=
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clock
operator|==
literal|null
operator|&&
name|info
operator|.
name|initArgs
operator|!=
literal|null
condition|)
block|{
name|clock
operator|=
operator|(
name|String
operator|)
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|param
argument_list|)
expr_stmt|;
block|}
name|Clock
name|clk
init|=
name|Clock
operator|.
name|defaultClock
argument_list|()
decl_stmt|;
if|if
condition|(
name|clock
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|clock
operator|.
name|equalsIgnoreCase
argument_list|(
name|CLOCK_USER
argument_list|)
condition|)
block|{
name|clk
operator|=
name|USER_CLOCK
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|clock
operator|.
name|equalsIgnoreCase
argument_list|(
name|CLOCK_CPU
argument_list|)
condition|)
block|{
name|clk
operator|=
name|CPU_CLOCK
expr_stmt|;
block|}
block|}
return|return
name|clk
return|;
block|}
comment|/** Implementation class, must implement {@link Reservoir}. Supports non-standard configuration    * of the implementations available in metrics-core.    */
DECL|field|RESERVOIR
specifier|public
specifier|static
specifier|final
name|String
name|RESERVOIR
init|=
literal|"reservoir"
decl_stmt|;
comment|/** Size of reservoir. */
DECL|field|RESERVOIR_SIZE
specifier|public
specifier|static
specifier|final
name|String
name|RESERVOIR_SIZE
init|=
literal|"size"
decl_stmt|;
comment|/** Alpha parameter of {@link ExponentiallyDecayingReservoir}. */
DECL|field|RESERVOIR_EDR_ALPHA
specifier|public
specifier|static
specifier|final
name|String
name|RESERVOIR_EDR_ALPHA
init|=
literal|"alpha"
decl_stmt|;
comment|/** Time window in seconds of {@link SlidingTimeWindowReservoir}. */
DECL|field|RESERVOIR_WINDOW
specifier|public
specifier|static
specifier|final
name|String
name|RESERVOIR_WINDOW
init|=
literal|"window"
decl_stmt|;
DECL|field|EDR_CLAZZ
specifier|private
specifier|static
specifier|final
name|String
name|EDR_CLAZZ
init|=
name|ExponentiallyDecayingReservoir
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|UNI_CLAZZ
specifier|private
specifier|static
specifier|final
name|String
name|UNI_CLAZZ
init|=
name|UniformReservoir
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|STW_CLAZZ
specifier|private
specifier|static
specifier|final
name|String
name|STW_CLAZZ
init|=
name|SlidingTimeWindowReservoir
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|SW_CLAZZ
specifier|private
specifier|static
specifier|final
name|String
name|SW_CLAZZ
init|=
name|SlidingWindowReservoir
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|DEFAULT_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_SIZE
init|=
literal|1028
decl_stmt|;
DECL|field|DEFAULT_ALPHA
specifier|private
specifier|static
specifier|final
name|double
name|DEFAULT_ALPHA
init|=
literal|0.015
decl_stmt|;
DECL|field|DEFAULT_WINDOW
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_WINDOW
init|=
literal|300
decl_stmt|;
DECL|method|getReservoir
specifier|private
specifier|static
specifier|final
name|Reservoir
name|getReservoir
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|ExponentiallyDecayingReservoir
argument_list|()
return|;
block|}
name|Clock
name|clk
init|=
name|getClock
argument_list|(
name|info
argument_list|,
name|CLOCK
argument_list|)
decl_stmt|;
name|String
name|clazz
init|=
name|ExponentiallyDecayingReservoir
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
name|double
name|alpha
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|window
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|initArgs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|RESERVOIR
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|val
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|RESERVOIR
argument_list|)
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clazz
operator|=
name|val
expr_stmt|;
block|}
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|RESERVOIR_SIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|size
operator|=
name|n
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|n
operator|=
operator|(
name|Number
operator|)
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|RESERVOIR_EDR_ALPHA
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|alpha
operator|=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
name|n
operator|=
operator|(
name|Number
operator|)
name|info
operator|.
name|initArgs
operator|.
name|get
argument_list|(
name|RESERVOIR_WINDOW
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
name|window
operator|=
name|n
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
block|{
name|size
operator|=
name|DEFAULT_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|alpha
operator|<=
literal|0
condition|)
block|{
name|alpha
operator|=
name|DEFAULT_ALPHA
expr_stmt|;
block|}
comment|// special case for core implementations
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|EDR_CLAZZ
argument_list|)
condition|)
block|{
return|return
operator|new
name|ExponentiallyDecayingReservoir
argument_list|(
name|size
argument_list|,
name|alpha
argument_list|,
name|clk
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|UNI_CLAZZ
argument_list|)
condition|)
block|{
return|return
operator|new
name|UniformReservoir
argument_list|(
name|size
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|STW_CLAZZ
argument_list|)
condition|)
block|{
if|if
condition|(
name|window
operator|<=
literal|0
condition|)
block|{
name|window
operator|=
name|DEFAULT_WINDOW
expr_stmt|;
comment|// 5 minutes, comparable to EDR
block|}
return|return
operator|new
name|SlidingTimeWindowReservoir
argument_list|(
name|window
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|clazz
operator|.
name|equals
argument_list|(
name|SW_CLAZZ
argument_list|)
condition|)
block|{
return|return
operator|new
name|SlidingWindowReservoir
argument_list|(
name|size
argument_list|)
return|;
block|}
else|else
block|{
comment|// custom reservoir
name|Reservoir
name|reservoir
decl_stmt|;
try|try
block|{
name|reservoir
operator|=
name|loader
operator|.
name|newInstance
argument_list|(
name|clazz
argument_list|,
name|Reservoir
operator|.
name|class
argument_list|)
expr_stmt|;
if|if
condition|(
name|reservoir
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|reservoir
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|reservoir
argument_list|,
name|info
operator|.
name|initArgs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|reservoir
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error initializing custom Reservoir implementation (will use default): "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|ExponentiallyDecayingReservoir
argument_list|(
name|size
argument_list|,
name|alpha
argument_list|,
name|clk
argument_list|)
return|;
block|}
block|}
block|}
comment|/**    * Default supplier of {@link Timer} instances, with configurable clock and reservoir.    * See {@link DefaultMeterSupplier} for clock configuration. Reservoir configuration uses    * {@link #RESERVOIR}, {@link #RESERVOIR_EDR_ALPHA}, {@link #RESERVOIR_SIZE} and    * {@link #RESERVOIR_WINDOW}.    */
DECL|class|DefaultTimerSupplier
specifier|public
specifier|static
specifier|final
class|class
name|DefaultTimerSupplier
implements|implements
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Timer
argument_list|>
implements|,
name|PluginInfoInitialized
block|{
DECL|field|clk
specifier|public
name|Clock
name|clk
init|=
name|Clock
operator|.
name|defaultClock
argument_list|()
decl_stmt|;
DECL|field|info
specifier|private
name|PluginInfo
name|info
decl_stmt|;
DECL|field|loader
specifier|private
name|SolrResourceLoader
name|loader
decl_stmt|;
DECL|method|DefaultTimerSupplier
specifier|public
name|DefaultTimerSupplier
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|clk
operator|=
name|getClock
argument_list|(
name|info
argument_list|,
name|CLOCK
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|getReservoir
specifier|public
name|Reservoir
name|getReservoir
parameter_list|()
block|{
return|return
name|MetricSuppliers
operator|.
name|getReservoir
argument_list|(
name|loader
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newMetric
specifier|public
name|Timer
name|newMetric
parameter_list|()
block|{
return|return
operator|new
name|Timer
argument_list|(
name|getReservoir
argument_list|()
argument_list|,
name|clk
argument_list|)
return|;
block|}
block|}
comment|/**    * Default supplier of {@link Histogram} instances, with configurable reservoir.    */
DECL|class|DefaultHistogramSupplier
specifier|public
specifier|static
specifier|final
class|class
name|DefaultHistogramSupplier
implements|implements
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Histogram
argument_list|>
implements|,
name|PluginInfoInitialized
block|{
DECL|field|info
specifier|private
name|PluginInfo
name|info
decl_stmt|;
DECL|field|loader
specifier|private
name|SolrResourceLoader
name|loader
decl_stmt|;
DECL|method|DefaultHistogramSupplier
specifier|public
name|DefaultHistogramSupplier
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|)
block|{
name|this
operator|.
name|loader
operator|=
name|loader
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
DECL|method|getReservoir
specifier|public
name|Reservoir
name|getReservoir
parameter_list|()
block|{
return|return
name|MetricSuppliers
operator|.
name|getReservoir
argument_list|(
name|loader
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|newMetric
specifier|public
name|Histogram
name|newMetric
parameter_list|()
block|{
return|return
operator|new
name|Histogram
argument_list|(
name|getReservoir
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**    * Create a {@link Counter} supplier.    * @param loader resource loader    * @param info plugin configuration, or null for default    * @return configured supplier instance, or default instance if configuration was invalid    */
DECL|method|counterSupplier
specifier|public
specifier|static
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Counter
argument_list|>
name|counterSupplier
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|DefaultCounterSupplier
argument_list|()
return|;
block|}
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Counter
argument_list|>
name|supplier
decl_stmt|;
try|try
block|{
name|supplier
operator|=
name|loader
operator|.
name|newInstance
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|MetricRegistry
operator|.
name|MetricSupplier
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error creating custom Counter supplier (will use default): "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|supplier
operator|=
operator|new
name|DefaultCounterSupplier
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|supplier
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|supplier
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|supplier
argument_list|,
name|info
operator|.
name|initArgs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|supplier
return|;
block|}
comment|/**    * Create a {@link Meter} supplier.    * @param loader resource loader    * @param info plugin configuration, or null for default    * @return configured supplier instance, or default instance if configuration was invalid    */
DECL|method|meterSupplier
specifier|public
specifier|static
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Meter
argument_list|>
name|meterSupplier
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Meter
argument_list|>
name|supplier
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|supplier
operator|=
operator|new
name|DefaultMeterSupplier
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|supplier
operator|=
name|loader
operator|.
name|newInstance
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|MetricRegistry
operator|.
name|MetricSupplier
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error creating custom Meter supplier (will use default): "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|supplier
operator|=
operator|new
name|DefaultMeterSupplier
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|supplier
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|supplier
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|supplier
argument_list|,
name|info
operator|.
name|initArgs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|supplier
return|;
block|}
comment|/**    * Create a {@link Timer} supplier.    * @param loader resource loader    * @param info plugin configuration, or null for default    * @return configured supplier instance, or default instance if configuration was invalid    */
DECL|method|timerSupplier
specifier|public
specifier|static
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Timer
argument_list|>
name|timerSupplier
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Timer
argument_list|>
name|supplier
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|supplier
operator|=
operator|new
name|DefaultTimerSupplier
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|supplier
operator|=
name|loader
operator|.
name|newInstance
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|MetricRegistry
operator|.
name|MetricSupplier
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error creating custom Timer supplier (will use default): "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|supplier
operator|=
operator|new
name|DefaultTimerSupplier
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|supplier
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|supplier
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|supplier
argument_list|,
name|info
operator|.
name|initArgs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|supplier
return|;
block|}
comment|/**    * Create a {@link Histogram} supplier.    * @param info plugin configuration, or null for default    * @return configured supplier instance, or default instance if configuration was invalid    */
DECL|method|histogramSupplier
specifier|public
specifier|static
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Histogram
argument_list|>
name|histogramSupplier
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
name|MetricRegistry
operator|.
name|MetricSupplier
argument_list|<
name|Histogram
argument_list|>
name|supplier
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|==
literal|null
operator|||
name|info
operator|.
name|className
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|supplier
operator|=
operator|new
name|DefaultHistogramSupplier
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|supplier
operator|=
name|loader
operator|.
name|newInstance
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|MetricRegistry
operator|.
name|MetricSupplier
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error creating custom Histogram supplier (will use default): "
operator|+
name|info
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|supplier
operator|=
operator|new
name|DefaultHistogramSupplier
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|supplier
operator|instanceof
name|PluginInfoInitialized
condition|)
block|{
operator|(
operator|(
name|PluginInfoInitialized
operator|)
name|supplier
operator|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|supplier
argument_list|,
name|info
operator|.
name|initArgs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|supplier
return|;
block|}
block|}
end_class

end_unit

