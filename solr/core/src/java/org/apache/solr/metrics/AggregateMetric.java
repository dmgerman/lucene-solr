begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_comment
comment|/**  * This class is used for keeping several partial named values and providing useful statistics over them.  */
end_comment

begin_class
DECL|class|AggregateMetric
specifier|public
class|class
name|AggregateMetric
implements|implements
name|Metric
block|{
comment|/**    * Simple class to represent current value and how many times it was set.    */
DECL|class|Update
specifier|public
specifier|static
class|class
name|Update
block|{
DECL|field|value
specifier|public
name|Object
name|value
decl_stmt|;
DECL|field|updateCount
specifier|public
specifier|final
name|AtomicInteger
name|updateCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
DECL|method|Update
specifier|public
name|Update
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|update
specifier|public
name|void
name|update
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|updateCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Update{"
operator|+
literal|"value="
operator|+
name|value
operator|+
literal|", updateCount="
operator|+
name|updateCount
operator|+
literal|'}'
return|;
block|}
block|}
DECL|field|values
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Update
argument_list|>
name|values
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|set
specifier|public
name|void
name|set
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
specifier|final
name|Update
name|existing
init|=
name|values
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|existing
operator|==
literal|null
condition|)
block|{
specifier|final
name|Update
name|created
init|=
operator|new
name|Update
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|Update
name|raced
init|=
name|values
operator|.
name|putIfAbsent
argument_list|(
name|name
argument_list|,
name|created
argument_list|)
decl_stmt|;
if|if
condition|(
name|raced
operator|!=
literal|null
condition|)
block|{
name|raced
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|existing
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|values
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|values
operator|.
name|isEmpty
argument_list|()
return|;
block|}
DECL|method|getValues
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Update
argument_list|>
name|getValues
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|values
argument_list|)
return|;
block|}
comment|// --------- stats ---------
DECL|method|getMax
specifier|public
name|double
name|getMax
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Double
name|res
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Update
name|u
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
continue|continue;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|u
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|n
operator|.
name|doubleValue
argument_list|()
operator|>
name|res
condition|)
block|{
name|res
operator|=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|getMin
specifier|public
name|double
name|getMin
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Double
name|res
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Update
name|u
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
continue|continue;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|u
operator|.
name|value
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|n
operator|.
name|doubleValue
argument_list|()
operator|<
name|res
condition|)
block|{
name|res
operator|=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|res
return|;
block|}
DECL|method|getMean
specifier|public
name|double
name|getMean
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|total
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Update
name|u
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
continue|continue;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|u
operator|.
name|value
decl_stmt|;
name|total
operator|+=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
return|return
name|total
operator|/
name|values
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getStdDev
specifier|public
name|double
name|getStdDev
parameter_list|()
block|{
name|int
name|size
init|=
name|values
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|<
literal|2
condition|)
block|{
return|return
literal|0
return|;
block|}
specifier|final
name|double
name|mean
init|=
name|getMean
argument_list|()
decl_stmt|;
name|double
name|sum
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Update
name|u
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
continue|continue;
block|}
name|count
operator|++
expr_stmt|;
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|u
operator|.
name|value
decl_stmt|;
specifier|final
name|double
name|diff
init|=
name|n
operator|.
name|doubleValue
argument_list|()
operator|-
name|mean
decl_stmt|;
name|sum
operator|+=
name|diff
operator|*
name|diff
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|<
literal|2
condition|)
block|{
return|return
literal|0
return|;
block|}
specifier|final
name|double
name|variance
init|=
name|sum
operator|/
operator|(
name|count
operator|-
literal|1
operator|)
decl_stmt|;
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|)
return|;
block|}
DECL|method|getSum
specifier|public
name|double
name|getSum
parameter_list|()
block|{
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|double
name|res
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Update
name|u
range|:
name|values
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|value
operator|instanceof
name|Number
operator|)
condition|)
block|{
continue|continue;
block|}
name|Number
name|n
init|=
operator|(
name|Number
operator|)
name|u
operator|.
name|value
decl_stmt|;
name|res
operator|+=
name|n
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"AggregateMetric{"
operator|+
literal|"size="
operator|+
name|size
argument_list|()
operator|+
literal|", max="
operator|+
name|getMax
argument_list|()
operator|+
literal|", min="
operator|+
name|getMin
argument_list|()
operator|+
literal|", mean="
operator|+
name|getMean
argument_list|()
operator|+
literal|", stddev="
operator|+
name|getStdDev
argument_list|()
operator|+
literal|", sum="
operator|+
name|getSum
argument_list|()
operator|+
literal|", values="
operator|+
name|values
operator|+
literal|'}'
return|;
block|}
block|}
end_class

end_unit

