begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics.reporters
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|Graphite
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|GraphiteReporter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|GraphiteSender
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|graphite
operator|.
name|PickledGraphite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Metrics reporter that wraps {@link com.codahale.metrics.graphite.GraphiteReporter}.  */
end_comment

begin_class
DECL|class|SolrGraphiteReporter
specifier|public
class|class
name|SolrGraphiteReporter
extends|extends
name|SolrMetricReporter
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|host
specifier|private
name|String
name|host
init|=
literal|null
decl_stmt|;
DECL|field|port
specifier|private
name|int
name|port
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|period
specifier|private
name|int
name|period
init|=
literal|60
decl_stmt|;
DECL|field|pickled
specifier|private
name|boolean
name|pickled
init|=
literal|false
decl_stmt|;
DECL|field|instancePrefix
specifier|private
name|String
name|instancePrefix
init|=
literal|null
decl_stmt|;
DECL|field|filters
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|filters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|reporter
specifier|private
name|GraphiteReporter
name|reporter
init|=
literal|null
decl_stmt|;
DECL|field|serviceRegistry
specifier|private
specifier|static
specifier|final
name|ReporterClientCache
argument_list|<
name|GraphiteSender
argument_list|>
name|serviceRegistry
init|=
operator|new
name|ReporterClientCache
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Create a Graphite reporter for metrics managed in a named registry.    *    * @param metricManager metric manager instance that manages the selected registry    * @param registryName  registry to use, one of registries managed by    *                      {@link SolrMetricManager}    */
DECL|method|SolrGraphiteReporter
specifier|public
name|SolrGraphiteReporter
parameter_list|(
name|SolrMetricManager
name|metricManager
parameter_list|,
name|String
name|registryName
parameter_list|)
block|{
name|super
argument_list|(
name|metricManager
argument_list|,
name|registryName
argument_list|)
expr_stmt|;
block|}
DECL|method|setHost
specifier|public
name|void
name|setHost
parameter_list|(
name|String
name|host
parameter_list|)
block|{
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
block|}
DECL|method|setPort
specifier|public
name|void
name|setPort
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|this
operator|.
name|port
operator|=
name|port
expr_stmt|;
block|}
DECL|method|setPrefix
specifier|public
name|void
name|setPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|this
operator|.
name|instancePrefix
operator|=
name|prefix
expr_stmt|;
block|}
comment|/**    * Report only metrics with names matching any of the prefix filters.    * @param filters list of 0 or more prefixes. If the list is empty then    *                all names will match.    */
DECL|method|setFilter
specifier|public
name|void
name|setFilter
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|filters
parameter_list|)
block|{
if|if
condition|(
name|filters
operator|==
literal|null
operator|||
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|filters
operator|.
name|addAll
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
DECL|method|setFilter
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|filters
operator|.
name|add
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|setPickled
specifier|public
name|void
name|setPickled
parameter_list|(
name|boolean
name|pickled
parameter_list|)
block|{
name|this
operator|.
name|pickled
operator|=
name|pickled
expr_stmt|;
block|}
DECL|method|setPeriod
specifier|public
name|void
name|setPeriod
parameter_list|(
name|int
name|period
parameter_list|)
block|{
name|this
operator|.
name|period
operator|=
name|period
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|IllegalStateException
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Reporter disabled for registry "
operator|+
name|registryName
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|host
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Init argument 'host' must be set to a valid Graphite server name."
argument_list|)
throw|;
block|}
if|if
condition|(
name|port
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Init argument 'port' must be set to a valid Graphite server port."
argument_list|)
throw|;
block|}
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Already started once?"
argument_list|)
throw|;
block|}
if|if
condition|(
name|period
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Init argument 'period' is in time unit 'seconds' and must be at least 1."
argument_list|)
throw|;
block|}
name|GraphiteSender
name|graphite
decl_stmt|;
name|String
name|id
init|=
name|host
operator|+
literal|":"
operator|+
name|port
operator|+
literal|":"
operator|+
name|pickled
decl_stmt|;
name|graphite
operator|=
name|serviceRegistry
operator|.
name|getOrCreate
argument_list|(
name|id
argument_list|,
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|pickled
condition|)
block|{
return|return
operator|new
name|PickledGraphite
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Graphite
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|instancePrefix
operator|==
literal|null
condition|)
block|{
name|instancePrefix
operator|=
name|registryName
expr_stmt|;
block|}
else|else
block|{
name|instancePrefix
operator|=
name|instancePrefix
operator|+
literal|"."
operator|+
name|registryName
expr_stmt|;
block|}
name|GraphiteReporter
operator|.
name|Builder
name|builder
init|=
name|GraphiteReporter
operator|.
name|forRegistry
argument_list|(
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
argument_list|)
operator|.
name|prefixedWith
argument_list|(
name|instancePrefix
argument_list|)
operator|.
name|convertRatesTo
argument_list|(
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|convertDurationsTo
argument_list|(
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|MetricFilter
name|filter
decl_stmt|;
if|if
condition|(
operator|!
name|filters
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|filter
operator|=
operator|new
name|SolrMetricManager
operator|.
name|PrefixFilter
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|MetricFilter
operator|.
name|ALL
expr_stmt|;
block|}
name|builder
operator|=
name|builder
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|reporter
operator|=
name|builder
operator|.
name|build
argument_list|(
name|graphite
argument_list|)
expr_stmt|;
name|reporter
operator|.
name|start
argument_list|(
name|period
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|reporter
operator|!=
literal|null
condition|)
block|{
name|reporter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

