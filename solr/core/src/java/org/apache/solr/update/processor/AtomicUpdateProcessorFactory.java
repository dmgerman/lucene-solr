begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|VersionInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|SolrCoreAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An update processor that will convert conventional field-value document to atomic update document  *<p>  * sample request:  * curl -X POST -H Content-Type: application/json  * http://localhost:8983/solr/test/update/json/docs?processor=atomic;ampersand;Atomic.my_newfield=add;ampersand;Atomic.subject=set;ampersand;Atomic.count_i=inc;ampersand;commit=true  * --data-binary {"id": 1,"title": "titleA"}  *</p>  * currently supports all types of atomic updates  */
end_comment

begin_class
DECL|class|AtomicUpdateProcessorFactory
specifier|public
class|class
name|AtomicUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
implements|implements
name|SolrCoreAware
block|{
DECL|field|ADD
specifier|private
specifier|final
specifier|static
name|String
name|ADD
init|=
literal|"add"
decl_stmt|;
DECL|field|INC
specifier|private
specifier|final
specifier|static
name|String
name|INC
init|=
literal|"inc"
decl_stmt|;
DECL|field|REMOVE
specifier|private
specifier|final
specifier|static
name|String
name|REMOVE
init|=
literal|"remove"
decl_stmt|;
DECL|field|SET
specifier|private
specifier|final
specifier|static
name|String
name|SET
init|=
literal|"set"
decl_stmt|;
DECL|field|REMOVEREGEX
specifier|private
specifier|final
specifier|static
name|String
name|REMOVEREGEX
init|=
literal|"removeregex"
decl_stmt|;
DECL|field|VALID_OPS
specifier|private
specifier|final
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|VALID_OPS
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ADD
argument_list|,
name|INC
argument_list|,
name|REMOVE
argument_list|,
name|SET
argument_list|,
name|REMOVEREGEX
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|VERSION
specifier|private
specifier|final
specifier|static
name|String
name|VERSION
init|=
literal|"_version_"
decl_stmt|;
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"atomic"
decl_stmt|;
DECL|field|ATOMIC_FIELD_PREFIX
specifier|public
specifier|final
specifier|static
name|String
name|ATOMIC_FIELD_PREFIX
init|=
literal|"atomic."
decl_stmt|;
DECL|field|MAX_ATTEMPTS
specifier|private
specifier|final
specifier|static
name|int
name|MAX_ATTEMPTS
init|=
literal|5
decl_stmt|;
DECL|field|vinfo
specifier|private
name|VersionInfo
name|vinfo
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"static-access"
block|,
literal|"rawtypes"
block|,
literal|"null"
block|}
argument_list|)
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|NamedList
name|args
parameter_list|)
block|{    }
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|this
operator|.
name|vinfo
operator|=
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
name|core
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
operator|.
name|getVersionInfo
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
if|if
condition|(
name|vinfo
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Atomic document updates are not supported unless<updateLog/> is configured"
argument_list|)
throw|;
block|}
return|return
operator|new
name|AtomicUpdateProcessor
argument_list|(
name|req
argument_list|,
name|next
argument_list|)
return|;
block|}
DECL|class|AtomicUpdateProcessor
specifier|private
class|class
name|AtomicUpdateProcessor
extends|extends
name|UpdateRequestProcessor
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|field|req
specifier|private
specifier|final
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|next
specifier|private
specifier|final
name|UpdateRequestProcessor
name|next
decl_stmt|;
DECL|method|AtomicUpdateProcessor
specifier|private
name|AtomicUpdateProcessor
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
block|}
comment|/*      * 1. convert incoming update document to atomic-type update document       * for specified fields in processor definition.      * 2. if incoming update document contains already atomic-type updates, skip      * 3. fields not specified in processor param(s) in solrconfig.xml for atomic action      * will be treated as conventional updates.      * 4. retry when encounter version conflict      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrInputDocument
name|orgdoc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
name|boolean
name|isAtomicUpdateAddedByMe
init|=
literal|false
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|paramsIterator
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|paramsIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|param
init|=
name|paramsIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|param
operator|.
name|startsWith
argument_list|(
name|ATOMIC_FIELD_PREFIX
argument_list|)
condition|)
continue|continue;
name|String
name|field
init|=
name|param
operator|.
name|substring
argument_list|(
name|ATOMIC_FIELD_PREFIX
operator|.
name|length
argument_list|()
argument_list|,
name|param
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|operation
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|param
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|VALID_OPS
operator|.
name|contains
argument_list|(
name|operation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: '"
operator|+
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|param
argument_list|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|orgdoc
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|==
literal|null
operator|||
name|orgdoc
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
comment|// no value for the field or it's already an atomic update operation
comment|//continue processing other fields
continue|continue;
block|}
name|orgdoc
operator|.
name|setField
argument_list|(
name|field
argument_list|,
name|singletonMap
argument_list|(
name|operation
argument_list|,
name|orgdoc
operator|.
name|get
argument_list|(
name|field
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|isAtomicUpdateAddedByMe
operator|=
literal|true
expr_stmt|;
block|}
comment|// if atomic, put _version_ for optimistic concurrency if doc present in index
if|if
condition|(
name|isAtomicUpdateAddedByMe
condition|)
block|{
name|Long
name|lastVersion
init|=
name|vinfo
operator|.
name|lookupVersion
argument_list|(
name|cmd
operator|.
name|getIndexedId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastVersion
operator|!=
literal|null
condition|)
block|{
name|orgdoc
operator|.
name|setField
argument_list|(
name|VERSION
argument_list|,
name|lastVersion
argument_list|)
expr_stmt|;
block|}
name|processAddWithRetry
argument_list|(
name|cmd
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
comment|// else send it for doc to get inserted for the first time
block|}
DECL|method|processAddWithRetry
specifier|private
name|void
name|processAddWithRetry
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|,
name|int
name|attempts
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
if|if
condition|(
name|attempts
operator|++
operator|>=
name|MAX_ATTEMPTS
condition|)
block|{
comment|//maximum number of attempts allowed: 5
throw|throw
operator|new
name|SolrException
argument_list|(
name|SERVER_ERROR
argument_list|,
literal|"Atomic update failed after multiple attempts due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|e
operator|.
name|code
argument_list|()
operator|==
name|ErrorCode
operator|.
name|CONFLICT
operator|.
name|code
condition|)
block|{
comment|// version conflict
name|log
operator|.
name|warn
argument_list|(
literal|"Atomic update failed due to "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"Retrying with new version .... ("
operator|+
name|attempts
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Long
name|lastVersion
init|=
name|vinfo
operator|.
name|lookupVersion
argument_list|(
name|cmd
operator|.
name|getIndexedId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastVersion
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|solrDoc
operator|.
name|setField
argument_list|(
name|VERSION
argument_list|,
name|lastVersion
argument_list|)
expr_stmt|;
block|}
name|processAddWithRetry
argument_list|(
name|cmd
argument_list|,
name|attempts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

