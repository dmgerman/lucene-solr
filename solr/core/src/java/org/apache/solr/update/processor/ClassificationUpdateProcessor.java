begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|ClassificationResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|document
operator|.
name|DocumentClassifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|document
operator|.
name|KNearestNeighborDocumentClassifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
operator|.
name|document
operator|.
name|SimpleNaiveBayesDocumentClassifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|ClassificationUpdateProcessorFactory
operator|.
name|Algorithm
import|;
end_import

begin_comment
comment|/**  * This Class is a Request Update Processor to classify the document in input and add a field  * containing the class to the Document.  * It uses the Lucene Document Classification module, see {@link DocumentClassifier}.  */
end_comment

begin_class
DECL|class|ClassificationUpdateProcessor
class|class
name|ClassificationUpdateProcessor
extends|extends
name|UpdateRequestProcessor
block|{
DECL|field|trainingClassField
specifier|private
specifier|final
name|String
name|trainingClassField
decl_stmt|;
DECL|field|predictedClassField
specifier|private
specifier|final
name|String
name|predictedClassField
decl_stmt|;
DECL|field|maxOutputClasses
specifier|private
specifier|final
name|int
name|maxOutputClasses
decl_stmt|;
DECL|field|classifier
specifier|private
name|DocumentClassifier
argument_list|<
name|BytesRef
argument_list|>
name|classifier
decl_stmt|;
comment|/**    * Sole constructor    *    * @param classificationParams classification advanced params    * @param next            next update processor in the chain    * @param indexReader     index reader    * @param schema          schema    */
DECL|method|ClassificationUpdateProcessor
specifier|public
name|ClassificationUpdateProcessor
parameter_list|(
name|ClassificationUpdateProcessorParams
name|classificationParams
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|,
name|IndexReader
name|indexReader
parameter_list|,
name|IndexSchema
name|schema
parameter_list|)
block|{
name|super
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|this
operator|.
name|trainingClassField
operator|=
name|classificationParams
operator|.
name|getTrainingClassField
argument_list|()
expr_stmt|;
name|this
operator|.
name|predictedClassField
operator|=
name|classificationParams
operator|.
name|getPredictedClassField
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxOutputClasses
operator|=
name|classificationParams
operator|.
name|getMaxPredictedClasses
argument_list|()
expr_stmt|;
name|String
index|[]
name|inputFieldNamesWithBoost
init|=
name|classificationParams
operator|.
name|getInputFieldNames
argument_list|()
decl_stmt|;
name|Algorithm
name|classificationAlgorithm
init|=
name|classificationParams
operator|.
name|getAlgorithm
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Analyzer
argument_list|>
name|field2analyzer
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
index|[]
name|inputFieldNames
init|=
name|this
operator|.
name|removeBoost
argument_list|(
name|inputFieldNamesWithBoost
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|inputFieldNames
control|)
block|{
name|SchemaField
name|fieldFromSolrSchema
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|Analyzer
name|indexAnalyzer
init|=
name|fieldFromSolrSchema
operator|.
name|getType
argument_list|()
operator|.
name|getQueryAnalyzer
argument_list|()
decl_stmt|;
name|field2analyzer
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|indexAnalyzer
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|classificationAlgorithm
condition|)
block|{
case|case
name|KNN
case|:
name|classifier
operator|=
operator|new
name|KNearestNeighborDocumentClassifier
argument_list|(
name|indexReader
argument_list|,
literal|null
argument_list|,
name|classificationParams
operator|.
name|getTrainingFilterQuery
argument_list|()
argument_list|,
name|classificationParams
operator|.
name|getK
argument_list|()
argument_list|,
name|classificationParams
operator|.
name|getMinDf
argument_list|()
argument_list|,
name|classificationParams
operator|.
name|getMinTf
argument_list|()
argument_list|,
name|trainingClassField
argument_list|,
name|field2analyzer
argument_list|,
name|inputFieldNamesWithBoost
argument_list|)
expr_stmt|;
break|break;
case|case
name|BAYES
case|:
name|classifier
operator|=
operator|new
name|SimpleNaiveBayesDocumentClassifier
argument_list|(
name|indexReader
argument_list|,
literal|null
argument_list|,
name|trainingClassField
argument_list|,
name|field2analyzer
argument_list|,
name|inputFieldNamesWithBoost
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
DECL|method|removeBoost
specifier|private
name|String
index|[]
name|removeBoost
parameter_list|(
name|String
index|[]
name|inputFieldNamesWithBoost
parameter_list|)
block|{
name|String
index|[]
name|inputFieldNames
init|=
operator|new
name|String
index|[
name|inputFieldNamesWithBoost
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputFieldNamesWithBoost
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|singleFieldNameWithBoost
init|=
name|inputFieldNamesWithBoost
index|[
name|i
index|]
decl_stmt|;
name|String
index|[]
name|fieldName2boost
init|=
name|singleFieldNameWithBoost
operator|.
name|split
argument_list|(
literal|"\\^"
argument_list|)
decl_stmt|;
name|inputFieldNames
index|[
name|i
index|]
operator|=
name|fieldName2boost
index|[
literal|0
index|]
expr_stmt|;
block|}
return|return
name|inputFieldNames
return|;
block|}
comment|/**    * @param cmd the update command in input containing the Document to classify    * @throws IOException If there is a low-level I/O error    */
annotation|@
name|Override
DECL|method|processAdd
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrInputDocument
name|doc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
name|Document
name|luceneDocument
init|=
name|cmd
operator|.
name|getLuceneDocument
argument_list|()
decl_stmt|;
name|String
name|assignedClass
decl_stmt|;
name|Object
name|documentClass
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|trainingClassField
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentClass
operator|==
literal|null
condition|)
block|{
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|assignedClassifications
init|=
name|classifier
operator|.
name|getClasses
argument_list|(
name|luceneDocument
argument_list|,
name|maxOutputClasses
argument_list|)
decl_stmt|;
if|if
condition|(
name|assignedClassifications
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
name|singleClassification
range|:
name|assignedClassifications
control|)
block|{
name|assignedClass
operator|=
name|singleClassification
operator|.
name|getAssignedClass
argument_list|()
operator|.
name|utf8ToString
argument_list|()
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|predictedClassField
argument_list|,
name|assignedClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

