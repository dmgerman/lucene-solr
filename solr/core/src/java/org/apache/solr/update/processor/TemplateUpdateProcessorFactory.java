begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|ConcurrentLRUCache
import|;
end_import

begin_comment
comment|/** * Adds new fields to documents based on a template pattern specified via Template.field * request parameters (multi-valued) or 'field' value specified in initArgs. *<p> * The format of the parameter is&lt;field-name&gt;:&lt;the-template-string&gt;, for example:<br> *<b>Template.field=fname:${somefield}some_string${someotherfield}</b> * */
end_comment

begin_class
DECL|class|TemplateUpdateProcessorFactory
specifier|public
class|class
name|TemplateUpdateProcessorFactory
extends|extends
name|SimpleUpdateProcessorFactory
block|{
DECL|field|templateCache
specifier|private
name|Cache
argument_list|<
name|String
argument_list|,
name|Resolved
argument_list|>
name|templateCache
init|=
operator|new
name|ConcurrentLRUCache
argument_list|<>
argument_list|(
literal|1000
argument_list|,
literal|800
argument_list|,
literal|900
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
decl_stmt|;
annotation|@
name|Override
DECL|method|process
specifier|protected
name|void
name|process
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|String
index|[]
name|vals
init|=
name|getParams
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
name|cmd
operator|.
name|getSolrInputDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|vals
operator|!=
literal|null
operator|&&
name|vals
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|val
range|:
name|vals
control|)
block|{
if|if
condition|(
name|val
operator|==
literal|null
operator|||
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|int
name|idx
init|=
name|val
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"'field' must be of the format<field-name>:<the-template-string>"
argument_list|)
throw|;
name|String
name|fName
init|=
name|val
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
decl_stmt|;
name|String
name|template
init|=
name|val
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|fName
argument_list|,
name|replaceTokens
argument_list|(
name|template
argument_list|,
name|templateCache
argument_list|,
name|s
lambda|->
block|{
name|Object
name|v
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
condition|?
literal|""
else|:
name|v
return|;
block|}
argument_list|,
name|BRACES_PLACEHOLDER_PATTERN
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getResolved
specifier|public
specifier|static
name|Resolved
name|getResolved
parameter_list|(
name|String
name|template
parameter_list|,
name|Cache
argument_list|<
name|String
argument_list|,
name|Resolved
argument_list|>
name|cache
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|Resolved
name|r
init|=
name|cache
operator|==
literal|null
condition|?
literal|null
else|:
name|cache
operator|.
name|get
argument_list|(
name|template
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|Resolved
argument_list|()
expr_stmt|;
name|Matcher
name|m
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|template
argument_list|)
decl_stmt|;
while|while
condition|(
name|m
operator|.
name|find
argument_list|()
condition|)
block|{
name|String
name|variable
init|=
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|r
operator|.
name|startIndexes
operator|.
name|add
argument_list|(
name|m
operator|.
name|start
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|endOffsets
operator|.
name|add
argument_list|(
name|m
operator|.
name|end
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|variables
operator|.
name|add
argument_list|(
name|variable
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
name|cache
operator|.
name|put
argument_list|(
name|template
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Get a list of variables embedded in the template string.    */
DECL|method|getVariables
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getVariables
parameter_list|(
name|String
name|template
parameter_list|,
name|Cache
argument_list|<
name|String
argument_list|,
name|Resolved
argument_list|>
name|cache
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
name|Resolved
name|r
init|=
name|getResolved
argument_list|(
name|template
argument_list|,
name|cache
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|r
operator|.
name|variables
argument_list|)
return|;
block|}
DECL|method|replaceTokens
specifier|public
specifier|static
name|String
name|replaceTokens
parameter_list|(
name|String
name|template
parameter_list|,
name|Cache
argument_list|<
name|String
argument_list|,
name|Resolved
argument_list|>
name|cache
parameter_list|,
name|Function
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|fun
parameter_list|,
name|Pattern
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|template
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Resolved
name|r
init|=
name|getResolved
argument_list|(
name|template
argument_list|,
name|cache
argument_list|,
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|startIndexes
operator|!=
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|template
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|r
operator|.
name|startIndexes
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|replacement
init|=
name|fun
operator|.
name|apply
argument_list|(
name|r
operator|.
name|variables
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|sb
operator|.
name|replace
argument_list|(
name|r
operator|.
name|startIndexes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|r
operator|.
name|endOffsets
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|template
return|;
block|}
block|}
DECL|class|Resolved
specifier|public
specifier|static
class|class
name|Resolved
block|{
DECL|field|startIndexes
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|startIndexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|endOffsets
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|endOffsets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|variables
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|variables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
block|}
DECL|field|DOLLAR_BRACES_PLACEHOLDER_PATTERN
specifier|public
specifier|static
specifier|final
name|Pattern
name|DOLLAR_BRACES_PLACEHOLDER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[$][{](.*?)[}]"
argument_list|)
decl_stmt|;
DECL|field|BRACES_PLACEHOLDER_PATTERN
specifier|public
specifier|static
specifier|final
name|Pattern
name|BRACES_PLACEHOLDER_PATTERN
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[{](.*?)[}]"
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

