begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_comment
comment|/**  * A base class for writing a very simple UpdateProcessor without worrying too much about the API.  * This is deliberately made to support only the add operation  */
end_comment

begin_class
DECL|class|SimpleUpdateProcessorFactory
specifier|public
specifier|abstract
class|class
name|SimpleUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
DECL|field|myName
specifier|protected
specifier|final
name|String
name|myName
decl_stmt|;
DECL|field|initArgs
specifier|protected
name|NamedList
name|initArgs
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
DECL|field|REQ
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|SolrQueryRequest
argument_list|>
name|REQ
init|=
operator|new
name|ThreadLocal
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|SimpleUpdateProcessorFactory
specifier|protected
name|SimpleUpdateProcessorFactory
parameter_list|()
block|{
name|String
name|simpleName
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|this
operator|.
name|myName
operator|=
name|simpleName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|simpleName
operator|.
name|indexOf
argument_list|(
literal|"UpdateProcessorFactory"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|initArgs
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
return|return
operator|new
name|UpdateRequestProcessor
argument_list|(
name|next
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|processAdd
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|)
throws|throws
name|IOException
block|{
name|REQ
operator|.
name|set
argument_list|(
name|req
argument_list|)
expr_stmt|;
try|try
block|{
name|process
argument_list|(
name|cmd
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|REQ
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
DECL|method|getParam
specifier|protected
name|String
name|getParam
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|v
init|=
name|getParams
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
operator|||
name|v
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|v
index|[
literal|0
index|]
return|;
block|}
comment|/**returns value from init args or request parameter. the request parameter must have the    * URP shortname prefixed    */
DECL|method|getParams
specifier|protected
name|String
index|[]
name|getParams
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Object
name|v
init|=
name|REQ
operator|.
name|get
argument_list|()
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|_param
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
name|v
operator|=
name|initArgs
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|v
operator|instanceof
name|String
index|[]
condition|)
return|return
operator|(
name|String
index|[]
operator|)
name|v
return|;
return|return
operator|new
name|String
index|[]
block|{
name|v
operator|.
name|toString
argument_list|()
block|}
return|;
block|}
DECL|method|_param
specifier|private
name|String
name|_param
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|myName
operator|+
literal|"."
operator|+
name|name
return|;
block|}
comment|/**    * This object is reused across requests. So,this method should not store anything in the instance variable.    */
DECL|method|process
specifier|protected
specifier|abstract
name|void
name|process
parameter_list|(
name|AddUpdateCommand
name|cmd
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
function_decl|;
block|}
end_class

end_unit

