begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|LuceneQParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|ClassificationUpdateProcessorFactory
operator|.
name|Algorithm
operator|.
name|KNN
import|;
end_import

begin_comment
comment|/**  * This class implements an UpdateProcessorFactory for the Classification Update Processor.  * It takes in input a series of parameter that will be necessary to instantiate and use the Classifier  */
end_comment

begin_class
DECL|class|ClassificationUpdateProcessorFactory
specifier|public
class|class
name|ClassificationUpdateProcessorFactory
extends|extends
name|UpdateRequestProcessorFactory
block|{
comment|// Update Processor Config params
DECL|field|INPUT_FIELDS_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|INPUT_FIELDS_PARAM
init|=
literal|"inputFields"
decl_stmt|;
DECL|field|TRAINING_CLASS_FIELD_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|TRAINING_CLASS_FIELD_PARAM
init|=
literal|"classField"
decl_stmt|;
DECL|field|PREDICTED_CLASS_FIELD_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|PREDICTED_CLASS_FIELD_PARAM
init|=
literal|"predictedClassField"
decl_stmt|;
DECL|field|MAX_CLASSES_TO_ASSIGN_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|MAX_CLASSES_TO_ASSIGN_PARAM
init|=
literal|"predictedClass.maxCount"
decl_stmt|;
DECL|field|ALGORITHM_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|ALGORITHM_PARAM
init|=
literal|"algorithm"
decl_stmt|;
DECL|field|KNN_MIN_TF_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|KNN_MIN_TF_PARAM
init|=
literal|"knn.minTf"
decl_stmt|;
DECL|field|KNN_MIN_DF_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|KNN_MIN_DF_PARAM
init|=
literal|"knn.minDf"
decl_stmt|;
DECL|field|KNN_K_PARAM
specifier|private
specifier|static
specifier|final
name|String
name|KNN_K_PARAM
init|=
literal|"knn.k"
decl_stmt|;
DECL|field|KNN_FILTER_QUERY
specifier|private
specifier|static
specifier|final
name|String
name|KNN_FILTER_QUERY
init|=
literal|"knn.filterQuery"
decl_stmt|;
DECL|enum|Algorithm
DECL|enum constant|KNN
DECL|enum constant|BAYES
specifier|public
enum|enum
name|Algorithm
block|{
name|KNN
block|,
name|BAYES
block|}
comment|//Update Processor Defaults
DECL|field|DEFAULT_MAX_CLASSES_TO_ASSIGN
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_CLASSES_TO_ASSIGN
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MIN_TF
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_TF
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_MIN_DF
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MIN_DF
init|=
literal|1
decl_stmt|;
DECL|field|DEFAULT_K
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_K
init|=
literal|10
decl_stmt|;
DECL|field|DEFAULT_ALGORITHM
specifier|private
specifier|static
specifier|final
name|Algorithm
name|DEFAULT_ALGORITHM
init|=
name|KNN
decl_stmt|;
DECL|field|params
specifier|private
name|SolrParams
name|params
decl_stmt|;
DECL|field|classificationParams
specifier|private
name|ClassificationUpdateProcessorParams
name|classificationParams
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|NamedList
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|params
operator|=
name|SolrParams
operator|.
name|toSolrParams
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|classificationParams
operator|=
operator|new
name|ClassificationUpdateProcessorParams
argument_list|()
expr_stmt|;
name|String
name|fieldNames
init|=
name|params
operator|.
name|get
argument_list|(
name|INPUT_FIELDS_PARAM
argument_list|)
decl_stmt|;
comment|// must be a comma separated list of fields
name|checkNotNull
argument_list|(
name|INPUT_FIELDS_PARAM
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|classificationParams
operator|.
name|setInputFieldNames
argument_list|(
name|fieldNames
operator|.
name|split
argument_list|(
literal|"\\,"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|trainingClassField
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|TRAINING_CLASS_FIELD_PARAM
argument_list|)
operator|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|TRAINING_CLASS_FIELD_PARAM
argument_list|,
name|trainingClassField
argument_list|)
expr_stmt|;
name|classificationParams
operator|.
name|setTrainingClassField
argument_list|(
name|trainingClassField
argument_list|)
expr_stmt|;
name|String
name|predictedClassField
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|PREDICTED_CLASS_FIELD_PARAM
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|predictedClassField
operator|==
literal|null
operator|||
name|predictedClassField
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|predictedClassField
operator|=
name|trainingClassField
expr_stmt|;
block|}
name|classificationParams
operator|.
name|setPredictedClassField
argument_list|(
name|predictedClassField
argument_list|)
expr_stmt|;
name|classificationParams
operator|.
name|setMaxPredictedClasses
argument_list|(
name|getIntParam
argument_list|(
name|params
argument_list|,
name|MAX_CLASSES_TO_ASSIGN_PARAM
argument_list|,
name|DEFAULT_MAX_CLASSES_TO_ASSIGN
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|algorithmString
init|=
name|params
operator|.
name|get
argument_list|(
name|ALGORITHM_PARAM
argument_list|)
decl_stmt|;
name|Algorithm
name|classificationAlgorithm
decl_stmt|;
try|try
block|{
if|if
condition|(
name|algorithmString
operator|==
literal|null
operator|||
name|Algorithm
operator|.
name|valueOf
argument_list|(
name|algorithmString
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
operator|==
literal|null
condition|)
block|{
name|classificationAlgorithm
operator|=
name|DEFAULT_ALGORITHM
expr_stmt|;
block|}
else|else
block|{
name|classificationAlgorithm
operator|=
name|Algorithm
operator|.
name|valueOf
argument_list|(
name|algorithmString
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Classification UpdateProcessor Algorithm: '"
operator|+
name|algorithmString
operator|+
literal|"' not supported"
argument_list|)
throw|;
block|}
name|classificationParams
operator|.
name|setAlgorithm
argument_list|(
name|classificationAlgorithm
argument_list|)
expr_stmt|;
name|classificationParams
operator|.
name|setMinTf
argument_list|(
name|getIntParam
argument_list|(
name|params
argument_list|,
name|KNN_MIN_TF_PARAM
argument_list|,
name|DEFAULT_MIN_TF
argument_list|)
argument_list|)
expr_stmt|;
name|classificationParams
operator|.
name|setMinDf
argument_list|(
name|getIntParam
argument_list|(
name|params
argument_list|,
name|KNN_MIN_DF_PARAM
argument_list|,
name|DEFAULT_MIN_DF
argument_list|)
argument_list|)
expr_stmt|;
name|classificationParams
operator|.
name|setK
argument_list|(
name|getIntParam
argument_list|(
name|params
argument_list|,
name|KNN_K_PARAM
argument_list|,
name|DEFAULT_K
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Returns an Int parsed param or a default if the param is null    *    * @param params       Solr params in input    * @param name         the param name    * @param defaultValue the param default    * @return the Int value for the param    */
DECL|method|getIntParam
specifier|private
name|int
name|getIntParam
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|paramString
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|paramInt
decl_stmt|;
if|if
condition|(
name|paramString
operator|!=
literal|null
operator|&&
operator|!
name|paramString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|paramInt
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|paramString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paramInt
operator|=
name|defaultValue
expr_stmt|;
block|}
return|return
name|paramInt
return|;
block|}
DECL|method|checkNotNull
specifier|private
name|void
name|checkNotNull
parameter_list|(
name|String
name|paramName
parameter_list|,
name|Object
name|param
parameter_list|)
block|{
if|if
condition|(
name|param
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Classification UpdateProcessor '"
operator|+
name|paramName
operator|+
literal|"' can not be null"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getInstance
specifier|public
name|UpdateRequestProcessor
name|getInstance
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|UpdateRequestProcessor
name|next
parameter_list|)
block|{
name|String
name|trainingFilterQueryString
init|=
operator|(
name|params
operator|.
name|get
argument_list|(
name|KNN_FILTER_QUERY
argument_list|)
operator|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|trainingFilterQueryString
operator|!=
literal|null
operator|&&
operator|!
name|trainingFilterQueryString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Query
name|trainingFilterQuery
init|=
name|this
operator|.
name|parseFilterQuery
argument_list|(
name|trainingFilterQueryString
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|classificationParams
operator|.
name|setTrainingFilterQuery
argument_list|(
name|trainingFilterQuery
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SyntaxError
decl||
name|RuntimeException
name|syntaxError
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Classification UpdateProcessor Training Filter Query: '"
operator|+
name|trainingFilterQueryString
operator|+
literal|"' is not supported"
argument_list|,
name|syntaxError
argument_list|)
throw|;
block|}
name|IndexSchema
name|schema
init|=
name|req
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|IndexReader
name|indexReader
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
return|return
operator|new
name|ClassificationUpdateProcessor
argument_list|(
name|classificationParams
argument_list|,
name|next
argument_list|,
name|indexReader
argument_list|,
name|schema
argument_list|)
return|;
block|}
DECL|method|parseFilterQuery
specifier|private
name|Query
name|parseFilterQuery
parameter_list|(
name|String
name|trainingFilterQueryString
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|SyntaxError
block|{
name|LuceneQParser
name|parser
init|=
operator|new
name|LuceneQParser
argument_list|(
name|trainingFilterQueryString
argument_list|,
literal|null
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parse
argument_list|()
return|;
block|}
DECL|method|getClassificationParams
specifier|public
name|ClassificationUpdateProcessorParams
name|getClassificationParams
parameter_list|()
block|{
return|return
name|classificationParams
return|;
block|}
DECL|method|setClassificationParams
specifier|public
name|void
name|setClassificationParams
parameter_list|(
name|ClassificationUpdateProcessorParams
name|classificationParams
parameter_list|)
block|{
name|this
operator|.
name|classificationParams
operator|=
name|classificationParams
expr_stmt|;
block|}
block|}
end_class

end_unit

