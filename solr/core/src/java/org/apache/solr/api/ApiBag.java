begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.api
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SpecProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|JsonSchemaValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|PathTrie
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|SUPPORTED_METHODS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
operator|.
name|formatString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
operator|.
name|ENUM_OF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
operator|.
name|NOT_NULL
import|;
end_import

begin_class
DECL|class|ApiBag
specifier|public
class|class
name|ApiBag
block|{
DECL|field|isCoreSpecific
specifier|private
specifier|final
name|boolean
name|isCoreSpecific
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|apis
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PathTrie
argument_list|<
name|Api
argument_list|>
argument_list|>
name|apis
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ApiBag
specifier|public
name|ApiBag
parameter_list|(
name|boolean
name|isCoreSpecific
parameter_list|)
block|{
name|this
operator|.
name|isCoreSpecific
operator|=
name|isCoreSpecific
expr_stmt|;
block|}
DECL|method|register
specifier|public
specifier|synchronized
name|void
name|register
parameter_list|(
name|Api
name|api
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameSubstitutes
parameter_list|)
block|{
try|try
block|{
name|validateAndRegister
argument_list|(
name|api
argument_list|,
name|nameSubstitutes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to register plugin:"
operator|+
name|api
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"with spec :"
operator|+
name|Utils
operator|.
name|toJSONString
argument_list|(
name|api
operator|.
name|getSpec
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RuntimeException
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|validateAndRegister
specifier|private
name|void
name|validateAndRegister
parameter_list|(
name|Api
name|api
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameSubstitutes
parameter_list|)
block|{
name|ValidatingJsonMap
name|spec
init|=
name|api
operator|.
name|getSpec
argument_list|()
decl_stmt|;
name|Api
name|introspect
init|=
operator|new
name|IntrospectApi
argument_list|(
name|api
argument_list|,
name|isCoreSpecific
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|spec
operator|.
name|getList
argument_list|(
literal|"methods"
argument_list|,
name|ENUM_OF
argument_list|,
name|SUPPORTED_METHODS
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|method
range|:
name|methods
control|)
block|{
name|PathTrie
argument_list|<
name|Api
argument_list|>
name|registry
init|=
name|apis
operator|.
name|get
argument_list|(
name|method
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
name|apis
operator|.
name|put
argument_list|(
name|method
argument_list|,
name|registry
operator|=
operator|new
name|PathTrie
argument_list|<>
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"_introspect"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ValidatingJsonMap
name|url
init|=
name|spec
operator|.
name|getMap
argument_list|(
literal|"url"
argument_list|,
name|NOT_NULL
argument_list|)
decl_stmt|;
name|ValidatingJsonMap
name|params
init|=
name|url
operator|.
name|getMap
argument_list|(
literal|"params"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
name|params
operator|.
name|keySet
argument_list|()
control|)
block|{
name|ValidatingJsonMap
name|param
init|=
name|params
operator|.
name|getMap
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|,
name|NOT_NULL
argument_list|)
decl_stmt|;
name|param
operator|.
name|get
argument_list|(
literal|"type"
argument_list|,
name|ENUM_OF
argument_list|,
name|KNOWN_TYPES
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|url
operator|.
name|getList
argument_list|(
literal|"paths"
argument_list|,
name|NOT_NULL
argument_list|)
decl_stmt|;
name|ValidatingJsonMap
name|parts
init|=
name|url
operator|.
name|getMap
argument_list|(
literal|"parts"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|wildCardNames
init|=
name|getWildCardNames
argument_list|(
name|paths
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|parts
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|wildCardNames
operator|.
name|contains
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
operator|+
name|o
operator|+
literal|" is not a valid part name"
argument_list|)
throw|;
name|ValidatingJsonMap
name|pathMeta
init|=
name|parts
operator|.
name|getMap
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|,
name|NOT_NULL
argument_list|)
decl_stmt|;
name|pathMeta
operator|.
name|get
argument_list|(
literal|"type"
argument_list|,
name|ENUM_OF
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"enum"
argument_list|,
literal|"string"
argument_list|,
literal|"int"
argument_list|,
literal|"number"
argument_list|,
literal|"boolean"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|verifyCommands
argument_list|(
name|api
operator|.
name|getSpec
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|registry
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|nameSubstitutes
argument_list|,
name|api
argument_list|)
expr_stmt|;
name|registerIntrospect
argument_list|(
name|nameSubstitutes
argument_list|,
name|registry
argument_list|,
name|path
argument_list|,
name|introspect
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|registerIntrospect
specifier|public
specifier|static
name|void
name|registerIntrospect
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|nameSubstitutes
parameter_list|,
name|PathTrie
argument_list|<
name|Api
argument_list|>
name|registry
parameter_list|,
name|String
name|path
parameter_list|,
name|Api
name|introspect
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|PathTrie
operator|.
name|getPathSegments
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|registerIntrospect
argument_list|(
name|l
argument_list|,
name|registry
argument_list|,
name|nameSubstitutes
argument_list|,
name|introspect
argument_list|)
expr_stmt|;
name|int
name|lastIdx
init|=
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|lastIdx
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|itemAt
init|=
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|PathTrie
operator|.
name|templateName
argument_list|(
name|itemAt
argument_list|)
operator|==
literal|null
condition|)
break|break;
name|l
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|registry
operator|.
name|lookup
argument_list|(
name|l
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
break|break;
name|registerIntrospect
argument_list|(
name|l
argument_list|,
name|registry
argument_list|,
name|nameSubstitutes
argument_list|,
name|introspect
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|registerIntrospect
specifier|static
name|void
name|registerIntrospect
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|l
parameter_list|,
name|PathTrie
argument_list|<
name|Api
argument_list|>
name|registry
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|substitutes
parameter_list|,
name|Api
name|introspect
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|copy
operator|.
name|add
argument_list|(
literal|"_introspect"
argument_list|)
expr_stmt|;
name|registry
operator|.
name|insert
argument_list|(
name|copy
argument_list|,
name|substitutes
argument_list|,
name|introspect
argument_list|)
expr_stmt|;
block|}
DECL|class|IntrospectApi
specifier|public
specifier|static
class|class
name|IntrospectApi
extends|extends
name|Api
block|{
DECL|field|baseApi
name|Api
name|baseApi
decl_stmt|;
DECL|field|isCoreSpecific
specifier|final
name|boolean
name|isCoreSpecific
decl_stmt|;
DECL|method|IntrospectApi
specifier|public
name|IntrospectApi
parameter_list|(
name|Api
name|base
parameter_list|,
name|boolean
name|isCoreSpecific
parameter_list|)
block|{
name|super
argument_list|(
name|EMPTY_SPEC
argument_list|)
expr_stmt|;
name|this
operator|.
name|baseApi
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|isCoreSpecific
operator|=
name|isCoreSpecific
expr_stmt|;
block|}
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|String
name|cmd
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"command"
argument_list|)
decl_stmt|;
name|ValidatingJsonMap
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|isCoreSpecific
condition|?
name|ValidatingJsonMap
operator|.
name|getDeepCopy
argument_list|(
name|baseApi
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
else|:
name|baseApi
operator|.
name|getSpec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|ValidatingJsonMap
name|specCopy
init|=
name|ValidatingJsonMap
operator|.
name|getDeepCopy
argument_list|(
name|baseApi
operator|.
name|getSpec
argument_list|()
argument_list|,
literal|5
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ValidatingJsonMap
name|commands
init|=
name|specCopy
operator|.
name|getMap
argument_list|(
literal|"commands"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|commands
operator|!=
literal|null
condition|)
block|{
name|ValidatingJsonMap
name|m
init|=
name|commands
operator|.
name|getMap
argument_list|(
name|cmd
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|specCopy
operator|.
name|put
argument_list|(
literal|"commands"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|cmd
argument_list|,
literal|"Command not found!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|specCopy
operator|.
name|put
argument_list|(
literal|"commands"
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|cmd
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
name|specCopy
expr_stmt|;
block|}
if|if
condition|(
name|isCoreSpecific
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pieces
init|=
name|req
operator|.
name|getHttpSolrCall
argument_list|()
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
operator|(
name|V2HttpCall
operator|)
name|req
operator|.
name|getHttpSolrCall
argument_list|()
operator|)
operator|.
name|pieces
decl_stmt|;
if|if
condition|(
name|pieces
operator|!=
literal|null
condition|)
block|{
name|String
name|prefix
init|=
literal|"/"
operator|+
name|pieces
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"/"
operator|+
name|pieces
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|result
operator|.
name|getMap
argument_list|(
literal|"url"
argument_list|,
name|NOT_NULL
argument_list|)
operator|.
name|getList
argument_list|(
literal|"paths"
argument_list|,
name|NOT_NULL
argument_list|)
decl_stmt|;
name|result
operator|.
name|getMap
argument_list|(
literal|"url"
argument_list|,
name|NOT_NULL
argument_list|)
operator|.
name|put
argument_list|(
literal|"paths"
argument_list|,
name|paths
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|s
lambda|->
name|prefix
operator|+
name|s
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|l
init|=
operator|(
name|List
operator|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"spec"
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"spec"
argument_list|,
name|l
operator|=
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getParsedSchema
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|JsonSchemaValidator
argument_list|>
name|getParsedSchema
parameter_list|(
name|ValidatingJsonMap
name|commands
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|JsonSchemaValidator
argument_list|>
name|validators
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|commands
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|cmd
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
try|try
block|{
name|validators
operator|.
name|put
argument_list|(
operator|(
name|String
operator|)
name|cmd
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|JsonSchemaValidator
argument_list|(
operator|(
name|Map
operator|)
name|cmd
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error in api spec"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|validators
return|;
block|}
DECL|method|verifyCommands
specifier|private
name|void
name|verifyCommands
parameter_list|(
name|ValidatingJsonMap
name|spec
parameter_list|)
block|{
name|ValidatingJsonMap
name|commands
init|=
name|spec
operator|.
name|getMap
argument_list|(
literal|"commands"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|commands
operator|==
literal|null
condition|)
return|return;
name|getParsedSchema
argument_list|(
name|commands
argument_list|)
expr_stmt|;
block|}
DECL|method|getWildCardNames
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getWildCardNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|wildCardNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
name|PathTrie
operator|.
name|getPathSegments
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|p
control|)
block|{
name|String
name|wildCard
init|=
name|PathTrie
operator|.
name|templateName
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|wildCard
operator|!=
literal|null
condition|)
name|wildCardNames
operator|.
name|add
argument_list|(
name|wildCard
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|wildCardNames
return|;
block|}
DECL|method|lookup
specifier|public
name|Api
name|lookup
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|httpMethod
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parts
parameter_list|)
block|{
if|if
condition|(
name|httpMethod
operator|==
literal|null
condition|)
block|{
for|for
control|(
name|PathTrie
argument_list|<
name|Api
argument_list|>
name|trie
range|:
name|apis
operator|.
name|values
argument_list|()
control|)
block|{
name|Api
name|api
init|=
name|trie
operator|.
name|lookup
argument_list|(
name|path
argument_list|,
name|parts
argument_list|)
decl_stmt|;
if|if
condition|(
name|api
operator|!=
literal|null
condition|)
return|return
name|api
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
name|PathTrie
argument_list|<
name|Api
argument_list|>
name|registry
init|=
name|apis
operator|.
name|get
argument_list|(
name|httpMethod
argument_list|)
decl_stmt|;
if|if
condition|(
name|registry
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|registry
operator|.
name|lookup
argument_list|(
name|path
argument_list|,
name|parts
argument_list|)
return|;
block|}
block|}
DECL|class|ReqHandlerToApi
specifier|public
specifier|static
class|class
name|ReqHandlerToApi
extends|extends
name|Api
implements|implements
name|PermissionNameProvider
block|{
DECL|field|rh
name|SolrRequestHandler
name|rh
decl_stmt|;
DECL|method|ReqHandlerToApi
specifier|public
name|ReqHandlerToApi
parameter_list|(
name|SolrRequestHandler
name|rh
parameter_list|,
name|SpecProvider
name|spec
parameter_list|)
block|{
name|super
argument_list|(
name|spec
argument_list|)
expr_stmt|;
name|this
operator|.
name|rh
operator|=
name|rh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|rh
operator|.
name|handleRequest
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getPermissionName
specifier|public
name|Name
name|getPermissionName
parameter_list|(
name|AuthorizationContext
name|ctx
parameter_list|)
block|{
if|if
condition|(
name|rh
operator|instanceof
name|PermissionNameProvider
condition|)
block|{
return|return
operator|(
operator|(
name|PermissionNameProvider
operator|)
name|rh
operator|)
operator|.
name|getPermissionName
argument_list|(
name|ctx
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|method|wrapRequestHandlers
specifier|public
specifier|static
name|List
argument_list|<
name|Api
argument_list|>
name|wrapRequestHandlers
parameter_list|(
specifier|final
name|SolrRequestHandler
name|rh
parameter_list|,
name|String
modifier|...
name|specs
parameter_list|)
block|{
name|ImmutableList
operator|.
name|Builder
argument_list|<
name|Api
argument_list|>
name|b
init|=
name|ImmutableList
operator|.
name|builder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|spec
range|:
name|specs
control|)
name|b
operator|.
name|add
argument_list|(
operator|new
name|ReqHandlerToApi
argument_list|(
name|rh
argument_list|,
name|Utils
operator|.
name|getSpec
argument_list|(
name|spec
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|build
argument_list|()
return|;
block|}
DECL|field|EMPTY_SPEC
specifier|public
specifier|static
specifier|final
name|SpecProvider
name|EMPTY_SPEC
init|=
parameter_list|()
lambda|->
name|ValidatingJsonMap
operator|.
name|EMPTY
decl_stmt|;
DECL|field|HANDLER_NAME
specifier|public
specifier|static
specifier|final
name|String
name|HANDLER_NAME
init|=
literal|"handlerName"
decl_stmt|;
DECL|field|KNOWN_TYPES
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|KNOWN_TYPES
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"string"
argument_list|,
literal|"boolean"
argument_list|,
literal|"list"
argument_list|,
literal|"int"
argument_list|,
literal|"double"
argument_list|,
literal|"object"
argument_list|)
decl_stmt|;
DECL|method|getRegistry
specifier|public
name|PathTrie
argument_list|<
name|Api
argument_list|>
name|getRegistry
parameter_list|(
name|String
name|method
parameter_list|)
block|{
return|return
name|apis
operator|.
name|get
argument_list|(
name|method
argument_list|)
return|;
block|}
DECL|method|registerLazy
specifier|public
name|void
name|registerLazy
parameter_list|(
name|PluginBag
operator|.
name|PluginHolder
argument_list|<
name|SolrRequestHandler
argument_list|>
name|holder
parameter_list|,
name|PluginInfo
name|info
parameter_list|)
block|{
name|String
name|specName
init|=
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"spec"
argument_list|)
decl_stmt|;
if|if
condition|(
name|specName
operator|==
literal|null
condition|)
name|specName
operator|=
literal|"emptySpec"
expr_stmt|;
name|register
argument_list|(
operator|new
name|LazyLoadedApi
argument_list|(
name|Utils
operator|.
name|getSpec
argument_list|(
name|specName
argument_list|)
argument_list|,
name|holder
argument_list|)
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|HANDLER_NAME
argument_list|,
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
name|NAME
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|constructSpec
specifier|public
specifier|static
name|SpecProvider
name|constructSpec
parameter_list|(
name|PluginInfo
name|info
parameter_list|)
block|{
name|Object
name|specObj
init|=
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|info
operator|.
name|attributes
operator|.
name|get
argument_list|(
literal|"spec"
argument_list|)
decl_stmt|;
if|if
condition|(
name|specObj
operator|==
literal|null
condition|)
name|specObj
operator|=
literal|"emptySpec"
expr_stmt|;
if|if
condition|(
name|specObj
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|specObj
decl_stmt|;
return|return
parameter_list|()
lambda|->
name|ValidatingJsonMap
operator|.
name|getDeepCopy
argument_list|(
name|map
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Utils
operator|.
name|getSpec
argument_list|(
operator|(
name|String
operator|)
name|specObj
argument_list|)
return|;
block|}
block|}
DECL|method|getCommandOperations
specifier|public
specifier|static
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|getCommandOperations
parameter_list|(
name|ContentStream
name|stream
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|JsonSchemaValidator
argument_list|>
name|validators
parameter_list|,
name|boolean
name|validate
parameter_list|)
block|{
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|parsedCommands
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedCommands
operator|=
name|CommandOperation
operator|.
name|readCommands
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|stream
argument_list|)
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to parse commands"
argument_list|)
throw|;
block|}
if|if
condition|(
name|validators
operator|==
literal|null
operator|||
operator|!
name|validate
condition|)
block|{
comment|// no validation possible because we do not have a spec
return|return
name|parsedCommands
return|;
block|}
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|commandsCopy
init|=
name|CommandOperation
operator|.
name|clone
argument_list|(
name|parsedCommands
argument_list|)
decl_stmt|;
for|for
control|(
name|CommandOperation
name|cmd
range|:
name|commandsCopy
control|)
block|{
name|JsonSchemaValidator
name|validator
init|=
name|validators
operator|.
name|get
argument_list|(
name|cmd
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|validator
operator|==
literal|null
condition|)
block|{
name|cmd
operator|.
name|addError
argument_list|(
name|formatString
argument_list|(
literal|"Unknown operation ''{0}'' available ops are ''{1}''"
argument_list|,
name|cmd
operator|.
name|name
argument_list|,
name|validators
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|validator
operator|.
name|validateJson
argument_list|(
name|cmd
operator|.
name|getCommandData
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|errs
operator|!=
literal|null
condition|)
for|for
control|(
name|String
name|err
range|:
name|errs
control|)
name|cmd
operator|.
name|addError
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Map
argument_list|>
name|errs
init|=
name|CommandOperation
operator|.
name|captureErrors
argument_list|(
name|commandsCopy
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ExceptionWithErrObject
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Error in command payload"
argument_list|,
name|errs
argument_list|)
throw|;
block|}
return|return
name|commandsCopy
return|;
block|}
DECL|class|ExceptionWithErrObject
specifier|public
specifier|static
class|class
name|ExceptionWithErrObject
extends|extends
name|SolrException
block|{
DECL|field|errs
specifier|private
name|List
argument_list|<
name|Map
argument_list|>
name|errs
decl_stmt|;
DECL|method|ExceptionWithErrObject
specifier|public
name|ExceptionWithErrObject
parameter_list|(
name|ErrorCode
name|code
parameter_list|,
name|String
name|msg
parameter_list|,
name|List
argument_list|<
name|Map
argument_list|>
name|errs
parameter_list|)
block|{
name|super
argument_list|(
name|code
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|errs
operator|=
name|errs
expr_stmt|;
block|}
DECL|method|getErrs
specifier|public
name|List
argument_list|<
name|Map
argument_list|>
name|getErrs
parameter_list|()
block|{
return|return
name|errs
return|;
block|}
block|}
DECL|class|LazyLoadedApi
specifier|public
specifier|static
class|class
name|LazyLoadedApi
extends|extends
name|Api
block|{
DECL|field|holder
specifier|private
specifier|final
name|PluginBag
operator|.
name|PluginHolder
argument_list|<
name|SolrRequestHandler
argument_list|>
name|holder
decl_stmt|;
DECL|field|delegate
specifier|private
name|Api
name|delegate
decl_stmt|;
DECL|method|LazyLoadedApi
specifier|protected
name|LazyLoadedApi
parameter_list|(
name|SpecProvider
name|specProvider
parameter_list|,
name|PluginBag
operator|.
name|PluginHolder
argument_list|<
name|SolrRequestHandler
argument_list|>
name|lazyPluginHolder
parameter_list|)
block|{
name|super
argument_list|(
name|specProvider
argument_list|)
expr_stmt|;
name|this
operator|.
name|holder
operator|=
name|lazyPluginHolder
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
if|if
condition|(
operator|!
name|holder
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
name|delegate
operator|=
operator|new
name|ReqHandlerToApi
argument_list|(
name|holder
operator|.
name|get
argument_list|()
argument_list|,
name|ApiBag
operator|.
name|EMPTY_SPEC
argument_list|)
expr_stmt|;
block|}
name|delegate
operator|.
name|call
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

