begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core.snapshots
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|PosixParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|CollectionSnapshotMetaData
operator|.
name|CoreSnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class provides utility functions required for Solr snapshots functionality.  */
end_comment

begin_class
DECL|class|SolrSnapshotsTool
specifier|public
class|class
name|SolrSnapshotsTool
implements|implements
name|Closeable
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|dateFormat
specifier|private
specifier|static
specifier|final
name|DateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"EEE, d MMM yyyy HH:mm:ss z"
argument_list|,
name|Locale
operator|.
name|getDefault
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|CREATE
specifier|private
specifier|static
specifier|final
name|String
name|CREATE
init|=
literal|"create"
decl_stmt|;
DECL|field|DELETE
specifier|private
specifier|static
specifier|final
name|String
name|DELETE
init|=
literal|"delete"
decl_stmt|;
DECL|field|LIST
specifier|private
specifier|static
specifier|final
name|String
name|LIST
init|=
literal|"list"
decl_stmt|;
DECL|field|DESCRIBE
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIBE
init|=
literal|"describe"
decl_stmt|;
DECL|field|PREPARE_FOR_EXPORT
specifier|private
specifier|static
specifier|final
name|String
name|PREPARE_FOR_EXPORT
init|=
literal|"prepare-snapshot-export"
decl_stmt|;
DECL|field|EXPORT_SNAPSHOT
specifier|private
specifier|static
specifier|final
name|String
name|EXPORT_SNAPSHOT
init|=
literal|"export"
decl_stmt|;
DECL|field|HELP
specifier|private
specifier|static
specifier|final
name|String
name|HELP
init|=
literal|"help"
decl_stmt|;
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"c"
decl_stmt|;
DECL|field|TEMP_DIR
specifier|private
specifier|static
specifier|final
name|String
name|TEMP_DIR
init|=
literal|"t"
decl_stmt|;
DECL|field|DEST_DIR
specifier|private
specifier|static
specifier|final
name|String
name|DEST_DIR
init|=
literal|"d"
decl_stmt|;
DECL|field|SOLR_ZK_ENSEMBLE
specifier|private
specifier|static
specifier|final
name|String
name|SOLR_ZK_ENSEMBLE
init|=
literal|"z"
decl_stmt|;
DECL|field|HDFS_PATH_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|HDFS_PATH_PREFIX
init|=
literal|"p"
decl_stmt|;
DECL|field|BACKUP_REPO_NAME
specifier|private
specifier|static
specifier|final
name|String
name|BACKUP_REPO_NAME
init|=
literal|"r"
decl_stmt|;
DECL|field|ASYNC_REQ_ID
specifier|private
specifier|static
specifier|final
name|String
name|ASYNC_REQ_ID
init|=
literal|"i"
decl_stmt|;
DECL|field|OPTION_HELP_ORDER
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|OPTION_HELP_ORDER
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|CREATE
argument_list|,
name|DELETE
argument_list|,
name|LIST
argument_list|,
name|DESCRIBE
argument_list|,
name|PREPARE_FOR_EXPORT
argument_list|,
name|EXPORT_SNAPSHOT
argument_list|,
name|HELP
argument_list|,
name|SOLR_ZK_ENSEMBLE
argument_list|,
name|COLLECTION
argument_list|,
name|DEST_DIR
argument_list|,
name|BACKUP_REPO_NAME
argument_list|,
name|ASYNC_REQ_ID
argument_list|,
name|TEMP_DIR
argument_list|,
name|HDFS_PATH_PREFIX
argument_list|)
decl_stmt|;
DECL|field|solrClient
specifier|private
specifier|final
name|CloudSolrClient
name|solrClient
decl_stmt|;
DECL|method|SolrSnapshotsTool
specifier|public
name|SolrSnapshotsTool
parameter_list|(
name|String
name|solrZkEnsemble
parameter_list|)
block|{
name|solrClient
operator|=
operator|(
operator|new
name|CloudSolrClient
operator|.
name|Builder
argument_list|()
operator|)
operator|.
name|withZkHost
argument_list|(
name|solrZkEnsemble
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|solrClient
operator|!=
literal|null
condition|)
block|{
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|createSnapshot
specifier|public
name|void
name|createSnapshot
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|CollectionAdminRequest
operator|.
name|CreateSnapshot
name|createSnap
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|createSnap
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
argument_list|,
literal|"The CREATESNAPSHOT request failed. The status code is "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully created snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to create a snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to create a snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
operator|+
literal|" due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|deleteSnapshot
specifier|public
name|void
name|deleteSnapshot
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
name|CollectionAdminRequest
operator|.
name|DeleteSnapshot
name|deleteSnap
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|deleteSnap
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
argument_list|,
literal|"The DELETESNAPSHOT request failed. The status code is "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully deleted snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to delete a snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to delete a snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
operator|+
literal|" due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|listSnapshots
specifier|public
name|void
name|listSnapshots
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
name|CollectionAdminRequest
operator|.
name|ListSnapshots
name|listSnaps
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ListSnapshots
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|resp
decl_stmt|;
try|try
block|{
name|resp
operator|=
name|listSnaps
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
argument_list|,
literal|"The LISTSNAPSHOTS request failed. The status code is "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|apiResult
init|=
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|apiResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|apiResult
operator|.
name|getName
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to list snapshots for collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to list snapshots for collection "
operator|+
name|collectionName
operator|+
literal|" due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|describeSnapshot
specifier|public
name|void
name|describeSnapshot
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|)
block|{
try|try
block|{
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|snaps
init|=
name|listCollectionSnapshots
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|CollectionSnapshotMetaData
name|m
range|:
name|snaps
control|)
block|{
if|if
condition|(
name|snapshotName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Name: "
operator|+
name|m
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Status: "
operator|+
name|m
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time of creation: "
operator|+
name|dateFormat
operator|.
name|format
argument_list|(
name|m
operator|.
name|getCreationDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total number of cores with snapshot: "
operator|+
name|m
operator|.
name|getReplicaSnapshots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"-----------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|CoreSnapshotMetaData
name|n
range|:
name|m
operator|.
name|getReplicaSnapshots
argument_list|()
control|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Core [name="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|n
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", leader="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|n
operator|.
name|isLeader
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", generation="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|n
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|", indexDirPath="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|n
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"]\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|builder
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to fetch snapshot details"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to fetch snapshot details due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getIndexFilesPathForSnapshot
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getIndexFilesPathForSnapshot
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|pathPrefix
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|snaps
init|=
name|listCollectionSnapshots
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|meta
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
for|for
control|(
name|CollectionSnapshotMetaData
name|m
range|:
name|snaps
control|)
block|{
if|if
condition|(
name|snapshotName
operator|.
name|equals
argument_list|(
name|m
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|meta
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|meta
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The snapshot named "
operator|+
name|snapshotName
operator|+
literal|" is not found for collection "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|DocCollection
name|collectionState
init|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|s
range|:
name|collectionState
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CoreSnapshotMetaData
argument_list|>
name|replicaSnaps
init|=
name|meta
operator|.
name|get
argument_list|()
operator|.
name|getReplicaSnapshotsForShard
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Prepare a list of *existing* replicas (since one or more replicas could have been deleted after the snapshot creation).
name|List
argument_list|<
name|CoreSnapshotMetaData
argument_list|>
name|availableReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|CoreSnapshotMetaData
name|m
range|:
name|replicaSnaps
control|)
block|{
if|if
condition|(
name|isReplicaAvailable
argument_list|(
name|s
argument_list|,
name|m
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
name|availableReplicas
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|availableReplicas
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"The snapshot named "
operator|+
name|snapshotName
operator|+
literal|" not found for shard "
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|" of collection "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
comment|// Prefer a leader replica (at the time when the snapshot was created).
name|CoreSnapshotMetaData
name|coreSnap
init|=
name|availableReplicas
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|CoreSnapshotMetaData
name|m
range|:
name|availableReplicas
control|)
block|{
if|if
condition|(
name|m
operator|.
name|isLeader
argument_list|()
condition|)
block|{
name|coreSnap
operator|=
name|m
expr_stmt|;
block|}
block|}
name|String
name|indexDirPath
init|=
name|coreSnap
operator|.
name|getIndexDirPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathPrefix
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// If the path prefix is specified, rebuild the path to the index directory.
name|Path
name|t
init|=
operator|new
name|Path
argument_list|(
name|coreSnap
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
name|indexDirPath
operator|=
operator|(
operator|new
name|Path
argument_list|(
name|pathPrefix
operator|.
name|get
argument_list|()
argument_list|,
name|t
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|coreSnap
operator|.
name|getFiles
argument_list|()
control|)
block|{
name|Path
name|p
init|=
operator|new
name|Path
argument_list|(
name|indexDirPath
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|put
argument_list|(
name|s
operator|.
name|getName
argument_list|()
argument_list|,
name|paths
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|buildCopyListings
specifier|public
name|void
name|buildCopyListings
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|String
name|localFsPath
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|pathPrefix
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|paths
init|=
name|getIndexFilesPathForSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|,
name|pathPrefix
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|paths
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|StringBuilder
name|filesBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|filePath
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|filesBuilder
operator|.
name|append
argument_list|(
name|filePath
argument_list|)
expr_stmt|;
name|filesBuilder
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|String
name|files
init|=
name|filesBuilder
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
init|(
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
operator|new
name|File
argument_list|(
name|localFsPath
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|w
operator|.
name|write
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|backupCollectionMetaData
specifier|public
name|void
name|backupCollectionMetaData
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|String
name|backupLoc
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
comment|// Backup the collection meta-data
name|CollectionAdminRequest
operator|.
name|Backup
name|backup
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Backup
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|backup
operator|.
name|setIndexBackupStrategy
argument_list|(
name|CollectionAdminParams
operator|.
name|NO_INDEX_BACKUP_STRATEGY
argument_list|)
expr_stmt|;
name|backup
operator|.
name|setLocation
argument_list|(
name|backupLoc
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|resp
init|=
name|backup
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
argument_list|,
literal|"The request failed. The status code is "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|prepareForExport
specifier|public
name|void
name|prepareForExport
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|String
name|localFsPath
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|pathPrefix
parameter_list|,
name|String
name|destPath
parameter_list|)
block|{
try|try
block|{
name|buildCopyListings
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|,
name|localFsPath
argument_list|,
name|pathPrefix
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully prepared copylisting for the snapshot export."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to prepare a copylisting for snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to prepare a copylisting for snapshot with name "
operator|+
name|snapshotName
operator|+
literal|" for collection "
operator|+
name|collectionName
operator|+
literal|" due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|backupCollectionMetaData
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully backed up collection meta-data"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to backup collection meta-data for collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to backup collection meta-data for collection "
operator|+
name|collectionName
operator|+
literal|" due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|exportSnapshot
specifier|public
name|void
name|exportSnapshot
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|snapshotName
parameter_list|,
name|String
name|destPath
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|backupRepo
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|asyncReqId
parameter_list|)
block|{
try|try
block|{
name|CollectionAdminRequest
operator|.
name|Backup
name|backup
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Backup
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
decl_stmt|;
name|backup
operator|.
name|setCommitName
argument_list|(
name|snapshotName
argument_list|)
expr_stmt|;
name|backup
operator|.
name|setIndexBackupStrategy
argument_list|(
name|CollectionAdminParams
operator|.
name|COPY_FILES_STRATEGY
argument_list|)
expr_stmt|;
name|backup
operator|.
name|setLocation
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|backupRepo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|backup
operator|.
name|setRepositoryName
argument_list|(
name|backupRepo
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|asyncReqId
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|backup
operator|.
name|setAsyncId
argument_list|(
name|asyncReqId
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CollectionAdminResponse
name|resp
init|=
name|backup
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
argument_list|,
literal|"The request failed. The status code is "
operator|+
name|resp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to backup collection meta-data for collection "
operator|+
name|collectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Failed to backup collection meta-data for collection "
operator|+
name|collectionName
operator|+
literal|" due to following error : "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|CommandLineParser
name|parser
init|=
operator|new
name|PosixParser
argument_list|()
decl_stmt|;
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|CREATE
argument_list|,
literal|true
argument_list|,
literal|"This command will create a snapshot with the specified name"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|DELETE
argument_list|,
literal|true
argument_list|,
literal|"This command will delete a snapshot with the specified name"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|LIST
argument_list|,
literal|false
argument_list|,
literal|"This command will list all the named snapshots for the specified collection."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|DESCRIBE
argument_list|,
literal|true
argument_list|,
literal|"This command will print details for a named snapshot for the specified collection."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|PREPARE_FOR_EXPORT
argument_list|,
literal|true
argument_list|,
literal|"This command will prepare copylistings for the specified snapshot."
operator|+
literal|" This command should only be used only if Solr is deployed with Hadoop and collection index files are stored on a shared"
operator|+
literal|" file-system e.g. HDFS"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|EXPORT_SNAPSHOT
argument_list|,
literal|true
argument_list|,
literal|"This command will create a backup for the specified snapshot."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
literal|null
argument_list|,
name|HELP
argument_list|,
literal|false
argument_list|,
literal|"This command will print the help message for the snapshots related commands."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|TEMP_DIR
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the path of a temporary directory on local filesystem"
operator|+
literal|" during prepare-snapshot-export command."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|DEST_DIR
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the path on shared file-system (e.g. HDFS) where the snapshot related"
operator|+
literal|" information should be stored."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|COLLECTION
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the name of the collection to be used during snapshot operation"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|SOLR_ZK_ENSEMBLE
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the Solr Zookeeper ensemble address"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|HDFS_PATH_PREFIX
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the HDFS URI prefix to be used"
operator|+
literal|" during snapshot export preparation. This is applicable only if the Solr collection index files are stored on HDFS."
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|BACKUP_REPO_NAME
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the name of the backup repository to be used"
operator|+
literal|" during snapshot export preparation"
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|ASYNC_REQ_ID
argument_list|,
literal|true
argument_list|,
literal|"This parameter specifies the async request identifier to be used"
operator|+
literal|" during snapshot export preparation"
argument_list|)
expr_stmt|;
name|CommandLine
name|cmd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|CREATE
argument_list|)
operator|||
name|cmd
operator|.
name|hasOption
argument_list|(
name|DELETE
argument_list|)
operator|||
name|cmd
operator|.
name|hasOption
argument_list|(
name|LIST
argument_list|)
operator|||
name|cmd
operator|.
name|hasOption
argument_list|(
name|DESCRIBE
argument_list|)
operator|||
name|cmd
operator|.
name|hasOption
argument_list|(
name|PREPARE_FOR_EXPORT
argument_list|)
operator|||
name|cmd
operator|.
name|hasOption
argument_list|(
name|EXPORT_SNAPSHOT
argument_list|)
condition|)
block|{
try|try
init|(
name|SolrSnapshotsTool
name|tool
init|=
operator|new
name|SolrSnapshotsTool
argument_list|(
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|SOLR_ZK_ENSEMBLE
argument_list|)
argument_list|)
init|)
block|{
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|CREATE
argument_list|)
condition|)
block|{
name|String
name|snapshotName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|CREATE
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|tool
operator|.
name|createSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DELETE
argument_list|)
condition|)
block|{
name|String
name|snapshotName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|DELETE
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|tool
operator|.
name|deleteSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|LIST
argument_list|)
condition|)
block|{
name|String
name|collectionName
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|tool
operator|.
name|listSnapshots
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|DESCRIBE
argument_list|)
condition|)
block|{
name|String
name|snapshotName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|DESCRIBE
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|tool
operator|.
name|describeSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|PREPARE_FOR_EXPORT
argument_list|)
condition|)
block|{
name|String
name|snapshotName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|PREPARE_FOR_EXPORT
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|String
name|localFsDir
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|TEMP_DIR
argument_list|)
decl_stmt|;
name|String
name|hdfsOpDir
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|DEST_DIR
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|pathPrefix
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|HDFS_PATH_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathPrefix
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
operator|new
name|URI
argument_list|(
name|pathPrefix
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"The specified File system path prefix "
operator|+
name|pathPrefix
operator|.
name|get
argument_list|()
operator|+
literal|" is invalid. The error is "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|tool
operator|.
name|prepareForExport
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|,
name|localFsDir
argument_list|,
name|pathPrefix
argument_list|,
name|hdfsOpDir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|EXPORT_SNAPSHOT
argument_list|)
condition|)
block|{
name|String
name|snapshotName
init|=
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|EXPORT_SNAPSHOT
argument_list|)
decl_stmt|;
name|String
name|collectionName
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|String
name|destDir
init|=
name|requiredArg
argument_list|(
name|options
argument_list|,
name|cmd
argument_list|,
name|DEST_DIR
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|backupRepo
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|BACKUP_REPO_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|asyncReqId
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|ASYNC_REQ_ID
argument_list|)
argument_list|)
decl_stmt|;
name|tool
operator|.
name|exportSnapshot
argument_list|(
name|collectionName
argument_list|,
name|snapshotName
argument_list|,
name|destDir
argument_list|,
name|backupRepo
argument_list|,
name|asyncReqId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|cmd
operator|.
name|hasOption
argument_list|(
name|HELP
argument_list|)
condition|)
block|{
name|printHelp
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Unknown command specified."
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|requiredArg
specifier|private
specifier|static
name|String
name|requiredArg
parameter_list|(
name|Options
name|options
parameter_list|,
name|CommandLine
name|cmd
parameter_list|,
name|String
name|optVal
parameter_list|)
block|{
if|if
condition|(
operator|!
name|cmd
operator|.
name|hasOption
argument_list|(
name|optVal
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Please specify the value for option "
operator|+
name|optVal
argument_list|)
expr_stmt|;
name|printHelp
argument_list|(
name|options
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|cmd
operator|.
name|getOptionValue
argument_list|(
name|optVal
argument_list|)
return|;
block|}
DECL|method|isReplicaAvailable
specifier|private
specifier|static
name|boolean
name|isReplicaAvailable
parameter_list|(
name|Slice
name|s
parameter_list|,
name|String
name|coreName
parameter_list|)
block|{
for|for
control|(
name|Replica
name|r
range|:
name|s
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|listCollectionSnapshots
specifier|private
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|listCollectionSnapshots
parameter_list|(
name|String
name|collectionName
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|CollectionAdminRequest
operator|.
name|ListSnapshots
name|listSnapshots
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ListSnapshots
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|resp
init|=
name|listSnapshots
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|resp
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|NamedList
name|apiResult
init|=
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|apiResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|CollectionSnapshotMetaData
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|apiResult
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|printHelp
specifier|private
specifier|static
name|void
name|printHelp
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|StringBuilder
name|helpFooter
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|helpFooter
operator|.
name|append
argument_list|(
literal|"Examples: \n"
argument_list|)
expr_stmt|;
name|helpFooter
operator|.
name|append
argument_list|(
literal|"snapshotscli.sh --create snapshot-1 -c books -z localhost:2181 \n"
argument_list|)
expr_stmt|;
name|helpFooter
operator|.
name|append
argument_list|(
literal|"snapshotscli.sh --list -c books -z localhost:2181 \n"
argument_list|)
expr_stmt|;
name|helpFooter
operator|.
name|append
argument_list|(
literal|"snapshotscli.sh --describe snapshot-1 -c books -z localhost:2181 \n"
argument_list|)
expr_stmt|;
name|helpFooter
operator|.
name|append
argument_list|(
literal|"snapshotscli.sh --export snapshot-1 -c books -z localhost:2181 -b repo -l backupPath -i req_0 \n"
argument_list|)
expr_stmt|;
name|helpFooter
operator|.
name|append
argument_list|(
literal|"snapshotscli.sh --delete snapshot-1 -c books -z localhost:2181 \n"
argument_list|)
expr_stmt|;
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|setOptionComparator
argument_list|(
operator|new
name|OptionComarator
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"SolrSnapshotsTool"
argument_list|,
literal|null
argument_list|,
name|options
argument_list|,
name|helpFooter
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|class|OptionComarator
specifier|private
specifier|static
class|class
name|OptionComarator
parameter_list|<
name|T
extends|extends
name|Option
parameter_list|>
implements|implements
name|Comparator
argument_list|<
name|T
argument_list|>
block|{
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|T
name|o1
parameter_list|,
name|T
name|o2
parameter_list|)
block|{
name|String
name|s1
init|=
name|o1
operator|.
name|hasLongOpt
argument_list|()
condition|?
name|o1
operator|.
name|getLongOpt
argument_list|()
else|:
name|o1
operator|.
name|getOpt
argument_list|()
decl_stmt|;
name|String
name|s2
init|=
name|o2
operator|.
name|hasLongOpt
argument_list|()
condition|?
name|o2
operator|.
name|getLongOpt
argument_list|()
else|:
name|o2
operator|.
name|getOpt
argument_list|()
decl_stmt|;
return|return
name|OPTION_HELP_ORDER
operator|.
name|indexOf
argument_list|(
name|s1
argument_list|)
operator|-
name|OPTION_HELP_ORDER
operator|.
name|indexOf
argument_list|(
name|s2
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

