begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TransientSolrCoreCacheDefault
specifier|public
class|class
name|TransientSolrCoreCacheDefault
extends|extends
name|TransientSolrCoreCache
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cacheSize
specifier|private
name|int
name|cacheSize
init|=
name|NodeConfig
operator|.
name|NodeConfigBuilder
operator|.
name|DEFAULT_TRANSIENT_CACHE_SIZE
decl_stmt|;
DECL|field|observer
specifier|protected
name|Observer
name|observer
decl_stmt|;
DECL|field|coreContainer
specifier|protected
name|CoreContainer
name|coreContainer
decl_stmt|;
DECL|field|transientDescriptors
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CoreDescriptor
argument_list|>
name|transientDescriptors
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//WARNING! The _only_ place you put anything into the list of transient cores is with the putTransientCore method!
DECL|field|transientCores
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|transientCores
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// For "lazily loaded" cores
comment|/**    * @param container The enclosing CoreContainer. It allows us to access everything we need.    */
DECL|method|TransientSolrCoreCacheDefault
specifier|public
name|TransientSolrCoreCacheDefault
parameter_list|(
specifier|final
name|CoreContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|container
expr_stmt|;
name|this
operator|.
name|observer
operator|=
name|coreContainer
operator|.
name|solrCores
expr_stmt|;
name|NodeConfig
name|cfg
init|=
name|container
operator|.
name|getNodeConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getTransientCachePluginInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Still handle just having transientCacheSize defined in the body of solr.xml  not in a transient handler clause.
comment|// deprecate this for 7.0?
name|this
operator|.
name|cacheSize
operator|=
name|cfg
operator|.
name|getTransientCacheSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|NamedList
name|args
init|=
name|cfg
operator|.
name|getTransientCachePluginInfo
argument_list|()
operator|.
name|initArgs
decl_stmt|;
name|Object
name|obj
init|=
name|args
operator|.
name|get
argument_list|(
literal|"transientCacheSize"
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cacheSize
operator|=
operator|(
name|int
operator|)
name|obj
expr_stmt|;
block|}
block|}
name|doInit
argument_list|()
expr_stmt|;
block|}
comment|// This just moves the
DECL|method|doInit
specifier|private
name|void
name|doInit
parameter_list|()
block|{
name|NodeConfig
name|cfg
init|=
name|coreContainer
operator|.
name|getNodeConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|cfg
operator|.
name|getTransientCachePluginInfo
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// Still handle just having transientCacheSize defined in the body of solr.xml not in a transient handler clause.
name|this
operator|.
name|cacheSize
operator|=
name|cfg
operator|.
name|getTransientCacheSize
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|NamedList
name|args
init|=
name|cfg
operator|.
name|getTransientCachePluginInfo
argument_list|()
operator|.
name|initArgs
decl_stmt|;
name|Object
name|obj
init|=
name|args
operator|.
name|get
argument_list|(
literal|"transientCacheSize"
argument_list|)
decl_stmt|;
if|if
condition|(
name|obj
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|cacheSize
operator|=
operator|(
name|int
operator|)
name|obj
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Allocating transient cache for {} transient cores"
argument_list|,
name|cacheSize
argument_list|)
expr_stmt|;
name|addObserver
argument_list|(
name|this
operator|.
name|observer
argument_list|)
expr_stmt|;
comment|// it's possible for cache
if|if
condition|(
name|cacheSize
operator|<
literal|0
condition|)
block|{
comment|// Trap old flag
name|cacheSize
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
block|}
comment|// Now don't allow ridiculous allocations here, if the size is> 1,000, we'll just deal with
comment|// adding cores as they're opened. This blows up with the marker value of -1.
name|transientCores
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|cacheSize
argument_list|,
literal|1000
argument_list|)
argument_list|,
literal|0.75f
argument_list|,
literal|true
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|eldest
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
name|cacheSize
condition|)
block|{
name|SolrCore
name|coreToClose
init|=
name|eldest
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|setChanged
argument_list|()
expr_stmt|;
name|notifyObservers
argument_list|(
name|coreToClose
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Closing transient core [{}]"
argument_list|,
name|coreToClose
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|prepareForShutdown
specifier|public
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|prepareForShutdown
parameter_list|()
block|{
comment|// Returna copy of the values
name|List
argument_list|<
name|SolrCore
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|(
name|transientCores
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|transientCores
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
annotation|@
name|Override
DECL|method|getContainer
specifier|public
name|CoreContainer
name|getContainer
parameter_list|()
block|{
return|return
name|this
operator|.
name|coreContainer
return|;
block|}
annotation|@
name|Override
DECL|method|addCore
specifier|public
name|SolrCore
name|addCore
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrCore
name|core
parameter_list|)
block|{
return|return
name|transientCores
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|core
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllCoreNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAllCoreNames
parameter_list|()
block|{
return|return
name|transientDescriptors
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLoadedCoreNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getLoadedCoreNames
parameter_list|()
block|{
return|return
name|transientCores
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|// Remove a core from the internal structures, presumably it
comment|// being closed. If the core is re-opened, it will be readded by CoreContainer.
annotation|@
name|Override
DECL|method|removeCore
specifier|public
name|SolrCore
name|removeCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|transientCores
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// Get the core associated with the name. Return null if you don't want this core to be used.
annotation|@
name|Override
DECL|method|getCore
specifier|public
name|SolrCore
name|getCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|transientCores
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsCore
specifier|public
name|boolean
name|containsCore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|transientCores
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|// These methods allow the implementation to maintain control over the core descriptors.
comment|// This method will only be called during core discovery at startup.
annotation|@
name|Override
DECL|method|addTransientDescriptor
specifier|public
name|void
name|addTransientDescriptor
parameter_list|(
name|String
name|rawName
parameter_list|,
name|CoreDescriptor
name|cd
parameter_list|)
block|{
name|transientDescriptors
operator|.
name|put
argument_list|(
name|rawName
argument_list|,
name|cd
argument_list|)
expr_stmt|;
block|}
comment|// This method is used when opening cores and the like. If you want to change a core's descriptor, override this
comment|// method and return the current core descriptor.
annotation|@
name|Override
DECL|method|getTransientDescriptor
specifier|public
name|CoreDescriptor
name|getTransientDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|transientDescriptors
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|removeTransientDescriptor
specifier|public
name|CoreDescriptor
name|removeTransientDescriptor
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|transientDescriptors
operator|.
name|remove
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNamesForCore
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getNamesForCore
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|SolrCore
argument_list|>
name|entry
range|:
name|transientCores
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|core
operator|==
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Must be called in order to free resources!    */
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|deleteObserver
argument_list|(
name|this
operator|.
name|observer
argument_list|)
expr_stmt|;
block|}
comment|// For custom implementations to communicate arbitrary information as necessary.
annotation|@
name|Override
DECL|method|getStatus
specifier|public
name|int
name|getStatus
parameter_list|(
name|String
name|coreName
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
comment|//no_op for default handler.
annotation|@
name|Override
DECL|method|setStatus
specifier|public
name|void
name|setStatus
parameter_list|(
name|String
name|coreName
parameter_list|,
name|int
name|status
parameter_list|)
block|{}
comment|//no_op for default handler.
block|}
end_class

end_unit

