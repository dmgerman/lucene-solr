begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|PluginInfoInitialized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * An interface that allows custom transient caches to be maintained with different implementations  */
end_comment

begin_class
DECL|class|TransientSolrCoreCacheFactory
specifier|public
specifier|abstract
class|class
name|TransientSolrCoreCacheFactory
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|coreContainer
specifier|private
name|CoreContainer
name|coreContainer
init|=
literal|null
decl_stmt|;
DECL|method|getTransientSolrCoreCache
specifier|public
specifier|abstract
name|TransientSolrCoreCache
name|getTransientSolrCoreCache
parameter_list|()
function_decl|;
comment|/**    * Create a new TransientSolrCoreCacheFactory instance    *    * @param loader a SolrResourceLoader used to find the TransientSolrCacheFactory classes    * @param coreContainer CoreContainer that encloses all the Solr cores.                  * @return a new, initialized TransientSolrCoreCache instance    */
DECL|method|newInstance
specifier|public
specifier|static
name|TransientSolrCoreCacheFactory
name|newInstance
parameter_list|(
name|SolrResourceLoader
name|loader
parameter_list|,
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|PluginInfo
name|info
init|=
name|coreContainer
operator|.
name|getConfig
argument_list|()
operator|.
name|getTransientCachePluginInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
comment|// definition not in our solr.xml file, use default
name|info
operator|=
name|DEFAULT_TRANSIENT_SOLR_CACHE_INFO
expr_stmt|;
block|}
try|try
block|{
comment|// According to the docs, this returns a TransientSolrCoreCacheFactory with the default c'tor
name|TransientSolrCoreCacheFactory
name|tccf
init|=
name|loader
operator|.
name|findClass
argument_list|(
name|info
operator|.
name|className
argument_list|,
name|TransientSolrCoreCacheFactory
operator|.
name|class
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
comment|// OK, now we call it's init method.
if|if
condition|(
name|PluginInfoInitialized
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|tccf
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
name|PluginInfoInitialized
operator|.
name|class
operator|.
name|cast
argument_list|(
name|tccf
argument_list|)
operator|.
name|init
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|tccf
operator|.
name|setCoreContainer
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
return|return
name|tccf
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// Many things could cuse this, bad solrconfig, mis-typed class name, whatever. However, this should not
comment|// keep the enclosing coreContainer from instantiating, so log an error and continue.
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Error instantiating TransientSolrCoreCacheFactory class [%s]: %s"
argument_list|,
name|info
operator|.
name|className
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
DECL|field|DEFAULT_TRANSIENT_SOLR_CACHE_INFO
specifier|public
specifier|static
specifier|final
name|PluginInfo
name|DEFAULT_TRANSIENT_SOLR_CACHE_INFO
init|=
operator|new
name|PluginInfo
argument_list|(
literal|"transientSolrCoreCacheFactory"
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"class"
argument_list|,
name|TransientSolrCoreCacheFactoryDefault
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"name"
argument_list|,
name|TransientSolrCoreCacheFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|PluginInfo
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|// Need this because the plugin framework doesn't require a PluginINfo in the init method, don't see a way to
comment|// pass additional parameters and we need this when we create the transient core cache, it's _really_ important.
DECL|method|setCoreContainer
specifier|public
name|void
name|setCoreContainer
parameter_list|(
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|this
operator|.
name|coreContainer
operator|=
name|coreContainer
expr_stmt|;
block|}
DECL|method|getCoreContainer
specifier|public
name|CoreContainer
name|getCoreContainer
parameter_list|()
block|{
return|return
name|coreContainer
return|;
block|}
block|}
end_class

end_unit

