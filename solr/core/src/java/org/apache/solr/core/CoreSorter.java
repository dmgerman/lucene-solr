begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  * This is a utility class that sorts cores in such a way as to minimize other cores  * waiting for replicas in the current node. This helps in avoiding leaderVote timeouts  * happening in other nodes of the cluster  *  */
end_comment

begin_class
DECL|class|CoreSorter
specifier|public
class|class
name|CoreSorter
block|{
DECL|field|shardsVsReplicaCounts
name|Map
argument_list|<
name|String
argument_list|,
name|CountsForEachShard
argument_list|>
name|shardsVsReplicaCounts
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cc
name|CoreContainer
name|cc
decl_stmt|;
DECL|field|zero
specifier|private
specifier|static
specifier|final
name|CountsForEachShard
name|zero
init|=
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
DECL|field|countsComparator
specifier|public
specifier|final
specifier|static
name|Comparator
argument_list|<
name|CountsForEachShard
argument_list|>
name|countsComparator
init|=
parameter_list|(
name|c1
parameter_list|,
name|c2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|c1
operator|==
literal|null
condition|)
name|c1
operator|=
name|zero
expr_stmt|;
comment|//just to avoid  NPE
if|if
condition|(
name|c2
operator|==
literal|null
condition|)
name|c2
operator|=
name|zero
expr_stmt|;
if|if
condition|(
name|c1
operator|.
name|totalReplicasInDownNodes
operator|<
name|c2
operator|.
name|totalReplicasInDownNodes
condition|)
block|{
comment|//Prioritize replicas with least no:of down nodes waiting.
comment|//It's better to bring up a node that is a member of a shard
comment|//with 0 down nodes than 1 down node because it will make the shard
comment|// complete earlier and avoid waiting by the other live nodes
if|if
condition|(
name|c1
operator|.
name|totalReplicasInLiveNodes
operator|>
literal|0
condition|)
block|{
comment|//means nobody else is waiting for this , so no need to prioritize
return|return
operator|-
literal|1
return|;
block|}
block|}
if|if
condition|(
name|c2
operator|.
name|totalReplicasInDownNodes
operator|<
name|c1
operator|.
name|totalReplicasInDownNodes
condition|)
block|{
comment|//same is the above, just to take care of the case where c2 has to be prioritized
if|if
condition|(
name|c2
operator|.
name|totalReplicasInLiveNodes
operator|>
literal|0
condition|)
block|{
comment|//means nobody else is waiting for this , so no need to priotitize
return|return
literal|1
return|;
block|}
block|}
comment|//Prioritize replicas where most no:of other nodes are waiting for
comment|// For example if 1 other replicas are waiting for this replica, then
comment|// prioritize that over the replica were zero other nodes are waiting
if|if
condition|(
name|c1
operator|.
name|totalReplicasInLiveNodes
operator|>
name|c2
operator|.
name|totalReplicasInLiveNodes
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|c2
operator|.
name|totalReplicasInLiveNodes
operator|>
name|c1
operator|.
name|totalReplicasInLiveNodes
condition|)
return|return
literal|1
return|;
comment|//If all else is same. prioritize fewer replicas I have because that will complete the
comment|//quorum for shard faster. If I have only one replica for a shard I can finish it faster
comment|// than a shard with 2 replicas in this node
if|if
condition|(
name|c1
operator|.
name|myReplicas
operator|<
name|c2
operator|.
name|myReplicas
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|c2
operator|.
name|myReplicas
operator|<
name|c1
operator|.
name|myReplicas
condition|)
return|return
literal|1
return|;
comment|//if everything is same return 0
return|return
literal|0
return|;
block|}
decl_stmt|;
DECL|method|init
specifier|public
name|CoreSorter
name|init
parameter_list|(
name|CoreContainer
name|cc
parameter_list|)
block|{
name|this
operator|.
name|cc
operator|=
name|cc
expr_stmt|;
if|if
condition|(
name|cc
operator|==
literal|null
operator|||
operator|!
name|cc
operator|.
name|isZooKeeperAware
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
name|String
name|myNodeName
init|=
name|getNodeName
argument_list|()
decl_stmt|;
name|ClusterState
name|state
init|=
name|cc
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
for|for
control|(
name|CloudDescriptor
name|cloudDescriptor
range|:
name|getCloudDescriptors
argument_list|()
control|)
block|{
name|String
name|coll
init|=
name|cloudDescriptor
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
name|String
name|sliceName
init|=
name|getShardName
argument_list|(
name|cloudDescriptor
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardsVsReplicaCounts
operator|.
name|containsKey
argument_list|(
name|sliceName
argument_list|)
condition|)
continue|continue;
name|CountsForEachShard
name|c
init|=
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|getReplicas
argument_list|(
name|state
argument_list|,
name|coll
argument_list|,
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|myNodeName
argument_list|)
condition|)
block|{
name|c
operator|.
name|myReplicas
operator|++
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|state
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|liveNodes
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|c
operator|.
name|totalReplicasInLiveNodes
operator|++
expr_stmt|;
block|}
else|else
block|{
name|c
operator|.
name|totalReplicasInDownNodes
operator|++
expr_stmt|;
block|}
block|}
block|}
name|shardsVsReplicaCounts
operator|.
name|put
argument_list|(
name|sliceName
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|CoreDescriptor
name|cd1
parameter_list|,
name|CoreDescriptor
name|cd2
parameter_list|)
block|{
name|String
name|s1
init|=
name|getShardName
argument_list|(
name|cd1
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
name|getShardName
argument_list|(
name|cd2
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|==
literal|null
operator|||
name|s2
operator|==
literal|null
condition|)
return|return
name|cd1
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|cd2
operator|.
name|getName
argument_list|()
argument_list|)
return|;
name|CountsForEachShard
name|c1
init|=
name|shardsVsReplicaCounts
operator|.
name|get
argument_list|(
name|s1
argument_list|)
decl_stmt|;
name|CountsForEachShard
name|c2
init|=
name|shardsVsReplicaCounts
operator|.
name|get
argument_list|(
name|s2
argument_list|)
decl_stmt|;
name|int
name|result
init|=
name|countsComparator
operator|.
name|compare
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
decl_stmt|;
return|return
name|result
operator|==
literal|0
condition|?
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
else|:
name|result
return|;
block|}
DECL|class|CountsForEachShard
specifier|static
class|class
name|CountsForEachShard
block|{
DECL|field|totalReplicasInDownNodes
DECL|field|myReplicas
DECL|field|totalReplicasInLiveNodes
specifier|public
name|int
name|totalReplicasInDownNodes
init|=
literal|0
decl_stmt|,
name|myReplicas
init|=
literal|0
decl_stmt|,
name|totalReplicasInLiveNodes
init|=
literal|0
decl_stmt|;
DECL|method|CountsForEachShard
specifier|public
name|CountsForEachShard
parameter_list|(
name|int
name|totalReplicasInDownNodes
parameter_list|,
name|int
name|totalReplicasInLiveNodes
parameter_list|,
name|int
name|myReplicas
parameter_list|)
block|{
name|this
operator|.
name|totalReplicasInDownNodes
operator|=
name|totalReplicasInDownNodes
expr_stmt|;
name|this
operator|.
name|myReplicas
operator|=
name|myReplicas
expr_stmt|;
name|this
operator|.
name|totalReplicasInLiveNodes
operator|=
name|totalReplicasInLiveNodes
expr_stmt|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|CountsForEachShard
condition|)
block|{
name|CountsForEachShard
name|that
init|=
operator|(
name|CountsForEachShard
operator|)
name|obj
decl_stmt|;
return|return
name|that
operator|.
name|totalReplicasInDownNodes
operator|==
name|totalReplicasInDownNodes
operator|&&
name|that
operator|.
name|myReplicas
operator|==
name|myReplicas
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"down : "
operator|+
name|totalReplicasInDownNodes
operator|+
literal|" , up :  "
operator|+
name|totalReplicasInLiveNodes
operator|+
literal|" my : "
operator|+
name|myReplicas
return|;
block|}
block|}
DECL|method|getShardName
specifier|static
name|String
name|getShardName
parameter_list|(
name|CloudDescriptor
name|cd
parameter_list|)
block|{
return|return
name|cd
operator|==
literal|null
condition|?
literal|null
else|:
name|cd
operator|.
name|getCollectionName
argument_list|()
operator|+
literal|"_"
operator|+
name|cd
operator|.
name|getShardId
argument_list|()
return|;
block|}
DECL|method|getNodeName
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|cc
operator|.
name|getNodeConfig
argument_list|()
operator|.
name|getNodeName
argument_list|()
return|;
block|}
comment|/**Return all replicas for a given collection+slice combo    */
DECL|method|getReplicas
name|Collection
argument_list|<
name|Replica
argument_list|>
name|getReplicas
parameter_list|(
name|ClusterState
name|cs
parameter_list|,
name|String
name|coll
parameter_list|,
name|String
name|slice
parameter_list|)
block|{
name|DocCollection
name|c
init|=
name|cs
operator|.
name|getCollectionOrNull
argument_list|(
name|coll
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
return|return
name|emptyList
argument_list|()
return|;
name|Slice
name|s
init|=
name|c
operator|.
name|getSlice
argument_list|(
name|slice
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
return|return
name|emptyList
argument_list|()
return|;
return|return
name|s
operator|.
name|getReplicas
argument_list|()
return|;
block|}
comment|/**return cloud descriptors for all cores in this node    */
DECL|method|getCloudDescriptors
name|Collection
argument_list|<
name|CloudDescriptor
argument_list|>
name|getCloudDescriptors
parameter_list|()
block|{
return|return
name|cc
operator|.
name|getCores
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
parameter_list|(
name|core
parameter_list|)
lambda|->
name|core
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

