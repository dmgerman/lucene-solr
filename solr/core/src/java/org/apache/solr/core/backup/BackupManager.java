begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core.backup
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|BackupRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|BackupRepository
operator|.
name|PathType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PropertiesInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class implements functionality to create a backup with extension points provided to integrate with different  * types of file-systems.  */
end_comment

begin_class
DECL|class|BackupManager
specifier|public
class|class
name|BackupManager
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|COLLECTION_PROPS_FILE
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_PROPS_FILE
init|=
literal|"collection_state.json"
decl_stmt|;
DECL|field|BACKUP_PROPS_FILE
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_PROPS_FILE
init|=
literal|"backup.properties"
decl_stmt|;
DECL|field|ZK_STATE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|ZK_STATE_DIR
init|=
literal|"zk_backup"
decl_stmt|;
DECL|field|CONFIG_STATE_DIR
specifier|public
specifier|static
specifier|final
name|String
name|CONFIG_STATE_DIR
init|=
literal|"configs"
decl_stmt|;
comment|// Backup properties
DECL|field|COLLECTION_NAME_PROP
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_NAME_PROP
init|=
literal|"collection"
decl_stmt|;
DECL|field|BACKUP_NAME_PROP
specifier|public
specifier|static
specifier|final
name|String
name|BACKUP_NAME_PROP
init|=
literal|"backupName"
decl_stmt|;
DECL|field|INDEX_VERSION_PROP
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_VERSION_PROP
init|=
literal|"index.version"
decl_stmt|;
DECL|field|START_TIME_PROP
specifier|public
specifier|static
specifier|final
name|String
name|START_TIME_PROP
init|=
literal|"startTime"
decl_stmt|;
DECL|field|zkStateReader
specifier|protected
specifier|final
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|repository
specifier|protected
specifier|final
name|BackupRepository
name|repository
decl_stmt|;
DECL|method|BackupManager
specifier|public
name|BackupManager
parameter_list|(
name|BackupRepository
name|repository
parameter_list|,
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|collectionName
parameter_list|)
block|{
name|this
operator|.
name|repository
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|repository
argument_list|)
expr_stmt|;
name|this
operator|.
name|zkStateReader
operator|=
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|zkStateReader
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return The version of this backup implementation.    */
DECL|method|getVersion
specifier|public
specifier|final
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"1.0"
return|;
block|}
comment|/**    * This method returns the configuration parameters for the specified backup.    *    * @param backupLoc The base path used to store the backup data.    * @param backupId  The unique name for the backup whose configuration params are required.    * @return the configuration parameters for the specified backup.    * @throws IOException In case of errors.    */
DECL|method|readBackupProperties
specifier|public
name|Properties
name|readBackupProperties
parameter_list|(
name|String
name|backupLoc
parameter_list|,
name|String
name|backupId
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|backupLoc
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|backupId
argument_list|)
expr_stmt|;
comment|// Backup location
name|URI
name|backupPath
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|repository
operator|.
name|exists
argument_list|(
name|backupPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Couldn't restore since doesn't exist: "
operator|+
name|backupPath
argument_list|)
throw|;
block|}
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
name|Reader
name|is
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|PropertiesInputStream
argument_list|(
name|repository
operator|.
name|openInput
argument_list|(
name|backupPath
argument_list|,
name|BACKUP_PROPS_FILE
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|props
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
block|}
comment|/**    * This method stores the backup properties at the specified location in the repository.    *    * @param backupLoc  The base path used to store the backup data.    * @param backupId  The unique name for the backup whose configuration params are required.    * @param props The backup properties    * @throws IOException in case of I/O error    */
DECL|method|writeBackupProperties
specifier|public
name|void
name|writeBackupProperties
parameter_list|(
name|String
name|backupLoc
parameter_list|,
name|String
name|backupId
parameter_list|,
name|Properties
name|props
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|dest
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|BACKUP_PROPS_FILE
argument_list|)
decl_stmt|;
try|try
init|(
name|Writer
name|propsWriter
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|repository
operator|.
name|createOutput
argument_list|(
name|dest
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
name|props
operator|.
name|store
argument_list|(
name|propsWriter
argument_list|,
literal|"Backup properties file"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method reads the meta-data information for the backed-up collection.    *    * @param backupLoc The base path used to store the backup data.    * @param backupId The unique name for the backup.    * @return the meta-data information for the backed-up collection.    * @throws IOException in case of errors.    */
DECL|method|readCollectionState
specifier|public
name|DocCollection
name|readCollectionState
parameter_list|(
name|String
name|backupLoc
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|URI
name|zkStateDir
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|ZK_STATE_DIR
argument_list|)
decl_stmt|;
try|try
init|(
name|IndexInput
name|is
init|=
name|repository
operator|.
name|openInput
argument_list|(
name|zkStateDir
argument_list|,
name|COLLECTION_PROPS_FILE
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|is
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
comment|// probably ok since the json file should be small.
name|is
operator|.
name|readBytes
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|is
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterState
name|c_state
init|=
name|ClusterState
operator|.
name|load
argument_list|(
operator|-
literal|1
argument_list|,
name|arr
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|c_state
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
return|;
block|}
block|}
comment|/**    * This method writes the collection meta-data to the specified location in the repository.    *    * @param backupLoc The base path used to store the backup data.    * @param backupId  The unique name for the backup.    * @param collectionName The name of the collection whose meta-data is being stored.    * @param collectionState The collection meta-data to be stored.    * @throws IOException in case of I/O errors.    */
DECL|method|writeCollectionState
specifier|public
name|void
name|writeCollectionState
parameter_list|(
name|String
name|backupLoc
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|DocCollection
name|collectionState
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|dest
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|ZK_STATE_DIR
argument_list|,
name|COLLECTION_PROPS_FILE
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|collectionStateOs
init|=
name|repository
operator|.
name|createOutput
argument_list|(
name|dest
argument_list|)
init|)
block|{
name|collectionStateOs
operator|.
name|write
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|collectionName
argument_list|,
name|collectionState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * This method uploads the Solr configuration files to the desired location in Zookeeper.    *    * @param backupLoc  The base path used to store the backup data.    * @param backupId  The unique name for the backup.    * @param sourceConfigName The name of the config to be copied    * @param targetConfigName  The name of the config to be created.    * @throws IOException in case of I/O errors.    */
DECL|method|uploadConfigDir
specifier|public
name|void
name|uploadConfigDir
parameter_list|(
name|String
name|backupLoc
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|sourceConfigName
parameter_list|,
name|String
name|targetConfigName
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|source
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|ZK_STATE_DIR
argument_list|,
name|CONFIG_STATE_DIR
argument_list|,
name|sourceConfigName
argument_list|)
decl_stmt|;
name|String
name|zkPath
init|=
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|targetConfigName
decl_stmt|;
name|uploadToZk
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|source
argument_list|,
name|zkPath
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method stores the contents of a specified Solr config at the specified location in repository.    *    * @param backupLoc  The base path used to store the backup data.    * @param backupId  The unique name for the backup.    * @param configName The name of the config to be saved.    * @throws IOException in case of I/O errors.    */
DECL|method|downloadConfigDir
specifier|public
name|void
name|downloadConfigDir
parameter_list|(
name|String
name|backupLoc
parameter_list|,
name|String
name|backupId
parameter_list|,
name|String
name|configName
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|dest
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|ZK_STATE_DIR
argument_list|,
name|CONFIG_STATE_DIR
argument_list|,
name|configName
argument_list|)
decl_stmt|;
name|repository
operator|.
name|createDirectory
argument_list|(
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|ZK_STATE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|createDirectory
argument_list|(
name|repository
operator|.
name|createURI
argument_list|(
name|backupLoc
argument_list|,
name|backupId
argument_list|,
name|ZK_STATE_DIR
argument_list|,
name|CONFIG_STATE_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|repository
operator|.
name|createDirectory
argument_list|(
name|dest
argument_list|)
expr_stmt|;
name|downloadFromZK
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
name|dest
argument_list|)
expr_stmt|;
block|}
DECL|method|downloadFromZK
specifier|private
name|void
name|downloadFromZK
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|zkPath
parameter_list|,
name|URI
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|repository
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|repository
operator|.
name|createDirectory
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|file
range|:
name|files
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|children
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Writing file {}"
argument_list|,
name|file
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
init|(
name|OutputStream
name|os
init|=
name|repository
operator|.
name|createOutput
argument_list|(
name|repository
operator|.
name|createURI
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
name|file
argument_list|)
argument_list|)
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|downloadFromZK
argument_list|(
name|zkClient
argument_list|,
name|zkPath
operator|+
literal|"/"
operator|+
name|file
argument_list|,
name|repository
operator|.
name|createURI
argument_list|(
name|dir
operator|.
name|getPath
argument_list|()
argument_list|,
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error downloading files from zookeeper path "
operator|+
name|zkPath
operator|+
literal|" to "
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|SolrZkClient
operator|.
name|checkInterrupted
argument_list|(
name|e
argument_list|)
argument_list|)
throw|;
block|}
block|}
DECL|method|uploadToZk
specifier|private
name|void
name|uploadToZk
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|URI
name|sourceDir
parameter_list|,
name|String
name|destZkPath
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|repository
operator|.
name|exists
argument_list|(
name|sourceDir
argument_list|)
argument_list|,
literal|"Path {} does not exist"
argument_list|,
name|sourceDir
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|repository
operator|.
name|getPathType
argument_list|(
name|sourceDir
argument_list|)
operator|==
name|PathType
operator|.
name|DIRECTORY
argument_list|,
literal|"Path {} is not a directory"
argument_list|,
name|sourceDir
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|file
range|:
name|repository
operator|.
name|listAll
argument_list|(
name|sourceDir
argument_list|)
control|)
block|{
name|String
name|zkNodePath
init|=
name|destZkPath
operator|+
literal|"/"
operator|+
name|file
decl_stmt|;
name|URI
name|path
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|sourceDir
operator|.
name|getPath
argument_list|()
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|PathType
name|t
init|=
name|repository
operator|.
name|getPathType
argument_list|(
name|path
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|t
condition|)
block|{
case|case
name|FILE
case|:
block|{
try|try
init|(
name|IndexInput
name|is
init|=
name|repository
operator|.
name|openInput
argument_list|(
name|sourceDir
argument_list|,
name|file
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|byte
index|[]
name|arr
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|is
operator|.
name|length
argument_list|()
index|]
decl_stmt|;
comment|// probably ok since the config file should be small.
name|is
operator|.
name|readBytes
argument_list|(
name|arr
argument_list|,
literal|0
argument_list|,
operator|(
name|int
operator|)
name|is
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|zkNodePath
argument_list|,
name|arr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
break|break;
block|}
case|case
name|DIRECTORY
case|:
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|uploadToZk
argument_list|(
name|zkClient
argument_list|,
name|path
argument_list|,
name|zkNodePath
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unknown path type "
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

