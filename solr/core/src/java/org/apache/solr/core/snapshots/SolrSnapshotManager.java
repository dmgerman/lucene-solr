begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core.snapshots
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotMetaDataManager
operator|.
name|SnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides functionality required to handle the data files corresponding to Solr snapshots.  */
end_comment

begin_class
DECL|class|SolrSnapshotManager
specifier|public
class|class
name|SolrSnapshotManager
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.    *    * @param dir The index directory storing the snapshot.    * @param gen The generation number for the {@linkplain IndexCommit}    * @throws IOException in case of I/O errors.    */
DECL|method|deleteIndexFiles
specifier|public
specifier|static
name|void
name|deleteIndexFiles
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
parameter_list|,
name|long
name|gen
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|refCounts
init|=
name|buildRefCounts
argument_list|(
name|snapshots
argument_list|,
name|commits
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexCommit
name|ic
range|:
name|commits
control|)
block|{
if|if
condition|(
name|ic
operator|.
name|getGeneration
argument_list|()
operator|==
name|gen
condition|)
block|{
name|deleteIndexFiles
argument_list|(
name|dir
argument_list|,
name|refCounts
argument_list|,
name|ic
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|/**    * This method deletes all files not corresponding to a configured snapshot in the specified index directory.    *    * @param dir The index directory to search for.    * @throws IOException in case of I/O errors.    */
DECL|method|deleteNonSnapshotIndexFiles
specifier|public
specifier|static
name|void
name|deleteNonSnapshotIndexFiles
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|refCounts
init|=
name|buildRefCounts
argument_list|(
name|snapshots
argument_list|,
name|commits
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|snapshotGenNumbers
init|=
name|snapshots
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|SnapshotMetaData
operator|::
name|getGenerationNumber
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|IndexCommit
name|ic
range|:
name|commits
control|)
block|{
if|if
condition|(
operator|!
name|snapshotGenNumbers
operator|.
name|contains
argument_list|(
name|ic
operator|.
name|getGeneration
argument_list|()
argument_list|)
condition|)
block|{
name|deleteIndexFiles
argument_list|(
name|dir
argument_list|,
name|refCounts
argument_list|,
name|ic
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * This method computes reference count for the index files by taking into consideration    * (a) configured snapshots and (b) files sharing between two or more {@linkplain IndexCommit} instances.    *    * @param snapshots A collection of user configured snapshots    * @param commits A list of {@linkplain IndexCommit} instances    * @return A map containing reference count for each index file referred in one of the {@linkplain IndexCommit} instances.    * @throws IOException in case of I/O error.    */
annotation|@
name|VisibleForTesting
DECL|method|buildRefCounts
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|buildRefCounts
parameter_list|(
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
parameter_list|,
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|IndexCommit
argument_list|>
name|commitsByGen
init|=
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|IndexCommit
operator|::
name|getGeneration
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SnapshotMetaData
name|md
range|:
name|snapshots
control|)
block|{
name|IndexCommit
name|ic
init|=
name|commitsByGen
operator|.
name|get
argument_list|(
name|md
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ic
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|fileNames
init|=
name|ic
operator|.
name|getFileNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|fileNames
control|)
block|{
name|int
name|refCount
init|=
name|result
operator|.
name|getOrDefault
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|fileName
argument_list|,
name|refCount
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * This method deletes the index files associated with specified<code>indexCommit</code> provided they    * are not referred by some other {@linkplain IndexCommit}.    *    * @param dir The index directory containing the {@linkplain IndexCommit} to be deleted.    * @param refCounts A map containing reference counts for each file associated with every {@linkplain IndexCommit}    *                  in the specified directory.    * @param indexCommit The {@linkplain IndexCommit} whose files need to be deleted.    * @throws IOException in case of I/O errors.    */
DECL|method|deleteIndexFiles
specifier|private
specifier|static
name|void
name|deleteIndexFiles
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|refCounts
parameter_list|,
name|IndexCommit
name|indexCommit
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting index files for index commit with generation {} in directory {}"
argument_list|,
name|indexCommit
operator|.
name|getGeneration
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|indexCommit
operator|.
name|getFileNames
argument_list|()
control|)
block|{
try|try
block|{
comment|// Ensure that a file being deleted is not referred by some other commit.
name|int
name|ref
init|=
name|refCounts
operator|.
name|getOrDefault
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Reference count for file {} is {}"
argument_list|,
name|fileName
argument_list|,
name|ref
argument_list|)
expr_stmt|;
if|if
condition|(
name|ref
operator|==
literal|0
condition|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to delete file {} in directory {} due to exception {}"
argument_list|,
name|fileName
argument_list|,
name|dir
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

