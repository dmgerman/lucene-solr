begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core.snapshots
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexDeletionPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriterConfig
operator|.
name|OpenMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NoMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotMetaDataManager
operator|.
name|SnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class provides functionality required to handle the data files corresponding to Solr snapshots.  */
end_comment

begin_class
DECL|class|SolrSnapshotManager
specifier|public
class|class
name|SolrSnapshotManager
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|INDEX_DIR_PATH
specifier|public
specifier|static
specifier|final
name|String
name|INDEX_DIR_PATH
init|=
literal|"indexDirPath"
decl_stmt|;
DECL|field|GENERATION_NUM
specifier|public
specifier|static
specifier|final
name|String
name|GENERATION_NUM
init|=
literal|"generation"
decl_stmt|;
DECL|field|SNAPSHOT_STATUS
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_STATUS
init|=
literal|"status"
decl_stmt|;
DECL|field|CREATION_DATE
specifier|public
specifier|static
specifier|final
name|String
name|CREATION_DATE
init|=
literal|"creationDate"
decl_stmt|;
DECL|field|SNAPSHOT_REPLICAS
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOT_REPLICAS
init|=
literal|"replicas"
decl_stmt|;
DECL|field|SNAPSHOTS_INFO
specifier|public
specifier|static
specifier|final
name|String
name|SNAPSHOTS_INFO
init|=
literal|"snapshots"
decl_stmt|;
DECL|field|LEADER
specifier|public
specifier|static
specifier|final
name|String
name|LEADER
init|=
literal|"leader"
decl_stmt|;
DECL|field|SHARD_ID
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_ID
init|=
literal|"shard_id"
decl_stmt|;
DECL|field|FILE_LIST
specifier|public
specifier|static
specifier|final
name|String
name|FILE_LIST
init|=
literal|"files"
decl_stmt|;
comment|/**    * This method returns if a named snapshot exists for the specified collection.    *    * @param zkClient Zookeeper client    * @param collectionName The name of the collection    * @param commitName The name of the snapshot    * @return true if the named snapshot exists    *         false Otherwise    * @throws KeeperException In case of Zookeeper error    * @throws InterruptedException In case of thread interruption.    */
DECL|method|snapshotExists
specifier|public
specifier|static
name|boolean
name|snapshotExists
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|commitName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|commitName
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|zkClient
operator|.
name|exists
argument_list|(
name|zkPath
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**    * This method creates an entry for the named snapshot for the specified collection in Zookeeper.    *    * @param zkClient Zookeeper client    * @param collectionName The name of the collection    * @param meta The {@linkplain CollectionSnapshotMetaData} corresponding to named snapshot    * @throws KeeperException In case of Zookeeper error    * @throws InterruptedException In case of thread interruption.    */
DECL|method|createCollectionLevelSnapshot
specifier|public
specifier|static
name|void
name|createCollectionLevelSnapshot
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|CollectionSnapshotMetaData
name|meta
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
name|zkPath
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|meta
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method updates an entry for the named snapshot for the specified collection in Zookeeper.    *    * @param zkClient Zookeeper client    * @param collectionName  The name of the collection    * @param meta The {@linkplain CollectionSnapshotMetaData} corresponding to named snapshot    * @throws KeeperException In case of Zookeeper error    * @throws InterruptedException In case of thread interruption.    */
DECL|method|updateCollectionLevelSnapshot
specifier|public
specifier|static
name|void
name|updateCollectionLevelSnapshot
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|CollectionSnapshotMetaData
name|meta
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|setData
argument_list|(
name|zkPath
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|meta
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method deletes an entry for the named snapshot for the specified collection in Zookeeper.    *    * @param zkClient Zookeeper client    * @param collectionName The name of the collection    * @param commitName  The name of the snapshot    * @throws InterruptedException In case of thread interruption.    * @throws KeeperException  In case of Zookeeper error    */
DECL|method|deleteCollectionLevelSnapshot
specifier|public
specifier|static
name|void
name|deleteCollectionLevelSnapshot
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|commitName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|commitName
argument_list|)
argument_list|)
decl_stmt|;
name|zkClient
operator|.
name|delete
argument_list|(
name|zkPath
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method deletes all snapshots for the specified collection in Zookeeper.    *    * @param zkClient  Zookeeper client    * @param collectionName The name of the collection    * @throws InterruptedException In case of thread interruption.    * @throws KeeperException In case of Zookeeper error    */
DECL|method|cleanupCollectionLevelSnapshots
specifier|public
specifier|static
name|void
name|cleanupCollectionLevelSnapshots
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Delete the meta-data for each snapshot.
name|Collection
argument_list|<
name|String
argument_list|>
name|snapshots
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|snapshot
range|:
name|snapshots
control|)
block|{
name|String
name|path
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|snapshot
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|zkClient
operator|.
name|delete
argument_list|(
name|path
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
comment|// Gracefully handle the case when the zk node doesn't exist
if|if
condition|(
name|ex
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
comment|// Delete the parent node.
name|zkClient
operator|.
name|delete
argument_list|(
name|zkPath
argument_list|,
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
comment|// Gracefully handle the case when the zk node doesn't exist (e.g. if no snapshots were created for this collection).
if|if
condition|(
name|ex
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
block|}
comment|/**    * This method returns the {@linkplain CollectionSnapshotMetaData} for the named snapshot for the specified collection in Zookeeper.    *    * @param zkClient  Zookeeper client    * @param collectionName  The name of the collection    * @param commitName The name of the snapshot    * @return (Optional) the {@linkplain CollectionSnapshotMetaData}    * @throws InterruptedException In case of thread interruption.    * @throws KeeperException In case of Zookeeper error    */
DECL|method|getCollectionLevelSnapshot
specifier|public
specifier|static
name|Optional
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|getCollectionLevelSnapshot
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|commitName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|commitName
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|data
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|CollectionSnapshotMetaData
argument_list|(
name|data
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
comment|// Gracefully handle the case when the zk node for a specific
comment|// snapshot doesn't exist (e.g. due to a concurrent delete operation).
if|if
condition|(
name|ex
operator|.
name|code
argument_list|()
operator|==
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
throw|throw
name|ex
throw|;
block|}
block|}
comment|/**    * This method returns the {@linkplain CollectionSnapshotMetaData} for each named snapshot for the specified collection in Zookeeper.    *    * @param zkClient Zookeeper client    * @param collectionName The name of the collection    * @return the {@linkplain CollectionSnapshotMetaData} for each named snapshot    * @throws InterruptedException In case of thread interruption.    * @throws KeeperException In case of Zookeeper error    */
DECL|method|listSnapshots
specifier|public
specifier|static
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|listSnapshots
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|zkPath
init|=
name|getSnapshotMetaDataZkPath
argument_list|(
name|collectionName
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|snapshots
init|=
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|snapshot
range|:
name|snapshots
control|)
block|{
name|Optional
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|s
init|=
name|getCollectionLevelSnapshot
argument_list|(
name|zkClient
argument_list|,
name|collectionName
argument_list|,
name|snapshot
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|s
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
name|ex
parameter_list|)
block|{
comment|// Gracefully handle the case when the zk node doesn't exist (e.g. due to a concurrent delete collection operation).
if|if
condition|(
name|ex
operator|.
name|code
argument_list|()
operator|!=
name|KeeperException
operator|.
name|Code
operator|.
name|NONODE
condition|)
block|{
throw|throw
name|ex
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.    *    * @param core The Solr core    * @param dir The index directory storing the snapshot.    * @param gen The generation number of the {@linkplain IndexCommit} to be deleted.    * @throws IOException in case of I/O errors.    */
DECL|method|deleteSnapshotIndexFiles
specifier|public
specifier|static
name|void
name|deleteSnapshotIndexFiles
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|Directory
name|dir
parameter_list|,
specifier|final
name|long
name|gen
parameter_list|)
throws|throws
name|IOException
block|{
name|deleteSnapshotIndexFiles
argument_list|(
name|core
argument_list|,
name|dir
argument_list|,
operator|new
name|IndexDeletionPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|IndexCommit
name|ic
range|:
name|commits
control|)
block|{
if|if
condition|(
name|gen
operator|==
name|ic
operator|.
name|getGeneration
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting non-snapshotted index commit with generation {}"
argument_list|,
name|ic
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|ic
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method deletes index files not associated with the specified<code>snapshots</code>.    *    * @param core The Solr core    * @param dir The index directory storing the snapshot.    * @param snapshots The snapshots to be preserved.    * @throws IOException in case of I/O errors.    */
DECL|method|deleteNonSnapshotIndexFiles
specifier|public
specifier|static
name|void
name|deleteNonSnapshotIndexFiles
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Set
argument_list|<
name|Long
argument_list|>
name|genNumbers
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SnapshotMetaData
name|m
range|:
name|snapshots
control|)
block|{
name|genNumbers
operator|.
name|add
argument_list|(
name|m
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|deleteSnapshotIndexFiles
argument_list|(
name|core
argument_list|,
name|dir
argument_list|,
operator|new
name|IndexDeletionPolicy
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|onInit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|IndexCommit
name|ic
range|:
name|commits
control|)
block|{
if|if
condition|(
operator|!
name|genNumbers
operator|.
name|contains
argument_list|(
name|ic
operator|.
name|getGeneration
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting non-snapshotted index commit with generation {}"
argument_list|,
name|ic
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
name|ic
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onCommit
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|IndexCommit
argument_list|>
name|commits
parameter_list|)
throws|throws
name|IOException
block|{}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * This method deletes index files of the {@linkplain IndexCommit} for the specified generation number.    *    * @param core The Solr core    * @param dir The index directory storing the snapshot.    * @throws IOException in case of I/O errors.    */
DECL|method|deleteSnapshotIndexFiles
specifier|private
specifier|static
name|void
name|deleteSnapshotIndexFiles
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|Directory
name|dir
parameter_list|,
name|IndexDeletionPolicy
name|delPolicy
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexWriterConfig
name|conf
init|=
name|core
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|indexConfig
operator|.
name|toIndexWriterConfig
argument_list|(
name|core
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setOpenMode
argument_list|(
name|OpenMode
operator|.
name|APPEND
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setMergePolicy
argument_list|(
name|NoMergePolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
comment|//Don't want to merge any commits here!
name|conf
operator|.
name|setIndexDeletionPolicy
argument_list|(
name|delPolicy
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setCodec
argument_list|(
name|core
operator|.
name|getCodec
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrIndexWriter
name|iw
init|=
operator|new
name|SolrIndexWriter
argument_list|(
literal|"SolrSnapshotCleaner"
argument_list|,
name|dir
argument_list|,
name|conf
argument_list|)
init|)
block|{
comment|// Do nothing. The only purpose of opening index writer is to invoke the Lucene IndexDeletionPolicy#onInit
comment|// method so that we can cleanup the files associated with specified index commit.
comment|// Note the index writer creates a new commit during the close() operation (which is harmless).
block|}
block|}
DECL|method|getSnapshotMetaDataZkPath
specifier|private
specifier|static
name|String
name|getSnapshotMetaDataZkPath
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Optional
argument_list|<
name|String
argument_list|>
name|commitName
parameter_list|)
block|{
if|if
condition|(
name|commitName
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
literal|"/snapshots/"
operator|+
name|collectionName
operator|+
literal|"/"
operator|+
name|commitName
operator|.
name|get
argument_list|()
return|;
block|}
return|return
literal|"/snapshots/"
operator|+
name|collectionName
return|;
block|}
block|}
end_class

end_unit

