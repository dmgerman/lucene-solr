begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetRequest
operator|.
name|RefineMethod
operator|.
name|SIMPLE
import|;
end_import

begin_class
DECL|class|FacetMerger
specifier|public
specifier|abstract
class|class
name|FacetMerger
block|{
DECL|method|merge
specifier|public
specifier|abstract
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
function_decl|;
comment|// FIXME
comment|//  public abstract Map<String,Object> getRefinement(Context mcontext);
DECL|method|getRefinement
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRefinement
parameter_list|(
name|Context
name|mcontext
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|finish
specifier|public
specifier|abstract
name|void
name|finish
parameter_list|(
name|Context
name|mcontext
parameter_list|)
function_decl|;
DECL|method|getMergedResult
specifier|public
specifier|abstract
name|Object
name|getMergedResult
parameter_list|()
function_decl|;
comment|// This class lets mergers know overall context such as what shard is being merged
comment|// and what buckets have been seen by what shard.
DECL|class|Context
specifier|public
specifier|static
class|class
name|Context
block|{
comment|// FacetComponentState state;  // todo: is this needed?
DECL|field|numShards
specifier|final
name|int
name|numShards
decl_stmt|;
DECL|field|sawShard
specifier|private
specifier|final
name|BitSet
name|sawShard
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
comment|// [bucket0_shard0, bucket0_shard1, bucket0_shard2,  bucket1_shard0, bucket1_shard1, bucket1_shard2]
DECL|field|shardmap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|shardmap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Context
specifier|public
name|Context
parameter_list|(
name|int
name|numShards
parameter_list|)
block|{
name|this
operator|.
name|numShards
operator|=
name|numShards
expr_stmt|;
block|}
DECL|field|root
name|Object
name|root
decl_stmt|;
comment|// per-shard response
DECL|field|maxBucket
name|int
name|maxBucket
decl_stmt|;
comment|// the current max bucket across all bucket types... incremented as we encounter more
DECL|field|shardNum
name|int
name|shardNum
init|=
operator|-
literal|1
decl_stmt|;
comment|// TODO: keep same mapping across multiple phases...
DECL|field|bucketWasMissing
name|boolean
name|bucketWasMissing
decl_stmt|;
DECL|method|newShard
specifier|public
name|void
name|newShard
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|Integer
name|prev
init|=
name|shardmap
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|++
name|shardNum
argument_list|)
decl_stmt|;
assert|assert
name|prev
operator|==
literal|null
assert|;
name|this
operator|.
name|bucketWasMissing
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|setShard
specifier|public
name|void
name|setShard
parameter_list|(
name|String
name|shard
parameter_list|)
block|{
name|this
operator|.
name|shardNum
operator|=
name|shardmap
operator|.
name|get
argument_list|(
name|shard
argument_list|)
expr_stmt|;
block|}
DECL|method|getNewBucketNumber
specifier|public
name|int
name|getNewBucketNumber
parameter_list|()
block|{
return|return
name|maxBucket
operator|++
return|;
block|}
DECL|method|setShardFlag
specifier|public
name|void
name|setShardFlag
parameter_list|(
name|int
name|bucketNum
parameter_list|)
block|{
comment|// rely on normal bitset expansion (uses a doubling strategy)
name|sawShard
operator|.
name|set
argument_list|(
name|bucketNum
operator|*
name|numShards
operator|+
name|shardNum
argument_list|)
expr_stmt|;
block|}
DECL|method|getShardFlag
specifier|public
name|boolean
name|getShardFlag
parameter_list|(
name|int
name|bucketNum
parameter_list|)
block|{
return|return
name|sawShard
operator|.
name|get
argument_list|(
name|bucketNum
operator|*
name|numShards
operator|+
name|shardNum
argument_list|)
return|;
block|}
DECL|method|bucketWasMissing
specifier|public
name|boolean
name|bucketWasMissing
parameter_list|()
block|{
return|return
name|bucketWasMissing
return|;
block|}
DECL|method|setBucketWasMissing
specifier|public
name|boolean
name|setBucketWasMissing
parameter_list|(
name|boolean
name|newVal
parameter_list|)
block|{
name|boolean
name|oldVal
init|=
name|bucketWasMissing
argument_list|()
decl_stmt|;
name|bucketWasMissing
operator|=
name|newVal
expr_stmt|;
return|return
name|oldVal
return|;
block|}
DECL|field|refineSubMap
specifier|private
name|Map
argument_list|<
name|FacetRequest
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|refineSubMap
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|method|getSubsWithRefinement
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getSubsWithRefinement
parameter_list|(
name|FacetRequest
name|freq
parameter_list|)
block|{
if|if
condition|(
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
name|Collection
argument_list|<
name|String
argument_list|>
name|subs
init|=
name|refineSubMap
operator|.
name|get
argument_list|(
name|freq
argument_list|)
decl_stmt|;
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
return|return
name|subs
return|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FacetRequest
argument_list|>
name|entry
range|:
name|freq
operator|.
name|subFacets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|childSubs
init|=
name|getSubsWithRefinement
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childSubs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getRefineMethod
argument_list|()
operator|==
name|SIMPLE
condition|)
block|{
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
name|subs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
name|subs
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|refineSubMap
operator|.
name|put
argument_list|(
name|freq
argument_list|,
name|subs
argument_list|)
expr_stmt|;
return|return
name|subs
return|;
block|}
DECL|field|partialSubsMap
specifier|private
name|Map
argument_list|<
name|FacetRequest
argument_list|,
name|Collection
argument_list|<
name|String
argument_list|>
argument_list|>
name|partialSubsMap
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
DECL|method|getSubsWithPartial
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getSubsWithPartial
parameter_list|(
name|FacetRequest
name|freq
parameter_list|)
block|{
if|if
condition|(
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
name|Collection
argument_list|<
name|String
argument_list|>
name|subs
init|=
name|partialSubsMap
operator|.
name|get
argument_list|(
name|freq
argument_list|)
decl_stmt|;
if|if
condition|(
name|subs
operator|!=
literal|null
condition|)
return|return
name|subs
return|;
name|subs
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|FacetRequest
argument_list|>
name|entry
range|:
name|freq
operator|.
name|subFacets
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|childSubs
init|=
name|getSubsWithPartial
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childSubs
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|returnsPartial
argument_list|()
condition|)
block|{
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
name|subs
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subs
operator|==
literal|null
condition|)
block|{
name|subs
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|partialSubsMap
operator|.
name|put
argument_list|(
name|freq
argument_list|,
name|subs
argument_list|)
expr_stmt|;
return|return
name|subs
return|;
block|}
block|}
block|}
end_class

end_unit

