begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|SearchComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_class
DECL|class|FacetModule
specifier|public
class|class
name|FacetModule
extends|extends
name|SearchComponent
block|{
DECL|field|COMPONENT_NAME
specifier|public
specifier|static
specifier|final
name|String
name|COMPONENT_NAME
init|=
literal|"facet_module"
decl_stmt|;
comment|// Ensure these don't overlap with other PURPOSE flags in ShardRequest
comment|// The largest current flag in ShardRequest is 0x00002000
comment|// We'll put our bits in the middle to avoid future ones in ShardRequest and
comment|// custom ones that may start at the top.
DECL|field|PURPOSE_GET_JSON_FACETS
specifier|public
specifier|final
specifier|static
name|int
name|PURPOSE_GET_JSON_FACETS
init|=
literal|0x00100000
decl_stmt|;
DECL|field|PURPOSE_REFINE_JSON_FACETS
specifier|public
specifier|final
specifier|static
name|int
name|PURPOSE_REFINE_JSON_FACETS
init|=
literal|0x00200000
decl_stmt|;
comment|// Internal information passed down from the top level to shards for distributed faceting.
DECL|field|FACET_INFO
specifier|private
specifier|final
specifier|static
name|String
name|FACET_INFO
init|=
literal|"_facet_"
decl_stmt|;
DECL|field|FACET_REFINE
specifier|private
specifier|final
specifier|static
name|String
name|FACET_REFINE
init|=
literal|"refine"
decl_stmt|;
DECL|method|getFacetComponentState
specifier|public
name|FacetComponentState
name|getFacetComponentState
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
comment|// TODO: put a map on ResponseBuilder?
comment|// rb.componentInfo.get(FacetComponentState.class);
return|return
operator|(
name|FacetComponentState
operator|)
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|FacetComponentState
operator|.
name|class
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|prepare
specifier|public
name|void
name|prepare
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|json
init|=
name|rb
operator|.
name|req
operator|.
name|getJSON
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonFacet
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|json
operator|==
literal|null
condition|)
block|{
name|int
name|version
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
literal|"facet.version"
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|<=
literal|1
condition|)
return|return;
name|boolean
name|facetsEnabled
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|facetsEnabled
condition|)
return|return;
name|jsonFacet
operator|=
operator|new
name|LegacyFacet
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
operator|.
name|getLegacy
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|jsonFacet
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"facet"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jsonFacet
operator|==
literal|null
condition|)
return|return;
name|SolrParams
name|params
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|boolean
name|isShard
init|=
name|params
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|facetInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isShard
condition|)
block|{
name|String
name|jfacet
init|=
name|params
operator|.
name|get
argument_list|(
name|FACET_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|jfacet
operator|==
literal|null
condition|)
block|{
comment|// if this is a shard request, but there is no _facet_ info, then don't do anything.
return|return;
block|}
name|facetInfo
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|jfacet
argument_list|)
expr_stmt|;
block|}
comment|// At this point, we know we need to do something.  Create and save the state.
name|rb
operator|.
name|setNeedDocSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Parse the facet in the prepare phase?
name|FacetParser
name|parser
init|=
operator|new
name|FacetTopParser
argument_list|(
name|rb
operator|.
name|req
argument_list|)
decl_stmt|;
name|FacetRequest
name|facetRequest
init|=
literal|null
decl_stmt|;
try|try
block|{
name|facetRequest
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|jsonFacet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|syntaxError
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|syntaxError
argument_list|)
throw|;
block|}
name|FacetComponentState
name|fcState
init|=
operator|new
name|FacetComponentState
argument_list|()
decl_stmt|;
name|fcState
operator|.
name|rb
operator|=
name|rb
expr_stmt|;
name|fcState
operator|.
name|isShard
operator|=
name|isShard
expr_stmt|;
name|fcState
operator|.
name|facetInfo
operator|=
name|facetInfo
expr_stmt|;
name|fcState
operator|.
name|facetCommands
operator|=
name|jsonFacet
expr_stmt|;
name|fcState
operator|.
name|facetRequest
operator|=
name|facetRequest
expr_stmt|;
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
name|FacetComponentState
operator|.
name|class
argument_list|,
name|fcState
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
comment|// if this is null, faceting is not enabled
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
name|boolean
name|isShard
init|=
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getBool
argument_list|(
name|ShardParams
operator|.
name|IS_SHARD
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|FacetContext
name|fcontext
init|=
operator|new
name|FacetContext
argument_list|()
decl_stmt|;
name|fcontext
operator|.
name|base
operator|=
name|rb
operator|.
name|getResults
argument_list|()
operator|.
name|docSet
expr_stmt|;
name|fcontext
operator|.
name|req
operator|=
name|rb
operator|.
name|req
expr_stmt|;
name|fcontext
operator|.
name|searcher
operator|=
name|rb
operator|.
name|req
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|fcontext
operator|.
name|qcontext
operator|=
name|QueryContext
operator|.
name|newContext
argument_list|(
name|fcontext
operator|.
name|searcher
argument_list|)
expr_stmt|;
if|if
condition|(
name|isShard
condition|)
block|{
name|fcontext
operator|.
name|flags
operator||=
name|FacetContext
operator|.
name|IS_SHARD
expr_stmt|;
name|fcontext
operator|.
name|facetInfo
operator|=
name|facetState
operator|.
name|facetInfo
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|facetState
operator|.
name|facetInfo
operator|.
name|get
argument_list|(
name|FACET_REFINE
argument_list|)
expr_stmt|;
if|if
condition|(
name|fcontext
operator|.
name|facetInfo
operator|!=
literal|null
condition|)
block|{
name|fcontext
operator|.
name|flags
operator||=
name|FacetContext
operator|.
name|IS_REFINEMENT
expr_stmt|;
name|fcontext
operator|.
name|flags
operator||=
name|FacetContext
operator|.
name|SKIP_FACET
expr_stmt|;
comment|// the root bucket should have been received from all shards previously
block|}
block|}
name|FacetProcessor
name|fproc
init|=
name|facetState
operator|.
name|facetRequest
operator|.
name|createFacetProcessor
argument_list|(
name|fcontext
argument_list|)
decl_stmt|;
if|if
condition|(
name|rb
operator|.
name|isDebug
argument_list|()
condition|)
block|{
name|FacetDebugInfo
name|fdebug
init|=
operator|new
name|FacetDebugInfo
argument_list|()
decl_stmt|;
name|fcontext
operator|.
name|setDebugInfo
argument_list|(
name|fdebug
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|setReqDescription
argument_list|(
name|facetState
operator|.
name|facetRequest
operator|.
name|getFacetDescription
argument_list|()
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|setProcessor
argument_list|(
name|fproc
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
name|fproc
operator|.
name|process
argument_list|()
expr_stmt|;
name|long
name|timeElapsed
init|=
operator|(
name|long
operator|)
name|timer
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|fdebug
operator|.
name|setElapse
argument_list|(
name|timeElapsed
argument_list|)
expr_stmt|;
name|fdebug
operator|.
name|putInfoItem
argument_list|(
literal|"domainSize"
argument_list|,
operator|(
name|long
operator|)
name|fcontext
operator|.
name|base
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|rb
operator|.
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|put
argument_list|(
literal|"FacetDebugInfo"
argument_list|,
name|fdebug
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fproc
operator|.
name|process
argument_list|()
expr_stmt|;
block|}
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facets"
argument_list|,
name|fproc
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|clearFaceting
specifier|private
name|void
name|clearFaceting
parameter_list|(
name|List
argument_list|<
name|ShardRequest
argument_list|>
name|outgoing
parameter_list|)
block|{
comment|// turn off faceting for requests not marked as being for faceting refinements
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|outgoing
control|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|PURPOSE_REFINE_JSON_FACETS
operator|)
operator|!=
literal|0
condition|)
continue|continue;
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
literal|"json.facet"
argument_list|)
expr_stmt|;
comment|// this just saves space... the presence of FACET_INFO is enough to control the faceting
name|sreq
operator|.
name|params
operator|.
name|remove
argument_list|(
name|FACET_INFO
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|distributedProcess
specifier|public
name|int
name|distributedProcess
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
throws|throws
name|IOException
block|{
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
block|{
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
comment|// Check if there are any refinements possible
if|if
condition|(
name|facetState
operator|.
name|mcontext
operator|.
name|getSubsWithRefinement
argument_list|(
name|facetState
operator|.
name|facetRequest
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearFaceting
argument_list|(
name|rb
operator|.
name|outgoing
argument_list|)
expr_stmt|;
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
comment|// Overlap facet refinement requests (those shards that we need a count
comment|// for particular facet values from), where possible, with
comment|// the requests to get fields (because we know that is the
comment|// only other required phase).
comment|// We do this in distributedProcess so we can look at all of the
comment|// requests in the outgoing queue at once.
assert|assert
name|rb
operator|.
name|shards
operator|.
name|length
operator|==
name|facetState
operator|.
name|mcontext
operator|.
name|numShards
assert|;
for|for
control|(
name|String
name|shard
range|:
name|rb
operator|.
name|shards
control|)
block|{
name|facetState
operator|.
name|mcontext
operator|.
name|setShard
argument_list|(
name|shard
argument_list|)
expr_stmt|;
comment|// shard-specific refinement
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|refinement
init|=
name|facetState
operator|.
name|merger
operator|.
name|getRefinement
argument_list|(
name|facetState
operator|.
name|mcontext
argument_list|)
decl_stmt|;
if|if
condition|(
name|refinement
operator|==
literal|null
condition|)
continue|continue;
name|boolean
name|newRequest
init|=
literal|false
decl_stmt|;
name|ShardRequest
name|shardsRefineRequest
init|=
literal|null
decl_stmt|;
comment|// try to find a request that is already going out to that shard.
comment|// If nshards becomes too great, we may want to move to hashing for
comment|// better scalability.
for|for
control|(
name|ShardRequest
name|sreq
range|:
name|rb
operator|.
name|outgoing
control|)
block|{
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
operator|(
name|ShardRequest
operator|.
name|PURPOSE_GET_FIELDS
operator||
name|ShardRequest
operator|.
name|PURPOSE_REFINE_FACETS
operator||
name|ShardRequest
operator|.
name|PURPOSE_REFINE_PIVOT_FACETS
operator|)
operator|)
operator|!=
literal|0
operator|&&
name|sreq
operator|.
name|shards
operator|!=
literal|null
operator|&&
name|sreq
operator|.
name|shards
operator|.
name|length
operator|==
literal|1
operator|&&
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
name|shard
argument_list|)
condition|)
block|{
name|shardsRefineRequest
operator|=
name|sreq
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|shardsRefineRequest
operator|==
literal|null
condition|)
block|{
comment|// we didn't find any other suitable requests going out to that shard,
comment|// so create one ourselves.
name|newRequest
operator|=
literal|true
expr_stmt|;
name|shardsRefineRequest
operator|=
operator|new
name|ShardRequest
argument_list|()
expr_stmt|;
name|shardsRefineRequest
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|shard
block|}
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|rb
operator|.
name|req
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
comment|// don't request any documents
name|shardsRefineRequest
operator|.
name|params
operator|.
name|remove
argument_list|(
name|CommonParams
operator|.
name|START
argument_list|)
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ROWS
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|shardsRefineRequest
operator|.
name|params
operator|.
name|set
argument_list|(
name|FacetParams
operator|.
name|FACET
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|shardsRefineRequest
operator|.
name|purpose
operator||=
name|PURPOSE_REFINE_JSON_FACETS
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|finfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|finfo
operator|.
name|put
argument_list|(
name|FACET_REFINE
argument_list|,
name|refinement
argument_list|)
expr_stmt|;
name|String
name|finfoStr
init|=
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|finfo
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// System.err.println("##################### REFINE=" + finfoStr);
name|shardsRefineRequest
operator|.
name|params
operator|.
name|add
argument_list|(
name|FACET_INFO
argument_list|,
name|finfoStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|newRequest
condition|)
block|{
name|rb
operator|.
name|addRequest
argument_list|(
name|this
argument_list|,
name|shardsRefineRequest
argument_list|)
expr_stmt|;
block|}
block|}
comment|// clearFaceting(rb.outgoing);
return|return
name|ResponseBuilder
operator|.
name|STAGE_DONE
return|;
block|}
annotation|@
name|Override
DECL|method|modifyRequest
specifier|public
name|void
name|modifyRequest
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|SearchComponent
name|who
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|ShardRequest
operator|.
name|PURPOSE_GET_TOP_IDS
operator|)
operator|!=
literal|0
condition|)
block|{
name|sreq
operator|.
name|purpose
operator||=
name|FacetModule
operator|.
name|PURPOSE_GET_JSON_FACETS
expr_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|FACET_INFO
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
comment|// The presence of FACET_INFO (_facet_) turns on json faceting
block|}
else|else
block|{
comment|// turn off faceting on other requests
comment|/*** distributedProcess will need to use other requests for refinement       sreq.params.remove("json.facet");  // this just saves space... the presence of FACET_INFO really control the faceting       sreq.params.remove(FACET_INFO);        **/
block|}
block|}
annotation|@
name|Override
DECL|method|handleResponses
specifier|public
name|void
name|handleResponses
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|ShardRequest
name|sreq
parameter_list|)
block|{
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|ShardResponse
name|shardRsp
range|:
name|sreq
operator|.
name|responses
control|)
block|{
name|SolrResponse
name|rsp
init|=
name|shardRsp
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|top
init|=
name|rsp
operator|.
name|getResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|top
operator|==
literal|null
condition|)
continue|continue;
comment|// shards.tolerant=true will cause this to happen on exceptions/errors
name|Object
name|facet
init|=
name|top
operator|.
name|get
argument_list|(
literal|"facets"
argument_list|)
decl_stmt|;
if|if
condition|(
name|facet
operator|==
literal|null
condition|)
continue|continue;
if|if
condition|(
name|facetState
operator|.
name|merger
operator|==
literal|null
condition|)
block|{
name|facetState
operator|.
name|merger
operator|=
name|facetState
operator|.
name|facetRequest
operator|.
name|createFacetMerger
argument_list|(
name|facet
argument_list|)
expr_stmt|;
name|facetState
operator|.
name|mcontext
operator|=
operator|new
name|FacetMerger
operator|.
name|Context
argument_list|(
name|sreq
operator|.
name|responses
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|sreq
operator|.
name|purpose
operator|&
name|PURPOSE_REFINE_JSON_FACETS
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// System.err.println("REFINE FACET RESULT FROM SHARD = " + facet);
comment|// call merge again with a diff flag set on the context???
name|facetState
operator|.
name|mcontext
operator|.
name|root
operator|=
name|facet
expr_stmt|;
name|facetState
operator|.
name|mcontext
operator|.
name|setShard
argument_list|(
name|shardRsp
operator|.
name|getShard
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: roll newShard into setShard?
name|facetState
operator|.
name|merger
operator|.
name|merge
argument_list|(
name|facet
argument_list|,
name|facetState
operator|.
name|mcontext
argument_list|)
expr_stmt|;
return|return;
block|}
name|facetState
operator|.
name|mcontext
operator|.
name|root
operator|=
name|facet
expr_stmt|;
name|facetState
operator|.
name|mcontext
operator|.
name|newShard
argument_list|(
name|shardRsp
operator|.
name|getShard
argument_list|()
argument_list|)
expr_stmt|;
name|facetState
operator|.
name|merger
operator|.
name|merge
argument_list|(
name|facet
argument_list|,
name|facetState
operator|.
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|finishStage
specifier|public
name|void
name|finishStage
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|)
block|{
if|if
condition|(
name|rb
operator|.
name|stage
operator|!=
name|ResponseBuilder
operator|.
name|STAGE_GET_FIELDS
condition|)
return|return;
name|FacetComponentState
name|facetState
init|=
name|getFacetComponentState
argument_list|(
name|rb
argument_list|)
decl_stmt|;
if|if
condition|(
name|facetState
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|facetState
operator|.
name|merger
operator|!=
literal|null
condition|)
block|{
comment|// TODO: merge any refinements
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"facets"
argument_list|,
name|facetState
operator|.
name|merger
operator|.
name|getMergedResult
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Facet Module"
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|QUERY
return|;
block|}
block|}
end_class

begin_comment
comment|// TODO: perhaps factor out some sort of root/parent facet object that doesn't depend
end_comment

begin_comment
comment|// on stuff like ResponseBuilder, but contains request parameters,
end_comment

begin_comment
comment|// root filter lists (for filter exclusions), etc?
end_comment

begin_class
DECL|class|FacetComponentState
class|class
name|FacetComponentState
block|{
DECL|field|rb
name|ResponseBuilder
name|rb
decl_stmt|;
DECL|field|facetCommands
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|facetCommands
decl_stmt|;
DECL|field|facetRequest
name|FacetRequest
name|facetRequest
decl_stmt|;
DECL|field|isShard
name|boolean
name|isShard
decl_stmt|;
DECL|field|facetInfo
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|facetInfo
decl_stmt|;
comment|// _facet_ param: contains out-of-band facet info, mainly for refinement requests
comment|//
comment|// Only used for distributed search
comment|//
DECL|field|merger
name|FacetMerger
name|merger
decl_stmt|;
DECL|field|mcontext
name|FacetMerger
operator|.
name|Context
name|mcontext
decl_stmt|;
block|}
end_class

begin_comment
comment|// base class for facet functions that can be used in a sort
end_comment

begin_class
DECL|class|FacetSortableMerger
specifier|abstract
class|class
name|FacetSortableMerger
extends|extends
name|FacetMerger
block|{
DECL|method|prepareSort
specifier|public
name|void
name|prepareSort
parameter_list|()
block|{   }
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|Context
name|mcontext
parameter_list|)
block|{
comment|// nothing to do for simple stats...
block|}
comment|/** Return the normal comparison sort order.  The sort direction is only to be used in special circumstances (such as making NaN sort    * last regardless of sort order.)  Normal sorters do not need to pay attention to direction.    */
DECL|method|compareTo
specifier|public
specifier|abstract
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetRequest
operator|.
name|SortDirection
name|direction
parameter_list|)
function_decl|;
block|}
end_class

begin_class
DECL|class|FacetDoubleMerger
specifier|abstract
class|class
name|FacetDoubleMerger
extends|extends
name|FacetSortableMerger
block|{
annotation|@
name|Override
DECL|method|merge
specifier|public
specifier|abstract
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
function_decl|;
DECL|method|getDouble
specifier|protected
specifier|abstract
name|double
name|getDouble
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|getDouble
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetRequest
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|getDouble
argument_list|()
argument_list|,
operator|(
operator|(
name|FacetDoubleMerger
operator|)
name|other
operator|)
operator|.
name|getDouble
argument_list|()
argument_list|,
name|direction
argument_list|)
return|;
block|}
DECL|method|compare
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|double
name|a
parameter_list|,
name|double
name|b
parameter_list|,
name|FacetRequest
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
if|if
condition|(
name|a
operator|<
name|b
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|a
operator|>
name|b
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|a
operator|!=
name|a
condition|)
block|{
comment|// a==NaN
if|if
condition|(
name|b
operator|!=
name|b
condition|)
block|{
return|return
literal|0
return|;
comment|// both NaN
block|}
return|return
operator|-
literal|1
operator|*
name|direction
operator|.
name|getMultiplier
argument_list|()
return|;
comment|// asc==-1, so this will put NaN at end of sort
block|}
if|if
condition|(
name|b
operator|!=
name|b
condition|)
block|{
comment|// b is NaN so a is greater
return|return
literal|1
operator|*
name|direction
operator|.
name|getMultiplier
argument_list|()
return|;
comment|// if sorting asc, make a less so NaN is at end
block|}
comment|// consider +-0 to be equal
return|return
literal|0
return|;
block|}
block|}
end_class

begin_class
DECL|class|FacetLongMerger
class|class
name|FacetLongMerger
extends|extends
name|FacetSortableMerger
block|{
DECL|field|val
name|long
name|val
decl_stmt|;
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|val
operator|+=
operator|(
operator|(
name|Number
operator|)
name|facetResult
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetRequest
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|val
argument_list|,
operator|(
operator|(
name|FacetLongMerger
operator|)
name|other
operator|)
operator|.
name|val
argument_list|)
return|;
block|}
block|}
end_class

begin_comment
comment|// base class for facets that create buckets (and can hence have sub-facets)
end_comment

begin_class
DECL|class|FacetBucketMerger
specifier|abstract
class|class
name|FacetBucketMerger
parameter_list|<
name|FacetRequestT
extends|extends
name|FacetRequest
parameter_list|>
extends|extends
name|FacetMerger
block|{
DECL|field|freq
name|FacetRequestT
name|freq
decl_stmt|;
DECL|method|FacetBucketMerger
specifier|public
name|FacetBucketMerger
parameter_list|(
name|FacetRequestT
name|freq
parameter_list|)
block|{
name|this
operator|.
name|freq
operator|=
name|freq
expr_stmt|;
block|}
comment|/** Bucketval is the representative value for the bucket.  Only applicable to terms and range queries to distinguish buckets. */
DECL|method|newBucket
name|FacetBucket
name|newBucket
parameter_list|(
name|Comparable
name|bucketVal
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
return|return
operator|new
name|FacetBucket
argument_list|(
name|this
argument_list|,
name|bucketVal
argument_list|,
name|mcontext
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getRefinement
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRefinement
parameter_list|(
name|Context
name|mcontext
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|refineTags
init|=
name|mcontext
operator|.
name|getSubsWithRefinement
argument_list|(
name|freq
argument_list|)
decl_stmt|;
return|return
literal|null
return|;
comment|// FIXME
block|}
comment|// do subs...
comment|// callback stuff for buckets?
comment|// passing object gives us a chance to specialize based on value
DECL|method|createFacetMerger
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
name|FacetRequest
name|sub
init|=
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|sub
operator|!=
literal|null
condition|)
block|{
return|return
name|sub
operator|.
name|createFacetMerger
argument_list|(
name|val
argument_list|)
return|;
block|}
name|AggValueSource
name|subStat
init|=
name|freq
operator|.
name|getFacetStats
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|subStat
operator|!=
literal|null
condition|)
block|{
return|return
name|subStat
operator|.
name|createFacetMerger
argument_list|(
name|val
argument_list|)
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"no merger for key="
operator|+
name|key
operator|+
literal|" , val="
operator|+
name|val
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
DECL|class|FacetQueryMerger
class|class
name|FacetQueryMerger
extends|extends
name|FacetBucketMerger
argument_list|<
name|FacetQuery
argument_list|>
block|{
DECL|field|bucket
name|FacetBucket
name|bucket
decl_stmt|;
DECL|method|FacetQueryMerger
specifier|public
name|FacetQueryMerger
parameter_list|(
name|FacetQuery
name|freq
parameter_list|)
block|{
name|super
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facet
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
block|{
name|bucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|facet
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getRefinement
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getRefinement
parameter_list|(
name|Context
name|mcontext
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
decl_stmt|;
if|if
condition|(
name|mcontext
operator|.
name|bucketWasMissing
argument_list|()
condition|)
block|{
comment|// if this bucket was missing, we need to get all subfacets that have partials (that need to list values for refinement)
name|tags
operator|=
name|mcontext
operator|.
name|getSubsWithPartial
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tags
operator|=
name|mcontext
operator|.
name|getSubsWithRefinement
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|refinement
init|=
name|bucket
operator|.
name|getRefinement
argument_list|(
name|mcontext
argument_list|,
name|tags
argument_list|)
decl_stmt|;
return|return
name|refinement
return|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|Context
name|mcontext
parameter_list|)
block|{
comment|// FIXME we need to propagate!!!
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|bucket
operator|.
name|getMergedBucket
argument_list|()
return|;
block|}
block|}
end_class

end_unit

