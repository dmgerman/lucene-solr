begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|FloatDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|payloads
operator|.
name|PayloadFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|PayloadDecoder
import|;
end_import

begin_class
DECL|class|FloatPayloadValueSource
specifier|public
class|class
name|FloatPayloadValueSource
extends|extends
name|ValueSource
block|{
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|val
specifier|protected
specifier|final
name|String
name|val
decl_stmt|;
DECL|field|indexedField
specifier|protected
specifier|final
name|String
name|indexedField
decl_stmt|;
DECL|field|indexedBytes
specifier|protected
specifier|final
name|BytesRef
name|indexedBytes
decl_stmt|;
DECL|field|decoder
specifier|protected
specifier|final
name|PayloadDecoder
name|decoder
decl_stmt|;
DECL|field|payloadFunction
specifier|protected
specifier|final
name|PayloadFunction
name|payloadFunction
decl_stmt|;
DECL|field|defaultValueSource
specifier|protected
specifier|final
name|ValueSource
name|defaultValueSource
decl_stmt|;
DECL|method|FloatPayloadValueSource
specifier|public
name|FloatPayloadValueSource
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|val
parameter_list|,
name|String
name|indexedField
parameter_list|,
name|BytesRef
name|indexedBytes
parameter_list|,
name|PayloadDecoder
name|decoder
parameter_list|,
name|PayloadFunction
name|payloadFunction
parameter_list|,
name|ValueSource
name|defaultValueSource
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
name|this
operator|.
name|indexedField
operator|=
name|indexedField
expr_stmt|;
name|this
operator|.
name|indexedBytes
operator|=
name|indexedBytes
expr_stmt|;
name|this
operator|.
name|decoder
operator|=
name|decoder
expr_stmt|;
name|this
operator|.
name|payloadFunction
operator|=
name|payloadFunction
expr_stmt|;
name|this
operator|.
name|defaultValueSource
operator|=
name|defaultValueSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Fields
name|fields
init|=
name|readerContext
operator|.
name|reader
argument_list|()
operator|.
name|fields
argument_list|()
decl_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|fields
operator|.
name|terms
argument_list|(
name|indexedField
argument_list|)
decl_stmt|;
name|FunctionValues
name|defaultValues
init|=
name|defaultValueSource
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
decl_stmt|;
comment|// copied the bulk of this from TFValueSource - TODO: this is a very repeated pattern - base-class this advance logic stuff?
return|return
operator|new
name|FloatDocValues
argument_list|(
name|this
argument_list|)
block|{
name|PostingsEnum
name|docs
decl_stmt|;
name|int
name|atDoc
decl_stmt|;
name|int
name|lastDocRequested
init|=
operator|-
literal|1
decl_stmt|;
block|{
name|reset
parameter_list|()
constructor_decl|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
comment|// no one should call us for deleted docs?
if|if
condition|(
name|terms
operator|!=
literal|null
condition|)
block|{
specifier|final
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|indexedBytes
argument_list|)
condition|)
block|{
name|docs
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|ALL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docs
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|docs
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|docs
operator|==
literal|null
condition|)
block|{
comment|// dummy PostingsEnum so floatVal() can work
comment|// when would this be called?  if field/val did not match?  this is called for every doc?  create once and cache?
name|docs
operator|=
operator|new
name|PostingsEnum
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
return|return
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
expr_stmt|;
block|}
name|atDoc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|floatVal
parameter_list|(
name|int
name|doc
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|doc
operator|<
name|lastDocRequested
condition|)
block|{
comment|// out-of-order access.... reset
name|reset
argument_list|()
expr_stmt|;
block|}
name|lastDocRequested
operator|=
name|doc
expr_stmt|;
if|if
condition|(
name|atDoc
operator|<
name|doc
condition|)
block|{
name|atDoc
operator|=
name|docs
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|atDoc
operator|>
name|doc
condition|)
block|{
comment|// term doesn't match this document... either because we hit the
comment|// end, or because the next doc is after this doc.
return|return
name|defaultValues
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
comment|// a match!
name|int
name|freq
init|=
name|docs
operator|.
name|freq
argument_list|()
decl_stmt|;
name|int
name|numPayloadsSeen
init|=
literal|0
decl_stmt|;
name|float
name|currentScore
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|freq
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|BytesRef
name|payload
init|=
name|docs
operator|.
name|getPayload
argument_list|()
decl_stmt|;
if|if
condition|(
name|payload
operator|!=
literal|null
condition|)
block|{
name|float
name|payloadVal
init|=
name|decoder
operator|.
name|decode
argument_list|(
literal|null
argument_list|,
name|atDoc
argument_list|,
name|docs
operator|.
name|startOffset
argument_list|()
argument_list|,
name|docs
operator|.
name|endOffset
argument_list|()
argument_list|,
name|payload
argument_list|)
decl_stmt|;
comment|// payloadFunction = null represents "first"
if|if
condition|(
name|payloadFunction
operator|==
literal|null
condition|)
return|return
name|payloadVal
return|;
name|currentScore
operator|=
name|payloadFunction
operator|.
name|currentScore
argument_list|(
name|doc
argument_list|,
name|indexedField
argument_list|,
name|docs
operator|.
name|startOffset
argument_list|()
argument_list|,
name|docs
operator|.
name|endOffset
argument_list|()
argument_list|,
name|numPayloadsSeen
argument_list|,
name|currentScore
argument_list|,
name|payloadVal
argument_list|)
expr_stmt|;
name|numPayloadsSeen
operator|++
expr_stmt|;
block|}
block|}
return|return
operator|(
name|numPayloadsSeen
operator|>
literal|0
operator|)
condition|?
name|payloadFunction
operator|.
name|docScore
argument_list|(
name|doc
argument_list|,
name|indexedField
argument_list|,
name|numPayloadsSeen
argument_list|,
name|currentScore
argument_list|)
else|:
name|defaultValues
operator|.
name|floatVal
argument_list|(
name|doc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"caught exception in function "
operator|+
name|description
argument_list|()
operator|+
literal|" : doc="
operator|+
name|doc
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
comment|// TODO: should this be formalized at the ValueSource level?  Seems to be the convention
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
literal|"payload"
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|name
argument_list|()
operator|+
literal|'('
operator|+
name|field
operator|+
literal|','
operator|+
name|val
operator|+
literal|','
operator|+
name|defaultValueSource
operator|.
name|toString
argument_list|()
operator|+
literal|')'
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|FloatPayloadValueSource
name|that
init|=
operator|(
name|FloatPayloadValueSource
operator|)
name|o
decl_stmt|;
if|if
condition|(
operator|!
name|indexedField
operator|.
name|equals
argument_list|(
name|that
operator|.
name|indexedField
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|indexedBytes
operator|!=
literal|null
condition|?
operator|!
name|indexedBytes
operator|.
name|equals
argument_list|(
name|that
operator|.
name|indexedBytes
argument_list|)
else|:
name|that
operator|.
name|indexedBytes
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|decoder
operator|.
name|equals
argument_list|(
name|that
operator|.
name|decoder
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|payloadFunction
operator|!=
literal|null
condition|?
operator|!
name|payloadFunction
operator|.
name|equals
argument_list|(
name|that
operator|.
name|payloadFunction
argument_list|)
else|:
name|that
operator|.
name|payloadFunction
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|defaultValueSource
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultValueSource
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|indexedField
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|indexedBytes
operator|!=
literal|null
condition|?
name|indexedBytes
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|decoder
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
operator|(
name|payloadFunction
operator|!=
literal|null
condition|?
name|payloadFunction
operator|.
name|hashCode
argument_list|()
else|:
literal|0
operator|)
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|defaultValueSource
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

