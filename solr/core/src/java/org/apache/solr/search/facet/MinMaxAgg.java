begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|StrFieldSource
import|;
end_import

begin_class
DECL|class|MinMaxAgg
specifier|public
class|class
name|MinMaxAgg
extends|extends
name|SimpleAggValueSource
block|{
DECL|field|minmax
specifier|final
name|int
name|minmax
decl_stmt|;
comment|// a multiplier to reverse the normal order of compare if this is max instead of min (i.e. max will be -1)
DECL|method|MinMaxAgg
specifier|public
name|MinMaxAgg
parameter_list|(
name|String
name|minOrMax
parameter_list|,
name|ValueSource
name|vs
parameter_list|)
block|{
name|super
argument_list|(
name|minOrMax
argument_list|,
name|vs
argument_list|)
expr_stmt|;
name|minmax
operator|=
literal|"min"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|1
else|:
operator|-
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createSlotAcc
specifier|public
name|SlotAcc
name|createSlotAcc
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|int
name|numDocs
parameter_list|,
name|int
name|numSlots
parameter_list|)
throws|throws
name|IOException
block|{
name|ValueSource
name|vs
init|=
name|getArg
argument_list|()
decl_stmt|;
if|if
condition|(
name|vs
operator|instanceof
name|StrFieldSource
condition|)
block|{
name|String
name|field
init|=
operator|(
operator|(
name|StrFieldSource
operator|)
name|vs
operator|)
operator|.
name|getField
argument_list|()
decl_stmt|;
name|SchemaField
name|sf
init|=
name|fcontext
operator|.
name|qcontext
operator|.
name|searcher
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|multiValuedFieldCache
argument_list|()
condition|)
block|{
if|if
condition|(
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
comment|// dv
block|}
else|else
block|{
comment|// uif
block|}
block|}
else|else
block|{
return|return
operator|new
name|SingleValuedOrdAcc
argument_list|(
name|fcontext
argument_list|,
name|sf
argument_list|,
name|numSlots
argument_list|)
return|;
block|}
block|}
comment|// numeric functions
return|return
operator|new
name|ValSlotAcc
argument_list|(
name|vs
argument_list|,
name|fcontext
argument_list|,
name|numSlots
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createFacetMerger
specifier|public
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|Object
name|prototype
parameter_list|)
block|{
if|if
condition|(
name|prototype
operator|instanceof
name|Number
condition|)
return|return
operator|new
name|NumericMerger
argument_list|()
return|;
elseif|else
if|if
condition|(
name|prototype
operator|instanceof
name|Comparable
condition|)
block|{
return|return
operator|new
name|ComparableMerger
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"min/max merge of "
operator|+
name|prototype
argument_list|)
throw|;
block|}
block|}
comment|// TODO: can this be replaced by ComparableMerger?
DECL|class|NumericMerger
specifier|private
class|class
name|NumericMerger
extends|extends
name|FacetDoubleMerger
block|{
DECL|field|val
name|double
name|val
init|=
name|Double
operator|.
name|NaN
decl_stmt|;
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|double
name|result
init|=
operator|(
operator|(
name|Number
operator|)
name|facetResult
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|result
argument_list|,
name|val
argument_list|)
operator|*
name|minmax
operator|<
literal|0
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|val
argument_list|)
condition|)
block|{
name|val
operator|=
name|result
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getDouble
specifier|protected
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|val
return|;
block|}
block|}
DECL|class|ComparableMerger
specifier|private
class|class
name|ComparableMerger
extends|extends
name|FacetSortableMerger
block|{
DECL|field|val
name|Comparable
name|val
decl_stmt|;
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|Comparable
name|other
init|=
operator|(
name|Comparable
operator|)
name|facetResult
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
name|val
operator|=
name|other
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|other
operator|.
name|compareTo
argument_list|(
name|val
argument_list|)
operator|*
name|minmax
operator|<
literal|0
condition|)
block|{
name|val
operator|=
name|other
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
return|return
name|val
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|FacetSortableMerger
name|other
parameter_list|,
name|FacetRequest
operator|.
name|SortDirection
name|direction
parameter_list|)
block|{
comment|// NOTE: we don't use the minmax multiplier here because we still want natural ordering between slots (i.e. min(field) asc and max(field) asc) both sort "A" before "Z")
return|return
name|this
operator|.
name|val
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|ComparableMerger
operator|)
name|other
operator|)
operator|.
name|val
argument_list|)
return|;
block|}
block|}
DECL|class|ValSlotAcc
class|class
name|ValSlotAcc
extends|extends
name|DoubleFuncSlotAcc
block|{
DECL|method|ValSlotAcc
specifier|public
name|ValSlotAcc
parameter_list|(
name|ValueSource
name|values
parameter_list|,
name|FacetContext
name|fcontext
parameter_list|,
name|int
name|numSlots
parameter_list|)
block|{
name|super
argument_list|(
name|values
argument_list|,
name|fcontext
argument_list|,
name|numSlots
argument_list|,
name|Double
operator|.
name|NaN
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|slotNum
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|val
init|=
name|values
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|0
operator|&&
operator|!
name|values
operator|.
name|exists
argument_list|(
name|doc
argument_list|)
condition|)
return|return;
comment|// depend on fact that non existing values return 0 for func query
name|double
name|currVal
init|=
name|result
index|[
name|slotNum
index|]
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|val
argument_list|,
name|currVal
argument_list|)
operator|*
name|minmax
operator|<
literal|0
operator|||
name|Double
operator|.
name|isNaN
argument_list|(
name|currVal
argument_list|)
condition|)
block|{
name|result
index|[
name|slotNum
index|]
operator|=
name|val
expr_stmt|;
block|}
block|}
block|}
DECL|class|OrdAcc
specifier|abstract
class|class
name|OrdAcc
extends|extends
name|SlotAcc
block|{
DECL|field|MISSING
specifier|final
specifier|static
name|int
name|MISSING
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|field
name|SchemaField
name|field
decl_stmt|;
DECL|field|slotOrd
name|int
index|[]
name|slotOrd
decl_stmt|;
DECL|method|OrdAcc
specifier|public
name|OrdAcc
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|SchemaField
name|field
parameter_list|,
name|int
name|numSlots
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fcontext
argument_list|)
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|slotOrd
operator|=
operator|new
name|int
index|[
name|numSlots
index|]
expr_stmt|;
if|if
condition|(
name|MISSING
operator|!=
literal|0
condition|)
name|Arrays
operator|.
name|fill
argument_list|(
name|slotOrd
argument_list|,
name|MISSING
argument_list|)
expr_stmt|;
block|}
DECL|method|lookupOrd
specifier|abstract
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slotA
parameter_list|,
name|int
name|slotB
parameter_list|)
block|{
name|int
name|a
init|=
name|slotOrd
index|[
name|slotA
index|]
decl_stmt|;
name|int
name|b
init|=
name|slotOrd
index|[
name|slotB
index|]
decl_stmt|;
comment|// NOTE: we don't use the minmax multiplier here because we still want natural ordering between slots (i.e. min(field) asc and max(field) asc) both sort "A" before "Z")
return|return
name|a
operator|-
name|b
return|;
comment|// TODO: we probably want sort-missing-last functionality
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|Object
name|getValue
parameter_list|(
name|int
name|slotNum
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|globOrd
init|=
name|slotOrd
index|[
name|slotNum
index|]
decl_stmt|;
if|if
condition|(
name|globOrd
operator|==
name|MISSING
condition|)
return|return
literal|null
return|;
name|BytesRef
name|term
init|=
name|lookupOrd
argument_list|(
name|globOrd
argument_list|)
decl_stmt|;
return|return
name|field
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|field
argument_list|,
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|slotOrd
argument_list|,
name|MISSING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|resize
specifier|public
name|void
name|resize
parameter_list|(
name|Resizer
name|resizer
parameter_list|)
block|{
name|slotOrd
operator|=
name|resizer
operator|.
name|resize
argument_list|(
name|slotOrd
argument_list|,
name|MISSING
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|SingleValuedOrdAcc
class|class
name|SingleValuedOrdAcc
extends|extends
name|OrdAcc
block|{
DECL|field|topLevel
name|SortedDocValues
name|topLevel
decl_stmt|;
DECL|field|subDvs
name|SortedDocValues
index|[]
name|subDvs
decl_stmt|;
DECL|field|ordMap
name|MultiDocValues
operator|.
name|OrdinalMap
name|ordMap
decl_stmt|;
DECL|field|toGlobal
name|LongValues
name|toGlobal
decl_stmt|;
DECL|field|subDv
name|SortedDocValues
name|subDv
decl_stmt|;
DECL|method|SingleValuedOrdAcc
specifier|public
name|SingleValuedOrdAcc
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|SchemaField
name|field
parameter_list|,
name|int
name|numSlots
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|fcontext
argument_list|,
name|field
argument_list|,
name|numSlots
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|topLevel
operator|=
name|FieldUtil
operator|.
name|getSortedDocValues
argument_list|(
name|fcontext
operator|.
name|qcontext
argument_list|,
name|field
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|topLevel
operator|instanceof
name|MultiDocValues
operator|.
name|MultiSortedDocValues
condition|)
block|{
name|ordMap
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|topLevel
operator|)
operator|.
name|mapping
expr_stmt|;
name|subDvs
operator|=
operator|(
operator|(
name|MultiDocValues
operator|.
name|MultiSortedDocValues
operator|)
name|topLevel
operator|)
operator|.
name|values
expr_stmt|;
block|}
else|else
block|{
name|ordMap
operator|=
literal|null
expr_stmt|;
name|subDvs
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|protected
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|topLevel
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|topLevel
operator|==
literal|null
condition|)
block|{
name|reset
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|setNextReader
argument_list|(
name|readerContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|subDvs
operator|!=
literal|null
condition|)
block|{
name|subDv
operator|=
name|subDvs
index|[
name|readerContext
operator|.
name|ord
index|]
expr_stmt|;
name|toGlobal
operator|=
name|ordMap
operator|.
name|getGlobalOrds
argument_list|(
name|readerContext
operator|.
name|ord
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|readerContext
operator|.
name|ord
operator|==
literal|0
operator|||
name|topLevel
operator|.
name|getValueCount
argument_list|()
operator|==
literal|0
assert|;
name|subDv
operator|=
name|topLevel
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|slotNum
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|doc
operator|>
name|subDv
operator|.
name|docID
argument_list|()
condition|)
block|{
name|subDv
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
name|subDv
operator|.
name|docID
argument_list|()
condition|)
block|{
name|int
name|segOrd
init|=
name|subDv
operator|.
name|ordValue
argument_list|()
decl_stmt|;
name|int
name|ord
init|=
name|toGlobal
operator|==
literal|null
condition|?
name|segOrd
else|:
operator|(
name|int
operator|)
name|toGlobal
operator|.
name|get
argument_list|(
name|segOrd
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|ord
operator|-
name|slotOrd
index|[
name|slotNum
index|]
operator|)
operator|*
name|minmax
operator|<
literal|0
operator|||
name|slotOrd
index|[
name|slotNum
index|]
operator|==
name|MISSING
condition|)
block|{
name|slotOrd
index|[
name|slotNum
index|]
operator|=
name|ord
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

