begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|FacetParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_class
DECL|class|FacetRangeMerger
specifier|public
class|class
name|FacetRangeMerger
extends|extends
name|FacetRequestSortedMerger
argument_list|<
name|FacetRange
argument_list|>
block|{
DECL|field|beforeBucket
name|FacetBucket
name|beforeBucket
decl_stmt|;
DECL|field|afterBucket
name|FacetBucket
name|afterBucket
decl_stmt|;
DECL|field|betweenBucket
name|FacetBucket
name|betweenBucket
decl_stmt|;
DECL|method|FacetRangeMerger
specifier|public
name|FacetRangeMerger
parameter_list|(
name|FacetRange
name|freq
parameter_list|)
block|{
name|super
argument_list|(
name|freq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createFacetMerger
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
block|{
return|return
name|super
operator|.
name|createFacetMerger
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|Object
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|merge
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|facetResult
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sortBuckets
specifier|public
name|void
name|sortBuckets
parameter_list|()
block|{
comment|// TODO: mincount>0 will mess up order?
name|sortedBuckets
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|Context
name|mcontext
parameter_list|)
block|{
comment|// nothing to do
block|}
DECL|method|merge
specifier|public
name|void
name|merge
parameter_list|(
name|SimpleOrderedMap
name|facetResult
parameter_list|,
name|Context
name|mcontext
parameter_list|)
block|{
name|boolean
name|all
init|=
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|ALL
argument_list|)
decl_stmt|;
if|if
condition|(
name|all
operator|||
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|BEFORE
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"before"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|beforeBucket
operator|==
literal|null
condition|)
block|{
name|beforeBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
name|beforeBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|all
operator|||
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|AFTER
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"after"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|afterBucket
operator|==
literal|null
condition|)
block|{
name|afterBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
name|afterBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|all
operator|||
name|freq
operator|.
name|others
operator|.
name|contains
argument_list|(
name|FacetParams
operator|.
name|FacetRangeOther
operator|.
name|BETWEEN
argument_list|)
condition|)
block|{
name|Object
name|o
init|=
name|facetResult
operator|.
name|get
argument_list|(
literal|"between"
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|betweenBucket
operator|==
literal|null
condition|)
block|{
name|betweenBucket
operator|=
name|newBucket
argument_list|(
literal|null
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
name|betweenBucket
operator|.
name|mergeBucket
argument_list|(
operator|(
name|SimpleOrderedMap
operator|)
name|o
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|bucketList
init|=
operator|(
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
operator|)
name|facetResult
operator|.
name|get
argument_list|(
literal|"buckets"
argument_list|)
decl_stmt|;
name|mergeBucketList
argument_list|(
name|bucketList
argument_list|,
name|mcontext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMergedResult
specifier|public
name|Object
name|getMergedResult
parameter_list|()
block|{
comment|// TODO: use sortedBuckets
name|SimpleOrderedMap
name|result
init|=
operator|new
name|SimpleOrderedMap
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|>
name|resultBuckets
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|buckets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FacetBucket
name|bucket
range|:
name|buckets
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|bucket
operator|.
name|getCount
argument_list|()
operator|<
name|freq
operator|.
name|mincount
condition|)
block|{
continue|continue;
block|}
name|resultBuckets
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
literal|"buckets"
argument_list|,
name|resultBuckets
argument_list|)
expr_stmt|;
if|if
condition|(
name|beforeBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"before"
argument_list|,
name|beforeBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|afterBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"after"
argument_list|,
name|afterBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|betweenBucket
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
literal|"between"
argument_list|,
name|betweenBucket
operator|.
name|getMergedBucket
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

