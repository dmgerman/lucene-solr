begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Rescorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|MergeStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|QueryElevationComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import

begin_class
DECL|class|AbstractReRankQuery
specifier|public
specifier|abstract
class|class
name|AbstractReRankQuery
extends|extends
name|RankQuery
block|{
DECL|field|mainQuery
specifier|protected
name|Query
name|mainQuery
decl_stmt|;
DECL|field|reRankDocs
specifier|final
specifier|protected
name|int
name|reRankDocs
decl_stmt|;
DECL|field|reRankQueryRescorer
specifier|final
specifier|protected
name|Rescorer
name|reRankQueryRescorer
decl_stmt|;
DECL|field|boostedPriority
specifier|protected
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|boostedPriority
decl_stmt|;
DECL|method|AbstractReRankQuery
specifier|public
name|AbstractReRankQuery
parameter_list|(
name|Query
name|mainQuery
parameter_list|,
name|int
name|reRankDocs
parameter_list|,
name|Rescorer
name|reRankQueryRescorer
parameter_list|)
block|{
name|this
operator|.
name|mainQuery
operator|=
name|mainQuery
expr_stmt|;
name|this
operator|.
name|reRankDocs
operator|=
name|reRankDocs
expr_stmt|;
name|this
operator|.
name|reRankQueryRescorer
operator|=
name|reRankQueryRescorer
expr_stmt|;
block|}
DECL|method|wrap
specifier|public
name|RankQuery
name|wrap
parameter_list|(
name|Query
name|_mainQuery
parameter_list|)
block|{
if|if
condition|(
name|_mainQuery
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|mainQuery
operator|=
name|_mainQuery
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
DECL|method|getMergeStrategy
specifier|public
name|MergeStrategy
name|getMergeStrategy
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|getTopDocsCollector
specifier|public
name|TopDocsCollector
name|getTopDocsCollector
parameter_list|(
name|int
name|len
parameter_list|,
name|QueryCommand
name|cmd
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|boostedPriority
operator|==
literal|null
condition|)
block|{
name|SolrRequestInfo
name|info
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|Map
name|context
init|=
name|info
operator|.
name|getReq
argument_list|()
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|this
operator|.
name|boostedPriority
operator|=
operator|(
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
operator|)
name|context
operator|.
name|get
argument_list|(
name|QueryElevationComponent
operator|.
name|BOOSTED_PRIORITY
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ReRankCollector
argument_list|(
name|reRankDocs
argument_list|,
name|len
argument_list|,
name|reRankQueryRescorer
argument_list|,
name|cmd
argument_list|,
name|searcher
argument_list|,
name|boostedPriority
argument_list|)
return|;
block|}
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|q
init|=
name|mainQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|q
operator|!=
name|mainQuery
condition|)
block|{
return|return
name|rewrite
argument_list|(
name|q
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
DECL|method|rewrite
specifier|protected
specifier|abstract
name|Query
name|rewrite
parameter_list|(
name|Query
name|rewrittenMainQuery
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|mainWeight
init|=
name|mainQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|,
name|boost
argument_list|)
decl_stmt|;
return|return
operator|new
name|ReRankWeight
argument_list|(
name|mainQuery
argument_list|,
name|reRankQueryRescorer
argument_list|,
name|searcher
argument_list|,
name|mainWeight
argument_list|)
return|;
block|}
block|}
end_class

end_unit

