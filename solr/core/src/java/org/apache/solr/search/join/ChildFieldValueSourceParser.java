begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|BitSetProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|QueryBitSetProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinSortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|FunctionQParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ValueSourceParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
operator|.
name|BlockJoinParentQParser
operator|.
name|AllParentsAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|ChildFieldValueSourceParser
specifier|public
class|class
name|ChildFieldValueSourceParser
extends|extends
name|ValueSourceParser
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|class|BlockJoinSortFieldValueSource
specifier|private
specifier|static
specifier|final
class|class
name|BlockJoinSortFieldValueSource
extends|extends
name|ValueSource
block|{
DECL|class|BytesToStringComparator
specifier|private
specifier|static
specifier|final
class|class
name|BytesToStringComparator
extends|extends
name|FieldComparator
argument_list|<
name|String
argument_list|>
block|{
DECL|field|byteRefs
specifier|private
specifier|final
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
name|byteRefs
decl_stmt|;
DECL|method|BytesToStringComparator
specifier|private
name|BytesToStringComparator
parameter_list|(
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
name|byteRefs
parameter_list|)
block|{
name|this
operator|.
name|byteRefs
operator|=
name|byteRefs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|slot1
parameter_list|,
name|int
name|slot2
parameter_list|)
block|{
return|return
name|byteRefs
operator|.
name|compare
argument_list|(
name|slot1
argument_list|,
name|slot2
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setTopValue
specifier|public
name|void
name|setTopValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|byteRefs
operator|.
name|setTopValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|value
specifier|public
name|String
name|value
parameter_list|(
name|int
name|slot
parameter_list|)
block|{
return|return
name|byteRefs
operator|.
name|value
argument_list|(
name|slot
argument_list|)
operator|.
name|utf8ToString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getLeafComparator
specifier|public
name|LeafFieldComparator
name|getLeafComparator
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|byteRefs
operator|.
name|getLeafComparator
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
DECL|field|childFilter
specifier|private
specifier|final
name|BitSetProducer
name|childFilter
decl_stmt|;
DECL|field|parentFilter
specifier|private
specifier|final
name|BitSetProducer
name|parentFilter
decl_stmt|;
DECL|field|childField
specifier|private
specifier|final
name|SchemaField
name|childField
decl_stmt|;
DECL|method|BlockJoinSortFieldValueSource
specifier|private
name|BlockJoinSortFieldValueSource
parameter_list|(
name|BitSetProducer
name|childFilter
parameter_list|,
name|BitSetProducer
name|parentFilter
parameter_list|,
name|SchemaField
name|childField
parameter_list|)
block|{
name|this
operator|.
name|childFilter
operator|=
name|childFilter
expr_stmt|;
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childField
operator|=
name|childField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|childField
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|childField
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|childFilter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|childFilter
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
name|prime
operator|*
name|result
operator|+
operator|(
operator|(
name|parentFilter
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|parentFilter
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|BlockJoinSortFieldValueSource
name|other
init|=
operator|(
name|BlockJoinSortFieldValueSource
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|childField
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|childField
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|childField
operator|.
name|equals
argument_list|(
name|other
operator|.
name|childField
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|childFilter
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|childFilter
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|childFilter
operator|.
name|equals
argument_list|(
name|other
operator|.
name|childFilter
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|parentFilter
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|parentFilter
operator|!=
literal|null
condition|)
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
operator|!
name|parentFilter
operator|.
name|equals
argument_list|(
name|other
operator|.
name|parentFilter
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"BlockJoinSortFieldValueSource [childFilter="
operator|+
name|childFilter
operator|+
literal|", parentFilter="
operator|+
name|parentFilter
operator|+
literal|", childField="
operator|+
name|childField
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|boolean
name|reverse
parameter_list|)
block|{
specifier|final
name|Type
name|type
init|=
name|childField
operator|.
name|getSortField
argument_list|(
name|reverse
argument_list|)
operator|.
name|getType
argument_list|()
decl_stmt|;
return|return
operator|new
name|ToParentBlockJoinSortField
argument_list|(
name|childField
operator|.
name|getName
argument_list|()
argument_list|,
name|type
argument_list|,
name|reverse
argument_list|,
name|parentFilter
argument_list|,
name|childFilter
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|getComparator
parameter_list|(
name|int
name|numHits
parameter_list|,
name|int
name|sortPos
parameter_list|)
block|{
specifier|final
name|FieldComparator
argument_list|<
name|?
argument_list|>
name|comparator
init|=
name|super
operator|.
name|getComparator
argument_list|(
name|numHits
argument_list|,
name|sortPos
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
name|Type
operator|.
name|STRING
condition|?
operator|new
name|BytesToStringComparator
argument_list|(
operator|(
name|FieldComparator
argument_list|<
name|BytesRef
argument_list|>
operator|)
name|comparator
argument_list|)
else|:
name|comparator
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
name|NAME
operator|+
literal|" for "
operator|+
name|childField
operator|.
name|getName
argument_list|()
operator|+
literal|" of "
operator|+
name|query
argument_list|(
name|childFilter
argument_list|)
return|;
block|}
DECL|method|query
specifier|private
name|String
name|query
parameter_list|(
name|BitSetProducer
name|bits
parameter_list|)
block|{
return|return
operator|(
name|bits
operator|instanceof
name|QueryBitSetProducer
operator|)
condition|?
operator|(
operator|(
name|QueryBitSetProducer
operator|)
name|bits
operator|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|()
else|:
name|bits
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValues
specifier|public
name|FunctionValues
name|getValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|this
operator|+
literal|" is only for sorting"
argument_list|)
throw|;
block|}
block|}
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"childfield"
decl_stmt|;
annotation|@
name|Override
DECL|method|parse
specifier|public
name|ValueSource
name|parse
parameter_list|(
name|FunctionQParser
name|fp
parameter_list|)
throws|throws
name|SyntaxError
block|{
specifier|final
name|String
name|sortFieldName
init|=
name|fp
operator|.
name|parseArg
argument_list|()
decl_stmt|;
specifier|final
name|Query
name|query
decl_stmt|;
if|if
condition|(
name|fp
operator|.
name|hasMoreArguments
argument_list|()
condition|)
block|{
name|query
operator|=
name|fp
operator|.
name|parseNestedQuery
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
name|fp
operator|.
name|subQuery
argument_list|(
name|fp
operator|.
name|getParam
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|)
argument_list|,
name|BlockJoinParentQParserPlugin
operator|.
name|NAME
argument_list|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|BitSetProducer
name|parentFilter
decl_stmt|;
name|BitSetProducer
name|childFilter
decl_stmt|;
name|SchemaField
name|sf
decl_stmt|;
try|try
block|{
name|AllParentsAware
name|bjQ
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|query
operator|instanceof
name|AllParentsAware
operator|)
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"expect a reference to block join query "
operator|+
name|AllParentsAware
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" in "
operator|+
name|fp
operator|.
name|getString
argument_list|()
argument_list|)
throw|;
block|}
name|bjQ
operator|=
operator|(
name|AllParentsAware
operator|)
name|query
expr_stmt|;
name|parentFilter
operator|=
name|BlockJoinParentQParser
operator|.
name|getCachedFilter
argument_list|(
name|fp
operator|.
name|getReq
argument_list|()
argument_list|,
name|bjQ
operator|.
name|getParentQuery
argument_list|()
argument_list|)
operator|.
name|filter
expr_stmt|;
name|childFilter
operator|=
name|BlockJoinParentQParser
operator|.
name|getCachedFilter
argument_list|(
name|fp
operator|.
name|getReq
argument_list|()
argument_list|,
name|bjQ
operator|.
name|getChildQuery
argument_list|()
argument_list|)
operator|.
name|filter
expr_stmt|;
if|if
condition|(
name|sortFieldName
operator|==
literal|null
operator|||
name|sortFieldName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
literal|"field is omitted in "
operator|+
name|fp
operator|.
name|getString
argument_list|()
argument_list|)
throw|;
block|}
name|sf
operator|=
name|fp
operator|.
name|getReq
argument_list|()
operator|.
name|getSchema
argument_list|()
operator|.
name|getFieldOrNull
argument_list|(
name|sortFieldName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|sf
condition|)
block|{
throw|throw
operator|new
name|SyntaxError
argument_list|(
name|NAME
operator|+
literal|" sort param field \""
operator|+
name|sortFieldName
operator|+
literal|"\" can't be found in schema"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SyntaxError
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"can't parse "
operator|+
name|fp
operator|.
name|getString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
operator|new
name|BlockJoinSortFieldValueSource
argument_list|(
name|childFilter
argument_list|,
name|parentFilter
argument_list|,
name|sf
argument_list|)
return|;
block|}
block|}
end_class

end_unit

