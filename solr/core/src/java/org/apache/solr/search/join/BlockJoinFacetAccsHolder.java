begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
operator|.
name|ToParentBlockJoinQuery
operator|.
name|ChildrenMatchesScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
operator|.
name|BlockJoinFieldFacetAccumulator
operator|.
name|AggregatableDocIter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
operator|.
name|BlockJoinFieldFacetAccumulator
operator|.
name|SortedIntsAggDocIterator
import|;
end_import

begin_comment
comment|/**  * For each collected parent document creates matched block, which is a docSet with matched children and parent doc  * itself. Then updates each BlockJoinFieldFacetAccumulator with the created matched block.  */
end_comment

begin_class
DECL|class|BlockJoinFacetAccsHolder
class|class
name|BlockJoinFacetAccsHolder
block|{
DECL|field|blockJoinFieldFacetAccumulators
specifier|private
name|BlockJoinFieldFacetAccumulator
index|[]
name|blockJoinFieldFacetAccumulators
decl_stmt|;
DECL|field|firstSegment
specifier|private
name|boolean
name|firstSegment
init|=
literal|true
decl_stmt|;
DECL|field|blockJoinScorer
specifier|private
name|ChildrenMatchesScorer
name|blockJoinScorer
decl_stmt|;
DECL|field|childDocs
specifier|private
name|int
index|[]
name|childDocs
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
DECL|method|BlockJoinFacetAccsHolder
name|BlockJoinFacetAccsHolder
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|IOException
block|{
name|String
index|[]
name|facetFieldNames
init|=
name|BlockJoinFacetComponentSupport
operator|.
name|getChildFacetFields
argument_list|(
name|req
argument_list|)
decl_stmt|;
assert|assert
name|facetFieldNames
operator|!=
literal|null
assert|;
name|blockJoinFieldFacetAccumulators
operator|=
operator|new
name|BlockJoinFieldFacetAccumulator
index|[
name|facetFieldNames
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|facetFieldNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|blockJoinFieldFacetAccumulators
index|[
name|i
index|]
operator|=
operator|new
name|BlockJoinFieldFacetAccumulator
argument_list|(
name|facetFieldNames
index|[
name|i
index|]
argument_list|,
name|req
operator|.
name|getSearcher
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BlockJoinFieldFacetAccumulator
name|blockJoinFieldFacetAccumulator
range|:
name|blockJoinFieldFacetAccumulators
control|)
block|{
if|if
condition|(
operator|!
name|firstSegment
condition|)
block|{
name|blockJoinFieldFacetAccumulator
operator|.
name|migrateGlobal
argument_list|()
expr_stmt|;
block|}
name|blockJoinFieldFacetAccumulator
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|firstSegment
operator|=
literal|false
expr_stmt|;
block|}
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|BlockJoinFieldFacetAccumulator
name|blockJoinFieldFacetAccumulator
range|:
name|blockJoinFieldFacetAccumulators
control|)
block|{
name|blockJoinFieldFacetAccumulator
operator|.
name|migrateGlobal
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|incrementFacets
specifier|protected
name|void
name|incrementFacets
parameter_list|(
name|int
name|parent
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
index|[]
name|docNums
init|=
name|blockJoinScorer
operator|.
name|swapChildDocs
argument_list|(
name|childDocs
argument_list|)
decl_stmt|;
comment|// now we don't
comment|//includeParentDoc(parent);
comment|//final int childCountPlusParent = childTracking.getChildCount()+1;
specifier|final
name|int
name|childCountNoParent
init|=
name|blockJoinScorer
operator|.
name|getChildCount
argument_list|()
decl_stmt|;
specifier|final
name|SortedIntsAggDocIterator
name|iter
init|=
operator|new
name|SortedIntsAggDocIterator
argument_list|(
name|docNums
argument_list|,
name|childCountNoParent
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|countFacets
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
comment|/** is not used    protected int[] includeParentDoc(int parent) {     final int[] docNums = ArrayUtil.grow(childTracking.getChildDocs(), childTracking.getChildCount()+1);     childTracking.setChildDocs(docNums); // we include parent into block, I'm not sure whether it makes sense     docNums[childTracking.getChildCount()]=parent;     return docNums;   }*/
DECL|method|countFacets
specifier|protected
name|void
name|countFacets
parameter_list|(
specifier|final
name|AggregatableDocIter
name|iter
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|BlockJoinFieldFacetAccumulator
name|blockJoinFieldFacetAccumulator
range|:
name|blockJoinFieldFacetAccumulators
control|)
block|{
name|blockJoinFieldFacetAccumulator
operator|.
name|updateCountsWithMatchedBlock
argument_list|(
name|iter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getFacets
name|NamedList
name|getFacets
parameter_list|()
block|{
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|facets
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|blockJoinFieldFacetAccumulators
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|BlockJoinFieldFacetAccumulator
name|state
range|:
name|blockJoinFieldFacetAccumulators
control|)
block|{
name|facets
operator|.
name|add
argument_list|(
name|state
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|state
operator|.
name|getFacetValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|facets
return|;
block|}
block|}
end_class

end_unit

