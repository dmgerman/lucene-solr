begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SparseFixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ResponseBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_class
DECL|class|SignificantTermsQParserPlugin
specifier|public
class|class
name|SignificantTermsQParserPlugin
extends|extends
name|QParserPlugin
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"sigificantTerms"
decl_stmt|;
annotation|@
name|Override
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|SignifcantTermsQParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
return|;
block|}
DECL|class|SignifcantTermsQParser
specifier|private
specifier|static
class|class
name|SignifcantTermsQParser
extends|extends
name|QParser
block|{
DECL|method|SignifcantTermsQParser
specifier|public
name|SignifcantTermsQParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
name|String
name|field
init|=
name|getParam
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"numTerms"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|minDocs
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"minDocFreq"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
decl_stmt|;
name|float
name|maxDocs
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"maxDocFreq"
argument_list|,
literal|".3"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|minTermLength
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"minTermLength"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SignificantTermsQuery
argument_list|(
name|field
argument_list|,
name|numTerms
argument_list|,
name|minDocs
argument_list|,
name|maxDocs
argument_list|,
name|minTermLength
argument_list|)
return|;
block|}
block|}
DECL|class|SignificantTermsQuery
specifier|private
specifier|static
class|class
name|SignificantTermsQuery
extends|extends
name|AnalyticsQuery
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|numTerms
specifier|private
name|int
name|numTerms
decl_stmt|;
DECL|field|maxDocs
specifier|private
name|float
name|maxDocs
decl_stmt|;
DECL|field|minDocs
specifier|private
name|float
name|minDocs
decl_stmt|;
DECL|field|minTermLength
specifier|private
name|int
name|minTermLength
decl_stmt|;
DECL|method|SignificantTermsQuery
specifier|public
name|SignificantTermsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|float
name|minDocs
parameter_list|,
name|float
name|maxDocs
parameter_list|,
name|int
name|minTermLength
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
name|numTerms
expr_stmt|;
name|this
operator|.
name|minDocs
operator|=
name|minDocs
expr_stmt|;
name|this
operator|.
name|maxDocs
operator|=
name|maxDocs
expr_stmt|;
name|this
operator|.
name|minTermLength
operator|=
name|minTermLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getAnalyticsCollector
specifier|public
name|DelegatingCollector
name|getAnalyticsCollector
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|)
block|{
return|return
operator|new
name|SignifcantTermsCollector
argument_list|(
name|rb
argument_list|,
name|searcher
argument_list|,
name|field
argument_list|,
name|numTerms
argument_list|,
name|minDocs
argument_list|,
name|maxDocs
argument_list|,
name|minTermLength
argument_list|)
return|;
block|}
block|}
DECL|class|SignifcantTermsCollector
specifier|private
specifier|static
class|class
name|SignifcantTermsCollector
extends|extends
name|DelegatingCollector
block|{
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|searcher
specifier|private
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|rb
specifier|private
name|ResponseBuilder
name|rb
decl_stmt|;
DECL|field|numTerms
specifier|private
name|int
name|numTerms
decl_stmt|;
DECL|field|docs
specifier|private
name|SparseFixedBitSet
name|docs
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|field|minDocs
specifier|private
name|float
name|minDocs
decl_stmt|;
DECL|field|maxDocs
specifier|private
name|float
name|maxDocs
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
decl_stmt|;
DECL|field|minTermLength
specifier|private
name|int
name|minTermLength
decl_stmt|;
DECL|field|highestCollected
specifier|private
name|int
name|highestCollected
decl_stmt|;
DECL|method|SignifcantTermsCollector
specifier|public
name|SignifcantTermsCollector
parameter_list|(
name|ResponseBuilder
name|rb
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|String
name|field
parameter_list|,
name|int
name|numTerms
parameter_list|,
name|float
name|minDocs
parameter_list|,
name|float
name|maxDocs
parameter_list|,
name|int
name|minTermLength
parameter_list|)
block|{
name|this
operator|.
name|rb
operator|=
name|rb
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
name|numTerms
expr_stmt|;
name|this
operator|.
name|docs
operator|=
operator|new
name|SparseFixedBitSet
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDocs
operator|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|numDocs
argument_list|()
expr_stmt|;
name|this
operator|.
name|minDocs
operator|=
name|minDocs
expr_stmt|;
name|this
operator|.
name|maxDocs
operator|=
name|maxDocs
expr_stmt|;
name|this
operator|.
name|minTermLength
operator|=
name|minTermLength
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|doSetNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|highestCollected
operator|=
name|context
operator|.
name|docBase
operator|+
name|doc
expr_stmt|;
name|docs
operator|.
name|set
argument_list|(
name|highestCollected
argument_list|)
expr_stmt|;
operator|++
name|count
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|()
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|outTerms
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|outFreq
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|outQueryFreq
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|scores
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|allFreq
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|allQueryFreq
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"numDocs"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"resultCount"
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"sterms"
argument_list|,
name|outTerms
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"scores"
argument_list|,
name|scores
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"docFreq"
argument_list|,
name|outFreq
argument_list|)
expr_stmt|;
name|rb
operator|.
name|rsp
operator|.
name|add
argument_list|(
literal|"queryDocFreq"
argument_list|,
name|outQueryFreq
argument_list|)
expr_stmt|;
comment|//TODO: Use a priority queue
name|TreeSet
argument_list|<
name|TermWithScore
argument_list|>
name|topTerms
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Terms
name|terms
init|=
operator|(
operator|(
name|SolrIndexSearcher
operator|)
name|searcher
operator|)
operator|.
name|getSlowAtomicReader
argument_list|()
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
name|terms
operator|==
literal|null
condition|?
name|TermsEnum
operator|.
name|EMPTY
else|:
name|terms
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|term
decl_stmt|;
name|PostingsEnum
name|postingsEnum
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|int
name|docFreq
init|=
name|termsEnum
operator|.
name|docFreq
argument_list|()
decl_stmt|;
if|if
condition|(
name|minDocs
operator|<
literal|1.0
condition|)
block|{
if|if
condition|(
operator|(
name|float
operator|)
name|docFreq
operator|/
name|numDocs
operator|<
name|minDocs
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|docFreq
operator|<
name|minDocs
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|maxDocs
operator|<
literal|1.0
condition|)
block|{
if|if
condition|(
operator|(
name|float
operator|)
name|docFreq
operator|/
name|numDocs
operator|>
name|maxDocs
condition|)
block|{
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|docFreq
operator|>
name|maxDocs
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|term
operator|.
name|length
operator|<
name|minTermLength
condition|)
block|{
continue|continue;
block|}
name|int
name|tf
init|=
literal|0
decl_stmt|;
name|postingsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
name|POSTINGS
label|:
while|while
condition|(
name|postingsEnum
operator|.
name|nextDoc
argument_list|()
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
name|int
name|docId
init|=
name|postingsEnum
operator|.
name|docID
argument_list|()
decl_stmt|;
if|if
condition|(
name|docId
operator|>
name|highestCollected
condition|)
block|{
break|break
name|POSTINGS
break|;
block|}
if|if
condition|(
name|docs
operator|.
name|get
argument_list|(
name|docId
argument_list|)
condition|)
block|{
operator|++
name|tf
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tf
operator|==
literal|0
condition|)
block|{
continue|continue;
block|}
name|float
name|score
init|=
operator|(
name|float
operator|)
name|Math
operator|.
name|log
argument_list|(
name|tf
argument_list|)
operator|*
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|)
operator|)
operator|/
operator|(
name|docFreq
operator|+
literal|1
operator|)
argument_list|)
operator|+
literal|1.0
argument_list|)
decl_stmt|;
name|String
name|t
init|=
name|term
operator|.
name|utf8ToString
argument_list|()
decl_stmt|;
name|allFreq
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|docFreq
argument_list|)
expr_stmt|;
name|allQueryFreq
operator|.
name|add
argument_list|(
name|t
argument_list|,
name|tf
argument_list|)
expr_stmt|;
if|if
condition|(
name|topTerms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
name|topTerms
operator|.
name|add
argument_list|(
operator|new
name|TermWithScore
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|topTerms
operator|.
name|first
argument_list|()
operator|.
name|score
operator|<
name|score
condition|)
block|{
name|topTerms
operator|.
name|pollFirst
argument_list|()
expr_stmt|;
name|topTerms
operator|.
name|add
argument_list|(
operator|new
name|TermWithScore
argument_list|(
name|term
operator|.
name|utf8ToString
argument_list|()
argument_list|,
name|score
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|TermWithScore
name|topTerm
range|:
name|topTerms
control|)
block|{
name|outTerms
operator|.
name|add
argument_list|(
name|topTerm
operator|.
name|term
argument_list|)
expr_stmt|;
name|scores
operator|.
name|add
argument_list|(
name|topTerm
operator|.
name|score
argument_list|)
expr_stmt|;
name|outFreq
operator|.
name|add
argument_list|(
name|allFreq
operator|.
name|get
argument_list|(
name|topTerm
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
name|outQueryFreq
operator|.
name|add
argument_list|(
name|allQueryFreq
operator|.
name|get
argument_list|(
name|topTerm
operator|.
name|term
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|delegate
operator|instanceof
name|DelegatingCollector
condition|)
block|{
operator|(
operator|(
name|DelegatingCollector
operator|)
name|this
operator|.
name|delegate
operator|)
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|class|TermWithScore
specifier|private
specifier|static
class|class
name|TermWithScore
implements|implements
name|Comparable
argument_list|<
name|TermWithScore
argument_list|>
block|{
DECL|field|term
specifier|public
specifier|final
name|String
name|term
decl_stmt|;
DECL|field|score
specifier|public
specifier|final
name|double
name|score
decl_stmt|;
DECL|method|TermWithScore
specifier|public
name|TermWithScore
parameter_list|(
name|String
name|term
parameter_list|,
name|double
name|score
parameter_list|)
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
name|this
operator|.
name|score
operator|=
name|score
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|term
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|TermWithScore
name|other
init|=
operator|(
name|TermWithScore
operator|)
name|obj
decl_stmt|;
return|return
name|other
operator|.
name|term
operator|.
name|equals
argument_list|(
name|this
operator|.
name|term
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|TermWithScore
name|o
parameter_list|)
block|{
name|int
name|cmp
init|=
name|Double
operator|.
name|compare
argument_list|(
name|this
operator|.
name|score
argument_list|,
name|o
operator|.
name|score
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|this
operator|.
name|term
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|term
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cmp
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

