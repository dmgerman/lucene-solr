begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.function
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|IntDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|docvalues
operator|.
name|LongDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
operator|.
name|ComparisonBoolFunction
import|;
end_import

begin_comment
comment|/**  * Refines {@link ComparisonBoolFunction} to compare based on a 'long' or 'double' depending on if the  * any of the FunctionValues are {@link LongDocValues}.  */
end_comment

begin_class
DECL|class|SolrComparisonBoolFunction
specifier|public
class|class
name|SolrComparisonBoolFunction
extends|extends
name|ComparisonBoolFunction
block|{
DECL|field|cmp
specifier|private
specifier|final
name|Compare
name|cmp
decl_stmt|;
DECL|interface|Compare
specifier|public
interface|interface
name|Compare
block|{
DECL|method|compare
name|boolean
name|compare
parameter_list|(
name|int
name|integer
parameter_list|)
function_decl|;
block|}
DECL|method|SolrComparisonBoolFunction
specifier|public
name|SolrComparisonBoolFunction
parameter_list|(
name|ValueSource
name|lhs
parameter_list|,
name|ValueSource
name|rhs
parameter_list|,
name|String
name|name
parameter_list|,
name|Compare
name|cmp
parameter_list|)
block|{
name|super
argument_list|(
name|lhs
argument_list|,
name|rhs
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|cmp
operator|=
name|cmp
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|boolean
name|compare
parameter_list|(
name|int
name|doc
parameter_list|,
name|FunctionValues
name|lhs
parameter_list|,
name|FunctionValues
name|rhs
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO consider a separate FunctionValues impl, one for Long, one for Double
comment|// performs the safest possible numeric comparison, if both lhs and rhs are Longs, then
comment|// we perform a Long comparison to avoid the issues with precision when casting to doubles
name|boolean
name|lhsAnInt
init|=
operator|(
name|lhs
operator|instanceof
name|LongDocValues
operator|||
name|lhs
operator|instanceof
name|IntDocValues
operator|)
decl_stmt|;
name|boolean
name|rhsAnInt
init|=
operator|(
name|rhs
operator|instanceof
name|LongDocValues
operator|||
name|rhs
operator|instanceof
name|IntDocValues
operator|)
decl_stmt|;
if|if
condition|(
name|lhsAnInt
operator|&&
name|rhsAnInt
condition|)
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|Long
operator|.
name|compare
argument_list|(
name|lhs
operator|.
name|longVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|rhs
operator|.
name|longVal
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|cmp
operator|.
name|compare
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|lhs
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|,
name|rhs
operator|.
name|doubleVal
argument_list|(
name|doc
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// note: don't override equals; the "name" will be unique and is already compared
block|}
end_class

end_unit

