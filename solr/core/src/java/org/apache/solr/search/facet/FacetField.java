begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|legacy
operator|.
name|LegacyNumericType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_comment
comment|// Any type of facet request that generates a variable number of buckets
end_comment

begin_comment
comment|// and the ability to sort by those generated buckets.
end_comment

begin_class
DECL|class|FacetRequestSorted
specifier|abstract
class|class
name|FacetRequestSorted
extends|extends
name|FacetRequest
block|{
DECL|field|offset
name|long
name|offset
decl_stmt|;
DECL|field|limit
name|long
name|limit
decl_stmt|;
DECL|field|mincount
name|long
name|mincount
decl_stmt|;
DECL|field|sortVariable
name|String
name|sortVariable
decl_stmt|;
DECL|field|sortDirection
name|SortDirection
name|sortDirection
decl_stmt|;
DECL|field|refine
name|RefineMethod
name|refine
decl_stmt|;
comment|// null, NONE, or SIMPLE
annotation|@
name|Override
DECL|method|getRefineMethod
specifier|public
name|RefineMethod
name|getRefineMethod
parameter_list|()
block|{
return|return
name|refine
return|;
block|}
annotation|@
name|Override
DECL|method|returnsPartial
specifier|public
name|boolean
name|returnsPartial
parameter_list|()
block|{
return|return
name|limit
operator|>
literal|0
return|;
block|}
block|}
end_class

begin_class
DECL|class|FacetField
specifier|public
class|class
name|FacetField
extends|extends
name|FacetRequestSorted
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|missing
name|boolean
name|missing
decl_stmt|;
DECL|field|allBuckets
name|boolean
name|allBuckets
decl_stmt|;
comment|// show cumulative stats across all buckets (this can be different than non-bucketed stats across all docs because of multi-valued docs)
DECL|field|numBuckets
name|boolean
name|numBuckets
decl_stmt|;
DECL|field|prefix
name|String
name|prefix
decl_stmt|;
DECL|field|method
name|FacetMethod
name|method
decl_stmt|;
DECL|field|cacheDf
name|int
name|cacheDf
decl_stmt|;
comment|// 0 means "default", -1 means "never cache"
comment|// experimental - force perSeg collection when using dv method, currently for testing purposes only.
DECL|field|perSeg
name|Boolean
name|perSeg
decl_stmt|;
block|{
comment|// defaults for FacetRequestSorted
name|mincount
operator|=
literal|1
expr_stmt|;
name|limit
operator|=
literal|10
expr_stmt|;
block|}
DECL|enum|FacetMethod
specifier|public
enum|enum
name|FacetMethod
block|{
DECL|enum constant|DV
name|DV
block|,
comment|// DocValues, collect into ordinal array
DECL|enum constant|UIF
name|UIF
block|,
comment|// UnInvertedField, collect into ordinal array
DECL|enum constant|DVHASH
name|DVHASH
block|,
comment|// DocValues, collect into hash
DECL|enum constant|ENUM
name|ENUM
block|,
comment|// TermsEnum then intersect DocSet (stream-able)
DECL|enum constant|STREAM
name|STREAM
block|,
comment|// presently equivalent to ENUM
DECL|enum constant|SMART
name|SMART
block|,     ;
DECL|method|fromString
specifier|public
specifier|static
name|FacetMethod
name|fromString
parameter_list|(
name|String
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
operator|||
name|method
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
name|DEFAULT_METHOD
return|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
literal|"dv"
case|:
return|return
name|DV
return|;
case|case
literal|"uif"
case|:
return|return
name|UIF
return|;
case|case
literal|"dvhash"
case|:
return|return
name|DVHASH
return|;
case|case
literal|"enum"
case|:
return|return
name|ENUM
return|;
case|case
literal|"stream"
case|:
return|return
name|STREAM
return|;
comment|// TODO replace with enum?
case|case
literal|"smart"
case|:
return|return
name|SMART
return|;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown FacetField method "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
DECL|field|DEFAULT_METHOD
specifier|static
name|FacetMethod
name|DEFAULT_METHOD
init|=
name|SMART
decl_stmt|;
comment|// non-final for tests to vary
block|}
annotation|@
name|Override
DECL|method|createFacetProcessor
specifier|public
name|FacetProcessor
name|createFacetProcessor
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|)
block|{
name|SchemaField
name|sf
init|=
name|fcontext
operator|.
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|multiToken
init|=
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|ft
operator|.
name|multiValuedFieldCache
argument_list|()
decl_stmt|;
name|LegacyNumericType
name|ntype
init|=
name|ft
operator|.
name|getNumericType
argument_list|()
decl_stmt|;
comment|// ensure we can support the requested options for numeric faceting:
if|if
condition|(
name|ntype
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Doesn't make sense to set facet prefix on a numeric field"
argument_list|)
throw|;
block|}
if|if
condition|(
name|mincount
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Numeric fields do not support facet mincount=0; try indexing as terms"
argument_list|)
throw|;
comment|// TODO if indexed=true then we could add support
block|}
block|}
comment|// TODO auto-pick ENUM/STREAM SOLR-9351 when index asc and DocSet cardinality is *not* much smaller than term cardinality
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|ENUM
condition|)
block|{
comment|// at the moment these two are the same
name|method
operator|=
name|FacetMethod
operator|.
name|STREAM
expr_stmt|;
block|}
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|STREAM
operator|&&
name|sf
operator|.
name|indexed
argument_list|()
operator|&&
literal|"index"
operator|.
name|equals
argument_list|(
name|sortVariable
argument_list|)
operator|&&
name|sortDirection
operator|==
name|SortDirection
operator|.
name|asc
condition|)
block|{
return|return
operator|new
name|FacetFieldProcessorByEnumTermsStream
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
comment|// TODO if method=UIF and not single-valued numerics then simply choose that now? TODO add FieldType.getDocValuesType()
if|if
condition|(
operator|!
name|multiToken
condition|)
block|{
if|if
condition|(
name|mincount
operator|>
literal|0
operator|&&
name|prefix
operator|==
literal|null
operator|&&
operator|(
name|ntype
operator|!=
literal|null
operator|||
name|method
operator|==
name|FacetMethod
operator|.
name|DVHASH
operator|)
condition|)
block|{
comment|// TODO can we auto-pick for strings when term cardinality is much greater than DocSet cardinality?
comment|//   or if we don't know cardinality but DocSet size is very small
return|return
operator|new
name|FacetFieldProcessorByHashDV
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|ntype
operator|==
literal|null
condition|)
block|{
comment|// single valued string...
return|return
operator|new
name|FacetFieldProcessorByArrayDV
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Couldn't pick facet algorithm for field "
operator|+
name|sf
argument_list|)
throw|;
block|}
block|}
comment|// multi-valued after this point
if|if
condition|(
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|||
name|method
operator|==
name|FacetMethod
operator|.
name|DV
condition|)
block|{
comment|// single and multi-valued string docValues
return|return
operator|new
name|FacetFieldProcessorByArrayDV
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
comment|// Top-level multi-valued field cache (UIF)
return|return
operator|new
name|FacetFieldProcessorByArrayUIF
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createFacetMerger
specifier|public
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|Object
name|prototype
parameter_list|)
block|{
return|return
operator|new
name|FacetFieldMerger
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFacetDescription
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFacetDescription
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|descr
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|descr
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|descr
operator|.
name|put
argument_list|(
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|descr
return|;
block|}
block|}
end_class

end_unit

