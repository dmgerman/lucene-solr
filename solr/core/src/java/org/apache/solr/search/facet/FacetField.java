begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_class
DECL|class|FacetField
specifier|public
class|class
name|FacetField
extends|extends
name|FacetRequest
block|{
DECL|field|field
name|String
name|field
decl_stmt|;
DECL|field|offset
name|long
name|offset
decl_stmt|;
DECL|field|limit
name|long
name|limit
init|=
literal|10
decl_stmt|;
DECL|field|mincount
name|long
name|mincount
init|=
literal|1
decl_stmt|;
DECL|field|missing
name|boolean
name|missing
decl_stmt|;
DECL|field|allBuckets
name|boolean
name|allBuckets
decl_stmt|;
comment|// show cumulative stats across all buckets (this can be different than non-bucketed stats across all docs because of multi-valued docs)
DECL|field|numBuckets
name|boolean
name|numBuckets
decl_stmt|;
DECL|field|prefix
name|String
name|prefix
decl_stmt|;
DECL|field|sortVariable
name|String
name|sortVariable
decl_stmt|;
DECL|field|sortDirection
name|SortDirection
name|sortDirection
decl_stmt|;
DECL|field|method
name|FacetMethod
name|method
decl_stmt|;
DECL|field|cacheDf
name|int
name|cacheDf
decl_stmt|;
comment|// 0 means "default", -1 means "never cache"
comment|// experimental - force perSeg collection when using dv method, currently for testing purposes only.
DECL|field|perSeg
name|Boolean
name|perSeg
decl_stmt|;
comment|// TODO: put this somewhere more generic?
DECL|enum|SortDirection
specifier|public
enum|enum
name|SortDirection
block|{
DECL|enum constant|asc
name|asc
argument_list|(
operator|-
literal|1
argument_list|)
block|,
DECL|enum constant|desc
name|desc
argument_list|(
literal|1
argument_list|)
block|;
DECL|field|multiplier
specifier|private
specifier|final
name|int
name|multiplier
decl_stmt|;
DECL|method|SortDirection
specifier|private
name|SortDirection
parameter_list|(
name|int
name|multiplier
parameter_list|)
block|{
name|this
operator|.
name|multiplier
operator|=
name|multiplier
expr_stmt|;
block|}
comment|// asc==-1, desc==1
DECL|method|getMultiplier
specifier|public
name|int
name|getMultiplier
parameter_list|()
block|{
return|return
name|multiplier
return|;
block|}
block|}
DECL|enum|FacetMethod
specifier|public
enum|enum
name|FacetMethod
block|{
DECL|enum constant|DV
name|DV
block|,
comment|// DocValues
DECL|enum constant|UIF
name|UIF
block|,
comment|// UnInvertedField
DECL|enum constant|ENUM
name|ENUM
block|,
DECL|enum constant|STREAM
name|STREAM
block|,
DECL|enum constant|SMART
name|SMART
block|,     ;
DECL|method|fromString
specifier|public
specifier|static
name|FacetMethod
name|fromString
parameter_list|(
name|String
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
operator|||
name|method
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
if|if
condition|(
literal|"dv"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|DV
return|;
block|}
elseif|else
if|if
condition|(
literal|"uif"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|UIF
return|;
block|}
elseif|else
if|if
condition|(
literal|"enum"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|ENUM
return|;
block|}
elseif|else
if|if
condition|(
literal|"smart"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|SMART
return|;
block|}
elseif|else
if|if
condition|(
literal|"stream"
operator|.
name|equals
argument_list|(
name|method
argument_list|)
condition|)
block|{
return|return
name|STREAM
return|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown FacetField method "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|createFacetProcessor
specifier|public
name|FacetProcessor
name|createFacetProcessor
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|)
block|{
name|SchemaField
name|sf
init|=
name|fcontext
operator|.
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|FieldType
name|ft
init|=
name|sf
operator|.
name|getType
argument_list|()
decl_stmt|;
name|boolean
name|multiToken
init|=
name|sf
operator|.
name|multiValued
argument_list|()
operator|||
name|ft
operator|.
name|multiValuedFieldCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|ENUM
operator|&&
name|sf
operator|.
name|indexed
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
elseif|else
if|if
condition|(
name|method
operator|==
name|FacetMethod
operator|.
name|STREAM
operator|&&
name|sf
operator|.
name|indexed
argument_list|()
condition|)
block|{
return|return
operator|new
name|FacetFieldProcessorByEnumTermsStream
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
operator|.
name|LegacyNumericType
name|ntype
init|=
name|ft
operator|.
name|getNumericType
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multiToken
condition|)
block|{
if|if
condition|(
name|ntype
operator|!=
literal|null
condition|)
block|{
comment|// single valued numeric (docvalues or fieldcache)
return|return
operator|new
name|FacetFieldProcessorByHashNumeric
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
else|else
block|{
comment|// single valued string...
return|return
operator|new
name|FacetFieldProcessorByArrayDV
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
block|}
comment|// multi-valued after this point
if|if
condition|(
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|||
name|method
operator|==
name|FacetMethod
operator|.
name|DV
condition|)
block|{
comment|// single and multi-valued string docValues
return|return
operator|new
name|FacetFieldProcessorByArrayDV
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
comment|// Top-level multi-valued field cache (UIF)
return|return
operator|new
name|FacetFieldProcessorByArrayUIF
argument_list|(
name|fcontext
argument_list|,
name|this
argument_list|,
name|sf
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|createFacetMerger
specifier|public
name|FacetMerger
name|createFacetMerger
parameter_list|(
name|Object
name|prototype
parameter_list|)
block|{
return|return
operator|new
name|FacetFieldMerger
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getFacetDescription
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getFacetDescription
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|descr
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|descr
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|descr
operator|.
name|put
argument_list|(
literal|"limit"
argument_list|,
name|limit
argument_list|)
expr_stmt|;
return|return
name|descr
return|;
block|}
block|}
end_class

end_unit

