begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_comment
comment|/**  * Base class for DV/UIF accumulating counts into an array by ordinal.  * It can handle terms (strings), not numbers directly but those encoded as terms, and is multi-valued capable.  */
end_comment

begin_class
DECL|class|FacetFieldProcessorByArray
specifier|abstract
class|class
name|FacetFieldProcessorByArray
extends|extends
name|FacetFieldProcessor
block|{
DECL|field|prefixRef
name|BytesRefBuilder
name|prefixRef
decl_stmt|;
DECL|field|startTermIndex
name|int
name|startTermIndex
decl_stmt|;
DECL|field|endTermIndex
name|int
name|endTermIndex
decl_stmt|;
DECL|field|nTerms
name|int
name|nTerms
decl_stmt|;
DECL|field|nDocs
name|int
name|nDocs
decl_stmt|;
DECL|field|maxSlots
name|int
name|maxSlots
decl_stmt|;
DECL|field|allBucketsSlot
name|int
name|allBucketsSlot
init|=
operator|-
literal|1
decl_stmt|;
comment|// slot for the primary Accs (countAcc, collectAcc)
DECL|method|FacetFieldProcessorByArray
name|FacetFieldProcessorByArray
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|FacetField
name|freq
parameter_list|,
name|SchemaField
name|sf
parameter_list|)
block|{
name|super
argument_list|(
name|fcontext
argument_list|,
name|freq
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
DECL|method|findStartAndEndOrds
specifier|abstract
specifier|protected
name|void
name|findStartAndEndOrds
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|collectDocs
specifier|abstract
specifier|protected
name|void
name|collectDocs
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** this BytesRef may be shared across calls and should be deep-cloned if necessary */
DECL|method|lookupOrd
specifier|abstract
specifier|protected
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|process
argument_list|()
expr_stmt|;
name|sf
operator|=
name|fcontext
operator|.
name|searcher
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|freq
operator|.
name|field
argument_list|)
expr_stmt|;
name|response
operator|=
name|getFieldCacheCounts
argument_list|()
expr_stmt|;
block|}
DECL|method|getFieldCacheCounts
specifier|private
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|getFieldCacheCounts
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|prefix
init|=
name|freq
operator|.
name|prefix
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefixRef
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|prefixRef
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|prefixRef
operator|.
name|copyChars
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|findStartAndEndOrds
argument_list|()
expr_stmt|;
name|maxSlots
operator|=
name|nTerms
expr_stmt|;
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|allBucketsSlot
operator|=
name|maxSlots
operator|++
expr_stmt|;
block|}
name|createCollectAcc
argument_list|(
name|nDocs
argument_list|,
name|maxSlots
argument_list|)
expr_stmt|;
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|allBucketsAcc
operator|=
operator|new
name|SpecialSlotAcc
argument_list|(
name|fcontext
argument_list|,
name|collectAcc
argument_list|,
name|allBucketsSlot
argument_list|,
name|otherAccs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|collectDocs
argument_list|()
expr_stmt|;
return|return
name|findTopSlots
argument_list|()
return|;
block|}
DECL|method|findTopSlots
specifier|private
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|findTopSlots
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|res
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|numBuckets
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|bucketVals
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|freq
operator|.
name|numBuckets
operator|&&
name|fcontext
operator|.
name|isShard
argument_list|()
condition|)
block|{
name|bucketVals
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|int
name|off
init|=
name|fcontext
operator|.
name|isShard
argument_list|()
condition|?
literal|0
else|:
operator|(
name|int
operator|)
name|freq
operator|.
name|offset
decl_stmt|;
comment|// add a modest amount of over-request if this is a shard request
name|int
name|lim
init|=
name|freq
operator|.
name|limit
operator|>=
literal|0
condition|?
operator|(
name|fcontext
operator|.
name|isShard
argument_list|()
condition|?
call|(
name|int
call|)
argument_list|(
name|freq
operator|.
name|limit
operator|*
literal|1.1
operator|+
literal|4
argument_list|)
else|:
operator|(
name|int
operator|)
name|freq
operator|.
name|limit
operator|)
else|:
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|maxsize
init|=
call|(
name|int
call|)
argument_list|(
name|freq
operator|.
name|limit
operator|>=
literal|0
condition|?
name|freq
operator|.
name|offset
operator|+
name|lim
else|:
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
argument_list|)
decl_stmt|;
name|maxsize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|maxsize
argument_list|,
name|nTerms
argument_list|)
expr_stmt|;
specifier|final
name|int
name|sortMul
init|=
name|freq
operator|.
name|sortDirection
operator|.
name|getMultiplier
argument_list|()
decl_stmt|;
specifier|final
name|SlotAcc
name|sortAcc
init|=
name|this
operator|.
name|sortAcc
decl_stmt|;
name|PriorityQueue
argument_list|<
name|Slot
argument_list|>
name|queue
init|=
operator|new
name|PriorityQueue
argument_list|<
name|Slot
argument_list|>
argument_list|(
name|maxsize
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|Slot
name|a
parameter_list|,
name|Slot
name|b
parameter_list|)
block|{
name|int
name|cmp
init|=
name|sortAcc
operator|.
name|compare
argument_list|(
name|a
operator|.
name|slot
argument_list|,
name|b
operator|.
name|slot
argument_list|)
operator|*
name|sortMul
decl_stmt|;
return|return
name|cmp
operator|==
literal|0
condition|?
name|b
operator|.
name|slot
operator|<
name|a
operator|.
name|slot
else|:
name|cmp
operator|<
literal|0
return|;
block|}
block|}
decl_stmt|;
name|Slot
name|bottom
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nTerms
condition|;
name|i
operator|++
control|)
block|{
comment|// screen out buckets not matching mincount immediately (i.e. don't even increment numBuckets)
if|if
condition|(
name|effectiveMincount
operator|>
literal|0
operator|&&
name|countAcc
operator|.
name|getCount
argument_list|(
name|i
argument_list|)
operator|<
name|effectiveMincount
condition|)
block|{
continue|continue;
block|}
name|numBuckets
operator|++
expr_stmt|;
if|if
condition|(
name|bucketVals
operator|!=
literal|null
operator|&&
name|bucketVals
operator|.
name|size
argument_list|()
operator|<
literal|100
condition|)
block|{
name|int
name|ord
init|=
name|startTermIndex
operator|+
name|i
decl_stmt|;
name|BytesRef
name|br
init|=
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|sf
argument_list|,
name|br
argument_list|)
decl_stmt|;
name|bucketVals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bottom
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sortAcc
operator|.
name|compare
argument_list|(
name|bottom
operator|.
name|slot
argument_list|,
name|i
argument_list|)
operator|*
name|sortMul
operator|<
literal|0
condition|)
block|{
name|bottom
operator|.
name|slot
operator|=
name|i
expr_stmt|;
name|bottom
operator|=
name|queue
operator|.
name|updateTop
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|lim
operator|>
literal|0
condition|)
block|{
comment|// queue not full
name|Slot
name|s
init|=
operator|new
name|Slot
argument_list|()
decl_stmt|;
name|s
operator|.
name|slot
operator|=
name|i
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|>=
name|maxsize
condition|)
block|{
name|bottom
operator|=
name|queue
operator|.
name|top
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|freq
operator|.
name|numBuckets
condition|)
block|{
if|if
condition|(
operator|!
name|fcontext
operator|.
name|isShard
argument_list|()
condition|)
block|{
name|res
operator|.
name|add
argument_list|(
literal|"numBuckets"
argument_list|,
name|numBuckets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|map
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|map
operator|.
name|add
argument_list|(
literal|"numBuckets"
argument_list|,
name|numBuckets
argument_list|)
expr_stmt|;
name|map
operator|.
name|add
argument_list|(
literal|"vals"
argument_list|,
name|bucketVals
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"numBuckets"
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
name|FacetDebugInfo
name|fdebug
init|=
name|fcontext
operator|.
name|getDebugInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|fdebug
operator|!=
literal|null
condition|)
name|fdebug
operator|.
name|putInfoItem
argument_list|(
literal|"numBuckets"
argument_list|,
operator|(
name|long
operator|)
name|numBuckets
argument_list|)
expr_stmt|;
comment|// if we are deep paging, we don't have to order the highest "offset" counts.
name|int
name|collectCount
init|=
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|queue
operator|.
name|size
argument_list|()
operator|-
name|off
argument_list|)
decl_stmt|;
assert|assert
name|collectCount
operator|<=
name|lim
assert|;
name|int
index|[]
name|sortedSlots
init|=
operator|new
name|int
index|[
name|collectCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|collectCount
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|sortedSlots
index|[
name|i
index|]
operator|=
name|queue
operator|.
name|pop
argument_list|()
operator|.
name|slot
expr_stmt|;
block|}
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|allBuckets
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|allBuckets
operator|.
name|add
argument_list|(
literal|"count"
argument_list|,
name|allBucketsAcc
operator|.
name|getSpecialCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|allBucketsAcc
operator|!=
literal|null
condition|)
block|{
name|allBucketsAcc
operator|.
name|setValues
argument_list|(
name|allBuckets
argument_list|,
name|allBucketsSlot
argument_list|)
expr_stmt|;
block|}
name|res
operator|.
name|add
argument_list|(
literal|"allBuckets"
argument_list|,
name|allBuckets
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|bucketList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|collectCount
argument_list|)
decl_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"buckets"
argument_list|,
name|bucketList
argument_list|)
expr_stmt|;
comment|// TODO: do this with a callback instead?
name|boolean
name|needFilter
init|=
name|deferredAggs
operator|!=
literal|null
operator|||
name|freq
operator|.
name|getSubFacets
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
decl_stmt|;
for|for
control|(
name|int
name|slotNum
range|:
name|sortedSlots
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|bucket
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// get the ord of the slot...
name|int
name|ord
init|=
name|startTermIndex
operator|+
name|slotNum
decl_stmt|;
name|BytesRef
name|br
init|=
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|sf
argument_list|,
name|br
argument_list|)
decl_stmt|;
name|bucket
operator|.
name|add
argument_list|(
literal|"val"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|TermQuery
name|filter
init|=
name|needFilter
condition|?
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|sf
operator|.
name|getName
argument_list|()
argument_list|,
name|br
argument_list|)
argument_list|)
else|:
literal|null
decl_stmt|;
name|fillBucket
argument_list|(
name|bucket
argument_list|,
name|countAcc
operator|.
name|getCount
argument_list|(
name|slotNum
argument_list|)
argument_list|,
name|slotNum
argument_list|,
literal|null
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|bucketList
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|freq
operator|.
name|missing
condition|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|missingBucket
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fillBucket
argument_list|(
name|missingBucket
argument_list|,
name|getFieldMissingQuery
argument_list|(
name|fcontext
operator|.
name|searcher
argument_list|,
name|freq
operator|.
name|field
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|res
operator|.
name|add
argument_list|(
literal|"missing"
argument_list|,
name|missingBucket
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
block|}
end_class

end_unit

