begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
operator|.
name|FacetContext
operator|.
name|SKIP_FACET
import|;
end_import

begin_comment
comment|/**  * Base class for DV/UIF accumulating counts into an array by ordinal.  It's  * for {@link org.apache.lucene.index.SortedDocValues} and {@link org.apache.lucene.index.SortedSetDocValues} only.  * It can handle terms (strings), not numbers directly but those encoded as terms, and is multi-valued capable.  */
end_comment

begin_class
DECL|class|FacetFieldProcessorByArray
specifier|abstract
class|class
name|FacetFieldProcessorByArray
extends|extends
name|FacetFieldProcessor
block|{
DECL|field|prefixRef
name|BytesRefBuilder
name|prefixRef
decl_stmt|;
DECL|field|startTermIndex
name|int
name|startTermIndex
decl_stmt|;
DECL|field|endTermIndex
name|int
name|endTermIndex
decl_stmt|;
DECL|field|nTerms
name|int
name|nTerms
decl_stmt|;
DECL|field|nDocs
name|int
name|nDocs
decl_stmt|;
DECL|field|maxSlots
name|int
name|maxSlots
decl_stmt|;
DECL|field|allBucketsSlot
name|int
name|allBucketsSlot
init|=
operator|-
literal|1
decl_stmt|;
comment|// slot for the primary Accs (countAcc, collectAcc)
DECL|method|FacetFieldProcessorByArray
name|FacetFieldProcessorByArray
parameter_list|(
name|FacetContext
name|fcontext
parameter_list|,
name|FacetField
name|freq
parameter_list|,
name|SchemaField
name|sf
parameter_list|)
block|{
name|super
argument_list|(
name|fcontext
argument_list|,
name|freq
argument_list|,
name|sf
argument_list|)
expr_stmt|;
block|}
DECL|method|findStartAndEndOrds
specifier|abstract
specifier|protected
name|void
name|findStartAndEndOrds
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|collectDocs
specifier|abstract
specifier|protected
name|void
name|collectDocs
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/** this BytesRef may be shared across calls and should be deep-cloned if necessary */
DECL|method|lookupOrd
specifier|abstract
specifier|protected
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|process
specifier|public
name|void
name|process
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|process
argument_list|()
expr_stmt|;
name|response
operator|=
name|calcFacets
argument_list|()
expr_stmt|;
block|}
DECL|method|calcFacets
specifier|private
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|calcFacets
parameter_list|()
throws|throws
name|IOException
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|refineResult
init|=
literal|null
decl_stmt|;
name|boolean
name|skipThisFacet
init|=
operator|(
name|fcontext
operator|.
name|flags
operator|&
name|SKIP_FACET
operator|)
operator|!=
literal|0
decl_stmt|;
if|if
condition|(
name|fcontext
operator|.
name|facetInfo
operator|!=
literal|null
condition|)
block|{
name|refineResult
operator|=
name|refineFacets
argument_list|()
expr_stmt|;
comment|// if we've seen this facet bucket, then refining can be done.  If we haven't, we still
comment|// only need to continue if we need allBuckets or numBuckets info.
if|if
condition|(
name|skipThisFacet
operator|||
operator|(
operator|!
name|freq
operator|.
name|allBuckets
operator|&&
operator|!
name|freq
operator|.
name|numBuckets
operator|)
condition|)
return|return
name|refineResult
return|;
block|}
name|String
name|prefix
init|=
name|freq
operator|.
name|prefix
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|prefix
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|prefixRef
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|prefixRef
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|prefixRef
operator|.
name|copyChars
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|findStartAndEndOrds
argument_list|()
expr_stmt|;
if|if
condition|(
name|refineResult
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|createAccs
argument_list|(
name|nDocs
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|allBucketsAcc
operator|=
operator|new
name|SpecialSlotAcc
argument_list|(
name|fcontext
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|,
name|accs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|collectDocs
argument_list|()
expr_stmt|;
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|allBuckets
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|allBuckets
operator|.
name|add
argument_list|(
literal|"count"
argument_list|,
name|allBucketsAcc
operator|.
name|getSpecialCount
argument_list|()
argument_list|)
expr_stmt|;
name|allBucketsAcc
operator|.
name|setValues
argument_list|(
name|allBuckets
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// -1 slotNum is unused for SpecialSlotAcc
name|refineResult
operator|.
name|add
argument_list|(
literal|"allBuckets"
argument_list|,
name|allBuckets
argument_list|)
expr_stmt|;
return|return
name|refineResult
return|;
block|}
block|}
name|maxSlots
operator|=
name|nTerms
expr_stmt|;
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|allBucketsSlot
operator|=
name|maxSlots
operator|++
expr_stmt|;
block|}
name|createCollectAcc
argument_list|(
name|nDocs
argument_list|,
name|maxSlots
argument_list|)
expr_stmt|;
if|if
condition|(
name|freq
operator|.
name|allBuckets
condition|)
block|{
name|allBucketsAcc
operator|=
operator|new
name|SpecialSlotAcc
argument_list|(
name|fcontext
argument_list|,
name|collectAcc
argument_list|,
name|allBucketsSlot
argument_list|,
name|otherAccs
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|collectDocs
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|findTopSlots
argument_list|(
name|nTerms
argument_list|,
name|nTerms
argument_list|,
name|slotNum
lambda|->
block|{
comment|// getBucketValFromSlotNum
try|try
block|{
return|return
operator|(
name|Comparable
operator|)
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|toObject
argument_list|(
name|sf
argument_list|,
name|lookupOrd
argument_list|(
name|slotNum
operator|+
name|startTermIndex
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|,
name|Object
operator|::
name|toString
argument_list|)
return|;
comment|// getFieldQueryVal
block|}
block|}
end_class

end_unit

