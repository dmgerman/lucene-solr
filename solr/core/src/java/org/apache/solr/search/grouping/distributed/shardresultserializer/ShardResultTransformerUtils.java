begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.grouping.distributed.shardresultserializer
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|grouping
operator|.
name|distributed
operator|.
name|shardresultserializer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_comment
comment|/**  * Utility functions used by implementations of the {@link ShardResultTransformer} interface.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|ShardResultTransformerUtils
class|class
name|ShardResultTransformerUtils
block|{
DECL|method|marshalSortValue
specifier|static
name|Object
name|marshalSortValue
parameter_list|(
name|Object
name|originalSortValue
parameter_list|,
name|SchemaField
name|schemaField
parameter_list|)
block|{
return|return
name|marshalOrUnmarshalSortValue
argument_list|(
name|originalSortValue
argument_list|,
name|schemaField
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|unmarshalSortValue
specifier|static
name|Object
name|unmarshalSortValue
parameter_list|(
name|Object
name|originalSortValue
parameter_list|,
name|SchemaField
name|schemaField
parameter_list|)
block|{
return|return
name|marshalOrUnmarshalSortValue
argument_list|(
name|originalSortValue
argument_list|,
name|schemaField
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|marshalOrUnmarshalSortValue
specifier|private
specifier|static
name|Object
name|marshalOrUnmarshalSortValue
parameter_list|(
name|Object
name|originalSortValue
parameter_list|,
name|SchemaField
name|schemaField
parameter_list|,
name|boolean
name|marshal
parameter_list|)
block|{
if|if
condition|(
name|originalSortValue
operator|!=
literal|null
operator|&&
name|schemaField
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FieldType
name|fieldType
init|=
name|schemaField
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|marshal
condition|)
block|{
return|return
name|fieldType
operator|.
name|marshalSortValue
argument_list|(
name|originalSortValue
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|fieldType
operator|.
name|unmarshalSortValue
argument_list|(
name|originalSortValue
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|originalSortValue
return|;
block|}
block|}
block|}
end_class

end_unit

