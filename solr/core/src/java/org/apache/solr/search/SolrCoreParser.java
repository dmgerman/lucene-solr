begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|CoreParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|NamedListInitializedPlugin
import|;
end_import

begin_comment
comment|/**  * Assembles a QueryBuilder which uses Query objects from Solr's<code>search</code> module  * in addition to Query objects supported by the Lucene<code>CoreParser</code>.  */
end_comment

begin_class
DECL|class|SolrCoreParser
specifier|public
class|class
name|SolrCoreParser
extends|extends
name|CoreParser
implements|implements
name|NamedListInitializedPlugin
block|{
DECL|field|req
specifier|protected
specifier|final
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|method|SolrCoreParser
specifier|public
name|SolrCoreParser
parameter_list|(
name|String
name|defaultField
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|defaultField
argument_list|,
name|analyzer
argument_list|)
expr_stmt|;
name|queryFactory
operator|.
name|addBuilder
argument_list|(
literal|"LegacyNumericRangeQuery"
argument_list|,
operator|new
name|LegacyNumericRangeQueryBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|initArgs
parameter_list|)
block|{
if|if
condition|(
name|initArgs
operator|==
literal|null
operator|||
name|initArgs
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
specifier|final
name|SolrResourceLoader
name|loader
decl_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
name|loader
operator|=
operator|new
name|SolrResourceLoader
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|loader
operator|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Iterable
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|args
init|=
name|initArgs
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|args
control|)
block|{
specifier|final
name|String
name|queryName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|String
name|queryBuilderClassName
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|SolrQueryBuilder
name|queryBuilder
init|=
name|loader
operator|.
name|newInstance
argument_list|(
name|queryBuilderClassName
argument_list|,
name|SolrQueryBuilder
operator|.
name|class
argument_list|,
literal|null
argument_list|,
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|Analyzer
operator|.
name|class
block|,
name|SolrQueryRequest
operator|.
name|class
block|,
name|QueryBuilder
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|defaultField
block|,
name|analyzer
block|,
name|req
block|,
name|this
block|}
argument_list|)
decl_stmt|;
name|this
operator|.
name|queryFactory
operator|.
name|addBuilder
argument_list|(
name|queryName
argument_list|,
name|queryBuilder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

