begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util.stats
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|BeanInfo
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|IntrospectionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|Introspector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|beans
operator|.
name|PropertyDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|OperatingSystemMXBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|PlatformManagedObject
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiConsumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|InstrumentedExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|AggregateMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Metrics specific utility functions.  */
end_comment

begin_class
DECL|class|MetricUtils
specifier|public
class|class
name|MetricUtils
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|METRIC_NAME
specifier|public
specifier|static
specifier|final
name|String
name|METRIC_NAME
init|=
literal|"metric"
decl_stmt|;
DECL|field|VALUE
specifier|public
specifier|static
specifier|final
name|String
name|VALUE
init|=
literal|"value"
decl_stmt|;
DECL|field|VALUES
specifier|public
specifier|static
specifier|final
name|String
name|VALUES
init|=
literal|"values"
decl_stmt|;
DECL|field|MS
specifier|static
specifier|final
name|String
name|MS
init|=
literal|"_ms"
decl_stmt|;
DECL|field|MIN
specifier|static
specifier|final
name|String
name|MIN
init|=
literal|"min"
decl_stmt|;
DECL|field|MIN_MS
specifier|static
specifier|final
name|String
name|MIN_MS
init|=
name|MIN
operator|+
name|MS
decl_stmt|;
DECL|field|MAX
specifier|static
specifier|final
name|String
name|MAX
init|=
literal|"max"
decl_stmt|;
DECL|field|MAX_MS
specifier|static
specifier|final
name|String
name|MAX_MS
init|=
name|MAX
operator|+
name|MS
decl_stmt|;
DECL|field|MEAN
specifier|static
specifier|final
name|String
name|MEAN
init|=
literal|"mean"
decl_stmt|;
DECL|field|MEAN_MS
specifier|static
specifier|final
name|String
name|MEAN_MS
init|=
name|MEAN
operator|+
name|MS
decl_stmt|;
DECL|field|MEDIAN
specifier|static
specifier|final
name|String
name|MEDIAN
init|=
literal|"median"
decl_stmt|;
DECL|field|MEDIAN_MS
specifier|static
specifier|final
name|String
name|MEDIAN_MS
init|=
name|MEDIAN
operator|+
name|MS
decl_stmt|;
DECL|field|STDDEV
specifier|static
specifier|final
name|String
name|STDDEV
init|=
literal|"stddev"
decl_stmt|;
DECL|field|STDDEV_MS
specifier|static
specifier|final
name|String
name|STDDEV_MS
init|=
name|STDDEV
operator|+
name|MS
decl_stmt|;
DECL|field|SUM
specifier|static
specifier|final
name|String
name|SUM
init|=
literal|"sum"
decl_stmt|;
DECL|field|P75
specifier|static
specifier|final
name|String
name|P75
init|=
literal|"p75"
decl_stmt|;
DECL|field|P75_MS
specifier|static
specifier|final
name|String
name|P75_MS
init|=
name|P75
operator|+
name|MS
decl_stmt|;
DECL|field|P95
specifier|static
specifier|final
name|String
name|P95
init|=
literal|"p95"
decl_stmt|;
DECL|field|P95_MS
specifier|static
specifier|final
name|String
name|P95_MS
init|=
name|P95
operator|+
name|MS
decl_stmt|;
DECL|field|P99
specifier|static
specifier|final
name|String
name|P99
init|=
literal|"p99"
decl_stmt|;
DECL|field|P99_MS
specifier|static
specifier|final
name|String
name|P99_MS
init|=
name|P99
operator|+
name|MS
decl_stmt|;
DECL|field|P999
specifier|static
specifier|final
name|String
name|P999
init|=
literal|"p999"
decl_stmt|;
DECL|field|P999_MS
specifier|static
specifier|final
name|String
name|P999_MS
init|=
name|P999
operator|+
name|MS
decl_stmt|;
comment|/**    * Adds metrics from a Timer to a NamedList, using well-known back-compat names.    * @param lst The NamedList to add the metrics data to    * @param timer The Timer to extract the metrics from    */
DECL|method|addMetrics
specifier|public
specifier|static
name|void
name|addMetrics
parameter_list|(
name|NamedList
argument_list|<
name|Object
argument_list|>
name|lst
parameter_list|,
name|Timer
name|timer
parameter_list|)
block|{
name|Snapshot
name|snapshot
init|=
name|timer
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"avgRequestsPerSecond"
argument_list|,
name|timer
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"5minRateRequestsPerSecond"
argument_list|,
name|timer
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"15minRateRequestsPerSecond"
argument_list|,
name|timer
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"avgTimePerRequest"
argument_list|,
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|getMean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"medianRequestTime"
argument_list|,
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|getMedian
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"75thPcRequestTime"
argument_list|,
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"95thPcRequestTime"
argument_list|,
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"99thPcRequestTime"
argument_list|,
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"999thPcRequestTime"
argument_list|,
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get999thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Converts a double representing nanoseconds to a double representing milliseconds.    *    * @param ns the amount of time in nanoseconds    * @return the amount of time in milliseconds    */
DECL|method|nsToMs
specifier|public
specifier|static
name|double
name|nsToMs
parameter_list|(
name|double
name|ns
parameter_list|)
block|{
return|return
name|ns
operator|/
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|1
argument_list|)
return|;
block|}
comment|/**    * Returns a NamedList representation of the given metric registry. Only those metrics    * are converted to NamedList which match at least one of the given MetricFilter instances.    *    * @param registry      the {@link MetricRegistry} to be converted to NamedList    * @param shouldMatchFilters a list of {@link MetricFilter} instances.    *                           A metric must match<em>any one</em> of the filters from this list to be    *                           included in the output    * @param mustMatchFilter a {@link MetricFilter}.    *                        A metric<em>must</em> match this filter to be included in the output.    * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.    * @param compact use compact representation for counters and gauges.    * @return a {@link NamedList}    */
DECL|method|toNamedList
specifier|public
specifier|static
name|NamedList
name|toNamedList
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|List
argument_list|<
name|MetricFilter
argument_list|>
name|shouldMatchFilters
parameter_list|,
name|MetricFilter
name|mustMatchFilter
parameter_list|,
name|boolean
name|skipHistograms
parameter_list|,
name|boolean
name|skipAggregateValues
parameter_list|,
name|boolean
name|compact
parameter_list|)
block|{
name|NamedList
name|result
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|toMaps
argument_list|(
name|registry
argument_list|,
name|shouldMatchFilters
argument_list|,
name|mustMatchFilter
argument_list|,
name|skipHistograms
argument_list|,
name|skipAggregateValues
argument_list|,
name|compact
argument_list|,
literal|false
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|result
operator|.
name|add
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Provides a representation of the given metric registry as {@link SolrInputDocument}-s.    Only those metrics    * are converted which match at least one of the given MetricFilter instances.    *    * @param registry      the {@link MetricRegistry} to be converted    * @param shouldMatchFilters a list of {@link MetricFilter} instances.    *                           A metric must match<em>any one</em> of the filters from this list to be    *                           included in the output    * @param mustMatchFilter a {@link MetricFilter}.    *                        A metric<em>must</em> match this filter to be included in the output.    * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.    * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.    * @param compact use compact representation for counters and gauges.    * @param metadata optional metadata. If not null and not empty then this map will be added under a    *                 {@code _metadata_} key.    * @param consumer consumer that accepts produced {@link SolrInputDocument}-s    */
DECL|method|toSolrInputDocuments
specifier|public
specifier|static
name|void
name|toSolrInputDocuments
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|List
argument_list|<
name|MetricFilter
argument_list|>
name|shouldMatchFilters
parameter_list|,
name|MetricFilter
name|mustMatchFilter
parameter_list|,
name|boolean
name|skipHistograms
parameter_list|,
name|boolean
name|skipAggregateValues
parameter_list|,
name|boolean
name|compact
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metadata
parameter_list|,
name|Consumer
argument_list|<
name|SolrInputDocument
argument_list|>
name|consumer
parameter_list|)
block|{
name|boolean
name|addMetadata
init|=
name|metadata
operator|!=
literal|null
operator|&&
operator|!
name|metadata
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|toMaps
argument_list|(
name|registry
argument_list|,
name|shouldMatchFilters
argument_list|,
name|mustMatchFilter
argument_list|,
name|skipHistograms
argument_list|,
name|skipAggregateValues
argument_list|,
name|compact
argument_list|,
literal|false
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
name|METRIC_NAME
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|toSolrInputDocument
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|addMetadata
condition|)
block|{
name|toSolrInputDocument
argument_list|(
literal|null
argument_list|,
name|doc
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**    * Fill in a SolrInputDocument with values from a converted metric, recursively.    * @param prefix prefix to add to generated field names, or null if none.    * @param doc document to fill    * @param o an instance of converted metric, either a Map or a flat Object    */
DECL|method|toSolrInputDocument
specifier|static
name|void
name|toSolrInputDocument
parameter_list|(
name|String
name|prefix
parameter_list|,
name|SolrInputDocument
name|doc
parameter_list|,
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|Map
operator|)
condition|)
block|{
name|String
name|key
init|=
name|prefix
operator|!=
literal|null
condition|?
name|prefix
else|:
name|VALUE
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|key
argument_list|,
name|o
argument_list|)
expr_stmt|;
return|return;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
comment|// flatten recursively
name|toSolrInputDocument
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|doc
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|key
init|=
name|prefix
operator|!=
literal|null
condition|?
name|prefix
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
else|:
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
name|key
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Convert selected metrics to maps or to flattened objects.    * @param registry source of metrics    * @param shouldMatchFilters metrics must match any of these filters    * @param mustMatchFilter metrics must match this filter    * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.    * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.    * @param compact use compact representation for counters and gauges.    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
DECL|method|toMaps
specifier|static
name|void
name|toMaps
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|List
argument_list|<
name|MetricFilter
argument_list|>
name|shouldMatchFilters
parameter_list|,
name|MetricFilter
name|mustMatchFilter
parameter_list|,
name|boolean
name|skipHistograms
parameter_list|,
name|boolean
name|skipAggregateValues
parameter_list|,
name|boolean
name|compact
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|registry
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
specifier|final
name|SortedSet
argument_list|<
name|String
argument_list|>
name|names
init|=
name|registry
operator|.
name|getNames
argument_list|()
decl_stmt|;
name|names
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|shouldMatchFilters
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|metricFilter
lambda|->
name|metricFilter
operator|.
name|matches
argument_list|(
name|s
argument_list|,
name|metrics
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|mustMatchFilter
operator|.
name|matches
argument_list|(
name|s
argument_list|,
name|metrics
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
operator|.
name|forEach
argument_list|(
name|n
lambda|->
block|{
name|Metric
name|metric
operator|=
name|metrics
operator|.
name|get
argument_list|(
name|n
argument_list|)
argument_list|;
name|convertMetric
argument_list|(
name|n
argument_list|,
name|metric
argument_list|,
name|skipHistograms
argument_list|,
name|skipAggregateValues
argument_list|,
name|compact
argument_list|,
name|simple
argument_list|,
name|consumer
argument_list|)
argument_list|;
block|}
block|)
class|;
end_class

begin_comment
unit|}
comment|/**    * Convert selected metrics from a registry into a map, with metrics in a compact AND simple format.    * @param registry registry    * @param names metric names    * @return map where keys are metric names (if they were present in the registry) and values are    * converted metrics in simplified format.    */
end_comment

begin_function
DECL|method|convertMetrics
unit|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|convertMetrics
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|metrics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|convertMetrics
argument_list|(
name|registry
argument_list|,
name|names
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
name|metrics
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|metrics
return|;
block|}
end_function

begin_comment
comment|/**    * Convert selected metrics from a registry into maps (when<code>compact==false</code>) or    * flattened objects.    * @param registry registry    * @param names metric names    * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.    * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.    * @param compact use compact representation for counters and gauges.    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertMetrics
specifier|public
specifier|static
name|void
name|convertMetrics
parameter_list|(
name|MetricRegistry
name|registry
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|boolean
name|skipHistograms
parameter_list|,
name|boolean
name|skipAggregateValues
parameter_list|,
name|boolean
name|compact
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|registry
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|names
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|n
lambda|->
block|{
name|Metric
name|metric
init|=
name|metrics
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|convertMetric
argument_list|(
name|n
argument_list|,
name|metric
argument_list|,
name|skipHistograms
argument_list|,
name|skipAggregateValues
argument_list|,
name|compact
argument_list|,
name|simple
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Convert a single instance of metric into a map or flattened object.    * @param n metric name    * @param metric metric instance    * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.    * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.    * @param compact use compact representation for counters and gauges.    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertMetric
specifier|static
name|void
name|convertMetric
parameter_list|(
name|String
name|n
parameter_list|,
name|Metric
name|metric
parameter_list|,
name|boolean
name|skipHistograms
parameter_list|,
name|boolean
name|skipAggregateValues
parameter_list|,
name|boolean
name|compact
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|metric
operator|instanceof
name|Counter
condition|)
block|{
name|Counter
name|counter
init|=
operator|(
name|Counter
operator|)
name|metric
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|n
argument_list|,
name|convertCounter
argument_list|(
name|counter
argument_list|,
name|compact
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Gauge
condition|)
block|{
name|Gauge
name|gauge
init|=
operator|(
name|Gauge
operator|)
name|metric
decl_stmt|;
try|try
block|{
name|convertGauge
argument_list|(
name|n
argument_list|,
name|gauge
argument_list|,
name|simple
argument_list|,
name|compact
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InternalError
name|ie
parameter_list|)
block|{
if|if
condition|(
name|n
operator|.
name|startsWith
argument_list|(
literal|"memory."
argument_list|)
operator|&&
name|ie
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Memory Pool not found"
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error converting gauge '"
operator|+
name|n
operator|+
literal|"', possible JDK bug: SOLR-10362"
argument_list|,
name|ie
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|n
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ie
throw|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Meter
condition|)
block|{
name|Meter
name|meter
init|=
operator|(
name|Meter
operator|)
name|metric
decl_stmt|;
name|convertMeter
argument_list|(
name|n
argument_list|,
name|meter
argument_list|,
name|simple
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Timer
condition|)
block|{
name|Timer
name|timer
init|=
operator|(
name|Timer
operator|)
name|metric
decl_stmt|;
name|convertTimer
argument_list|(
name|n
argument_list|,
name|timer
argument_list|,
name|skipHistograms
argument_list|,
name|simple
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|Histogram
condition|)
block|{
if|if
condition|(
operator|!
name|skipHistograms
condition|)
block|{
name|Histogram
name|histogram
init|=
operator|(
name|Histogram
operator|)
name|metric
decl_stmt|;
name|convertHistogram
argument_list|(
name|n
argument_list|,
name|histogram
argument_list|,
name|simple
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|metric
operator|instanceof
name|AggregateMetric
condition|)
block|{
name|convertAggregateMetric
argument_list|(
name|n
argument_list|,
operator|(
name|AggregateMetric
operator|)
name|metric
argument_list|,
name|skipAggregateValues
argument_list|,
name|simple
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Convert an instance of {@link AggregateMetric}.    * @param name metric name    * @param metric an instance of {@link AggregateMetric}    * @param skipAggregateValues discard internal values of {@link AggregateMetric}-s.    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertAggregateMetric
specifier|static
name|void
name|convertAggregateMetric
parameter_list|(
name|String
name|name
parameter_list|,
name|AggregateMetric
name|metric
parameter_list|,
name|boolean
name|skipAggregateValues
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|simple
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|name
operator|+
literal|"."
operator|+
name|MEAN
argument_list|,
name|metric
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|metric
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
name|MAX
argument_list|,
name|metric
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
name|MIN
argument_list|,
name|metric
operator|.
name|getMin
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
name|MEAN
argument_list|,
name|metric
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
name|STDDEV
argument_list|,
name|metric
operator|.
name|getStdDev
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
name|SUM
argument_list|,
name|metric
operator|.
name|getSum
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|metric
operator|.
name|isEmpty
argument_list|()
operator|||
name|skipAggregateValues
operator|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
name|VALUES
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|metric
operator|.
name|getValues
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|v
operator|.
name|value
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"updateCount"
argument_list|,
name|v
operator|.
name|updateCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|name
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Convert an instance of {@link Histogram}. NOTE: it's assumed that histogram contains non-time    * based values that don't require unit conversion.    * @param name metric name    * @param histogram an instance of {@link Histogram}    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertHistogram
specifier|static
name|void
name|convertHistogram
parameter_list|(
name|String
name|name
parameter_list|,
name|Histogram
name|histogram
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
name|Snapshot
name|snapshot
init|=
name|histogram
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
if|if
condition|(
name|simple
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|name
operator|+
literal|"."
operator|+
name|MEAN
argument_list|,
name|snapshot
operator|.
name|getMean
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|histogram
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// non-time based values
name|addSnapshot
argument_list|(
name|response
argument_list|,
name|snapshot
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|name
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|// optionally convert ns to ms
end_comment

begin_function
DECL|method|nsToMs
specifier|static
name|double
name|nsToMs
parameter_list|(
name|boolean
name|convert
parameter_list|,
name|double
name|value
parameter_list|)
block|{
if|if
condition|(
name|convert
condition|)
block|{
return|return
name|nsToMs
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
end_function

begin_comment
comment|// some snapshots represent time in ns, other snapshots represent raw values (eg. chunk size)
end_comment

begin_function
DECL|method|addSnapshot
specifier|static
name|void
name|addSnapshot
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
parameter_list|,
name|Snapshot
name|snapshot
parameter_list|,
name|boolean
name|ms
parameter_list|)
block|{
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|MIN_MS
else|:
name|MIN
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|getMin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|MAX_MS
else|:
name|MAX
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|MEAN_MS
else|:
name|MEAN
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|getMean
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|MEDIAN_MS
else|:
name|MEDIAN
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|getMedian
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|STDDEV_MS
else|:
name|STDDEV
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|getStdDev
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|P75_MS
else|:
name|P75
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|P95_MS
else|:
name|P95
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|P99_MS
else|:
name|P99
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
operator|(
name|ms
condition|?
name|P999_MS
else|:
name|P999
operator|)
argument_list|,
name|nsToMs
argument_list|(
name|ms
argument_list|,
name|snapshot
operator|.
name|get999thPercentile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**    * Convert a {@link Timer} to a map.    * @param name metric name    * @param timer timer instance    * @param skipHistograms if true then discard the histogram part of the timer.    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertTimer
specifier|public
specifier|static
name|void
name|convertTimer
parameter_list|(
name|String
name|name
parameter_list|,
name|Timer
name|timer
parameter_list|,
name|boolean
name|skipHistograms
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|simple
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|name
operator|+
literal|".meanRate"
argument_list|,
name|timer
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|timer
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"meanRate"
argument_list|,
name|timer
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"1minRate"
argument_list|,
name|timer
operator|.
name|getOneMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"5minRate"
argument_list|,
name|timer
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"15minRate"
argument_list|,
name|timer
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|skipHistograms
condition|)
block|{
comment|// time-based values in nanoseconds
name|addSnapshot
argument_list|(
name|response
argument_list|,
name|timer
operator|.
name|getSnapshot
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|consumer
operator|.
name|accept
argument_list|(
name|name
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Convert a {@link Meter} to a map.    * @param name metric name    * @param meter meter instance    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertMeter
specifier|static
name|void
name|convertMeter
parameter_list|(
name|String
name|name
parameter_list|,
name|Meter
name|meter
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|simple
condition|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|name
operator|+
literal|".count"
argument_list|,
name|meter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|meter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"meanRate"
argument_list|,
name|meter
operator|.
name|getMeanRate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"1minRate"
argument_list|,
name|meter
operator|.
name|getOneMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"5minRate"
argument_list|,
name|meter
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"15minRate"
argument_list|,
name|meter
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|name
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Convert a {@link Gauge}.    * @param name metric name    * @param gauge gauge instance    * @param simple use simplified representation for complex metrics - instead of a (name, map)    *             only the selected (name "." key, value) pairs will be produced.    * @param compact if true then only return {@link Gauge#getValue()}. If false    *                then return a map with a "value" field.    * @param consumer consumer that accepts produced objects    */
end_comment

begin_function
DECL|method|convertGauge
specifier|static
name|void
name|convertGauge
parameter_list|(
name|String
name|name
parameter_list|,
name|Gauge
name|gauge
parameter_list|,
name|boolean
name|simple
parameter_list|,
name|boolean
name|compact
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|compact
operator|||
name|simple
condition|)
block|{
name|Object
name|o
init|=
name|gauge
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|simple
operator|&&
operator|(
name|o
operator|instanceof
name|Map
operator|)
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
operator|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|o
operator|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|name
operator|+
literal|"."
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|name
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|gauge
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|name
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**    * Convert a {@link Counter}    * @param counter counter instance    * @param compact if true then only return {@link Counter#getCount()}. If false    *                then return a map with a "count" field.    * @return map or object    */
end_comment

begin_function
DECL|method|convertCounter
specifier|static
name|Object
name|convertCounter
parameter_list|(
name|Counter
name|counter
parameter_list|,
name|boolean
name|compact
parameter_list|)
block|{
if|if
condition|(
name|compact
condition|)
block|{
return|return
name|counter
operator|.
name|getCount
argument_list|()
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|response
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|response
operator|.
name|put
argument_list|(
literal|"count"
argument_list|,
name|counter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
block|}
end_function

begin_comment
comment|/**    * Returns an instrumented wrapper over the given executor service.    */
end_comment

begin_function
DECL|method|instrumentedExecutorService
specifier|public
specifier|static
name|ExecutorService
name|instrumentedExecutorService
parameter_list|(
name|ExecutorService
name|delegate
parameter_list|,
name|SolrInfoBean
name|info
parameter_list|,
name|MetricRegistry
name|metricRegistry
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
name|info
operator|.
name|getMetricNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getMetricNames
argument_list|()
operator|.
name|add
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|scope
argument_list|,
literal|"submitted"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|getMetricNames
argument_list|()
operator|.
name|add
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|scope
argument_list|,
literal|"running"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|getMetricNames
argument_list|()
operator|.
name|add
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|scope
argument_list|,
literal|"completed"
argument_list|)
argument_list|)
expr_stmt|;
name|info
operator|.
name|getMetricNames
argument_list|()
operator|.
name|add
argument_list|(
name|MetricRegistry
operator|.
name|name
argument_list|(
name|scope
argument_list|,
literal|"duration"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|InstrumentedExecutorService
argument_list|(
name|delegate
argument_list|,
name|metricRegistry
argument_list|,
name|scope
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**    * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.    * @param obj an instance of MXBean    * @param intf MXBean interface, one of {@link PlatformManagedObject}-s    * @param consumer consumer for created names and metrics    * @param<T> formal type    */
end_comment

begin_function
DECL|method|addMXBeanMetrics
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|PlatformManagedObject
parameter_list|>
name|void
name|addMXBeanMetrics
parameter_list|(
name|T
name|obj
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|T
argument_list|>
name|intf
parameter_list|,
name|String
name|prefix
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|consumer
parameter_list|)
block|{
if|if
condition|(
name|intf
operator|.
name|isInstance
argument_list|(
name|obj
argument_list|)
condition|)
block|{
name|BeanInfo
name|beanInfo
decl_stmt|;
try|try
block|{
name|beanInfo
operator|=
name|Introspector
operator|.
name|getBeanInfo
argument_list|(
name|intf
argument_list|,
name|intf
operator|.
name|getSuperclass
argument_list|()
argument_list|,
name|Introspector
operator|.
name|IGNORE_ALL_BEANINFO
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IntrospectionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to fetch properties of MXBean "
operator|+
name|obj
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
specifier|final
name|PropertyDescriptor
name|desc
range|:
name|beanInfo
operator|.
name|getPropertyDescriptors
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|desc
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// test if it works at all
try|try
block|{
name|desc
operator|.
name|getReadMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|obj
argument_list|)
expr_stmt|;
comment|// worked - consume it
specifier|final
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
init|=
parameter_list|()
lambda|->
block|{
try|try
block|{
return|return
name|desc
operator|.
name|getReadMethod
argument_list|()
operator|.
name|invoke
argument_list|(
name|obj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
comment|// ignore (some properties throw UOE)
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|String
name|metricName
init|=
name|MetricRegistry
operator|.
name|name
argument_list|(
name|prefix
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|metricName
argument_list|,
name|gauge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// didn't work, skip it...
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**    * These are well-known implementations of {@link java.lang.management.OperatingSystemMXBean}.    * Some of them provide additional useful properties beyond those declared by the interface.    */
end_comment

begin_decl_stmt
DECL|field|OS_MXBEAN_CLASSES
specifier|public
specifier|static
name|String
index|[]
name|OS_MXBEAN_CLASSES
init|=
operator|new
name|String
index|[]
block|{
name|OperatingSystemMXBean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
literal|"com.sun.management.OperatingSystemMXBean"
block|,
literal|"com.sun.management.UnixOperatingSystemMXBean"
block|,
literal|"com.ibm.lang.management.OperatingSystemMXBean"
block|}
decl_stmt|;
end_decl_stmt

begin_comment
comment|/**    * Creates a set of metrics (gauges) that correspond to available bean properties for the provided MXBean.    * @param obj an instance of MXBean    * @param interfaces interfaces that it may implement. Each interface will be tried in turn, and only    *                   if it exists and if it contains unique properties then they will be added as metrics.    * @param prefix optional prefix for metric names    * @param consumer consumer for created names and metrics    * @param<T> formal type    */
end_comment

begin_function
DECL|method|addMXBeanMetrics
specifier|public
specifier|static
parameter_list|<
name|T
extends|extends
name|PlatformManagedObject
parameter_list|>
name|void
name|addMXBeanMetrics
parameter_list|(
name|T
name|obj
parameter_list|,
name|String
index|[]
name|interfaces
parameter_list|,
name|String
name|prefix
parameter_list|,
name|BiConsumer
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|consumer
parameter_list|)
block|{
for|for
control|(
name|String
name|clazz
range|:
name|interfaces
control|)
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|PlatformManagedObject
argument_list|>
name|intf
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|PlatformManagedObject
operator|.
name|class
argument_list|)
decl_stmt|;
name|MetricUtils
operator|.
name|addMXBeanMetrics
argument_list|(
name|obj
argument_list|,
name|intf
argument_list|,
literal|null
argument_list|,
name|consumer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
block|}
end_function

unit|}
end_unit

