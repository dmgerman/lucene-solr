begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|PhantomReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileCleaningTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileDeleteStrategy
import|;
end_import

begin_class
DECL|class|SolrFileCleaningTracker
specifier|public
class|class
name|SolrFileCleaningTracker
extends|extends
name|FileCleaningTracker
block|{
DECL|field|q
name|ReferenceQueue
argument_list|<
name|Object
argument_list|>
name|q
init|=
operator|new
name|ReferenceQueue
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|trackers
specifier|final
name|Collection
argument_list|<
name|Tracker
argument_list|>
name|trackers
init|=
name|Collections
operator|.
name|synchronizedSet
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Tracker
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|deleteFailures
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|deleteFailures
init|=
name|Collections
operator|.
name|synchronizedList
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|exitWhenFinished
specifier|volatile
name|boolean
name|exitWhenFinished
init|=
literal|false
decl_stmt|;
DECL|field|reaper
name|Thread
name|reaper
decl_stmt|;
DECL|method|track
specifier|public
name|void
name|track
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|Object
name|marker
parameter_list|)
block|{
name|track
argument_list|(
name|file
argument_list|,
name|marker
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|track
specifier|public
name|void
name|track
parameter_list|(
specifier|final
name|File
name|file
parameter_list|,
specifier|final
name|Object
name|marker
parameter_list|,
specifier|final
name|FileDeleteStrategy
name|deleteStrategy
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The file must not be null"
argument_list|)
throw|;
block|}
name|addTracker
argument_list|(
name|file
operator|.
name|getPath
argument_list|()
argument_list|,
name|marker
argument_list|,
name|deleteStrategy
argument_list|)
expr_stmt|;
block|}
DECL|method|track
specifier|public
name|void
name|track
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Object
name|marker
parameter_list|)
block|{
name|track
argument_list|(
name|path
argument_list|,
name|marker
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|track
specifier|public
name|void
name|track
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Object
name|marker
parameter_list|,
specifier|final
name|FileDeleteStrategy
name|deleteStrategy
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"The path must not be null"
argument_list|)
throw|;
block|}
name|addTracker
argument_list|(
name|path
argument_list|,
name|marker
argument_list|,
name|deleteStrategy
argument_list|)
expr_stmt|;
block|}
DECL|method|addTracker
specifier|private
specifier|synchronized
name|void
name|addTracker
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|Object
name|marker
parameter_list|,
specifier|final
name|FileDeleteStrategy
name|deleteStrategy
parameter_list|)
block|{
if|if
condition|(
name|exitWhenFinished
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"No new trackers can be added once exitWhenFinished() is called"
argument_list|)
throw|;
block|}
if|if
condition|(
name|reaper
operator|==
literal|null
condition|)
block|{
name|reaper
operator|=
operator|new
name|Reaper
argument_list|()
expr_stmt|;
name|reaper
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|trackers
operator|.
name|add
argument_list|(
operator|new
name|Tracker
argument_list|(
name|path
argument_list|,
name|deleteStrategy
argument_list|,
name|marker
argument_list|,
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getTrackCount
specifier|public
name|int
name|getTrackCount
parameter_list|()
block|{
return|return
name|trackers
operator|.
name|size
argument_list|()
return|;
block|}
DECL|method|getDeleteFailures
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDeleteFailures
parameter_list|()
block|{
return|return
name|deleteFailures
return|;
block|}
DECL|method|exitWhenFinished
specifier|public
specifier|synchronized
name|void
name|exitWhenFinished
parameter_list|()
block|{
comment|// synchronized block protects reaper
name|exitWhenFinished
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|reaper
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|reaper
init|)
block|{
name|reaper
operator|.
name|interrupt
argument_list|()
expr_stmt|;
try|try
block|{
name|reaper
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|Reaper
specifier|private
specifier|final
class|class
name|Reaper
extends|extends
name|Thread
block|{
DECL|method|Reaper
name|Reaper
parameter_list|()
block|{
name|super
argument_list|(
literal|"MultiPart Upload Tmp File Reaper"
argument_list|)
expr_stmt|;
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
name|exitWhenFinished
operator|==
literal|false
operator|||
name|trackers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
comment|// Wait for a tracker to remove.
specifier|final
name|Tracker
name|tracker
init|=
operator|(
name|Tracker
operator|)
name|q
operator|.
name|remove
argument_list|()
decl_stmt|;
comment|// cannot return null
name|trackers
operator|.
name|remove
argument_list|(
name|tracker
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tracker
operator|.
name|delete
argument_list|()
condition|)
block|{
name|deleteFailures
operator|.
name|add
argument_list|(
name|tracker
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tracker
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
DECL|class|Tracker
specifier|private
specifier|static
specifier|final
class|class
name|Tracker
extends|extends
name|PhantomReference
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|path
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
DECL|field|deleteStrategy
specifier|private
specifier|final
name|FileDeleteStrategy
name|deleteStrategy
decl_stmt|;
DECL|method|Tracker
name|Tracker
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
specifier|final
name|FileDeleteStrategy
name|deleteStrategy
parameter_list|,
specifier|final
name|Object
name|marker
parameter_list|,
specifier|final
name|ReferenceQueue
argument_list|<
name|?
super|super
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
name|super
argument_list|(
name|marker
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|deleteStrategy
operator|=
name|deleteStrategy
operator|==
literal|null
condition|?
name|FileDeleteStrategy
operator|.
name|NORMAL
else|:
name|deleteStrategy
expr_stmt|;
block|}
DECL|method|getPath
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
DECL|method|delete
specifier|public
name|boolean
name|delete
parameter_list|()
block|{
return|return
name|deleteStrategy
operator|.
name|deleteQuietly
argument_list|(
operator|new
name|File
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

