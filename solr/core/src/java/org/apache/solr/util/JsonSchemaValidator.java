begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_comment
comment|/**  * A very basic and lightweight json schema parsing and data validation tool. This custom tool is created  * because a) we need to support non json inputs b) to avoiding double parsing (this accepts an already parsed json as a map)  * It validates most aspects of json schema but it is NOT A FULLY COMPLIANT JSON schema parser or validator.  * This validator borrow some design's idea from https://github.com/networknt/json-schema-validator  */
end_comment

begin_class
DECL|class|JsonSchemaValidator
specifier|public
class|class
name|JsonSchemaValidator
block|{
DECL|field|validators
specifier|private
name|List
argument_list|<
name|Validator
argument_list|>
name|validators
decl_stmt|;
DECL|field|KNOWN_FNAMES
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|KNOWN_FNAMES
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"description"
argument_list|,
literal|"documentation"
argument_list|,
literal|"default"
argument_list|,
literal|"additionalProperties"
argument_list|)
argument_list|)
decl_stmt|;
DECL|method|JsonSchemaValidator
specifier|public
name|JsonSchemaValidator
parameter_list|(
name|String
name|jsonString
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|jsonString
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|JsonSchemaValidator
specifier|public
name|JsonSchemaValidator
parameter_list|(
name|Map
name|jsonSchema
parameter_list|)
block|{
name|this
operator|.
name|validators
operator|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|Object
name|fname
range|:
name|jsonSchema
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|KNOWN_FNAMES
operator|.
name|contains
argument_list|(
name|fname
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
continue|continue;
name|Function
argument_list|<
name|Pair
argument_list|<
name|Map
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Validator
argument_list|>
name|initializeFunction
init|=
name|VALIDATORS
operator|.
name|get
argument_list|(
name|fname
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|initializeFunction
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown key : "
operator|+
name|fname
argument_list|)
throw|;
name|this
operator|.
name|validators
operator|.
name|add
argument_list|(
name|initializeFunction
operator|.
name|apply
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|jsonSchema
argument_list|,
name|jsonSchema
operator|.
name|get
argument_list|(
name|fname
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|VALIDATORS
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|<
name|Pair
argument_list|<
name|Map
argument_list|,
name|Object
argument_list|>
argument_list|,
name|Validator
argument_list|>
argument_list|>
name|VALIDATORS
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
name|VALIDATORS
operator|.
name|put
argument_list|(
literal|"items"
argument_list|,
name|pair
lambda|->
operator|new
name|ItemsValidator
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|,
operator|(
name|Map
operator|)
name|pair
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VALIDATORS
operator|.
name|put
argument_list|(
literal|"enum"
argument_list|,
name|pair
lambda|->
operator|new
name|EnumValidator
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|,
operator|(
name|List
operator|)
name|pair
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VALIDATORS
operator|.
name|put
argument_list|(
literal|"properties"
argument_list|,
name|pair
lambda|->
operator|new
name|PropertiesValidator
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|,
operator|(
name|Map
operator|)
name|pair
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VALIDATORS
operator|.
name|put
argument_list|(
literal|"type"
argument_list|,
name|pair
lambda|->
operator|new
name|TypeValidator
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|,
name|pair
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VALIDATORS
operator|.
name|put
argument_list|(
literal|"required"
argument_list|,
name|pair
lambda|->
operator|new
name|RequiredValidator
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|,
operator|(
name|List
operator|)
name|pair
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|VALIDATORS
operator|.
name|put
argument_list|(
literal|"oneOf"
argument_list|,
name|pair
lambda|->
operator|new
name|OneOfValidator
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|,
operator|(
name|List
operator|)
name|pair
operator|.
name|second
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validateJson
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|validateJson
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|validate
argument_list|(
name|data
argument_list|,
name|errs
argument_list|)
expr_stmt|;
return|return
name|errs
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|errs
return|;
block|}
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|data
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
for|for
control|(
name|Validator
name|validator
range|:
name|validators
control|)
block|{
if|if
condition|(
operator|!
name|validator
operator|.
name|validate
argument_list|(
name|data
argument_list|,
name|errs
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

begin_class
DECL|class|Validator
specifier|abstract
class|class
name|Validator
parameter_list|<
name|T
parameter_list|>
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
DECL|method|Validator
name|Validator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|T
name|properties
parameter_list|)
block|{}
empty_stmt|;
DECL|method|validate
specifier|abstract
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
function_decl|;
block|}
end_class

begin_enum
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enum constant|STRING
name|STRING
parameter_list|(
name|String
operator|.
name|class
parameter_list|)
operator|,
DECL|enum constant|ARRAY
constructor|ARRAY(List.class
block|)
enum|,
DECL|enum constant|NUMBER
name|NUMBER
argument_list|(
name|Number
operator|.
name|class
argument_list|)
operator|,
DECL|enum constant|INTEGER
name|INTEGER
argument_list|(
name|Long
operator|.
name|class
argument_list|)
operator|,
DECL|enum constant|BOOLEAN
name|BOOLEAN
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
operator|,
DECL|enum constant|ENUM
name|ENUM
argument_list|(
name|List
operator|.
name|class
argument_list|)
operator|,
DECL|enum constant|OBJECT
name|OBJECT
argument_list|(
name|Map
operator|.
name|class
argument_list|)
operator|,
DECL|enum constant|NULL
name|NULL
argument_list|(
literal|null
argument_list|)
operator|,
DECL|enum constant|UNKNOWN
name|UNKNOWN
argument_list|(
name|Object
operator|.
name|class
argument_list|)
enum|;
end_enum

begin_decl_stmt
DECL|field|type
name|Class
name|type
decl_stmt|;
end_decl_stmt

begin_expr_stmt
DECL|method|Type
name|Type
argument_list|(
name|Class
name|type
argument_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
block|;   }
DECL|method|isValid
name|boolean
name|isValid
argument_list|(
name|Object
name|o
argument_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
return|return
name|o
operator|==
literal|null
return|;
end_expr_stmt

begin_return
return|return
name|type
operator|.
name|isInstance
argument_list|(
name|o
argument_list|)
return|;
end_return

begin_class
unit|} }
DECL|class|TypeValidator
class|class
name|TypeValidator
extends|extends
name|Validator
argument_list|<
name|Object
argument_list|>
block|{
DECL|field|types
specifier|private
name|Set
argument_list|<
name|Type
argument_list|>
name|types
decl_stmt|;
DECL|method|TypeValidator
name|TypeValidator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|Object
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|types
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|instanceof
name|List
condition|)
block|{
for|for
control|(
name|Object
name|t
range|:
operator|(
name|List
operator|)
name|type
control|)
block|{
name|types
operator|.
name|add
argument_list|(
name|getType
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|types
operator|.
name|add
argument_list|(
name|getType
argument_list|(
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getType
specifier|private
name|Type
name|getType
parameter_list|(
name|String
name|typeStr
parameter_list|)
block|{
try|try
block|{
return|return
name|Type
operator|.
name|valueOf
argument_list|(
name|typeStr
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown type "
operator|+
name|typeStr
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
for|for
control|(
name|Type
name|type
range|:
name|types
control|)
block|{
if|if
condition|(
name|type
operator|.
name|isValid
argument_list|(
name|o
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
name|errs
operator|.
name|add
argument_list|(
literal|"Value is not valid, expected one of: "
operator|+
name|types
operator|+
literal|", found: "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|ItemsValidator
class|class
name|ItemsValidator
extends|extends
name|Validator
argument_list|<
name|Map
argument_list|>
block|{
DECL|field|validator
specifier|private
name|JsonSchemaValidator
name|validator
decl_stmt|;
DECL|method|ItemsValidator
name|ItemsValidator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|Map
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
for|for
control|(
name|Object
name|o2
range|:
operator|(
name|List
operator|)
name|o
control|)
block|{
if|if
condition|(
operator|!
name|validator
operator|.
name|validate
argument_list|(
name|o2
argument_list|,
name|errs
argument_list|)
condition|)
block|{
name|errs
operator|.
name|add
argument_list|(
literal|"Items not valid"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|EnumValidator
class|class
name|EnumValidator
extends|extends
name|Validator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|enumVals
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|enumVals
decl_stmt|;
DECL|method|EnumValidator
name|EnumValidator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|enumVals
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
if|if
condition|(
operator|!
name|enumVals
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|errs
operator|.
name|add
argument_list|(
literal|"Value of enum must be one of "
operator|+
name|enumVals
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|RequiredValidator
class|class
name|RequiredValidator
extends|extends
name|Validator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|requiredProps
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|requiredProps
decl_stmt|;
DECL|method|RequiredValidator
name|RequiredValidator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|requiredProps
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|requiredProps
argument_list|)
expr_stmt|;
name|this
operator|.
name|requiredProps
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|requiredProps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Set
name|fnames
init|=
operator|(
operator|(
name|Map
operator|)
name|o
operator|)
operator|.
name|keySet
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|requiredProp
range|:
name|requiredProps
control|)
block|{
if|if
condition|(
operator|!
name|fnames
operator|.
name|contains
argument_list|(
name|requiredProp
argument_list|)
condition|)
block|{
name|errs
operator|.
name|add
argument_list|(
literal|"Missing required attribute '"
operator|+
name|requiredProp
operator|+
literal|"' in object "
operator|+
name|Utils
operator|.
name|toJSONString
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|PropertiesValidator
class|class
name|PropertiesValidator
extends|extends
name|Validator
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
argument_list|>
block|{
DECL|field|jsonSchemas
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|JsonSchemaValidator
argument_list|>
name|jsonSchemas
decl_stmt|;
DECL|field|additionalProperties
specifier|private
name|boolean
name|additionalProperties
decl_stmt|;
DECL|method|PropertiesValidator
name|PropertiesValidator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|properties
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|jsonSchemas
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|additionalProperties
operator|=
operator|(
name|boolean
operator|)
name|schema
operator|.
name|getOrDefault
argument_list|(
literal|"additionalProperties"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|jsonSchemas
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|new
name|JsonSchemaValidator
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|JsonSchemaValidator
name|jsonSchema
init|=
name|jsonSchemas
operator|.
name|get
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|jsonSchema
operator|==
literal|null
operator|&&
operator|!
name|additionalProperties
condition|)
block|{
name|errs
operator|.
name|add
argument_list|(
literal|"Unknown field '"
operator|+
name|key
operator|+
literal|"' in object : "
operator|+
name|Utils
operator|.
name|toJSONString
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|jsonSchema
operator|!=
literal|null
operator|&&
operator|!
name|jsonSchema
operator|.
name|validate
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|,
name|errs
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

begin_class
DECL|class|OneOfValidator
class|class
name|OneOfValidator
extends|extends
name|Validator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
block|{
DECL|field|oneOfProps
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|oneOfProps
decl_stmt|;
DECL|method|OneOfValidator
name|OneOfValidator
parameter_list|(
name|Map
name|schema
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|oneOfProps
parameter_list|)
block|{
name|super
argument_list|(
name|schema
argument_list|,
name|oneOfProps
argument_list|)
expr_stmt|;
name|this
operator|.
name|oneOfProps
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|oneOfProps
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
name|boolean
name|validate
parameter_list|(
name|Object
name|o
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|errs
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
for|for
control|(
name|Object
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|oneOfProps
operator|.
name|contains
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
name|errs
operator|.
name|add
argument_list|(
literal|"One of fields :"
operator|+
name|oneOfProps
operator|+
literal|" is not presented in object : "
operator|+
name|Utils
operator|.
name|toJSONString
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

