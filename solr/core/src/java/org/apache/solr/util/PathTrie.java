begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_comment
comment|/**A utility class to efficiently parse/store/lookup hierarchical paths which are templatized  * like /collections/{collection}/shards/{shard}/{replica}  */
end_comment

begin_class
DECL|class|PathTrie
specifier|public
class|class
name|PathTrie
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|reserved
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|reserved
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|root
name|Node
name|root
init|=
operator|new
name|Node
argument_list|(
name|emptyList
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|method|PathTrie
specifier|public
name|PathTrie
parameter_list|()
block|{ }
DECL|method|PathTrie
specifier|public
name|PathTrie
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|reserved
parameter_list|)
block|{
name|this
operator|.
name|reserved
operator|.
name|addAll
argument_list|(
name|reserved
argument_list|)
expr_stmt|;
block|}
DECL|method|insert
specifier|public
name|void
name|insert
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacements
parameter_list|,
name|T
name|o
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|getPathSegments
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|insert
argument_list|(
name|parts
argument_list|,
name|replacements
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
DECL|method|insert
specifier|public
name|void
name|insert
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|replacements
parameter_list|,
name|T
name|o
parameter_list|)
block|{
if|if
condition|(
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|root
operator|.
name|obj
operator|=
name|o
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'$'
condition|)
block|{
name|String
name|replacement
init|=
name|replacements
operator|.
name|get
argument_list|(
name|part
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|replacement
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|part
operator|+
literal|" is not provided"
argument_list|)
throw|;
block|}
name|replacement
operator|=
name|replacement
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|?
name|replacement
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|replacement
expr_stmt|;
name|parts
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|replacement
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|insert
argument_list|(
name|parts
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
comment|// /a/b/c will be returned as ["a","b","c"]
DECL|method|getPathSegments
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getPathSegments
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|==
literal|null
operator|||
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|emptyList
argument_list|()
return|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|add
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
return|return
name|super
operator|.
name|add
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|,
name|parts
argument_list|)
expr_stmt|;
return|return
name|parts
return|;
block|}
DECL|method|lookup
specifier|public
name|T
name|lookup
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateValues
parameter_list|)
block|{
return|return
name|root
operator|.
name|lookup
argument_list|(
name|getPathSegments
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|,
name|templateValues
argument_list|)
return|;
block|}
DECL|method|lookup
specifier|public
name|T
name|lookup
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateValues
parameter_list|)
block|{
return|return
name|root
operator|.
name|lookup
argument_list|(
name|path
argument_list|,
literal|0
argument_list|,
name|templateValues
argument_list|)
return|;
block|}
DECL|method|lookup
specifier|public
name|T
name|lookup
parameter_list|(
name|String
name|path
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateValues
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
return|return
name|root
operator|.
name|lookup
argument_list|(
name|getPathSegments
argument_list|(
name|path
argument_list|)
argument_list|,
literal|0
argument_list|,
name|templateValues
argument_list|,
name|paths
argument_list|)
return|;
block|}
DECL|method|templateName
specifier|public
specifier|static
name|String
name|templateName
parameter_list|(
name|String
name|templateStr
parameter_list|)
block|{
return|return
name|templateStr
operator|.
name|startsWith
argument_list|(
literal|"{"
argument_list|)
operator|&&
name|templateStr
operator|.
name|endsWith
argument_list|(
literal|"}"
argument_list|)
condition|?
name|templateStr
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|templateStr
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|null
return|;
block|}
DECL|class|Node
class|class
name|Node
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|children
name|Map
argument_list|<
name|String
argument_list|,
name|Node
argument_list|>
name|children
decl_stmt|;
DECL|field|obj
name|T
name|obj
decl_stmt|;
DECL|field|templateName
name|String
name|templateName
decl_stmt|;
DECL|method|Node
name|Node
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|,
name|T
name|o
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|obj
operator|=
name|o
expr_stmt|;
return|return;
block|}
name|String
name|part
init|=
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|templateName
operator|=
name|templateName
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|name
operator|=
name|part
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|obj
operator|=
name|o
expr_stmt|;
block|}
DECL|method|insert
specifier|private
specifier|synchronized
name|void
name|insert
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|path
parameter_list|,
name|T
name|o
parameter_list|)
block|{
name|String
name|part
init|=
name|path
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Node
name|matchedChild
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
name|children
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|String
name|varName
init|=
name|templateName
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|String
name|key
init|=
name|varName
operator|==
literal|null
condition|?
name|part
else|:
literal|""
decl_stmt|;
name|matchedChild
operator|=
name|children
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|matchedChild
operator|==
literal|null
condition|)
block|{
name|children
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|matchedChild
operator|=
operator|new
name|Node
argument_list|(
name|path
argument_list|,
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|varName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|matchedChild
operator|.
name|templateName
operator|.
name|equals
argument_list|(
name|varName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"wildcard name must be "
operator|+
name|matchedChild
operator|.
name|templateName
argument_list|)
throw|;
block|}
block|}
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|matchedChild
operator|.
name|insert
argument_list|(
name|path
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|matchedChild
operator|.
name|obj
operator|=
name|o
expr_stmt|;
block|}
block|}
DECL|method|findAvailableChildren
name|void
name|findAvailableChildren
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|availableSubPaths
parameter_list|)
block|{
if|if
condition|(
name|availableSubPaths
operator|==
literal|null
condition|)
return|return;
if|if
condition|(
name|children
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Node
name|node
range|:
name|children
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|obj
operator|!=
literal|null
condition|)
block|{
name|String
name|s
init|=
name|path
operator|+
literal|"/"
operator|+
name|node
operator|.
name|name
decl_stmt|;
name|availableSubPaths
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Node
name|node
range|:
name|children
operator|.
name|values
argument_list|()
control|)
block|{
name|node
operator|.
name|findAvailableChildren
argument_list|(
name|path
operator|+
literal|"/"
operator|+
name|node
operator|.
name|name
argument_list|,
name|availableSubPaths
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|lookup
specifier|public
name|T
name|lookup
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|pieces
parameter_list|,
name|int
name|i
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateValues
parameter_list|)
block|{
return|return
name|lookup
argument_list|(
name|pieces
argument_list|,
name|i
argument_list|,
name|templateValues
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      *      * @param pathSegments pieces in the url /a/b/c has pieces as 'a' , 'b' , 'c'      * @param index current index of the pieces that we are looking at in /a/b/c 0='a' and 1='b'      * @param templateVariables The mapping of template variable to its value      * @param availableSubPaths If not null , available sub paths will be returned in this set      */
DECL|method|lookup
specifier|public
name|T
name|lookup
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|pathSegments
parameter_list|,
name|int
name|index
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|templateVariables
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|availableSubPaths
parameter_list|)
block|{
if|if
condition|(
name|templateName
operator|!=
literal|null
condition|)
name|templateVariables
operator|.
name|put
argument_list|(
name|templateName
argument_list|,
name|pathSegments
operator|.
name|get
argument_list|(
name|index
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|pathSegments
operator|.
name|size
argument_list|()
operator|<
name|index
operator|+
literal|1
condition|)
block|{
name|findAvailableChildren
argument_list|(
literal|""
argument_list|,
name|availableSubPaths
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
name|String
name|piece
init|=
name|pathSegments
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|children
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Node
name|n
init|=
name|children
operator|.
name|get
argument_list|(
name|piece
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
operator|&&
operator|!
name|reserved
operator|.
name|contains
argument_list|(
name|piece
argument_list|)
condition|)
name|n
operator|=
name|children
operator|.
name|get
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|n
operator|.
name|lookup
argument_list|(
name|pathSegments
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|templateVariables
argument_list|,
name|availableSubPaths
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

