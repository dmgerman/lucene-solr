begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|DelimitedPayloadTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|NumericPayloadTokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|payloads
operator|.
name|PayloadHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenFilterFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|payloads
operator|.
name|AveragePayloadFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|payloads
operator|.
name|MaxPayloadFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|payloads
operator|.
name|MinPayloadFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|payloads
operator|.
name|PayloadFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|analysis
operator|.
name|TokenizerChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_class
DECL|class|PayloadUtils
specifier|public
class|class
name|PayloadUtils
block|{
DECL|method|getPayloadEncoder
specifier|public
specifier|static
name|String
name|getPayloadEncoder
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
comment|// TODO: support custom payload encoding fields too somehow - maybe someone has a custom component that encodes payloads as floats
name|String
name|encoder
init|=
literal|null
decl_stmt|;
name|Analyzer
name|a
init|=
name|fieldType
operator|.
name|getIndexAnalyzer
argument_list|()
decl_stmt|;
if|if
condition|(
name|a
operator|instanceof
name|TokenizerChain
condition|)
block|{
comment|// examine the indexing analysis chain for DelimitedPayloadTokenFilterFactory or NumericPayloadTokenFilterFactory
name|TokenizerChain
name|tc
init|=
operator|(
name|TokenizerChain
operator|)
name|a
decl_stmt|;
name|TokenFilterFactory
index|[]
name|factories
init|=
name|tc
operator|.
name|getTokenFilterFactories
argument_list|()
decl_stmt|;
for|for
control|(
name|TokenFilterFactory
name|factory
range|:
name|factories
control|)
block|{
if|if
condition|(
name|factory
operator|instanceof
name|DelimitedPayloadTokenFilterFactory
condition|)
block|{
name|encoder
operator|=
name|factory
operator|.
name|getOriginalArgs
argument_list|()
operator|.
name|get
argument_list|(
name|DelimitedPayloadTokenFilterFactory
operator|.
name|ENCODER_ATTR
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|factory
operator|instanceof
name|NumericPayloadTokenFilterFactory
condition|)
block|{
comment|// encodes using `PayloadHelper.encodeFloat(payload)`
name|encoder
operator|=
literal|"float"
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|encoder
return|;
block|}
DECL|method|getPayloadDecoder
specifier|public
specifier|static
name|PayloadDecoder
name|getPayloadDecoder
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
name|PayloadDecoder
name|decoder
init|=
literal|null
decl_stmt|;
name|String
name|encoder
init|=
name|getPayloadEncoder
argument_list|(
name|fieldType
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"integer"
operator|.
name|equals
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|decoder
operator|=
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
lambda|->
name|PayloadHelper
operator|.
name|decodeInt
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"float"
operator|.
name|equals
argument_list|(
name|encoder
argument_list|)
condition|)
block|{
name|decoder
operator|=
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
lambda|->
name|PayloadHelper
operator|.
name|decodeFloat
argument_list|(
name|payload
operator|.
name|bytes
argument_list|,
name|payload
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
comment|// encoder could be "identity" at this point, in the case of DelimitedTokenFilterFactory encoder="identity"
comment|// TODO: support pluggable payload decoders?
return|return
name|decoder
return|;
block|}
DECL|method|getPayloadFunction
specifier|public
specifier|static
name|PayloadFunction
name|getPayloadFunction
parameter_list|(
name|String
name|func
parameter_list|)
block|{
name|PayloadFunction
name|payloadFunction
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|"min"
operator|.
name|equals
argument_list|(
name|func
argument_list|)
condition|)
block|{
name|payloadFunction
operator|=
operator|new
name|MinPayloadFunction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"max"
operator|.
name|equals
argument_list|(
name|func
argument_list|)
condition|)
block|{
name|payloadFunction
operator|=
operator|new
name|MaxPayloadFunction
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"average"
operator|.
name|equals
argument_list|(
name|func
argument_list|)
condition|)
block|{
name|payloadFunction
operator|=
operator|new
name|AveragePayloadFunction
argument_list|()
expr_stmt|;
block|}
return|return
name|payloadFunction
return|;
block|}
DECL|method|createSpanQuery
specifier|public
specifier|static
name|SpanQuery
name|createSpanQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|value
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
block|{
name|SpanQuery
name|query
decl_stmt|;
try|try
block|{
comment|// adapted this from QueryBuilder.createSpanQuery (which isn't currently public) and added reset(), end(), and close() calls
name|TokenStream
name|in
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|field
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|TermToBytesRefAttribute
name|termAtt
init|=
name|in
operator|.
name|getAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SpanTermQuery
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termAtt
operator|.
name|getBytesRef
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|in
operator|.
name|end
argument_list|()
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|terms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|query
operator|=
literal|null
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|query
operator|=
name|terms
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|query
operator|=
operator|new
name|SpanNearQuery
argument_list|(
name|terms
operator|.
name|toArray
argument_list|(
operator|new
name|SpanTermQuery
index|[
name|terms
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|query
return|;
block|}
block|}
end_class

end_unit

