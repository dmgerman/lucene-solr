begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|CollectionSnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|CollectionSnapshotMetaData
operator|.
name|CoreSnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|CollectionSnapshotMetaData
operator|.
name|SnapshotStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This class implements the functionality of creating a collection level snapshot.  */
end_comment

begin_class
DECL|class|CreateSnapshotCmd
specifier|public
class|class
name|CreateSnapshotCmd
implements|implements
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|CreateSnapshotCmd
specifier|public
name|CreateSnapshotCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|commitName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|COMMIT_NAME
argument_list|)
decl_stmt|;
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|this
operator|.
name|ocmh
operator|.
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|Date
name|creationDate
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
if|if
condition|(
name|SolrSnapshotManager
operator|.
name|snapshotExists
argument_list|(
name|zkClient
argument_list|,
name|collectionName
argument_list|,
name|commitName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Snapshot with name "
operator|+
name|commitName
operator|+
literal|" already exists for collection "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Creating a snapshot for collection={} with commitName={}"
argument_list|,
name|collectionName
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
comment|// Create a node in ZK to store the collection level snapshot meta-data.
name|SolrSnapshotManager
operator|.
name|createCollectionLevelSnapshot
argument_list|(
name|zkClient
argument_list|,
name|collectionName
argument_list|,
operator|new
name|CollectionSnapshotMetaData
argument_list|(
name|commitName
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Created a ZK path to store snapshot information for collection={} with commitName={}"
argument_list|,
name|collectionName
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
name|shardRequestResults
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|shardByCoreName
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|ocmh
operator|.
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|ACTIVE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Replica {} is not active. Hence not sending the createsnapshot request"
argument_list|,
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
comment|// Since replica is not active - no point sending a request.
block|}
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|CREATESNAPSHOT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|NAME
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COMMIT_NAME
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sent createsnapshot request to core={} with commitName={}"
argument_list|,
name|coreName
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
name|shardByCoreName
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
comment|// At this point we want to make sure that at-least one replica for every shard
comment|// is able to create the snapshot. If that is not the case, then we fail the request.
comment|// This is to take care of the situation where e.g. entire shard is unavailable.
name|Set
argument_list|<
name|String
argument_list|>
name|failedShards
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|shardRequestResults
argument_list|,
name|shardHandler
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|NamedList
name|success
init|=
operator|(
name|NamedList
operator|)
name|shardRequestResults
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CoreSnapshotMetaData
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|success
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|success
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NamedList
name|resp
init|=
operator|(
name|NamedList
operator|)
name|success
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Check if this core is the leader for the shard. The idea here is that during the backup
comment|// operation we preferably use the snapshot of the "leader" replica since it is most likely
comment|// to have latest state.
name|String
name|coreName
init|=
operator|(
name|String
operator|)
name|resp
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|shardByCoreName
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
name|boolean
name|leader
init|=
operator|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|!=
literal|null
operator|&&
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreName
argument_list|()
operator|.
name|equals
argument_list|(
name|coreName
argument_list|)
operator|)
decl_stmt|;
name|resp
operator|.
name|add
argument_list|(
name|SolrSnapshotManager
operator|.
name|SHARD_ID
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|resp
operator|.
name|add
argument_list|(
name|SolrSnapshotManager
operator|.
name|LEADER
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|CoreSnapshotMetaData
name|c
init|=
operator|new
name|CoreSnapshotMetaData
argument_list|(
name|resp
argument_list|)
decl_stmt|;
name|replicas
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Snapshot with commitName {} is created successfully for core {}"
argument_list|,
name|commitName
argument_list|,
name|c
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|shardByCoreName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// One or more failures.
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to create a snapshot with name {} for following cores {}"
argument_list|,
name|commitName
argument_list|,
name|shardByCoreName
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Count number of failures per shard.
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|failuresByShardId
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|entry
range|:
name|shardByCoreName
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|f
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|failuresByShardId
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|f
operator|=
name|failuresByShardId
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|failuresByShardId
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Now that we know number of failures per shard, we can figure out
comment|// if at-least one replica per shard was able to create a snapshot or not.
name|DocCollection
name|collectionStatus
init|=
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|entry
range|:
name|failuresByShardId
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|int
name|replicaCount
init|=
name|collectionStatus
operator|.
name|getSlice
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicaCount
operator|<=
name|entry
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|failedShards
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|failedShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No failures.
name|CollectionSnapshotMetaData
name|meta
init|=
operator|new
name|CollectionSnapshotMetaData
argument_list|(
name|commitName
argument_list|,
name|SnapshotStatus
operator|.
name|Successful
argument_list|,
name|creationDate
argument_list|,
name|replicas
argument_list|)
decl_stmt|;
name|SolrSnapshotManager
operator|.
name|updateCollectionLevelSnapshot
argument_list|(
name|zkClient
argument_list|,
name|collectionName
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Saved following snapshot information for collection={} with commitName={} in Zookeeper : {}"
argument_list|,
name|collectionName
argument_list|,
name|commitName
argument_list|,
name|meta
operator|.
name|toNamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to create a snapshot for collection {} with commitName = {}. Snapshot could not be captured for following shards {}"
argument_list|,
name|collectionName
argument_list|,
name|commitName
argument_list|,
name|failedShards
argument_list|)
expr_stmt|;
comment|// Update the ZK meta-data to include only cores with the snapshot. This will enable users to figure out
comment|// which cores have the named snapshot.
name|CollectionSnapshotMetaData
name|meta
init|=
operator|new
name|CollectionSnapshotMetaData
argument_list|(
name|commitName
argument_list|,
name|SnapshotStatus
operator|.
name|Failed
argument_list|,
name|creationDate
argument_list|,
name|replicas
argument_list|)
decl_stmt|;
name|SolrSnapshotManager
operator|.
name|updateCollectionLevelSnapshot
argument_list|(
name|zkClient
argument_list|,
name|collectionName
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Saved following snapshot information for collection={} with commitName={} in Zookeeper : {}"
argument_list|,
name|collectionName
argument_list|,
name|commitName
argument_list|,
name|meta
operator|.
name|toNamedList
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Failed to create snapshot on shards "
operator|+
name|failedShards
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

