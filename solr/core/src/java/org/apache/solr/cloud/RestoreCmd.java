begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|BackupRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROPS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET_EMPTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|NUM_SLICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|SHARDS_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATESHARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_class
DECL|class|RestoreCmd
specifier|public
class|class
name|RestoreCmd
implements|implements
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|RestoreCmd
specifier|public
name|RestoreCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
comment|// TODO maybe we can inherit createCollection's options/code
name|String
name|restoreCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|backupName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
comment|// of backup
name|ShardHandler
name|shardHandler
init|=
name|ocmh
operator|.
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|String
name|repo
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_REPOSITORY
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CoreContainer
name|cc
init|=
name|ocmh
operator|.
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|BackupRepository
name|repository
init|=
name|cc
operator|.
name|newBackupRepository
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|location
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_LOCATION
argument_list|)
argument_list|)
decl_stmt|;
name|URI
name|backupPath
init|=
name|repository
operator|.
name|resolve
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|BackupManager
name|backupMgr
init|=
operator|new
name|BackupManager
argument_list|(
name|repository
argument_list|,
name|zkStateReader
argument_list|,
name|restoreCollectionName
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
name|backupMgr
operator|.
name|readBackupProperties
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|)
decl_stmt|;
name|String
name|backupCollection
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|BackupManager
operator|.
name|COLLECTION_NAME_PROP
argument_list|)
decl_stmt|;
name|DocCollection
name|backupCollectionState
init|=
name|backupMgr
operator|.
name|readCollectionState
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|,
name|backupCollection
argument_list|)
decl_stmt|;
comment|//Upload the configs
name|String
name|configName
init|=
operator|(
name|String
operator|)
name|properties
operator|.
name|get
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
name|String
name|restoreConfigName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getConfigManager
argument_list|()
operator|.
name|configExists
argument_list|(
name|restoreConfigName
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Using existing config {}"
argument_list|,
name|restoreConfigName
argument_list|)
expr_stmt|;
comment|//TODO add overwrite option?
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Uploading config {}"
argument_list|,
name|restoreConfigName
argument_list|)
expr_stmt|;
name|backupMgr
operator|.
name|uploadConfigDir
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|,
name|configName
argument_list|,
name|restoreConfigName
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Starting restore into collection={} with backup_name={} at location={}"
argument_list|,
name|restoreCollectionName
argument_list|,
name|backupName
argument_list|,
name|location
argument_list|)
expr_stmt|;
comment|//Create core-less collection
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"fromApi"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// mostly true.  Prevents autoCreated=true in the collection state.
comment|// inherit settings from input API, defaulting to the backup's setting.  Ex: replicationFactor
for|for
control|(
name|String
name|collProp
range|:
name|COLL_PROPS
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Object
name|val
init|=
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|getOrDefault
argument_list|(
name|collProp
argument_list|,
name|backupCollectionState
operator|.
name|get
argument_list|(
name|collProp
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|collProp
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|propMap
operator|.
name|put
argument_list|(
name|NAME
argument_list|,
name|restoreCollectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CREATE_NODE_SET
argument_list|,
name|CREATE_NODE_SET_EMPTY
argument_list|)
expr_stmt|;
comment|//no cores
name|propMap
operator|.
name|put
argument_list|(
name|COLL_CONF
argument_list|,
name|restoreConfigName
argument_list|)
expr_stmt|;
comment|// router.*
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|routerProps
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|backupCollectionState
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|DocCollection
operator|.
name|DOC_ROUTER
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pair
range|:
name|routerProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|DocCollection
operator|.
name|DOC_ROUTER
operator|+
literal|"."
operator|+
name|pair
operator|.
name|getKey
argument_list|()
argument_list|,
name|pair
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|sliceNames
init|=
name|backupCollectionState
operator|.
name|getActiveSlicesMap
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
if|if
condition|(
name|backupCollectionState
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|ImplicitDocRouter
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|SHARDS_PROP
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|sliceNames
argument_list|,
literal|','
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propMap
operator|.
name|put
argument_list|(
name|NUM_SLICES
argument_list|,
name|sliceNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// ClusterStateMutator.createCollection detects that "slices" is in fact a slice structure instead of a
comment|//   list of names, and if so uses this instead of building it.  We clear the replica list.
name|Collection
argument_list|<
name|Slice
argument_list|>
name|backupSlices
init|=
name|backupCollectionState
operator|.
name|getActiveSlices
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|newSlices
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|backupSlices
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|backupSlice
range|:
name|backupSlices
control|)
block|{
name|newSlices
operator|.
name|put
argument_list|(
name|backupSlice
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|Slice
argument_list|(
name|backupSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|backupSlice
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|SHARDS_PROP
argument_list|,
name|newSlices
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|CREATE
argument_list|)
operator|.
name|call
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: when createCollection() returns, the collection exists (no race)
block|}
name|DocCollection
name|restoreCollection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|restoreCollectionName
argument_list|)
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
comment|//Mark all shards in CONSTRUCTION STATE while we restore the data
block|{
comment|//TODO might instead createCollection accept an initial state?  Is there a race?
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|restoreCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|restoreCollectionName
argument_list|)
expr_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO how do we leverage the CREATE_NODE_SET / RULE / SNITCH logic in createCollection?
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
comment|//Create one replica per shard and copy backed up data to it
for|for
control|(
name|Slice
name|slice
range|:
name|restoreCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding replica for shard={} collection={} "
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|restoreCollection
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATESHARD
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|restoreCollectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|propMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|//refresh the location copy of collection state
name|restoreCollection
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|restoreCollectionName
argument_list|)
expr_stmt|;
comment|//Copy data from backed up index to each replica
for|for
control|(
name|Slice
name|slice
range|:
name|restoreCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|RESTORECORE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|NAME
argument_list|,
literal|"snapshot."
operator|+
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_LOCATION
argument_list|,
name|backupPath
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_REPOSITORY
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sliceCmd
argument_list|(
name|clusterState
argument_list|,
name|params
argument_list|,
literal|null
argument_list|,
name|slice
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
operator|new
name|NamedList
argument_list|()
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"Could not restore core"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
comment|//Mark all shards in ACTIVE STATE
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|restoreCollectionName
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|restoreCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//refresh the location copy of collection state
name|restoreCollection
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|restoreCollectionName
argument_list|)
expr_stmt|;
comment|//Add the remaining replicas for each shard
name|Integer
name|numReplicas
init|=
name|restoreCollection
operator|.
name|getReplicationFactor
argument_list|()
decl_stmt|;
if|if
condition|(
name|numReplicas
operator|!=
literal|null
operator|&&
name|numReplicas
operator|>
literal|1
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Adding replicas to restored collection={}"
argument_list|,
name|restoreCollection
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|restoreCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numReplicas
condition|;
name|i
operator|++
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Adding replica for shard={} collection={} "
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|restoreCollection
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|restoreCollectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|propMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|addReplica
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Completed restoring collection={} backupName={}"
argument_list|,
name|restoreCollection
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

