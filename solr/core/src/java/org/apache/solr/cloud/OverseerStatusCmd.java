begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
operator|.
name|TimerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|OverseerStatusCmd
specifier|public
class|class
name|OverseerStatusCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|OverseerStatusCmd
specifier|public
name|OverseerStatusCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|String
name|leaderNode
init|=
name|OverseerTaskProcessor
operator|.
name|getLeaderNode
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"leader"
argument_list|,
name|leaderNode
argument_list|)
expr_stmt|;
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer/queue"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_queue_size"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer/queue-work"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_work_queue_size"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|stat
operator|=
operator|new
name|Stat
argument_list|()
expr_stmt|;
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
literal|"/overseer/collection-queue-work"
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_collection_queue_size"
argument_list|,
name|stat
operator|.
name|getNumChildren
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|overseerStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|collectionStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|stateUpdateQueueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|workQueueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|NamedList
name|collectionQueueStats
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|Overseer
operator|.
name|Stats
name|stats
init|=
name|ocmh
operator|.
name|stats
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Overseer
operator|.
name|Stat
argument_list|>
name|entry
range|:
name|stats
operator|.
name|getStats
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|lst
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"collection_"
argument_list|)
condition|)
block|{
name|collectionStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|11
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
name|int
name|successes
init|=
name|stats
operator|.
name|getSuccessCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
name|stats
operator|.
name|getErrorCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"requests"
argument_list|,
name|successes
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"errors"
argument_list|,
name|errors
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Overseer
operator|.
name|FailedOp
argument_list|>
name|failureDetails
init|=
name|stats
operator|.
name|getFailureDetails
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|failureDetails
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
argument_list|>
name|failures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Overseer
operator|.
name|FailedOp
name|failedOp
range|:
name|failureDetails
control|)
block|{
name|SimpleOrderedMap
argument_list|<
name|Object
argument_list|>
name|fail
init|=
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
decl_stmt|;
name|fail
operator|.
name|add
argument_list|(
literal|"request"
argument_list|,
name|failedOp
operator|.
name|req
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|fail
operator|.
name|add
argument_list|(
literal|"response"
argument_list|,
name|failedOp
operator|.
name|resp
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|failures
operator|.
name|add
argument_list|(
name|fail
argument_list|)
expr_stmt|;
block|}
name|lst
operator|.
name|add
argument_list|(
literal|"recent_failures"
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"/overseer/queue_"
argument_list|)
condition|)
block|{
name|stateUpdateQueueStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|16
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"/overseer/queue-work_"
argument_list|)
condition|)
block|{
name|workQueueStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|21
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
literal|"/overseer/collection-queue-work_"
argument_list|)
condition|)
block|{
name|collectionQueueStats
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
literal|32
argument_list|)
argument_list|,
name|lst
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// overseer stats
name|overseerStats
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|lst
argument_list|)
expr_stmt|;
name|int
name|successes
init|=
name|stats
operator|.
name|getSuccessCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|errors
init|=
name|stats
operator|.
name|getErrorCount
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"requests"
argument_list|,
name|successes
argument_list|)
expr_stmt|;
name|lst
operator|.
name|add
argument_list|(
literal|"errors"
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
name|Timer
name|timer
init|=
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|requestTime
decl_stmt|;
name|TimerUtils
operator|.
name|addMetrics
argument_list|(
name|lst
argument_list|,
name|timer
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|"overseer_operations"
argument_list|,
name|overseerStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"collection_operations"
argument_list|,
name|collectionStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_queue"
argument_list|,
name|stateUpdateQueueStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"overseer_internal_queue"
argument_list|,
name|workQueueStats
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"collection_queue"
argument_list|,
name|collectionQueueStats
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

