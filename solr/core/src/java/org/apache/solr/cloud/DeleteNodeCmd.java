begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DeleteNodeCmd
specifier|public
class|class
name|DeleteNodeCmd
implements|implements
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|DeleteNodeCmd
specifier|public
name|DeleteNodeCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|Object
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|ocmh
operator|.
name|checkRequired
argument_list|(
name|message
argument_list|,
literal|"node"
argument_list|)
expr_stmt|;
name|String
name|node
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|state
operator|.
name|liveNodesContain
argument_list|(
name|node
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Source Node: "
operator|+
name|node
operator|+
literal|" is not live"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|sourceReplicas
init|=
name|ReplaceNodeCmd
operator|.
name|getReplicasOfNode
argument_list|(
name|node
argument_list|,
name|state
argument_list|)
decl_stmt|;
name|cleanupReplicas
argument_list|(
name|results
argument_list|,
name|state
argument_list|,
name|sourceReplicas
argument_list|,
name|ocmh
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|cleanupReplicas
specifier|static
name|void
name|cleanupReplicas
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|sourceReplicas
parameter_list|,
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|CountDownLatch
name|cleanupLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|sourceReplicas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZkNodeProps
name|sourceReplica
range|:
name|sourceReplicas
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"deleting replica from from node {} "
argument_list|,
name|Utils
operator|.
name|toJSONString
argument_list|(
name|sourceReplica
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|deleteResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
name|ocmh
operator|.
name|deleteReplica
argument_list|(
name|clusterState
argument_list|,
name|sourceReplica
operator|.
name|plus
argument_list|(
literal|"parallel"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|deleteResult
argument_list|,
parameter_list|()
lambda|->
block|{
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
literal|"could not delete because  "
operator|+
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|+
literal|"  "
operator|+
name|Utils
operator|.
name|toJSONString
argument_list|(
name|sourceReplica
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Error deleting "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for deletes to complete"
argument_list|)
expr_stmt|;
name|cleanupLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

