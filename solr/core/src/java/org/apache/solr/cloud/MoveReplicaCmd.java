begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_class
DECL|class|MoveReplicaCmd
specifier|public
class|class
name|MoveReplicaCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|MoveReplicaCmd
specifier|public
name|MoveReplicaCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|moveReplica
argument_list|(
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|moveReplica
specifier|private
name|void
name|moveReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"moveReplica() : {}"
argument_list|,
name|Utils
operator|.
name|toJSONString
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
literal|"targetNode"
argument_list|)
expr_stmt|;
name|String
name|collection
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|targetNode
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"targetNode"
argument_list|)
decl_stmt|;
name|String
name|async
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collection
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|Replica
name|replica
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|containsKey
argument_list|(
name|REPLICA_PROP
argument_list|)
condition|)
block|{
name|String
name|replicaName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|REPLICA_PROP
argument_list|)
decl_stmt|;
name|replica
operator|=
name|coll
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
expr_stmt|;
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collection
operator|+
literal|" replica: "
operator|+
name|replicaName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|ocmh
operator|.
name|checkRequired
argument_list|(
name|message
argument_list|,
name|SHARD_ID_PROP
argument_list|,
literal|"fromNode"
argument_list|)
expr_stmt|;
name|String
name|fromNode
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"fromNode"
argument_list|)
decl_stmt|;
name|String
name|shardId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collection
argument_list|)
operator|.
name|getSlice
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Replica
argument_list|>
name|sliceReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|slice
operator|.
name|getReplicas
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|sliceReplicas
argument_list|,
name|RANDOM
argument_list|)
expr_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromNode
argument_list|)
condition|)
block|{
name|replica
operator|=
name|r
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replica
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collection
operator|+
literal|" node: "
operator|+
name|fromNode
operator|+
literal|" do not have any replica belong to shard: "
operator|+
name|shardId
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Replica will be moved {}"
argument_list|,
name|replica
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Slice
name|s
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|getReplicas
argument_list|()
operator|.
name|contains
argument_list|(
name|replica
argument_list|)
condition|)
block|{
name|slice
operator|=
name|s
expr_stmt|;
block|}
block|}
assert|assert
name|slice
operator|!=
literal|null
assert|;
name|Object
name|dataDir
init|=
name|replica
operator|.
name|get
argument_list|(
literal|"dataDir"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dataDir
operator|!=
literal|null
operator|&&
name|dataDir
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"hdfs:/"
argument_list|)
condition|)
block|{
name|moveHdfsReplica
argument_list|(
name|clusterState
argument_list|,
name|results
argument_list|,
name|dataDir
operator|.
name|toString
argument_list|()
argument_list|,
name|targetNode
argument_list|,
name|async
argument_list|,
name|coll
argument_list|,
name|replica
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|moveNormalReplica
argument_list|(
name|clusterState
argument_list|,
name|results
argument_list|,
name|targetNode
argument_list|,
name|async
argument_list|,
name|coll
argument_list|,
name|replica
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|moveHdfsReplica
specifier|private
name|void
name|moveHdfsReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|String
name|dataDir
parameter_list|,
name|String
name|targetNode
parameter_list|,
name|String
name|async
parameter_list|,
name|DocCollection
name|coll
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|Slice
name|slice
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|newCoreName
init|=
name|Assign
operator|.
name|buildCoreName
argument_list|(
name|coll
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|removeReplicasProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|REPLICA_PROP
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|removeReplicasProps
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_DATA_DIR
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeReplicasProps
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|DELETE_INDEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
name|removeReplicasProps
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|async
argument_list|)
expr_stmt|;
name|NamedList
name|deleteResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|deleteReplica
argument_list|(
name|clusterState
argument_list|,
name|removeReplicasProps
argument_list|,
name|deleteResult
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|errorString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to cleanup replica collection=%s shard=%s name=%s"
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|errorString
operator|+
literal|", because of : "
operator|+
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|ZkNodeProps
name|addReplicasProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NODE
argument_list|,
name|targetNode
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|newCoreName
argument_list|,
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|dataDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
name|addReplicasProps
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|async
argument_list|)
expr_stmt|;
name|NamedList
name|addResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
name|addReplicasProps
argument_list|,
name|addResult
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|addResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|errorString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to create replica for collection=%s shard=%s"
operator|+
literal|" on node=%s"
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetNode
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|errorString
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|String
name|successString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"MOVEREPLICA action completed successfully, moved replica=%s at node=%s "
operator|+
literal|"to replica=%s at node=%s"
argument_list|,
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|newCoreName
argument_list|,
name|targetNode
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|successString
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|moveNormalReplica
specifier|private
name|void
name|moveNormalReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|String
name|targetNode
parameter_list|,
name|String
name|async
parameter_list|,
name|DocCollection
name|coll
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|Slice
name|slice
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|newCoreName
init|=
name|Assign
operator|.
name|buildCoreName
argument_list|(
name|coll
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|addReplicasProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NODE
argument_list|,
name|targetNode
argument_list|,
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|newCoreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
name|addReplicasProps
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|async
argument_list|)
expr_stmt|;
name|NamedList
name|addResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
name|addReplicasProps
argument_list|,
name|addResult
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|addResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|errorString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to create replica for collection=%s shard=%s"
operator|+
literal|" on node=%s"
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetNode
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|errorString
argument_list|)
expr_stmt|;
return|return;
block|}
name|ZkNodeProps
name|removeReplicasProps
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|REPLICA_PROP
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
name|removeReplicasProps
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|async
argument_list|)
expr_stmt|;
name|NamedList
name|deleteResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|deleteReplica
argument_list|(
name|clusterState
argument_list|,
name|removeReplicasProps
argument_list|,
name|deleteResult
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|errorString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to cleanup replica collection=%s shard=%s name=%s"
argument_list|,
name|coll
operator|.
name|getName
argument_list|()
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|errorString
operator|+
literal|", because of : "
operator|+
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|successString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"MOVEREPLICA action completed successfully, moved replica=%s at node=%s "
operator|+
literal|"to replica=%s at node=%s"
argument_list|,
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|newCoreName
argument_list|,
name|targetNode
argument_list|)
decl_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|successString
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

