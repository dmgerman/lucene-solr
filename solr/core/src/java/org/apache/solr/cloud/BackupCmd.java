begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|BackupManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|BackupRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_class
DECL|class|BackupCmd
specifier|public
class|class
name|BackupCmd
implements|implements
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|BackupCmd
specifier|public
name|BackupCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|backupName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|ocmh
operator|.
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|String
name|repo
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_REPOSITORY
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_LOCATION
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Instant
name|startTime
init|=
name|Instant
operator|.
name|now
argument_list|()
decl_stmt|;
name|CoreContainer
name|cc
init|=
name|ocmh
operator|.
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|BackupRepository
name|repository
init|=
name|cc
operator|.
name|newBackupRepository
argument_list|(
name|Optional
operator|.
name|ofNullable
argument_list|(
name|repo
argument_list|)
argument_list|)
decl_stmt|;
name|BackupManager
name|backupMgr
init|=
operator|new
name|BackupManager
argument_list|(
name|repository
argument_list|,
name|ocmh
operator|.
name|zkStateReader
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
comment|// Backup location
name|URI
name|backupPath
init|=
name|repository
operator|.
name|createURI
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|)
decl_stmt|;
comment|//Validating if the directory already exists.
if|if
condition|(
name|repository
operator|.
name|exists
argument_list|(
name|backupPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The backup directory already exists: "
operator|+
name|backupPath
argument_list|)
throw|;
block|}
comment|// Create a directory to store backup details.
name|repository
operator|.
name|createDirectory
argument_list|(
name|backupPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting backup of collection={} with backupName={} at location={}"
argument_list|,
name|collectionName
argument_list|,
name|backupName
argument_list|,
name|backupPath
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
control|)
block|{
name|Replica
name|replica
init|=
name|slice
operator|.
name|getLeader
argument_list|()
decl_stmt|;
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|BACKUPCORE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|NAME
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_REPOSITORY
argument_list|,
name|repo
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|BACKUP_LOCATION
argument_list|,
name|backupPath
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: index dir will be here then the "snapshot." + slice name
name|params
operator|.
name|set
argument_list|(
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Sent backup request to core={} for backupName={}"
argument_list|,
name|coreName
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Sent backup requests to all shard leaders for backupName={}"
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"Could not backup all replicas"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting to backup ZK data for backupName={}"
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
comment|//Download the configs
name|String
name|configName
init|=
name|ocmh
operator|.
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|backupMgr
operator|.
name|downloadConfigDir
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|,
name|configName
argument_list|)
expr_stmt|;
comment|//Save the collection's state. Can be part of the monolithic clusterstate.json or a individual state.json
comment|//Since we don't want to distinguish we extract the state and back it up as a separate json
name|DocCollection
name|collectionState
init|=
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|backupMgr
operator|.
name|writeCollectionState
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|,
name|collectionName
argument_list|,
name|collectionState
argument_list|)
expr_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|BackupManager
operator|.
name|BACKUP_NAME_PROP
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|BackupManager
operator|.
name|COLLECTION_NAME_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|BackupManager
operator|.
name|START_TIME_PROP
argument_list|,
name|startTime
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO: Add MD5 of the configset. If during restore the same name configset exists then we can compare checksums to see if they are the same.
comment|//if they are not the same then we can throw an error or have an 'overwriteConfig' flag
comment|//TODO save numDocs for the shardLeader. We can use it to sanity check the restore.
name|backupMgr
operator|.
name|writeBackupProperties
argument_list|(
name|location
argument_list|,
name|backupName
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Completed backing up ZK data for backupName={}"
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

