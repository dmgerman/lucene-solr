begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDROLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|REMOVEROLE
import|;
end_import

begin_class
DECL|class|OverseerRoleCmd
specifier|public
class|class
name|OverseerRoleCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|field|operation
specifier|private
specifier|final
name|CollectionAction
name|operation
decl_stmt|;
DECL|field|overseerPrioritizer
specifier|private
specifier|final
name|OverseerNodePrioritizer
name|overseerPrioritizer
decl_stmt|;
DECL|method|OverseerRoleCmd
specifier|public
name|OverseerRoleCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|,
name|CollectionAction
name|operation
parameter_list|,
name|OverseerNodePrioritizer
name|prioritizer
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|operation
expr_stmt|;
name|this
operator|.
name|overseerPrioritizer
operator|=
name|prioritizer
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|Map
name|roles
init|=
literal|null
decl_stmt|;
name|String
name|node
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"node"
argument_list|)
decl_stmt|;
name|String
name|roleName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"role"
argument_list|)
decl_stmt|;
name|boolean
name|nodeExists
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|nodeExists
operator|=
name|zkClient
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|roles
operator|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
literal|null
argument_list|,
operator|new
name|Stat
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|roles
operator|=
operator|new
name|LinkedHashMap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|List
name|nodeList
init|=
operator|(
name|List
operator|)
name|roles
operator|.
name|get
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeList
operator|==
literal|null
condition|)
name|roles
operator|.
name|put
argument_list|(
name|roleName
argument_list|,
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|ADDROLE
operator|==
name|operation
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer role added to {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|nodeList
operator|.
name|contains
argument_list|(
name|node
argument_list|)
condition|)
name|nodeList
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|REMOVEROLE
operator|==
name|operation
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer role removed from {}"
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|remove
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeExists
condition|)
block|{
name|zkClient
operator|.
name|setData
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|roles
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkClient
operator|.
name|create
argument_list|(
name|ZkStateReader
operator|.
name|ROLES
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|roles
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|//if there are too many nodes this command may time out. And most likely dedicated
comment|// overseers are created when there are too many nodes  . So , do this operation in a separate thread
operator|new
name|Thread
argument_list|(
parameter_list|()
lambda|->
block|{
try|try
block|{
name|overseerPrioritizer
operator|.
name|prioritizeOverseerNodes
argument_list|(
name|ocmh
operator|.
name|myId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error in prioritizing Overseer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

