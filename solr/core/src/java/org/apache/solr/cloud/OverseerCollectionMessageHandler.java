begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|RemoteSolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
operator|.
name|Position
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RTimer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
operator|.
name|SNITCH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|BASE_URL_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|ELECTION_NODE_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|PROPERTY_VALUE_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REJOIN_AT_HEAD_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICA_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|makeMap
import|;
end_import

begin_comment
comment|/**  * A {@link OverseerMessageHandler} that handles Collections API related  * overseer messages.  */
end_comment

begin_class
DECL|class|OverseerCollectionMessageHandler
specifier|public
class|class
name|OverseerCollectionMessageHandler
implements|implements
name|OverseerMessageHandler
implements|,
name|Closeable
block|{
DECL|field|NUM_SLICES
specifier|public
specifier|static
specifier|final
name|String
name|NUM_SLICES
init|=
literal|"numShards"
decl_stmt|;
DECL|field|CREATE_NODE_SET_SHUFFLE_DEFAULT
specifier|static
specifier|final
name|boolean
name|CREATE_NODE_SET_SHUFFLE_DEFAULT
init|=
literal|true
decl_stmt|;
DECL|field|CREATE_NODE_SET_SHUFFLE
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET_SHUFFLE
init|=
literal|"createNodeSet.shuffle"
decl_stmt|;
DECL|field|CREATE_NODE_SET_EMPTY
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET_EMPTY
init|=
literal|"EMPTY"
decl_stmt|;
DECL|field|CREATE_NODE_SET
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_NODE_SET
init|=
literal|"createNodeSet"
decl_stmt|;
DECL|field|ROUTER
specifier|public
specifier|static
specifier|final
name|String
name|ROUTER
init|=
literal|"router"
decl_stmt|;
DECL|field|SHARDS_PROP
specifier|public
specifier|static
specifier|final
name|String
name|SHARDS_PROP
init|=
literal|"shards"
decl_stmt|;
DECL|field|REQUESTID
specifier|public
specifier|static
specifier|final
name|String
name|REQUESTID
init|=
literal|"requestid"
decl_stmt|;
DECL|field|COLL_CONF
specifier|public
specifier|static
specifier|final
name|String
name|COLL_CONF
init|=
literal|"collection.configName"
decl_stmt|;
DECL|field|COLL_PROP_PREFIX
specifier|public
specifier|static
specifier|final
name|String
name|COLL_PROP_PREFIX
init|=
literal|"property."
decl_stmt|;
DECL|field|ONLY_IF_DOWN
specifier|public
specifier|static
specifier|final
name|String
name|ONLY_IF_DOWN
init|=
literal|"onlyIfDown"
decl_stmt|;
DECL|field|SHARD_UNIQUE
specifier|public
specifier|static
specifier|final
name|String
name|SHARD_UNIQUE
init|=
literal|"shardUnique"
decl_stmt|;
DECL|field|ONLY_ACTIVE_NODES
specifier|public
specifier|static
specifier|final
name|String
name|ONLY_ACTIVE_NODES
init|=
literal|"onlyactivenodes"
decl_stmt|;
DECL|field|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
specifier|static
specifier|final
name|String
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
init|=
literal|"skipCreateReplicaInClusterState"
decl_stmt|;
DECL|field|COLL_PROPS
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|COLL_PROPS
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|makeMap
argument_list|(
name|ROUTER
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|,
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|"1"
argument_list|,
name|ZkStateReader
operator|.
name|AUTO_ADD_REPLICAS
argument_list|,
literal|"false"
argument_list|,
name|DocCollection
operator|.
name|RULE
argument_list|,
literal|null
argument_list|,
name|SNITCH
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|overseer
name|Overseer
name|overseer
decl_stmt|;
DECL|field|shardHandlerFactory
name|ShardHandlerFactory
name|shardHandlerFactory
decl_stmt|;
DECL|field|adminPath
name|String
name|adminPath
decl_stmt|;
DECL|field|zkStateReader
name|ZkStateReader
name|zkStateReader
decl_stmt|;
DECL|field|myId
name|String
name|myId
decl_stmt|;
DECL|field|stats
name|Overseer
operator|.
name|Stats
name|stats
decl_stmt|;
comment|// Set that tracks collections that are currently being processed by a running task.
comment|// This is used for handling mutual exclusion of the tasks.
DECL|field|lockTree
specifier|final
specifier|private
name|LockTree
name|lockTree
init|=
operator|new
name|LockTree
argument_list|()
decl_stmt|;
DECL|field|tpe
name|ExecutorService
name|tpe
init|=
operator|new
name|ExecutorUtil
operator|.
name|MDCAwareThreadPoolExecutor
argument_list|(
literal|5
argument_list|,
literal|10
argument_list|,
literal|0L
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|,
operator|new
name|SynchronousQueue
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|DefaultSolrThreadFactory
argument_list|(
literal|"OverseerCollectionMessageHandlerThreadFactory"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|RANDOM
specifier|static
specifier|final
name|Random
name|RANDOM
decl_stmt|;
static|static
block|{
comment|// We try to make things reproducible in the context of our tests by initializing the random instance
comment|// based on the current seed
name|String
name|seed
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"tests.seed"
argument_list|)
decl_stmt|;
if|if
condition|(
name|seed
operator|==
literal|null
condition|)
block|{
name|RANDOM
operator|=
operator|new
name|Random
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|RANDOM
operator|=
operator|new
name|Random
argument_list|(
name|seed
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|commandMap
specifier|final
name|Map
argument_list|<
name|CollectionAction
argument_list|,
name|Cmd
argument_list|>
name|commandMap
decl_stmt|;
DECL|method|OverseerCollectionMessageHandler
specifier|public
name|OverseerCollectionMessageHandler
parameter_list|(
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|String
name|myId
parameter_list|,
specifier|final
name|ShardHandlerFactory
name|shardHandlerFactory
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|Overseer
operator|.
name|Stats
name|stats
parameter_list|,
name|Overseer
name|overseer
parameter_list|,
name|OverseerNodePrioritizer
name|overseerPrioritizer
parameter_list|)
block|{
name|this
operator|.
name|zkStateReader
operator|=
name|zkStateReader
expr_stmt|;
name|this
operator|.
name|shardHandlerFactory
operator|=
name|shardHandlerFactory
expr_stmt|;
name|this
operator|.
name|adminPath
operator|=
name|adminPath
expr_stmt|;
name|this
operator|.
name|myId
operator|=
name|myId
expr_stmt|;
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
name|this
operator|.
name|overseer
operator|=
name|overseer
expr_stmt|;
name|commandMap
operator|=
operator|new
name|ImmutableMap
operator|.
name|Builder
argument_list|<
name|CollectionAction
argument_list|,
name|Cmd
argument_list|>
argument_list|()
operator|.
name|put
argument_list|(
name|REPLACENODE
argument_list|,
operator|new
name|ReplaceNodeCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DELETENODE
argument_list|,
operator|new
name|DeleteNodeCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|BACKUP
argument_list|,
operator|new
name|BackupCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|RESTORE
argument_list|,
operator|new
name|RestoreCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|SPLITSHARD
argument_list|,
operator|new
name|SplitShardCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ADDROLE
argument_list|,
operator|new
name|OverseerRoleCmd
argument_list|(
name|this
argument_list|,
name|ADDROLE
argument_list|,
name|overseerPrioritizer
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|REMOVEROLE
argument_list|,
operator|new
name|OverseerRoleCmd
argument_list|(
name|this
argument_list|,
name|REMOVEROLE
argument_list|,
name|overseerPrioritizer
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MOCK_COLL_TASK
argument_list|,
name|this
operator|::
name|mockOperation
argument_list|)
operator|.
name|put
argument_list|(
name|MOCK_SHARD_TASK
argument_list|,
name|this
operator|::
name|mockOperation
argument_list|)
operator|.
name|put
argument_list|(
name|MOCK_REPLICA_TASK
argument_list|,
name|this
operator|::
name|mockOperation
argument_list|)
operator|.
name|put
argument_list|(
name|MIGRATESTATEFORMAT
argument_list|,
name|this
operator|::
name|migrateStateFormat
argument_list|)
operator|.
name|put
argument_list|(
name|CREATESHARD
argument_list|,
operator|new
name|CreateShardCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MIGRATE
argument_list|,
operator|new
name|MigrateCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|CREATE
argument_list|,
operator|new
name|CreateCollectionCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|MODIFYCOLLECTION
argument_list|,
name|this
operator|::
name|modifyCollection
argument_list|)
operator|.
name|put
argument_list|(
name|ADDREPLICAPROP
argument_list|,
name|this
operator|::
name|processReplicaAddPropertyCommand
argument_list|)
operator|.
name|put
argument_list|(
name|DELETEREPLICAPROP
argument_list|,
name|this
operator|::
name|processReplicaDeletePropertyCommand
argument_list|)
operator|.
name|put
argument_list|(
name|BALANCESHARDUNIQUE
argument_list|,
name|this
operator|::
name|balanceProperty
argument_list|)
operator|.
name|put
argument_list|(
name|REBALANCELEADERS
argument_list|,
name|this
operator|::
name|processRebalanceLeaders
argument_list|)
operator|.
name|put
argument_list|(
name|RELOAD
argument_list|,
name|this
operator|::
name|reloadCollection
argument_list|)
operator|.
name|put
argument_list|(
name|DELETE
argument_list|,
operator|new
name|DeleteCollectionCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|CREATEALIAS
argument_list|,
operator|new
name|CreateAliasCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DELETEALIAS
argument_list|,
operator|new
name|DeleteAliasCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|OVERSEERSTATUS
argument_list|,
operator|new
name|OverseerStatusCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DELETESHARD
argument_list|,
operator|new
name|DeleteShardCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|DELETEREPLICA
argument_list|,
operator|new
name|DeleteReplicaCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
name|ADDREPLICA
argument_list|,
operator|new
name|AddReplicaCmd
argument_list|(
name|this
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processMessage
specifier|public
name|SolrResponse
name|processMessage
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
name|operation
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"OverseerCollectionMessageHandler.processMessage : "
operator|+
name|operation
operator|+
literal|" , "
operator|+
name|message
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|NamedList
name|results
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
name|CollectionAction
name|action
init|=
name|getCollectionAction
argument_list|(
name|operation
argument_list|)
decl_stmt|;
name|Cmd
name|command
init|=
name|commandMap
operator|.
name|get
argument_list|(
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|call
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown operation:"
operator|+
name|operation
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|collName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
if|if
condition|(
name|collName
operator|==
literal|null
condition|)
name|collName
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|collName
operator|==
literal|null
condition|)
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Operation "
operator|+
name|operation
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SolrException
operator|.
name|log
argument_list|(
name|log
argument_list|,
literal|"Collection: "
operator|+
name|collName
operator|+
literal|" operation: "
operator|+
name|operation
operator|+
literal|" failed"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|results
operator|.
name|add
argument_list|(
literal|"Operation "
operator|+
name|operation
operator|+
literal|" caused exception:"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|nl
init|=
operator|new
name|SimpleOrderedMap
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"msg"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"rspCode"
argument_list|,
name|e
operator|instanceof
name|SolrException
condition|?
operator|(
operator|(
name|SolrException
operator|)
name|e
operator|)
operator|.
name|code
argument_list|()
else|:
operator|-
literal|1
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"exception"
argument_list|,
name|nl
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OverseerSolrResponse
argument_list|(
name|results
argument_list|)
return|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Needs currentTimeMillis for mock requests"
argument_list|)
DECL|method|mockOperation
specifier|private
name|void
name|mockOperation
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|//only for test purposes
name|Thread
operator|.
name|sleep
argument_list|(
name|message
operator|.
name|getInt
argument_list|(
literal|"sleep"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"MOCK_TASK_EXECUTED time {} data {}"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|Utils
operator|.
name|toJSONString
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"MOCK_FINISHED"
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getCollectionAction
specifier|private
name|CollectionAction
name|getCollectionAction
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|CollectionAction
name|action
init|=
name|CollectionAction
operator|.
name|get
argument_list|(
name|operation
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown operation:"
operator|+
name|operation
argument_list|)
throw|;
block|}
return|return
name|action
return|;
block|}
DECL|method|reloadCollection
specifier|private
name|void
name|reloadCollection
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|requestMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|collectionCmd
argument_list|(
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processRebalanceLeaders
specifier|private
name|void
name|processRebalanceLeaders
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|CORE_NAME_PROP
argument_list|,
name|ELECTION_NODE_PROP
argument_list|,
name|CORE_NODE_NAME_PROP
argument_list|,
name|BASE_URL_PROP
argument_list|,
name|REJOIN_AT_HEAD_PROP
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REJOIN_AT_HEAD_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|REJOIN_AT_HEAD_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REJOINLEADERELECTION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CORE_NAME_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CORE_NODE_NAME_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|CORE_NODE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ELECTION_NODE_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ELECTION_NODE_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|BASE_URL_PROP
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
name|message
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
expr_stmt|;
comment|// yes, they must use same admin handler path everywhere...
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
name|ShardRequest
operator|.
name|PURPOSE_PRIVATE
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|baseUrl
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|baseUrl
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processReplicaAddPropertyCommand
specifier|private
name|void
name|processReplicaAddPropertyCommand
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|,
name|PROPERTY_VALUE_PROP
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|processReplicaDeletePropertyCommand
specifier|private
name|void
name|processReplicaDeletePropertyCommand
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|checkRequired
argument_list|(
name|message
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|REPLICA_PROP
argument_list|,
name|PROPERTY_PROP
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETEREPLICAPROP
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|balanceProperty
specifier|private
name|void
name|balanceProperty
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|)
operator|||
name|StringUtils
operator|.
name|isBlank
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|PROPERTY_PROP
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The '"
operator|+
name|COLLECTION_PROP
operator|+
literal|"' and '"
operator|+
name|PROPERTY_PROP
operator|+
literal|"' parameters are required for the BALANCESHARDUNIQUE operation, no action taken"
argument_list|)
throw|;
block|}
name|SolrZkClient
name|zkClient
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
decl_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|BALANCESHARDUNIQUE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|putAll
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Walks the tree of collection status to verify that any replicas not reporting a "down" status is    * on a live node, if any replicas reporting their status as "active" but the node is not live is    * marked as "down"; used by CLUSTERSTATUS.    * @param liveNodes List of currently live node names.    * @param collectionProps Map of collection status information pulled directly from ZooKeeper.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|crossCheckReplicaStateWithLiveNodes
specifier|protected
name|void
name|crossCheckReplicaStateWithLiveNodes
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
name|collectionProps
parameter_list|)
block|{
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|colls
init|=
name|collectionProps
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|colls
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
init|=
name|colls
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|next
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collMap
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|nextShard
range|:
name|shards
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shardMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|nextShard
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicas
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|shardMap
operator|.
name|get
argument_list|(
literal|"replicas"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|nextReplica
range|:
name|replicas
operator|.
name|values
argument_list|()
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replicaMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|nextReplica
decl_stmt|;
if|if
condition|(
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
operator|(
name|String
operator|)
name|replicaMap
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
operator|!=
name|Replica
operator|.
name|State
operator|.
name|DOWN
condition|)
block|{
comment|// not down, so verify the node is live
name|String
name|node_name
init|=
operator|(
name|String
operator|)
name|replicaMap
operator|.
name|get
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|liveNodes
operator|.
name|contains
argument_list|(
name|node_name
argument_list|)
condition|)
block|{
comment|// node is not live, so this replica is actually down
name|replicaMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|/**    * Get collection status from cluster state.    * Can return collection status by given shard name.    *    *    * @param collection collection map parsed from JSON-serialized {@link ClusterState}    * @param name  collection name    * @param requestedShards a set of shards to be returned in the status.    *                        An empty or null values indicates<b>all</b> shards.    * @return map of collection properties    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|getCollectionStatus
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getCollectionStatus
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collection
parameter_list|,
name|String
name|name
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|requestedShards
parameter_list|)
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|requestedShards
operator|==
literal|null
operator|||
name|requestedShards
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|collection
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|shards
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|collection
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|selected
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|selectedShard
range|:
name|requestedShards
control|)
block|{
if|if
condition|(
operator|!
name|shards
operator|.
name|containsKey
argument_list|(
name|selectedShard
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|name
operator|+
literal|" shard: "
operator|+
name|selectedShard
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|selected
operator|.
name|put
argument_list|(
name|selectedShard
argument_list|,
name|shards
operator|.
name|get
argument_list|(
name|selectedShard
argument_list|)
argument_list|)
expr_stmt|;
name|collection
operator|.
name|put
argument_list|(
literal|"shards"
argument_list|,
name|selected
argument_list|)
expr_stmt|;
block|}
return|return
name|collection
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|deleteReplica
name|void
name|deleteReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|Runnable
name|onComplete
parameter_list|)
throws|throws
name|Exception
block|{
operator|(
operator|(
name|DeleteReplicaCmd
operator|)
name|commandMap
operator|.
name|get
argument_list|(
name|DELETEREPLICA
argument_list|)
operator|)
operator|.
name|deleteReplica
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|,
name|results
argument_list|,
name|onComplete
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForCoreNodeGone
name|boolean
name|waitForCoreNodeGone
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|shard
parameter_list|,
name|String
name|replicaName
parameter_list|,
name|int
name|timeoutms
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
name|timeoutms
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|docCollection
operator|!=
literal|null
condition|)
block|{
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
operator|||
name|slice
operator|.
name|getReplica
argument_list|(
name|replicaName
argument_list|)
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Return true if either someone already deleted the collection/slice/replica.
if|if
condition|(
name|docCollection
operator|==
literal|null
operator|||
name|deleted
condition|)
break|break;
block|}
return|return
name|deleted
return|;
block|}
DECL|method|deleteCoreNode
name|void
name|deleteCoreNode
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|replicaName
parameter_list|,
name|Replica
name|replica
parameter_list|,
name|String
name|core
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|DELETECORE
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|core
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NODE_NAME_PROP
argument_list|,
name|replicaName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|checkRequired
name|void
name|checkRequired
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|String
modifier|...
name|props
parameter_list|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|props
control|)
block|{
if|if
condition|(
name|message
operator|.
name|get
argument_list|(
name|prop
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|props
argument_list|)
argument_list|,
literal|','
argument_list|)
operator|+
literal|" are required params"
argument_list|)
throw|;
block|}
block|}
block|}
comment|//TODO should we not remove in the next release ?
DECL|method|migrateStateFormat
specifier|private
name|void
name|migrateStateFormat
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|boolean
name|firstLoop
init|=
literal|true
decl_stmt|;
comment|// wait for a while until the state format changes
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Collection: "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|collection
operator|.
name|getStateFormat
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// Done.
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
operator|new
name|SimpleOrderedMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|firstLoop
condition|)
block|{
comment|// Actually queue the migration command.
name|firstLoop
operator|=
literal|false
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|MIGRATESTATEFORMAT
operator|.
name|toLower
argument_list|()
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not migrate state format for collection: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
DECL|method|commit
name|void
name|commit
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|String
name|slice
parameter_list|,
name|Replica
name|parentShardLeader
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Calling soft commit to make sub shard updates visible"
argument_list|)
expr_stmt|;
name|String
name|coreUrl
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|parentShardLeader
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
comment|// HttpShardHandler is hard coded to send a QueryRequest hence we go direct
comment|// and we force open a searcher so that we have documents to show upon switching states
name|UpdateResponse
name|updateResponse
init|=
literal|null
decl_stmt|;
try|try
block|{
name|updateResponse
operator|=
name|softCommit
argument_list|(
name|coreUrl
argument_list|)
expr_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
literal|null
argument_list|,
name|coreUrl
argument_list|,
name|updateResponse
argument_list|,
name|slice
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|e
argument_list|,
name|coreUrl
argument_list|,
name|updateResponse
argument_list|,
name|slice
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to call distrib softCommit on: "
operator|+
name|coreUrl
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|softCommit
specifier|static
name|UpdateResponse
name|softCommit
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|url
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|client
operator|.
name|setConnectionTimeout
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|client
operator|.
name|setSoTimeout
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|ureq
operator|.
name|process
argument_list|(
name|client
argument_list|)
return|;
block|}
block|}
DECL|method|waitForCoreNodeName
name|String
name|waitForCoreNodeName
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|msgNodeName
parameter_list|,
name|String
name|msgCore
parameter_list|)
block|{
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Slice
argument_list|>
name|slicesMap
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getSlicesMap
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|slicesMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slicesMap
operator|.
name|values
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
comment|// TODO: for really large clusters, we could 'index' on this
name|String
name|nodeName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|core
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeName
operator|.
name|equals
argument_list|(
name|msgNodeName
argument_list|)
operator|&&
name|core
operator|.
name|equals
argument_list|(
name|msgCore
argument_list|)
condition|)
block|{
return|return
name|replica
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find coreNodeName"
argument_list|)
throw|;
block|}
DECL|method|waitForNewShard
name|void
name|waitForNewShard
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|sliceName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waiting for slice {} of collection {} to be available"
argument_list|,
name|sliceName
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|RTimer
name|timer
init|=
operator|new
name|RTimer
argument_list|()
decl_stmt|;
name|int
name|retryCount
init|=
literal|320
decl_stmt|;
while|while
condition|(
name|retryCount
operator|--
operator|>
literal|0
condition|)
block|{
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to find collection: "
operator|+
name|collectionName
operator|+
literal|" in clusterstate"
argument_list|)
throw|;
block|}
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Waited for {}ms for slice {} of collection {} to be available"
argument_list|,
name|timer
operator|.
name|getTime
argument_list|()
argument_list|,
name|sliceName
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
return|return;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not find new slice "
operator|+
name|sliceName
operator|+
literal|" in collection "
operator|+
name|collectionName
operator|+
literal|" even after waiting for "
operator|+
name|timer
operator|.
name|getTime
argument_list|()
operator|+
literal|"ms"
argument_list|)
throw|;
block|}
DECL|method|intersect
name|DocRouter
operator|.
name|Range
name|intersect
parameter_list|(
name|DocRouter
operator|.
name|Range
name|a
parameter_list|,
name|DocRouter
operator|.
name|Range
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
operator|||
operator|!
name|a
operator|.
name|overlaps
argument_list|(
name|b
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|a
operator|.
name|isSubsetOf
argument_list|(
name|b
argument_list|)
condition|)
return|return
name|a
return|;
elseif|else
if|if
condition|(
name|b
operator|.
name|isSubsetOf
argument_list|(
name|a
argument_list|)
condition|)
return|return
name|b
return|;
elseif|else
if|if
condition|(
name|b
operator|.
name|includes
argument_list|(
name|a
operator|.
name|max
argument_list|)
condition|)
block|{
return|return
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|b
operator|.
name|min
argument_list|,
name|a
operator|.
name|max
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|a
operator|.
name|min
argument_list|,
name|b
operator|.
name|max
argument_list|)
return|;
block|}
block|}
DECL|method|sendShardRequest
name|void
name|sendShardRequest
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|)
block|{
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|adminPath
argument_list|,
name|zkStateReader
argument_list|)
expr_stmt|;
block|}
DECL|method|sendShardRequest
specifier|public
specifier|static
name|void
name|sendShardRequest
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|,
name|String
name|adminPath
parameter_list|,
name|ZkStateReader
name|zkStateReader
parameter_list|)
block|{
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|String
name|coreAdminAsyncId
init|=
name|asyncId
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ASYNC
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
block|}
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|addPropertyParams
name|void
name|addPropertyParams
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|)
block|{
comment|// Now add the property.key=value pairs
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addPropertyParams
name|void
name|addPropertyParams
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
comment|// Now add the property.key=value pairs
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getLiveOrLiveAndCreateNodeSetList
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getLiveOrLiveAndCreateNodeSetList
parameter_list|(
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|,
specifier|final
name|ZkNodeProps
name|message
parameter_list|,
specifier|final
name|Random
name|random
parameter_list|)
block|{
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random (except when createNodeSet and createNodeSet.shuffle=false are passed in)
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
decl_stmt|;
specifier|final
name|String
name|createNodeSetStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CREATE_NODE_SET
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|(
name|createNodeSetStr
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|StrUtils
operator|.
name|splitSmart
argument_list|(
operator|(
name|CREATE_NODE_SET_EMPTY
operator|.
name|equals
argument_list|(
name|createNodeSetStr
argument_list|)
condition|?
literal|""
else|:
name|createNodeSetStr
operator|)
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|createNodeList
operator|!=
literal|null
condition|)
block|{
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|createNodeList
argument_list|)
expr_stmt|;
name|nodeList
operator|.
name|retainAll
argument_list|(
name|liveNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|.
name|getBool
argument_list|(
name|CREATE_NODE_SET_SHUFFLE
argument_list|,
name|CREATE_NODE_SET_SHUFFLE_DEFAULT
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|nodeList
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|liveNodes
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|)
expr_stmt|;
block|}
return|return
name|nodeList
return|;
block|}
DECL|method|modifyCollection
specifier|private
name|void
name|modifyCollection
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
comment|//the rest of the processing is based on writing cluster state properties
comment|//remove the property here to avoid any errors down the pipeline due to this property appearing
name|String
name|configName
init|=
operator|(
name|String
operator|)
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
if|if
condition|(
name|configName
operator|!=
literal|null
condition|)
block|{
name|validateConfigOrThrowSolrException
argument_list|(
name|configName
argument_list|)
expr_stmt|;
name|boolean
name|isLegacyCloud
init|=
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|zkStateReader
argument_list|)
decl_stmt|;
name|createConfNode
argument_list|(
name|configName
argument_list|,
name|collectionName
argument_list|,
name|isLegacyCloud
argument_list|)
expr_stmt|;
name|reloadCollection
argument_list|(
literal|null
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|NAME
argument_list|,
name|collectionName
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
name|overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|areChangesVisible
init|=
literal|true
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|areChangesVisible
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|updateEntry
range|:
name|message
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|updateKey
init|=
name|updateEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|updateKey
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
operator|&&
operator|!
name|updateKey
operator|.
name|equals
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|)
operator|&&
operator|!
name|collection
operator|.
name|get
argument_list|(
name|updateKey
argument_list|)
operator|.
name|equals
argument_list|(
name|updateEntry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
name|areChangesVisible
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|areChangesVisible
condition|)
break|break;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|areChangesVisible
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not modify collection "
operator|+
name|message
argument_list|)
throw|;
block|}
DECL|method|cleanupCollection
name|void
name|cleanupCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Cleaning up collection ["
operator|+
name|collectionName
operator|+
literal|"]."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|commandMap
operator|.
name|get
argument_list|(
name|DELETE
argument_list|)
operator|.
name|call
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|identifyNodes
name|Map
argument_list|<
name|Position
argument_list|,
name|String
argument_list|>
name|identifyNodes
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
parameter_list|,
name|int
name|repFactor
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Map
argument_list|>
name|rulesMap
init|=
operator|(
name|List
operator|)
name|message
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rulesMap
operator|==
literal|null
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Map
argument_list|<
name|Position
argument_list|,
name|String
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|aShard
range|:
name|shardNames
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|result
operator|.
name|put
argument_list|(
operator|new
name|Position
argument_list|(
name|aShard
argument_list|,
name|j
argument_list|)
argument_list|,
name|nodeList
operator|.
name|get
argument_list|(
name|i
operator|%
name|nodeList
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
name|List
argument_list|<
name|Rule
argument_list|>
name|rules
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|map
range|:
name|rulesMap
control|)
name|rules
operator|.
name|add
argument_list|(
operator|new
name|Rule
argument_list|(
operator|(
name|Map
operator|)
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|sharVsReplicaCount
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shard
range|:
name|shardNames
control|)
name|sharVsReplicaCount
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|repFactor
argument_list|)
expr_stmt|;
name|ReplicaAssigner
name|replicaAssigner
init|=
operator|new
name|ReplicaAssigner
argument_list|(
name|rules
argument_list|,
name|sharVsReplicaCount
argument_list|,
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|message
operator|.
name|get
argument_list|(
name|SNITCH
argument_list|)
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
comment|//this is a new collection. So, there are no nodes in any shard
name|nodeList
argument_list|,
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
return|return
name|replicaAssigner
operator|.
name|getNodeMappings
argument_list|()
return|;
block|}
DECL|method|waitToSeeReplicasInState
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|waitToSeeReplicasInState
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|coreNames
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocCollection
name|coll
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|coreName
range|:
name|coreNames
control|)
block|{
if|if
condition|(
name|result
operator|.
name|containsKey
argument_list|(
name|coreName
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|coreName
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|replica
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|result
operator|.
name|size
argument_list|()
operator|==
name|coreNames
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Timed out waiting to see all replicas: "
operator|+
name|coreNames
operator|+
literal|" in cluster state."
argument_list|)
throw|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addReplica
name|ZkNodeProps
name|addReplica
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|Runnable
name|onComplete
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
operator|(
operator|(
name|AddReplicaCmd
operator|)
name|commandMap
operator|.
name|get
argument_list|(
name|ADDREPLICA
argument_list|)
operator|)
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
name|message
argument_list|,
name|results
argument_list|,
name|onComplete
argument_list|)
return|;
block|}
DECL|method|processResponses
name|void
name|processResponses
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|boolean
name|abortOnError
parameter_list|,
name|String
name|msgOnError
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|)
block|{
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
name|abortOnError
argument_list|,
name|msgOnError
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|processResponses
name|void
name|processResponses
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|boolean
name|abortOnError
parameter_list|,
name|String
name|msgOnError
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|okayExceptions
parameter_list|)
block|{
comment|//Processes all shard responses
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|,
name|okayExceptions
argument_list|)
expr_stmt|;
name|Throwable
name|exception
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
if|if
condition|(
name|abortOnError
operator|&&
name|exception
operator|!=
literal|null
condition|)
block|{
comment|// drain pending requests
while|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|msgOnError
argument_list|,
name|exception
argument_list|)
throw|;
block|}
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
comment|//If request is async wait for the core admin to complete before returning
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|waitForAsyncCallsToComplete
argument_list|(
name|requestMap
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validateConfigOrThrowSolrException
name|void
name|validateConfigOrThrowSolrException
parameter_list|(
name|String
name|configName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|boolean
name|isValid
init|=
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isValid
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Can not find the specified config set: "
operator|+
name|configName
argument_list|)
throw|;
block|}
block|}
comment|/**    * This doesn't validate the config (path) itself and is just responsible for creating the confNode.    * That check should be done before the config node is created.    */
DECL|method|createConfNode
name|void
name|createConfNode
parameter_list|(
name|String
name|configName
parameter_list|,
name|String
name|coll
parameter_list|,
name|boolean
name|isLegacyCloud
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|configName
operator|!=
literal|null
condition|)
block|{
name|String
name|collDir
init|=
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|coll
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"creating collections conf node {} "
argument_list|,
name|collDir
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|Utils
operator|.
name|toJSON
argument_list|(
name|makeMap
argument_list|(
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|,
name|configName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|collDir
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|collDir
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|makePath
argument_list|(
name|collDir
argument_list|,
name|data
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|isLegacyCloud
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Could not obtain config name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to get config name"
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|collectionCmd
specifier|private
name|void
name|collectionCmd
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|Replica
operator|.
name|State
name|stateMatcher
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|)
block|{
name|collectionCmd
argument_list|(
name|message
argument_list|,
name|params
argument_list|,
name|results
argument_list|,
name|stateMatcher
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|collectionCmd
name|void
name|collectionCmd
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|Replica
operator|.
name|State
name|stateMatcher
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|okayExceptions
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Executing Collection Cmd : "
operator|+
name|params
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|DocCollection
name|coll
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|coll
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|sliceCmd
argument_list|(
name|clusterState
argument_list|,
name|params
argument_list|,
name|stateMatcher
argument_list|,
name|slice
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|,
name|okayExceptions
argument_list|)
expr_stmt|;
block|}
DECL|method|sliceCmd
name|void
name|sliceCmd
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|Replica
operator|.
name|State
name|stateMatcher
parameter_list|,
name|Slice
name|slice
parameter_list|,
name|ShardHandler
name|shardHandler
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|)
operator|&&
operator|(
name|stateMatcher
operator|==
literal|null
operator|||
name|Replica
operator|.
name|State
operator|.
name|getState
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|)
argument_list|)
operator|==
name|stateMatcher
operator|)
condition|)
block|{
comment|// For thread safety, only simple clone the ModifiableSolrParams
name|ModifiableSolrParams
name|cloneParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|cloneParams
operator|.
name|add
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|cloneParams
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|sendShardRequest
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
argument_list|,
name|cloneParams
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|ShardResponse
name|srsp
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|okayExceptions
parameter_list|)
block|{
name|Throwable
name|e
init|=
name|srsp
operator|.
name|getException
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|srsp
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|SolrResponse
name|solrResponse
init|=
name|srsp
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|String
name|shard
init|=
name|srsp
operator|.
name|getShard
argument_list|()
decl_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
name|e
argument_list|,
name|nodeName
argument_list|,
name|solrResponse
argument_list|,
name|shard
argument_list|,
name|okayExceptions
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|processResponse
specifier|private
name|void
name|processResponse
parameter_list|(
name|NamedList
name|results
parameter_list|,
name|Throwable
name|e
parameter_list|,
name|String
name|nodeName
parameter_list|,
name|SolrResponse
name|solrResponse
parameter_list|,
name|String
name|shard
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|okayExceptions
parameter_list|)
block|{
name|String
name|rootThrowable
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|RemoteSolrException
condition|)
block|{
name|rootThrowable
operator|=
operator|(
operator|(
name|RemoteSolrException
operator|)
name|e
operator|)
operator|.
name|getRootThrowable
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|e
operator|!=
literal|null
operator|&&
operator|(
name|rootThrowable
operator|==
literal|null
operator|||
operator|!
name|okayExceptions
operator|.
name|contains
argument_list|(
name|rootThrowable
argument_list|)
operator|)
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error from shard: "
operator|+
name|shard
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|SimpleOrderedMap
name|failure
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
if|if
condition|(
name|failure
operator|==
literal|null
condition|)
block|{
name|failure
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|failure
argument_list|)
expr_stmt|;
block|}
name|failure
operator|.
name|add
argument_list|(
name|nodeName
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|":"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|==
literal|null
condition|)
block|{
name|success
operator|=
operator|new
name|SimpleOrderedMap
argument_list|()
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
name|success
operator|.
name|add
argument_list|(
name|nodeName
argument_list|,
name|solrResponse
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|waitForAsyncCallsToComplete
specifier|private
name|void
name|waitForAsyncCallsToComplete
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
parameter_list|,
name|NamedList
name|results
parameter_list|)
block|{
for|for
control|(
name|String
name|k
range|:
name|requestMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"I am Waiting for :{}/{}"
argument_list|,
name|k
argument_list|,
name|requestMap
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|requestMap
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|,
name|waitForCoreAdminAsyncCallToComplete
argument_list|(
name|k
argument_list|,
name|requestMap
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForCoreAdminAsyncCallToComplete
specifier|private
name|NamedList
name|waitForCoreAdminAsyncCallToComplete
parameter_list|(
name|String
name|nodeName
parameter_list|,
name|String
name|requestId
parameter_list|)
block|{
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTSTATUS
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
name|requestId
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
name|ShardRequest
name|sreq
decl_stmt|;
do|do
block|{
name|sreq
operator|=
operator|new
name|ShardRequest
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|String
name|replica
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|replica
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|replica
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
name|ShardResponse
name|srsp
decl_stmt|;
do|do
block|{
name|srsp
operator|=
name|shardHandler
operator|.
name|takeCompletedOrError
argument_list|()
expr_stmt|;
if|if
condition|(
name|srsp
operator|!=
literal|null
condition|)
block|{
name|NamedList
name|results
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|processResponse
argument_list|(
name|results
argument_list|,
name|srsp
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"running"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The task is still RUNNING, continuing to wait."
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
continue|continue;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"completed"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The task is COMPLETED, returning"
argument_list|)
expr_stmt|;
return|return
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"failed"
argument_list|)
condition|)
block|{
comment|// TODO: Improve this. Get more information.
name|log
operator|.
name|debug
argument_list|(
literal|"The task is FAILED, returning"
argument_list|)
expr_stmt|;
return|return
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|r
operator|.
name|equals
argument_list|(
literal|"notfound"
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"The task is notfound, retry"
argument_list|)
expr_stmt|;
if|if
condition|(
name|counter
operator|++
operator|<
literal|5
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{               }
break|break;
block|}
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid status request for requestId: "
operator|+
name|requestId
operator|+
literal|""
operator|+
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
operator|+
literal|"retried "
operator|+
name|counter
operator|+
literal|"times"
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Invalid status request "
operator|+
name|srsp
operator|.
name|getSolrResponse
argument_list|()
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"STATUS"
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
do|while
condition|(
name|srsp
operator|!=
literal|null
condition|)
do|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Overseer Collection Message Handler"
return|;
block|}
annotation|@
name|Override
DECL|method|getTimerName
specifier|public
name|String
name|getTimerName
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
return|return
literal|"collection_"
operator|+
name|operation
return|;
block|}
annotation|@
name|Override
DECL|method|getTaskKey
specifier|public
name|String
name|getTaskKey
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|)
block|{
return|return
name|message
operator|.
name|containsKey
argument_list|(
name|COLLECTION_PROP
argument_list|)
condition|?
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
else|:
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
return|;
block|}
DECL|field|sessionId
specifier|private
name|long
name|sessionId
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|lockSession
specifier|private
name|LockTree
operator|.
name|Session
name|lockSession
decl_stmt|;
annotation|@
name|Override
DECL|method|lockTask
specifier|public
name|Lock
name|lockTask
parameter_list|(
name|ZkNodeProps
name|message
parameter_list|,
name|OverseerTaskProcessor
operator|.
name|TaskBatch
name|taskBatch
parameter_list|)
block|{
if|if
condition|(
name|lockSession
operator|==
literal|null
operator|||
name|sessionId
operator|!=
name|taskBatch
operator|.
name|getId
argument_list|()
condition|)
block|{
comment|//this is always called in the same thread.
comment|//Each batch is supposed to have a new taskBatch
comment|//So if taskBatch changes we must create a new Session
comment|// also check if the running tasks are empty. If yes, clear lockTree
comment|// this will ensure that locks are not 'leaked'
if|if
condition|(
name|taskBatch
operator|.
name|getRunningTasks
argument_list|()
operator|==
literal|0
condition|)
name|lockTree
operator|.
name|clear
argument_list|()
expr_stmt|;
name|lockSession
operator|=
name|lockTree
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
return|return
name|lockSession
operator|.
name|lock
argument_list|(
name|getCollectionAction
argument_list|(
name|message
operator|.
name|getStr
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|getTaskKey
argument_list|(
name|message
argument_list|)
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tpe
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|tpe
operator|.
name|isShutdown
argument_list|()
condition|)
block|{
name|ExecutorUtil
operator|.
name|shutdownAndAwaitTermination
argument_list|(
name|tpe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|interface|Cmd
interface|interface
name|Cmd
block|{
DECL|method|call
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
block|}
end_class

end_unit

