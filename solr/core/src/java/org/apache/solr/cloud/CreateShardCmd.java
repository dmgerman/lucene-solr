begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Assign
operator|.
name|getNodesForNewReplicas
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_class
DECL|class|CreateShardCmd
specifier|public
class|class
name|CreateShardCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|CreateShardCmd
specifier|public
name|CreateShardCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Create shard invoked: {}"
argument_list|,
name|message
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionName
operator|==
literal|null
operator|||
name|sliceName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"'collection' and 'shard' are required parameters"
argument_list|)
throw|;
name|int
name|numSlices
init|=
literal|1
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|ocmh
operator|.
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|int
name|repFactor
init|=
name|message
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
name|collection
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|createNodeSetStr
init|=
name|message
operator|.
name|get
argument_list|(
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Assign
operator|.
name|ReplicaCount
argument_list|>
name|sortedNodeList
init|=
name|getNodesForNewReplicas
argument_list|(
name|clusterState
argument_list|,
name|collectionName
argument_list|,
name|sliceName
argument_list|,
name|repFactor
argument_list|,
name|createNodeSetStr
argument_list|,
name|ocmh
operator|.
name|overseer
operator|.
name|getZkController
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we see the shard
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|created
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getSlice
argument_list|(
name|sliceName
argument_list|)
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|created
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|created
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully create shard: "
operator|+
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
argument_list|)
throw|;
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
name|String
name|async
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
block|{
name|requestMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|repFactor
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<=
name|repFactor
condition|;
name|j
operator|++
control|)
block|{
name|String
name|nodeName
init|=
name|sortedNodeList
operator|.
name|get
argument_list|(
operator|(
operator|(
name|j
operator|-
literal|1
operator|)
operator|)
operator|%
name|sortedNodeList
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|nodeName
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
name|j
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|async
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"Failed to create shard"
argument_list|,
name|async
argument_list|,
name|requestMap
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Finished create command on all shards for collection: "
operator|+
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

