begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETEREPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETESHARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_class
DECL|class|DeleteShardCmd
specifier|public
class|class
name|DeleteShardCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|DeleteShardCmd
specifier|public
name|DeleteShardCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|)
decl_stmt|;
name|String
name|sliceId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Delete shard invoked"
argument_list|)
expr_stmt|;
name|Slice
name|slice
init|=
name|clusterState
operator|.
name|getSlice
argument_list|(
name|collectionName
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with name "
operator|+
name|sliceId
operator|+
literal|" exists for collection "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No collection with the specified name exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
block|}
comment|// For now, only allow for deletions of Inactive slices or custom hashes (range==null).
comment|// TODO: Add check for range gaps on Slice deletion
specifier|final
name|Slice
operator|.
name|State
name|state
init|=
name|slice
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|slice
operator|.
name|getRange
argument_list|()
operator|==
literal|null
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|INACTIVE
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The slice: "
operator|+
name|slice
operator|.
name|getName
argument_list|()
operator|+
literal|" is currently "
operator|+
name|state
operator|+
literal|". Only non-active (or custom-hashed) slices can be deleted."
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
condition|)
block|{
comment|// mark the slice as 'construction' and only then try to delete the cores
comment|// see SOLR-9455
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|sliceId
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|replicas
init|=
name|getReplicasForSlice
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|)
decl_stmt|;
name|CountDownLatch
name|cleanupLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|replicas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZkNodeProps
name|r
range|:
name|replicas
control|)
block|{
specifier|final
name|ZkNodeProps
name|replica
init|=
name|r
operator|.
name|plus
argument_list|(
name|message
operator|.
name|getProperties
argument_list|()
argument_list|)
operator|.
name|plus
argument_list|(
literal|"parallel"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|plus
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Deleting replica for collection={} shard={} on node={}"
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|NODE
argument_list|)
argument_list|)
expr_stmt|;
name|NamedList
name|deleteResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|DeleteReplicaCmd
operator|)
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|DELETEREPLICA
argument_list|)
operator|)
operator|.
name|deleteReplica
argument_list|(
name|clusterState
argument_list|,
name|replica
argument_list|,
name|deleteResult
argument_list|,
parameter_list|()
lambda|->
block|{
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to delete replica for collection=%s shard=%s"
operator|+
literal|" on node=%s"
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|replica
operator|.
name|getStr
argument_list|(
name|NODE_NAME_PROP
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|deleteResult
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error deleting replica: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error deleting replica: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Waiting for delete shard action to complete"
argument_list|)
expr_stmt|;
name|cleanupLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETESHARD
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|sliceId
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the shard
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|removed
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|DocCollection
name|collection
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|removed
operator|=
name|collection
operator|.
name|getSlice
argument_list|(
name|sliceId
argument_list|)
operator|==
literal|null
expr_stmt|;
if|if
condition|(
name|removed
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// just a bit of time so it's more likely other readers see on return
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|removed
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully remove collection: "
operator|+
name|collectionName
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Successfully deleted collection: "
operator|+
name|collectionName
operator|+
literal|", shard: "
operator|+
name|sliceId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error executing delete operation for collection: "
operator|+
name|collectionName
operator|+
literal|" shard: "
operator|+
name|sliceId
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getReplicasForSlice
specifier|private
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|getReplicasForSlice
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Slice
name|slice
parameter_list|)
block|{
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|sourceReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NODE
argument_list|,
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
name|sourceReplicas
operator|.
name|add
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|sourceReplicas
return|;
block|}
block|}
end_class

end_unit

