begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.autoscaling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|api
operator|.
name|Api
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|api
operator|.
name|ApiBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|SolrClientDataProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|RequestHandlerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|AuthorizationContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|PermissionNameProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SOLR_AUTOSCALING_CONF_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|JSON
import|;
end_import

begin_comment
comment|/**  * Handler for /cluster/autoscaling  */
end_comment

begin_class
DECL|class|AutoScalingHandler
specifier|public
class|class
name|AutoScalingHandler
extends|extends
name|RequestHandlerBase
implements|implements
name|PermissionNameProvider
block|{
DECL|field|HANDLER_PATH
specifier|public
specifier|static
specifier|final
name|String
name|HANDLER_PATH
init|=
literal|"/admin/autoscaling"
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|singletonCommands
specifier|private
specifier|static
name|ImmutableSet
argument_list|<
name|String
argument_list|>
name|singletonCommands
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"set-cluster-preferences"
argument_list|,
literal|"set-cluster-policy"
argument_list|)
decl_stmt|;
DECL|field|container
specifier|protected
specifier|final
name|CoreContainer
name|container
decl_stmt|;
DECL|field|DEFAULT_ACTIONS
specifier|private
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|DEFAULT_ACTIONS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
DECL|method|AutoScalingHandler
specifier|public
name|AutoScalingHandler
parameter_list|(
name|CoreContainer
name|container
parameter_list|)
block|{
name|this
operator|.
name|container
operator|=
name|container
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|handleRequestBody
specifier|public
name|void
name|handleRequestBody
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|httpMethod
init|=
operator|(
name|String
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"httpMethod"
argument_list|)
decl_stmt|;
name|RequestHandlerUtils
operator|.
name|setWt
argument_list|(
name|req
argument_list|,
name|JSON
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"GET"
operator|.
name|equals
argument_list|(
name|httpMethod
argument_list|)
condition|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
literal|"path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
name|path
operator|=
literal|"/cluster/autoscaling"
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|path
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|parts
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|<
literal|2
operator|||
name|parts
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
comment|// invalid
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|zkReadAutoScalingConf
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|2
condition|)
block|{
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|addAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|&&
literal|"diagnostics"
operator|.
name|equals
argument_list|(
name|parts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
condition|)
block|{
name|handleDiagnostics
argument_list|(
name|rsp
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|req
operator|.
name|getContentStreams
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No commands specified for autoscaling"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|CommandOperation
argument_list|>
name|ops
init|=
name|CommandOperation
operator|.
name|readCommands
argument_list|(
name|req
operator|.
name|getContentStreams
argument_list|()
argument_list|,
name|rsp
operator|.
name|getValues
argument_list|()
argument_list|,
name|singletonCommands
argument_list|)
decl_stmt|;
if|if
condition|(
name|ops
operator|==
literal|null
condition|)
block|{
comment|// errors have already been added to the response so there's nothing left to do
return|return;
block|}
for|for
control|(
name|CommandOperation
name|op
range|:
name|ops
control|)
block|{
switch|switch
condition|(
name|op
operator|.
name|name
condition|)
block|{
case|case
literal|"set-policy"
case|:
name|handleSetPolicies
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"remove-policy"
case|:
name|handleRemovePolicy
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"set-cluster-preferences"
case|:
name|handleSetClusterPreferences
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|op
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"set-cluster-policy"
case|:
name|handleSetClusterPolicy
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|,
name|op
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown command: "
operator|+
name|op
operator|.
name|name
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"result"
argument_list|,
literal|"failure"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|RequestHandlerUtils
operator|.
name|addExperimentalFormatWarning
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleDiagnostics
specifier|private
name|void
name|handleDiagnostics
parameter_list|(
name|SolrQueryResponse
name|rsp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|autoScalingConf
parameter_list|)
throws|throws
name|IOException
block|{
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
name|autoScalingConf
argument_list|)
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|build
init|=
operator|new
name|CloudSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withHttpClient
argument_list|(
name|container
operator|.
name|getUpdateShardHandler
argument_list|()
operator|.
name|getHttpClient
argument_list|()
argument_list|)
operator|.
name|withZkHost
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkServerAddress
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Policy
operator|.
name|Session
name|session
init|=
name|policy
operator|.
name|createSession
argument_list|(
operator|new
name|SolrClientDataProvider
argument_list|(
name|build
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|sorted
init|=
name|session
operator|.
name|getSorted
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Clause
operator|.
name|Violation
argument_list|>
name|violations
init|=
name|session
operator|.
name|getViolations
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Preference
argument_list|>
name|clusterPreferences
init|=
name|policy
operator|.
name|getClusterPreferences
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|sortedNodes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sorted
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|sorted
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"node"
argument_list|,
name|row
operator|.
name|node
argument_list|)
decl_stmt|;
for|for
control|(
name|Cell
name|cell
range|:
name|row
operator|.
name|cells
control|)
block|{
for|for
control|(
name|Preference
name|clusterPreference
range|:
name|clusterPreferences
control|)
block|{
name|Policy
operator|.
name|SortParam
name|name
init|=
name|clusterPreference
operator|.
name|name
decl_stmt|;
if|if
condition|(
name|cell
operator|.
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|name
operator|.
name|name
argument_list|()
argument_list|,
name|cell
operator|.
name|val
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
name|sortedNodes
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"sortedNodes"
argument_list|,
name|sortedNodes
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"violations"
argument_list|,
name|violations
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"diagnostics"
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|handleSetClusterPolicy
specifier|private
name|void
name|handleSetClusterPolicy
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|List
name|clusterPolicy
init|=
operator|(
name|List
operator|)
name|op
operator|.
name|getCommandData
argument_list|()
decl_stmt|;
if|if
condition|(
name|clusterPolicy
operator|==
literal|null
operator|||
operator|!
operator|(
name|clusterPolicy
operator|instanceof
name|List
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"A list of cluster policies was not found"
argument_list|)
throw|;
block|}
name|zkSetClusterPolicy
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|clusterPolicy
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"result"
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSetClusterPreferences
specifier|private
name|void
name|handleSetClusterPreferences
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|List
name|preferences
init|=
operator|(
name|List
operator|)
name|op
operator|.
name|getCommandData
argument_list|()
decl_stmt|;
if|if
condition|(
name|preferences
operator|==
literal|null
operator|||
operator|!
operator|(
name|preferences
operator|instanceof
name|List
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"A list of cluster preferences not found"
argument_list|)
throw|;
block|}
name|zkSetPreferences
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"result"
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
DECL|method|handleRemovePolicy
specifier|private
name|void
name|handleRemovePolicy
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|String
name|policyName
init|=
operator|(
name|String
operator|)
name|op
operator|.
name|getCommandData
argument_list|()
decl_stmt|;
if|if
condition|(
name|policyName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The policy name cannot be empty"
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|autoScalingConf
init|=
name|zkReadAutoScalingConf
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|policies
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|autoScalingConf
operator|.
name|get
argument_list|(
literal|"policies"
argument_list|)
decl_stmt|;
if|if
condition|(
name|policies
operator|==
literal|null
operator|||
operator|!
name|policies
operator|.
name|containsKey
argument_list|(
name|policyName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No policy exists with name: "
operator|+
name|policyName
argument_list|)
throw|;
block|}
name|zkSetPolicies
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|policyName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"result"
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
DECL|method|handleSetPolicies
specifier|private
name|void
name|handleSetPolicies
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|,
name|CommandOperation
name|op
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|policies
init|=
name|op
operator|.
name|getDataMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|policy
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|policyName
init|=
name|policy
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|policyName
operator|==
literal|null
operator|||
name|policyName
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The policy name cannot be null or empty"
argument_list|)
throw|;
block|}
block|}
name|zkSetPolicies
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|null
argument_list|,
name|policies
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|add
argument_list|(
literal|"result"
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
block|}
DECL|method|zkSetPolicies
specifier|private
name|void
name|zkSetPolicies
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|String
name|policyBeRemoved
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|newPolicies
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|loaded
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loaded
operator|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|policies
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|loaded
operator|.
name|get
argument_list|(
literal|"policies"
argument_list|)
decl_stmt|;
if|if
condition|(
name|policies
operator|==
literal|null
condition|)
name|policies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|newPolicies
operator|!=
literal|null
condition|)
block|{
name|policies
operator|.
name|putAll
argument_list|(
name|newPolicies
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policies
operator|.
name|remove
argument_list|(
name|policyBeRemoved
argument_list|)
expr_stmt|;
block|}
name|loaded
operator|=
name|loaded
operator|.
name|plus
argument_list|(
literal|"policies"
argument_list|,
name|policies
argument_list|)
expr_stmt|;
name|verifyAutoScalingConf
argument_list|(
name|loaded
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|loaded
argument_list|)
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|bve
parameter_list|)
block|{
comment|// somebody else has changed the configuration so we must retry
continue|continue;
block|}
break|break;
block|}
block|}
DECL|method|zkSetPreferences
specifier|private
name|void
name|zkSetPreferences
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|List
name|preferences
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|loaded
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loaded
operator|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|loaded
operator|=
name|loaded
operator|.
name|plus
argument_list|(
literal|"cluster-preferences"
argument_list|,
name|preferences
argument_list|)
expr_stmt|;
name|verifyAutoScalingConf
argument_list|(
name|loaded
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|loaded
argument_list|)
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|bve
parameter_list|)
block|{
comment|// somebody else has changed the configuration so we must retry
continue|continue;
block|}
break|break;
block|}
block|}
DECL|method|zkSetClusterPolicy
specifier|private
name|void
name|zkSetClusterPolicy
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|,
name|List
name|clusterPolicy
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|Stat
name|stat
init|=
operator|new
name|Stat
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|loaded
init|=
literal|null
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
literal|null
argument_list|,
name|stat
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|loaded
operator|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|loaded
operator|=
name|loaded
operator|.
name|plus
argument_list|(
literal|"cluster-policy"
argument_list|,
name|clusterPolicy
argument_list|)
expr_stmt|;
name|verifyAutoScalingConf
argument_list|(
name|loaded
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|setData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
name|Utils
operator|.
name|toJSON
argument_list|(
name|loaded
argument_list|)
argument_list|,
name|stat
operator|.
name|getVersion
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|BadVersionException
name|bve
parameter_list|)
block|{
comment|// somebody else has changed the configuration so we must retry
continue|continue;
block|}
break|break;
block|}
block|}
DECL|method|verifyAutoScalingConf
specifier|private
name|void
name|verifyAutoScalingConf
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|autoScalingConf
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|CloudSolrClient
name|build
init|=
operator|new
name|CloudSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withHttpClient
argument_list|(
name|container
operator|.
name|getUpdateShardHandler
argument_list|()
operator|.
name|getHttpClient
argument_list|()
argument_list|)
operator|.
name|withZkHost
argument_list|(
name|container
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkServerAddress
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
name|autoScalingConf
argument_list|)
decl_stmt|;
name|Policy
operator|.
name|Session
name|session
init|=
name|policy
operator|.
name|createSession
argument_list|(
operator|new
name|SolrClientDataProvider
argument_list|(
name|build
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Verified autoscaling configuration"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|zkReadAutoScalingConf
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|zkReadAutoScalingConf
parameter_list|(
name|ZkStateReader
name|reader
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|data
init|=
name|reader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|SOLR_AUTOSCALING_CONF_PATH
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ZkNodeProps
name|loaded
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
decl_stmt|;
return|return
name|loaded
operator|.
name|getProperties
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"A handler for autoscaling configuration"
return|;
block|}
annotation|@
name|Override
DECL|method|getPermissionName
specifier|public
name|Name
name|getPermissionName
parameter_list|(
name|AuthorizationContext
name|request
parameter_list|)
block|{
switch|switch
condition|(
name|request
operator|.
name|getHttpMethod
argument_list|()
condition|)
block|{
case|case
literal|"GET"
case|:
return|return
name|Name
operator|.
name|AUTOSCALING_READ_PERM
return|;
case|case
literal|"POST"
case|:
return|return
name|Name
operator|.
name|AUTOSCALING_WRITE_PERM
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getApis
specifier|public
name|Collection
argument_list|<
name|Api
argument_list|>
name|getApis
parameter_list|()
block|{
return|return
name|ApiBag
operator|.
name|wrapRequestHandlers
argument_list|(
name|this
argument_list|,
literal|"autoscaling.Commands"
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|registerV2
specifier|public
name|Boolean
name|registerV2
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|TRUE
return|;
block|}
annotation|@
name|Override
DECL|method|getSubHandler
specifier|public
name|SolrRequestHandler
name|getSubHandler
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
literal|"/diagnostics"
argument_list|)
condition|)
return|return
name|this
return|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

