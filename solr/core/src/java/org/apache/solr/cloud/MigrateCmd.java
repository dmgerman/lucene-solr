begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CompositeIdRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|RoutingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexSplitter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROP_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|NUM_SLICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|NRT_REPLICAS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|makeMap
import|;
end_import

begin_class
DECL|class|MigrateCmd
specifier|public
class|class
name|MigrateCmd
implements|implements
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|MigrateCmd
specifier|public
name|MigrateCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|sourceCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|splitKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|String
name|targetCollectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"target.collection"
argument_list|)
decl_stmt|;
name|int
name|timeout
init|=
name|message
operator|.
name|getInt
argument_list|(
literal|"forward.timeout"
argument_list|,
literal|10
operator|*
literal|60
argument_list|)
operator|*
literal|1000
decl_stmt|;
name|DocCollection
name|sourceCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|sourceCollectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown source collection: "
operator|+
name|sourceCollectionName
argument_list|)
throw|;
block|}
name|DocCollection
name|targetCollection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|targetCollectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetCollection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unknown target collection: "
operator|+
name|sourceCollectionName
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|sourceCollection
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|CompositeIdRouter
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Source collection must use a compositeId router"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|targetCollection
operator|.
name|getRouter
argument_list|()
operator|instanceof
name|CompositeIdRouter
operator|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Target collection must use a compositeId router"
argument_list|)
throw|;
block|}
name|CompositeIdRouter
name|sourceRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|sourceCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|CompositeIdRouter
name|targetRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|targetCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|sourceSlices
init|=
name|sourceRouter
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
literal|null
argument_list|,
name|sourceCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active slices available in source collection: "
operator|+
name|sourceCollection
operator|+
literal|"for given split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
name|Collection
argument_list|<
name|Slice
argument_list|>
name|targetSlices
init|=
name|targetRouter
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
literal|null
argument_list|,
name|targetCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No active slices available in target collection: "
operator|+
name|targetCollection
operator|+
literal|"for given split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
name|String
name|asyncId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|message
operator|.
name|containsKey
argument_list|(
name|ASYNC
argument_list|)
operator|&&
name|message
operator|.
name|get
argument_list|(
name|ASYNC
argument_list|)
operator|!=
literal|null
condition|)
name|asyncId
operator|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|sourceSlice
range|:
name|sourceSlices
control|)
block|{
for|for
control|(
name|Slice
name|targetSlice
range|:
name|targetSlices
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Migrating source shard: {} to target shard: {} for split.key = "
operator|+
name|splitKey
argument_list|,
name|sourceSlice
argument_list|,
name|targetSlice
argument_list|)
expr_stmt|;
name|migrateKey
argument_list|(
name|clusterState
argument_list|,
name|sourceCollection
argument_list|,
name|sourceSlice
argument_list|,
name|targetCollection
argument_list|,
name|targetSlice
argument_list|,
name|splitKey
argument_list|,
name|timeout
argument_list|,
name|results
argument_list|,
name|asyncId
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|migrateKey
specifier|private
name|void
name|migrateKey
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|DocCollection
name|sourceCollection
parameter_list|,
name|Slice
name|sourceSlice
parameter_list|,
name|DocCollection
name|targetCollection
parameter_list|,
name|Slice
name|targetSlice
parameter_list|,
name|String
name|splitKey
parameter_list|,
name|int
name|timeout
parameter_list|,
name|NamedList
name|results
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|tempSourceCollectionName
init|=
literal|"split_"
operator|+
name|sourceSlice
operator|.
name|getName
argument_list|()
operator|+
literal|"_temp_"
operator|+
name|targetSlice
operator|.
name|getName
argument_list|()
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|tempSourceCollectionName
argument_list|)
decl_stmt|;
try|try
block|{
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|DELETE
argument_list|)
operator|.
name|call
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to clean up existing temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|CompositeIdRouter
name|sourceRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|sourceCollection
operator|.
name|getRouter
argument_list|()
decl_stmt|;
name|DocRouter
operator|.
name|Range
name|keyHashRange
init|=
name|sourceRouter
operator|.
name|keyHashRange
argument_list|(
name|splitKey
argument_list|)
decl_stmt|;
name|ShardHandlerFactory
name|shardHandlerFactory
init|=
name|ocmh
operator|.
name|shardHandlerFactory
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Hash range for split.key: {} is: {}"
argument_list|,
name|splitKey
argument_list|,
name|keyHashRange
argument_list|)
expr_stmt|;
comment|// intersect source range, keyHashRange and target range
comment|// this is the range that has to be split from source and transferred to target
name|DocRouter
operator|.
name|Range
name|splitRange
init|=
name|ocmh
operator|.
name|intersect
argument_list|(
name|targetSlice
operator|.
name|getRange
argument_list|()
argument_list|,
name|ocmh
operator|.
name|intersect
argument_list|(
name|sourceSlice
operator|.
name|getRange
argument_list|()
argument_list|,
name|keyHashRange
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|splitRange
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"No common hashes between source shard: {} and target shard: {}"
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Common hash range between source shard: {} and target shard: {} = "
operator|+
name|splitRange
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|targetLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|targetCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|targetSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
comment|// For tracking async calls.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking target leader node: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
operator|+
literal|" core: "
operator|+
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
operator|+
literal|" to buffer updates"
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|REQUESTBUFFERUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to request node to buffer updates"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|ADDROUTINGRULE
operator|.
name|toLower
argument_list|()
argument_list|,
name|COLLECTION_PROP
argument_list|,
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|"routeKey"
argument_list|,
name|SolrIndexSplitter
operator|.
name|getRouteKey
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|"!"
argument_list|,
literal|"range"
argument_list|,
name|splitRange
operator|.
name|toString
argument_list|()
argument_list|,
literal|"targetCollection"
argument_list|,
name|targetCollection
operator|.
name|getName
argument_list|()
argument_list|,
literal|"expireAt"
argument_list|,
name|RoutingRule
operator|.
name|makeExpiryAt
argument_list|(
name|timeout
argument_list|)
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding routing rule: "
operator|+
name|m
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we see the new rule
name|log
operator|.
name|info
argument_list|(
literal|"Waiting to see routing rule updated in clusterstate"
argument_list|)
expr_stmt|;
name|TimeOut
name|waitUntil
init|=
operator|new
name|TimeOut
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|added
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|waitUntil
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|sourceCollection
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sourceSlice
operator|=
name|sourceCollection
operator|.
name|getSlice
argument_list|(
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RoutingRule
argument_list|>
name|rules
init|=
name|sourceSlice
operator|.
name|getRoutingRules
argument_list|()
decl_stmt|;
if|if
condition|(
name|rules
operator|!=
literal|null
condition|)
block|{
name|RoutingRule
name|rule
init|=
name|rules
operator|.
name|get
argument_list|(
name|SolrIndexSplitter
operator|.
name|getRouteKey
argument_list|(
name|splitKey
argument_list|)
operator|+
literal|"!"
argument_list|)
decl_stmt|;
if|if
condition|(
name|rule
operator|!=
literal|null
operator|&&
name|rule
operator|.
name|getRouteRanges
argument_list|()
operator|.
name|contains
argument_list|(
name|splitRange
argument_list|)
condition|)
block|{
name|added
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|added
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not add routing rule: "
operator|+
name|m
argument_list|)
throw|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Routing rule added successfully"
argument_list|)
expr_stmt|;
comment|// Create temp core on source shard
name|Replica
name|sourceLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|,
name|sourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
comment|// create a temporary collection with just one node on the shard leader
name|String
name|configName
init|=
name|zkStateReader
operator|.
name|readConfigName
argument_list|(
name|sourceCollection
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|tempSourceCollectionName
argument_list|,
name|NRT_REPLICAS
argument_list|,
literal|1
argument_list|,
name|NUM_SLICES
argument_list|,
literal|1
argument_list|,
name|COLL_CONF
argument_list|,
name|configName
argument_list|,
name|CREATE_NODE_SET
argument_list|,
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|String
name|internalAsyncId
init|=
name|asyncId
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|internalAsyncId
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Creating temporary collection: "
operator|+
name|props
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|CREATE
argument_list|)
operator|.
name|call
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
comment|// refresh cluster state
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|Slice
name|tempSourceSlice
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|tempSourceCollectionName
argument_list|)
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Replica
name|tempSourceLeader
init|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
literal|120000
argument_list|)
decl_stmt|;
name|String
name|tempCollectionReplica1
init|=
name|Assign
operator|.
name|buildCoreName
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|coreNodeName
init|=
name|ocmh
operator|.
name|waitForCoreNodeName
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|tempCollectionReplica1
argument_list|)
decl_stmt|;
comment|// wait for the replicas to be seen as active on temp source leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking source leader to wait for: "
operator|+
name|tempCollectionReplica1
operator|+
literal|" to be alive on: "
operator|+
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|tempCollectionReplica1
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// we don't want this to happen asynchronously
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|tempSourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
argument_list|,
name|shardHandler
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create temp collection leader"
operator|+
literal|" or timed out waiting for it to come up"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking source leader to split index"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|SPLIT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|sourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|TARGET_CORE
argument_list|,
name|tempSourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|splitRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"split.key"
argument_list|,
name|splitKey
argument_list|)
expr_stmt|;
name|String
name|tempNodeName
init|=
name|sourceLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|tempNodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to invoke SPLIT core admin command"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating a replica of temporary collection: {} on the target leader node: {}"
argument_list|,
name|tempSourceCollectionName
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|tempCollectionReplica2
init|=
name|Assign
operator|.
name|buildCoreName
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|props
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|tempSourceSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
comment|// copy over property params:
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|props
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|AddReplicaCmd
operator|)
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|ADDREPLICA
argument_list|)
operator|)
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create replica of "
operator|+
literal|"temporary collection in target leader node."
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|coreNodeName
operator|=
name|ocmh
operator|.
name|waitForCoreNodeName
argument_list|(
name|tempSourceCollectionName
argument_list|,
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
comment|// wait for the replicas to be seen as active on temp source leader
name|log
operator|.
name|info
argument_list|(
literal|"Asking temp source leader to wait for: "
operator|+
name|tempCollectionReplica2
operator|+
literal|" to be alive on: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|tempSourceLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|tempSourceLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to create temp collection"
operator|+
literal|" replica or timed out waiting for them to come up"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created replica of temp source collection on target leader node"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Requesting merge of temp source collection replica to target leader"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|MERGEINDEXES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SRC_CORE
argument_list|,
name|tempCollectionReplica2
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|String
name|msg
init|=
literal|"MIGRATE failed to merge "
operator|+
name|tempCollectionReplica2
operator|+
literal|" to "
operator|+
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
operator|+
literal|" on node: "
operator|+
name|targetLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
name|msg
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Asking target leader to apply buffered updates"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|targetLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|targetLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"MIGRATE failed to request node to apply buffered updates"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting temporary collection: "
operator|+
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|props
operator|=
name|makeMap
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|NAME
argument_list|,
name|tempSourceCollectionName
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|DELETE
argument_list|)
operator|.
name|call
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|props
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Unable to delete temporary collection: "
operator|+
name|tempSourceCollectionName
operator|+
literal|". Please remove it manually"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

