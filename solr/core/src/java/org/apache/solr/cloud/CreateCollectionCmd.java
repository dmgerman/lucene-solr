begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|ClusterStateMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ImplicitDocRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_CONF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|CREATE_NODE_SET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|NUM_SLICES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|RANDOM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|MAX_SHARDS_PER_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
operator|.
name|formatString
import|;
end_import

begin_class
DECL|class|CreateCollectionCmd
specifier|public
class|class
name|CreateCollectionCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|CreateCollectionCmd
specifier|public
name|CreateCollectionCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|NAME
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Create collection {}"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|clusterState
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"collection already exists: "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
name|String
name|configName
init|=
name|getConfigName
argument_list|(
name|collectionName
argument_list|,
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|configName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No config set found to associate with the collection."
argument_list|)
throw|;
block|}
name|ocmh
operator|.
name|validateConfigOrThrowSolrException
argument_list|(
name|configName
argument_list|)
expr_stmt|;
try|try
block|{
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
name|int
name|repFactor
init|=
name|message
operator|.
name|getInt
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|ocmh
operator|.
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
specifier|final
name|String
name|async
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|Integer
name|numSlices
init|=
name|message
operator|.
name|getInt
argument_list|(
name|NUM_SLICES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|router
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"router.name"
argument_list|,
name|DocRouter
operator|.
name|DEFAULT_NAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|ImplicitDocRouter
operator|.
name|NAME
operator|.
name|equals
argument_list|(
name|router
argument_list|)
condition|)
block|{
name|ClusterStateMutator
operator|.
name|getShardNames
argument_list|(
name|shardNames
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
literal|"shards"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|numSlices
operator|=
name|shardNames
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|numSlices
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" is a required param (when using CompositeId router)."
argument_list|)
throw|;
block|}
name|ClusterStateMutator
operator|.
name|getShardNames
argument_list|(
name|numSlices
argument_list|,
name|shardNames
argument_list|)
expr_stmt|;
block|}
name|int
name|maxShardsPerNode
init|=
name|message
operator|.
name|getInt
argument_list|(
name|MAX_SHARDS_PER_NODE
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|repFactor
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|REPLICATION_FACTOR
operator|+
literal|" must be greater than 0"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numSlices
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|NUM_SLICES
operator|+
literal|" must be> 0"
argument_list|)
throw|;
block|}
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
name|OverseerCollectionMessageHandler
operator|.
name|getLiveOrLiveAndCreateNodeSetList
argument_list|(
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
argument_list|,
name|message
argument_list|,
name|RANDOM
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|ReplicaAssigner
operator|.
name|Position
argument_list|,
name|String
argument_list|>
name|positionVsNodes
decl_stmt|;
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"It is unusual to create a collection ("
operator|+
name|collectionName
operator|+
literal|") without cores."
argument_list|)
expr_stmt|;
name|positionVsNodes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|repFactor
operator|>
name|nodeList
operator|.
name|size
argument_list|()
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Specified "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" of "
operator|+
name|repFactor
operator|+
literal|" on collection "
operator|+
name|collectionName
operator|+
literal|" is higher than or equal to the number of Solr instances currently live or live and part of your "
operator|+
name|CREATE_NODE_SET
operator|+
literal|"("
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|"). It's unusual to run two replica of the same slice on the same Solr-instance."
argument_list|)
expr_stmt|;
block|}
name|int
name|maxShardsAllowedToCreate
init|=
name|maxShardsPerNode
operator|*
name|nodeList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|requestedShardsToCreate
init|=
name|numSlices
operator|*
name|repFactor
decl_stmt|;
if|if
condition|(
name|maxShardsAllowedToCreate
operator|<
name|requestedShardsToCreate
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Cannot create collection "
operator|+
name|collectionName
operator|+
literal|". Value of "
operator|+
name|MAX_SHARDS_PER_NODE
operator|+
literal|" is "
operator|+
name|maxShardsPerNode
operator|+
literal|", and the number of nodes currently live or live and part of your "
operator|+
name|CREATE_NODE_SET
operator|+
literal|" is "
operator|+
name|nodeList
operator|.
name|size
argument_list|()
operator|+
literal|". This allows a maximum of "
operator|+
name|maxShardsAllowedToCreate
operator|+
literal|" to be created. Value of "
operator|+
name|NUM_SLICES
operator|+
literal|" is "
operator|+
name|numSlices
operator|+
literal|" and value of "
operator|+
name|REPLICATION_FACTOR
operator|+
literal|" is "
operator|+
name|repFactor
operator|+
literal|". This requires "
operator|+
name|requestedShardsToCreate
operator|+
literal|" shards to be created (higher than the allowed number)"
argument_list|)
throw|;
block|}
name|positionVsNodes
operator|=
name|ocmh
operator|.
name|identifyNodes
argument_list|(
name|clusterState
argument_list|,
name|nodeList
argument_list|,
name|message
argument_list|,
name|shardNames
argument_list|,
name|repFactor
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|boolean
name|isLegacyCloud
init|=
name|Overseer
operator|.
name|isLegacy
argument_list|(
name|zkStateReader
argument_list|)
decl_stmt|;
name|ocmh
operator|.
name|createConfNode
argument_list|(
name|configName
argument_list|,
name|collectionName
argument_list|,
name|isLegacyCloud
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait for a while until we don't see the collection
name|TimeOut
name|waitUntil
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|created
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|waitUntil
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|created
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
if|if
condition|(
name|created
condition|)
break|break;
block|}
if|if
condition|(
operator|!
name|created
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Could not fully create collection: "
operator|+
name|collectionName
argument_list|)
throw|;
if|if
condition|(
name|nodeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Finished create command for collection: {}"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// For tracking async calls.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|formatString
argument_list|(
literal|"Creating SolrCores for new collection {0}, shardNames {1} , replicationFactor : {2}"
argument_list|,
name|collectionName
argument_list|,
name|shardNames
argument_list|,
name|repFactor
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ShardRequest
argument_list|>
name|coresToCreate
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReplicaAssigner
operator|.
name|Position
argument_list|,
name|String
argument_list|>
name|e
range|:
name|positionVsNodes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ReplicaAssigner
operator|.
name|Position
name|position
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|nodeName
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|coreName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|position
operator|.
name|shard
operator|+
literal|"_replica"
operator|+
operator|(
name|position
operator|.
name|index
operator|+
literal|1
operator|)
decl_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|formatString
argument_list|(
literal|"Creating core {0} as part of shard {1} of collection {2} on {3}"
argument_list|,
name|coreName
argument_list|,
name|position
operator|.
name|shard
argument_list|,
name|collectionName
argument_list|,
name|nodeName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|baseUrl
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
comment|//in the new mode, create the replica in clusterstate prior to creating the core.
comment|// Otherwise the core creation fails
if|if
condition|(
operator|!
name|isLegacyCloud
condition|)
block|{
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|position
operator|.
name|shard
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|coreName
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|baseUrl
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Need to create new params for each request
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|COLL_CONF
argument_list|,
name|configName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|COLLECTION
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|SHARD
argument_list|,
name|position
operator|.
name|shard
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
name|numSlices
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NEW_COLLECTION
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
block|{
name|String
name|coreAdminAsyncId
init|=
name|async
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|ASYNC
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
name|requestMap
operator|.
name|put
argument_list|(
name|nodeName
argument_list|,
name|coreAdminAsyncId
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|addPropertyParams
argument_list|(
name|message
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|ShardRequest
name|sreq
init|=
operator|new
name|ShardRequest
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|nodeName
operator|=
name|nodeName
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
name|ocmh
operator|.
name|adminPath
argument_list|)
expr_stmt|;
name|sreq
operator|.
name|purpose
operator|=
literal|1
expr_stmt|;
name|sreq
operator|.
name|shards
operator|=
operator|new
name|String
index|[]
block|{
name|baseUrl
block|}
expr_stmt|;
name|sreq
operator|.
name|actualShards
operator|=
name|sreq
operator|.
name|shards
expr_stmt|;
name|sreq
operator|.
name|params
operator|=
name|params
expr_stmt|;
if|if
condition|(
name|isLegacyCloud
condition|)
block|{
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|coresToCreate
operator|.
name|put
argument_list|(
name|coreName
argument_list|,
name|sreq
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isLegacyCloud
condition|)
block|{
comment|// wait for all replica entries to be created
name|Map
argument_list|<
name|String
argument_list|,
name|Replica
argument_list|>
name|replicas
init|=
name|ocmh
operator|.
name|waitToSeeReplicasInState
argument_list|(
name|collectionName
argument_list|,
name|coresToCreate
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|ShardRequest
argument_list|>
name|e
range|:
name|coresToCreate
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ShardRequest
name|sreq
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|sreq
operator|.
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE_NODE_NAME
argument_list|,
name|replicas
operator|.
name|get
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|shardHandler
operator|.
name|submit
argument_list|(
name|sreq
argument_list|,
name|sreq
operator|.
name|shards
index|[
literal|0
index|]
argument_list|,
name|sreq
operator|.
name|params
argument_list|)
expr_stmt|;
block|}
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|async
argument_list|,
name|requestMap
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|results
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|SimpleOrderedMap
operator|)
name|results
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|)
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Let's cleanup as we hit an exception
comment|// We shouldn't be passing 'results' here for the cleanup as the response would then contain 'success'
comment|// element, which may be interpreted by the user as a positive ack
name|ocmh
operator|.
name|cleanupCollection
argument_list|(
name|collectionName
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Cleaned up artifacts for failed create collection for [{}]"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Finished create command on all shards for collection: {}"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
DECL|method|getConfigName
name|String
name|getConfigName
parameter_list|(
name|String
name|coll
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|String
name|configName
init|=
name|message
operator|.
name|getStr
argument_list|(
name|COLL_CONF
argument_list|)
decl_stmt|;
if|if
condition|(
name|configName
operator|==
literal|null
condition|)
block|{
comment|// if there is only one conf, use that
name|List
argument_list|<
name|String
argument_list|>
name|configNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|configNames
operator|=
name|ocmh
operator|.
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|configNames
operator|!=
literal|null
operator|&&
name|configNames
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|configName
operator|=
name|configNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// no config set named, but there is only 1 - use it
name|log
operator|.
name|info
argument_list|(
literal|"Only one config set found in zk - using it:"
operator|+
name|configName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configNames
operator|.
name|contains
argument_list|(
name|coll
argument_list|)
condition|)
block|{
name|configName
operator|=
name|coll
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{        }
block|}
return|return
name|configName
return|;
block|}
block|}
end_class

end_unit

