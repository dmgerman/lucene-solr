begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ReplicaAssigner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CompositeIdRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|PlainIdRouter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|COLL_PROP_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionMessageHandler
operator|.
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|CREATESHARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|DELETESHARD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_class
DECL|class|SplitShardCmd
specifier|public
class|class
name|SplitShardCmd
implements|implements
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|SplitShardCmd
specifier|public
name|SplitShardCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|split
argument_list|(
name|state
argument_list|,
name|message
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
DECL|method|split
specifier|public
name|boolean
name|split
parameter_list|(
name|ClusterState
name|clusterState
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|String
name|slice
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Split shard invoked"
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|String
name|splitKey
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"split.key"
argument_list|)
decl_stmt|;
name|ShardHandler
name|shardHandler
init|=
name|ocmh
operator|.
name|shardHandlerFactory
operator|.
name|getShardHandler
argument_list|()
decl_stmt|;
name|DocCollection
name|collection
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|DocRouter
name|router
init|=
name|collection
operator|.
name|getRouter
argument_list|()
operator|!=
literal|null
condition|?
name|collection
operator|.
name|getRouter
argument_list|()
else|:
name|DocRouter
operator|.
name|DEFAULT
decl_stmt|;
name|Slice
name|parentSlice
decl_stmt|;
if|if
condition|(
name|slice
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|router
operator|instanceof
name|CompositeIdRouter
condition|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|searchSlices
init|=
name|router
operator|.
name|getSearchSlicesSingle
argument_list|(
name|splitKey
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|,
name|collection
argument_list|)
decl_stmt|;
if|if
condition|(
name|searchSlices
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Unable to find an active shard for split.key: "
operator|+
name|splitKey
argument_list|)
throw|;
block|}
if|if
condition|(
name|searchSlices
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Splitting a split.key: "
operator|+
name|splitKey
operator|+
literal|" which spans multiple shards is not supported"
argument_list|)
throw|;
block|}
name|parentSlice
operator|=
name|searchSlices
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|slice
operator|=
name|parentSlice
operator|.
name|getName
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Split by route.key: {}, parent shard is: {} "
argument_list|,
name|splitKey
argument_list|,
name|slice
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Split by route key can only be used with CompositeIdRouter or subclass. Found router: "
operator|+
name|router
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|parentSlice
operator|=
name|collection
operator|.
name|getSlice
argument_list|(
name|slice
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|parentSlice
operator|==
literal|null
condition|)
block|{
comment|// no chance of the collection being null because ClusterState#getCollection(String) would have thrown
comment|// an exception already
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No shard with the specified name exists: "
operator|+
name|slice
argument_list|)
throw|;
block|}
comment|// find the leader for the shard
name|Replica
name|parentShardLeader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentShardLeader
operator|=
name|zkStateReader
operator|.
name|getLeaderRetry
argument_list|(
name|collectionName
argument_list|,
name|slice
argument_list|,
literal|10000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|DocRouter
operator|.
name|Range
name|range
init|=
name|parentSlice
operator|.
name|getRange
argument_list|()
decl_stmt|;
if|if
condition|(
name|range
operator|==
literal|null
condition|)
block|{
name|range
operator|=
operator|new
name|PlainIdRouter
argument_list|()
operator|.
name|fullRange
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|subRanges
init|=
literal|null
decl_stmt|;
name|String
name|rangesStr
init|=
name|message
operator|.
name|getStr
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangesStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|ranges
init|=
name|rangesStr
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranges
operator|.
name|length
operator|==
literal|0
operator|||
name|ranges
operator|.
name|length
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"There must be at least two ranges specified to split a shard"
argument_list|)
throw|;
block|}
else|else
block|{
name|subRanges
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|ranges
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|r
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
try|try
block|{
name|subRanges
operator|.
name|add
argument_list|(
name|DocRouter
operator|.
name|DEFAULT
operator|.
name|fromString
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Exception in parsing hexadecimal hash range: "
operator|+
name|r
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|isSubsetOf
argument_list|(
name|range
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash range: "
operator|+
name|r
operator|+
literal|" is not a subset of parent shard's range: "
operator|+
name|range
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|DocRouter
operator|.
name|Range
argument_list|>
name|temp
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subRanges
argument_list|)
decl_stmt|;
comment|// copy to preserve original order
name|Collections
operator|.
name|sort
argument_list|(
name|temp
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|range
operator|.
name|equals
argument_list|(
operator|new
name|DocRouter
operator|.
name|Range
argument_list|(
name|temp
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|min
argument_list|,
name|temp
operator|.
name|get
argument_list|(
name|temp
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|max
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash ranges: "
operator|+
name|rangesStr
operator|+
literal|" do not cover the entire range of parent shard: "
operator|+
name|range
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|temp
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|temp
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|.
name|max
operator|+
literal|1
operator|!=
name|temp
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|min
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Specified hash ranges: "
operator|+
name|rangesStr
operator|+
literal|" either overlap with each other or "
operator|+
literal|"do not cover the entire range of parent shard: "
operator|+
name|range
argument_list|)
throw|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|splitKey
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|router
operator|instanceof
name|CompositeIdRouter
condition|)
block|{
name|CompositeIdRouter
name|compositeIdRouter
init|=
operator|(
name|CompositeIdRouter
operator|)
name|router
decl_stmt|;
name|subRanges
operator|=
name|compositeIdRouter
operator|.
name|partitionRangeByKey
argument_list|(
name|splitKey
argument_list|,
name|range
argument_list|)
expr_stmt|;
if|if
condition|(
name|subRanges
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The split.key: "
operator|+
name|splitKey
operator|+
literal|" has a hash range that is exactly equal to hash range of shard: "
operator|+
name|slice
argument_list|)
throw|;
block|}
for|for
control|(
name|DocRouter
operator|.
name|Range
name|subRange
range|:
name|subRanges
control|)
block|{
if|if
condition|(
name|subRange
operator|.
name|min
operator|==
name|subRange
operator|.
name|max
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"The split.key: "
operator|+
name|splitKey
operator|+
literal|" must be a compositeId"
argument_list|)
throw|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Partitioning parent shard "
operator|+
name|slice
operator|+
literal|" range: "
operator|+
name|parentSlice
operator|.
name|getRange
argument_list|()
operator|+
literal|" yields: "
operator|+
name|subRanges
argument_list|)
expr_stmt|;
name|rangesStr
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DocRouter
operator|.
name|Range
name|subRange
init|=
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|rangesStr
operator|+=
name|subRange
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
name|rangesStr
operator|+=
literal|','
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// todo: fixed to two partitions?
name|subRanges
operator|=
name|router
operator|.
name|partitionRange
argument_list|(
literal|2
argument_list|,
name|range
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|subSlices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subRanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|subShardNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|subRanges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|parentShardLeader
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subSlice
init|=
name|slice
operator|+
literal|"_"
operator|+
name|i
decl_stmt|;
name|subSlices
operator|.
name|add
argument_list|(
name|subSlice
argument_list|)
expr_stmt|;
name|String
name|subShardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|subSlice
operator|+
literal|"_replica1"
decl_stmt|;
name|subShardNames
operator|.
name|add
argument_list|(
name|subShardName
argument_list|)
expr_stmt|;
name|Slice
name|oSlice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
name|subSlice
argument_list|)
decl_stmt|;
if|if
condition|(
name|oSlice
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Slice
operator|.
name|State
name|state
init|=
name|oSlice
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Sub-shard: "
operator|+
name|subSlice
operator|+
literal|" exists in active state. Aborting split shard."
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|||
name|state
operator|==
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
condition|)
block|{
comment|// delete the shards
for|for
control|(
name|String
name|sub
range|:
name|subSlices
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Sub-shard: {} already exists therefore requesting its deletion"
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
literal|"deleteshard"
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|sub
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
try|try
block|{
name|ocmh
operator|.
name|commandMap
operator|.
name|get
argument_list|(
name|DELETESHARD
argument_list|)
operator|.
name|call
argument_list|(
name|clusterState
argument_list|,
name|m
argument_list|,
operator|new
name|NamedList
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Unable to delete already existing sub shard: "
operator|+
name|sub
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
specifier|final
name|String
name|asyncId
init|=
name|message
operator|.
name|getStr
argument_list|(
name|ASYNC
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|requestMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subRanges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subSlice
init|=
name|subSlices
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DocRouter
operator|.
name|Range
name|subRange
init|=
name|subRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating slice "
operator|+
name|subSlice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|CREATESHARD
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_RANGE_PROP
argument_list|,
name|subRange
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_STATE_PROP
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|SHARD_PARENT_PROP
argument_list|,
name|parentSlice
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until we are able to see the new shard in cluster state
name|ocmh
operator|.
name|waitForNewShard
argument_list|(
name|collectionName
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
comment|// refresh cluster state
name|clusterState
operator|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Adding replica "
operator|+
name|subShardName
operator|+
literal|" as part of slice "
operator|+
name|subSlice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|propMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|subSlice
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|nodeName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
comment|// copy over property params:
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to create subshard leaders"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subShardName
range|:
name|subShardNames
control|)
block|{
comment|// wait for parent leader to acknowledge the sub-shard core
name|log
operator|.
name|info
argument_list|(
literal|"Asking parent leader to wait for: "
operator|+
name|subShardName
operator|+
literal|" to be alive on: "
operator|+
name|nodeName
argument_list|)
expr_stmt|;
name|String
name|coreNodeName
init|=
name|ocmh
operator|.
name|waitForCoreNodeName
argument_list|(
name|collectionName
argument_list|,
name|nodeName
argument_list|,
name|subShardName
argument_list|)
decl_stmt|;
name|CoreAdminRequest
operator|.
name|WaitForState
name|cmd
init|=
operator|new
name|CoreAdminRequest
operator|.
name|WaitForState
argument_list|()
decl_stmt|;
name|cmd
operator|.
name|setCoreName
argument_list|(
name|subShardName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setNodeName
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCoreNodeName
argument_list|(
name|coreNodeName
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setState
argument_list|(
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setCheckLive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setOnlyIfLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|cmd
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|p
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD timed out waiting for subshard leaders to come up"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created all sub-shards for collection "
operator|+
name|collectionName
operator|+
literal|" parent shard: "
operator|+
name|slice
operator|+
literal|" on: "
operator|+
name|parentShardLeader
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Splitting shard "
operator|+
name|parentShardLeader
operator|.
name|getName
argument_list|()
operator|+
literal|" as part of slice "
operator|+
name|slice
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|parentShardLeader
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|SPLIT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|parentShardLeader
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subShardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|CoreAdminParams
operator|.
name|TARGET_CORE
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|RANGES
argument_list|,
name|rangesStr
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|parentShardLeader
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to invoke SPLIT core admin command"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Index on shard: "
operator|+
name|nodeName
operator|+
literal|" split into two successfully"
argument_list|)
expr_stmt|;
comment|// apply buffered updates on sub-shards
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subShardNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|subShardName
init|=
name|subShardNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Applying buffered updates on : "
operator|+
name|subShardName
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|subShardName
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|sendShardRequest
argument_list|(
name|nodeName
argument_list|,
name|params
argument_list|,
name|shardHandler
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed while asking sub shard leaders"
operator|+
literal|" to apply buffered updates"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully applied buffered updates on : "
operator|+
name|subShardNames
argument_list|)
expr_stmt|;
comment|// Replica creation for the new Slices
comment|// look at the replication factor and see if it matches reality
comment|// if it does not, find best nodes to create more cores
comment|// TODO: Have replication factor decided in some other way instead of numShards for the parent
name|int
name|repFactor
init|=
name|parentSlice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// we need to look at every node and see how many cores it serves
comment|// add our new cores to existing nodes serving the least number of cores
comment|// but (for now) require that each core goes on a distinct node.
comment|// TODO: add smarter options that look at the current number of cores per
comment|// node?
comment|// for now we just go random
name|Set
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|nodeList
operator|.
name|addAll
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
comment|// TODO: Have maxShardsPerNode param for this operation?
comment|// Remove the node that hosts the parent shard for replica creation.
name|nodeList
operator|.
name|remove
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
comment|// TODO: change this to handle sharding a slice into> 2 sub-shards.
name|Map
argument_list|<
name|ReplicaAssigner
operator|.
name|Position
argument_list|,
name|String
argument_list|>
name|nodeMap
init|=
name|ocmh
operator|.
name|identifyNodes
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|collection
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|,
name|subSlices
argument_list|,
name|repFactor
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
operator|(
name|repFactor
operator|-
literal|1
operator|)
operator|*
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReplicaAssigner
operator|.
name|Position
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|nodeMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|sliceName
init|=
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|shard
decl_stmt|;
name|String
name|subShardNodeName
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|shardName
init|=
name|collectionName
operator|+
literal|"_"
operator|+
name|sliceName
operator|+
literal|"_replica"
operator|+
operator|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|index
operator|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Creating replica shard "
operator|+
name|shardName
operator|+
literal|" as part of slice "
operator|+
name|sliceName
operator|+
literal|" of collection "
operator|+
name|collectionName
operator|+
literal|" on "
operator|+
name|subShardNodeName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|,
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
argument_list|,
name|sliceName
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|shardName
argument_list|,
name|ZkStateReader
operator|.
name|STATE_PROP
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|.
name|toString
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|,
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|subShardNodeName
argument_list|)
argument_list|,
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|subShardNodeName
argument_list|)
decl_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|props
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|ADDREPLICA
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|SHARD_ID_PROP
argument_list|,
name|sliceName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"node"
argument_list|,
name|subShardNodeName
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|shardName
argument_list|)
expr_stmt|;
comment|// copy over property params:
for|for
control|(
name|String
name|key
range|:
name|message
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|COLL_PROP_PREFIX
argument_list|)
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|message
operator|.
name|getStr
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// add async param
if|if
condition|(
name|asyncId
operator|!=
literal|null
condition|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|asyncId
argument_list|)
expr_stmt|;
block|}
comment|// special flag param to instruct addReplica not to create the replica in cluster state again
name|propMap
operator|.
name|put
argument_list|(
name|SKIP_CREATE_REPLICA_IN_CLUSTER_STATE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|replicas
operator|.
name|add
argument_list|(
name|propMap
argument_list|)
expr_stmt|;
block|}
comment|// we must set the slice state into recovery before actually creating the replica cores
comment|// this ensures that the logic inside Overseer to update sub-shard state to 'active'
comment|// always gets a chance to execute. See SOLR-7673
if|if
condition|(
name|repFactor
operator|==
literal|1
condition|)
block|{
comment|// switch sub shard states to 'active'
name|log
operator|.
name|info
argument_list|(
literal|"Replication factor is 1 so switching shard states"
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|slice
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|INACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subSlice
range|:
name|subSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subSlice
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Requesting shard state be set to 'recovery'"
argument_list|)
expr_stmt|;
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkStateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|subSlice
range|:
name|subSlices
control|)
block|{
name|propMap
operator|.
name|put
argument_list|(
name|subSlice
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|RECOVERY
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// now actually create replica cores on sub shard nodes
for|for
control|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|replica
range|:
name|replicas
control|)
block|{
name|ocmh
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|replica
argument_list|)
argument_list|,
name|results
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|ocmh
operator|.
name|processResponses
argument_list|(
name|results
argument_list|,
name|shardHandler
argument_list|,
literal|true
argument_list|,
literal|"SPLITSHARD failed to create subshard replicas"
argument_list|,
name|asyncId
argument_list|,
name|requestMap
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Successfully created all replica shards for all sub-slices "
operator|+
name|subSlices
argument_list|)
expr_stmt|;
name|ocmh
operator|.
name|commit
argument_list|(
name|results
argument_list|,
name|slice
argument_list|,
name|parentShardLeader
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error executing split operation for collection: "
operator|+
name|collectionName
operator|+
literal|" parent shard: "
operator|+
name|slice
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

