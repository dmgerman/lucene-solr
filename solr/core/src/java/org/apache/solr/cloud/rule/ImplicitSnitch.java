begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.rule
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|CoreAdminHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ImplicitSnitch
operator|.
name|CORES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ImplicitSnitch
operator|.
name|DISK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|rule
operator|.
name|ImplicitSnitch
operator|.
name|SYSPROP
import|;
end_import

begin_comment
comment|//this is the server-side component which provides the tag values
end_comment

begin_class
DECL|class|ImplicitSnitch
specifier|public
class|class
name|ImplicitSnitch
implements|implements
name|CoreAdminHandler
operator|.
name|Invocable
block|{
DECL|method|getUsableSpaceInGB
specifier|static
name|long
name|getUsableSpaceInGB
parameter_list|(
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|space
init|=
name|Files
operator|.
name|getFileStore
argument_list|(
name|path
argument_list|)
operator|.
name|getUsableSpace
argument_list|()
decl_stmt|;
name|long
name|spaceInGB
init|=
name|space
operator|/
literal|1024
operator|/
literal|1024
operator|/
literal|1024
decl_stmt|;
return|return
name|spaceInGB
return|;
block|}
annotation|@
name|Override
DECL|method|invoke
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|invoke
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|CoreContainer
name|cc
init|=
operator|(
name|CoreContainer
operator|)
name|req
operator|.
name|getContext
argument_list|()
operator|.
name|get
argument_list|(
name|CoreContainer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|CORES
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|1
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|CORES
argument_list|,
name|cc
operator|.
name|getLoadedCoreNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|DISK
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
literal|1
condition|)
block|{
try|try
block|{
specifier|final
name|long
name|spaceInGB
init|=
name|getUsableSpaceInGB
argument_list|(
name|cc
operator|.
name|getCoreRootDirectory
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|DISK
argument_list|,
name|spaceInGB
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{        }
block|}
name|String
index|[]
name|sysProps
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParams
argument_list|(
name|SYSPROP
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysProps
operator|!=
literal|null
operator|&&
name|sysProps
operator|.
name|length
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|String
name|prop
range|:
name|sysProps
control|)
name|result
operator|.
name|put
argument_list|(
name|SYSPROP
operator|+
name|prop
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
name|prop
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

