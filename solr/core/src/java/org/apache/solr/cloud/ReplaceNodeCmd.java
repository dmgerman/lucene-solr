begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|COLLECTION_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|SHARD_ID_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonAdminParams
operator|.
name|ASYNC
import|;
end_import

begin_class
DECL|class|ReplaceNodeCmd
specifier|public
class|class
name|ReplaceNodeCmd
implements|implements
name|OverseerCollectionMessageHandler
operator|.
name|Cmd
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|ocmh
specifier|private
specifier|final
name|OverseerCollectionMessageHandler
name|ocmh
decl_stmt|;
DECL|method|ReplaceNodeCmd
specifier|public
name|ReplaceNodeCmd
parameter_list|(
name|OverseerCollectionMessageHandler
name|ocmh
parameter_list|)
block|{
name|this
operator|.
name|ocmh
operator|=
name|ocmh
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|call
specifier|public
name|void
name|call
parameter_list|(
name|ClusterState
name|state
parameter_list|,
name|ZkNodeProps
name|message
parameter_list|,
name|NamedList
name|results
parameter_list|)
throws|throws
name|Exception
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|ocmh
operator|.
name|zkStateReader
decl_stmt|;
name|ocmh
operator|.
name|checkRequired
argument_list|(
name|message
argument_list|,
literal|"source"
argument_list|,
literal|"target"
argument_list|)
expr_stmt|;
name|String
name|source
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
name|String
name|target
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"target"
argument_list|)
decl_stmt|;
name|String
name|async
init|=
name|message
operator|.
name|getStr
argument_list|(
literal|"async"
argument_list|)
decl_stmt|;
name|boolean
name|parallel
init|=
name|message
operator|.
name|getBool
argument_list|(
literal|"parallel"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|source
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Source Node: "
operator|+
name|source
operator|+
literal|" is not live"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|clusterState
operator|.
name|liveNodesContain
argument_list|(
name|target
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Target Node: "
operator|+
name|target
operator|+
literal|" is not live"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|sourceReplicas
init|=
name|getReplicasOfNode
argument_list|(
name|source
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|createdReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|anyOneFailed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|CountDownLatch
name|countDownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|sourceReplicas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZkNodeProps
name|sourceReplica
range|:
name|sourceReplicas
control|)
block|{
name|NamedList
name|nl
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Going to create replica for collection={} shard={} on node={}"
argument_list|,
name|sourceReplica
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|sourceReplica
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|msg
init|=
name|sourceReplica
operator|.
name|plus
argument_list|(
literal|"parallel"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|parallel
argument_list|)
argument_list|)
operator|.
name|plus
argument_list|(
name|CoreAdminParams
operator|.
name|NODE
argument_list|,
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|async
operator|!=
literal|null
condition|)
name|msg
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|ASYNC
argument_list|,
name|async
argument_list|)
expr_stmt|;
specifier|final
name|ZkNodeProps
name|addedReplica
init|=
name|ocmh
operator|.
name|addReplica
argument_list|(
name|clusterState
argument_list|,
name|msg
argument_list|,
name|nl
argument_list|,
parameter_list|()
lambda|->
block|{
name|countDownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|nl
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|errorString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Failed to create replica for collection=%s shard=%s"
operator|+
literal|" on node=%s"
argument_list|,
name|sourceReplica
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|sourceReplica
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|log
operator|.
name|warn
argument_list|(
name|errorString
argument_list|)
expr_stmt|;
comment|// one replica creation failed. Make the best attempt to
comment|// delete all the replicas created so far in the target
comment|// and exit
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
name|errorString
argument_list|)
expr_stmt|;
name|anyOneFailed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Successfully created replica for collection={} shard={} on node={}"
argument_list|,
name|sourceReplica
operator|.
name|getStr
argument_list|(
name|COLLECTION_PROP
argument_list|)
argument_list|,
name|sourceReplica
operator|.
name|getStr
argument_list|(
name|SHARD_ID_PROP
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|addedReplica
operator|!=
literal|null
condition|)
block|{
name|createdReplicas
operator|.
name|add
argument_list|(
name|addedReplica
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|debug
argument_list|(
literal|"Waiting for replace node action to complete"
argument_list|)
expr_stmt|;
name|countDownLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"Finished waiting for replace node action to complete"
argument_list|)
expr_stmt|;
if|if
condition|(
name|anyOneFailed
operator|.
name|get
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Failed to create some replicas. Cleaning up all replicas on target node"
argument_list|)
expr_stmt|;
name|CountDownLatch
name|cleanupLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|createdReplicas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ZkNodeProps
name|createdReplica
range|:
name|createdReplicas
control|)
block|{
name|NamedList
name|deleteResult
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
try|try
block|{
name|ocmh
operator|.
name|deleteReplica
argument_list|(
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
argument_list|,
name|createdReplica
operator|.
name|plus
argument_list|(
literal|"parallel"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|deleteResult
argument_list|,
parameter_list|()
lambda|->
block|{
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
operator|!=
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|results
init|)
block|{
name|results
operator|.
name|add
argument_list|(
literal|"failure"
argument_list|,
literal|"Could not cleanup, because of : "
operator|+
name|deleteResult
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
name|e
parameter_list|)
block|{
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Error deleting replica "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error deleting replica "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|cleanupLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|cleanupLatch
operator|.
name|await
argument_list|(
literal|5
argument_list|,
name|TimeUnit
operator|.
name|MINUTES
argument_list|)
expr_stmt|;
block|}
comment|// we have reached this far means all replicas could be recreated
comment|//now cleanup the replicas in the source node
name|DeleteNodeCmd
operator|.
name|cleanupReplicas
argument_list|(
name|results
argument_list|,
name|state
argument_list|,
name|sourceReplicas
argument_list|,
name|ocmh
argument_list|,
name|source
argument_list|,
name|async
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
literal|"success"
argument_list|,
literal|"REPLACENODE action completed successfully from  : "
operator|+
name|source
operator|+
literal|" to : "
operator|+
name|target
argument_list|)
expr_stmt|;
block|}
DECL|method|getReplicasOfNode
specifier|static
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|getReplicasOfNode
parameter_list|(
name|String
name|source
parameter_list|,
name|ClusterState
name|state
parameter_list|)
block|{
name|List
argument_list|<
name|ZkNodeProps
argument_list|>
name|sourceReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|e
range|:
name|state
operator|.
name|getCollectionsMap
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|source
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|COLLECTION_PROP
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|SHARD_ID_PROP
argument_list|,
name|slice
operator|.
name|getName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|,
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|ZkStateReader
operator|.
name|REPLICA_PROP
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|NODE
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|sourceReplicas
operator|.
name|add
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|sourceReplicas
return|;
block|}
block|}
end_class

end_unit

