begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|TestRandomFaceting
specifier|public
class|class
name|TestRandomFaceting
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|trieFields
specifier|private
specifier|static
specifier|final
name|Pattern
name|trieFields
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*_t."
argument_list|)
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|FOO_STRING_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|FOO_STRING_FIELD
init|=
literal|"foo_s1"
decl_stmt|;
DECL|field|SMALL_STRING_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|SMALL_STRING_FIELD
init|=
literal|"small_s1"
decl_stmt|;
DECL|field|SMALL_INT_FIELD
specifier|public
specifier|static
specifier|final
name|String
name|SMALL_INT_FIELD
init|=
literal|"small_i"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// schema12 doesn't support _version_
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
block|}
DECL|field|indexSize
name|int
name|indexSize
decl_stmt|;
DECL|field|types
name|List
argument_list|<
name|FldType
argument_list|>
name|types
decl_stmt|;
DECL|field|model
name|Map
argument_list|<
name|Comparable
argument_list|,
name|Doc
argument_list|>
name|model
init|=
literal|null
decl_stmt|;
DECL|field|validateResponses
name|boolean
name|validateResponses
init|=
literal|true
decl_stmt|;
DECL|method|init
name|void
name|init
parameter_list|()
block|{
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|model
operator|=
literal|null
expr_stmt|;
name|indexSize
operator|=
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
operator|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|1
operator|)
else|:
operator|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|+
literal|10
operator|)
expr_stmt|;
name|types
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"id"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"score_f"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|FVal
argument_list|(
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small_f"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|FVal
argument_list|(
operator|-
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small_d"
argument_list|,
name|ONE_ONE
argument_list|,
operator|new
name|FVal
argument_list|(
operator|-
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"foo_i"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
operator|-
literal|2
argument_list|,
name|indexSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"rare_s1"
argument_list|,
operator|new
name|IValsPercent
argument_list|(
literal|95
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"str_s1"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"long_s1"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small_s1"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
call|(
name|char
call|)
argument_list|(
literal|'c'
operator|+
name|indexSize
operator|/
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small2_s1"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
call|(
name|char
call|)
argument_list|(
literal|'c'
operator|+
name|indexSize
operator|/
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small2_ss"
argument_list|,
name|ZERO_TWO
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
call|(
name|char
call|)
argument_list|(
literal|'c'
operator|+
name|indexSize
operator|/
literal|3
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small3_ss"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|25
argument_list|)
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'A'
argument_list|,
literal|'z'
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small_i"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
operator|-
literal|2
argument_list|,
literal|5
operator|+
name|indexSize
operator|/
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small2_i"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
operator|-
literal|1
argument_list|,
literal|5
operator|+
name|indexSize
operator|/
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small2_is"
argument_list|,
name|ZERO_TWO
argument_list|,
operator|new
name|IRange
argument_list|(
operator|-
literal|2
argument_list|,
literal|5
operator|+
name|indexSize
operator|/
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small3_is"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|25
argument_list|)
argument_list|,
operator|new
name|IRange
argument_list|(
operator|-
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"missing_i"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"missing_is"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"missing_s1"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"missing_ss"
argument_list|,
operator|new
name|IRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|new
name|SVal
argument_list|(
literal|'a'
argument_list|,
literal|'b'
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: doubles, multi-floats, ints with precisionStep>0, booleans
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"small_tf"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|FVal
argument_list|(
operator|-
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|trieFields
operator|.
name|matcher
argument_list|(
literal|"small_tf"
argument_list|)
operator|.
name|matches
argument_list|()
assert|;
assert|assert
operator|!
name|trieFields
operator|.
name|matcher
argument_list|(
literal|"small_f"
argument_list|)
operator|.
name|matches
argument_list|()
assert|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"foo_ti"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|IRange
argument_list|(
operator|-
literal|2
argument_list|,
name|indexSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|trieFields
operator|.
name|matcher
argument_list|(
literal|"foo_ti"
argument_list|)
operator|.
name|matches
argument_list|()
assert|;
assert|assert
operator|!
name|trieFields
operator|.
name|matcher
argument_list|(
literal|"foo_i"
argument_list|)
operator|.
name|matches
argument_list|()
assert|;
name|types
operator|.
name|add
argument_list|(
operator|new
name|FldType
argument_list|(
literal|"bool_b"
argument_list|,
name|ZERO_ONE
argument_list|,
operator|new
name|Vals
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Comparable
name|get
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addMoreDocs
name|void
name|addMoreDocs
parameter_list|(
name|int
name|ndocs
parameter_list|)
throws|throws
name|Exception
block|{
name|model
operator|=
name|indexDocs
argument_list|(
name|types
argument_list|,
name|model
argument_list|,
name|ndocs
argument_list|)
expr_stmt|;
block|}
DECL|method|deleteSomeDocs
name|void
name|deleteSomeDocs
parameter_list|()
block|{
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|percent
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
operator|==
literal|null
condition|)
return|return;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|model
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Comparable
name|id
range|:
name|model
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percent
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"id:("
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|id
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|model
operator|.
name|remove
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|optimize
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertU
argument_list|(
name|commit
argument_list|(
literal|"softCommit"
argument_list|,
literal|""
operator|+
operator|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|!=
literal|0
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomFaceting
specifier|public
name|void
name|testRandomFaceting
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
name|int
name|iter
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|init
argument_list|()
expr_stmt|;
name|addMoreDocs
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
name|i
operator|++
control|)
block|{
name|doFacetTests
argument_list|()
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|5
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
name|addMoreDocs
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|50
condition|)
block|{
name|deleteSomeDocs
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|doFacetTests
name|void
name|doFacetTests
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|FldType
name|ftype
range|:
name|types
control|)
block|{
name|doFacetTests
argument_list|(
name|ftype
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|multiValuedMethods
name|List
argument_list|<
name|String
argument_list|>
name|multiValuedMethods
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"enum"
block|,
literal|"fc"
block|,
literal|null
block|}
argument_list|)
decl_stmt|;
DECL|field|singleValuedMethods
name|List
argument_list|<
name|String
argument_list|>
name|singleValuedMethods
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"enum"
block|,
literal|"fc"
block|,
literal|"fcs"
block|,
literal|null
block|}
argument_list|)
decl_stmt|;
DECL|method|doFacetTests
name|void
name|doFacetTests
parameter_list|(
name|FldType
name|ftype
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
try|try
block|{
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
name|params
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
comment|// TODO: select subsets
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|SchemaField
name|sf
init|=
name|req
operator|.
name|getSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|ftype
operator|.
name|fname
argument_list|)
decl_stmt|;
name|boolean
name|multiValued
init|=
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|multiValuedFieldCache
argument_list|()
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|offset
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|*
literal|2
argument_list|)
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|/
literal|3
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"facet.offset"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|limit
init|=
literal|100
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|limit
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|/
literal|2
operator|+
literal|1
argument_list|)
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"facet.limit"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.sort"
argument_list|,
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"index"
else|:
literal|"count"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|ftype
operator|.
name|vals
operator|instanceof
name|SVal
operator|)
operator|&&
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
comment|// validate = false;
name|String
name|prefix
init|=
name|ftype
operator|.
name|createValue
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|5
condition|)
name|prefix
operator|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|rand
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|)
name|prefix
operator|=
name|Character
operator|.
name|toString
argument_list|(
operator|(
name|char
operator|)
name|rand
operator|.
name|nextInt
argument_list|(
literal|256
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|prefix
operator|=
name|prefix
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|rand
operator|.
name|nextInt
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.prefix"
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.mincount"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.enum.cache.minDf"
argument_list|,
literal|""
operator|+
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: randomly add other facet params
name|String
name|key
init|=
name|ftype
operator|.
name|fname
decl_stmt|;
name|String
name|facet_field
init|=
name|ftype
operator|.
name|fname
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|key
operator|=
literal|"alternate_key"
expr_stmt|;
name|facet_field
operator|=
literal|"{!key="
operator|+
name|key
operator|+
literal|"}"
operator|+
name|ftype
operator|.
name|fname
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"facet.field"
argument_list|,
name|facet_field
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|methods
init|=
name|multiValued
condition|?
name|multiValuedMethods
else|:
name|singleValuedMethods
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|responses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|methods
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|method
range|:
name|methods
control|)
block|{
for|for
control|(
name|boolean
name|exists
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
comment|// params.add("facet.field", "{!key="+method+"}" + ftype.fname);
comment|// TODO: allow method to be passed on local params?
if|if
condition|(
name|method
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"facet.method"
argument_list|,
name|method
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.method"
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"facet.exists"
argument_list|,
literal|""
operator|+
name|exists
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exists
operator|&&
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.exists"
argument_list|)
expr_stmt|;
block|}
comment|// if (random().nextBoolean()) params.set("facet.mincount", "1");  // uncomment to test that validation fails
if|if
condition|(
name|params
operator|.
name|getInt
argument_list|(
literal|"facet.limit"
argument_list|,
literal|100
argument_list|)
operator|!=
literal|0
condition|)
block|{
comment|// it bypasses all processing, and we can go to empty validation
if|if
condition|(
name|exists
operator|&&
name|params
operator|.
name|getInt
argument_list|(
literal|"facet.mincount"
argument_list|,
literal|0
argument_list|)
operator|>
literal|1
condition|)
block|{
name|assertQEx
argument_list|(
literal|"no mincount on facet.exists"
argument_list|,
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"facet.exists"
else|:
literal|"facet.mincount"
argument_list|,
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// facet.exists can't be combined with non-enum nor with enum requested for tries, because it will be flipped to FC/FCS
specifier|final
name|boolean
name|notEnum
init|=
name|method
operator|!=
literal|null
operator|&&
operator|!
name|method
operator|.
name|equals
argument_list|(
literal|"enum"
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|trieField
init|=
name|trieFields
operator|.
name|matcher
argument_list|(
name|ftype
operator|.
name|fname
argument_list|)
operator|.
name|matches
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|notEnum
operator|||
name|trieField
operator|)
operator|&&
name|exists
condition|)
block|{
name|assertQEx
argument_list|(
literal|"facet.exists only when enum or ommitted"
argument_list|,
literal|"facet.exists"
argument_list|,
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|exists
operator|&&
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|isPointField
argument_list|()
condition|)
block|{
comment|// PointFields don't yet support "enum" method or the "facet.exists" parameter
name|assertQEx
argument_list|(
literal|"Expecting failure, since "
argument_list|,
literal|"facet.exists=true is requested, but facet.method=enum can't be used with "
operator|+
name|sf
operator|.
name|getName
argument_list|()
argument_list|,
name|req
argument_list|(
name|params
argument_list|)
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|String
name|strResponse
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
name|params
argument_list|)
argument_list|)
decl_stmt|;
name|responses
operator|.
name|add
argument_list|(
name|strResponse
argument_list|)
expr_stmt|;
if|if
condition|(
name|responses
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|validateResponse
argument_list|(
name|responses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|strResponse
argument_list|,
name|params
argument_list|,
name|method
argument_list|,
name|methods
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**       String strResponse = h.query(req(params));       Object realResponse = ObjectBuilder.fromJSON(strResponse);       **/
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|validateResponse
specifier|private
name|void
name|validateResponse
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|actual
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|String
name|method
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|methods
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
literal|"facet.exists"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
if|if
condition|(
name|isSortByCount
argument_list|(
name|params
argument_list|)
condition|)
block|{
comment|// it's challenged with facet.sort=count
name|expected
operator|=
name|getExpectationForSortByCount
argument_list|(
name|params
argument_list|,
name|methods
argument_list|)
expr_stmt|;
comment|// that requires to recalculate expactation
block|}
else|else
block|{
comment|// facet.sort=index
name|expected
operator|=
name|capFacetCountsTo1
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|err
init|=
name|JSONTestUtil
operator|.
name|match
argument_list|(
literal|"/"
argument_list|,
name|actual
argument_list|,
name|expected
argument_list|,
literal|0.0
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"ERROR: mismatch facet response: "
operator|+
name|err
operator|+
literal|"\n expected ="
operator|+
name|expected
operator|+
literal|"\n response = "
operator|+
name|actual
operator|+
literal|"\n request = "
operator|+
name|params
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|err
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** if facet.exists=true with facet.sort=counts,    * it should return all values with 1 hits ordered by label index    * then all vals with 0 , and then missing count with null label,    * in the implementation below they are called three stratas     * */
DECL|method|getExpectationForSortByCount
specifier|private
name|String
name|getExpectationForSortByCount
parameter_list|(
name|ModifiableSolrParams
name|params
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|methods
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|indexSortedResponse
init|=
name|getIndexSortedAllFacetValues
argument_list|(
name|params
argument_list|,
name|methods
argument_list|)
decl_stmt|;
return|return
name|transformFacetFields
argument_list|(
name|indexSortedResponse
argument_list|,
name|e
lambda|->
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|facetSortedByIndex
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
name|stratas
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|List
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
comment|// poor man multimap, I won't do that anymore, I swear.
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|put
argument_list|(
operator|(
name|Integer
operator|)
name|key
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|facetSortedByIndex
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|label
init|=
operator|(
name|Object
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Integer
name|strata
decl_stmt|;
if|if
condition|(
name|label
operator|==
literal|null
condition|)
block|{
comment|// missing (here "stratas" seems like overengineering )
name|strata
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|count
operator|=
literal|1L
expr_stmt|;
comment|// capping here
name|strata
operator|=
literal|1
expr_stmt|;
comment|// non-zero count become zero
block|}
else|else
block|{
name|strata
operator|=
literal|0
expr_stmt|;
comment|// zero-count
block|}
block|}
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|facet
init|=
name|stratas
operator|.
name|get
argument_list|(
name|strata
argument_list|)
decl_stmt|;
name|facet
operator|.
name|add
argument_list|(
name|label
argument_list|)
expr_stmt|;
name|facet
operator|.
name|add
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
name|List
name|stratified
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Integer
name|s
range|:
operator|new
name|Integer
index|[]
block|{
literal|1
operator|,
literal|0
block|}
control|)
block|{
comment|// non-zero capped to one goes first, zeroes go then
name|stratified
operator|.
name|addAll
argument_list|(
name|stratas
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// cropping them now
name|int
name|offset
init|=
name|params
operator|.
name|getInt
argument_list|(
literal|"facet.offset"
argument_list|,
literal|0
argument_list|)
operator|*
literal|2
decl_stmt|;
name|int
name|end
init|=
name|offset
operator|+
name|params
operator|.
name|getInt
argument_list|(
literal|"facet.limit"
argument_list|,
literal|100
argument_list|)
operator|*
literal|2
decl_stmt|;
name|int
name|fromIndex
init|=
name|offset
operator|>
name|stratified
operator|.
name|size
argument_list|()
condition|?
name|stratified
operator|.
name|size
argument_list|()
else|:
name|offset
decl_stmt|;
name|stratified
operator|=
name|stratified
operator|.
name|subList
argument_list|(
name|fromIndex
argument_list|,
name|end
operator|>
name|stratified
operator|.
name|size
argument_list|()
condition|?
name|stratified
operator|.
name|size
argument_list|()
else|:
name|end
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|getInt
argument_list|(
literal|"facet.limit"
argument_list|,
literal|100
argument_list|)
operator|>
literal|0
condition|)
block|{
comment|/// limit=0 omits even miss count
name|stratified
operator|.
name|addAll
argument_list|(
name|stratas
operator|.
name|get
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|facetSortedByIndex
operator|.
name|clear
argument_list|()
expr_stmt|;
name|facetSortedByIndex
operator|.
name|addAll
argument_list|(
name|stratified
argument_list|)
expr_stmt|;
block|}
argument_list|)
return|;
block|}
DECL|method|getIndexSortedAllFacetValues
specifier|private
name|String
name|getIndexSortedAllFacetValues
parameter_list|(
name|ModifiableSolrParams
name|in
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|methods
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
expr_stmt|;
name|String
name|goodOldMethod
init|=
name|methods
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|methods
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"facet.method"
argument_list|,
name|goodOldMethod
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"facet.exists"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.exists"
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|set
argument_list|(
literal|"facet.limit"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"facet.offset"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|String
name|query
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
literal|null
decl_stmt|;
try|try
block|{
name|req
operator|=
name|req
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|query
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|query
return|;
block|}
DECL|method|isSortByCount
specifier|private
name|boolean
name|isSortByCount
parameter_list|(
name|ModifiableSolrParams
name|in
parameter_list|)
block|{
name|boolean
name|sortIsCount
decl_stmt|;
name|String
name|sortParam
init|=
name|in
operator|.
name|get
argument_list|(
literal|"facet.sort"
argument_list|)
decl_stmt|;
name|sortIsCount
operator|=
literal|"count"
operator|.
name|equals
argument_list|(
name|sortParam
argument_list|)
operator|||
operator|(
name|sortParam
operator|==
literal|null
operator|&&
name|in
operator|.
name|getInt
argument_list|(
literal|"facet.limit"
argument_list|,
literal|100
argument_list|)
operator|>
literal|0
operator|)
expr_stmt|;
return|return
name|sortIsCount
return|;
block|}
comment|/*    * {   "response":{"numFound":6,"start":0,"docs":[]   },   "facet_counts":{     "facet_queries":{},     "facet_fields":{       "foo_i":[         "6",2,         "2",1,         "3",1]},     "facet_ranges":{},     "facet_intervals":{},     "facet_heatmaps":{}}}     * */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|capFacetCountsTo1
specifier|private
name|String
name|capFacetCountsTo1
parameter_list|(
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|transformFacetFields
argument_list|(
name|expected
argument_list|,
name|e
lambda|->
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|facetValues
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
name|ListIterator
name|iterator
init|=
name|facetValues
operator|.
name|listIterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Object
name|value
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Long
name|count
init|=
operator|(
name|Long
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|count
operator|>
literal|1
condition|)
block|{
name|iterator
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
DECL|method|transformFacetFields
specifier|private
name|String
name|transformFacetFields
parameter_list|(
name|String
name|expected
parameter_list|,
name|Consumer
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|>
name|consumer
parameter_list|)
throws|throws
name|IOException
block|{
name|Object
name|json
init|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|Map
name|facet_fields
init|=
name|getFacetFieldMap
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|Set
name|entries
init|=
name|facet_fields
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|facetTuples
range|:
name|entries
control|)
block|{
comment|//despite there should be only one field
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|facetTuples
decl_stmt|;
name|consumer
operator|.
name|accept
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|JSONUtil
operator|.
name|toJSON
argument_list|(
name|json
argument_list|)
return|;
block|}
DECL|method|getFacetFieldMap
specifier|private
name|Map
name|getFacetFieldMap
parameter_list|(
name|Object
name|json
parameter_list|)
block|{
name|Object
name|facet_counts
init|=
operator|(
operator|(
name|Map
operator|)
name|json
operator|)
operator|.
name|get
argument_list|(
literal|"facet_counts"
argument_list|)
decl_stmt|;
name|Map
name|facet_fields
init|=
call|(
name|Map
call|)
argument_list|(
operator|(
name|Map
operator|)
name|facet_counts
argument_list|)
operator|.
name|get
argument_list|(
literal|"facet_fields"
argument_list|)
decl_stmt|;
return|return
name|facet_fields
return|;
block|}
block|}
end_class

end_unit

