begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
operator|.
name|MockMetricReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SolrCoreMetricManagerTest
specifier|public
class|class
name|SolrCoreMetricManagerTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|MAX_ITERATIONS
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ITERATIONS
init|=
literal|100
decl_stmt|;
DECL|field|coreMetricManager
specifier|private
name|SolrCoreMetricManager
name|coreMetricManager
decl_stmt|;
DECL|field|metricManager
specifier|private
name|SolrMetricManager
name|metricManager
decl_stmt|;
annotation|@
name|Before
DECL|method|beforeTest
specifier|public
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|coreMetricManager
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreMetricManager
argument_list|()
expr_stmt|;
name|metricManager
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMetricManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|afterTest
specifier|public
name|void
name|afterTest
parameter_list|()
throws|throws
name|IOException
block|{
name|coreMetricManager
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|metricManager
operator|.
name|getReporters
argument_list|(
name|coreMetricManager
operator|.
name|getRegistryName
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|deleteCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegisterMetrics
specifier|public
name|void
name|testRegisterMetrics
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|String
name|scope
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomScope
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|SolrInfoMBean
operator|.
name|Category
name|category
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomCategory
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|metrics
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomMetrics
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|SolrMetricProducer
name|producer
init|=
name|SolrMetricTestUtils
operator|.
name|getProducerOf
argument_list|(
name|metricManager
argument_list|,
name|category
argument_list|,
name|scope
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
try|try
block|{
name|coreMetricManager
operator|.
name|registerMetricProducer
argument_list|(
name|scope
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|scope
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|category
argument_list|)
expr_stmt|;
name|assertRegistered
argument_list|(
name|scope
argument_list|,
name|metrics
argument_list|,
name|coreMetricManager
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"expected at least one null but got: scope="
operator|+
name|scope
operator|+
literal|", category="
operator|+
name|category
argument_list|,
operator|(
name|scope
operator|==
literal|null
operator|||
name|category
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertRegistered
argument_list|(
name|scope
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
name|coreMetricManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRegisterMetricsWithReplacements
specifier|public
name|void
name|testRegisterMetricsWithReplacements
parameter_list|()
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|registered
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|String
name|scope
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomScope
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SolrInfoMBean
operator|.
name|Category
name|category
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomCategory
argument_list|(
name|random
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|iterations
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|0
argument_list|,
name|MAX_ITERATIONS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|metrics
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomMetricsWithReplacements
argument_list|(
name|random
argument_list|,
name|registered
argument_list|)
decl_stmt|;
if|if
condition|(
name|metrics
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|SolrMetricProducer
name|producer
init|=
name|SolrMetricTestUtils
operator|.
name|getProducerOf
argument_list|(
name|metricManager
argument_list|,
name|category
argument_list|,
name|scope
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|coreMetricManager
operator|.
name|registerMetricProducer
argument_list|(
name|scope
argument_list|,
name|producer
argument_list|)
expr_stmt|;
name|registered
operator|.
name|putAll
argument_list|(
name|metrics
argument_list|)
expr_stmt|;
name|assertRegistered
argument_list|(
name|scope
argument_list|,
name|registered
argument_list|,
name|coreMetricManager
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLoadReporter
specifier|public
name|void
name|testLoadReporter
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|MockMetricReporter
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|reporterName
init|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
name|reporterName
argument_list|)
expr_stmt|;
name|boolean
name|shouldDefineConfigurable
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|configurable
init|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
decl_stmt|;
if|if
condition|(
name|shouldDefineConfigurable
condition|)
name|attrs
operator|.
name|put
argument_list|(
literal|"configurable"
argument_list|,
name|configurable
argument_list|)
expr_stmt|;
name|boolean
name|shouldDefinePlugin
init|=
name|random
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|PluginInfo
name|pluginInfo
init|=
name|shouldDefinePlugin
condition|?
operator|new
name|PluginInfo
argument_list|(
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|)
argument_list|,
name|attrs
argument_list|)
else|:
literal|null
decl_stmt|;
try|try
block|{
name|metricManager
operator|.
name|loadReporter
argument_list|(
name|coreMetricManager
operator|.
name|getRegistryName
argument_list|()
argument_list|,
name|coreMetricManager
operator|.
name|getCore
argument_list|()
operator|.
name|getResourceLoader
argument_list|()
argument_list|,
name|pluginInfo
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|pluginInfo
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SolrMetricReporter
argument_list|>
name|reporters
init|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|coreMetricManager
operator|.
name|getRegistryName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"reporters.size should be> 0, but was + "
operator|+
name|reporters
operator|.
name|size
argument_list|()
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"reporter "
operator|+
name|reporterName
operator|+
literal|" not present among "
operator|+
name|reporters
argument_list|,
name|reporters
operator|.
name|get
argument_list|(
name|reporterName
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"wrong reporter class: "
operator|+
name|reporters
operator|.
name|get
argument_list|(
name|reporterName
argument_list|)
argument_list|,
name|reporters
operator|.
name|get
argument_list|(
name|reporterName
argument_list|)
operator|instanceof
name|MockMetricReporter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|pluginInfo
operator|==
literal|null
operator|||
name|attrs
operator|.
name|get
argument_list|(
literal|"configurable"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|metricManager
operator|.
name|getReporters
argument_list|(
name|coreMetricManager
operator|.
name|getRegistryName
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|reporterName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertRegistered
specifier|private
name|void
name|assertRegistered
parameter_list|(
name|String
name|scope
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|newMetrics
parameter_list|,
name|SolrCoreMetricManager
name|coreMetricManager
parameter_list|)
block|{
if|if
condition|(
name|scope
operator|==
literal|null
operator|||
name|newMetrics
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|filter
init|=
literal|"."
operator|+
name|scope
operator|+
literal|"."
decl_stmt|;
name|MetricRegistry
name|registry
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|coreMetricManager
operator|.
name|getRegistryName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newMetrics
operator|.
name|size
argument_list|()
argument_list|,
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|keySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|registeredMetrics
init|=
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
name|filter
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|entry
range|:
name|registeredMetrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Metric
name|expectedMetric
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Metric
name|actualMetric
init|=
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|actualMetric
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedMetric
argument_list|,
name|actualMetric
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRegistryName
specifier|public
name|void
name|testRegistryName
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"my_collection_"
decl_stmt|;
name|String
name|cloudCoreName
init|=
literal|"my_collection__shard1_0_replica0"
decl_stmt|;
name|String
name|simpleCoreName
init|=
literal|"collection_1_replica0"
decl_stmt|;
name|String
name|simpleRegistryName
init|=
literal|"solr.core."
operator|+
name|simpleCoreName
decl_stmt|;
name|String
name|cloudRegistryName
init|=
literal|"solr.core."
operator|+
name|cloudCoreName
decl_stmt|;
name|String
name|nestedRegistryName
init|=
literal|"solr.core.my_collection_.shard1_0.replica0"
decl_stmt|;
comment|// pass through
name|assertEquals
argument_list|(
name|cloudRegistryName
argument_list|,
name|coreMetricManager
operator|.
name|createRegistryName
argument_list|(
literal|null
argument_list|,
name|cloudCoreName
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|simpleRegistryName
argument_list|,
name|coreMetricManager
operator|.
name|createRegistryName
argument_list|(
literal|null
argument_list|,
name|simpleCoreName
argument_list|)
argument_list|)
expr_stmt|;
comment|// unknown naming scheme -> pass through
name|assertEquals
argument_list|(
name|simpleRegistryName
argument_list|,
name|coreMetricManager
operator|.
name|createRegistryName
argument_list|(
name|collectionName
argument_list|,
name|simpleCoreName
argument_list|)
argument_list|)
expr_stmt|;
comment|// cloud collection
name|assertEquals
argument_list|(
name|nestedRegistryName
argument_list|,
name|coreMetricManager
operator|.
name|createRegistryName
argument_list|(
name|collectionName
argument_list|,
name|cloudCoreName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

