begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics.reporters.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|AggregateMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrCoreMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
DECL|class|SolrShardReporterTest
specifier|public
class|class
name|SolrShardReporterTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|SolrShardReporterTest
specifier|public
name|SolrShardReporterTest
parameter_list|()
block|{
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
comment|// we need a string id
block|}
annotation|@
name|Override
DECL|method|getSolrXml
specifier|public
name|String
name|getSolrXml
parameter_list|()
block|{
return|return
literal|"solr-solrreporter.xml"
return|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForRecoveriesToFinish
argument_list|(
literal|"control_collection"
argument_list|,
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|"collection1"
argument_list|,
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printLayout
argument_list|()
expr_stmt|;
comment|// wait for at least two reports
name|Thread
operator|.
name|sleep
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|ClusterState
name|state
init|=
name|jettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getZkController
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|jettys
control|)
block|{
name|CoreContainer
name|cc
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|SolrMetricManager
name|metricManager
init|=
name|cc
operator|.
name|getMetricManager
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|coreName
range|:
name|cc
operator|.
name|getCoreNames
argument_list|()
control|)
block|{
name|CoreDescriptor
name|cd
init|=
name|cc
operator|.
name|getCoreDescriptor
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// not a cloud collection
continue|continue;
block|}
name|CloudDescriptor
name|cloudDesc
init|=
name|cd
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|state
operator|.
name|getCollection
argument_list|(
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|replicaName
init|=
name|SolrCoreMetricManager
operator|.
name|parseReplicaName
argument_list|(
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaName
operator|==
literal|null
condition|)
block|{
name|replicaName
operator|=
name|cloudDesc
operator|.
name|getCoreNodeName
argument_list|()
expr_stmt|;
block|}
name|String
name|registryName
init|=
name|SolrCoreMetricManager
operator|.
name|createRegistryName
argument_list|(
literal|true
argument_list|,
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|,
name|replicaName
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|leaderRegistryName
init|=
name|SolrCoreMetricManager
operator|.
name|createLeaderRegistryName
argument_list|(
literal|true
argument_list|,
name|cloudDesc
operator|.
name|getCollectionName
argument_list|()
argument_list|,
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|leader
init|=
name|cloudDesc
operator|.
name|isLeader
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|cloudDesc
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|numReplicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|leader
condition|)
block|{
name|assertTrue
argument_list|(
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|+
literal|" doesn't contain "
operator|+
name|leaderRegistryName
argument_list|,
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|.
name|contains
argument_list|(
name|leaderRegistryName
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|leaderRegistryName
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertTrue
argument_list|(
literal|"Unexpected type of "
operator|+
name|k
operator|+
literal|": "
operator|+
name|v
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|v
argument_list|,
name|v
operator|instanceof
name|AggregateMetric
argument_list|)
expr_stmt|;
name|AggregateMetric
name|am
init|=
operator|(
name|AggregateMetric
operator|)
name|v
decl_stmt|;
if|if
condition|(
operator|!
name|k
operator|.
name|startsWith
argument_list|(
literal|"REPLICATION.peerSync"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|coreName
operator|+
literal|"::"
operator|+
name|registryName
operator|+
literal|"::"
operator|+
name|k
operator|+
literal|": "
operator|+
name|am
operator|.
name|toString
argument_list|()
argument_list|,
name|numReplicas
argument_list|,
name|am
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|+
literal|" contains "
operator|+
name|leaderRegistryName
operator|+
literal|" but it's not a leader!"
argument_list|,
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|.
name|contains
argument_list|(
name|leaderRegistryName
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|leaderRegistryName
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|metrics
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|assertTrue
argument_list|(
literal|"Unexpected type of "
operator|+
name|k
operator|+
literal|": "
operator|+
name|v
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|v
argument_list|,
name|v
operator|instanceof
name|AggregateMetric
argument_list|)
expr_stmt|;
name|AggregateMetric
name|am
init|=
operator|(
name|AggregateMetric
operator|)
name|v
decl_stmt|;
if|if
condition|(
operator|!
name|k
operator|.
name|startsWith
argument_list|(
literal|"REPLICATION.peerSync"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|coreName
operator|+
literal|"::"
operator|+
name|registryName
operator|+
literal|"::"
operator|+
name|k
operator|+
literal|": "
operator|+
name|am
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|am
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|+
literal|" doesn't contain "
operator|+
name|registryName
argument_list|,
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|.
name|contains
argument_list|(
name|registryName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|SolrMetricManager
name|metricManager
init|=
name|controlJetty
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMetricManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metricManager
operator|.
name|registryNames
argument_list|()
operator|.
name|contains
argument_list|(
literal|"solr.cluster"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

