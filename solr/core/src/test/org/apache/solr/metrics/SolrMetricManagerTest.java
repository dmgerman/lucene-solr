begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|PluginInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
operator|.
name|MockMetricReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SolrMetricManagerTest
specifier|public
class|class
name|SolrMetricManagerTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|Test
DECL|method|testOverridableRegistryName
specifier|public
name|void
name|testOverridableRegistryName
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|String
name|originalName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|targetName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// no override
name|String
name|result
init|=
name|SolrMetricManager
operator|.
name|overridableRegistryName
argument_list|(
name|originalName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SolrMetricManager
operator|.
name|REGISTRY_NAME_PREFIX
operator|+
name|originalName
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// with override
name|System
operator|.
name|setProperty
argument_list|(
name|SolrMetricManager
operator|.
name|REGISTRY_NAME_PREFIX
operator|+
name|originalName
argument_list|,
name|targetName
argument_list|)
expr_stmt|;
name|result
operator|=
name|SolrMetricManager
operator|.
name|overridableRegistryName
argument_list|(
name|originalName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SolrMetricManager
operator|.
name|REGISTRY_NAME_PREFIX
operator|+
name|targetName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSwapRegistries
specifier|public
name|void
name|testSwapRegistries
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|SolrMetricManager
name|metricManager
init|=
operator|new
name|SolrMetricManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|metrics1
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomMetrics
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|metrics2
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomMetrics
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|fromName
init|=
literal|"from-"
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|toName
init|=
literal|"to-"
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
comment|// register test metrics
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metricManager
operator|.
name|register
argument_list|(
literal|null
argument_list|,
name|fromName
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"metrics1"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metricManager
operator|.
name|register
argument_list|(
literal|null
argument_list|,
name|toName
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"metrics2"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|metrics1
operator|.
name|size
argument_list|()
argument_list|,
name|metricManager
operator|.
name|registry
argument_list|(
name|fromName
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metrics2
operator|.
name|size
argument_list|()
argument_list|,
name|metricManager
operator|.
name|registry
argument_list|(
name|toName
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// swap
name|metricManager
operator|.
name|swapRegistries
argument_list|(
name|fromName
argument_list|,
name|toName
argument_list|)
expr_stmt|;
comment|// check metrics
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|fromMetrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|fromName
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|metrics2
operator|.
name|size
argument_list|()
argument_list|,
name|fromMetrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics2
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|fromMetrics
operator|.
name|get
argument_list|(
name|SolrMetricManager
operator|.
name|mkName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"metrics2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|toMetrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|toName
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|metrics1
operator|.
name|size
argument_list|()
argument_list|,
name|toMetrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics1
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Object
name|value
init|=
name|toMetrics
operator|.
name|get
argument_list|(
name|SolrMetricManager
operator|.
name|mkName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"metrics1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRegisterAll
specifier|public
name|void
name|testRegisterAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|SolrMetricManager
name|metricManager
init|=
operator|new
name|SolrMetricManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|metrics
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomMetrics
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|MetricRegistry
name|mr
init|=
operator|new
name|MetricRegistry
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|mr
operator|.
name|register
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|registryName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|registerAll
argument_list|(
name|registryName
argument_list|,
name|mr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// this should simply skip existing names
name|metricManager
operator|.
name|registerAll
argument_list|(
name|registryName
argument_list|,
name|mr
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// this should produce error
try|try
block|{
name|metricManager
operator|.
name|registerAll
argument_list|(
name|registryName
argument_list|,
name|mr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"registerAll with duplicate metric names should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
DECL|method|testClearMetrics
specifier|public
name|void
name|testClearMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|SolrMetricManager
name|metricManager
init|=
operator|new
name|SolrMetricManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|metrics
init|=
name|SolrMetricTestUtils
operator|.
name|getRandomMetrics
argument_list|(
name|r
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|registryName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metricManager
operator|.
name|register
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metricManager
operator|.
name|register
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"foo"
argument_list|,
literal|"baz"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Counter
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|metricManager
operator|.
name|register
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
literal|false
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
operator|*
literal|3
argument_list|,
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
operator|.
name|getMetrics
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// clear all metrics with prefix "foo.bar."
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
name|metricManager
operator|.
name|clearMetrics
argument_list|(
name|registryName
argument_list|,
literal|"foo"
argument_list|,
literal|"bar."
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
argument_list|,
name|removed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|removed
control|)
block|{
name|assertTrue
argument_list|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"foo.bar."
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|removed
operator|=
name|metricManager
operator|.
name|clearMetrics
argument_list|(
name|registryName
argument_list|,
literal|"foo"
argument_list|,
literal|"baz."
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
argument_list|,
name|removed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|removed
control|)
block|{
name|assertTrue
argument_list|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"foo.baz."
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// perhaps surprisingly, this works too - see PrefixFilter docs
name|removed
operator|=
name|metricManager
operator|.
name|clearMetrics
argument_list|(
name|registryName
argument_list|,
literal|"fo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
argument_list|,
name|removed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|removed
control|)
block|{
name|assertTrue
argument_list|(
name|s
operator|.
name|startsWith
argument_list|(
literal|"foo."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSimpleMetrics
specifier|public
name|void
name|testSimpleMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|SolrMetricManager
name|metricManager
init|=
operator|new
name|SolrMetricManager
argument_list|()
decl_stmt|;
name|String
name|registryName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|metricManager
operator|.
name|counter
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
literal|"simple_counter"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|timer
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
literal|"simple_timer"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|meter
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
literal|"simple_meter"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|histogram
argument_list|(
literal|null
argument_list|,
name|registryName
argument_list|,
literal|"simple_histogram"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|metrics
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|entry
range|:
name|metrics
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"foo.bar.simple_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRegistryName
specifier|public
name|void
name|testRegistryName
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|r
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|result
init|=
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|core
argument_list|,
name|name
argument_list|,
literal|"collection1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"solr.core."
operator|+
name|name
operator|+
literal|".collection1"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// try it with already prefixed name - group will be ignored
name|result
operator|=
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|core
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"solr.core."
operator|+
name|name
operator|+
literal|".collection1"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// try it with already prefixed name but with additional segments
name|result
operator|=
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|core
argument_list|,
name|result
argument_list|,
literal|"shard1"
argument_list|,
literal|"replica1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"solr.core."
operator|+
name|name
operator|+
literal|".collection1.shard1.replica1"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReporters
specifier|public
name|void
name|testReporters
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|r
init|=
name|random
argument_list|()
decl_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|()
decl_stmt|;
name|SolrMetricManager
name|metricManager
init|=
operator|new
name|SolrMetricManager
argument_list|()
decl_stmt|;
name|PluginInfo
index|[]
name|plugins
init|=
operator|new
name|PluginInfo
index|[]
block|{
name|createPluginInfo
argument_list|(
literal|"universal_foo"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|,
name|createPluginInfo
argument_list|(
literal|"multigroup_foo"
argument_list|,
literal|"jvm, node, core"
argument_list|,
literal|null
argument_list|)
block|,
name|createPluginInfo
argument_list|(
literal|"multiregistry_foo"
argument_list|,
literal|null
argument_list|,
literal|"solr.node, solr.core.collection1"
argument_list|)
block|,
name|createPluginInfo
argument_list|(
literal|"specific_foo"
argument_list|,
literal|null
argument_list|,
literal|"solr.core.collection1"
argument_list|)
block|,
name|createPluginInfo
argument_list|(
literal|"node_foo"
argument_list|,
literal|"node"
argument_list|,
literal|null
argument_list|)
block|,
name|createPluginInfo
argument_list|(
literal|"core_foo"
argument_list|,
literal|"core"
argument_list|,
literal|null
argument_list|)
block|}
decl_stmt|;
name|String
name|tag
init|=
literal|"xyz"
decl_stmt|;
name|metricManager
operator|.
name|loadReporters
argument_list|(
name|plugins
argument_list|,
name|loader
argument_list|,
name|tag
argument_list|,
name|SolrInfoBean
operator|.
name|Group
operator|.
name|node
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|SolrMetricReporter
argument_list|>
name|reporters
init|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|node
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"universal_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"multigroup_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"node_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"multiregistry_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|loadReporters
argument_list|(
name|plugins
argument_list|,
name|loader
argument_list|,
name|tag
argument_list|,
name|SolrInfoBean
operator|.
name|Group
operator|.
name|core
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|reporters
operator|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|core
argument_list|,
literal|"collection1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"universal_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"multigroup_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"specific_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"core_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"multiregistry_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|loadReporters
argument_list|(
name|plugins
argument_list|,
name|loader
argument_list|,
name|tag
argument_list|,
name|SolrInfoBean
operator|.
name|Group
operator|.
name|jvm
argument_list|)
expr_stmt|;
name|reporters
operator|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|jvm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"universal_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reporters
operator|.
name|containsKey
argument_list|(
literal|"multigroup_foo@"
operator|+
name|tag
argument_list|)
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|removeRegistry
argument_list|(
literal|"solr.jvm"
argument_list|)
expr_stmt|;
name|reporters
operator|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|jvm
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|removeRegistry
argument_list|(
literal|"solr.node"
argument_list|)
expr_stmt|;
name|reporters
operator|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|node
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|metricManager
operator|.
name|removeRegistry
argument_list|(
literal|"solr.core.collection1"
argument_list|)
expr_stmt|;
name|reporters
operator|=
name|metricManager
operator|.
name|getReporters
argument_list|(
name|SolrMetricManager
operator|.
name|getRegistryName
argument_list|(
name|SolrInfoBean
operator|.
name|Group
operator|.
name|core
argument_list|,
literal|"collection1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|reporters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|createPluginInfo
specifier|private
name|PluginInfo
name|createPluginInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|group
parameter_list|,
name|String
name|registry
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"class"
argument_list|,
name|MockMetricReporter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|put
argument_list|(
literal|"group"
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|registry
operator|!=
literal|null
condition|)
block|{
name|attrs
operator|.
name|put
argument_list|(
literal|"registry"
argument_list|,
name|registry
argument_list|)
expr_stmt|;
block|}
name|NamedList
name|initArgs
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|initArgs
operator|.
name|add
argument_list|(
literal|"configurable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
operator|new
name|PluginInfo
argument_list|(
literal|"SolrMetricReporter"
argument_list|,
name|attrs
argument_list|,
name|initArgs
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

