begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics.reporters
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|reporters
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricReporter
import|;
end_import

begin_class
DECL|class|MockMetricReporter
specifier|public
class|class
name|MockMetricReporter
extends|extends
name|SolrMetricReporter
block|{
DECL|field|configurable
specifier|public
name|String
name|configurable
decl_stmt|;
DECL|field|didInit
specifier|public
name|boolean
name|didInit
init|=
literal|false
decl_stmt|;
DECL|field|didClose
specifier|public
name|boolean
name|didClose
init|=
literal|false
decl_stmt|;
DECL|field|didValidate
specifier|public
name|boolean
name|didValidate
init|=
literal|false
decl_stmt|;
DECL|method|MockMetricReporter
specifier|public
name|MockMetricReporter
parameter_list|(
name|SolrMetricManager
name|metricManager
parameter_list|,
name|String
name|registryName
parameter_list|)
block|{
name|super
argument_list|(
name|metricManager
argument_list|,
name|registryName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doInit
specifier|protected
name|void
name|doInit
parameter_list|()
block|{
name|didInit
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|didClose
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|didValidate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|configurable
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"MockMetricReporter::configurable not defined."
argument_list|)
throw|;
block|}
block|}
DECL|method|setConfigurable
specifier|public
name|void
name|setConfigurable
parameter_list|(
name|String
name|configurable
parameter_list|)
block|{
name|this
operator|.
name|configurable
operator|=
name|configurable
expr_stmt|;
block|}
DECL|method|reportMetric
specifier|public
name|Metric
name|reportMetric
parameter_list|(
name|String
name|metricName
parameter_list|)
throws|throws
name|NoSuchElementException
block|{
name|MetricRegistry
name|registry
init|=
name|metricManager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
decl_stmt|;
name|Metric
name|metric
init|=
name|registry
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
name|metricName
argument_list|)
decl_stmt|;
if|if
condition|(
name|metric
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"Metric was not found for metric name = "
operator|+
name|metricName
argument_list|)
throw|;
block|}
return|return
name|metric
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"[%s@%s: configurable = %s, didInit = %b, didValidate = %b, didClose = %b]"
argument_list|,
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|Integer
operator|.
name|toHexString
argument_list|(
name|hashCode
argument_list|()
argument_list|)
argument_list|,
name|configurable
argument_list|,
name|didInit
argument_list|,
name|didValidate
argument_list|,
name|didClose
argument_list|)
return|;
block|}
block|}
end_class

end_unit

