begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|NodeConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrXmlConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link OperatingSystemMetricSet} and proper JVM metrics registration.  */
end_comment

begin_class
DECL|class|JvmMetricsTest
specifier|public
class|class
name|JvmMetricsTest
extends|extends
name|SolrJettyTestBase
block|{
DECL|field|STRING_OS_METRICS
specifier|static
specifier|final
name|String
index|[]
name|STRING_OS_METRICS
init|=
block|{
literal|"arch"
block|,
literal|"name"
block|,
literal|"version"
block|}
decl_stmt|;
DECL|field|NUMERIC_OS_METRICS
specifier|static
specifier|final
name|String
index|[]
name|NUMERIC_OS_METRICS
init|=
block|{
literal|"availableProcessors"
block|,
literal|"systemLoadAverage"
block|}
decl_stmt|;
DECL|field|BUFFER_METRICS
specifier|static
specifier|final
name|String
index|[]
name|BUFFER_METRICS
init|=
block|{
literal|"direct.Count"
block|,
literal|"direct.MemoryUsed"
block|,
literal|"direct.TotalCapacity"
block|,
literal|"mapped.Count"
block|,
literal|"mapped.MemoryUsed"
block|,
literal|"mapped.TotalCapacity"
block|}
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTest
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createJetty
argument_list|(
name|legacyExampleCollection1SolrHome
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOperatingSystemMetricSet
specifier|public
name|void
name|testOperatingSystemMetricSet
parameter_list|()
throws|throws
name|Exception
block|{
name|OperatingSystemMetricSet
name|set
init|=
operator|new
name|OperatingSystemMetricSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|set
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|metric
range|:
name|NUMERIC_OS_METRICS
control|)
block|{
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
init|=
operator|(
name|Gauge
argument_list|<
name|?
argument_list|>
operator|)
name|metrics
operator|.
name|get
argument_list|(
name|metric
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|metric
argument_list|,
name|gauge
argument_list|)
expr_stmt|;
name|double
name|value
init|=
operator|(
operator|(
name|Number
operator|)
name|gauge
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
comment|// SystemLoadAverage on Windows may be -1.0
name|assertTrue
argument_list|(
literal|"unexpected value of "
operator|+
name|metric
operator|+
literal|": "
operator|+
name|value
argument_list|,
name|value
operator|>=
literal|0
operator|||
name|value
operator|==
operator|-
literal|1.0
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|metric
range|:
name|STRING_OS_METRICS
control|)
block|{
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
init|=
operator|(
name|Gauge
argument_list|<
name|?
argument_list|>
operator|)
name|metrics
operator|.
name|get
argument_list|(
name|metric
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|metric
argument_list|,
name|gauge
argument_list|)
expr_stmt|;
name|String
name|value
init|=
operator|(
name|String
operator|)
name|gauge
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|value
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testAltBufferPoolMetricSet
specifier|public
name|void
name|testAltBufferPoolMetricSet
parameter_list|()
throws|throws
name|Exception
block|{
name|AltBufferPoolMetricSet
name|set
init|=
operator|new
name|AltBufferPoolMetricSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|set
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|BUFFER_METRICS
control|)
block|{
name|assertNotNull
argument_list|(
name|name
argument_list|,
name|metrics
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|g
init|=
name|metrics
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|g
operator|instanceof
name|Gauge
argument_list|)
expr_stmt|;
name|Object
name|v
init|=
operator|(
operator|(
name|Gauge
operator|)
name|g
operator|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|v
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSystemProperties
specifier|public
name|void
name|testSystemProperties
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"basicauth"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// make sure it's set
name|System
operator|.
name|setProperty
argument_list|(
literal|"basicauth"
argument_list|,
literal|"foo:bar"
argument_list|)
expr_stmt|;
block|}
name|SolrMetricManager
name|metricManager
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMetricManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
literal|"solr.jvm"
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|MetricsMap
name|map
init|=
operator|(
name|MetricsMap
operator|)
name|metrics
operator|.
name|get
argument_list|(
literal|"system.properties"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
name|map
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|NodeConfig
operator|.
name|NodeConfigBuilder
operator|.
name|DEFAULT_HIDDEN_SYS_PROPS
operator|.
name|contains
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
literal|"hidden property "
operator|+
name|k
operator|+
literal|" present!"
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|k
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|v
argument_list|,
name|values
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|k
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHiddenSysProps
specifier|public
name|void
name|testHiddenSysProps
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|home
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|)
decl_stmt|;
name|SolrResourceLoader
name|loader
init|=
operator|new
name|SolrResourceLoader
argument_list|(
name|home
argument_list|)
decl_stmt|;
comment|// default config
name|String
name|solrXml
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|home
operator|.
name|toString
argument_list|()
argument_list|,
literal|"solr.xml"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|NodeConfig
name|config
init|=
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|NodeConfig
operator|.
name|NodeConfigBuilder
operator|.
name|DEFAULT_HIDDEN_SYS_PROPS
operator|.
name|forEach
argument_list|(
name|s
lambda|->
block|{
name|assertTrue
argument_list|(
name|s
argument_list|,
name|config
operator|.
name|getHiddenSysProps
argument_list|()
operator|.
name|contains
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// custom config
name|solrXml
operator|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|home
operator|.
name|toString
argument_list|()
argument_list|,
literal|"solr-hiddensysprops.xml"
argument_list|)
operator|.
name|toFile
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|NodeConfig
name|config2
init|=
name|SolrXmlConfig
operator|.
name|fromString
argument_list|(
name|loader
argument_list|,
name|solrXml
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|asList
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
literal|"baz"
argument_list|)
operator|.
name|forEach
argument_list|(
name|s
lambda|->
block|{
name|assertTrue
argument_list|(
name|s
argument_list|,
name|config2
operator|.
name|getHiddenSysProps
argument_list|()
operator|.
name|contains
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSetupJvmMetrics
specifier|public
name|void
name|testSetupJvmMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrMetricManager
name|metricManager
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMetricManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
literal|"solr.jvm"
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"buffers."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"classes."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"os."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"gc."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"memory."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"threads."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"system."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

