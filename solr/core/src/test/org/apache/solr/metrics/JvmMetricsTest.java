begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.metrics
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test {@link OperatingSystemMetricSet} and proper JVM metrics registration.  */
end_comment

begin_class
DECL|class|JvmMetricsTest
specifier|public
class|class
name|JvmMetricsTest
extends|extends
name|SolrJettyTestBase
block|{
annotation|@
name|BeforeClass
DECL|method|beforeTest
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
throws|throws
name|Exception
block|{
name|createJetty
argument_list|(
name|legacyExampleCollection1SolrHome
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOperatingSystemMetricsSet
specifier|public
name|void
name|testOperatingSystemMetricsSet
parameter_list|()
throws|throws
name|Exception
block|{
name|MBeanServer
name|mBeanServer
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
name|OperatingSystemMetricSet
name|set
init|=
operator|new
name|OperatingSystemMetricSet
argument_list|(
name|mBeanServer
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|set
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|metric
range|:
name|OperatingSystemMetricSet
operator|.
name|METRICS
control|)
block|{
name|Gauge
argument_list|<
name|?
argument_list|>
name|gauge
init|=
operator|(
name|Gauge
argument_list|<
name|?
argument_list|>
operator|)
name|metrics
operator|.
name|get
argument_list|(
name|metric
argument_list|)
decl_stmt|;
if|if
condition|(
name|gauge
operator|==
literal|null
operator|||
name|gauge
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// some are optional depending on OS
continue|continue;
block|}
name|double
name|value
init|=
operator|(
operator|(
name|Number
operator|)
name|gauge
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|value
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSetupJvmMetrics
specifier|public
name|void
name|testSetupJvmMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrMetricManager
name|metricManager
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMetricManager
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Metric
argument_list|>
name|metrics
init|=
name|metricManager
operator|.
name|registry
argument_list|(
literal|"solr.jvm"
argument_list|)
operator|.
name|getMetrics
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"buffers."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"classes."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"os."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"gc."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"memory."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|metrics
operator|.
name|toString
argument_list|()
argument_list|,
name|metrics
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"threads."
argument_list|)
argument_list|)
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

