begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterChain
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|FilterConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpRequestInterceptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URLEncodedUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|protocol
operator|.
name|HttpContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpClientUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|SolrHttpClientBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import

begin_comment
comment|/**  * AuthenticationHandler that supports delegation tokens and simple  * authentication via the "user" http parameter  */
end_comment

begin_class
DECL|class|HttpParamDelegationTokenPlugin
specifier|public
class|class
name|HttpParamDelegationTokenPlugin
extends|extends
name|KerberosPlugin
block|{
DECL|field|USER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|USER_PARAM
init|=
literal|"user"
decl_stmt|;
comment|// http parameter for user authentication
DECL|field|REMOTE_HOST_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|REMOTE_HOST_PARAM
init|=
literal|"remoteHost"
decl_stmt|;
comment|// http parameter for indicating remote host
DECL|field|REMOTE_ADDRESS_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|REMOTE_ADDRESS_PARAM
init|=
literal|"remoteAddress"
decl_stmt|;
comment|// http parameter for indicating remote address
DECL|field|INTERNAL_REQUEST_HEADER
specifier|public
specifier|static
specifier|final
name|String
name|INTERNAL_REQUEST_HEADER
init|=
literal|"internalRequest"
decl_stmt|;
comment|// http header for indicating internal request
DECL|method|isSolrThread
name|boolean
name|isSolrThread
parameter_list|()
block|{
return|return
name|ExecutorUtil
operator|.
name|isSolrServerThread
argument_list|()
return|;
block|}
DECL|field|interceptor
specifier|private
specifier|final
name|HttpRequestInterceptor
name|interceptor
init|=
operator|new
name|HttpRequestInterceptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|HttpRequest
name|httpRequest
parameter_list|,
name|HttpContext
name|httpContext
parameter_list|)
throws|throws
name|HttpException
throws|,
name|IOException
block|{
name|SolrRequestInfo
name|reqInfo
init|=
name|SolrRequestInfo
operator|.
name|getRequestInfo
argument_list|()
decl_stmt|;
name|String
name|usr
decl_stmt|;
if|if
condition|(
name|reqInfo
operator|!=
literal|null
condition|)
block|{
name|Principal
name|principal
init|=
name|reqInfo
operator|.
name|getReq
argument_list|()
operator|.
name|getUserPrincipal
argument_list|()
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
comment|//this had a request but not authenticated
comment|//so we don't not need to set a principal
return|return;
block|}
else|else
block|{
name|usr
operator|=
name|principal
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isSolrThread
argument_list|()
condition|)
block|{
comment|//if this is not running inside a Solr threadpool (as in testcases)
comment|// then no need to add any header
return|return;
block|}
comment|//this request seems to be originated from Solr itself
name|usr
operator|=
literal|"$"
expr_stmt|;
comment|//special name to denote the user is the node itself
block|}
name|httpRequest
operator|.
name|setHeader
argument_list|(
name|INTERNAL_REQUEST_HEADER
argument_list|,
name|usr
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
DECL|method|HttpParamDelegationTokenPlugin
specifier|public
name|HttpParamDelegationTokenPlugin
parameter_list|(
name|CoreContainer
name|coreContainer
parameter_list|)
block|{
name|super
argument_list|(
name|coreContainer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|pluginConfig
parameter_list|)
block|{
try|try
block|{
specifier|final
name|FilterConfig
name|initConf
init|=
name|getInitFilterConfig
argument_list|(
name|pluginConfig
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|FilterConfig
name|conf
init|=
operator|new
name|FilterConfig
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|initConf
operator|.
name|getServletContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getInitParameterNames
parameter_list|()
block|{
return|return
name|initConf
operator|.
name|getInitParameterNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInitParameter
parameter_list|(
name|String
name|param
parameter_list|)
block|{
if|if
condition|(
name|AuthenticationFilter
operator|.
name|AUTH_TYPE
operator|.
name|equals
argument_list|(
name|param
argument_list|)
condition|)
block|{
return|return
name|HttpParamDelegationTokenAuthenticationHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
return|;
block|}
return|return
name|initConf
operator|.
name|getInitParameter
argument_list|(
name|param
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFilterName
parameter_list|()
block|{
return|return
literal|"HttpParamFilter"
return|;
block|}
block|}
decl_stmt|;
name|Filter
name|kerberosFilter
init|=
operator|new
name|HttpParamToRequestFilter
argument_list|()
decl_stmt|;
name|kerberosFilter
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|setKerberosFilter
argument_list|(
name|kerberosFilter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ServletException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error initializing kerberos authentication plugin: "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getHttpClientBuilder
specifier|public
name|SolrHttpClientBuilder
name|getHttpClientBuilder
parameter_list|(
name|SolrHttpClientBuilder
name|builder
parameter_list|)
block|{
name|HttpClientUtil
operator|.
name|addRequestInterceptor
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
return|return
name|super
operator|.
name|getHttpClientBuilder
argument_list|(
name|builder
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
block|{
name|HttpClientUtil
operator|.
name|removeRequestInterceptor
argument_list|(
name|interceptor
argument_list|)
expr_stmt|;
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getHttpParam
specifier|private
specifier|static
name|String
name|getHttpParam
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|param
parameter_list|)
block|{
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|pairs
init|=
name|URLEncodedUtils
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NameValuePair
name|nvp
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|param
operator|.
name|equals
argument_list|(
name|nvp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|nvp
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|HttpParamDelegationTokenAuthenticationHandler
specifier|public
specifier|static
class|class
name|HttpParamDelegationTokenAuthenticationHandler
extends|extends
name|DelegationTokenAuthenticationHandler
block|{
DECL|method|HttpParamDelegationTokenAuthenticationHandler
specifier|public
name|HttpParamDelegationTokenAuthenticationHandler
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|HttpParamAuthenticationHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setProperty
argument_list|(
name|TOKEN_KIND
argument_list|,
name|KerberosPlugin
operator|.
name|DELEGATION_TOKEN_TYPE_DEFAULT
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|class|HttpParamAuthenticationHandler
specifier|private
specifier|static
class|class
name|HttpParamAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"dummy"
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{       }
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{       }
annotation|@
name|Override
DECL|method|managementOperation
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
name|String
name|userName
init|=
name|getHttpParam
argument_list|(
name|request
argument_list|,
name|USER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
comment|//check if this is an internal request
name|userName
operator|=
name|request
operator|.
name|getHeader
argument_list|(
name|INTERNAL_REQUEST_HEADER
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AuthenticationToken
argument_list|(
name|userName
argument_list|,
name|userName
argument_list|,
literal|"test"
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
block|}
block|}
comment|/**    * Filter that converts http params to HttpServletRequest params    */
DECL|class|HttpParamToRequestFilter
specifier|private
specifier|static
class|class
name|HttpParamToRequestFilter
extends|extends
name|DelegationTokenKerberosFilter
block|{
annotation|@
name|Override
DECL|method|doFilter
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
specifier|final
name|HttpServletRequest
name|httpRequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
specifier|final
name|HttpServletRequestWrapper
name|requestWrapper
init|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|httpRequest
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getRemoteHost
parameter_list|()
block|{
name|String
name|param
init|=
name|getHttpParam
argument_list|(
name|httpRequest
argument_list|,
name|REMOTE_HOST_PARAM
argument_list|)
decl_stmt|;
return|return
name|param
operator|!=
literal|null
condition|?
name|param
else|:
name|httpRequest
operator|.
name|getRemoteHost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteAddr
parameter_list|()
block|{
name|String
name|param
init|=
name|getHttpParam
argument_list|(
name|httpRequest
argument_list|,
name|REMOTE_ADDRESS_PARAM
argument_list|)
decl_stmt|;
return|return
name|param
operator|!=
literal|null
condition|?
name|param
else|:
name|httpRequest
operator|.
name|getRemoteAddr
argument_list|()
return|;
block|}
block|}
decl_stmt|;
name|super
operator|.
name|doFilter
argument_list|(
name|requestWrapper
argument_list|,
name|response
argument_list|,
name|chain
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doFilter
specifier|protected
name|void
name|doFilter
parameter_list|(
name|FilterChain
name|filterChain
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
comment|// remove the filter-specific authentication information, so it doesn't get accidentally forwarded.
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|newPairs
init|=
operator|new
name|LinkedList
argument_list|<
name|NameValuePair
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|pairs
init|=
name|URLEncodedUtils
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NameValuePair
name|nvp
range|:
name|pairs
control|)
block|{
if|if
condition|(
operator|!
name|USER_PARAM
operator|.
name|equals
argument_list|(
name|nvp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|newPairs
operator|.
name|add
argument_list|(
name|nvp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|USER_PARAM
argument_list|,
name|nvp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|queryStringNoUser
init|=
name|URLEncodedUtils
operator|.
name|format
argument_list|(
name|newPairs
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|HttpServletRequest
name|requestWrapper
init|=
operator|new
name|HttpServletRequestWrapper
argument_list|(
name|request
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|queryStringNoUser
return|;
block|}
block|}
decl_stmt|;
name|super
operator|.
name|doFilter
argument_list|(
name|filterChain
argument_list|,
name|requestWrapper
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

