begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|server
operator|.
name|AuthenticationToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|token
operator|.
name|delegation
operator|.
name|web
operator|.
name|DelegationTokenAuthenticationHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|utils
operator|.
name|URLEncodedUtils
import|;
end_import

begin_comment
comment|/**  * AuthenticationHandler that supports delegation tokens and simple  * authentication via the "user" http parameter  */
end_comment

begin_class
DECL|class|HttpParamDelegationTokenAuthenticationHandler
specifier|public
class|class
name|HttpParamDelegationTokenAuthenticationHandler
extends|extends
name|DelegationTokenAuthenticationHandler
block|{
DECL|field|USER_PARAM
specifier|public
specifier|static
specifier|final
name|String
name|USER_PARAM
init|=
literal|"user"
decl_stmt|;
DECL|method|HttpParamDelegationTokenAuthenticationHandler
specifier|public
name|HttpParamDelegationTokenAuthenticationHandler
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|HttpParamAuthenticationHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|Properties
name|conf
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|config
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|setProperty
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|conf
operator|.
name|setProperty
argument_list|(
name|TOKEN_KIND
argument_list|,
name|KerberosPlugin
operator|.
name|DELEGATION_TOKEN_TYPE_DEFAULT
argument_list|)
expr_stmt|;
name|super
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
DECL|method|getHttpParam
specifier|private
specifier|static
name|String
name|getHttpParam
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|param
parameter_list|)
block|{
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|pairs
init|=
name|URLEncodedUtils
operator|.
name|parse
argument_list|(
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|NameValuePair
name|nvp
range|:
name|pairs
control|)
block|{
if|if
condition|(
name|param
operator|.
name|equals
argument_list|(
name|nvp
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|nvp
operator|.
name|getValue
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|class|HttpParamAuthenticationHandler
specifier|private
specifier|static
class|class
name|HttpParamAuthenticationHandler
implements|implements
name|AuthenticationHandler
block|{
annotation|@
name|Override
DECL|method|getType
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
literal|"dummy"
return|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|Properties
name|config
parameter_list|)
throws|throws
name|ServletException
block|{     }
annotation|@
name|Override
DECL|method|destroy
specifier|public
name|void
name|destroy
parameter_list|()
block|{     }
annotation|@
name|Override
DECL|method|managementOperation
specifier|public
name|boolean
name|managementOperation
parameter_list|(
name|AuthenticationToken
name|token
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|authenticate
specifier|public
name|AuthenticationToken
name|authenticate
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
throws|,
name|AuthenticationException
block|{
name|AuthenticationToken
name|token
init|=
literal|null
decl_stmt|;
name|String
name|userName
init|=
name|getHttpParam
argument_list|(
name|request
argument_list|,
name|USER_PARAM
argument_list|)
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|AuthenticationToken
argument_list|(
name|userName
argument_list|,
name|userName
argument_list|,
literal|"test"
argument_list|)
return|;
block|}
else|else
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_UNAUTHORIZED
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"WWW-Authenticate"
argument_list|,
literal|"dummy"
argument_list|)
expr_stmt|;
block|}
return|return
name|token
return|;
block|}
block|}
block|}
end_class

end_unit

