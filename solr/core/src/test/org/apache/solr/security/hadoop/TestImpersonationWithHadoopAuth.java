begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|hadoop
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|HttpParamDelegationTokenPlugin
operator|.
name|USER_PARAM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|hadoop
operator|.
name|ImpersonationUtil
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|HadoopAuthPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
operator|.
name|SolrRequestParsers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestImpersonationWithHadoopAuth
specifier|public
class|class
name|TestImpersonationWithHadoopAuth
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|NUM_SERVERS
specifier|protected
specifier|static
specifier|final
name|int
name|NUM_SERVERS
init|=
literal|2
decl_stmt|;
DECL|field|defaultAddRequestHeadersToContext
specifier|private
specifier|static
specifier|final
name|boolean
name|defaultAddRequestHeadersToContext
init|=
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|isAddRequestHeadersToContext
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"Hadoop does not work on Windows"
argument_list|,
name|Constants
operator|.
name|WINDOWS
argument_list|)
expr_stmt|;
name|InetAddress
name|loopback
init|=
name|InetAddress
operator|.
name|getLoopbackAddress
argument_list|()
decl_stmt|;
name|Path
name|securityJsonPath
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"security"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"hadoop_simple_auth_with_delegation.json"
argument_list|)
decl_stmt|;
name|String
name|securityJson
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|securityJsonPath
argument_list|)
argument_list|,
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|securityConfig
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|securityJson
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|authConfig
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|securityConfig
operator|.
name|get
argument_list|(
literal|"authentication"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|proxyUserConfigs
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|authConfig
operator|.
name|getOrDefault
argument_list|(
name|HadoopAuthPlugin
operator|.
name|PROXY_USER_CONFIGS
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.noGroups.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.anyHostAnyUser.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.anyHostAnyUser.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.wrongHost.hosts"
argument_list|,
literal|"1.1.1.1.1.1"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.wrongHost.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.noHosts.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.localHostAnyGroup.hosts"
argument_list|,
name|loopback
operator|.
name|getCanonicalHostName
argument_list|()
operator|+
literal|","
operator|+
name|loopback
operator|.
name|getHostName
argument_list|()
operator|+
literal|","
operator|+
name|loopback
operator|.
name|getHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.localHostAnyGroup.groups"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.bogusGroup.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.bogusGroup.groups"
argument_list|,
literal|"__some_bogus_group"
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.anyHostUsersGroup.groups"
argument_list|,
name|ImpersonationUtil
operator|.
name|getUsersFirstGroup
argument_list|()
argument_list|)
expr_stmt|;
name|proxyUserConfigs
operator|.
name|put
argument_list|(
literal|"proxyuser.anyHostUsersGroup.hosts"
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|authConfig
operator|.
name|put
argument_list|(
name|HadoopAuthPlugin
operator|.
name|PROXY_USER_CONFIGS
argument_list|,
name|proxyUserConfigs
argument_list|)
expr_stmt|;
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|setAddRequestHeadersToContext
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"collectionsHandler"
argument_list|,
name|ImpersonatorCollectionsHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|configureCluster
argument_list|(
name|NUM_SERVERS
argument_list|)
comment|// nodes
operator|.
name|withSecurityJson
argument_list|(
name|Utils
operator|.
name|toJSONString
argument_list|(
name|securityConfig
argument_list|)
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownClass
specifier|public
specifier|static
name|void
name|tearDownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrRequestParsers
operator|.
name|DEFAULT
operator|.
name|setAddRequestHeadersToContext
argument_list|(
name|defaultAddRequestHeadersToContext
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"collectionsHandler"
argument_list|)
expr_stmt|;
block|}
DECL|method|newSolrClient
specifier|private
name|SolrClient
name|newSolrClient
parameter_list|()
block|{
return|return
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Test
DECL|method|testProxyNoConfigGroups
specifier|public
name|void
name|testProxyNoConfigGroups
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"noGroups"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RemoteSolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|,
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|getExpectedGroupExMsg
argument_list|(
literal|"noGroups"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyWrongHost
specifier|public
name|void
name|testProxyWrongHost
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"wrongHost"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RemoteSolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|getExpectedHostExMsg
argument_list|(
literal|"wrongHost"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyNoConfigHosts
specifier|public
name|void
name|testProxyNoConfigHosts
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"noHosts"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RemoteSolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|getExpectedHostExMsg
argument_list|(
literal|"noHosts"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyValidateAnyHostAnyUser
specifier|public
name|void
name|testProxyValidateAnyHostAnyUser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"anyHostAnyUser"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImpersonatorCollectionsHandler
operator|.
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyInvalidProxyUser
specifier|public
name|void
name|testProxyInvalidProxyUser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
comment|// wrong direction, should fail
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"bar"
argument_list|,
literal|"anyHostAnyUser"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RemoteSolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|getExpectedGroupExMsg
argument_list|(
literal|"bar"
argument_list|,
literal|"anyHostAnyUser"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyValidateHost
specifier|public
name|void
name|testProxyValidateHost
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"localHostAnyGroup"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImpersonatorCollectionsHandler
operator|.
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyValidateGroup
specifier|public
name|void
name|testProxyValidateGroup
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"anyHostUsersGroup"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ImpersonatorCollectionsHandler
operator|.
name|called
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyInvalidGroup
specifier|public
name|void
name|testProxyInvalidGroup
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|"bogusGroup"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RemoteSolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|ex
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|getExpectedGroupExMsg
argument_list|(
literal|"bogusGroup"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testProxyNullProxyUser
specifier|public
name|void
name|testProxyNullProxyUser
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|getProxyRequest
argument_list|(
literal|""
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected RemoteSolrException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
name|ex
parameter_list|)
block|{
comment|// this exception is specific to our implementation, don't check a specific message.
block|}
block|}
annotation|@
name|Test
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/HADOOP-9893"
argument_list|)
DECL|method|testForwarding
specifier|public
name|void
name|testForwarding
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"forwardingCollection"
decl_stmt|;
comment|// create collection
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrClient
name|solrClient
init|=
name|newSolrClient
argument_list|()
init|)
block|{
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
block|}
comment|// try a command to each node, one of them must be forwarded
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|USER_PARAM
argument_list|,
literal|"user"
argument_list|)
expr_stmt|;
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

