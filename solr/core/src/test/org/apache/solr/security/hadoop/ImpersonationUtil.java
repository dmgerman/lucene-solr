begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.security.hadoop
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|hadoop
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|authentication
operator|.
name|client
operator|.
name|PseudoAuthenticator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|HadoopAuthPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|KerberosPlugin
import|;
end_import

begin_comment
comment|/**  * This class implements utility functions required to test the secure impersonation feature for {@linkplain HadoopAuthPlugin}  */
end_comment

begin_class
DECL|class|ImpersonationUtil
specifier|public
class|class
name|ImpersonationUtil
block|{
DECL|method|getUsersFirstGroup
specifier|static
name|String
name|getUsersFirstGroup
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|group
init|=
literal|"*"
decl_stmt|;
comment|// accept any group if a group can't be found
if|if
condition|(
operator|!
name|Constants
operator|.
name|WINDOWS
condition|)
block|{
comment|// does not work on Windows!
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
name|hGroups
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|Groups
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|g
init|=
name|hGroups
operator|.
name|getGroups
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.name"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|g
operator|!=
literal|null
operator|&&
name|g
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|group
operator|=
name|g
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NullPointerException
name|npe
parameter_list|)
block|{
comment|// if user/group doesn't exist on test box
block|}
block|}
return|return
name|group
return|;
block|}
DECL|method|getProxyRequest
specifier|static
name|SolrRequest
name|getProxyRequest
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|doAs
parameter_list|)
block|{
return|return
operator|new
name|CollectionAdminRequest
operator|.
name|List
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|super
operator|.
name|getParams
argument_list|()
argument_list|)
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|PseudoAuthenticator
operator|.
name|USER_NAME
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|KerberosPlugin
operator|.
name|IMPERSONATOR_DO_AS_HTTP_PARAM
argument_list|,
name|doAs
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
return|;
block|}
DECL|method|getExpectedGroupExMsg
specifier|static
name|String
name|getExpectedGroupExMsg
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|doAs
parameter_list|)
block|{
return|return
literal|"User: "
operator|+
name|user
operator|+
literal|" is not allowed to impersonate "
operator|+
name|doAs
return|;
block|}
DECL|method|getExpectedHostExMsg
specifier|static
name|String
name|getExpectedHostExMsg
parameter_list|(
name|String
name|user
parameter_list|)
block|{
return|return
literal|"Unauthorized connection for super-user: "
operator|+
name|user
return|;
block|}
block|}
end_class

end_unit

