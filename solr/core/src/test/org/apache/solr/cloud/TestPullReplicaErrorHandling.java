begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CollectionStatePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressSSL
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/SOLR-5776"
argument_list|)
DECL|class|TestPullReplicaErrorHandling
specifier|public
class|class
name|TestPullReplicaErrorHandling
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|REPLICATION_TIMEOUT_SECS
specifier|private
specifier|final
specifier|static
name|int
name|REPLICATION_TIMEOUT_SECS
init|=
literal|10
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|proxies
specifier|private
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|SocketProxy
argument_list|>
name|proxies
decl_stmt|;
DECL|field|jettys
specifier|private
specifier|static
name|Map
argument_list|<
name|URI
argument_list|,
name|JettySolrRunner
argument_list|>
name|jettys
decl_stmt|;
DECL|field|collectionName
specifier|private
name|String
name|collectionName
init|=
literal|null
decl_stmt|;
DECL|method|suggestedCollectionName
specifier|private
name|String
name|suggestedCollectionName
parameter_list|()
block|{
return|return
operator|(
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"Test"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"_"
operator|+
name|getTestName
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"(.)(\\p{Upper})"
argument_list|,
literal|"$1_$2"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|TestInjection
operator|.
name|waitForReplicasInSync
operator|=
literal|null
expr_stmt|;
comment|// We'll be explicit about this in this test
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
comment|// Add proxies
name|proxies
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|jettys
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|SocketProxy
name|proxy
init|=
operator|new
name|SocketProxy
argument_list|()
decl_stmt|;
name|jetty
operator|.
name|setProxyPort
argument_list|(
name|proxy
operator|.
name|getListenPort
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|stopJettySolrRunner
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
comment|//TODO: Can we avoid this restart
name|cluster
operator|.
name|startJettySolrRunner
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|open
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Adding proxy for URL: "
operator|+
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|". Proxy: "
operator|+
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|)
expr_stmt|;
name|proxies
operator|.
name|put
argument_list|(
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|jettys
operator|.
name|put
argument_list|(
name|proxy
operator|.
name|getUrl
argument_list|()
argument_list|,
name|jetty
argument_list|)
expr_stmt|;
block|}
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|CollectionAdminRequest
operator|.
name|ClusterProp
name|clusterPropRequest
init|=
name|CollectionAdminRequest
operator|.
name|setClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|clusterPropRequest
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
annotation|@
name|AfterClass
DECL|method|tearDownCluster
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|SocketProxy
name|proxy
range|:
name|proxies
operator|.
name|values
argument_list|()
control|)
block|{
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|proxies
operator|=
literal|null
expr_stmt|;
name|jettys
operator|=
literal|null
expr_stmt|;
name|TestInjection
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|collectionName
operator|=
name|suggestedCollectionName
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"tearDown deleting collection"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Collection deleted"
argument_list|)
expr_stmt|;
name|waitForDeletion
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|collectionName
operator|=
literal|null
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|//  @Repeat(iterations=10)
DECL|method|testCantConnectToPullReplica
specifier|public
name|void
name|testCantConnectToPullReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
literal|2
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
name|numShards
argument_list|,
literal|0
argument_list|,
name|numShards
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|SocketProxy
name|proxy
init|=
name|getProxyForReplica
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|addDocs
argument_list|(
literal|10
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|leaderClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertNumDocs
argument_list|(
literal|10
operator|+
name|i
argument_list|,
name|leaderClient
argument_list|)
expr_stmt|;
block|}
block|}
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|pullReplicaClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Shouldn't be able to query the pull replica"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertNumberOfReplicas
argument_list|(
name|numShards
argument_list|,
literal|0
argument_list|,
name|numShards
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Replica should still be active, since it doesn't disconnect from ZooKeeper
block|{
name|long
name|numFound
init|=
literal|0
decl_stmt|;
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
name|REPLICATION_TIMEOUT_SECS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|numFound
operator|<
literal|20
operator|&&
operator|!
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|numFound
operator|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|query
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|proxy
operator|.
name|reopen
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertNumDocs
argument_list|(
literal|20
argument_list|,
name|pullReplicaClient
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testCantConnectToLeader
specifier|public
name|void
name|testCantConnectToLeader
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
literal|1
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
name|numShards
argument_list|,
literal|0
argument_list|,
name|numShards
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|SocketProxy
name|proxy
init|=
name|getProxyForReplica
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
comment|// wait for replication
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertNumDocs
argument_list|(
literal|10
argument_list|,
name|pullReplicaClient
argument_list|)
expr_stmt|;
block|}
name|proxy
operator|.
name|close
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|addDocs
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertNumDocs
argument_list|(
literal|10
argument_list|,
name|pullReplicaClient
argument_list|)
expr_stmt|;
block|}
name|assertNumDocs
argument_list|(
literal|10
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Opening leader node"
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|reopen
argument_list|()
expr_stmt|;
block|}
comment|//     Back to normal
comment|//    Even if the leader is back to normal, the replica can get broken pipe for some time when trying to connect to it. The commit
comment|//    can fail if it's sent to the replica and it forwards it to the leader, and since it uses CUSC the error is hidden! That breaks
comment|//    the last part of this test.
comment|//    addDocs(20);
comment|//    assertNumDocs(20, cluster.getSolrClient(), 300);
comment|//    try (HttpSolrClient pullReplicaClient = getHttpSolrClient(s.getReplicas(EnumSet.of(Replica.Type.PULL)).get(0).getCoreUrl())) {
comment|//      assertNumDocs(20, pullReplicaClient);
comment|//    }
block|}
DECL|method|testPullReplicaDisconnectsFromZooKeeper
specifier|public
name|void
name|testPullReplicaDisconnectsFromZooKeeper
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numShards
init|=
literal|1
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
name|numShards
argument_list|,
literal|0
argument_list|,
name|numShards
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertNumDocs
argument_list|(
literal|10
argument_list|,
name|pullReplicaClient
argument_list|)
expr_stmt|;
block|}
name|addDocs
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|getJettyForReplica
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|expireZkSession
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting node to be disconnected"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting node to be disconnected"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertNumDocs
argument_list|(
literal|40
argument_list|,
name|pullReplicaClient
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNumDocs
specifier|private
name|void
name|assertNumDocs
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|SolrClient
name|client
parameter_list|,
name|int
name|timeoutSecs
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
name|timeoutSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|long
name|numFound
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|numFound
operator|=
name|client
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
expr_stmt|;
if|if
condition|(
name|numFound
operator|==
name|numDocs
condition|)
block|{
return|return;
block|}
block|}
name|fail
argument_list|(
literal|"Didn't get expected doc count. Expected: "
operator|+
name|numDocs
operator|+
literal|", Found: "
operator|+
name|numFound
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumDocs
specifier|private
name|void
name|assertNumDocs
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|SolrClient
name|client
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|SolrServerException
throws|,
name|IOException
block|{
name|assertNumDocs
argument_list|(
name|numDocs
argument_list|,
name|client
argument_list|,
name|REPLICATION_TIMEOUT_SECS
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocs
specifier|private
name|void
name|addDocs
parameter_list|(
name|int
name|numDocs
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"fieldName_s"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumberOfReplicas
specifier|private
name|DocCollection
name|assertNumberOfReplicas
parameter_list|(
name|int
name|numWriter
parameter_list|,
name|int
name|numActive
parameter_list|,
name|int
name|numPassive
parameter_list|,
name|boolean
name|updateCollection
parameter_list|,
name|boolean
name|activeOnly
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|updateCollection
condition|)
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of writer replicas: "
operator|+
name|docCollection
argument_list|,
name|numWriter
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of pull replicas: "
operator|+
name|docCollection
argument_list|,
name|numPassive
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of active replicas: "
operator|+
name|docCollection
argument_list|,
name|numActive
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docCollection
return|;
block|}
DECL|method|getJettyForReplica
specifier|protected
name|JettySolrRunner
name|getJettyForReplica
parameter_list|(
name|Replica
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|replicaBaseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|replicaBaseUrl
argument_list|)
expr_stmt|;
name|URL
name|baseUrl
init|=
operator|new
name|URL
argument_list|(
name|replicaBaseUrl
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|proxy
init|=
name|jettys
operator|.
name|get
argument_list|(
name|baseUrl
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"No proxy found for "
operator|+
name|baseUrl
operator|+
literal|"!"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
DECL|method|getProxyForReplica
specifier|protected
name|SocketProxy
name|getProxyForReplica
parameter_list|(
name|Replica
name|replica
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|replicaBaseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|replicaBaseUrl
argument_list|)
expr_stmt|;
name|URL
name|baseUrl
init|=
operator|new
name|URL
argument_list|(
name|replicaBaseUrl
argument_list|)
decl_stmt|;
name|SocketProxy
name|proxy
init|=
name|proxies
operator|.
name|get
argument_list|(
name|baseUrl
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|==
literal|null
operator|&&
operator|!
name|baseUrl
operator|.
name|toExternalForm
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|baseUrl
operator|=
operator|new
name|URL
argument_list|(
name|baseUrl
operator|.
name|toExternalForm
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|proxy
operator|=
name|proxies
operator|.
name|get
argument_list|(
name|baseUrl
operator|.
name|toURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
literal|"No proxy found for "
operator|+
name|baseUrl
operator|+
literal|"!"
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
return|return
name|proxy
return|;
block|}
DECL|method|waitForDeletion
specifier|private
name|void
name|waitForDeletion
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Collection not yet deleted"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out waiting for collection "
operator|+
name|collection
operator|+
literal|" to be deleted."
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
DECL|method|activeReplicaCount
specifier|private
name|CollectionStatePredicate
name|activeReplicaCount
parameter_list|(
name|int
name|numWriter
parameter_list|,
name|int
name|numActive
parameter_list|,
name|int
name|numPassive
parameter_list|)
block|{
return|return
parameter_list|(
name|liveNodes
parameter_list|,
name|collectionState
parameter_list|)
lambda|->
block|{
name|int
name|writersFound
init|=
literal|0
decl_stmt|,
name|activesFound
init|=
literal|0
decl_stmt|,
name|passivesFound
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|collectionState
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Slice
name|slice
range|:
name|collectionState
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|isActive
argument_list|(
name|liveNodes
argument_list|)
condition|)
switch|switch
condition|(
name|replica
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TLOG
case|:
name|activesFound
operator|++
expr_stmt|;
break|break;
case|case
name|PULL
case|:
name|passivesFound
operator|++
expr_stmt|;
break|break;
case|case
name|NRT
case|:
name|writersFound
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected replica type"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|numWriter
operator|==
name|writersFound
operator|&&
name|numActive
operator|==
name|activesFound
operator|&&
name|numPassive
operator|==
name|passivesFound
return|;
block|}
return|;
block|}
block|}
end_class

end_unit

