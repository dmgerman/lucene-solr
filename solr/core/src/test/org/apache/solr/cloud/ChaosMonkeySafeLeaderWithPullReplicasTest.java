begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
operator|.
name|SuppressObjectReleaseTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Slow
annotation|@
name|SuppressObjectReleaseTracker
argument_list|(
name|bugUrl
operator|=
literal|"Testing purposes"
argument_list|)
DECL|class|ChaosMonkeySafeLeaderWithPullReplicasTest
specifier|public
class|class
name|ChaosMonkeySafeLeaderWithPullReplicasTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|RUN_LENGTH
specifier|private
specifier|static
specifier|final
name|Integer
name|RUN_LENGTH
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.tests.cloud.cm.runlength"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|useTlogReplicas
specifier|private
specifier|final
name|boolean
name|useTlogReplicas
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
DECL|field|numPullReplicas
specifier|private
specifier|final
name|int
name|numPullReplicas
decl_stmt|;
DECL|field|numRealtimeOrTlogReplicas
specifier|private
specifier|final
name|int
name|numRealtimeOrTlogReplicas
decl_stmt|;
annotation|@
name|Override
DECL|method|getPullReplicaCount
specifier|protected
name|int
name|getPullReplicaCount
parameter_list|()
block|{
return|return
name|numPullReplicas
return|;
block|}
annotation|@
name|Override
DECL|method|useTlogReplicas
specifier|protected
name|boolean
name|useTlogReplicas
parameter_list|()
block|{
return|return
name|useTlogReplicas
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
block|{
name|schemaString
operator|=
literal|"schema15.xml"
expr_stmt|;
comment|// we need a string id
if|if
condition|(
name|usually
argument_list|()
condition|)
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.autoCommit.maxTime"
argument_list|,
literal|"15000"
argument_list|)
expr_stmt|;
block|}
name|TestInjection
operator|.
name|waitForReplicasInSync
operator|=
literal|null
expr_stmt|;
name|setErrorHook
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterSuperClass
specifier|public
specifier|static
name|void
name|afterSuperClass
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.autoCommit.maxTime"
argument_list|)
expr_stmt|;
name|clearErrorHook
argument_list|()
expr_stmt|;
name|TestInjection
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
DECL|field|fieldNames
specifier|protected
specifier|static
specifier|final
name|String
index|[]
name|fieldNames
init|=
operator|new
name|String
index|[]
block|{
literal|"f_i"
block|,
literal|"f_f"
block|,
literal|"f_d"
block|,
literal|"f_l"
block|,
literal|"f_dt"
block|}
decl_stmt|;
DECL|field|randVals
specifier|protected
specifier|static
specifier|final
name|RandVal
index|[]
name|randVals
init|=
operator|new
name|RandVal
index|[]
block|{
name|rint
block|,
name|rfloat
block|,
name|rdouble
block|,
name|rlong
block|,
name|rdate
block|}
decl_stmt|;
DECL|method|getFieldNames
specifier|public
name|String
index|[]
name|getFieldNames
parameter_list|()
block|{
return|return
name|fieldNames
return|;
block|}
DECL|method|getRandValues
specifier|public
name|RandVal
index|[]
name|getRandValues
parameter_list|()
block|{
return|return
name|randVals
return|;
block|}
annotation|@
name|Override
DECL|method|distribSetUp
specifier|public
name|void
name|distribSetUp
parameter_list|()
throws|throws
name|Exception
block|{
name|useFactory
argument_list|(
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
name|super
operator|.
name|distribSetUp
argument_list|()
expr_stmt|;
block|}
DECL|method|ChaosMonkeySafeLeaderWithPullReplicasTest
specifier|public
name|ChaosMonkeySafeLeaderWithPullReplicasTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|numPullReplicas
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|3
else|:
literal|2
argument_list|)
operator|+
literal|1
expr_stmt|;
empty_stmt|;
name|numRealtimeOrTlogReplicas
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|3
else|:
literal|2
argument_list|)
operator|+
literal|1
expr_stmt|;
empty_stmt|;
name|sliceCount
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"solr.tests.cloud.cm.slicecount"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceCount
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceCount
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|3
else|:
literal|2
argument_list|)
operator|+
literal|1
expr_stmt|;
block|}
name|int
name|numNodes
init|=
name|sliceCount
operator|*
operator|(
name|numRealtimeOrTlogReplicas
operator|+
name|numPullReplicas
operator|)
decl_stmt|;
name|fixShardCount
argument_list|(
name|numNodes
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Starting ChaosMonkey test with {} shards and {} nodes"
argument_list|,
name|sliceCount
argument_list|,
name|numNodes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|DocCollection
name|docCollection
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|this
operator|.
name|sliceCount
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of replicas. Collection: "
operator|+
name|docCollection
argument_list|,
name|numRealtimeOrTlogReplicas
operator|+
name|numPullReplicas
argument_list|,
name|s
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of pull replicas. Collection: "
operator|+
name|docCollection
argument_list|,
name|numPullReplicas
argument_list|,
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|useTlogReplicas
argument_list|()
condition|?
literal|0
else|:
name|numRealtimeOrTlogReplicas
argument_list|,
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|useTlogReplicas
argument_list|()
condition|?
name|numRealtimeOrTlogReplicas
else|:
literal|0
argument_list|,
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
comment|// randomly turn on 1 seconds 'soft' commit
name|randomlyEnableAutoSoftCommit
argument_list|()
expr_stmt|;
name|tryDelete
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|StoppableThread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|threadCount
init|=
literal|2
decl_stmt|;
name|int
name|batchSize
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|batchSize
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|98
argument_list|)
operator|+
literal|2
expr_stmt|;
block|}
name|boolean
name|pauseBetweenUpdates
init|=
name|TEST_NIGHTLY
condition|?
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
else|:
literal|true
decl_stmt|;
name|int
name|maxUpdates
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|!
name|pauseBetweenUpdates
condition|)
block|{
name|maxUpdates
operator|=
literal|1000
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|maxUpdates
operator|=
literal|15000
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadCount
condition|;
name|i
operator|++
control|)
block|{
name|StoppableIndexingThread
name|indexThread
init|=
operator|new
name|StoppableIndexingThread
argument_list|(
name|controlClient
argument_list|,
name|cloudClient
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|,
literal|true
argument_list|,
name|maxUpdates
argument_list|,
name|batchSize
argument_list|,
name|pauseBetweenUpdates
argument_list|)
decl_stmt|;
comment|// random().nextInt(999) + 1
name|threads
operator|.
name|add
argument_list|(
name|indexThread
argument_list|)
expr_stmt|;
name|indexThread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|StoppableCommitThread
name|commitThread
init|=
operator|new
name|StoppableCommitThread
argument_list|(
name|cloudClient
argument_list|,
literal|1000
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|commitThread
argument_list|)
expr_stmt|;
name|commitThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|chaosMonkey
operator|.
name|startTheMonkey
argument_list|(
literal|false
argument_list|,
literal|500
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|runLength
decl_stmt|;
if|if
condition|(
name|RUN_LENGTH
operator|!=
operator|-
literal|1
condition|)
block|{
name|runLength
operator|=
name|RUN_LENGTH
expr_stmt|;
block|}
else|else
block|{
name|int
index|[]
name|runTimes
decl_stmt|;
if|if
condition|(
name|TEST_NIGHTLY
condition|)
block|{
name|runTimes
operator|=
operator|new
name|int
index|[]
block|{
literal|5000
block|,
literal|6000
block|,
literal|10000
block|,
literal|15000
block|,
literal|25000
block|,
literal|30000
block|,
literal|30000
block|,
literal|45000
block|,
literal|90000
block|,
literal|120000
block|}
expr_stmt|;
block|}
else|else
block|{
name|runTimes
operator|=
operator|new
name|int
index|[]
block|{
literal|5000
block|,
literal|7000
block|,
literal|15000
block|}
expr_stmt|;
block|}
name|runLength
operator|=
name|runTimes
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|runTimes
operator|.
name|length
operator|-
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
name|ChaosMonkey
operator|.
name|wait
argument_list|(
name|runLength
argument_list|,
name|DEFAULT_COLLECTION
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|chaosMonkey
operator|.
name|stopTheMonkey
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|StoppableThread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|safeStop
argument_list|()
expr_stmt|;
block|}
comment|// wait for stop...
for|for
control|(
name|StoppableThread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|StoppableThread
name|thread
range|:
name|threads
control|)
block|{
if|if
condition|(
name|thread
operator|instanceof
name|StoppableIndexingThread
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|StoppableIndexingThread
operator|)
name|thread
operator|)
operator|.
name|getFailCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// try and wait for any replications and what not to finish...
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|180000
argument_list|)
expr_stmt|;
comment|// even if things were leveled out, a jetty may have just been stopped or something
comment|// we wait again and wait to level out again to make sure the system is not still in flux
name|Thread
operator|.
name|sleep
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|waitForThingsToLevelOut
argument_list|(
literal|180000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"control docs:"
operator|+
name|controlClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"collection state: "
operator|+
name|printClusterStateInfo
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
argument_list|)
expr_stmt|;
name|waitForReplicationFromReplicas
argument_list|(
name|DEFAULT_COLLECTION
argument_list|,
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|//    waitForAllWarmingSearchers();
name|checkShardConsistency
argument_list|(
name|batchSize
operator|==
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// try and make a collection to make sure the overseer has survived the expiration and session loss
comment|// sometimes we restart zookeeper as well
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|zkServer
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|zkServer
operator|=
operator|new
name|ZkTestServer
argument_list|(
name|zkServer
operator|.
name|getZkDir
argument_list|()
argument_list|,
name|zkServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|zkServer
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|CloudSolrClient
name|client
init|=
name|createCloudClient
argument_list|(
literal|"collection1"
argument_list|)
init|)
block|{
name|createCollection
argument_list|(
literal|null
argument_list|,
literal|"testcollection"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
name|client
argument_list|,
literal|null
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Integer
argument_list|>
name|numShardsNumReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|numShardsNumReplicas
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|numShardsNumReplicas
operator|.
name|add
argument_list|(
literal|1
operator|+
name|getPullReplicaCount
argument_list|()
argument_list|)
expr_stmt|;
name|checkForCollection
argument_list|(
literal|"testcollection"
argument_list|,
name|numShardsNumReplicas
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|tryDelete
specifier|private
name|void
name|tryDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|long
name|timeout
init|=
name|start
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
try|try
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|SolrException
name|e
parameter_list|)
block|{
comment|// cluster may not be up yet
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
comment|// skip the randoms - they can deadlock...
annotation|@
name|Override
DECL|method|indexr
specifier|protected
name|void
name|indexr
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
literal|"rnd_b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

