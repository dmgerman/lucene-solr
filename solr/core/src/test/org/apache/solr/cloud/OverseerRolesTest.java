begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerCollectionConfigSetProcessor
operator|.
name|getLeaderNode
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerTaskProcessor
operator|.
name|getSortedElectionNodes
import|;
end_import

begin_class
DECL|class|OverseerRolesTest
specifier|public
class|class
name|OverseerRolesTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
DECL|method|waitForNewOverseer
specifier|private
name|void
name|waitForNewOverseer
parameter_list|(
name|int
name|seconds
parameter_list|,
name|Predicate
argument_list|<
name|String
argument_list|>
name|state
parameter_list|)
throws|throws
name|Exception
block|{
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
name|seconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|String
name|current
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|timeout
operator|.
name|hasTimedOut
argument_list|()
operator|==
literal|false
condition|)
block|{
name|current
operator|=
name|OverseerCollectionConfigSetProcessor
operator|.
name|getLeaderNode
argument_list|(
name|zkClient
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|.
name|test
argument_list|(
name|current
argument_list|)
condition|)
return|return;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|(
literal|"Timed out waiting for overseer state change"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNewOverseer
specifier|private
name|void
name|waitForNewOverseer
parameter_list|(
name|int
name|seconds
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|waitForNewOverseer
argument_list|(
name|seconds
argument_list|,
name|s
lambda|->
name|Objects
operator|.
name|equals
argument_list|(
name|s
argument_list|,
name|expected
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getOverseerJetty
specifier|private
name|JettySolrRunner
name|getOverseerJetty
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|overseer
init|=
name|getLeaderNode
argument_list|(
name|zkClient
argument_list|()
argument_list|)
decl_stmt|;
name|URL
name|overseerUrl
init|=
operator|new
name|URL
argument_list|(
literal|"http://"
operator|+
name|overseer
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|overseer
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|hostPort
init|=
name|overseerUrl
operator|.
name|getPort
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|getPort
argument_list|()
operator|==
name|hostPort
condition|)
return|return
name|jetty
return|;
block|}
name|fail
argument_list|(
literal|"Couldn't find overseer node "
operator|+
name|overseer
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// to keep the compiler happy
block|}
DECL|method|logOverseerState
specifier|private
name|void
name|logOverseerState
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Overseer: {}"
argument_list|,
name|getLeaderNode
argument_list|(
name|zkClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Election queue: "
argument_list|,
name|getSortedElectionNodes
argument_list|(
name|zkClient
argument_list|()
argument_list|,
literal|"/overseer_elect/election"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverseerRole
specifier|public
name|void
name|testOverseerRole
parameter_list|()
throws|throws
name|Exception
block|{
name|logOverseerState
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodes
init|=
name|OverseerCollectionConfigSetProcessor
operator|.
name|getSortedOverseerNodeNames
argument_list|(
name|zkClient
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|overseer1
init|=
name|OverseerCollectionConfigSetProcessor
operator|.
name|getLeaderNode
argument_list|(
name|zkClient
argument_list|()
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|remove
argument_list|(
name|overseer1
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|overseer2
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"### Setting overseer designate {}"
argument_list|,
name|overseer2
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addRole
argument_list|(
name|overseer2
argument_list|,
literal|"overseer"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNewOverseer
argument_list|(
literal|15
argument_list|,
name|overseer2
argument_list|)
expr_stmt|;
comment|//add another node as overseer
name|nodes
operator|.
name|remove
argument_list|(
name|overseer2
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|overseer3
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"### Adding another overseer designate {}"
argument_list|,
name|overseer3
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addRole
argument_list|(
name|overseer3
argument_list|,
literal|"overseer"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// kill the current overseer, and check that the new designate becomes the new overseer
name|JettySolrRunner
name|leaderJetty
init|=
name|getOverseerJetty
argument_list|()
decl_stmt|;
name|logOverseerState
argument_list|()
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|leaderJetty
argument_list|)
expr_stmt|;
name|waitForNewOverseer
argument_list|(
literal|10
argument_list|,
name|overseer3
argument_list|)
expr_stmt|;
comment|// add another node as overseer
name|nodes
operator|.
name|remove
argument_list|(
name|overseer3
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|overseer4
init|=
name|nodes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"### Adding last overseer designate {}"
argument_list|,
name|overseer4
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addRole
argument_list|(
name|overseer4
argument_list|,
literal|"overseer"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|logOverseerState
argument_list|()
expr_stmt|;
comment|// remove the overseer role from the current overseer
name|CollectionAdminRequest
operator|.
name|removeRole
argument_list|(
name|overseer3
argument_list|,
literal|"overseer"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNewOverseer
argument_list|(
literal|15
argument_list|,
name|overseer4
argument_list|)
expr_stmt|;
comment|// Add it back again - we now have two delegates, 4 and 3
name|CollectionAdminRequest
operator|.
name|addRole
argument_list|(
name|overseer3
argument_list|,
literal|"overseer"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// explicitly tell the overseer to quit
name|String
name|leaderId
init|=
name|OverseerCollectionConfigSetProcessor
operator|.
name|getLeaderId
argument_list|(
name|zkClient
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|leader
init|=
name|OverseerCollectionConfigSetProcessor
operator|.
name|getLeaderNode
argument_list|(
name|zkClient
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"### Sending QUIT to overseer {}"
argument_list|,
name|leader
argument_list|)
expr_stmt|;
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|zkClient
argument_list|()
argument_list|)
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
operator|new
name|ZkNodeProps
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|QUIT
operator|.
name|toLower
argument_list|()
argument_list|,
literal|"id"
argument_list|,
name|leaderId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|waitForNewOverseer
argument_list|(
literal|15
argument_list|,
name|s
lambda|->
name|Objects
operator|.
name|equals
argument_list|(
name|leader
argument_list|,
name|s
argument_list|)
operator|==
literal|false
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|logOverseerState
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"The old leader should have rejoined election"
argument_list|,
name|OverseerCollectionConfigSetProcessor
operator|.
name|getSortedOverseerNodeNames
argument_list|(
name|zkClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|leader
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

