begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.rule
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|rule
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|GenericSolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|COLLECTIONS_HANDLER_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|matchers
operator|.
name|JUnitMatchers
operator|.
name|containsString
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|Slow
DECL|class|RulesTest
specifier|public
class|class
name|RulesTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|5
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Test
DECL|method|doIntegrationTest
specifier|public
name|void
name|doIntegrationTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|minGB
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"doIntegrationTest needs minGB="
operator|+
name|minGB
operator|+
literal|" usable disk space"
argument_list|,
name|ImplicitSnitch
operator|.
name|getUsableSpaceInGB
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|>
name|minGB
argument_list|)
expr_stmt|;
name|String
name|rulesColl
init|=
literal|"rulesColl"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
name|rulesColl
argument_list|,
literal|"conf"
argument_list|,
literal|"shard1"
argument_list|,
literal|2
argument_list|)
operator|.
name|setRule
argument_list|(
literal|"cores:<4"
argument_list|,
literal|"node:*,replica:<2"
argument_list|,
literal|"freedisk:>"
operator|+
name|minGB
argument_list|)
operator|.
name|setSnitch
argument_list|(
literal|"class:ImplicitSnitch"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|rulesCollection
init|=
name|getCollectionState
argument_list|(
name|rulesColl
argument_list|)
decl_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<4"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"cores"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<2"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"replica"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">"
operator|+
name|minGB
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"freedisk"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"snitch"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ImplicitSnitch"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createShard
argument_list|(
name|rulesColl
argument_list|,
literal|"shard2"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|rulesColl
argument_list|,
literal|"shard2"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|rulesColl
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPortRule
specifier|public
name|void
name|testPortRule
parameter_list|()
throws|throws
name|Exception
block|{
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|port
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|jetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|rulesColl
init|=
literal|"portRuleColl"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
name|rulesColl
argument_list|,
literal|"conf"
argument_list|,
literal|"shard1"
argument_list|,
literal|2
argument_list|)
operator|.
name|setRule
argument_list|(
literal|"port:"
operator|+
name|port
argument_list|)
operator|.
name|setSnitch
argument_list|(
literal|"class:ImplicitSnitch"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|rulesCollection
init|=
name|getCollectionState
argument_list|(
name|rulesColl
argument_list|)
decl_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|port
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"port"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"snitch"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ImplicitSnitch"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|rulesColl
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHostFragmentRule
specifier|public
name|void
name|testHostFragmentRule
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rulesColl
init|=
literal|"hostFragment"
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
index|[]
name|ipFragments
init|=
name|host
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|ip_1
init|=
name|ipFragments
index|[
name|ipFragments
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|ip_2
init|=
name|ipFragments
index|[
name|ipFragments
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
name|rulesColl
argument_list|,
literal|"conf"
argument_list|,
literal|"shard1"
argument_list|,
literal|2
argument_list|)
operator|.
name|setRule
argument_list|(
literal|"ip_2:"
operator|+
name|ip_2
argument_list|,
literal|"ip_1:"
operator|+
name|ip_1
argument_list|)
operator|.
name|setSnitch
argument_list|(
literal|"class:ImplicitSnitch"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|rulesCollection
init|=
name|getCollectionState
argument_list|(
name|rulesColl
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ip_2
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"ip_2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ip_1
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"ip_1"
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"snitch"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ImplicitSnitch"
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|rulesColl
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch
specifier|public
name|void
name|testHostFragmentRuleThrowsExceptionWhenIpDoesNotMatch
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|rulesColl
init|=
literal|"ipRuleColl"
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|host
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|getHost
argument_list|()
decl_stmt|;
name|String
index|[]
name|ipFragments
init|=
name|host
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|ip_1
init|=
name|ipFragments
index|[
name|ipFragments
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|String
name|ip_2
init|=
name|ipFragments
index|[
name|ipFragments
operator|.
name|length
operator|-
literal|2
index|]
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|HttpSolrClient
operator|.
name|RemoteSolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
name|containsString
argument_list|(
literal|"ip_1"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
name|rulesColl
argument_list|,
literal|"conf"
argument_list|,
literal|"shard1"
argument_list|,
literal|2
argument_list|)
operator|.
name|setRule
argument_list|(
literal|"ip_2:"
operator|+
name|ip_2
argument_list|,
literal|"ip_1:"
operator|+
name|ip_1
operator|+
literal|"9999"
argument_list|)
operator|.
name|setSnitch
argument_list|(
literal|"class:ImplicitSnitch"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|rulesColl
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testModifyColl
specifier|public
name|void
name|testModifyColl
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|long
name|minGB1
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|long
name|minGB2
init|=
literal|5
decl_stmt|;
name|assumeTrue
argument_list|(
literal|"testModifyColl needs minGB1="
operator|+
name|minGB1
operator|+
literal|" usable disk space"
argument_list|,
name|ImplicitSnitch
operator|.
name|getUsableSpaceInGB
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|>
name|minGB1
argument_list|)
expr_stmt|;
name|assumeTrue
argument_list|(
literal|"testModifyColl needs minGB2="
operator|+
name|minGB2
operator|+
literal|" usable disk space"
argument_list|,
name|ImplicitSnitch
operator|.
name|getUsableSpaceInGB
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
argument_list|)
operator|>
name|minGB2
argument_list|)
expr_stmt|;
name|String
name|rulesColl
init|=
literal|"modifyColl"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|rulesColl
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|setRule
argument_list|(
literal|"cores:<4"
argument_list|,
literal|"node:*,replica:1"
argument_list|,
literal|"freedisk:>"
operator|+
name|minGB1
argument_list|)
operator|.
name|setSnitch
argument_list|(
literal|"class:ImplicitSnitch"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: Make a MODIFYCOLLECTION SolrJ class
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"collection"
argument_list|,
name|rulesColl
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"action"
argument_list|,
literal|"MODIFYCOLLECTION"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"rule"
argument_list|,
literal|"cores:<5"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"rule"
argument_list|,
literal|"node:*,replica:1"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"rule"
argument_list|,
literal|"freedisk:>"
operator|+
name|minGB2
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"autoAddReplicas"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
operator|new
name|GenericSolrRequest
argument_list|(
name|POST
argument_list|,
name|COLLECTIONS_HANDLER_PATH
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|rulesCollection
init|=
name|getCollectionState
argument_list|(
name|rulesColl
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"version_of_coll {}  "
argument_list|,
name|rulesCollection
operator|.
name|getZNodeVersion
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|list
init|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"rule"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<5"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"cores"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"replica"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|">"
operator|+
name|minGB2
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"freedisk"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rulesCollection
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"autoAddReplicas"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|=
operator|(
name|List
operator|)
name|rulesCollection
operator|.
name|get
argument_list|(
literal|"snitch"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ImplicitSnitch"
argument_list|,
operator|(
operator|(
name|Map
operator|)
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"class"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|rulesColl
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

