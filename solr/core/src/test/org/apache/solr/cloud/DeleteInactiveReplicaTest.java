begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|DeleteInactiveReplicaTest
specifier|public
class|class
name|DeleteInactiveReplicaTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|withProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"false"
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteInactiveReplicaTest
specifier|public
name|void
name|deleteInactiveReplicaTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"delDeadColl"
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|int
name|numShards
init|=
literal|2
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
operator|(
name|numShards
operator|+
literal|1
operator|)
operator|*
name|replicationFactor
operator|)
operator|/
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
name|maxShardsPerNode
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected a cluster of 2 shards and 2 replicas"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
return|return
name|DocCollection
operator|.
name|isFullyActive
argument_list|(
name|n
argument_list|,
name|c
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
name|DocCollection
name|collectionState
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|shard
init|=
name|getRandomShard
argument_list|(
name|collectionState
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|getRandomReplica
argument_list|(
name|shard
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|replica
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|stopJettySolrRunner
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected replica "
operator|+
name|replica
operator|.
name|getName
argument_list|()
operator|+
literal|" on down node to be removed from cluster state"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
name|Replica
name|r
init|=
name|c
operator|.
name|getReplica
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|r
operator|==
literal|null
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
return|;
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Removing replica {}/{} "
argument_list|,
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
name|shard
operator|.
name|getName
argument_list|()
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected deleted replica "
operator|+
name|replica
operator|.
name|getName
argument_list|()
operator|+
literal|" to be removed from cluster state"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
return|return
name|c
operator|.
name|getReplica
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
operator|==
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|startJettySolrRunner
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"restarted jetty"
argument_list|)
expr_stmt|;
name|CoreContainer
name|cc
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|CoreContainer
operator|.
name|CoreLoadFailure
name|loadFailure
init|=
name|cc
operator|.
name|getCoreInitFailures
argument_list|()
operator|.
name|get
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Deleted core was still loaded!"
argument_list|,
name|loadFailure
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected load failure message: "
operator|+
name|loadFailure
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|,
name|loadFailure
operator|.
name|exception
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"does not exist in shard"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that we can't create a core with no coreNodeName
try|try
init|(
name|SolrClient
name|queryClient
init|=
name|getHttpSolrClient
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
init|)
block|{
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|CoreAdminRequest
operator|.
name|Create
name|createRequest
init|=
operator|new
name|CoreAdminRequest
operator|.
name|Create
argument_list|()
decl_stmt|;
name|createRequest
operator|.
name|setCoreName
argument_list|(
literal|"testcore"
argument_list|)
expr_stmt|;
name|createRequest
operator|.
name|setCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|createRequest
operator|.
name|setShardId
argument_list|(
literal|"shard2"
argument_list|)
expr_stmt|;
name|queryClient
operator|.
name|request
argument_list|(
name|createRequest
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected error message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"coreNodeName missing"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

