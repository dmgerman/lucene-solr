begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|schema
operator|.
name|SchemaRequest
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestSegmentSorting
specifier|public
class|class
name|TestSegmentSorting
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NUM_SERVERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SERVERS
init|=
literal|5
decl_stmt|;
DECL|field|NUM_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|REPLICATION_FACTOR
init|=
literal|2
decl_stmt|;
DECL|field|configName
specifier|private
specifier|static
specifier|final
name|String
name|configName
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
operator|+
literal|"_configSet"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
name|NUM_SERVERS
argument_list|)
operator|.
name|addConfig
argument_list|(
name|configName
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|,
literal|"collection1"
argument_list|,
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
DECL|field|testName
annotation|@
name|Rule
specifier|public
name|TestName
name|testName
init|=
operator|new
name|TestName
argument_list|()
decl_stmt|;
annotation|@
name|After
DECL|method|ensureClusterEmpty
specifier|public
name|void
name|ensureClusterEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|deleteAllCollections
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|setDefaultCollection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|createCollection
specifier|public
name|void
name|createCollection
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
name|testName
operator|.
name|getMethodName
argument_list|()
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
literal|"solrconfig-sortingmergepolicyfactory.xml"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|cmd
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
name|configName
argument_list|,
name|NUM_SHARDS
argument_list|,
name|REPLICATION_FACTOR
argument_list|)
operator|.
name|setProperties
argument_list|(
name|collectionProperties
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertTrue
argument_list|(
name|cmd
operator|.
name|process
argument_list|(
name|cloudSolrClient
argument_list|)
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// async
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|cmd
operator|.
name|processAndWait
argument_list|(
name|cloudSolrClient
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
DECL|method|testSegmentTerminateEarly
specifier|public
name|void
name|testSegmentTerminateEarly
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SegmentTerminateEarlyTestState
name|tstes
init|=
operator|new
name|SegmentTerminateEarlyTestState
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// add some documents, then optimize to get merged-sorted segments
name|tstes
operator|.
name|addDocuments
argument_list|(
name|cloudSolrClient
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent
name|tstes
operator|.
name|queryTimestampDescending
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
comment|// add a few more documents, but don't optimize to have some not-merge-sorted segments
name|tstes
operator|.
name|addDocuments
argument_list|(
name|cloudSolrClient
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// CommonParams.SEGMENT_TERMINATE_EARLY parameter now present
name|tstes
operator|.
name|queryTimestampDescendingSegmentTerminateEarlyYes
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
name|tstes
operator|.
name|queryTimestampDescendingSegmentTerminateEarlyNo
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
comment|// CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used
name|tstes
operator|.
name|queryTimestampDescendingSegmentTerminateEarlyYesGrouped
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
name|tstes
operator|.
name|queryTimestampAscendingSegmentTerminateEarlyYes
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
comment|// uses a sort order that is _not_ compatible with the merge sort order
block|}
comment|/**     * Verify that atomic updates against our (DVO) segment sort field doesn't cause errors.    * In this situation, the updates should *NOT* be done inplace, because that would    * break the index sorting    */
DECL|method|testAtomicUpdateOfSegmentSortField
specifier|public
name|void
name|testAtomicUpdateOfSegmentSortField
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
specifier|final
name|String
name|updateField
init|=
name|SegmentTerminateEarlyTestState
operator|.
name|timestampField
decl_stmt|;
comment|// sanity check that updateField is in fact a DocValues only field, meaning it
comment|// would normally be eligable for inplace updates -- if it weren't also used for merge sorting
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|schemaOpts
init|=
operator|new
name|Field
argument_list|(
name|updateField
argument_list|,
name|params
argument_list|(
literal|"includeDynamic"
argument_list|,
literal|"true"
argument_list|,
literal|"showDefaults"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudSolrClient
argument_list|)
operator|.
name|getField
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|schemaOpts
operator|.
name|get
argument_list|(
literal|"docValues"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|schemaOpts
operator|.
name|get
argument_list|(
literal|"indexed"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|schemaOpts
operator|.
name|get
argument_list|(
literal|"stored"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add some documents
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|id
init|=
literal|1
init|;
name|id
operator|<=
name|numDocs
condition|;
name|id
operator|++
control|)
block|{
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
name|updateField
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// do some random iterations of replacing docs, atomic updates against segment sort field, and commits
comment|// (at this point we're just sanity checking no serious failures)
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|20
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|int
name|iterSize
init|=
name|atLeast
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterSize
condition|;
name|i
operator|++
control|)
block|{
comment|// replace
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numDocs
argument_list|)
argument_list|,
name|updateField
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// atomic update
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numDocs
argument_list|)
argument_list|,
name|updateField
argument_list|,
name|map
argument_list|(
literal|"set"
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// pick a random doc, and verify that doing an atomic update causes the docid to change
comment|// ie: not an inplace update
specifier|final
name|int
name|id
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|numDocs
argument_list|)
decl_stmt|;
specifier|final
name|int
name|oldDocId
init|=
operator|(
name|Integer
operator|)
name|cloudSolrClient
operator|.
name|getById
argument_list|(
literal|""
operator|+
name|id
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"[docid]"
argument_list|)
decl_stmt|;
name|cloudSolrClient
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
name|updateField
argument_list|,
name|map
argument_list|(
literal|"inc"
argument_list|,
literal|"666"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cloudSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// loop incase we're waiting for a newSearcher to be opened
name|int
name|newDocId
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|attempts
init|=
literal|10
decl_stmt|;
while|while
condition|(
operator|(
name|newDocId
operator|<
literal|0
operator|)
operator|&&
operator|(
literal|0
operator|<
name|attempts
operator|--
operator|)
condition|)
block|{
name|SolrDocumentList
name|docs
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|id
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fq"
argument_list|,
name|updateField
operator|+
literal|"[666 TO *]"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|docs
operator|.
name|size
argument_list|()
condition|)
block|{
name|newDocId
operator|=
operator|(
name|Integer
operator|)
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"[docid]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|oldDocId
operator|!=
name|newDocId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

