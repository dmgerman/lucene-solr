begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TieredMergePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|index
operator|.
name|TieredMergePolicyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestSegmentSorting
specifier|public
class|class
name|TestSegmentSorting
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|NUM_SERVERS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SERVERS
init|=
literal|5
decl_stmt|;
DECL|field|NUM_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|REPLICATION_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|REPLICATION_FACTOR
init|=
literal|2
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
name|NUM_SERVERS
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|ensureClusterEmpty
specifier|public
name|void
name|ensureClusterEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|deleteAllCollections
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|setDefaultCollection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|MiniSolrCloudCluster
name|miniCluster
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|createNodeSet
parameter_list|,
name|String
name|asyncId
parameter_list|,
name|Boolean
name|indexToPersist
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|configName
init|=
literal|"solrCloudCollectionConfig"
decl_stmt|;
name|miniCluster
operator|.
name|uploadConfigSet
argument_list|(
name|SolrTestCaseJ4
operator|.
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"collection1"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|,
name|configName
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|persistIndex
init|=
operator|(
name|indexToPersist
operator|!=
literal|null
condition|?
name|indexToPersist
operator|.
name|booleanValue
argument_list|()
else|:
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
operator|)
decl_stmt|;
if|if
condition|(
name|collectionProperties
operator|==
literal|null
condition|)
block|{
name|collectionProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
literal|"solrconfig-tlog.xml"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.maxBufferedDocs"
argument_list|,
literal|"100000"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.ramBufferSizeMB"
argument_list|,
literal|"100"
argument_list|)
expr_stmt|;
comment|// use non-test classes so RandomizedRunner isn't necessary
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|SolrTestCaseJ4
operator|.
name|SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICY
argument_list|,
name|TieredMergePolicy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|SolrTestCaseJ4
operator|.
name|SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|SolrTestCaseJ4
operator|.
name|SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|SolrTestCaseJ4
operator|.
name|SYSTEM_PROPERTY_SOLR_TESTS_MERGEPOLICYFACTORY
argument_list|,
name|TieredMergePolicyFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|SolrTestCaseJ4
operator|.
name|SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICYFACTORY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
name|SolrTestCaseJ4
operator|.
name|SYSTEM_PROPERTY_SOLR_TESTS_USEMERGEPOLICY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
block|}
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.tests.mergeScheduler"
argument_list|,
literal|"org.apache.lucene.index.ConcurrentMergeScheduler"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|putIfAbsent
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
operator|(
name|persistIndex
condition|?
literal|"solr.StandardDirectoryFactory"
else|:
literal|"solr.RAMDirectoryFactory"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|asyncId
operator|==
literal|null
condition|)
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
name|configName
argument_list|,
name|NUM_SHARDS
argument_list|,
name|REPLICATION_FACTOR
argument_list|)
operator|.
name|setCreateNodeSet
argument_list|(
name|createNodeSet
argument_list|)
operator|.
name|setProperties
argument_list|(
name|collectionProperties
argument_list|)
operator|.
name|process
argument_list|(
name|miniCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
name|configName
argument_list|,
name|NUM_SHARDS
argument_list|,
name|REPLICATION_FACTOR
argument_list|)
operator|.
name|setCreateNodeSet
argument_list|(
name|createNodeSet
argument_list|)
operator|.
name|setProperties
argument_list|(
name|collectionProperties
argument_list|)
operator|.
name|processAndWait
argument_list|(
name|miniCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testSegmentTerminateEarly
specifier|public
name|void
name|testSegmentTerminateEarly
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"testSegmentTerminateEarlyCollection"
decl_stmt|;
specifier|final
name|SegmentTerminateEarlyTestState
name|tstes
init|=
operator|new
name|SegmentTerminateEarlyTestState
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|cloudSolrClient
operator|.
name|setDefaultCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|// create collection
block|{
specifier|final
name|String
name|asyncId
init|=
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
literal|"asyncId("
operator|+
name|collectionName
operator|+
literal|".create)="
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
operator|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_CONFIG
argument_list|,
literal|"solrconfig-sortingmergepolicyfactory.xml"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|cluster
argument_list|,
name|collectionName
argument_list|,
literal|null
argument_list|,
name|asyncId
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|collectionProperties
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collectionName
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
comment|// add some documents, then optimize to get merged-sorted segments
name|tstes
operator|.
name|addDocuments
argument_list|(
name|cloudSolrClient
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// CommonParams.SEGMENT_TERMINATE_EARLY parameter intentionally absent
name|tstes
operator|.
name|queryTimestampDescending
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
comment|// add a few more documents, but don't optimize to have some not-merge-sorted segments
name|tstes
operator|.
name|addDocuments
argument_list|(
name|cloudSolrClient
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// CommonParams.SEGMENT_TERMINATE_EARLY parameter now present
name|tstes
operator|.
name|queryTimestampDescendingSegmentTerminateEarlyYes
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
name|tstes
operator|.
name|queryTimestampDescendingSegmentTerminateEarlyNo
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
comment|// CommonParams.SEGMENT_TERMINATE_EARLY parameter present but it won't be used
name|tstes
operator|.
name|queryTimestampDescendingSegmentTerminateEarlyYesGrouped
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
name|tstes
operator|.
name|queryTimestampAscendingSegmentTerminateEarlyYes
argument_list|(
name|cloudSolrClient
argument_list|)
expr_stmt|;
comment|// uses a sort order that is _not_ compatible with the merge sort order
block|}
block|}
end_class

end_unit

