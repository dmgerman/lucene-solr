begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CollectionStatePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|TestPullReplica
specifier|public
class|class
name|TestPullReplica
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|collectionName
specifier|private
name|String
name|collectionName
init|=
literal|null
decl_stmt|;
DECL|field|REPLICATION_TIMEOUT_SECS
specifier|private
specifier|final
specifier|static
name|int
name|REPLICATION_TIMEOUT_SECS
init|=
literal|10
decl_stmt|;
DECL|method|suggestedCollectionName
specifier|private
name|String
name|suggestedCollectionName
parameter_list|()
block|{
return|return
operator|(
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"Test"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"_"
operator|+
name|getTestName
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"(.)(\\p{Upper})"
argument_list|,
literal|"$1_$2"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|TestInjection
operator|.
name|waitForReplicasInSync
operator|=
literal|null
expr_stmt|;
comment|// We'll be explicit about this in this test
name|configureCluster
argument_list|(
literal|2
argument_list|)
comment|// 2 + random().nextInt(3)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|Boolean
name|useLegacyCloud
init|=
name|rarely
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using legacyCloud?: {}"
argument_list|,
name|useLegacyCloud
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|ClusterProp
name|clusterPropRequest
init|=
name|CollectionAdminRequest
operator|.
name|setClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|useLegacyCloud
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|clusterPropRequest
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownCluster
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
block|{
name|TestInjection
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|collectionName
operator|=
name|suggestedCollectionName
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|jetty
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Jetty {} not running, probably some bad test. Starting it"
argument_list|,
name|jetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"tearDown deleting collection"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Collection deleted"
argument_list|)
expr_stmt|;
name|waitForDeletion
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|2
argument_list|)
comment|// 2 times to make sure cleanup is complete and we can create the same collection
DECL|method|testCreateDelete
specifier|public
name|void
name|testCreateDelete
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|reloaded
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 4 relpicas per shard"
argument_list|,
literal|8
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 6 pull replicas, 3 per shard"
argument_list|,
literal|6
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 2 writer replicas, one per shard"
argument_list|,
literal|2
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|s
range|:
name|docCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
comment|// read-only replicas can never become leaders
name|assertFalse
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardElectionNodes
init|=
name|cluster
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersElectPath
argument_list|(
name|collectionName
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected election nodes for Shard: "
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|shardElectionNodes
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
literal|1
argument_list|,
name|shardElectionNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertUlogPresence
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
if|if
condition|(
name|reloaded
condition|)
block|{
break|break;
block|}
else|else
block|{
comment|// reload
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|reloadCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|reloaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|zkClient
argument_list|()
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Asserts that Update logs don't exist for replicas of type {@link org.apache.solr.common.cloud.Replica.Type#PULL}    */
DECL|method|assertUlogPresence
specifier|private
name|void
name|assertUlogPresence
parameter_list|(
name|DocCollection
name|collection
parameter_list|)
block|{
for|for
control|(
name|Slice
name|s
range|:
name|collection
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|r
range|:
name|s
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getType
argument_list|()
operator|==
name|Replica
operator|.
name|Type
operator|.
name|NRT
condition|)
block|{
continue|continue;
block|}
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
try|try
block|{
name|core
operator|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|r
argument_list|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCore
argument_list|(
name|r
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Update log should not exist for replicas of type Passive but file is present: "
operator|+
name|core
operator|.
name|getUlogDir
argument_list|()
argument_list|,
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|core
operator|.
name|getUlogDir
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAddDocs
specifier|public
name|void
name|testAddDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numReadOnlyReplicas
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|numReadOnlyReplicas
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected collection to be created with 1 shard and "
operator|+
operator|(
name|numReadOnlyReplicas
operator|+
literal|1
operator|)
operator|+
literal|" replicas"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
name|numReadOnlyReplicas
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|numReadOnlyReplicas
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|leaderClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaderClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
name|REPLICATION_TIMEOUT_SECS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
control|)
block|{
comment|//TODO: assert replication< REPLICATION_TIMEOUT_SECS
try|try
init|(
name|HttpSolrClient
name|readOnlyReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|r
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Replica "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|" not up to date after 10 seconds"
argument_list|,
literal|1
argument_list|,
name|readOnlyReplicaClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|SolrQuery
name|req
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"qt"
argument_list|,
literal|"/admin/plugins"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|QueryResponse
name|statsResponse
init|=
name|readOnlyReplicaClient
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Replicas shouldn't process the add document request: "
operator|+
name|statsResponse
argument_list|,
literal|0L
argument_list|,
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|statsResponse
operator|.
name|getResponse
argument_list|()
argument_list|)
operator|.
name|findRecursive
argument_list|(
literal|"plugins"
argument_list|,
literal|"UPDATE"
argument_list|,
literal|"updateHandler"
argument_list|,
literal|"stats"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"UPDATE.updateHandler.adds"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertUlogPresence
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddRemovePullReplica
specifier|public
name|void
name|testAddRemovePullReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|registerCore
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|//TODO: Why is this needed? see SOLR-9440
name|waitForState
argument_list|(
literal|"Expected collection to be created with 2 shards and 1 replica each"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|docCollection
operator|=
name|assertNumberOfReplicas
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard2"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|docCollection
operator|=
name|assertNumberOfReplicas
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting collection to have 2 shards and 2 replica each"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|//Delete pull replica from shard1
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertNumberOfReplicas
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveAllWriterReplicas
specifier|public
name|void
name|testRemoveAllWriterReplicas
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testKillLeader
specifier|public
name|void
name|testKillLeader
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestNoLeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Ignore until I figure out a way to reliably record state transitions"
argument_list|)
DECL|method|testPullReplicaStates
specifier|public
name|void
name|testPullReplicaStates
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Validate that pull replicas go through the correct states when starting, stopping, reconnecting
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?
name|waitForState
argument_list|(
literal|"Replica not added"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|addDocs
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Replica
operator|.
name|State
argument_list|>
name|statesSeen
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|registerCollectionStateWatcher
argument_list|(
name|collectionName
argument_list|,
parameter_list|(
name|liveNodes
parameter_list|,
name|collectionState
parameter_list|)
lambda|->
block|{
name|Replica
name|r
init|=
name|collectionState
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"core_node2"
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CollectionStateWatcher state change: {}"
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|statesSeen
operator|.
name|add
argument_list|(
name|r
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CollectionStateWatcher saw state: {}"
argument_list|,
name|r
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
return|;
block|}
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not added"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|zkClient
argument_list|()
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Saw states: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|statesSeen
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting DOWN->RECOVERING->ACTIVE but saw: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|statesSeen
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
literal|3
argument_list|,
name|statesSeen
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting DOWN->RECOVERING->ACTIVE but saw: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|statesSeen
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|,
name|statesSeen
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting DOWN->RECOVERING->ACTIVE but saw: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|statesSeen
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|RECOVERING
argument_list|,
name|statesSeen
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting DOWN->RECOVERING->ACTIVE but saw: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|statesSeen
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|statesSeen
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRealTimeGet
specifier|public
name|void
name|testRealTimeGet
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// should be redirected to Replica.Type.NRT
name|int
name|numReplicas
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
name|numReplicas
argument_list|,
literal|0
argument_list|,
name|numReplicas
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Unexpected replica count"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
name|numReplicas
argument_list|,
literal|0
argument_list|,
name|numReplicas
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
name|numReplicas
argument_list|,
literal|0
argument_list|,
name|numReplicas
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|rAdd
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|rAdd
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
init|)
block|{
name|client
operator|.
name|add
argument_list|(
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"foo_s"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrDocument
name|docCloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getById
argument_list|(
name|collectionName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|docCloudClient
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Replica
name|rGet
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|rGet
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
init|)
block|{
name|SolrDocument
name|doc
init|=
name|client
operator|.
name|getById
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|SolrDocumentList
name|previousAllIdsResult
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Replica
name|rAdd
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|rAdd
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
init|)
block|{
name|SolrDocumentList
name|allIdsResult
init|=
name|client
operator|.
name|getById
argument_list|(
name|ids
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousAllIdsResult
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|compareSolrDocumentList
argument_list|(
name|previousAllIdsResult
argument_list|,
name|allIdsResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set the first response here
name|previousAllIdsResult
operator|=
name|allIdsResult
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of documents"
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|,
name|allIdsResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|id
operator|++
expr_stmt|;
block|}
block|}
comment|/*    * validate that replication still happens on a new leader    */
DECL|method|doTestNoLeader
specifier|private
name|void
name|doTestNoLeader
parameter_list|(
name|boolean
name|removeReplica
parameter_list|)
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|registerCore
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|//TODO: Why is this needed? see SOLR-9440
name|waitForState
argument_list|(
literal|"Expected collection to be created with 1 shard and 2 replicas"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// Add a document and commit
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|leaderClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaderClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForNumDocsInAllReplicas
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Delete leader replica from shard1
name|ignoreException
argument_list|(
literal|"No registered leader was found"
argument_list|)
expr_stmt|;
comment|//These are expected
name|JettySolrRunner
name|leaderJetty
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|removeReplica
condition|)
block|{
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leaderJetty
operator|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|leaderJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Leader replica not removed"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for cluster state to be updated
name|waitForState
argument_list|(
literal|"Replica state not updated in cluster state"
argument_list|,
name|collectionName
argument_list|,
name|clusterStateReflectsActiveAndDownReplicas
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|docCollection
operator|=
name|assertNumberOfReplicas
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Check that there is no leader for the shard
name|Replica
name|leader
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getLeader
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|leader
operator|==
literal|null
operator|||
operator|!
name|leader
operator|.
name|isActive
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Pull replica on the other hand should be active
name|Replica
name|pullReplica
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|pullReplica
operator|.
name|isActive
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add document, this should fail since there is no leader. Pull replica should not accept the update
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"zoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also fails if I send the update to the pull replica explicitly
try|try
init|(
name|HttpSolrClient
name|pullReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"zoo"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Queries should still work
name|waitForNumDocsInAllReplicas
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add nrt replica back. Since there is no nrt now, new nrt will have no docs. There will be data loss, since the it will become the leader
comment|// and pull replicas will replicate from it. Maybe we want to change this. Replicate from pull replicas is not a good idea, since they
comment|// are by definition out of date.
if|if
condition|(
name|removeReplica
condition|)
block|{
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|leaderJetty
argument_list|)
expr_stmt|;
block|}
name|waitForState
argument_list|(
literal|"Expected collection to be 1x2"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|unIgnoreException
argument_list|(
literal|"No registered leader was found"
argument_list|)
expr_stmt|;
comment|// Should have a leader from now on
comment|// Validate that the new nrt replica is the leader now
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|docCollection
operator|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|leader
operator|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getLeader
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|leader
operator|!=
literal|null
operator|&&
name|leader
operator|.
name|isActive
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// If jetty is restarted, the replication is not forced, and replica doesn't replicate from leader until new docs are added. Is this the correct behavior? Why should these two cases be different?
if|if
condition|(
name|removeReplica
condition|)
block|{
comment|// Pull replicas will replicate the empty index if a new replica was added and becomes leader
name|waitForNumDocsInAllReplicas
argument_list|(
literal|0
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add docs agin
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"zoo"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|leaderClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|leaderClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaderClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForNumDocsInAllReplicas
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
argument_list|,
literal|"id:2"
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllReplicas
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testKillPullReplica
specifier|public
name|void
name|testKillPullReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|//    cluster.getSolrClient().getZkStateReader().registerCore(collectionName); //TODO: Is this needed?
name|waitForState
argument_list|(
literal|"Expected collection to be created with 1 shard and 2 replicas"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|pullReplicaJetty
init|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|pullReplicaJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not removed"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also wait for the replica to be placed in state="down"
name|waitForState
argument_list|(
literal|"Didn't update state"
argument_list|,
name|collectionName
argument_list|,
name|clusterStateReflectsActiveAndDownReplicas
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|pullReplicaJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not added"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testSearchWhileReplicationHappens
specifier|public
name|void
name|testSearchWhileReplicationHappens
parameter_list|()
block|{          }
DECL|method|waitForNumDocsInAllActiveReplicas
specifier|private
name|void
name|waitForNumDocsInAllActiveReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|waitForNumDocsInAllReplicas
argument_list|(
name|numDocs
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumDocsInAllReplicas
specifier|private
name|void
name|waitForNumDocsInAllReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|waitForNumDocsInAllReplicas
argument_list|(
name|numDocs
argument_list|,
name|replicas
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumDocsInAllReplicas
specifier|private
name|void
name|waitForNumDocsInAllReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
parameter_list|,
name|String
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
name|REPLICATION_TIMEOUT_SECS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|replicas
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|replicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|r
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Replica "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|" not up to date after "
operator|+
name|REPLICATION_TIMEOUT_SECS
operator|+
literal|" seconds"
argument_list|,
name|numDocs
argument_list|,
name|replicaClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|waitForDeletion
specifier|private
name|void
name|waitForDeletion
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Collection not yet deleted"
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out waiting for collection "
operator|+
name|collection
operator|+
literal|" to be deleted."
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
DECL|method|assertNumberOfReplicas
specifier|private
name|DocCollection
name|assertNumberOfReplicas
parameter_list|(
name|int
name|numNrtReplicas
parameter_list|,
name|int
name|numTlogReplicas
parameter_list|,
name|int
name|numPullReplicas
parameter_list|,
name|boolean
name|updateCollection
parameter_list|,
name|boolean
name|activeOnly
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|updateCollection
condition|)
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of writer replicas: "
operator|+
name|docCollection
argument_list|,
name|numNrtReplicas
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of pull replicas: "
operator|+
name|docCollection
argument_list|,
name|numPullReplicas
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of active replicas: "
operator|+
name|docCollection
argument_list|,
name|numTlogReplicas
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docCollection
return|;
block|}
comment|/*    * passes only if all replicas are active or down, and the "liveNodes" reflect the same status    */
DECL|method|clusterStateReflectsActiveAndDownReplicas
specifier|private
name|CollectionStatePredicate
name|clusterStateReflectsActiveAndDownReplicas
parameter_list|()
block|{
return|return
parameter_list|(
name|liveNodes
parameter_list|,
name|collectionState
parameter_list|)
lambda|->
block|{
for|for
control|(
name|Replica
name|r
range|:
name|collectionState
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|&&
name|r
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|&&
name|liveNodes
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
operator|!
name|liveNodes
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|;
block|}
DECL|method|activeReplicaCount
specifier|private
name|CollectionStatePredicate
name|activeReplicaCount
parameter_list|(
name|int
name|numNrtReplicas
parameter_list|,
name|int
name|numTlogReplicas
parameter_list|,
name|int
name|numPullReplicas
parameter_list|)
block|{
return|return
parameter_list|(
name|liveNodes
parameter_list|,
name|collectionState
parameter_list|)
lambda|->
block|{
name|int
name|nrtFound
init|=
literal|0
decl_stmt|,
name|tlogFound
init|=
literal|0
decl_stmt|,
name|pullFound
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|collectionState
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Slice
name|slice
range|:
name|collectionState
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|isActive
argument_list|(
name|liveNodes
argument_list|)
condition|)
switch|switch
condition|(
name|replica
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TLOG
case|:
name|tlogFound
operator|++
expr_stmt|;
break|break;
case|case
name|PULL
case|:
name|pullFound
operator|++
expr_stmt|;
break|break;
case|case
name|NRT
case|:
name|nrtFound
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected replica type"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|numNrtReplicas
operator|==
name|nrtFound
operator|&&
name|numTlogReplicas
operator|==
name|tlogFound
operator|&&
name|numPullReplicas
operator|==
name|pullFound
return|;
block|}
return|;
block|}
DECL|method|addDocs
specifier|private
name|void
name|addDocs
parameter_list|(
name|int
name|numDocs
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|add
argument_list|(
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"fieldName_s"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

