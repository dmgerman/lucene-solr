begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|schema
operator|.
name|SchemaRequest
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|schema
operator|.
name|SchemaResponse
operator|.
name|FieldResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|TestPseudoReturnFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**   * @see TestPseudoReturnFields   * @see TestRandomFlRTGCloud  */
end_comment

begin_class
DECL|class|TestCloudPseudoReturnFields
specifier|public
class|class
name|TestCloudPseudoReturnFields
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|DEBUG_LABEL
specifier|private
specifier|static
specifier|final
name|String
name|DEBUG_LABEL
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
DECL|field|COLLECTION_NAME
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_NAME
init|=
name|DEBUG_LABEL
operator|+
literal|"_collection"
decl_stmt|;
comment|/** A basic client for operations at the cloud level, default collection will be set */
DECL|field|CLOUD_CLIENT
specifier|private
specifier|static
name|CloudSolrClient
name|CLOUD_CLIENT
decl_stmt|;
comment|/** One client per node */
DECL|field|CLIENTS
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|HttpSolrClient
argument_list|>
name|CLIENTS
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|createMiniSolrCloudCluster
specifier|private
specifier|static
name|void
name|createMiniSolrCloudCluster
parameter_list|()
throws|throws
name|Exception
block|{
comment|// multi replicas should matter...
specifier|final
name|int
name|repFactor
init|=
name|usually
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
empty_stmt|;
comment|// ... but we definitely want to ensure forwarded requests to other shards work ...
specifier|final
name|int
name|numShards
init|=
literal|2
decl_stmt|;
comment|// ... including some forwarded requests from nodes not hosting a shard
specifier|final
name|int
name|numNodes
init|=
literal|1
operator|+
operator|(
name|numShards
operator|*
name|repFactor
operator|)
decl_stmt|;
specifier|final
name|String
name|configName
init|=
name|DEBUG_LABEL
operator|+
literal|"_config-set"
decl_stmt|;
specifier|final
name|Path
name|configDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|,
literal|"collection1"
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|configureCluster
argument_list|(
name|numNodes
argument_list|)
operator|.
name|addConfig
argument_list|(
name|configName
argument_list|,
name|configDir
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|collectionProperties
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
literal|"config"
argument_list|,
literal|"solrconfig-tlog.xml"
argument_list|)
expr_stmt|;
name|collectionProperties
operator|.
name|put
argument_list|(
literal|"schema"
argument_list|,
literal|"schema-psuedo-fields.xml"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|cluster
operator|.
name|createCollection
argument_list|(
name|COLLECTION_NAME
argument_list|,
name|numShards
argument_list|,
name|repFactor
argument_list|,
name|configName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|collectionProperties
argument_list|)
argument_list|)
expr_stmt|;
name|CLOUD_CLIENT
operator|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
expr_stmt|;
name|CLOUD_CLIENT
operator|.
name|setDefaultCollection
argument_list|(
name|COLLECTION_NAME
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
name|CLOUD_CLIENT
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|CLIENTS
operator|.
name|add
argument_list|(
name|getHttpSolrClient
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTION_NAME
operator|+
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"42"
argument_list|,
literal|"val_i"
argument_list|,
literal|"1"
argument_list|,
literal|"ssto"
argument_list|,
literal|"X"
argument_list|,
literal|"subject"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"43"
argument_list|,
literal|"val_i"
argument_list|,
literal|"9"
argument_list|,
literal|"ssto"
argument_list|,
literal|"X"
argument_list|,
literal|"subject"
argument_list|,
literal|"bbb"
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"44"
argument_list|,
literal|"val_i"
argument_list|,
literal|"4"
argument_list|,
literal|"ssto"
argument_list|,
literal|"X"
argument_list|,
literal|"subject"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"45"
argument_list|,
literal|"val_i"
argument_list|,
literal|"6"
argument_list|,
literal|"ssto"
argument_list|,
literal|"X"
argument_list|,
literal|"subject"
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"46"
argument_list|,
literal|"val_i"
argument_list|,
literal|"3"
argument_list|,
literal|"ssto"
argument_list|,
literal|"X"
argument_list|,
literal|"subject"
argument_list|,
literal|"ggg"
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|commit
argument_list|()
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
annotation|@
name|Before
DECL|method|addUncommittedDoc99
specifier|private
name|void
name|addUncommittedDoc99
parameter_list|()
throws|throws
name|Exception
block|{
comment|// uncommitted doc in transaction log at start of every test
comment|// Even if an RTG causes ulog to re-open realtime searcher, next test method
comment|// will get another copy of doc 99 in the ulog
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|CLOUD_CLIENT
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"99"
argument_list|,
literal|"val_i"
argument_list|,
literal|"1"
argument_list|,
literal|"ssto"
argument_list|,
literal|"X"
argument_list|,
literal|"subject"
argument_list|,
literal|"uncommitted"
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|private
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|Exception
block|{
name|CLOUD_CLIENT
operator|.
name|close
argument_list|()
expr_stmt|;
name|CLOUD_CLIENT
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|HttpSolrClient
name|client
range|:
name|CLIENTS
control|)
block|{
name|client
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|CLIENTS
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|Exception
block|{
comment|// the response writers used to consult isMultiValued on the field
comment|// but this doesn't work when you alias a single valued field to
comment|// a multi valued field (the field value is copied first, then
comment|// if the type lookup is done again later, we get the wrong thing). SOLR-4036
comment|// score as psuedo field - precondition checks
for|for
control|(
name|String
name|name
range|:
operator|new
name|String
index|[]
block|{
literal|"score"
block|,
literal|"val_ss"
block|}
control|)
block|{
try|try
block|{
name|FieldResponse
name|frsp
init|=
operator|new
name|Field
argument_list|(
name|name
argument_list|,
name|params
argument_list|(
literal|"includeDynamic"
argument_list|,
literal|"true"
argument_list|,
literal|"showDefaults"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|CLOUD_CLIENT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Test depends on a (dynamic) field matching '"
operator|+
name|name
operator|+
literal|"', Null response"
argument_list|,
name|frsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test depends on a (dynamic) field matching '"
operator|+
name|name
operator|+
literal|"', bad status: "
operator|+
name|frsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|frsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Test depends on a (dynamic) field matching '"
operator|+
name|name
operator|+
literal|"', schema was changed out from under us? ... "
operator|+
name|frsp
operator|.
name|toString
argument_list|()
argument_list|,
name|frsp
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test depends on a multivalued dynamic field matching '"
operator|+
name|name
operator|+
literal|"', schema was changed out from under us? ... "
operator|+
name|frsp
operator|.
name|toString
argument_list|()
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|frsp
operator|.
name|getField
argument_list|()
operator|.
name|get
argument_list|(
literal|"multiValued"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Couldn't fetch field for '"
operator|+
name|name
operator|+
literal|"' ... schema changed out from under us?"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|SolrDocument
name|doc
init|=
literal|null
decl_stmt|;
comment|// score as psuedo field
name|doc
operator|=
name|assertSearchOneDoc
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:42"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score,val_ss,val2_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0F
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// no value for val2_ss or val_ss ... yet...
comment|// TODO: update this test& TestPseudoReturnFields to index docs using a (multivalued) "val_ss" instead of "ssto"
comment|//
comment|// that way we can first sanity check a single value in a multivalued field is returned correctly
comment|// as a "List" of one element, *AND* then we could be testing that a (single valued) psuedo-field correctly
comment|// overrides that actual (real) value in a multivalued field (ie: not returning a an List)
comment|//
comment|// (NOTE: not doing this yet due to how it will impact most other tests, many of which are currently
comment|// @AwaitsFix'ed)
comment|//
comment|//assertTrue(doc.getFieldValue("val_ss").getClass().toString(),
comment|//           doc.getFieldValue("val_ss") instanceof List);
comment|// single value int using alias that matches multivalued dynamic field
name|doc
operator|=
name|assertSearchOneDoc
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"id:42"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_ss:val_i, val2_ss:10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|10L
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val2_ss"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedRTG
specifier|public
name|void
name|testMultiValuedRTG
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocument
name|doc
init|=
literal|null
decl_stmt|;
comment|// check same results as testMultiValued via RTG (committed doc)
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
literal|"42"
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_ss:val_i, val2_ss:10, subject"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|10L
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val2_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|"aaa"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
comment|// also check real-time-get from transaction log (uncommitted doc)
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
literal|"99"
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_ss:val_i, val2_ss:10, subject"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|10L
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val2_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|"uncommitted"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testAllRealFields
specifier|public
name|void
name|testAllRealFields
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|fl
range|:
name|TestPseudoReturnFields
operator|.
name|ALL_REAL_FIELDS
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
name|fl
argument_list|)
argument_list|)
decl_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// TODO: val_ss: List<String>
block|}
block|}
block|}
DECL|method|testAllRealFieldsRTG
specifier|public
name|void
name|testAllRealFieldsRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shouldn't matter if we use RTG (committed or otherwise)
for|for
control|(
name|String
name|fl
range|:
name|TestPseudoReturnFields
operator|.
name|ALL_REAL_FIELDS
control|)
block|{
for|for
control|(
name|int
name|i
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|42
argument_list|,
literal|43
argument_list|,
literal|44
argument_list|,
literal|45
argument_list|,
literal|46
argument_list|,
literal|99
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
name|fl
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// TODO: val_ss: List<String>
block|}
block|}
block|}
DECL|method|testFilterAndOneRealFieldRTG
specifier|public
name|void
name|testFilterAndOneRealFieldRTG
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"id,val_i"
argument_list|,
literal|"fq"
argument_list|,
literal|"{!field f='subject' v=$my_var}"
argument_list|,
literal|"my_var"
argument_list|,
literal|"uncommitted"
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|docs
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
specifier|final
name|String
name|msg
init|=
name|params
operator|+
literal|" => "
operator|+
name|docs
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|"99"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testScoreAndAllRealFields
specifier|public
name|void
name|testScoreAndAllRealFields
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|fl
range|:
name|TestPseudoReturnFields
operator|.
name|SCORE_AND_REAL_FIELDS
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
name|fl
argument_list|)
argument_list|)
decl_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|5
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// TODO: val_ss: List<String>
block|}
block|}
block|}
DECL|method|testScoreAndAllRealFieldsRTG
specifier|public
name|void
name|testScoreAndAllRealFieldsRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// also shouldn't matter if we use RTG (committed or otherwise) .. score should be ignored
for|for
control|(
name|String
name|fl
range|:
name|TestPseudoReturnFields
operator|.
name|SCORE_AND_REAL_FIELDS
control|)
block|{
for|for
control|(
name|int
name|i
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|42
argument_list|,
literal|43
argument_list|,
literal|44
argument_list|,
literal|45
argument_list|,
literal|46
argument_list|,
literal|99
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
name|fl
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fl
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// TODO: val_ss: List<String>
block|}
block|}
block|}
DECL|method|testScoreAndExplicitRealFields
specifier|public
name|void
name|testScoreAndExplicitRealFields
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
literal|null
decl_stmt|;
name|SolrDocument
name|doc
init|=
literal|null
decl_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"score,val_i"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_i"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// doesn't really matter which one
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
block|}
name|docs
operator|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// doesn't really matter which one
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
DECL|method|testScoreAndExplicitRealFieldsRTG
specifier|public
name|void
name|testScoreAndExplicitRealFieldsRTG
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
literal|null
decl_stmt|;
name|SolrDocument
name|doc
init|=
literal|null
decl_stmt|;
comment|// shouldn't matter if we use RTG (committed or otherwise) .. score should be ignored
for|for
control|(
name|int
name|i
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|42
argument_list|,
literal|43
argument_list|,
literal|44
argument_list|,
literal|45
argument_list|,
literal|46
argument_list|,
literal|99
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"score,val_i"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_i"
argument_list|)
argument_list|)
control|)
block|{
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
literal|""
operator|+
name|i
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFunctions
specifier|public
name|void
name|testFunctions
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// doesn't really matter which one
name|assertEquals
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i),abs(val_i)"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"abs(val_i)"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|doc
operator|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// doesn't really matter which one
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"abs(val_i)"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFunctionsRTG
specifier|public
name|void
name|testFunctionsRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if we use RTG (committed or otherwise) functions should behave the same
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i),abs(val_i)"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"abs(val_i)"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|","
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"abs(val_i)"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
comment|// true for both these specific docs
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|0.0D
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1.0F
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"abs(val_i)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFunctionsAndExplicit
specifier|public
name|void
name|testFunctionsAndExplicit
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i),val_i"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_i"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// doesn't really matter which one
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFunctionsAndExplicitRTG
specifier|public
name|void
name|testFunctionsAndExplicitRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// shouldn't matter if we use RTG (committed or otherwise)
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i),val_i"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_i"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|","
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
comment|// true for both these specific docs
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|0.0D
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFunctionsAndScore
specifier|public
name|void
name|testFunctionsAndScore
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i),score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|p
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i),abs(val_i),score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i),abs(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"abs(val_i),score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"abs(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|SolrParams
operator|.
name|wrapDefaults
argument_list|(
name|p
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"abs(val_i)"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testFunctionsAndScoreRTG
specifier|public
name|void
name|testFunctionsAndScoreRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if we use RTG (committed or otherwise) score should be ignored
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"abs(val_i)"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"score"
argument_list|,
literal|"fl"
argument_list|,
literal|"log(val_i),abs(val_i)"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"score,log(val_i)"
argument_list|,
literal|"fl"
argument_list|,
literal|"abs(val_i)"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"score,log(val_i),abs(val_i)"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|","
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
operator|instanceof
name|Double
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"abs(val_i)"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
comment|// true for both these specific docs
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|0.0D
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"log(val_i)"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1.0F
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"abs(val_i)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGlobs
specifier|public
name|void
name|testGlobs
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*,subj*,ss*"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*,ss*"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*"
argument_list|,
literal|"fl"
argument_list|,
literal|"ss*"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// TODO: val_ss: List<String>
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|"X"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGlobsRTG
specifier|public
name|void
name|testGlobsRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// behavior shouldn't matter if we are committed or uncommitted
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": fl=val_* => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*,subj*,ss*"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*,ss*"
argument_list|)
argument_list|)
control|)
block|{
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|msg
operator|=
name|id
operator|+
literal|": "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// NOTE: 'subject' is diff between two docs
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// TODO: val_ss: List<String>
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|"X"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"ssto"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGlobsAndExplicit
specifier|public
name|void
name|testGlobsAndExplicit
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*,id"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*,subj*,id"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*,id"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGlobsAndExplicitRTG
specifier|public
name|void
name|testGlobsAndExplicitRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// behavior shouldn't matter if we are committed or uncommitted
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*,id"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": fl=val_*,id => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*,subj*,id"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*,id"
argument_list|)
argument_list|)
control|)
block|{
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|msg
operator|=
name|id
operator|+
literal|": "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGlobsAndScore
specifier|public
name|void
name|testGlobsAndScore
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*,score"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*,subj*,score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*,score"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testGlobsAndScoreRTG
specifier|public
name|void
name|testGlobsAndScoreRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// behavior shouldn't matter if we are committed or uncommitted, score should be ignored
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*,score"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": fl=val_*,score => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*,subj*,score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"val_*"
argument_list|,
literal|"fl"
argument_list|,
literal|"subj*,score"
argument_list|)
argument_list|)
control|)
block|{
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|msg
operator|=
name|id
operator|+
literal|": "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAugmenters
specifier|public
name|void
name|testAugmenters
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|assertEquals
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid],[shard],[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid],[shard]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[shard]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int]"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[shard]"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[explain]"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocIdAugmenterRTG
specifier|public
name|void
name|testDocIdAugmenterRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// for an uncommitted doc, we should get -1
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": fl=[docid] => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
operator|-
literal|1
operator|<=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAugmentersRTG
specifier|public
name|void
name|testAugmentersRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// behavior shouldn't matter if we are committed or uncommitted
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"[docid],[shard],[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"[docid],[shard]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[shard]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int]"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[shard]"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// RTG: [explain] should be ignored
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
operator|-
literal|1
operator|<=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAugmentersAndExplicit
specifier|public
name|void
name|testAugmentersAndExplicit
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,[docid],[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid],[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int]"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[explain]"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAugmentersAndExplicitRTG
specifier|public
name|void
name|testAugmentersAndExplicitRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// behavior shouldn't matter if we are committed or uncommitted
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"id,[docid],[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"id,[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain],x_alias:[value v=10 t=int]"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int]"
argument_list|)
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
comment|// RTG: [explain] should be missing (ignored)
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
operator|-
literal|1
operator|<=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAugmentersAndScore
specifier|public
name|void
name|testAugmentersAndScore
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrParams
name|params
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid],x_alias:[value v=10 t=int],score"
argument_list|)
decl_stmt|;
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|params
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|params
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|3
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid],x_alias:[value v=10 t=int],[explain],score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int],[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|)
control|)
block|{
name|docs
operator|=
name|assertSearch
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|p
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[explain]"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAugmentersAndScoreRTG
specifier|public
name|void
name|testAugmentersAndScoreRTG
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if we use RTG (committed or otherwise) score should be ignored
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int],score"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrParams
name|p
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"d_alias:[docid],x_alias:[value v=10 t=int],[explain],score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"d_alias:[docid],x_alias:[value v=10 t=int],[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"fl"
argument_list|,
literal|"d_alias:[docid]"
argument_list|,
literal|"fl"
argument_list|,
literal|"x_alias:[value v=10 t=int]"
argument_list|,
literal|"fl"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"fl"
argument_list|,
literal|"score"
argument_list|)
argument_list|)
control|)
block|{
name|doc
operator|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|msg
operator|=
name|id
operator|+
literal|": "
operator|+
name|p
operator|+
literal|" => "
operator|+
name|doc
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|2
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|10
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"x_alias"
argument_list|)
argument_list|)
expr_stmt|;
comment|// RTG: [explain] and score should be missing (ignored)
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"d_alias"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
operator|-
literal|1
operator|<=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"d_alias"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testAugmentersGlobsExplicitAndScoreOhMy
specifier|public
name|void
name|testAugmentersGlobsExplicitAndScoreOhMy
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
comment|// NOTE: 'ssto' is the missing one
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fl
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"score"
argument_list|,
literal|"val_*"
argument_list|,
literal|"subj*"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|fl
argument_list|,
name|random
argument_list|)
expr_stmt|;
specifier|final
name|SolrParams
name|singleFl
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|,
literal|"fl"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|fl
operator|.
name|toArray
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ModifiableSolrParams
name|multiFl
init|=
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|fl
control|)
block|{
name|multiFl
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|SolrParams
name|params
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|singleFl
argument_list|,
name|multiFl
argument_list|)
control|)
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|params
operator|+
literal|" => "
operator|+
name|docs
argument_list|,
literal|5
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// shouldn't matter what doc we pick...
for|for
control|(
name|SolrDocument
name|doc
range|:
name|docs
control|)
block|{
name|String
name|msg
init|=
name|params
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|6
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[explain]"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"score"
argument_list|)
operator|instanceof
name|Float
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testAugmentersGlobsExplicitAndScoreOhMyRTG
specifier|public
name|void
name|testAugmentersGlobsExplicitAndScoreOhMyRTG
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|random
init|=
name|random
argument_list|()
decl_stmt|;
comment|// NOTE: 'ssto' is the missing one
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fl
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id"
argument_list|,
literal|"[docid]"
argument_list|,
literal|"[explain]"
argument_list|,
literal|"score"
argument_list|,
literal|"val_*"
argument_list|,
literal|"subj*"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
name|random
argument_list|,
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iters
condition|;
name|i
operator|++
control|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|fl
argument_list|,
name|random
argument_list|)
expr_stmt|;
specifier|final
name|SolrParams
name|singleFl
init|=
name|params
argument_list|(
literal|"fl"
argument_list|,
name|StringUtils
operator|.
name|join
argument_list|(
name|fl
operator|.
name|toArray
argument_list|()
argument_list|,
literal|','
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ModifiableSolrParams
name|multiFl
init|=
name|params
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|item
range|:
name|fl
control|)
block|{
name|multiFl
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
comment|// RTG behavior should be consistent, (committed or otherwise)
for|for
control|(
name|String
name|id
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"42"
argument_list|,
literal|"99"
argument_list|)
control|)
block|{
for|for
control|(
name|SolrParams
name|params
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|singleFl
argument_list|,
name|multiFl
argument_list|)
control|)
block|{
name|SolrDocument
name|doc
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|getById
argument_list|(
name|id
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
name|id
operator|+
literal|": "
operator|+
name|params
operator|+
literal|" => "
operator|+
name|doc
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|4
argument_list|,
name|doc
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
literal|1
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"val_i"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"subject"
argument_list|)
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
operator|-
literal|1
operator|<=
operator|(
operator|(
name|Integer
operator|)
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"[docid]"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// RTG: [explain] and score should be missing (ignored)
block|}
block|}
block|}
block|}
comment|/**     * Given a set of query params, executes as a Query against a random SolrClient and     * asserts that exactly one document is returned     */
DECL|method|assertSearchOneDoc
specifier|public
specifier|static
name|SolrDocument
name|assertSearchOneDoc
parameter_list|(
name|SolrParams
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrDocumentList
name|docs
init|=
name|assertSearch
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"does not match exactly one doc: "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|docs
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"does not contain exactly one doc: "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|docs
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
argument_list|,
name|docs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**     * Given a set of query params, executes as a Query against a random SolrClient and     * asserts that at least 1 doc is matched and at least 1 doc is returned    */
DECL|method|assertSearch
specifier|public
specifier|static
name|SolrDocumentList
name|assertSearch
parameter_list|(
name|SolrParams
name|p
parameter_list|)
throws|throws
name|Exception
block|{
name|QueryResponse
name|rsp
init|=
name|getRandClient
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|query
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"failed request: "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"does not match at least one doc: "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
operator|<=
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"rsp does not contain at least one doc: "
operator|+
name|p
operator|.
name|toString
argument_list|()
operator|+
literal|" => "
operator|+
name|rsp
operator|.
name|toString
argument_list|()
argument_list|,
literal|1
operator|<=
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rsp
operator|.
name|getResults
argument_list|()
return|;
block|}
comment|/**     * returns a random SolrClient -- either a CloudSolrClient, or an HttpSolrClient pointed     * at a node in our cluster     */
DECL|method|getRandClient
specifier|public
specifier|static
name|SolrClient
name|getRandClient
parameter_list|(
name|Random
name|rand
parameter_list|)
block|{
name|int
name|numClients
init|=
name|CLIENTS
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|rand
argument_list|,
literal|0
argument_list|,
name|numClients
argument_list|)
decl_stmt|;
return|return
operator|(
name|idx
operator|==
name|numClients
operator|)
condition|?
name|CLOUD_CLIENT
else|:
name|CLIENTS
operator|.
name|get
argument_list|(
name|idx
argument_list|)
return|;
block|}
DECL|method|waitForRecoveriesToFinish
specifier|public
specifier|static
name|void
name|waitForRecoveriesToFinish
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
literal|null
operator|!=
name|client
operator|.
name|getDefaultCollection
argument_list|()
assert|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|client
operator|.
name|getDefaultCollection
argument_list|()
argument_list|,
name|client
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

