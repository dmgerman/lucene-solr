begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|primes
operator|.
name|Primes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|UpdateResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|TestStressInPlaceUpdates
specifier|public
class|class
name|TestStressInPlaceUpdates
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeSuperClass
specifier|public
specifier|static
name|void
name|beforeSuperClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.intClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieIntField"
else|:
literal|"IntPointField"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.longClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieLongField"
else|:
literal|"LongPointField"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.floatClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieFloatField"
else|:
literal|"FloatPointField"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.doubleClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieDoubleField"
else|:
literal|"DoublePointField"
argument_list|)
expr_stmt|;
name|schemaString
operator|=
literal|"schema-inplace-updates.xml"
expr_stmt|;
name|configString
operator|=
literal|"solrconfig-tlog.xml"
expr_stmt|;
comment|// sanity check that autocommits are disabled
name|initCore
argument_list|(
name|configString
argument_list|,
name|schemaString
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getUpdateHandlerInfo
argument_list|()
operator|.
name|autoCommmitMaxTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getUpdateHandlerInfo
argument_list|()
operator|.
name|autoSoftCommmitMaxTime
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getUpdateHandlerInfo
argument_list|()
operator|.
name|autoCommmitMaxDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSolrConfig
argument_list|()
operator|.
name|getUpdateHandlerInfo
argument_list|()
operator|.
name|autoSoftCommmitMaxDocs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.intClassName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.longClassName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.floatClassName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.doubleClassName"
argument_list|)
expr_stmt|;
block|}
DECL|method|TestStressInPlaceUpdates
specifier|public
name|TestStressInPlaceUpdates
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|sliceCount
operator|=
literal|1
expr_stmt|;
name|fixShardCount
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|field|model
specifier|protected
specifier|final
name|ConcurrentHashMap
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|model
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|committedModel
specifier|protected
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|committedModel
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|snapshotCount
specifier|protected
name|long
name|snapshotCount
decl_stmt|;
DECL|field|committedModelClock
specifier|protected
name|long
name|committedModelClock
decl_stmt|;
DECL|field|clientIndexUsedForCommit
specifier|protected
name|int
name|clientIndexUsedForCommit
decl_stmt|;
DECL|field|lastId
specifier|protected
specifier|volatile
name|int
name|lastId
decl_stmt|;
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
init|=
literal|"val_l"
decl_stmt|;
DECL|method|initModel
specifier|private
name|void
name|initModel
parameter_list|(
name|int
name|ndocs
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ndocs
condition|;
name|i
operator|++
control|)
block|{
comment|// seed versions w/-1 so "from scratch" adds/updates will fail optimistic concurrency checks
comment|// if some other thread beats us to adding the id
name|model
operator|.
name|put
argument_list|(
name|i
argument_list|,
operator|new
name|DocInfo
argument_list|(
operator|-
literal|1L
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|committedModel
operator|.
name|putAll
argument_list|(
name|model
argument_list|)
expr_stmt|;
block|}
DECL|field|leaderClient
name|SolrClient
name|leaderClient
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|3
argument_list|)
DECL|method|stressTest
specifier|public
name|void
name|stressTest
parameter_list|()
throws|throws
name|Exception
block|{
name|waitForRecoveriesToFinish
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|leaderClient
operator|=
name|getClientForLeader
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Couldn't obtain client for the leader of the shard"
argument_list|,
name|this
operator|.
name|leaderClient
argument_list|)
expr_stmt|;
specifier|final
name|int
name|commitPercent
init|=
literal|5
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|int
name|softCommitPercent
init|=
literal|30
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|75
argument_list|)
decl_stmt|;
comment|// what percent of the commits are soft
specifier|final
name|int
name|deletePercent
init|=
literal|4
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deleteByQueryPercent
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|8
argument_list|)
decl_stmt|;
specifier|final
name|int
name|ndocs
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|int
name|nWriteThreads
init|=
literal|5
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
name|int
name|fullUpdatePercent
init|=
literal|5
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
decl_stmt|;
comment|// query variables
specifier|final
name|int
name|percentRealtimeQuery
init|=
literal|75
decl_stmt|;
comment|// number of cumulative read/write operations by all threads
specifier|final
name|AtomicLong
name|operations
init|=
operator|new
name|AtomicLong
argument_list|(
literal|25000
argument_list|)
decl_stmt|;
name|int
name|nReadThreads
init|=
literal|5
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|25
argument_list|)
decl_stmt|;
comment|/** // testing      final int commitPercent = 5;      final int softCommitPercent = 100; // what percent of the commits are soft      final int deletePercent = 0;      final int deleteByQueryPercent = 50;      final int ndocs = 10;      int nWriteThreads = 10;       final int maxConcurrentCommits = nWriteThreads;   // number of committers at a time... it should be<= maxWarmingSearchers       // query variables      final int percentRealtimeQuery = 101;      final AtomicLong operations = new AtomicLong(50000);  // number of query operations to perform in total      int nReadThreads = 10;       int fullUpdatePercent = 20;      **/
name|log
operator|.
name|info
argument_list|(
literal|"{}"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"commitPercent"
argument_list|,
name|commitPercent
argument_list|,
literal|"softCommitPercent"
argument_list|,
name|softCommitPercent
argument_list|,
literal|"deletePercent"
argument_list|,
name|deletePercent
argument_list|,
literal|"deleteByQueryPercent"
argument_list|,
name|deleteByQueryPercent
argument_list|,
literal|"ndocs"
argument_list|,
name|ndocs
argument_list|,
literal|"nWriteThreads"
argument_list|,
name|nWriteThreads
argument_list|,
literal|"percentRealtimeQuery"
argument_list|,
name|percentRealtimeQuery
argument_list|,
literal|"operations"
argument_list|,
name|operations
argument_list|,
literal|"nReadThreads"
argument_list|,
name|nReadThreads
argument_list|)
argument_list|)
expr_stmt|;
name|initModel
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nWriteThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"WRITER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|oper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
condition|)
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|newCommittedModel
decl_stmt|;
name|long
name|version
decl_stmt|;
synchronized|synchronized
init|(
name|TestStressInPlaceUpdates
operator|.
name|this
init|)
block|{
comment|// take a snapshot of the model
comment|// this is safe to do w/o synchronizing on the model because it's a ConcurrentHashMap
name|newCommittedModel
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|version
operator|=
name|snapshotCount
operator|++
expr_stmt|;
name|int
name|chosenClientIndex
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|softCommitPercent
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"softCommit start"
argument_list|)
expr_stmt|;
name|clients
operator|.
name|get
argument_list|(
name|chosenClientIndex
argument_list|)
operator|.
name|commit
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"softCommit end"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"hardCommit start"
argument_list|)
expr_stmt|;
name|clients
operator|.
name|get
argument_list|(
name|chosenClientIndex
argument_list|)
operator|.
name|commit
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"hardCommit end"
argument_list|)
expr_stmt|;
block|}
comment|// install this model snapshot only if it's newer than the current one
if|if
condition|(
name|version
operator|>=
name|committedModelClock
condition|)
block|{
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"installing new committedModel version={}"
argument_list|,
name|committedModelClock
argument_list|)
expr_stmt|;
block|}
name|clientIndexUsedForCommit
operator|=
name|chosenClientIndex
expr_stmt|;
name|committedModel
operator|=
name|newCommittedModel
expr_stmt|;
name|committedModelClock
operator|=
name|version
expr_stmt|;
block|}
block|}
continue|continue;
block|}
name|int
name|id
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|id
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|lastId
expr_stmt|;
comment|// reuse the last ID half of the time to force more race conditions
block|}
comment|// set the lastId before we actually change it sometimes to try and
comment|// uncover more race conditions between writing and reading
name|boolean
name|before
init|=
name|rand
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
name|DocInfo
name|info
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|// yield after getting the next version to increase the odds of updates happening out of order
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
if|if
condition|(
name|oper
operator|<
name|commitPercent
operator|+
name|deletePercent
operator|+
name|deleteByQueryPercent
condition|)
block|{
specifier|final
name|boolean
name|dbq
init|=
operator|(
name|oper
operator|>=
name|commitPercent
operator|+
name|deletePercent
operator|)
decl_stmt|;
specifier|final
name|String
name|delType
init|=
name|dbq
condition|?
literal|"DBI"
else|:
literal|"DBQ"
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{} id {}: {}"
argument_list|,
name|delType
argument_list|,
name|id
argument_list|,
name|info
argument_list|)
expr_stmt|;
name|Long
name|returnedVersion
init|=
literal|null
decl_stmt|;
try|try
block|{
name|returnedVersion
operator|=
name|deleteDocAndGetVersion
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|,
name|params
argument_list|(
literal|"_version_"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|info
operator|.
name|version
argument_list|)
argument_list|)
argument_list|,
name|dbq
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|delType
operator|+
literal|": Deleting id="
operator|+
name|id
operator|+
literal|", version="
operator|+
name|info
operator|.
name|version
operator|+
literal|".  Returned version="
operator|+
name|returnedVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"version conflict"
argument_list|)
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Conflict"
argument_list|)
condition|)
block|{
comment|// Its okay for a leader to reject a concurrent request
name|log
operator|.
name|warn
argument_list|(
literal|"Conflict during {}, rejected id={}, {}"
argument_list|,
name|delType
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|returnedVersion
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|// only update model if update had no conflict& the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|returnedVersion
operator|&&
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
operator|>
name|Math
operator|.
name|abs
argument_list|(
name|currInfo
operator|.
name|version
argument_list|)
operator|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|int
name|val1
init|=
name|info
operator|.
name|intFieldValue
decl_stmt|;
name|long
name|val2
init|=
name|info
operator|.
name|longFieldValue
decl_stmt|;
name|int
name|nextVal1
init|=
name|val1
decl_stmt|;
name|long
name|nextVal2
init|=
name|val2
decl_stmt|;
name|int
name|addOper
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|Long
name|returnedVersion
decl_stmt|;
if|if
condition|(
name|addOper
operator|<
name|fullUpdatePercent
operator|||
name|info
operator|.
name|version
operator|<=
literal|0
condition|)
block|{
comment|// if document was never indexed or was deleted
comment|// FULL UPDATE
name|nextVal1
operator|=
name|Primes
operator|.
name|nextPrime
argument_list|(
name|val1
operator|+
literal|1
argument_list|)
expr_stmt|;
name|nextVal2
operator|=
name|nextVal1
operator|*
literal|1000000000l
expr_stmt|;
try|try
block|{
name|returnedVersion
operator|=
name|addDocAndGetVersion
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
literal|"title_s"
argument_list|,
literal|"title"
operator|+
name|id
argument_list|,
literal|"val1_i_dvo"
argument_list|,
name|nextVal1
argument_list|,
literal|"val2_l_dvo"
argument_list|,
name|nextVal2
argument_list|,
literal|"_version_"
argument_list|,
name|info
operator|.
name|version
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"FULL: Writing id="
operator|+
name|id
operator|+
literal|", val=["
operator|+
name|nextVal1
operator|+
literal|","
operator|+
name|nextVal2
operator|+
literal|"], version="
operator|+
name|info
operator|.
name|version
operator|+
literal|", Prev was=["
operator|+
name|val1
operator|+
literal|","
operator|+
name|val2
operator|+
literal|"].  Returned version="
operator|+
name|returnedVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"version conflict"
argument_list|)
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Conflict"
argument_list|)
condition|)
block|{
comment|// Its okay for a leader to reject a concurrent request
name|log
operator|.
name|warn
argument_list|(
literal|"Conflict during full update, rejected id={}, {}"
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|returnedVersion
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
else|else
block|{
comment|// PARTIAL
name|nextVal2
operator|=
name|val2
operator|+
name|val1
expr_stmt|;
try|try
block|{
name|returnedVersion
operator|=
name|addDocAndGetVersion
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|,
literal|"val2_l_dvo"
argument_list|,
name|map
argument_list|(
literal|"inc"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|val1
argument_list|)
argument_list|)
argument_list|,
literal|"_version_"
argument_list|,
name|info
operator|.
name|version
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"PARTIAL: Writing id="
operator|+
name|id
operator|+
literal|", val=["
operator|+
name|nextVal1
operator|+
literal|","
operator|+
name|nextVal2
operator|+
literal|"], version="
operator|+
name|info
operator|.
name|version
operator|+
literal|", Prev was=["
operator|+
name|val1
operator|+
literal|","
operator|+
name|val2
operator|+
literal|"].  Returned version="
operator|+
name|returnedVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"version conflict"
argument_list|)
operator|||
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Conflict"
argument_list|)
condition|)
block|{
comment|// Its okay for a leader to reject a concurrent request
name|log
operator|.
name|warn
argument_list|(
literal|"Conflict during partial update, rejected id={}, {}"
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Document not found for update."
argument_list|)
operator|&&
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"id="
operator|+
name|id
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Attempted a partial update for a recently deleted document, rejected id={}, {}"
argument_list|,
name|id
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
name|returnedVersion
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// only update model if update had no conflict& the version is newer
synchronized|synchronized
init|(
name|model
init|)
block|{
name|DocInfo
name|currInfo
init|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|returnedVersion
operator|&&
operator|(
name|Math
operator|.
name|abs
argument_list|(
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|)
operator|>
name|Math
operator|.
name|abs
argument_list|(
name|currInfo
operator|.
name|version
argument_list|)
operator|)
condition|)
block|{
name|model
operator|.
name|put
argument_list|(
name|id
argument_list|,
operator|new
name|DocInfo
argument_list|(
name|returnedVersion
operator|.
name|longValue
argument_list|()
argument_list|,
name|nextVal1
argument_list|,
name|nextVal2
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|before
condition|)
block|{
name|lastId
operator|=
name|id
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
comment|// Read threads
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nReadThreads
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|thread
init|=
operator|new
name|Thread
argument_list|(
literal|"READER"
operator|+
name|i
argument_list|)
block|{
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
while|while
condition|(
name|operations
operator|.
name|decrementAndGet
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// bias toward a recently changed doc
name|int
name|id
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|25
condition|?
name|lastId
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|ndocs
argument_list|)
decl_stmt|;
comment|// when indexing, we update the index, then the model
comment|// so when querying, we should first check the model, and then the index
name|boolean
name|realTime
init|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
name|percentRealtimeQuery
decl_stmt|;
name|DocInfo
name|expected
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|expected
operator|=
name|model
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|TestStressInPlaceUpdates
operator|.
name|this
init|)
block|{
name|expected
operator|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|VERBOSE
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"querying id {}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|realTime
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"ids"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"id:"
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"omitHeader"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|int
name|clientId
init|=
name|rand
operator|.
name|nextInt
argument_list|(
name|clients
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|realTime
condition|)
name|clientId
operator|=
name|clientIndexUsedForCommit
expr_stmt|;
name|QueryResponse
name|response
init|=
name|clients
operator|.
name|get
argument_list|(
name|clientId
argument_list|)
operator|.
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// there's no info we can get back with a delete, so not much we can check without further synchronization
block|}
elseif|else
if|if
condition|(
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|SolrDocument
name|actual
init|=
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"Realtime="
operator|+
name|realTime
operator|+
literal|", expected="
operator|+
name|expected
operator|+
literal|", actual="
operator|+
name|actual
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|actual
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|foundVersion
init|=
operator|(
name|Long
operator|)
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|foundVersion
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|"... solr doc has non-positive version???"
argument_list|,
literal|0
operator|<
name|foundVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Integer
name|intVal
init|=
operator|(
name|Integer
operator|)
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|intVal
argument_list|)
expr_stmt|;
specifier|final
name|Long
name|longVal
init|=
operator|(
name|Long
operator|)
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"val2_l_dvo"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|msg
argument_list|,
name|longVal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" ...solr returned older version then model. "
operator|+
literal|"should not be possible given the order of operations in writer threads"
argument_list|,
name|Math
operator|.
name|abs
argument_list|(
name|expected
operator|.
name|version
argument_list|)
operator|<=
name|foundVersion
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|foundVersion
operator|.
name|longValue
argument_list|()
operator|==
name|expected
operator|.
name|version
condition|)
block|{
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|intFieldValue
argument_list|,
name|intVal
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|longFieldValue
argument_list|,
name|longVal
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Some things we can assert about any Doc returned from solr,
comment|// even if it's newer then our (expected) model information...
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" ...how did a doc in solr get a non positive intVal?"
argument_list|,
literal|0
operator|<
name|intVal
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" ...how did a doc in solr get a non positive longVal?"
argument_list|,
literal|0
operator|<
name|longVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" ...intVal and longVal in solr doc are internally (modulo) inconsistent w/eachother"
argument_list|,
literal|0
argument_list|,
operator|(
name|longVal
operator|%
name|intVal
operator|)
argument_list|)
expr_stmt|;
comment|// NOTE: when foundVersion is greater then the version read from the model,
comment|// it's not possible to make any assertions about the field values in solr relative to the
comment|// field values in the model -- ie: we can *NOT* assert expected.longFieldVal<= doc.longVal
comment|//
comment|// it's tempting to think that this would be possible if we changed our model to preserve the
comment|// "old" valuess when doing a delete, but that's still no garuntee because of how oportunistic
comment|// concurrency works with negative versions:  When adding a doc, we can assert that it must not
comment|// exist with version<0, but we can't assert that the *reason* it doesn't exist was because of
comment|// a delete with the specific version of "-42".
comment|// So a wrtier thread might (1) prep to add a doc for the first time with "intValue=1,_version_=-1",
comment|// and that add may succeed and (2) return some version X which is put in the model.  but
comment|// inbetween #1 and #2 other threads may have added& deleted the doc repeatedly, updating
comment|// the model with intValue=7,_version_=-42, and a reader thread might meanwhile read from the
comment|// model before #2 and expect intValue=5, but get intValue=1 from solr (with a greater version)
block|}
else|else
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|,
literal|"There were more than one result: {}"
argument_list|,
name|response
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|operations
operator|.
name|set
argument_list|(
operator|-
literal|1L
argument_list|)
expr_stmt|;
name|log
operator|.
name|error
argument_list|(
literal|""
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
comment|// Start all threads
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
block|{
comment|// final pass over uncommitted model with RTG
for|for
control|(
name|SolrClient
name|client
range|:
name|clients
control|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Integer
argument_list|,
name|DocInfo
argument_list|>
name|entry
range|:
name|model
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|Integer
name|id
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|DocInfo
name|expected
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|SolrDocument
name|actual
init|=
name|client
operator|.
name|getById
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"RTG: "
operator|+
name|id
operator|+
literal|"="
operator|+
name|expected
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|actual
condition|)
block|{
comment|// a deleted or non-existent document
comment|// sanity check of the model agrees...
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" is deleted/non-existent in Solr, but model has non-neg version"
argument_list|,
name|expected
operator|.
name|version
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" is deleted/non-existent in Solr"
argument_list|,
name|expected
operator|.
name|intFieldValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
operator|+
literal|" is deleted/non-existent in Solr"
argument_list|,
name|expected
operator|.
name|longFieldValue
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|msg
operator|+
literal|"<==VS==> "
operator|+
name|actual
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|intFieldValue
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|longFieldValue
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"val2_l_dvo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|version
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"_version_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" doc exists in solr, but version is negative???"
argument_list|,
literal|0
operator|<
name|expected
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|{
comment|// do a final search and compare every result with the model
comment|// because commits don't provide any sort of concrete versioning (or optimistic concurrency constraints)
comment|// there's no way to garuntee that our committedModel matches what was in Solr at the time of the last commit.
comment|// It's possible other threads made additional writes to solr before the commit was processed, but after
comment|// the committedModel variable was assigned it's new value.
comment|//
comment|// what we can do however, is commit all completed updates, and *then* compare solr search results
comment|// against the (new) committed model....
name|waitForThingsToLevelOut
argument_list|(
literal|30
argument_list|)
expr_stmt|;
comment|// NOTE: this does an automatic commit for us& ensures replicas are up to date
name|committedModel
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|model
argument_list|)
expr_stmt|;
comment|// first, prune the model of any docs that have negative versions
comment|// ie: were never actually added, or were ultimately deleted.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ndocs
condition|;
name|i
operator|++
control|)
block|{
name|DocInfo
name|info
init|=
name|committedModel
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|version
operator|<
literal|0
condition|)
block|{
comment|// first, a quick sanity check of the model itself...
name|assertEquals
argument_list|(
literal|"Inconsistent int value in model for deleted doc"
operator|+
name|i
operator|+
literal|"="
operator|+
name|info
argument_list|,
literal|0
argument_list|,
name|info
operator|.
name|intFieldValue
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Inconsistent long value in model for deleted doc"
operator|+
name|i
operator|+
literal|"="
operator|+
name|info
argument_list|,
literal|0L
argument_list|,
name|info
operator|.
name|longFieldValue
argument_list|)
expr_stmt|;
name|committedModel
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|SolrClient
name|client
range|:
name|clients
control|)
block|{
name|QueryResponse
name|rsp
init|=
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"rows"
argument_list|,
name|ndocs
operator|+
literal|""
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|SolrDocument
name|actual
range|:
name|rsp
operator|.
name|getResults
argument_list|()
control|)
block|{
specifier|final
name|Integer
name|id
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|DocInfo
name|expected
init|=
name|committedModel
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Doc found but missing/deleted from model: "
operator|+
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"Search: "
operator|+
name|id
operator|+
literal|"="
operator|+
name|expected
operator|+
literal|"<==VS==> "
operator|+
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|intFieldValue
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|longFieldValue
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"val2_l_dvo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|expected
operator|.
name|version
argument_list|,
name|actual
operator|.
name|getFieldValue
argument_list|(
literal|"_version_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|msg
operator|+
literal|" doc exists in solr, but version is negative???"
argument_list|,
literal|0
operator|<
name|expected
operator|.
name|version
argument_list|)
expr_stmt|;
comment|// also sanity check the model (which we already know matches the doc)
name|assertEquals
argument_list|(
literal|"Inconsistent (modulo) values in model for id "
operator|+
name|id
operator|+
literal|"="
operator|+
name|expected
argument_list|,
literal|0
argument_list|,
operator|(
name|expected
operator|.
name|longFieldValue
operator|%
name|expected
operator|.
name|intFieldValue
operator|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|committedModel
operator|.
name|size
argument_list|()
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Used for storing the info for a document in an in-memory model.    */
DECL|class|DocInfo
specifier|private
specifier|static
class|class
name|DocInfo
block|{
DECL|field|version
name|long
name|version
decl_stmt|;
DECL|field|intFieldValue
name|int
name|intFieldValue
decl_stmt|;
DECL|field|longFieldValue
name|long
name|longFieldValue
decl_stmt|;
DECL|method|DocInfo
specifier|public
name|DocInfo
parameter_list|(
name|long
name|version
parameter_list|,
name|int
name|val1
parameter_list|,
name|long
name|val2
parameter_list|)
block|{
assert|assert
name|version
operator|!=
literal|0
assert|;
comment|// must either be real positive version, or negative deleted version/indicator
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|intFieldValue
operator|=
name|val1
expr_stmt|;
name|this
operator|.
name|longFieldValue
operator|=
name|val2
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[version="
operator|+
name|version
operator|+
literal|", intValue="
operator|+
name|intFieldValue
operator|+
literal|",longValue="
operator|+
name|longFieldValue
operator|+
literal|"]"
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|addDocAndGetVersion
specifier|protected
name|long
name|addDocAndGetVersion
parameter_list|(
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|addFields
argument_list|(
name|doc
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"versions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|UpdateResponse
name|resp
decl_stmt|;
comment|// send updates to leader, to avoid SOLR-8733
name|resp
operator|=
name|ureq
operator|.
name|process
argument_list|(
name|leaderClient
argument_list|)
expr_stmt|;
name|long
name|returnedVersion
init|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"adds"
argument_list|)
operator|)
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Due to SOLR-8733, sometimes returned version is 0. Let us assert that we have successfully"
operator|+
literal|" worked around that problem here."
argument_list|,
name|returnedVersion
operator|>
literal|0
argument_list|)
expr_stmt|;
return|return
name|returnedVersion
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
DECL|method|deleteDocAndGetVersion
specifier|protected
name|long
name|deleteDocAndGetVersion
parameter_list|(
name|String
name|id
parameter_list|,
name|ModifiableSolrParams
name|params
parameter_list|,
name|boolean
name|deleteByQuery
parameter_list|)
throws|throws
name|Exception
block|{
name|params
operator|.
name|add
argument_list|(
literal|"versions"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ureq
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteByQuery
condition|)
block|{
name|ureq
operator|.
name|deleteByQuery
argument_list|(
literal|"id:"
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ureq
operator|.
name|deleteById
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|UpdateResponse
name|resp
decl_stmt|;
comment|// send updates to leader, to avoid SOLR-8733
name|resp
operator|=
name|ureq
operator|.
name|process
argument_list|(
name|leaderClient
argument_list|)
expr_stmt|;
name|String
name|key
init|=
name|deleteByQuery
condition|?
literal|"deleteByQuery"
else|:
literal|"deletes"
decl_stmt|;
name|long
name|returnedVersion
init|=
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Due to SOLR-8733, sometimes returned version is 0. Let us assert that we have successfully"
operator|+
literal|" worked around that problem here."
argument_list|,
name|returnedVersion
operator|<
literal|0
argument_list|)
expr_stmt|;
return|return
name|returnedVersion
return|;
block|}
comment|/**    * Method gets the SolrClient for the leader replica. This is needed for a workaround for SOLR-8733.    */
DECL|method|getClientForLeader
specifier|public
name|SolrClient
name|getClientForLeader
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
expr_stmt|;
name|ClusterState
name|clusterState
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Replica
name|leader
init|=
literal|null
decl_stmt|;
name|Slice
name|shard1
init|=
name|clusterState
operator|.
name|getCollection
argument_list|(
name|DEFAULT_COLLECTION
argument_list|)
operator|.
name|getSlice
argument_list|(
name|SHARD1
argument_list|)
decl_stmt|;
name|leader
operator|=
name|shard1
operator|.
name|getLeader
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clients
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|leaderBaseUrl
init|=
name|zkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|leader
operator|.
name|getNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getBaseURL
argument_list|()
operator|.
name|startsWith
argument_list|(
name|leaderBaseUrl
argument_list|)
condition|)
return|return
name|clients
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

