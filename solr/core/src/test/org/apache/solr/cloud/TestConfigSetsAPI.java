begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|OverseerConfigSetMessageHandler
operator|.
name|BASE_CONFIGSET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSetProperties
operator|.
name|DEFAULT_FILENAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|methods
operator|.
name|HttpPost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ByteArrayEntity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|util
operator|.
name|EntityUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpClientUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ConfigSetAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ConfigSetAdminRequest
operator|.
name|Create
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ConfigSetAdminRequest
operator|.
name|Delete
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|ConfigSetAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkConfigManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ConfigSetParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ConfigSetParams
operator|.
name|ConfigSetAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|ConfigSetProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|TestDynamicLoading
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|security
operator|.
name|BasicAuthIntegrationTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|CreateMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Simple ConfigSets API tests on user errors and simple success cases.  */
end_comment

begin_class
DECL|class|TestConfigSetsAPI
specifier|public
class|class
name|TestConfigSetsAPI
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|solrCluster
specifier|private
name|MiniSolrCloudCluster
name|solrCluster
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|solrCluster
operator|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|()
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|solrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateErrors
specifier|public
name|void
name|testCreateErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SolrClient
name|solrClient
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|solrCluster
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"configset-2"
argument_list|)
argument_list|,
literal|"configSet"
argument_list|)
expr_stmt|;
comment|// no action
name|CreateNoErrorChecking
name|createNoAction
init|=
operator|new
name|CreateNoErrorChecking
argument_list|()
decl_stmt|;
name|createNoAction
operator|.
name|setAction
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|createNoAction
argument_list|,
literal|"action"
argument_list|)
expr_stmt|;
comment|// no ConfigSet name
name|CreateNoErrorChecking
name|create
init|=
operator|new
name|CreateNoErrorChecking
argument_list|()
decl_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|create
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
comment|// no base ConfigSet name
name|create
operator|.
name|setConfigSetName
argument_list|(
literal|"configSetName"
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|create
argument_list|,
name|BASE_CONFIGSET
argument_list|)
expr_stmt|;
comment|// ConfigSet already exists
name|Create
name|alreadyExists
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|alreadyExists
operator|.
name|setConfigSetName
argument_list|(
literal|"configSet"
argument_list|)
operator|.
name|setBaseConfigSetName
argument_list|(
literal|"baseConfigSet"
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|alreadyExists
argument_list|,
literal|"ConfigSet already exists"
argument_list|)
expr_stmt|;
comment|// Base ConfigSet does not exist
name|Create
name|baseConfigNoExists
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|baseConfigNoExists
operator|.
name|setConfigSetName
argument_list|(
literal|"newConfigSet"
argument_list|)
operator|.
name|setBaseConfigSetName
argument_list|(
literal|"baseConfigSet"
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|baseConfigNoExists
argument_list|,
literal|"Base ConfigSet does not exist"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreate
specifier|public
name|void
name|testCreate
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no old, no new
name|verifyCreate
argument_list|(
literal|"baseConfigSet1"
argument_list|,
literal|"configSet1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// no old, new
name|verifyCreate
argument_list|(
literal|"baseConfigSet2"
argument_list|,
literal|"configSet2"
argument_list|,
literal|null
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"immutable"
argument_list|,
literal|"true"
argument_list|,
literal|"key1"
argument_list|,
literal|"value1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// old, no new
name|verifyCreate
argument_list|(
literal|"baseConfigSet3"
argument_list|,
literal|"configSet3"
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"immutable"
argument_list|,
literal|"false"
argument_list|,
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// old, new
name|verifyCreate
argument_list|(
literal|"baseConfigSet4"
argument_list|,
literal|"configSet4"
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"immutable"
argument_list|,
literal|"true"
argument_list|,
literal|"onlyOld"
argument_list|,
literal|"onlyOldValue"
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"immutable"
argument_list|,
literal|"false"
argument_list|,
literal|"onlyNew"
argument_list|,
literal|"onlyNewValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|setupBaseConfigSet
specifier|private
name|void
name|setupBaseConfigSet
parameter_list|(
name|String
name|baseConfigSetName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldProps
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|File
name|configDir
init|=
name|getFile
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets/configset-2/conf"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
specifier|final
name|File
name|tmpConfigDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|tmpConfigDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|configDir
argument_list|,
name|tmpConfigDir
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldProps
operator|!=
literal|null
condition|)
block|{
name|FileUtils
operator|.
name|write
argument_list|(
operator|new
name|File
argument_list|(
name|tmpConfigDir
argument_list|,
name|ConfigSetProperties
operator|.
name|DEFAULT_FILENAME
argument_list|)
argument_list|,
name|getConfigSetProps
argument_list|(
name|oldProps
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
block|}
name|solrCluster
operator|.
name|uploadConfigSet
argument_list|(
name|tmpConfigDir
operator|.
name|toPath
argument_list|()
argument_list|,
name|baseConfigSetName
argument_list|)
expr_stmt|;
block|}
DECL|method|verifyCreate
specifier|private
name|void
name|verifyCreate
parameter_list|(
name|String
name|baseConfigSetName
parameter_list|,
name|String
name|configSetName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProps
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SolrClient
name|solrClient
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|setupBaseConfigSet
argument_list|(
name|baseConfigSetName
argument_list|,
name|oldProps
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|solrCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ZkConfigManager
name|configManager
init|=
operator|new
name|ZkConfigManager
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|configSetName
argument_list|)
argument_list|)
expr_stmt|;
name|Create
name|create
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|create
operator|.
name|setBaseConfigSetName
argument_list|(
name|baseConfigSetName
argument_list|)
operator|.
name|setConfigSetName
argument_list|(
name|configSetName
argument_list|)
expr_stmt|;
if|if
condition|(
name|newProps
operator|!=
literal|null
condition|)
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|putAll
argument_list|(
name|newProps
argument_list|)
expr_stmt|;
name|create
operator|.
name|setNewConfigSetProperties
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|ConfigSetAdminResponse
name|response
init|=
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|configSetName
argument_list|)
argument_list|)
expr_stmt|;
name|verifyProperties
argument_list|(
name|configSetName
argument_list|,
name|oldProps
argument_list|,
name|newProps
argument_list|,
name|zkClient
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfigSetPropertiesFromZk
specifier|private
name|NamedList
name|getConfigSetPropertiesFromZk
parameter_list|(
name|SolrZkClient
name|zkClient
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|oldPropsData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oldPropsData
operator|=
name|zkClient
operator|.
name|getData
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|e
parameter_list|)
block|{
comment|// okay, properties just don't exist
block|}
if|if
condition|(
name|oldPropsData
operator|!=
literal|null
condition|)
block|{
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|oldPropsData
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|ConfigSetProperties
operator|.
name|readFromInputStream
argument_list|(
name|reader
argument_list|)
return|;
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|verifyProperties
specifier|private
name|void
name|verifyProperties
parameter_list|(
name|String
name|configSetName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldProps
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newProps
parameter_list|,
name|SolrZkClient
name|zkClient
parameter_list|)
throws|throws
name|Exception
block|{
name|NamedList
name|properties
init|=
name|getConfigSetPropertiesFromZk
argument_list|(
name|zkClient
argument_list|,
name|ZkConfigManager
operator|.
name|CONFIGS_ZKNODE
operator|+
literal|"/"
operator|+
name|configSetName
operator|+
literal|"/"
operator|+
name|DEFAULT_FILENAME
argument_list|)
decl_stmt|;
comment|// let's check without merging the maps, since that's what the MessageHandler does
comment|// (since we'd probably repeat any bug in the MessageHandler here)
if|if
condition|(
name|oldProps
operator|==
literal|null
operator|&&
name|newProps
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return;
block|}
name|assertNotNull
argument_list|(
name|properties
argument_list|)
expr_stmt|;
comment|// check all oldProps are in props
if|if
condition|(
name|oldProps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|oldProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check all newProps are in props
if|if
condition|(
name|newProps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|newProps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check the value in properties are correct
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|properties
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|newValue
init|=
name|newProps
operator|!=
literal|null
condition|?
name|newProps
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
name|String
name|oldValue
init|=
name|oldProps
operator|!=
literal|null
condition|?
name|oldProps
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|newValue
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|oldValue
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// not in either
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testUploadErrors
specifier|public
name|void
name|testUploadErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrClient
name|solrClient
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ByteBuffer
name|emptyData
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Checking error when no configuration name is specified in request
name|Map
name|map
init|=
name|postDataAndGetResponse
argument_list|(
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/admin/configs?action=UPLOAD&wt=json"
argument_list|,
name|emptyData
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|long
name|statusCode
init|=
operator|(
name|long
operator|)
name|getObjectByPath
argument_list|(
name|map
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"responseHeader"
argument_list|,
literal|"status"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|400l
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|solrCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|45000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// Create dummy config files in zookeeper
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/configs/myconf"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|create
argument_list|(
literal|"/configs/myconf/firstDummyFile"
argument_list|,
literal|"first dummy content"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|create
argument_list|(
literal|"/configs/myconf/anotherDummyFile"
argument_list|,
literal|"second dummy content"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|,
name|CreateMode
operator|.
name|PERSISTENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Checking error when configuration name specified already exists
name|map
operator|=
name|postDataAndGetResponse
argument_list|(
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/admin/configs?action=UPLOAD&wt=json&name=myconf"
argument_list|,
name|emptyData
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|statusCode
operator|=
operator|(
name|long
operator|)
name|getObjectByPath
argument_list|(
name|map
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"responseHeader"
argument_list|,
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|400l
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected file doesnt exist in zk. It's possibly overwritten"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/myconf/firstDummyFile"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected file doesnt exist in zk. It's possibly overwritten"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/myconf/anotherDummyFile"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUpload
specifier|public
name|void
name|testUpload
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|suffix
init|=
literal|"-untrusted"
decl_stmt|;
name|uploadConfigSet
argument_list|(
literal|"regular"
argument_list|,
name|suffix
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// try to create a collection with the uploaded configset
name|createCollection
argument_list|(
literal|"newcollection"
argument_list|,
literal|"regular"
operator|+
name|suffix
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|xsltRequest
argument_list|(
literal|"newcollection"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUploadWithRunExecutableListener
specifier|public
name|void
name|testUploadWithRunExecutableListener
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|suffix
init|=
literal|"-untrusted"
decl_stmt|;
name|uploadConfigSet
argument_list|(
literal|"with-run-executable-listener"
argument_list|,
name|suffix
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// try to create a collection with the uploaded configset
name|CollectionAdminResponse
name|resp
init|=
name|createCollection
argument_list|(
literal|"newcollection3"
argument_list|,
literal|"with-run-executable-listener"
operator|+
name|suffix
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Client saw errors: "
operator|+
name|resp
operator|.
name|getErrorMessages
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|getErrorMessages
argument_list|()
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|getErrorMessages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|getErrorMessages
argument_list|()
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"The configset for this collection was uploaded without any authentication"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUploadWithScriptUpdateProcessor
specifier|public
name|void
name|testUploadWithScriptUpdateProcessor
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|boolean
name|withAuthorization
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
name|suffix
decl_stmt|;
if|if
condition|(
name|withAuthorization
condition|)
block|{
name|suffix
operator|=
literal|"-trusted"
expr_stmt|;
name|protectConfigsHandler
argument_list|()
expr_stmt|;
name|uploadConfigSet
argument_list|(
literal|"with-script-processor"
argument_list|,
name|suffix
argument_list|,
literal|"solr"
argument_list|,
literal|"SolrRocks"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|suffix
operator|=
literal|"-untrusted"
expr_stmt|;
name|uploadConfigSet
argument_list|(
literal|"with-script-processor"
argument_list|,
name|suffix
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// try to create a collection with the uploaded configset
name|CollectionAdminResponse
name|resp
init|=
name|createCollection
argument_list|(
literal|"newcollection2"
argument_list|,
literal|"with-script-processor"
operator|+
name|suffix
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|withAuthorization
condition|)
block|{
name|scriptRequest
argument_list|(
literal|"newcollection2"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Client saw errors: "
operator|+
name|resp
operator|.
name|getErrorMessages
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|getErrorMessages
argument_list|()
operator|!=
literal|null
operator|&&
name|resp
operator|.
name|getErrorMessages
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|getErrorMessages
argument_list|()
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"The configset for this collection was uploaded without any authentication"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|zkClient
specifier|protected
name|SolrZkClient
name|zkClient
parameter_list|()
block|{
name|ZkStateReader
name|reader
init|=
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|connect
argument_list|()
expr_stmt|;
return|return
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
return|;
block|}
DECL|method|protectConfigsHandler
specifier|private
name|void
name|protectConfigsHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|authcPrefix
init|=
literal|"/admin/authentication"
decl_stmt|;
name|String
name|authzPrefix
init|=
literal|"/admin/authorization"
decl_stmt|;
name|String
name|securityJson
init|=
literal|"{\n"
operator|+
literal|"  'authentication':{\n"
operator|+
literal|"    'class':'solr.BasicAuthPlugin',\n"
operator|+
literal|"    'credentials':{'solr':'orwp2Ghgj39lmnrZOTm7Qtre1VqHFDfwAEzr0ApbN3Y= Ju5osoAqOX8iafhWpPP01E5P+sg8tK8tHON7rCYZRRw='}},\n"
operator|+
literal|"  'authorization':{\n"
operator|+
literal|"    'class':'solr.RuleBasedAuthorizationPlugin',\n"
operator|+
literal|"    'user-role':{'solr':'admin'},\n"
operator|+
literal|"    'permissions':[{'name':'security-edit','role':'admin'}, {'name':'config-edit','role':'admin'}]}}"
decl_stmt|;
name|HttpClient
name|cl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cl
operator|=
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|randomJetty
init|=
name|solrCluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|baseUrl
init|=
name|randomJetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|zkClient
argument_list|()
operator|.
name|setData
argument_list|(
literal|"/security.json"
argument_list|,
name|securityJson
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BasicAuthIntegrationTest
operator|.
name|verifySecurityStatus
argument_list|(
name|cl
argument_list|,
name|baseUrl
operator|+
name|authcPrefix
argument_list|,
literal|"authentication/class"
argument_list|,
literal|"solr.BasicAuthPlugin"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|BasicAuthIntegrationTest
operator|.
name|verifySecurityStatus
argument_list|(
name|cl
argument_list|,
name|baseUrl
operator|+
name|authzPrefix
argument_list|,
literal|"authorization/class"
argument_list|,
literal|"solr.RuleBasedAuthorizationPlugin"
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|cl
operator|!=
literal|null
condition|)
block|{
name|HttpClientUtil
operator|.
name|close
argument_list|(
name|cl
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// TODO: Without a delay, the test fails. Some problem with Authc/Authz framework?
block|}
DECL|method|uploadConfigSet
specifier|private
name|void
name|uploadConfigSet
parameter_list|(
name|String
name|configSetName
parameter_list|,
name|String
name|suffix
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|Exception
block|{
comment|// Read zipped sample config
name|ByteBuffer
name|sampleZippedConfig
init|=
name|TestDynamicLoading
operator|.
name|getFileContent
argument_list|(
name|createTempZipFile
argument_list|(
literal|"solr/configsets/upload/"
operator|+
name|configSetName
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|solrCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|45000
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ZkConfigManager
name|configManager
init|=
operator|new
name|ZkConfigManager
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|configSetName
operator|+
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
name|postDataAndGetResponse
argument_list|(
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/admin/configs?action=UPLOAD&wt=json&name="
operator|+
name|configSetName
operator|+
name|suffix
argument_list|,
name|sampleZippedConfig
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|long
name|statusCode
init|=
operator|(
name|long
operator|)
name|getObjectByPath
argument_list|(
name|map
argument_list|,
literal|false
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"responseHeader"
argument_list|,
literal|"status"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0l
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"managed-schema file should have been uploaded"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/"
operator|+
name|configSetName
operator|+
name|suffix
operator|+
literal|"/managed-schema"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"managed-schema file contents on zookeeper are not exactly same as that of the file uploaded in config"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/configs/"
operator|+
name|configSetName
operator|+
name|suffix
operator|+
literal|"/managed-schema"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readFile
argument_list|(
literal|"solr/configsets/upload/"
operator|+
name|configSetName
operator|+
literal|"/managed-schema"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"solrconfig.xml file should have been uploaded"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/"
operator|+
name|configSetName
operator|+
name|suffix
operator|+
literal|"/solrconfig.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|byte
name|data
index|[]
init|=
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/configs/"
operator|+
name|configSetName
operator|+
name|suffix
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//assertEquals("{\"trusted\": false}", new String(data, StandardCharsets.UTF_8));
name|assertTrue
argument_list|(
literal|"solrconfig.xml file contents on zookeeper are not exactly same as that of the file uploaded in config"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/configs/"
operator|+
name|configSetName
operator|+
name|suffix
operator|+
literal|"/solrconfig.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|readFile
argument_list|(
literal|"solr/configsets/upload/"
operator|+
name|configSetName
operator|+
literal|"/solrconfig.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Create a zip file (in the temp directory) containing all the files within the specified directory    * and return the path for the zip file.    */
DECL|method|createTempZipFile
specifier|private
name|String
name|createTempZipFile
parameter_list|(
name|String
name|directoryPath
parameter_list|)
block|{
name|File
name|zipFile
init|=
operator|new
name|File
argument_list|(
name|solrCluster
operator|.
name|getBaseDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
operator|+
literal|".zip"
argument_list|)
decl_stmt|;
name|File
name|directory
init|=
name|TestDynamicLoading
operator|.
name|getFile
argument_list|(
name|directoryPath
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Directory: "
operator|+
name|directory
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|zip
argument_list|(
name|directory
argument_list|,
name|zipFile
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Zipfile: "
operator|+
name|zipFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|zipFile
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|zip
specifier|private
specifier|static
name|void
name|zip
parameter_list|(
name|File
name|directory
parameter_list|,
name|File
name|zipfile
parameter_list|)
throws|throws
name|IOException
block|{
name|URI
name|base
init|=
name|directory
operator|.
name|toURI
argument_list|()
decl_stmt|;
name|Deque
argument_list|<
name|File
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|File
argument_list|>
argument_list|()
decl_stmt|;
name|queue
operator|.
name|push
argument_list|(
name|directory
argument_list|)
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|zipfile
argument_list|)
decl_stmt|;
name|ZipOutputStream
name|zout
init|=
operator|new
name|ZipOutputStream
argument_list|(
name|out
argument_list|)
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|directory
operator|=
name|queue
operator|.
name|pop
argument_list|()
expr_stmt|;
for|for
control|(
name|File
name|kid
range|:
name|directory
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|base
operator|.
name|relativize
argument_list|(
name|kid
operator|.
name|toURI
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|kid
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|queue
operator|.
name|push
argument_list|(
name|kid
argument_list|)
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|name
else|:
name|name
operator|+
literal|"/"
expr_stmt|;
name|zout
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|zout
operator|.
name|putNextEntry
argument_list|(
operator|new
name|ZipEntry
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|kid
argument_list|)
decl_stmt|;
try|try
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|readCount
init|=
name|in
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|readCount
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|zout
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|readCount
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|zout
operator|.
name|closeEntry
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|zout
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|xsltRequest
specifier|private
name|void
name|xsltRequest
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
argument_list|(
name|baseUrl
operator|+
literal|"/"
operator|+
name|collection
argument_list|)
init|)
block|{
name|String
name|xml
init|=
literal|"<random>"
operator|+
literal|"<document>"
operator|+
literal|"<node name=\"id\" value=\"12345\"/>"
operator|+
literal|"<node name=\"name\" value=\"kitten\"/>"
operator|+
literal|"<node name=\"text\" enhance=\"3\" value=\"some other day\"/>"
operator|+
literal|"<node name=\"title\" enhance=\"4\" value=\"A story\"/>"
operator|+
literal|"<node name=\"timestamp\" enhance=\"5\" value=\"2011-07-01T10:31:57.140Z\"/>"
operator|+
literal|"</document>"
operator|+
literal|"</random>"
decl_stmt|;
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
comment|//for anything
name|query
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/update"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|TR
argument_list|,
literal|"xsl-update-handler-test.xsl"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"stream.body"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"This should've returned a 401."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|ex
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|ErrorCode
operator|.
name|UNAUTHORIZED
operator|.
name|code
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|scriptRequest
specifier|public
name|void
name|scriptRequest
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrClient
name|client
init|=
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4055"
argument_list|,
literal|"subject"
argument_list|,
literal|"Solr"
argument_list|)
decl_stmt|;
name|client
operator|.
name|add
argument_list|(
name|collection
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"42"
argument_list|,
name|client
operator|.
name|query
argument_list|(
name|collection
argument_list|,
name|params
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"script_added_i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createCollection
specifier|protected
name|CollectionAdminResponse
name|createCollection
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|confSetName
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|replicationFactor
parameter_list|,
name|SolrClient
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
name|confSetName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
name|numShards
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"replicationFactor"
argument_list|,
name|replicationFactor
argument_list|)
expr_stmt|;
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|res
init|=
operator|new
name|CollectionAdminResponse
argument_list|()
decl_stmt|;
name|res
operator|.
name|setResponse
argument_list|(
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
DECL|method|postDataAndGetResponse
specifier|public
specifier|static
name|Map
name|postDataAndGetResponse
parameter_list|(
name|CloudSolrClient
name|cloudClient
parameter_list|,
name|String
name|uri
parameter_list|,
name|ByteBuffer
name|bytarr
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|IOException
block|{
name|HttpPost
name|httpPost
init|=
literal|null
decl_stmt|;
name|HttpEntity
name|entity
decl_stmt|;
name|String
name|response
init|=
literal|null
decl_stmt|;
name|Map
name|m
init|=
literal|null
decl_stmt|;
try|try
block|{
name|httpPost
operator|=
operator|new
name|HttpPost
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|username
operator|!=
literal|null
condition|)
block|{
name|String
name|userPass
init|=
name|username
operator|+
literal|":"
operator|+
name|password
decl_stmt|;
name|String
name|encoded
init|=
name|Base64
operator|.
name|byteArrayToBase64
argument_list|(
name|userPass
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
decl_stmt|;
name|BasicHeader
name|header
init|=
operator|new
name|BasicHeader
argument_list|(
literal|"Authorization"
argument_list|,
literal|"Basic "
operator|+
name|encoded
argument_list|)
decl_stmt|;
name|httpPost
operator|.
name|setHeader
argument_list|(
name|header
argument_list|)
expr_stmt|;
block|}
name|httpPost
operator|.
name|setHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/octet-stream"
argument_list|)
expr_stmt|;
name|httpPost
operator|.
name|setEntity
argument_list|(
operator|new
name|ByteArrayEntity
argument_list|(
name|bytarr
operator|.
name|array
argument_list|()
argument_list|,
name|bytarr
operator|.
name|arrayOffset
argument_list|()
argument_list|,
name|bytarr
operator|.
name|limit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|entity
operator|=
name|cloudClient
operator|.
name|getLbClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
operator|.
name|execute
argument_list|(
name|httpPost
argument_list|)
operator|.
name|getEntity
argument_list|()
expr_stmt|;
try|try
block|{
name|response
operator|=
name|EntityUtils
operator|.
name|toString
argument_list|(
name|entity
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|getVal
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|StringReader
argument_list|(
name|response
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONParser
operator|.
name|ParseException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|httpPost
operator|.
name|releaseConnection
argument_list|()
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
DECL|method|getObjectByPath
specifier|private
specifier|static
name|Object
name|getObjectByPath
parameter_list|(
name|Map
name|root
parameter_list|,
name|boolean
name|onlyPrimitive
parameter_list|,
name|java
operator|.
name|util
operator|.
name|List
argument_list|<
name|String
argument_list|>
name|hierarchy
parameter_list|)
block|{
name|Map
name|obj
init|=
name|root
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
name|hierarchy
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|hierarchy
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
operator|instanceof
name|Map
operator|)
condition|)
return|return
literal|null
return|;
name|obj
operator|=
operator|(
name|Map
operator|)
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
return|return
literal|null
return|;
block|}
else|else
block|{
name|Object
name|val
init|=
name|obj
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|onlyPrimitive
operator|&&
name|val
operator|instanceof
name|Map
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|val
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|readFile
specifier|private
name|byte
index|[]
name|readFile
parameter_list|(
name|String
name|fname
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
literal|null
decl_stmt|;
try|try
init|(
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|getFile
argument_list|(
name|fname
argument_list|)
argument_list|)
init|)
block|{
name|buf
operator|=
operator|new
name|byte
index|[
name|fis
operator|.
name|available
argument_list|()
index|]
expr_stmt|;
name|fis
operator|.
name|read
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
return|;
block|}
annotation|@
name|Test
DECL|method|testDeleteErrors
specifier|public
name|void
name|testDeleteErrors
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SolrClient
name|solrClient
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
specifier|final
name|File
name|configDir
init|=
name|getFile
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets/configset-2/conf"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
specifier|final
name|File
name|tmpConfigDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|tmpConfigDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
comment|// Ensure ConfigSet is immutable
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
name|configDir
argument_list|,
name|tmpConfigDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|write
argument_list|(
operator|new
name|File
argument_list|(
name|tmpConfigDir
argument_list|,
literal|"configsetprops.json"
argument_list|)
argument_list|,
name|getConfigSetProps
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|(
literal|"immutable"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|solrCluster
operator|.
name|uploadConfigSet
argument_list|(
name|tmpConfigDir
operator|.
name|toPath
argument_list|()
argument_list|,
literal|"configSet"
argument_list|)
expr_stmt|;
comment|// no ConfigSet name
name|DeleteNoErrorChecking
name|delete
init|=
operator|new
name|DeleteNoErrorChecking
argument_list|()
decl_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|delete
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
comment|// ConfigSet doesn't exist
name|delete
operator|.
name|setConfigSetName
argument_list|(
literal|"configSetBogus"
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|delete
argument_list|,
literal|"ConfigSet does not exist"
argument_list|)
expr_stmt|;
comment|// ConfigSet is immutable
name|delete
operator|.
name|setConfigSetName
argument_list|(
literal|"configSet"
argument_list|)
expr_stmt|;
name|verifyException
argument_list|(
name|solrClient
argument_list|,
name|delete
argument_list|,
literal|"Requested delete of immutable ConfigSet"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|verifyException
specifier|private
name|void
name|verifyException
parameter_list|(
name|SolrClient
name|solrClient
parameter_list|,
name|ConfigSetAdminRequest
name|request
parameter_list|,
name|String
name|errorContains
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|solrClient
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"Expected exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"Expected exception message to contain: "
operator|+
name|errorContains
operator|+
literal|" got: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|errorContains
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDelete
specifier|public
name|void
name|testDelete
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SolrClient
name|solrClient
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
specifier|final
name|String
name|configSet
init|=
literal|"configSet"
decl_stmt|;
name|solrCluster
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"configset-2"
argument_list|)
argument_list|,
name|configSet
argument_list|)
expr_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|solrCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|ZkConfigManager
name|configManager
init|=
operator|new
name|ZkConfigManager
argument_list|(
name|zkClient
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|configSet
argument_list|)
argument_list|)
expr_stmt|;
name|Delete
name|delete
init|=
operator|new
name|Delete
argument_list|()
decl_stmt|;
name|delete
operator|.
name|setConfigSetName
argument_list|(
name|configSet
argument_list|)
expr_stmt|;
name|ConfigSetAdminResponse
name|response
init|=
name|delete
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|configManager
operator|.
name|configExists
argument_list|(
name|configSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|baseUrl
init|=
name|solrCluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|SolrClient
name|solrClient
init|=
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|SolrZkClient
name|zkClient
init|=
operator|new
name|SolrZkClient
argument_list|(
name|solrCluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
name|AbstractZkTestCase
operator|.
name|TIMEOUT
argument_list|,
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
comment|// test empty
name|ConfigSetAdminRequest
operator|.
name|List
name|list
init|=
operator|new
name|ConfigSetAdminRequest
operator|.
name|List
argument_list|()
decl_stmt|;
name|ConfigSetAdminResponse
operator|.
name|List
name|response
init|=
name|list
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|actualConfigSets
init|=
name|response
operator|.
name|getConfigSets
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|actualConfigSets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test multiple
name|Set
argument_list|<
name|String
argument_list|>
name|configSets
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|String
name|configSet
init|=
literal|"configSet"
operator|+
name|i
decl_stmt|;
name|solrCluster
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"configset-2"
argument_list|)
argument_list|,
name|configSet
argument_list|)
expr_stmt|;
name|configSets
operator|.
name|add
argument_list|(
name|configSet
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|list
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|actualConfigSets
operator|=
name|response
operator|.
name|getConfigSets
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|configSets
operator|.
name|size
argument_list|()
argument_list|,
name|actualConfigSets
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|configSets
operator|.
name|containsAll
argument_list|(
name|actualConfigSets
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|solrClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|getConfigSetProps
specifier|private
name|StringBuilder
name|getConfigSetProps
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
block|{
return|return
operator|new
name|StringBuilder
argument_list|(
operator|new
name|String
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|map
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
return|;
block|}
DECL|class|CreateNoErrorChecking
specifier|public
specifier|static
class|class
name|CreateNoErrorChecking
extends|extends
name|ConfigSetAdminRequest
operator|.
name|Create
block|{
DECL|method|setAction
specifier|public
name|ConfigSetAdminRequest
name|setAction
parameter_list|(
name|ConfigSetAction
name|action
parameter_list|)
block|{
return|return
name|super
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|ConfigSetParams
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configSetName
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|NAME
argument_list|,
name|configSetName
argument_list|)
expr_stmt|;
if|if
condition|(
name|baseConfigSetName
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
literal|"baseConfigSet"
argument_list|,
name|baseConfigSetName
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
DECL|class|DeleteNoErrorChecking
specifier|public
specifier|static
class|class
name|DeleteNoErrorChecking
extends|extends
name|ConfigSetAdminRequest
operator|.
name|Delete
block|{
DECL|method|setAction
specifier|public
name|ConfigSetAdminRequest
name|setAction
parameter_list|(
name|ConfigSetAction
name|action
parameter_list|)
block|{
return|return
name|super
operator|.
name|setAction
argument_list|(
name|action
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getParams
specifier|public
name|SolrParams
name|getParams
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|ConfigSetParams
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|configSetName
operator|!=
literal|null
condition|)
name|params
operator|.
name|set
argument_list|(
name|NAME
argument_list|,
name|configSetName
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
block|}
block|}
end_class

end_unit

