begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanServerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|Create
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CoreAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrInfoBean
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|REPLICATION_FACTOR
import|;
end_import

begin_comment
comment|/**  * Tests the Cloud Collections API.  */
end_comment

begin_class
annotation|@
name|Slow
DECL|class|CollectionsAPIDistributedZkTest
specifier|public
class|class
name|CollectionsAPIDistributedZkTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeCollectionsAPIDistributedZkTest
specifier|public
specifier|static
name|void
name|beforeCollectionsAPIDistributedZkTest
parameter_list|()
block|{
comment|// we don't want this test to have zk timeouts
name|System
operator|.
name|setProperty
argument_list|(
literal|"zkClientTimeout"
argument_list|,
literal|"240000"
argument_list|)
expr_stmt|;
name|TestInjection
operator|.
name|randomDelayInCoreCreation
operator|=
literal|"true:20"
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"validateAfterInactivity"
argument_list|,
literal|"200"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|solrXml
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|CollectionsAPIDistributedZkTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"/solr/solr-jmxreporter.xml"
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf2"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal-jmx"
argument_list|)
argument_list|)
operator|.
name|withSolrXml
argument_list|(
name|solrXml
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|clearCluster
specifier|public
name|void
name|clearCluster
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|cluster
operator|.
name|deleteAllCollections
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"zkClientTimeout"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreationAndDeletion
specifier|public
name|void
name|testCreationAndDeletion
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"created_and_deleted"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteCollectionRemovesStaleZkCollectionsNode
specifier|public
name|void
name|deleteCollectionRemovesStaleZkCollectionsNode
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"out_of_sync_collection"
decl_stmt|;
comment|// manually create a collections zknode
name|cluster
operator|.
name|getZkClient
argument_list|()
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getZkClient
argument_list|()
operator|.
name|exists
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deletePartiallyCreatedCollection
specifier|public
name|void
name|deletePartiallyCreatedCollection
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"halfdeletedcollection"
decl_stmt|;
comment|// create a core that simulates something left over from a partially-deleted collection
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"halfdeletedcollection_shard1_replica1"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf"
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|deleteCollectionOnlyInZk
specifier|public
name|void
name|deleteCollectionOnlyInZk
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"onlyinzk"
decl_stmt|;
comment|// create the collections node, but nothing else
name|cluster
operator|.
name|getZkClient
argument_list|()
operator|.
name|makePath
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
name|collectionName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// delete via API - should remove collections node
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
comment|// now creating that collection should work
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|contains
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadActionNames
specifier|public
name|void
name|testBadActionNames
parameter_list|()
throws|throws
name|Exception
block|{
comment|// try a bad action
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"BADACTION"
argument_list|)
expr_stmt|;
name|String
name|collectionName
init|=
literal|"badactioncollection"
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
specifier|final
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingRequiredParameters
specifier|public
name|void
name|testMissingRequiredParameters
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// missing required collection parameter
specifier|final
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTooManyReplicas
specifier|public
name|void
name|testTooManyReplicas
parameter_list|()
block|{
name|CollectionAdminRequest
name|req
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"collection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMissingNumShards
specifier|public
name|void
name|testMissingNumShards
parameter_list|()
block|{
comment|// No numShards should fail
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"acollection"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
specifier|final
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroNumShards
specifier|public
name|void
name|testZeroNumShards
parameter_list|()
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
name|CollectionAction
operator|.
name|CREATE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
literal|"acollection"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|REPLICATION_FACTOR
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"numShards"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"conf"
argument_list|)
expr_stmt|;
specifier|final
name|SolrRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateShouldFailOnExistingCore
specifier|public
name|void
name|testCreateShouldFailOnExistingCore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// first we make a core with the core name the collections api
comment|// will try and use - this will cause our mock fail
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"halfcollection_shard1_replica1"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|"halfcollectionblocker"
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf"
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrClient
name|client
init|=
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|newClient
argument_list|()
init|)
block|{
name|client
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
block|}
name|createCmd
operator|=
operator|new
name|Create
argument_list|()
expr_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"halfcollection_shard1_replica1"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|"halfcollectionblocker2"
argument_list|)
expr_stmt|;
name|dataDir
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf"
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrClient
name|client
init|=
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|1
argument_list|)
operator|.
name|newClient
argument_list|()
init|)
block|{
name|client
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
block|}
name|String
name|nn1
init|=
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|String
name|nn2
init|=
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|1
argument_list|)
operator|.
name|getNodeName
argument_list|()
decl_stmt|;
name|CollectionAdminResponse
name|resp
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"halfcollection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|setCreateNodeSet
argument_list|(
name|nn1
operator|+
literal|","
operator|+
name|nn2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
name|success
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
decl_stmt|;
name|SimpleOrderedMap
name|failure
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"failure"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resp
operator|.
name|toString
argument_list|()
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|resp
operator|.
name|toString
argument_list|()
argument_list|,
name|failure
argument_list|)
expr_stmt|;
name|String
name|val1
init|=
name|success
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|val2
init|=
name|failure
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|val1
operator|.
name|contains
argument_list|(
literal|"SolrException"
argument_list|)
operator|||
name|val2
operator|.
name|contains
argument_list|(
literal|"SolrException"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoCollectionSpecified
specifier|public
name|void
name|testNoCollectionSpecified
parameter_list|()
throws|throws
name|Exception
block|{
comment|// TODO - should we remove this behaviour?
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection2"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try and create a SolrCore with no collection name
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"corewithnocollection"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
comment|// try and create a SolrCore with no collection name
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"corewithnocollection2"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
comment|// in both cases, the collection should have default to the core name
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
literal|"corewithnocollection"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
literal|"corewithnocollection2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNoConfigSetExist
specifier|public
name|void
name|testNoConfigSetExist
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
literal|"corewithnocollection3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// try and create a SolrCore with no collection name
name|Create
name|createCmd
init|=
operator|new
name|Create
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setCoreName
argument_list|(
literal|"corewithnocollection3"
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollection
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|String
name|dataDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|createCmd
operator|.
name|setDataDir
argument_list|(
name|dataDir
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setNumShards
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|createCmd
operator|.
name|setCollectionConfigName
argument_list|(
literal|"conf123"
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|createCmd
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// in both cases, the collection should have default to the core name
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
literal|"corewithnocollection3"
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getActiveSlices
argument_list|(
literal|"corewithnocollection3"
argument_list|)
decl_stmt|;
name|int
name|replicaCount
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|slices
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|replicaCount
operator|+=
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"replicaCount"
argument_list|,
literal|0
argument_list|,
name|replicaCount
argument_list|)
expr_stmt|;
comment|// TODO - WTF? shouldn't this *not* contain the collection?
name|assertTrue
argument_list|(
name|CollectionAdminRequest
operator|.
name|listCollections
argument_list|(
name|cloudClient
argument_list|)
operator|.
name|contains
argument_list|(
literal|"corewithnocollection3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCoresAreDistributedAcrossNodes
specifier|public
name|void
name|testCoresAreDistributedAcrossNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"nodes_used_collection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|createNodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|createNodeList
operator|.
name|addAll
argument_list|(
name|liveNodes
argument_list|)
expr_stmt|;
name|DocCollection
name|collection
init|=
name|getCollectionState
argument_list|(
literal|"nodes_used_collection"
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|collection
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|createNodeList
operator|.
name|remove
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|createNodeList
operator|.
name|toString
argument_list|()
argument_list|,
literal|0
argument_list|,
name|createNodeList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDeleteNonExistentCollection
specifier|public
name|void
name|testDeleteNonExistentCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrException
name|e
init|=
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"unknown_collection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
comment|// create another collection should still work
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"acollectionafterbaddelete"
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Collection creation after a bad delete failed"
argument_list|,
literal|"acollectionafterbaddelete"
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|DocCollection
operator|.
name|isFullyActive
argument_list|(
name|n
argument_list|,
name|c
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpecificConfigsets
specifier|public
name|void
name|testSpecificConfigsets
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"withconfigset2"
argument_list|,
literal|"conf2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|zkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTIONS_ZKNODE
operator|+
literal|"/"
operator|+
literal|"withconfigset2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|props
init|=
name|ZkNodeProps
operator|.
name|load
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|configName
init|=
name|props
operator|.
name|getStr
argument_list|(
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"conf2"
argument_list|,
name|configName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMaxNodesPerShard
specifier|public
name|void
name|testMaxNodesPerShard
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test maxShardsPerNode
name|int
name|numLiveNodes
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|numShards
init|=
operator|(
name|numLiveNodes
operator|/
literal|2
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
literal|2
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
literal|1
decl_stmt|;
name|SolrException
name|e
init|=
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"oversharded"
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateNodeSet
specifier|public
name|void
name|testCreateNodeSet
parameter_list|()
throws|throws
name|Exception
block|{
name|JettySolrRunner
name|jetty1
init|=
name|cluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|JettySolrRunner
name|jetty2
init|=
name|cluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|baseUrls
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|jetty1
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|jetty2
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"nodeset_collection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|setCreateNodeSet
argument_list|(
name|baseUrls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|","
operator|+
name|baseUrls
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|collectionState
init|=
name|getCollectionState
argument_list|(
literal|"nodeset_collection"
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|collectionState
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|String
name|replicaUrl
init|=
name|replica
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|boolean
name|matchingJetty
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|jettyUrl
range|:
name|baseUrls
control|)
block|{
if|if
condition|(
name|replicaUrl
operator|.
name|startsWith
argument_list|(
name|jettyUrl
argument_list|)
condition|)
name|matchingJetty
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|matchingJetty
operator|==
literal|false
condition|)
name|fail
argument_list|(
literal|"Expected replica to be on "
operator|+
name|baseUrls
operator|+
literal|" but was on "
operator|+
name|replicaUrl
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCollectionsAPI
specifier|public
name|void
name|testCollectionsAPI
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create new collections rapid fire
name|int
name|cnt
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|TEST_NIGHTLY
condition|?
literal|3
else|:
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
index|[]
name|createRequests
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|Create
index|[
name|cnt
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numShards
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|replicationFactor
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
operator|(
operator|(
operator|(
name|numShards
operator|*
name|replicationFactor
operator|)
operator|/
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
operator|)
operator|)
operator|+
literal|1
decl_stmt|;
name|createRequests
index|[
name|i
index|]
operator|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"awhollynewcollection_"
operator|+
name|i
argument_list|,
literal|"conf2"
argument_list|,
name|numShards
argument_list|,
name|replicationFactor
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
name|maxShardsPerNode
argument_list|)
expr_stmt|;
name|createRequests
index|[
name|i
index|]
operator|.
name|processAsync
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cnt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|collectionName
init|=
literal|"awhollynewcollection_"
operator|+
name|i
decl_stmt|;
specifier|final
name|int
name|j
init|=
name|i
decl_stmt|;
name|waitForState
argument_list|(
literal|"Expected to see collection "
operator|+
name|collectionName
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
name|CollectionAdminRequest
operator|.
name|Create
name|req
init|=
name|createRequests
index|[
name|j
index|]
decl_stmt|;
return|return
name|DocCollection
operator|.
name|isFullyActive
argument_list|(
name|n
argument_list|,
name|c
argument_list|,
name|req
operator|.
name|getNumShards
argument_list|()
argument_list|,
name|req
operator|.
name|getReplicationFactor
argument_list|()
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|injectChaos
argument_list|(
name|random
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|checkInstanceDirs
argument_list|(
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|collectionName
init|=
name|createRequests
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|createRequests
operator|.
name|length
argument_list|)
index|]
operator|.
name|getCollectionName
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|query
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|checkNoTwoShardsUseTheSameIndexDir
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCollectionReload
specifier|public
name|void
name|testCollectionReload
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"reloaded_collection"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// get core open times
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|urlToTimeBefore
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|reloadCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|processAsync
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// reloads make take a short while
name|boolean
name|allTimesAreCorrect
init|=
name|waitForReloads
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeBefore
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"some core start times did not change on reload"
argument_list|,
name|allTimesAreCorrect
argument_list|)
expr_stmt|;
block|}
DECL|method|checkInstanceDirs
specifier|private
name|void
name|checkInstanceDirs
parameter_list|(
name|JettySolrRunner
name|jetty
parameter_list|)
throws|throws
name|IOException
block|{
name|CoreContainer
name|cores
init|=
name|jetty
operator|.
name|getCoreContainer
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|SolrCore
argument_list|>
name|theCores
init|=
name|cores
operator|.
name|getCores
argument_list|()
decl_stmt|;
for|for
control|(
name|SolrCore
name|core
range|:
name|theCores
control|)
block|{
comment|// look for core props file
name|Path
name|instancedir
init|=
operator|(
name|Path
operator|)
name|core
operator|.
name|getResourceLoader
argument_list|()
operator|.
name|getInstancePath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Could not find expected core.properties file"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|instancedir
operator|.
name|resolve
argument_list|(
literal|"core.properties"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|expected
init|=
name|Paths
operator|.
name|get
argument_list|(
name|jetty
operator|.
name|getSolrHome
argument_list|()
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|core
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Expected: "
operator|+
name|expected
operator|+
literal|"\nFrom core stats: "
operator|+
name|instancedir
argument_list|,
name|Files
operator|.
name|isSameFile
argument_list|(
name|expected
argument_list|,
name|instancedir
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|waitForReloads
specifier|private
name|boolean
name|waitForReloads
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeBefore
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|TimeOut
name|timeout
init|=
operator|new
name|TimeOut
argument_list|(
literal|45
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|allTimesAreCorrect
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTimeAfter
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|collectStartTimes
argument_list|(
name|collectionName
argument_list|,
name|urlToTimeAfter
argument_list|)
expr_stmt|;
name|boolean
name|retry
init|=
literal|false
decl_stmt|;
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|>
name|entries
init|=
name|urlToTimeBefore
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|entries
control|)
block|{
name|Long
name|beforeTime
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Long
name|afterTime
init|=
name|urlToTimeAfter
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|afterTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|afterTime
operator|<=
name|beforeTime
condition|)
block|{
name|retry
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|retry
condition|)
block|{
name|allTimesAreCorrect
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|allTimesAreCorrect
return|;
block|}
DECL|method|collectStartTimes
specifier|private
name|void
name|collectStartTimes
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|urlToTime
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|DocCollection
name|collectionState
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionState
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Slice
name|shard
range|:
name|collectionState
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|shard
control|)
block|{
name|ZkCoreNodeProps
name|coreProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|replica
argument_list|)
decl_stmt|;
name|CoreStatus
name|coreStatus
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|server
init|=
name|getHttpSolrClient
argument_list|(
name|coreProps
operator|.
name|getBaseUrl
argument_list|()
argument_list|)
init|)
block|{
name|coreStatus
operator|=
name|CoreAdminRequest
operator|.
name|getCoreStatus
argument_list|(
name|coreProps
operator|.
name|getCoreName
argument_list|()
argument_list|,
literal|false
argument_list|,
name|server
argument_list|)
expr_stmt|;
block|}
name|long
name|before
init|=
name|coreStatus
operator|.
name|getCoreStartTime
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|urlToTime
operator|.
name|put
argument_list|(
name|coreProps
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|before
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Could not find collection "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
block|}
DECL|method|checkNoTwoShardsUseTheSameIndexDir
specifier|private
name|void
name|checkNoTwoShardsUseTheSameIndexDir
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|indexDirToShardNamesMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MBeanServer
argument_list|>
name|servers
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|servers
operator|.
name|add
argument_list|(
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
argument_list|)
expr_stmt|;
name|servers
operator|.
name|addAll
argument_list|(
name|MBeanServerFactory
operator|.
name|findMBeanServer
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|MBeanServer
name|server
range|:
name|servers
control|)
block|{
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|mbeans
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|mbeans
operator|.
name|addAll
argument_list|(
name|server
operator|.
name|queryNames
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ObjectName
name|mbean
range|:
name|mbeans
control|)
block|{
try|try
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
name|mbean
operator|.
name|getKeyPropertyList
argument_list|()
decl_stmt|;
name|String
name|category
init|=
name|props
operator|.
name|get
argument_list|(
literal|"category"
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|props
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|category
operator|!=
literal|null
operator|&&
name|category
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|CORE
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
name|name
operator|!=
literal|null
operator|&&
name|name
operator|.
name|equals
argument_list|(
literal|"indexDir"
argument_list|)
operator|)
condition|)
block|{
name|String
name|indexDir
init|=
name|server
operator|.
name|getAttribute
argument_list|(
name|mbean
argument_list|,
literal|"Value"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|props
operator|.
name|get
argument_list|(
literal|"dom2"
argument_list|)
operator|+
literal|"."
operator|+
name|props
operator|.
name|get
argument_list|(
literal|"dom3"
argument_list|)
operator|+
literal|"."
operator|+
name|props
operator|.
name|get
argument_list|(
literal|"dom4"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|indexDirToShardNamesMap
operator|.
name|containsKey
argument_list|(
name|indexDir
argument_list|)
condition|)
block|{
name|indexDirToShardNamesMap
operator|.
name|put
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|,
operator|new
name|HashSet
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|indexDirToShardNamesMap
operator|.
name|get
argument_list|(
name|indexDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ignore, just continue - probably a "Value" attribute
comment|// not found
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"Something is broken in the assert for no shards using the same indexDir - probably something was changed in the attributes published in the MBean of "
operator|+
name|SolrCore
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" : "
operator|+
name|indexDirToShardNamesMap
argument_list|,
name|indexDirToShardNamesMap
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|indexDirToShardNamesMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|fail
argument_list|(
literal|"We have shards using the same indexDir. E.g. shards "
operator|+
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" all use indexDir "
operator|+
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|addReplicaTest
specifier|public
name|void
name|addReplicaTest
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"addReplicaColl"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|4
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newReplicaName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|setNode
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|newReplica
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Replica should be created on the right node"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|newReplica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|)
expr_stmt|;
name|newReplicaName
operator|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|Path
name|instancePath
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|withProperty
argument_list|(
name|CoreAdminParams
operator|.
name|INSTANCE_DIR
argument_list|,
name|instancePath
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|newReplica
operator|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|newReplica
argument_list|)
expr_stmt|;
try|try
init|(
name|HttpSolrClient
name|coreclient
init|=
name|getHttpSolrClient
argument_list|(
name|newReplica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|BASE_URL_PROP
argument_list|)
argument_list|)
init|)
block|{
name|CoreAdminResponse
name|status
init|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|newReplica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|,
name|coreclient
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|coreStatus
init|=
name|status
operator|.
name|getCoreStatus
argument_list|(
name|newReplica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|instanceDirStr
init|=
operator|(
name|String
operator|)
name|coreStatus
operator|.
name|get
argument_list|(
literal|"instanceDir"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|instanceDirStr
argument_list|,
name|instancePath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Test to make sure we can't create another replica with an existing core_name of that collection
name|String
name|coreName
init|=
name|newReplica
operator|.
name|getStr
argument_list|(
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|SolrException
name|e
init|=
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"addreplica"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"shard"
argument_list|,
literal|"shard1"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"name"
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Another replica with the same core name already exists for this collection"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that specifying property.name works. DO NOT remove this when the "name" property is deprecated
comment|// for ADDREPLICA, this is "property.name". See SOLR-7132
name|newReplicaName
operator|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|withProperty
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"propertyDotName"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|newReplica
operator|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"'core' should be 'propertyDotName' "
argument_list|,
literal|"propertyDotName"
argument_list|,
name|newReplica
operator|.
name|getStr
argument_list|(
literal|"core"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

