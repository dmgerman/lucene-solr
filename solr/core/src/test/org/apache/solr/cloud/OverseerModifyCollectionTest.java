begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|COLLECTIONS_HANDLER_PATH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|RemoteSolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|ConfigSetAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|GenericSolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|ConfigSetAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|OverseerModifyCollectionTest
specifier|public
class|class
name|OverseerModifyCollectionTest
extends|extends
name|AbstractFullDistribZkTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testModifyColl
specifier|public
name|void
name|testModifyColl
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collName
init|=
literal|"modifyColl"
decl_stmt|;
name|String
name|newConfName
init|=
literal|"conf"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
name|String
name|oldConfName
init|=
literal|"conf1"
decl_stmt|;
try|try
init|(
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|CollectionAdminResponse
name|rsp
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collName
argument_list|,
name|oldConfName
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rsp
operator|=
name|create
operator|.
name|process
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rsp
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigSetAdminRequest
operator|.
name|Create
name|createConfig
init|=
operator|new
name|ConfigSetAdminRequest
operator|.
name|Create
argument_list|()
operator|.
name|setBaseConfigSetName
argument_list|(
name|oldConfName
argument_list|)
operator|.
name|setConfigSetName
argument_list|(
name|newConfName
argument_list|)
decl_stmt|;
name|ConfigSetAdminResponse
name|configRsp
init|=
name|createConfig
operator|.
name|process
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|configRsp
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"collection"
argument_list|,
name|collName
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"action"
argument_list|,
literal|"MODIFYCOLLECTION"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"collection.configName"
argument_list|,
name|newConfName
argument_list|)
expr_stmt|;
name|client
operator|.
name|request
argument_list|(
operator|new
name|GenericSolrRequest
argument_list|(
name|POST
argument_list|,
name|COLLECTIONS_HANDLER_PATH
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|newConfName
argument_list|,
name|getConfigNameFromZk
argument_list|(
name|collName
argument_list|)
argument_list|)
expr_stmt|;
comment|//Try an invalid config name
try|try
init|(
name|SolrClient
name|client
init|=
name|createNewSolrClient
argument_list|(
literal|""
argument_list|,
name|getBaseUrl
argument_list|(
operator|(
name|HttpSolrClient
operator|)
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|ModifiableSolrParams
name|p
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"collection"
argument_list|,
name|collName
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"action"
argument_list|,
literal|"MODIFYCOLLECTION"
argument_list|)
expr_stmt|;
name|p
operator|.
name|add
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"notARealConfigName"
argument_list|)
expr_stmt|;
try|try
block|{
name|client
operator|.
name|request
argument_list|(
operator|new
name|GenericSolrRequest
argument_list|(
name|POST
argument_list|,
name|COLLECTIONS_HANDLER_PATH
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Exception should be thrown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteSolrException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Can not find the specified config set"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getConfigNameFromZk
specifier|private
name|String
name|getConfigNameFromZk
parameter_list|(
name|String
name|collName
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|byte
index|[]
name|b
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
operator|.
name|getData
argument_list|(
name|ZkStateReader
operator|.
name|getCollectionPathRoot
argument_list|(
name|collName
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|confData
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|b
argument_list|)
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|confData
operator|.
name|get
argument_list|(
name|ZkController
operator|.
name|CONFIGNAME_PROP
argument_list|)
return|;
block|}
block|}
end_class

end_unit

