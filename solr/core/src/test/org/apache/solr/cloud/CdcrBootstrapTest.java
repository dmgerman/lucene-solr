begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|AbstractUpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|CdcrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|CdcrBootstrapTest
specifier|public
class|class
name|CdcrBootstrapTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Starts a source cluster with no CDCR configuration, indexes enough documents such that    * the at least one old tlog is closed and thrown away so that the source cluster does not have    * all updates available in tlogs only.    *<p>    * Then we start a target cluster with CDCR configuration and we change the source cluster configuration    * to use CDCR (i.e. CdcrUpdateLog, CdcrRequestHandler and CdcrUpdateProcessor) and restart it.    *<p>    * We test that all updates eventually make it to the target cluster and that the collectioncheckpoint    * call returns the same version as the last update indexed on the source.    */
annotation|@
name|Test
DECL|method|testConvertClusterToCdcrAndBootstrap
specifier|public
name|void
name|testConvertClusterToCdcrAndBootstrap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start the target first so that we know its zkhost
name|MiniSolrCloudCluster
name|target
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|(
literal|"cdcr-target"
argument_list|)
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|target
operator|.
name|waitForAllNodes
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Target zkHost = "
operator|+
name|target
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"cdcr.target.zkHost"
argument_list|,
name|target
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
comment|// start a cluster with no cdcr
name|MiniSolrCloudCluster
name|source
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|(
literal|"cdcr-source"
argument_list|)
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|source
operator|.
name|waitForAllNodes
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|source
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-source-disabled"
argument_list|)
argument_list|,
literal|"cdcr-source"
argument_list|)
expr_stmt|;
comment|// create a collection with the cdcr-source-disabled configset
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"cdcr-source"
argument_list|,
literal|"cdcr-source"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
comment|// todo investigate why this is necessary??? because by default it selects a ram directory which deletes the tlogs on reloads?
operator|.
name|withProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.StandardDirectoryFactory"
argument_list|)
operator|.
name|process
argument_list|(
name|source
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// index 10000 docs with a hard commit every 1000 documents
name|CloudSolrClient
name|sourceSolrClient
init|=
name|source
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|sourceSolrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"cdcr-source"
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|numDocs
operator|<
operator|(
name|k
operator|+
literal|1
operator|)
operator|*
literal|100
condition|;
name|numDocs
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"source_"
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"xyz"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding 100 docs with commit=true, numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
block|}
name|QueryResponse
name|response
init|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|numDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// lets find and keep the maximum version assigned by source cluster across all our updates
name|long
name|maxVersion
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/get"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"getVersions"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|response
operator|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|versions
init|=
operator|(
name|List
argument_list|<
name|Long
argument_list|>
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"versions"
argument_list|)
decl_stmt|;
for|for
control|(
name|Long
name|version
range|:
name|versions
control|)
block|{
name|maxVersion
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxVersion
argument_list|,
name|version
argument_list|)
expr_stmt|;
block|}
comment|//       upload the cdcr-enabled config and restart source cluster
name|source
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-source"
argument_list|)
argument_list|,
literal|"cdcr-source"
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|runner
init|=
name|source
operator|.
name|stopJettySolrRunner
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|source
operator|.
name|startJettySolrRunner
argument_list|(
name|runner
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|runner
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"cdcr-source"
argument_list|,
name|source
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|330
argument_list|)
expr_stmt|;
name|response
operator|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document mismatch on source after restart"
argument_list|,
name|numDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup the target cluster
name|target
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-target"
argument_list|)
argument_list|,
literal|"cdcr-target"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"cdcr-target"
argument_list|,
literal|"cdcr-target"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|target
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|targetSolrClient
init|=
name|target
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|targetSolrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"cdcr-target"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|targetSolrClient
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|response
operator|=
name|getCdcrQueue
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cdcr queue response: "
operator|+
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundDocs
init|=
name|waitForTargetToSync
argument_list|(
name|numDocs
argument_list|,
name|targetSolrClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Document mismatch on target after sync"
argument_list|,
name|numDocs
argument_list|,
name|foundDocs
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|COLLECTIONCHECKPOINT
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/cdcr"
argument_list|)
expr_stmt|;
name|response
operator|=
name|targetSolrClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|Long
name|checkpoint
init|=
operator|(
name|Long
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|CdcrParams
operator|.
name|CHECKPOINT
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"COLLECTIONCHECKPOINT from target cluster should have returned the maximum "
operator|+
literal|"version across all updates made to source"
argument_list|,
name|maxVersion
argument_list|,
name|checkpoint
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|source
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|target
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * This test start cdcr source, adds data,starts target cluster, verifies replication,    * stops cdcr replication and buffering, adds more data, re-enables cdcr and verify replication    */
DECL|method|testBootstrapWithSourceCluster
specifier|public
name|void
name|testBootstrapWithSourceCluster
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start the target first so that we know its zkhost
name|MiniSolrCloudCluster
name|target
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|(
literal|"cdcr-target"
argument_list|)
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|target
operator|.
name|waitForAllNodes
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Target zkHost = "
operator|+
name|target
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"cdcr.target.zkHost"
argument_list|,
name|target
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|MiniSolrCloudCluster
name|source
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|(
literal|"cdcr-source"
argument_list|)
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|source
operator|.
name|waitForAllNodes
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|source
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-source"
argument_list|)
argument_list|,
literal|"cdcr-source"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"cdcr-source"
argument_list|,
literal|"cdcr-source"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.StandardDirectoryFactory"
argument_list|)
operator|.
name|process
argument_list|(
name|source
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// index 10000 docs with a hard commit every 1000 documents
name|CloudSolrClient
name|sourceSolrClient
init|=
name|source
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|sourceSolrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"cdcr-source"
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|numDocs
operator|<
operator|(
name|k
operator|+
literal|1
operator|)
operator|*
literal|100
condition|;
name|numDocs
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"source_"
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"xyz"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding 100 docs with commit=true, numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
block|}
name|QueryResponse
name|response
init|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|numDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup the target cluster
name|target
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-target"
argument_list|)
argument_list|,
literal|"cdcr-target"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"cdcr-target"
argument_list|,
literal|"cdcr-target"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|target
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|targetSolrClient
init|=
name|target
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|targetSolrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"cdcr-target"
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|targetSolrClient
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|response
operator|=
name|getCdcrQueue
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cdcr queue response: "
operator|+
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundDocs
init|=
name|waitForTargetToSync
argument_list|(
name|numDocs
argument_list|,
name|targetSolrClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Document mismatch on target after sync"
argument_list|,
name|numDocs
argument_list|,
name|foundDocs
argument_list|)
expr_stmt|;
name|cdcrStop
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|cdcrDisableBuffer
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|c
operator|<
operator|(
name|k
operator|+
literal|1
operator|)
operator|*
literal|100
condition|;
name|c
operator|++
operator|,
name|numDocs
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"source_"
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"xyz"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding 100 docs with commit=true, numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|numDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|cdcrEnableBuffer
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|foundDocs
operator|=
name|waitForTargetToSync
argument_list|(
name|numDocs
argument_list|,
name|targetSolrClient
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Document mismatch on target after sync"
argument_list|,
name|numDocs
argument_list|,
name|foundDocs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|source
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|target
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBootstrapWithContinousIndexingOnSourceCluster
specifier|public
name|void
name|testBootstrapWithContinousIndexingOnSourceCluster
parameter_list|()
throws|throws
name|Exception
block|{
comment|// start the target first so that we know its zkhost
name|MiniSolrCloudCluster
name|target
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|(
literal|"cdcr-target"
argument_list|)
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
name|target
operator|.
name|waitForAllNodes
argument_list|(
literal|30
argument_list|)
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Target zkHost = "
operator|+
name|target
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"cdcr.target.zkHost"
argument_list|,
name|target
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
expr_stmt|;
name|MiniSolrCloudCluster
name|source
init|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
literal|1
argument_list|,
name|createTempDir
argument_list|(
literal|"cdcr-source"
argument_list|)
argument_list|,
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|source
operator|.
name|waitForAllNodes
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|source
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-source"
argument_list|)
argument_list|,
literal|"cdcr-source"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"cdcr-source"
argument_list|,
literal|"cdcr-source"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.StandardDirectoryFactory"
argument_list|)
operator|.
name|process
argument_list|(
name|source
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// index 10000 docs with a hard commit every 1000 documents
name|CloudSolrClient
name|sourceSolrClient
init|=
name|source
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|sourceSolrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"cdcr-source"
argument_list|)
expr_stmt|;
name|int
name|numDocs
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|numDocs
operator|<
operator|(
name|k
operator|+
literal|1
operator|)
operator|*
literal|100
condition|;
name|numDocs
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"source_"
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"xyz"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding 100 docs with commit=true, numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
block|}
name|QueryResponse
name|response
init|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|numDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// setup the target cluster
name|target
operator|.
name|uploadConfigSet
argument_list|(
name|configset
argument_list|(
literal|"cdcr-target"
argument_list|)
argument_list|,
literal|"cdcr-target"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"cdcr-target"
argument_list|,
literal|"cdcr-target"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|target
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|targetSolrClient
init|=
name|target
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|targetSolrClient
operator|.
name|setDefaultCollection
argument_list|(
literal|"cdcr-target"
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|targetSolrClient
argument_list|)
expr_stmt|;
name|cdcrStart
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|100
condition|;
name|k
operator|++
control|)
block|{
name|UpdateRequest
name|req
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|c
operator|<
operator|(
name|k
operator|+
literal|1
operator|)
operator|*
literal|100
condition|;
name|c
operator|++
operator|,
name|numDocs
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"source_"
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"xyz"
argument_list|,
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|setAction
argument_list|(
name|AbstractUpdateRequest
operator|.
name|ACTION
operator|.
name|COMMIT
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Adding 100 docs with commit=true, numDocs="
operator|+
name|numDocs
argument_list|)
expr_stmt|;
name|req
operator|.
name|process
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|sourceSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|numDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|getCdcrQueue
argument_list|(
name|sourceSolrClient
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Cdcr queue response: "
operator|+
name|response
operator|.
name|getResponse
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|foundDocs
init|=
name|waitForTargetToSync
argument_list|(
name|numDocs
argument_list|,
name|targetSolrClient
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Document mismatch on target after sync"
argument_list|,
name|numDocs
argument_list|,
name|foundDocs
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|source
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|target
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|waitForTargetToSync
specifier|private
name|long
name|waitForTargetToSync
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|CloudSolrClient
name|targetSolrClient
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|InterruptedException
block|{
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|QueryResponse
name|response
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
operator|<=
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|120
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
try|try
block|{
name|targetSolrClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|response
operator|=
name|targetSolrClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|==
name|numDocs
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Exception trying to commit on target. This is expected and safe to ignore."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|response
operator|!=
literal|null
condition|?
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
else|:
literal|0
return|;
block|}
DECL|method|cdcrStart
specifier|private
name|void
name|cdcrStart
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|QueryResponse
name|response
init|=
name|invokeCdcrAction
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|START
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"started"
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"process"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cdcrStop
specifier|private
name|void
name|cdcrStop
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|QueryResponse
name|response
init|=
name|invokeCdcrAction
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|STOP
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"stopped"
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"process"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cdcrEnableBuffer
specifier|private
name|void
name|cdcrEnableBuffer
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|QueryResponse
name|response
init|=
name|invokeCdcrAction
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|ENABLEBUFFER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"enabled"
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"buffer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|cdcrDisableBuffer
specifier|private
name|void
name|cdcrDisableBuffer
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|QueryResponse
name|response
init|=
name|invokeCdcrAction
argument_list|(
name|client
argument_list|,
name|CdcrParams
operator|.
name|CdcrAction
operator|.
name|DISABLEBUFFER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"disabled"
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"buffer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|invokeCdcrAction
specifier|private
name|QueryResponse
name|invokeCdcrAction
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|,
name|CdcrParams
operator|.
name|CdcrAction
name|action
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/cdcr"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|action
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
return|;
block|}
DECL|method|getCdcrQueue
specifier|private
name|QueryResponse
name|getCdcrQueue
parameter_list|(
name|CloudSolrClient
name|client
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/cdcr"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|ACTION
argument_list|,
name|CdcrParams
operator|.
name|QUEUES
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|query
argument_list|(
name|params
argument_list|)
return|;
block|}
block|}
end_class

end_unit

