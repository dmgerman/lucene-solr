begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * This class implements the tests for local file-system integration for Solr backup/restore capability.  * Note that the Solr backup/restore still requires a "shared" file-system. Its just that in this case  * such file-system would be exposed via local file-system API.  */
end_comment

begin_class
DECL|class|TestLocalFSCloudBackupRestore
specifier|public
class|class
name|TestLocalFSCloudBackupRestore
extends|extends
name|AbstractCloudBackupRestoreTestCase
block|{
DECL|field|backupLocation
specifier|private
specifier|static
name|String
name|backupLocation
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
name|NUM_SHARDS
argument_list|)
comment|// nodes
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|boolean
name|whitespacesInPath
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|whitespacesInPath
condition|)
block|{
name|backupLocation
operator|=
name|createTempDir
argument_list|(
literal|"my backup"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|backupLocation
operator|=
name|createTempDir
argument_list|(
literal|"mybackup"
argument_list|)
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getCollectionName
specifier|public
name|String
name|getCollectionName
parameter_list|()
block|{
return|return
literal|"backuprestore"
return|;
block|}
annotation|@
name|Override
DECL|method|getBackupRepoName
specifier|public
name|String
name|getBackupRepoName
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|getBackupLocation
specifier|public
name|String
name|getBackupLocation
parameter_list|()
block|{
return|return
name|backupLocation
return|;
block|}
block|}
end_class

end_unit

