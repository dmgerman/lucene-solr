begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LeaderElectionContextKeyTest
specifier|public
class|class
name|LeaderElectionContextKeyTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|TEST_COLLECTION_1
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_1
init|=
literal|"testCollection1"
decl_stmt|;
DECL|field|TEST_COLLECTION_2
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_2
init|=
literal|"testCollection2"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|1
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"config"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"testCollection1"
argument_list|,
literal|"config"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1000
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"testCollection2"
argument_list|,
literal|"config"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1000
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"testCollection1"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"testCollection2"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|KeeperException
throws|,
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
name|ZkStateReader
name|stateReader
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|stateReader
operator|.
name|forceUpdateCollection
argument_list|(
name|TEST_COLLECTION_1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Replica
argument_list|>
name|replicasOfCollection1
init|=
name|stateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|TEST_COLLECTION_1
argument_list|)
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Replica
argument_list|>
name|replicasOfCollection2
init|=
name|stateReader
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|TEST_COLLECTION_2
argument_list|)
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
name|Replica
name|replica
init|=
name|findLeaderReplicaWithDuplicatedName
argument_list|(
name|replicasOfCollection1
argument_list|,
name|replicasOfCollection2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|replica
argument_list|)
expr_stmt|;
name|SolrClient
name|shardLeaderClient
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|(
name|replica
operator|.
name|get
argument_list|(
literal|"base_url"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|getElectionNodes
argument_list|(
name|TEST_COLLECTION_1
argument_list|,
literal|"shard1"
argument_list|,
name|stateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collection2Shard1Nodes
init|=
name|getElectionNodes
argument_list|(
name|TEST_COLLECTION_2
argument_list|,
literal|"shard1"
argument_list|,
name|stateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|collection2Shard2Nodes
init|=
name|getElectionNodes
argument_list|(
name|TEST_COLLECTION_2
argument_list|,
literal|"shard2"
argument_list|,
name|stateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|CoreAdminRequest
operator|.
name|unloadCore
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|,
name|shardLeaderClient
argument_list|)
expr_stmt|;
comment|// Waiting for leader election being kicked off
name|long
name|timeout
init|=
name|System
operator|.
name|nanoTime
argument_list|()
operator|+
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|convert
argument_list|(
literal|60
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
try|try
block|{
name|found
operator|=
name|getElectionNodes
argument_list|(
name|TEST_COLLECTION_1
argument_list|,
literal|"shard1"
argument_list|,
name|stateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|==
literal|0
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|KeeperException
operator|.
name|NoNodeException
name|nne
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|assertTrue
argument_list|(
name|found
argument_list|)
expr_stmt|;
comment|// There are no leader election was kicked off on testCollection2
name|assertThat
argument_list|(
name|collection2Shard1Nodes
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|getElectionNodes
argument_list|(
name|TEST_COLLECTION_2
argument_list|,
literal|"shard1"
argument_list|,
name|stateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|collection2Shard2Nodes
argument_list|,
name|CoreMatchers
operator|.
name|is
argument_list|(
name|getElectionNodes
argument_list|(
name|TEST_COLLECTION_2
argument_list|,
literal|"shard2"
argument_list|,
name|stateReader
operator|.
name|getZkClient
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|shardLeaderClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|findLeaderReplicaWithDuplicatedName
specifier|private
name|Replica
name|findLeaderReplicaWithDuplicatedName
parameter_list|(
name|List
argument_list|<
name|Replica
argument_list|>
name|replicas1
parameter_list|,
name|List
argument_list|<
name|Replica
argument_list|>
name|replicas2
parameter_list|)
block|{
for|for
control|(
name|Replica
name|replica1
range|:
name|replicas1
control|)
block|{
if|if
condition|(
operator|!
name|replica1
operator|.
name|containsKey
argument_list|(
literal|"leader"
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Replica
name|replica2
range|:
name|replicas2
control|)
block|{
if|if
condition|(
name|replica1
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|replica2
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|replica1
operator|.
name|get
argument_list|(
literal|"base_url"
argument_list|)
operator|.
name|equals
argument_list|(
name|replica2
operator|.
name|get
argument_list|(
literal|"base_url"
argument_list|)
argument_list|)
operator|&&
name|replica2
operator|.
name|containsKey
argument_list|(
literal|"leader"
argument_list|)
condition|)
block|{
return|return
name|replica1
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
DECL|method|getElectionNodes
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getElectionNodes
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|shard
parameter_list|,
name|SolrZkClient
name|client
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
return|return
name|client
operator|.
name|getChildren
argument_list|(
literal|"/collections/"
operator|+
name|collection
operator|+
literal|"/leader_elect/"
operator|+
name|shard
operator|+
name|LeaderElector
operator|.
name|ELECTION_NODE
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
return|;
block|}
block|}
end_class

end_unit

