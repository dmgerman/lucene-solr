begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|OverseerAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|DeleteShardTest
specifier|public
class|class
name|DeleteShardTest
extends|extends
name|SolrCloudTestCase
block|{
comment|// TODO: Custom hash slice deletion test
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collection
init|=
literal|"deleteShard"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|state
init|=
name|getCollectionState
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|ACTIVE
argument_list|,
name|state
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|State
operator|.
name|ACTIVE
argument_list|,
name|state
operator|.
name|getSlice
argument_list|(
literal|"shard2"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Can't delete an ACTIVE shard
name|expectThrows
argument_list|(
name|Exception
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|setSliceState
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|INACTIVE
argument_list|)
expr_stmt|;
comment|// Can delete an INATIVE shard
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected 'shard1' to be removed"
argument_list|,
name|collection
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
return|return
name|c
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|==
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Can delete a shard under construction
name|setSliceState
argument_list|(
name|collection
argument_list|,
literal|"shard2"
argument_list|,
name|Slice
operator|.
name|State
operator|.
name|CONSTRUCTION
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
name|collection
argument_list|,
literal|"shard2"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected 'shard2' to be removed"
argument_list|,
name|collection
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
return|return
name|c
operator|.
name|getSlice
argument_list|(
literal|"shard2"
argument_list|)
operator|==
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setSliceState
specifier|protected
name|void
name|setSliceState
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|slice
parameter_list|,
name|State
name|state
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|CloudSolrClient
name|client
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
comment|// TODO can this be encapsulated better somewhere?
name|DistributedQueue
name|inQueue
init|=
name|Overseer
operator|.
name|getStateUpdateQueue
argument_list|(
name|client
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|Overseer
operator|.
name|QUEUE_OPERATION
argument_list|,
name|OverseerAction
operator|.
name|UPDATESHARDSTATE
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|slice
argument_list|,
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|propMap
operator|.
name|put
argument_list|(
name|ZkStateReader
operator|.
name|COLLECTION_PROP
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|ZkNodeProps
name|m
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|propMap
argument_list|)
decl_stmt|;
name|inQueue
operator|.
name|offer
argument_list|(
name|Utils
operator|.
name|toJSON
argument_list|(
name|m
argument_list|)
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected shard "
operator|+
name|slice
operator|+
literal|" to be in state "
operator|+
name|state
operator|.
name|toString
argument_list|()
argument_list|,
name|collection
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
return|return
name|c
operator|.
name|getSlice
argument_list|(
name|slice
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|state
return|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDirectoryCleanupAfterDeleteShard
specifier|public
name|void
name|testDirectoryCleanupAfterDeleteShard
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
specifier|final
name|String
name|collection
init|=
literal|"deleteshard_test"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
literal|"a,b,c"
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get replica details
name|Replica
name|leader
init|=
name|getCollectionState
argument_list|(
name|collection
argument_list|)
operator|.
name|getLeader
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|CoreStatus
name|coreStatus
init|=
name|getCoreStatus
argument_list|(
name|leader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Instance directory doesn't exist"
argument_list|,
name|FileUtils
operator|.
name|fileExists
argument_list|(
name|coreStatus
operator|.
name|getInstanceDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Data directory doesn't exist"
argument_list|,
name|FileUtils
operator|.
name|fileExists
argument_list|(
name|coreStatus
operator|.
name|getDataDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|getCollectionState
argument_list|(
name|collection
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete shard 'a'
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
name|collection
argument_list|,
literal|"a"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|getCollectionState
argument_list|(
name|collection
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Instance directory still exists"
argument_list|,
name|FileUtils
operator|.
name|fileExists
argument_list|(
name|coreStatus
operator|.
name|getInstanceDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Data directory still exists"
argument_list|,
name|FileUtils
operator|.
name|fileExists
argument_list|(
name|coreStatus
operator|.
name|getDataDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|leader
operator|=
name|getCollectionState
argument_list|(
name|collection
argument_list|)
operator|.
name|getLeader
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|coreStatus
operator|=
name|getCoreStatus
argument_list|(
name|leader
argument_list|)
expr_stmt|;
comment|// Delete shard 'b'
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
name|collection
argument_list|,
literal|"b"
argument_list|)
operator|.
name|setDeleteDataDir
argument_list|(
literal|false
argument_list|)
operator|.
name|setDeleteInstanceDir
argument_list|(
literal|false
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|getCollectionState
argument_list|(
name|collection
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Instance directory still exists"
argument_list|,
name|FileUtils
operator|.
name|fileExists
argument_list|(
name|coreStatus
operator|.
name|getInstanceDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Data directory still exists"
argument_list|,
name|FileUtils
operator|.
name|fileExists
argument_list|(
name|coreStatus
operator|.
name|getDataDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

