begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CoreAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|Slow
DECL|class|CollectionsAPISolrJTest
specifier|public
class|class
name|CollectionsAPISolrJTest
extends|extends
name|SolrCloudTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAndDeleteCollection
specifier|public
name|void
name|testCreateAndDeleteCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"solrj_test"
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|setStateFormat
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|NamedList
argument_list|<
name|Integer
argument_list|>
name|status
init|=
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shard"
operator|+
operator|(
name|i
operator|/
literal|2
operator|+
literal|1
operator|)
operator|+
literal|"_replica"
operator|+
operator|(
name|i
operator|%
literal|2
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|status
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|status
operator|.
name|get
argument_list|(
literal|"QTime"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|nodesStatus
init|=
name|response
operator|.
name|getCollectionNodesStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodesStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected "
operator|+
name|collectionName
operator|+
literal|" to disappear from cluster state"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|c
operator|==
literal|null
argument_list|)
expr_stmt|;
comment|// Test Creating a collection with new stateformat.
name|collectionName
operator|=
literal|"solrj_newstateformat"
expr_stmt|;
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|setStateFormat
argument_list|(
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected "
operator|+
name|collectionName
operator|+
literal|" to appear in cluster state"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|c
operator|!=
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloudInfoInCoreStatus
specifier|public
name|void
name|testCloudInfoInCoreStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|String
name|collectionName
init|=
literal|"corestatus_test"
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|setStateFormat
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|nodeName
init|=
operator|(
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
operator|)
operator|.
name|getName
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|corename
init|=
call|(
name|String
call|)
argument_list|(
call|(
name|NamedList
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"success"
argument_list|)
argument_list|)
operator|.
name|getVal
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"core"
argument_list|)
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|coreclient
init|=
name|getHttpSolrClient
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|)
argument_list|)
init|)
block|{
name|CoreAdminResponse
name|status
init|=
name|CoreAdminRequest
operator|.
name|getStatus
argument_list|(
name|corename
argument_list|,
name|coreclient
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
name|status
operator|.
name|getResponse
argument_list|()
operator|.
name|asMap
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|collectionName
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"status"
argument_list|,
name|corename
argument_list|,
literal|"cloud"
argument_list|,
literal|"collection"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"status"
argument_list|,
name|corename
argument_list|,
literal|"cloud"
argument_list|,
literal|"shard"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"status"
argument_list|,
name|corename
argument_list|,
literal|"cloud"
argument_list|,
literal|"replica"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCreateAndDeleteShard
specifier|public
name|void
name|testCreateAndDeleteShard
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
comment|// Create an implicit collection
name|String
name|collectionName
init|=
literal|"solrj_implicit"
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|"shardA,shardB"
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add a shard to the implicit collection
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|createShard
argument_list|(
name|collectionName
argument_list|,
literal|"shardC"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|coresStatus
operator|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shardC_replica1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
name|collectionName
argument_list|,
literal|"shardC"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|nodesStatus
init|=
name|response
operator|.
name|getCollectionNodesStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|nodesStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateAndDeleteAlias
specifier|public
name|void
name|testCreateAndDeleteAlias
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
specifier|final
name|String
name|collection
init|=
literal|"aliasedCollection"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|createAlias
argument_list|(
literal|"solrj_alias"
argument_list|,
name|collection
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|deleteAlias
argument_list|(
literal|"solrj_alias"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitShard
specifier|public
name|void
name|testSplitShard
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"solrj_test_splitshard"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|splitShard
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shard1_0_replica1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
name|int
operator|)
name|coresStatus
operator|.
name|get
argument_list|(
name|collectionName
operator|+
literal|"_shard1_1_replica1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"status"
argument_list|)
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected all shards to be active and parent shard to be removed"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|c
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getState
argument_list|()
operator|==
name|Slice
operator|.
name|State
operator|.
name|ACTIVE
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Replica
name|r
range|:
name|c
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|isActive
argument_list|(
name|n
argument_list|)
operator|==
literal|false
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Test splitting using split.key
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|splitShard
argument_list|(
name|collectionName
argument_list|)
operator|.
name|setSplitKey
argument_list|(
literal|"b!"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected 5 slices to be active"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|c
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCreateCollectionWithPropertyParam
specifier|public
name|void
name|testCreateCollectionWithPropertyParam
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collectionName
init|=
literal|"solrj_test_core_props"
decl_stmt|;
name|Path
name|tmpDir
init|=
name|createTempDir
argument_list|(
literal|"testPropertyParamsForCreate"
argument_list|)
decl_stmt|;
name|Path
name|dataDir
init|=
name|tmpDir
operator|.
name|resolve
argument_list|(
literal|"dataDir-"
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|ulogDir
init|=
name|tmpDir
operator|.
name|resolve
argument_list|(
literal|"ulogDir-"
operator|+
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|withProperty
argument_list|(
name|CoreAdminParams
operator|.
name|DATA_DIR
argument_list|,
name|dataDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withProperty
argument_list|(
name|CoreAdminParams
operator|.
name|ULOG_DIR
argument_list|,
name|ulogDir
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|coresStatus
init|=
name|response
operator|.
name|getCollectionCoresStatus
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|coresStatus
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|DocCollection
name|testCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Replica
name|replica1
init|=
name|testCollection
operator|.
name|getReplica
argument_list|(
literal|"core_node1"
argument_list|)
decl_stmt|;
name|CoreStatus
name|coreStatus
init|=
name|getCoreStatus
argument_list|(
name|replica1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|coreStatus
operator|.
name|getDataDirectory
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dataDir
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddAndDeleteReplica
specifier|public
name|void
name|testAddAndDeleteReplica
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|collectionName
init|=
literal|"solrj_replicatests"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newReplicaName
init|=
name|Assign
operator|.
name|assignNode
argument_list|(
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|nodeList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|nodeList
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|node
init|=
name|nodeList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|setNode
argument_list|(
name|node
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected to see replica "
operator|+
name|newReplicaName
operator|+
literal|" on node "
operator|+
name|node
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
name|Replica
name|r
init|=
name|c
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
decl_stmt|;
return|return
name|r
operator|!=
literal|null
operator|&&
name|r
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
name|node
argument_list|)
return|;
block|}
argument_list|)
expr_stmt|;
comment|// Test DELETEREPLICA
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|newReplicaName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expected replica "
operator|+
name|newReplicaName
operator|+
literal|" to vanish from cluster state"
argument_list|,
name|collectionName
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|c
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplica
argument_list|(
name|newReplicaName
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testClusterProp
specifier|public
name|void
name|testClusterProp
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|setClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"false"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|ClusterProperties
name|props
init|=
operator|new
name|ClusterProperties
argument_list|(
name|zkClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Cluster property was not set"
argument_list|,
name|props
operator|.
name|getClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// Unset ClusterProp that we set.
name|CollectionAdminRequest
operator|.
name|setClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|null
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cluster property was not unset"
argument_list|,
name|props
operator|.
name|getClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOverseerStatus
specifier|public
name|void
name|testOverseerStatus
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|OverseerStatus
argument_list|()
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"overseer_operations shouldn't be null"
argument_list|,
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"overseer_operations"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testList
specifier|public
name|void
name|testList
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|CollectionAdminResponse
name|response
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|List
argument_list|()
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"collection list should not be null"
argument_list|,
name|response
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddAndDeleteReplicaProp
specifier|public
name|void
name|testAddAndDeleteReplicaProp
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
throws|,
name|SolrServerException
block|{
specifier|final
name|String
name|collection
init|=
literal|"replicaProperties"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Replica
name|replica
init|=
name|getCollectionState
argument_list|(
name|collection
argument_list|)
operator|.
name|getLeader
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|addReplicaProperty
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
literal|"preferredleader"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting property 'preferredleader' to appear on replica "
operator|+
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|collection
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
literal|"true"
operator|.
name|equals
argument_list|(
name|c
operator|.
name|getReplica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStr
argument_list|(
literal|"property.preferredleader"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|=
name|CollectionAdminRequest
operator|.
name|deleteReplicaProperty
argument_list|(
name|collection
argument_list|,
literal|"shard1"
argument_list|,
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
literal|"property.preferredleader"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting property 'preferredleader' to be removed from replica "
operator|+
name|replica
operator|.
name|getName
argument_list|()
argument_list|,
name|collection
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|c
operator|.
name|getReplica
argument_list|(
name|replica
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStr
argument_list|(
literal|"property.preferredleader"
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBalanceShardUnique
specifier|public
name|void
name|testBalanceShardUnique
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|collection
init|=
literal|"balancedProperties"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|balanceReplicaProperty
argument_list|(
name|collection
argument_list|,
literal|"preferredLeader"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting 'preferredleader' property to be balanced across all shards"
argument_list|,
name|collection
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
block|{
for|for
control|(
name|Slice
name|slice
range|:
name|c
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|slice
control|)
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getStr
argument_list|(
literal|"property.preferredleader"
argument_list|)
argument_list|)
condition|)
name|count
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
literal|1
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

