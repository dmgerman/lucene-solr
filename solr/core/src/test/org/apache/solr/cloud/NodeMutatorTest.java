begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|NodeMutator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|overseer
operator|.
name|ZkWriteCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|NodeMutatorTest
specifier|public
class|class
name|NodeMutatorTest
extends|extends
name|SolrTestCaseJ4Test
block|{
DECL|field|NODE3
specifier|private
specifier|static
specifier|final
name|String
name|NODE3
init|=
literal|"baseUrl3_"
decl_stmt|;
DECL|field|NODE3_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE3_URL
init|=
literal|"http://baseUrl3"
decl_stmt|;
DECL|field|NODE2
specifier|private
specifier|static
specifier|final
name|String
name|NODE2
init|=
literal|"baseUrl2_"
decl_stmt|;
DECL|field|NODE2_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE2_URL
init|=
literal|"http://baseUrl2"
decl_stmt|;
DECL|field|NODE1
specifier|private
specifier|static
specifier|final
name|String
name|NODE1
init|=
literal|"baseUrl1_"
decl_stmt|;
DECL|field|NODE1_URL
specifier|private
specifier|static
specifier|final
name|String
name|NODE1_URL
init|=
literal|"http://baseUrl1"
decl_stmt|;
annotation|@
name|Test
DECL|method|downNodeReportsAllImpactedCollectionsAndNothingElse
specifier|public
name|void
name|downNodeReportsAllImpactedCollectionsAndNothingElse
parameter_list|()
throws|throws
name|IOException
block|{
name|NodeMutator
name|nm
init|=
operator|new
name|NodeMutator
argument_list|()
decl_stmt|;
name|ZkNodeProps
name|props
init|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|NODE1
argument_list|)
decl_stmt|;
comment|//We use 2 nodes with maxShardsPerNode as 1
comment|//Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2
comment|//Collection2: 1 shard X 1 replica = replica1 on node2
name|ClusterStateMockUtil
operator|.
name|Result
name|result
init|=
name|ClusterStateMockUtil
operator|.
name|buildClusterState
argument_list|(
literal|null
argument_list|,
literal|"csrr2rD*csr2"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|result
operator|.
name|reader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection1"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica1"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE1_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection1"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica2"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE2_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection2"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica4"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE2_URL
argument_list|)
expr_stmt|;
name|props
operator|=
operator|new
name|ZkNodeProps
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|,
name|NODE1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ZkWriteCommand
argument_list|>
name|writes
init|=
name|nm
operator|.
name|downNode
argument_list|(
name|clusterState
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|writes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica1"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica2"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//We use 3 nodes with maxShardsPerNode as 1
comment|//Collection1: 2 shards X 1 replica = replica1 on node1 and replica2 on node2
comment|//Collection2: 1 shard X 1 replica = replica1 on node2
comment|//Collection3: 1 shard X 3 replica = replica1 on node1 , replica2 on node2, replica3 on node3
name|result
operator|=
name|ClusterStateMockUtil
operator|.
name|buildClusterState
argument_list|(
literal|null
argument_list|,
literal|"csrr2rD*csr2csr1r2r3"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|NODE1
argument_list|,
name|NODE2
argument_list|,
name|NODE3
argument_list|)
expr_stmt|;
name|clusterState
operator|=
name|result
operator|.
name|reader
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection1"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica1"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE1_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection1"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica2"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE2_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection2"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica4"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE2_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica5"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE1_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica6"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE2_URL
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clusterState
operator|.
name|getCollection
argument_list|(
literal|"collection3"
argument_list|)
operator|.
name|getReplica
argument_list|(
literal|"replica7"
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|NODE3_URL
argument_list|)
expr_stmt|;
name|writes
operator|=
name|nm
operator|.
name|downNode
argument_list|(
name|clusterState
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writes
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|ZkWriteCommand
name|write
range|:
name|writes
control|)
block|{
if|if
condition|(
name|write
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"collection1"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|write
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica1"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|write
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica2"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|write
operator|.
name|name
operator|.
name|equals
argument_list|(
literal|"collection3"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|write
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica5"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|DOWN
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|write
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica6"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|write
operator|.
name|collection
operator|.
name|getReplica
argument_list|(
literal|"replica7"
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|,
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"No other collection needs to be changed"
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

