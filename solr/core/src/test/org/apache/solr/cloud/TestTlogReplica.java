begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|CollectionStatePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TimeOut
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|Repeat
import|;
end_import

begin_class
annotation|@
name|Slow
DECL|class|TestTlogReplica
specifier|public
class|class
name|TestTlogReplica
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|collectionName
specifier|private
name|String
name|collectionName
init|=
literal|null
decl_stmt|;
DECL|field|REPLICATION_TIMEOUT_SECS
specifier|private
specifier|final
specifier|static
name|int
name|REPLICATION_TIMEOUT_SECS
init|=
literal|10
decl_stmt|;
DECL|method|suggestedCollectionName
specifier|private
name|String
name|suggestedCollectionName
parameter_list|()
block|{
return|return
operator|(
name|getTestClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|.
name|replace
argument_list|(
literal|"Test"
argument_list|,
literal|""
argument_list|)
operator|+
literal|"_"
operator|+
name|getTestName
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|replaceAll
argument_list|(
literal|"(.)(\\p{Upper})"
argument_list|,
literal|"$1_$2"
argument_list|)
operator|.
name|toLowerCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|TestInjection
operator|.
name|waitForReplicasInSync
operator|=
literal|null
expr_stmt|;
comment|// We'll be explicit about this in this test
name|configureCluster
argument_list|(
literal|2
argument_list|)
comment|// 2 + random().nextInt(3)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal-inplace-updates"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|Boolean
name|useLegacyCloud
init|=
name|rarely
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Using legacyCloud?: {}"
argument_list|,
name|useLegacyCloud
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|ClusterProp
name|clusterPropRequest
init|=
name|CollectionAdminRequest
operator|.
name|setClusterProperty
argument_list|(
name|ZkStateReader
operator|.
name|LEGACY_CLOUD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|useLegacyCloud
argument_list|)
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|clusterPropRequest
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|tearDownCluster
specifier|public
specifier|static
name|void
name|tearDownCluster
parameter_list|()
block|{
name|TestInjection
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|collectionName
operator|=
name|suggestedCollectionName
argument_list|()
expr_stmt|;
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|jetty
operator|.
name|isRunning
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Jetty {} not running, probably some bad test. Starting it"
argument_list|,
name|jetty
operator|.
name|getLocalPort
argument_list|()
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|jetty
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollectionOrNull
argument_list|(
name|collectionName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"tearDown deleting collection"
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForDeletion
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * Asserts that Update logs exist for replicas of type {@link org.apache.solr.common.cloud.Replica.Type#NRT}, but not    * for replicas of type {@link org.apache.solr.common.cloud.Replica.Type#PULL}    */
DECL|method|assertUlogPresence
specifier|private
name|void
name|assertUlogPresence
parameter_list|(
name|DocCollection
name|collection
parameter_list|)
block|{
for|for
control|(
name|Slice
name|s
range|:
name|collection
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|r
range|:
name|s
operator|.
name|getReplicas
argument_list|()
control|)
block|{
name|SolrCore
name|core
init|=
literal|null
decl_stmt|;
try|try
block|{
name|core
operator|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|r
argument_list|)
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCore
argument_list|(
name|r
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|core
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Update log should exist for replicas of type Append"
argument_list|,
operator|new
name|java
operator|.
name|io
operator|.
name|File
argument_list|(
name|core
operator|.
name|getUlogDir
argument_list|()
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|core
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Repeat
argument_list|(
name|iterations
operator|=
literal|2
argument_list|)
comment|// 2 times to make sure cleanup is complete and we can create the same collection
DECL|method|testCreateDelete
specifier|public
name|void
name|testCreateDelete
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|reloaded
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 2 shards"
argument_list|,
literal|2
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 4 relpicas per shard"
argument_list|,
literal|8
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting 8 tlog replicas, 4 per shard"
argument_list|,
literal|8
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting no nrt replicas"
argument_list|,
literal|0
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expecting no pull replicas"
argument_list|,
literal|0
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|s
range|:
name|docCollection
operator|.
name|getSlices
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shardElectionNodes
init|=
name|cluster
operator|.
name|getZkClient
argument_list|()
operator|.
name|getChildren
argument_list|(
name|ZkStateReader
operator|.
name|getShardLeadersElectPath
argument_list|(
name|collectionName
argument_list|,
name|s
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected election nodes for Shard: "
operator|+
name|s
operator|.
name|getName
argument_list|()
operator|+
literal|": "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|shardElectionNodes
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
literal|4
argument_list|,
name|shardElectionNodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertUlogPresence
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
if|if
condition|(
name|reloaded
condition|)
block|{
break|break;
block|}
else|else
block|{
comment|// reload
name|CollectionAdminResponse
name|response
init|=
name|CollectionAdminRequest
operator|.
name|reloadCollection
argument_list|(
name|collectionName
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|reloaded
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|zkClient
argument_list|()
operator|.
name|printLayoutToStdOut
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testAddDocs
specifier|public
name|void
name|testAddDocs
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTlogReplicas
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|numTlogReplicas
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|leaderClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaderClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
name|REPLICATION_TIMEOUT_SECS
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|s
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
control|)
block|{
comment|//TODO: assert replication< REPLICATION_TIMEOUT_SECS
try|try
init|(
name|HttpSolrClient
name|tlogReplicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|r
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Replica "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|" not up to date after 10 seconds"
argument_list|,
literal|1
argument_list|,
name|tlogReplicaClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// Append replicas process all updates
name|SolrQuery
name|req
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"qt"
argument_list|,
literal|"/admin/plugins"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|QueryResponse
name|statsResponse
init|=
name|tlogReplicaClient
operator|.
name|query
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Append replicas should recive all updates. Replica: "
operator|+
name|r
operator|+
literal|", response: "
operator|+
name|statsResponse
argument_list|,
literal|1L
argument_list|,
operator|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|statsResponse
operator|.
name|getResponse
argument_list|()
argument_list|)
operator|.
name|findRecursive
argument_list|(
literal|"plugins"
argument_list|,
literal|"UPDATE"
argument_list|,
literal|"updateHandler"
argument_list|,
literal|"stats"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"UPDATE.updateHandler.cumulativeAdds.count"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|assertUlogPresence
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddRemoveTlogReplica
specifier|public
name|void
name|testAddRemoveTlogReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|DocCollection
name|docCollection
init|=
name|createAndWaitForCollection
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|docCollection
operator|=
name|assertNumberOfReplicas
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard2"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|docCollection
operator|=
name|assertNumberOfReplicas
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Expecting collection to have 2 shards and 2 replica each"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|//Delete tlog replica from shard1
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|assertNumberOfReplicas
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveLeader
specifier|public
name|void
name|testRemoveLeader
parameter_list|()
throws|throws
name|Exception
block|{
name|doReplaceLeader
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|testKillLeader
specifier|public
name|void
name|testKillLeader
parameter_list|()
throws|throws
name|Exception
block|{
name|doReplaceLeader
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|method|testRealTimeGet
specifier|public
name|void
name|testRealTimeGet
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
comment|// should be redirected to Replica.Type.REALTIME
name|int
name|numReplicas
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
literal|2
decl_stmt|;
name|int
name|numNrtReplicas
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|0
else|:
literal|2
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
literal|1
argument_list|,
name|numNrtReplicas
argument_list|,
name|numReplicas
argument_list|,
literal|0
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Unexpected replica count"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
name|numNrtReplicas
argument_list|,
name|numReplicas
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DocCollection
name|docCollection
init|=
name|assertNumberOfReplicas
argument_list|(
name|numNrtReplicas
argument_list|,
name|numReplicas
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|HttpClient
name|httpClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getHttpClient
argument_list|()
decl_stmt|;
name|int
name|id
init|=
literal|0
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|slice
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|rAdd
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|rAdd
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
init|)
block|{
name|client
operator|.
name|add
argument_list|(
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|,
literal|"foo_s"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrDocument
name|docCloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getById
argument_list|(
name|collectionName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|docCloudClient
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Replica
name|rGet
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|rGet
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
init|)
block|{
name|SolrDocument
name|doc
init|=
name|client
operator|.
name|getById
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|doc
operator|.
name|getFieldValue
argument_list|(
literal|"foo_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|++
expr_stmt|;
block|}
name|SolrDocumentList
name|previousAllIdsResult
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Replica
name|rAdd
range|:
name|slice
operator|.
name|getReplicas
argument_list|()
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
name|getHttpSolrClient
argument_list|(
name|rAdd
operator|.
name|getCoreUrl
argument_list|()
argument_list|,
name|httpClient
argument_list|)
init|)
block|{
name|SolrDocumentList
name|allIdsResult
init|=
name|client
operator|.
name|getById
argument_list|(
name|ids
argument_list|)
decl_stmt|;
if|if
condition|(
name|previousAllIdsResult
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|compareSolrDocumentList
argument_list|(
name|previousAllIdsResult
argument_list|,
name|allIdsResult
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// set the first response here
name|previousAllIdsResult
operator|=
name|allIdsResult
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of documents"
argument_list|,
name|ids
operator|.
name|size
argument_list|()
argument_list|,
name|allIdsResult
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|id
operator|++
expr_stmt|;
block|}
block|}
comment|/*    * validate leader election and that replication still happens on a new leader    */
DECL|method|doReplaceLeader
specifier|private
name|void
name|doReplaceLeader
parameter_list|(
name|boolean
name|removeReplica
parameter_list|)
throws|throws
name|Exception
block|{
name|DocCollection
name|docCollection
init|=
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// Add a document and commit
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|Slice
name|s
init|=
name|docCollection
operator|.
name|getSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
name|HttpSolrClient
name|leaderClient
init|=
name|getHttpSolrClient
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|leaderClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|waitForNumDocsInAllReplicas
argument_list|(
literal|1
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
argument_list|,
name|REPLICATION_TIMEOUT_SECS
argument_list|)
expr_stmt|;
comment|// Delete leader replica from shard1
name|JettySolrRunner
name|leaderJetty
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|removeReplica
condition|)
block|{
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|s
operator|.
name|getLeader
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leaderJetty
operator|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|s
operator|.
name|getLeader
argument_list|()
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|leaderJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Leader replica not removed"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// Wait for cluster state to be updated
name|waitForState
argument_list|(
literal|"Replica state not updated in cluster state"
argument_list|,
name|collectionName
argument_list|,
name|clusterStateReflectsActiveAndDownReplicas
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|docCollection
operator|=
name|assertNumberOfReplicas
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Wait until a new leader is elected
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
literal|30
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|docCollection
operator|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|Replica
name|leader
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getLeader
argument_list|()
decl_stmt|;
if|if
condition|(
name|leader
operator|!=
literal|null
operator|&&
name|leader
operator|.
name|isActive
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
literal|"Timeout waiting for a new leader to be elected"
argument_list|,
name|t
operator|.
name|hasTimedOut
argument_list|()
argument_list|)
expr_stmt|;
comment|// There is a new leader, I should be able to add and commit
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"zoo"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|// Queries should still work
name|waitForNumDocsInAllReplicas
argument_list|(
literal|2
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
argument_list|,
name|REPLICATION_TIMEOUT_SECS
argument_list|)
expr_stmt|;
comment|// Start back the node
if|if
condition|(
name|removeReplica
condition|)
block|{
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|collectionName
argument_list|,
literal|"shard1"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|leaderJetty
argument_list|)
expr_stmt|;
block|}
name|waitForState
argument_list|(
literal|"Expected collection to be 1x2"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// added replica should replicate from the leader
name|waitForNumDocsInAllReplicas
argument_list|(
literal|2
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
argument_list|,
name|REPLICATION_TIMEOUT_SECS
argument_list|)
expr_stmt|;
block|}
DECL|method|testKillTlogReplica
specifier|public
name|void
name|testKillTlogReplica
parameter_list|()
throws|throws
name|Exception
block|{
name|DocCollection
name|docCollection
init|=
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|pullReplicaJetty
init|=
name|cluster
operator|.
name|getReplicaJetty
argument_list|(
name|docCollection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|pullReplicaJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not removed"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//    // Also wait for the replica to be placed in state="down"
comment|//    waitForState("Didn't update state", collectionName, clusterStateReflectsActiveAndDownReplicas());
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|pullReplicaJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not added"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnlyLeaderIndexes
specifier|public
name|void
name|testOnlyLeaderIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|{
name|UpdateHandler
name|updateHandler
init|=
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iwRef
init|=
name|updateHandler
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"IndexWriter at leader must see updates "
argument_list|,
name|iwRef
operator|.
name|get
argument_list|()
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iwRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iwRef
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"IndexWriter at replicas must not see updates "
argument_list|,
name|iwRef
operator|.
name|get
argument_list|()
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iwRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteById
argument_list|(
literal|"1"
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"id:2"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
comment|// The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG
name|checkRTG
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
name|getSolrRunner
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|// Update log roll over
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|UpdateLog
name|updateLog
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|updateLog
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// UpdateLog copy over old updates
for|for
control|(
name|int
name|i
init|=
literal|15
init|;
name|i
operator|<=
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|cloudClient
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|15
operator|&
name|i
operator|!=
literal|150
condition|)
block|{
name|cloudClient
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
name|checkRTG
argument_list|(
literal|120
argument_list|,
literal|150
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|waitForReplicasCatchUp
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|testRecovery
specifier|public
name|void
name|testRecovery
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|useKill
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|solrRunner
init|=
name|getSolrRunner
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|useKill
condition|)
block|{
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
name|waitForState
argument_list|(
literal|"Replica still up"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica didn't recover"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// We skip peerSync, so replica will always trigger commit on leader
comment|// We query only the non-leader replicas, since we haven't opened a new searcher on the leader yet
name|waitForNumDocsInAllReplicas
argument_list|(
literal|4
argument_list|,
name|getNonLeaderReplias
argument_list|(
name|collectionName
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Should be immediate
comment|// If I add the doc immediately, the leader fails to communicate with the follower with broken pipe.
comment|// Options are, wait or retry...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|UpdateRequest
name|ureq
init|=
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
decl_stmt|;
name|ureq
operator|.
name|setParam
argument_list|(
literal|"collection"
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ureq
operator|.
name|setParam
argument_list|(
name|UpdateRequest
operator|.
name|MIN_REPFACT
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|response
init|=
name|cloudClient
operator|.
name|request
argument_list|(
name|ureq
argument_list|)
decl_stmt|;
if|if
condition|(
call|(
name|Integer
call|)
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|response
operator|.
name|get
argument_list|(
literal|"responseHeader"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|UpdateRequest
operator|.
name|REPFACT
argument_list|)
operator|>=
literal|2
condition|)
block|{
break|break;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Min RF not achieved yet. retrying"
argument_list|)
expr_stmt|;
block|}
name|checkRTG
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica still up"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|true
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica didn't recover"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllReplicas
argument_list|(
literal|5
argument_list|,
name|getNonLeaderReplias
argument_list|(
name|collectionName
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Should be immediate
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|// Test replica recovery apply buffer updates
name|Semaphore
name|waitingForBufferUpdates
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Semaphore
name|waitingForReplay
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RecoveryStrategy
operator|.
name|testing_beforeReplayBufferingUpdates
operator|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|waitingForReplay
operator|.
name|release
argument_list|()
expr_stmt|;
name|waitingForBufferUpdates
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Test interrupted: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
if|if
condition|(
name|useKill
condition|)
block|{
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|waitingForReplay
operator|.
name|acquire
argument_list|()
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|waitingForBufferUpdates
operator|.
name|release
argument_list|()
expr_stmt|;
name|RecoveryStrategy
operator|.
name|testing_beforeReplayBufferingUpdates
operator|=
literal|null
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica didn't recover"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|3
argument_list|,
literal|9
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iwRef
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"IndexWriter at replicas must not see updates "
argument_list|,
name|iwRef
operator|.
name|get
argument_list|()
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iwRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getNonLeaderReplias
specifier|private
name|List
argument_list|<
name|Replica
argument_list|>
name|getNonLeaderReplias
parameter_list|(
name|String
name|collectionName
parameter_list|)
block|{
return|return
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getReplicas
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
parameter_list|(
name|r
parameter_list|)
lambda|->
operator|!
name|r
operator|.
name|getBool
argument_list|(
literal|"leader"
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|testDeleteById
specifier|public
name|void
name|testDeleteById
parameter_list|()
throws|throws
name|Exception
block|{
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|1
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteById
argument_list|(
literal|"1"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|boolean
name|successs
init|=
literal|false
decl_stmt|;
try|try
block|{
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|successs
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
comment|//expected
block|}
name|assertFalse
argument_list|(
literal|"Doc1 is deleted but it's still exist"
argument_list|,
name|successs
argument_list|)
expr_stmt|;
block|}
DECL|method|testBasicLeaderElection
specifier|public
name|void
name|testBasicLeaderElection
parameter_list|()
throws|throws
name|Exception
block|{
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|oldLeaderJetty
init|=
name|getSolrRunner
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not removed"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not added"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|waitForNumDocsInAllActiveReplicas
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|testOutOfOrderDBQWithInPlaceUpdates
specifier|public
name|void
name|testOutOfOrderDBQWithInPlaceUpdates
parameter_list|()
throws|throws
name|Exception
block|{
name|createAndWaitForCollection
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"inplace_updatable_int"
argument_list|)
operator|.
name|indexed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"inplace_updatable_int"
argument_list|)
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"inplace_updatable_int"
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateRequest
argument_list|>
name|updates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|simulatedUpdateRequest
argument_list|(
literal|null
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|"title_s"
argument_list|,
literal|"title0_new"
argument_list|,
literal|"inplace_updatable_int"
argument_list|,
literal|5
argument_list|,
literal|"_version_"
argument_list|,
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
comment|// full update
name|updates
operator|.
name|add
argument_list|(
name|simulatedDBQ
argument_list|(
literal|"inplace_updatable_int:5"
argument_list|,
literal|3L
argument_list|)
argument_list|)
expr_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|simulatedUpdateRequest
argument_list|(
literal|1L
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|"inplace_updatable_int"
argument_list|,
literal|6
argument_list|,
literal|"_version_"
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|getSolrRunner
argument_list|(
literal|false
argument_list|)
control|)
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|solrRunner
operator|.
name|newClient
argument_list|()
init|)
block|{
for|for
control|(
name|UpdateRequest
name|up
range|:
name|updates
control|)
block|{
name|up
operator|.
name|process
argument_list|(
name|client
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|JettySolrRunner
name|oldLeaderJetty
init|=
name|getSolrRunner
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not removed"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|waitForState
argument_list|(
literal|"Replica not added"
argument_list|,
name|collectionName
argument_list|,
name|activeReplicaCount
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getById
argument_list|(
name|collectionName
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|simulatedUpdateRequest
specifier|private
name|UpdateRequest
name|simulatedUpdateRequest
parameter_list|(
name|Long
name|prevVersion
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
name|fields
argument_list|)
decl_stmt|;
comment|// get baseUrl of the leader
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|()
decl_stmt|;
name|UpdateRequest
name|ur
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ur
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"update.distrib"
argument_list|,
literal|"FROMLEADER"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevVersion
operator|!=
literal|null
condition|)
block|{
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.inplace.prevversion"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|prevVersion
argument_list|)
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.inplace.update"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.from"
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
return|return
name|ur
return|;
block|}
DECL|method|simulatedDBQ
specifier|private
name|UpdateRequest
name|simulatedDBQ
parameter_list|(
name|String
name|query
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|()
decl_stmt|;
name|UpdateRequest
name|ur
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ur
operator|.
name|deleteByQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"_version_"
argument_list|,
literal|""
operator|+
name|version
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"update.distrib"
argument_list|,
literal|"FROMLEADER"
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.from"
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
return|return
name|ur
return|;
block|}
DECL|method|getBaseUrl
specifier|private
name|String
name|getBaseUrl
parameter_list|()
block|{
name|DocCollection
name|collection
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
return|return
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
return|;
block|}
DECL|method|createAndWaitForCollection
specifier|private
name|DocCollection
name|createAndWaitForCollection
parameter_list|(
name|int
name|numShards
parameter_list|,
name|int
name|numNrtReplicas
parameter_list|,
name|int
name|numTlogReplicas
parameter_list|,
name|int
name|numPullReplicas
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
name|numNrtReplicas
argument_list|,
name|numTlogReplicas
argument_list|,
name|numPullReplicas
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|100
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numReplicasPerShard
init|=
name|numNrtReplicas
operator|+
name|numTlogReplicas
operator|+
name|numPullReplicas
decl_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|registerCore
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
comment|//TODO: Why is this needed? see SOLR-9440
name|waitForState
argument_list|(
literal|"Expected collection to be created with "
operator|+
name|numShards
operator|+
literal|" shards and  "
operator|+
name|numReplicasPerShard
operator|+
literal|" replicas"
argument_list|,
name|collectionName
argument_list|,
name|clusterShape
argument_list|(
name|numShards
argument_list|,
name|numReplicasPerShard
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|assertNumberOfReplicas
argument_list|(
name|numNrtReplicas
operator|*
name|numShards
argument_list|,
name|numTlogReplicas
operator|*
name|numShards
argument_list|,
name|numPullReplicas
operator|*
name|numShards
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|waitForNumDocsInAllActiveReplicas
specifier|private
name|void
name|waitForNumDocsInAllActiveReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|waitForNumDocsInAllActiveReplicas
argument_list|(
name|numDocs
argument_list|,
name|REPLICATION_TIMEOUT_SECS
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumDocsInAllActiveReplicas
specifier|private
name|void
name|waitForNumDocsInAllActiveReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|waitForNumDocsInAllReplicas
argument_list|(
name|numDocs
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumDocsInAllReplicas
specifier|private
name|void
name|waitForNumDocsInAllReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|waitForNumDocsInAllReplicas
argument_list|(
name|numDocs
argument_list|,
name|replicas
argument_list|,
literal|"*:*"
argument_list|,
name|timeout
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForNumDocsInAllReplicas
specifier|private
name|void
name|waitForNumDocsInAllReplicas
parameter_list|(
name|int
name|numDocs
parameter_list|,
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
parameter_list|,
name|String
name|query
parameter_list|,
name|int
name|timeout
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
throws|,
name|InterruptedException
block|{
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
for|for
control|(
name|Replica
name|r
range|:
name|replicas
control|)
block|{
if|if
condition|(
operator|!
name|r
operator|.
name|isActive
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getLiveNodes
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
init|(
name|HttpSolrClient
name|replicaClient
init|=
name|getHttpSolrClient
argument_list|(
name|r
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
literal|"Replica "
operator|+
name|r
operator|.
name|getName
argument_list|()
operator|+
literal|" not up to date after "
operator|+
name|timeout
operator|+
literal|" seconds"
argument_list|,
name|numDocs
argument_list|,
name|replicaClient
operator|.
name|query
argument_list|(
operator|new
name|SolrQuery
argument_list|(
name|query
argument_list|)
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
throw|throw
name|e
throw|;
block|}
else|else
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
DECL|method|waitForDeletion
specifier|private
name|void
name|waitForDeletion
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|KeeperException
block|{
name|TimeOut
name|t
init|=
operator|new
name|TimeOut
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
while|while
condition|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|hasCollection
argument_list|(
name|collection
argument_list|)
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|hasTimedOut
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Timed out waiting for collection "
operator|+
name|collection
operator|+
literal|" to be deleted."
argument_list|)
expr_stmt|;
block|}
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
return|return;
block|}
block|}
block|}
DECL|method|assertNumberOfReplicas
specifier|private
name|DocCollection
name|assertNumberOfReplicas
parameter_list|(
name|int
name|numNrtReplicas
parameter_list|,
name|int
name|numTlogReplicas
parameter_list|,
name|int
name|numPullReplicas
parameter_list|,
name|boolean
name|updateCollection
parameter_list|,
name|boolean
name|activeOnly
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|updateCollection
condition|)
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|forceUpdateCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|DocCollection
name|docCollection
init|=
name|getCollectionState
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|docCollection
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of nrt replicas: "
operator|+
name|docCollection
argument_list|,
name|numNrtReplicas
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of pull replicas: "
operator|+
name|docCollection
argument_list|,
name|numPullReplicas
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|PULL
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unexpected number of tlog replicas: "
operator|+
name|docCollection
argument_list|,
name|numTlogReplicas
argument_list|,
name|docCollection
operator|.
name|getReplicas
argument_list|(
name|EnumSet
operator|.
name|of
argument_list|(
name|Replica
operator|.
name|Type
operator|.
name|TLOG
argument_list|)
argument_list|)
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|r
lambda|->
operator|!
name|activeOnly
operator|||
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
argument_list|)
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|docCollection
return|;
block|}
comment|/*    * passes only if all replicas are active or down, and the "liveNodes" reflect the same status    */
DECL|method|clusterStateReflectsActiveAndDownReplicas
specifier|private
name|CollectionStatePredicate
name|clusterStateReflectsActiveAndDownReplicas
parameter_list|()
block|{
return|return
parameter_list|(
name|liveNodes
parameter_list|,
name|collectionState
parameter_list|)
lambda|->
block|{
for|for
control|(
name|Replica
name|r
range|:
name|collectionState
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|&&
name|r
operator|.
name|getState
argument_list|()
operator|!=
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|DOWN
operator|&&
name|liveNodes
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|r
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
operator|!
name|liveNodes
operator|.
name|contains
argument_list|(
name|r
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|;
block|}
DECL|method|activeReplicaCount
specifier|private
name|CollectionStatePredicate
name|activeReplicaCount
parameter_list|(
name|int
name|numNrtReplicas
parameter_list|,
name|int
name|numTlogReplicas
parameter_list|,
name|int
name|numPullReplicas
parameter_list|)
block|{
return|return
parameter_list|(
name|liveNodes
parameter_list|,
name|collectionState
parameter_list|)
lambda|->
block|{
name|int
name|nrtFound
init|=
literal|0
decl_stmt|,
name|tlogFound
init|=
literal|0
decl_stmt|,
name|pullFound
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|collectionState
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Slice
name|slice
range|:
name|collectionState
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|slice
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|isActive
argument_list|(
name|liveNodes
argument_list|)
condition|)
switch|switch
condition|(
name|replica
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TLOG
case|:
name|tlogFound
operator|++
expr_stmt|;
break|break;
case|case
name|PULL
case|:
name|pullFound
operator|++
expr_stmt|;
break|break;
case|case
name|NRT
case|:
name|nrtFound
operator|++
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unexpected replica type"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|numNrtReplicas
operator|==
name|nrtFound
operator|&&
name|numTlogReplicas
operator|==
name|tlogFound
operator|&&
name|numPullReplicas
operator|==
name|pullFound
return|;
block|}
return|;
block|}
DECL|method|getSolrCore
specifier|private
name|List
argument_list|<
name|SolrCore
argument_list|>
name|getSolrCore
parameter_list|(
name|boolean
name|isLeader
parameter_list|)
block|{
name|List
argument_list|<
name|SolrCore
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCores
argument_list|()
control|)
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|docCollection
operator|.
name|getReplica
argument_list|(
name|cloudDescriptor
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
argument_list|)
operator|&&
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrCore
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
argument_list|)
operator|&&
operator|!
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrCore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rs
return|;
block|}
DECL|method|checkRTG
specifier|private
name|void
name|checkRTG
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|solrRunners
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|solrRunners
control|)
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|solrRunner
operator|.
name|newClient
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<=
name|to
condition|;
name|i
operator|++
control|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRequestHandler
argument_list|(
literal|"/get"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QueryResponse
name|res
init|=
name|client
operator|.
name|query
argument_list|(
name|collectionName
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Can not find doc "
operator|+
name|i
operator|+
literal|" in "
operator|+
name|solrRunner
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|res
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getSolrRunner
specifier|private
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|getSolrRunner
parameter_list|(
name|boolean
name|isLeader
parameter_list|)
block|{
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCores
argument_list|()
control|)
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|docCollection
operator|.
name|getReplica
argument_list|(
name|cloudDescriptor
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|==
name|replica
operator|&&
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|!=
name|replica
operator|&&
operator|!
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rs
return|;
block|}
DECL|method|waitForReplicasCatchUp
specifier|private
name|void
name|waitForReplicasCatchUp
parameter_list|(
name|int
name|numTry
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|leaderTimeCommit
init|=
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|SolrIndexWriter
operator|.
name|COMMIT_TIME_MSEC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderTimeCommit
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTry
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|inSync
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|String
name|replicateTimeCommit
init|=
name|solrCore
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|SolrIndexWriter
operator|.
name|COMMIT_TIME_MSEC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|leaderTimeCommit
operator|.
name|equals
argument_list|(
name|replicateTimeCommit
argument_list|)
condition|)
block|{
name|inSync
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inSync
condition|)
return|return;
block|}
name|fail
argument_list|(
literal|"Some replicas are not in sync with leader"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

