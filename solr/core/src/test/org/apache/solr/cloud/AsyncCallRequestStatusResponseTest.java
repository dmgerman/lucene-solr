begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|AsyncCallRequestStatusResponseTest
specifier|public
class|class
name|AsyncCallRequestStatusResponseTest
extends|extends
name|SolrCloudTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAsyncCallStatusResponse
specifier|public
name|void
name|testAsyncCallStatusResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|asyncId
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"asynccall"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|processAsync
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|waitForState
argument_list|(
literal|"Expected collection 'asynccall' to have 2 shards and 1 replica"
argument_list|,
literal|"asynccall"
argument_list|,
name|clusterShape
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|tries
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|RequestStatusState
name|state
init|=
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|asyncId
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
operator|.
name|getRequestStatus
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|RequestStatusState
operator|.
name|COMPLETED
condition|)
break|break;
if|if
condition|(
name|tries
operator|++
operator|>
literal|10
condition|)
name|fail
argument_list|(
literal|"Expected to see RequestStatusState.COMPLETED but was "
operator|+
name|state
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|CollectionAdminRequest
operator|.
name|RequestStatus
name|requestStatus
init|=
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
name|asyncId
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|rsp
init|=
name|requestStatus
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|?
argument_list|>
name|r
init|=
name|rsp
operator|.
name|getResponse
argument_list|()
decl_stmt|;
comment|// Check that there's more response than the hardcoded status and states
name|assertEquals
argument_list|(
literal|"Assertion Failure"
operator|+
name|r
operator|.
name|toString
argument_list|()
argument_list|,
literal|5
argument_list|,
name|r
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

