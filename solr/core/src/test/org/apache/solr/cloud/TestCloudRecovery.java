begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterStateUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestInjection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCloudRecovery
specifier|public
class|class
name|TestCloudRecovery
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection1"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|TestInjection
operator|.
name|prepRecoveryOpPauseForever
operator|=
literal|"true:30"
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.ulog.numRecordsToKeep"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|configureCluster
argument_list|(
literal|2
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"config"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"config"
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|2
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|TestInjection
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|resetCollection
specifier|public
name|void
name|resetCollection
parameter_list|()
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
name|COLLECTION
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|leaderRecoverFromLogOnStartupTest
specifier|public
name|void
name|leaderRecoverFromLogOnStartupTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicInteger
name|countReplayLog
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
name|countReplayLog
operator|::
name|incrementAndGet
expr_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timeout waiting for all not live"
argument_list|,
name|ClusterStateUtil
operator|.
name|waitForAllReplicasNotLive
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|45000
argument_list|)
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timeout waiting for all live and active"
argument_list|,
name|ClusterStateUtil
operator|.
name|waitForAllActiveAndLiveReplicas
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|COLLECTION
argument_list|,
literal|120000
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|cloudClient
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure all nodes is recover from tlog
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|countReplayLog
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|corruptedLogTest
specifier|public
name|void
name|corruptedLogTest
parameter_list|()
throws|throws
name|Exception
block|{
name|AtomicInteger
name|countReplayLog
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
name|countReplayLog
operator|::
name|incrementAndGet
expr_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1000"
argument_list|)
argument_list|)
expr_stmt|;
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1001"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|resp
init|=
name|cloudClient
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|logHeaderSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|Map
argument_list|<
name|File
argument_list|,
name|byte
index|[]
argument_list|>
name|contentFiles
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCores
argument_list|()
control|)
block|{
name|File
name|tlogFolder
init|=
operator|new
name|File
argument_list|(
name|solrCore
operator|.
name|getUlogDir
argument_list|()
argument_list|,
name|UpdateLog
operator|.
name|TLOG_NAME
argument_list|)
decl_stmt|;
name|String
index|[]
name|tLogFiles
init|=
name|tlogFolder
operator|.
name|list
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|tLogFiles
argument_list|)
expr_stmt|;
name|File
name|lastTLogFile
init|=
operator|new
name|File
argument_list|(
name|tlogFolder
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|tLogFiles
index|[
name|tLogFiles
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|byte
index|[]
name|tlogBytes
init|=
name|IOUtils
operator|.
name|toByteArray
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|lastTLogFile
argument_list|)
argument_list|)
decl_stmt|;
name|contentFiles
operator|.
name|put
argument_list|(
name|lastTLogFile
argument_list|,
name|tlogBytes
argument_list|)
expr_stmt|;
name|logHeaderSize
operator|=
name|Math
operator|.
name|min
argument_list|(
name|tlogBytes
operator|.
name|length
argument_list|,
name|logHeaderSize
argument_list|)
expr_stmt|;
block|}
block|}
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timeout waiting for all not live"
argument_list|,
name|ClusterStateUtil
operator|.
name|waitForAllReplicasNotLive
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|45000
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|File
argument_list|,
name|byte
index|[]
argument_list|>
name|entry
range|:
name|contentFiles
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|tlogBytes
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|tlogBytes
operator|.
name|length
operator|<=
name|logHeaderSize
condition|)
continue|continue;
name|FileOutputStream
name|stream
init|=
operator|new
name|FileOutputStream
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|skipLastBytes
init|=
name|Math
operator|.
name|max
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|tlogBytes
operator|.
name|length
operator|-
name|logHeaderSize
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|length
operator|-
name|skipLastBytes
condition|;
name|i
operator|++
control|)
block|{
name|stream
operator|.
name|write
argument_list|(
name|tlogBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Timeout waiting for all live and active"
argument_list|,
name|ClusterStateUtil
operator|.
name|waitForAllActiveAndLiveReplicas
argument_list|(
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|COLLECTION
argument_list|,
literal|120000
argument_list|)
argument_list|)
expr_stmt|;
name|resp
operator|=
name|cloudClient
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|// Make sure cluster still healthy
name|assertTrue
argument_list|(
name|resp
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

