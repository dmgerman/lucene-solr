begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileVisitResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|SimpleFileVisitor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|SolrZkClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkMaintenanceUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrCLI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|data
operator|.
name|Stat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SolrCLIZkUtilsTest
specifier|public
class|class
name|SolrCLIZkUtilsTest
extends|extends
name|SolrCloudTestCase
block|{
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|1
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|zkAddr
operator|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
expr_stmt|;
name|zkClient
operator|=
operator|new
name|SolrZkClient
argument_list|(
name|zkAddr
argument_list|,
literal|30000
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|closeConn
specifier|public
specifier|static
name|void
name|closeConn
parameter_list|()
block|{
name|zkClient
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|field|zkAddr
specifier|private
specifier|static
name|String
name|zkAddr
decl_stmt|;
DECL|field|zkClient
specifier|private
specifier|static
name|SolrZkClient
name|zkClient
decl_stmt|;
annotation|@
name|Test
DECL|method|testUpconfig
specifier|public
name|void
name|testUpconfig
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Use a full, explicit path for configset.
name|Path
name|configSet
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
decl_stmt|;
name|Path
name|srcPathCheck
init|=
name|configSet
operator|.
name|resolve
argument_list|(
literal|"cloud-subdirs"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"upconfig1"
argument_list|)
expr_stmt|;
comment|// Now do we have that config up on ZK?
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/configs/upconfig1"
argument_list|)
expr_stmt|;
comment|// Now just use a name in the configsets directory, do we find it?
name|configSet
operator|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-confname"
block|,
literal|"upconfig2"
block|,
literal|"-confdir"
block|,
literal|"cloud-subdirs"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,
literal|"-configsetsDir"
block|,
name|configSet
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,     }
decl_stmt|;
name|SolrCLI
operator|.
name|ConfigSetUploadTool
name|tool
init|=
operator|new
name|SolrCLI
operator|.
name|ConfigSetUploadTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"tool should have returned 0 for success "
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Now do we have that config up on ZK?
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/configs/upconfig2"
argument_list|)
expr_stmt|;
comment|// do we barf on a bogus path?
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-confname"
block|,
literal|"upconfig3"
block|,
literal|"-confdir"
block|,
literal|"nothinghere"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,
literal|"-configsetsDir"
block|,
name|configSet
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"tool should have returned non-zero for failure "
argument_list|,
literal|0
operator|!=
name|res
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/configs/upconfig2/schema.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should be content in the node! "
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Apache Software Foundation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDownconfig
specifier|public
name|void
name|testDownconfig
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|tmp
init|=
name|createTempDir
argument_list|(
literal|"downConfigNewPlace"
argument_list|)
decl_stmt|;
comment|// First we need a configset on ZK to bring down.
name|Path
name|configSet
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
decl_stmt|;
name|Path
name|srcPathCheck
init|=
name|configSet
operator|.
name|resolve
argument_list|(
literal|"cloud-subdirs"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"downconfig1"
argument_list|)
expr_stmt|;
comment|// Now do we have that config up on ZK?
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/configs/downconfig1"
argument_list|)
expr_stmt|;
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-confname"
block|,
literal|"downconfig1"
block|,
literal|"-confdir"
block|,
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
decl_stmt|;
name|SolrCLI
operator|.
name|ConfigSetDownloadTool
name|downTool
init|=
operator|new
name|SolrCLI
operator|.
name|ConfigSetDownloadTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|downTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|downTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Download should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZkLocalPathsMatch
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"conf"
argument_list|)
argument_list|,
literal|"/configs/downconfig1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCp
specifier|public
name|void
name|testCp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First get something up on ZK
name|Path
name|configSet
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
decl_stmt|;
name|Path
name|srcPathCheck
init|=
name|configSet
operator|.
name|resolve
argument_list|(
literal|"cloud-subdirs"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"cp1"
argument_list|)
expr_stmt|;
comment|// Now copy it somewhere else on ZK.
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/configs/cp1"
block|,
literal|"-dst"
block|,
literal|"zk:/cp2"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
decl_stmt|;
name|SolrCLI
operator|.
name|ZkCpTool
name|cpTool
init|=
operator|new
name|SolrCLI
operator|.
name|ZkCpTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Copy from zk -> zk should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZnodesMatch
argument_list|(
literal|"/configs/cp1"
argument_list|,
literal|"/cp2"
argument_list|)
expr_stmt|;
comment|// try with zk->local
name|Path
name|tmp
init|=
name|createTempDir
argument_list|(
literal|"tmpNewPlace2"
argument_list|)
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/configs/cp1"
block|,
literal|"-dst"
block|,
literal|"file:"
operator|+
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZkLocalPathsMatch
argument_list|(
name|tmp
argument_list|,
literal|"/configs/cp1"
argument_list|)
expr_stmt|;
comment|// try with zk->local  no file: prefix
name|tmp
operator|=
name|createTempDir
argument_list|(
literal|"tmpNewPlace3"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/configs/cp1"
block|,
literal|"-dst"
block|,
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZkLocalPathsMatch
argument_list|(
name|tmp
argument_list|,
literal|"/configs/cp1"
argument_list|)
expr_stmt|;
comment|// try with local->zk
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
name|srcPathCheck
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp3"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/cp3"
argument_list|)
expr_stmt|;
comment|// try with local->zk, file: specified
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|srcPathCheck
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp4"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/cp4"
argument_list|)
expr_stmt|;
comment|// try with recurse not specified
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|srcPathCheck
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp5Fail"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Copy should NOT have succeeded, recurse not specified."
argument_list|,
literal|0
operator|!=
name|res
argument_list|)
expr_stmt|;
comment|// try with recurse = false
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|srcPathCheck
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp6Fail"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Copy should NOT have succeeded, recurse set to false."
argument_list|,
literal|0
operator|!=
name|res
argument_list|)
expr_stmt|;
comment|// NOTE: really can't test copying to '.' because the test framework doesn't allow altering the source tree
comment|// and at least IntelliJ's CWD is in the source tree.
comment|// copy to local ending in separator
comment|//src and cp3 and cp4 are valid
name|String
name|localSlash
init|=
name|tmp
operator|.
name|normalize
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"cpToLocal"
operator|+
name|File
operator|.
name|separator
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/cp3/schema.xml"
block|,
literal|"-dst"
block|,
name|localSlash
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should nave created intermediate directory locally."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File should have been copied to a directory successfully"
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|localSlash
argument_list|,
literal|"schema.xml"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy to ZK ending in '/'.
comment|//src and cp3 are valid
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|srcPathCheck
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solrconfig.xml"
block|,
literal|"-dst"
block|,
literal|"zk:/powerup/"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy up to intermediate file should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have created an intermediate node on ZK"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/powerup/solrconfig.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy individual file up
comment|//src and cp3 are valid
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|srcPathCheck
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"solrconfig.xml"
block|,
literal|"-dst"
block|,
literal|"zk:/copyUpFile.xml"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy up to named file should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should NOT have created an intermediate node on ZK"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/copyUpFile.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy individual file down
comment|//src and cp3 are valid
name|String
name|localNamed
init|=
name|tmp
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
literal|"localnamed"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"renamed.txt"
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/cp4/solrconfig.xml"
block|,
literal|"-dst"
block|,
literal|"file:"
operator|+
name|localNamed
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy to local named file should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|Path
name|locPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|localNamed
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have found file: "
operator|+
name|localNamed
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|locPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be an individual file"
argument_list|,
name|Files
operator|.
name|isRegularFile
argument_list|(
name|locPath
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"File should have some data"
argument_list|,
name|Files
operator|.
name|size
argument_list|(
name|locPath
argument_list|)
operator|>
literal|100
argument_list|)
expr_stmt|;
name|boolean
name|foundApache
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|line
range|:
name|Files
operator|.
name|readAllLines
argument_list|(
name|locPath
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|line
operator|.
name|contains
argument_list|(
literal|"Apache Software Foundation"
argument_list|)
condition|)
block|{
name|foundApache
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
literal|"Should have found Apache Software Foundation in the file! "
argument_list|,
name|foundApache
argument_list|)
expr_stmt|;
comment|// Test copy from somwehere in ZK to the root of ZK.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/cp4/solrconfig.xml"
block|,
literal|"-dst"
block|,
literal|"zk:/"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy from somewhere in ZK to ZK root should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have found znode /solrconfig.xml: "
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/solrconfig.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the form path/ works for copying files up. Should append the last bit of the source path to the dst
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|srcPathCheck
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp7/"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/cp7/"
operator|+
name|srcPathCheck
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check for an intermediate ZNODE having content. You know cp7/stopwords is a parent node.
name|tmp
operator|=
name|createTempDir
argument_list|(
literal|"dirdata"
argument_list|)
expr_stmt|;
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"zknode.data"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|lines
operator|.
name|add
argument_list|(
literal|"{Some Arbitrary Data}"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|file
argument_list|,
name|lines
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|// First, just copy the data up the cp7 since it's a directory.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp7/conf/stopwords/"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/cp7/conf/stopwords"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should be content in the node! "
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"{Some Arbitrary Data}"
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|createTempDir
argument_list|(
literal|"cp8"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/cp7"
block|,
literal|"-dst"
block|,
literal|"file:"
operator|+
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Next, copy cp7 down and verify that zknode.data exists for cp7
name|Path
name|zData
init|=
name|Paths
operator|.
name|get
argument_list|(
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"conf/stopwords/zknode.data"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"znode.data should have been copied down"
argument_list|,
name|zData
operator|.
name|toFile
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Finally, copy up to cp8 and verify that the data is up there.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|tmp
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,
literal|"-dst"
block|,
literal|"zk:/cp9"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|cpTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|cpTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Copy should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/cp9/conf/stopwords"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"There should be content in the node! "
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"{Some Arbitrary Data}"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMv
specifier|public
name|void
name|testMv
parameter_list|()
throws|throws
name|Exception
block|{
comment|// First get something up on ZK
name|Path
name|configSet
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
decl_stmt|;
name|Path
name|srcPathCheck
init|=
name|configSet
operator|.
name|resolve
argument_list|(
literal|"cloud-subdirs"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"mv1"
argument_list|)
expr_stmt|;
comment|// Now move it somewhere else.
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"zk:/configs/mv1"
block|,
literal|"-dst"
block|,
literal|"zk:/mv2"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
decl_stmt|;
name|SolrCLI
operator|.
name|ZkMvTool
name|mvTool
init|=
operator|new
name|SolrCLI
operator|.
name|ZkMvTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|mvTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|mvTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Move should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
comment|// Now does the moved directory match the original on disk?
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/mv2"
argument_list|)
expr_stmt|;
comment|// And are we sure the old path is gone?
name|assertFalse
argument_list|(
literal|"/configs/mv1 Znode should not be there: "
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/mv1"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Files are in mv2
comment|// Now fail if we specify "file:". Everything should still be in /mv2
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"file:"
operator|+
name|File
operator|.
name|separator
operator|+
literal|"mv2"
block|,
literal|"-dst"
block|,
literal|"/mv3"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
comment|// Still in mv2
name|res
operator|=
name|mvTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|mvTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Move should NOT have succeeded with file: specified."
argument_list|,
literal|0
operator|!=
name|res
argument_list|)
expr_stmt|;
comment|// Let's move it to yet another place with no zk: prefix.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"/mv2"
block|,
literal|"-dst"
block|,
literal|"/mv4"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|mvTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|mvTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Move should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Znode /mv3 really should be gone"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/mv3"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now does the moved directory match the original on disk?
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/mv4"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"/mv4/solrconfig.xml"
block|,
literal|"-dst"
block|,
literal|"/testmvsingle/solrconfig.xml"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|mvTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|mvTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Move should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be able to move a single file"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/testmvsingle/solrconfig.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|zkClient
operator|.
name|makePath
argument_list|(
literal|"/parentNode"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// what happens if the destination ends with a slash?
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-src"
block|,
literal|"/mv4/schema.xml"
block|,
literal|"-dst"
block|,
literal|"/parentnode/"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|mvTool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|mvTool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Move should have succeeded."
argument_list|,
literal|0
argument_list|,
name|res
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should be able to move a single file to a parent znode"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/parentnode/schema.xml"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|zkClient
operator|.
name|getData
argument_list|(
literal|"/parentnode/schema.xml"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"There should be content in the node! "
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"Apache Software Foundation"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLs
specifier|public
name|void
name|testLs
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|configSet
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
decl_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"lister"
argument_list|)
expr_stmt|;
comment|// Should only find a single level.
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/configs"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
decl_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|baos
argument_list|,
literal|false
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|SolrCLI
operator|.
name|ZkLsTool
name|tool
init|=
operator|new
name|SolrCLI
operator|.
name|ZkLsTool
argument_list|(
name|ps
argument_list|)
decl_stmt|;
name|int
name|res
init|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"List should have succeeded"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain the conf directory"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"lister"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Return should NOT contain a child node"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// simple ls recurse=false
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/configs"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"List should have succeeded"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain the conf directory"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"lister"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Return should NOT contain a child node"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// recurse=true
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/configs"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"List should have succeeded"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain the conf directory"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"lister"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain a child node"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Saw a case where going from root foo'd, so test it.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"List should have succeeded"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain the conf directory"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"lister"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain a child node"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"List should have succeeded"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Return should not contain /zookeeper"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"/zookeeper"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Saw a case where ending in slash foo'd, so test it.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/configs/"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|content
operator|=
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"List should have succeeded"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain the conf directory"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"lister"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Return should contain a child node"
argument_list|,
name|content
operator|.
name|contains
argument_list|(
literal|"solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRm
specifier|public
name|void
name|testRm
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|configSet
init|=
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
decl_stmt|;
name|Path
name|srcPathCheck
init|=
name|configSet
operator|.
name|resolve
argument_list|(
literal|"cloud-subdirs"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
decl_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"rm1"
argument_list|)
expr_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"rm2"
argument_list|)
expr_stmt|;
comment|// Should fail if recurse not set.
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/configs/rm1"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
decl_stmt|;
name|SolrCLI
operator|.
name|ZkRmTool
name|tool
init|=
operator|new
name|SolrCLI
operator|.
name|ZkRmTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have failed to remove node with children unless -recurse is set to true"
argument_list|,
name|res
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Are we sure all the znodes are still there?
name|verifyZkLocalPathsMatch
argument_list|(
name|srcPathCheck
argument_list|,
literal|"/configs/rm1"
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"zk:/configs/rm1"
block|,
literal|"-recurse"
block|,
literal|"false"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have failed to remove node with children if -recurse is set to false"
argument_list|,
name|res
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"/configs/rm1"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have removed node /configs/rm1"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Znode /configs/toremove really should be gone"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/rm1"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that zk prefix also works.
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"zk:/configs/rm2"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have removed node /configs/rm2"
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Znode /configs/toremove2 really should be gone"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
literal|"/configs/rm2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should silently just refuse to do anything to the / or /zookeeper
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-path"
block|,
literal|"zk:/"
block|,
literal|"-recurse"
block|,
literal|"true"
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,     }
expr_stmt|;
name|copyConfigUp
argument_list|(
name|configSet
argument_list|,
literal|"cloud-subdirs"
argument_list|,
literal|"rm3"
argument_list|)
expr_stmt|;
name|res
operator|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Should fail when trying to remove /."
argument_list|,
name|res
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// We can use this for testing since the goal is to move "some stuff" up to ZK.
comment|// The fact that they're in configsets is irrelevant.
DECL|method|copyConfigUp
specifier|private
name|void
name|copyConfigUp
parameter_list|(
name|Path
name|configSetDir
parameter_list|,
name|String
name|srcConfigSet
parameter_list|,
name|String
name|dstConfigName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
operator|new
name|String
index|[]
block|{
literal|"-confname"
block|,
name|dstConfigName
block|,
literal|"-confdir"
block|,
name|srcConfigSet
block|,
literal|"-zkHost"
block|,
name|zkAddr
block|,
literal|"-configsetsDir"
block|,
name|configSetDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|,     }
decl_stmt|;
name|SolrCLI
operator|.
name|ConfigSetUploadTool
name|tool
init|=
operator|new
name|SolrCLI
operator|.
name|ConfigSetUploadTool
argument_list|()
decl_stmt|;
name|int
name|res
init|=
name|tool
operator|.
name|runTool
argument_list|(
name|SolrCLI
operator|.
name|processCommandLineArgs
argument_list|(
name|SolrCLI
operator|.
name|joinCommonAndToolOptions
argument_list|(
name|tool
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|,
name|args
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tool should have returned 0 for success, returned: "
operator|+
name|res
argument_list|,
name|res
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Check that all children of fileRoot are children of zkRoot and vice-versa
DECL|method|verifyZkLocalPathsMatch
specifier|private
name|void
name|verifyZkLocalPathsMatch
parameter_list|(
name|Path
name|fileRoot
parameter_list|,
name|String
name|zkRoot
parameter_list|)
throws|throws
name|IOException
throws|,
name|KeeperException
throws|,
name|InterruptedException
block|{
name|verifyAllFilesAreZNodes
argument_list|(
name|fileRoot
argument_list|,
name|zkRoot
argument_list|)
expr_stmt|;
name|verifyAllZNodesAreFiles
argument_list|(
name|fileRoot
argument_list|,
name|zkRoot
argument_list|)
expr_stmt|;
block|}
DECL|method|isEphemeral
specifier|private
specifier|static
name|boolean
name|isEphemeral
parameter_list|(
name|String
name|zkPath
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|Stat
name|znodeStat
init|=
name|zkClient
operator|.
name|exists
argument_list|(
name|zkPath
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|znodeStat
operator|.
name|getEphemeralOwner
argument_list|()
operator|!=
literal|0
return|;
block|}
DECL|method|verifyAllZNodesAreFiles
name|void
name|verifyAllZNodesAreFiles
parameter_list|(
name|Path
name|fileRoot
parameter_list|,
name|String
name|zkRoot
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|String
name|child
range|:
name|zkClient
operator|.
name|getChildren
argument_list|(
name|zkRoot
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
control|)
block|{
comment|// Skip ephemeral nodes
if|if
condition|(
name|zkRoot
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|==
literal|false
condition|)
name|zkRoot
operator|+=
literal|"/"
expr_stmt|;
if|if
condition|(
name|isEphemeral
argument_list|(
name|zkRoot
operator|+
name|child
argument_list|)
condition|)
continue|continue;
name|Path
name|thisPath
init|=
name|Paths
operator|.
name|get
argument_list|(
name|fileRoot
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|child
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Znode "
operator|+
name|child
operator|+
literal|" should have been found on disk at "
operator|+
name|fileRoot
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|thisPath
argument_list|)
argument_list|)
expr_stmt|;
name|verifyAllZNodesAreFiles
argument_list|(
name|thisPath
argument_list|,
name|zkRoot
operator|+
name|child
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|verifyAllFilesAreZNodes
name|void
name|verifyAllFilesAreZNodes
parameter_list|(
name|Path
name|fileRoot
parameter_list|,
name|String
name|zkRoot
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|fileRoot
argument_list|,
operator|new
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
argument_list|()
block|{
name|void
name|checkPathOnZk
parameter_list|(
name|Path
name|path
parameter_list|)
block|{
name|String
name|znode
init|=
name|ZkMaintenanceUtils
operator|.
name|createZkNodeName
argument_list|(
name|zkRoot
argument_list|,
name|fileRoot
argument_list|,
name|path
argument_list|)
decl_stmt|;
try|try
block|{
comment|// It's easier to catch this exception and fail than catch it everywher eles.
name|assertTrue
argument_list|(
literal|"Should have found "
operator|+
name|znode
operator|+
literal|" on Zookeeper"
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
name|znode
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Caught unexpected exception "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" Znode we were checking "
operator|+
name|znode
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
name|Path
name|file
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
literal|"Path should start at proper place!"
argument_list|,
name|file
operator|.
name|startsWith
argument_list|(
name|fileRoot
argument_list|)
argument_list|)
expr_stmt|;
name|checkPathOnZk
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|preVisitDirectory
parameter_list|(
name|Path
name|dir
parameter_list|,
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|checkPathOnZk
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Insure that all znodes in first are in second and vice-versa
DECL|method|verifyZnodesMatch
specifier|private
name|void
name|verifyZnodesMatch
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|second
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|verifyFirstZNodesInSecond
argument_list|(
name|first
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|verifyFirstZNodesInSecond
argument_list|(
name|second
argument_list|,
name|first
argument_list|)
expr_stmt|;
block|}
comment|// Note, no folderol here with Windows path names.
DECL|method|verifyFirstZNodesInSecond
specifier|private
name|void
name|verifyFirstZNodesInSecond
parameter_list|(
name|String
name|first
parameter_list|,
name|String
name|second
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
for|for
control|(
name|String
name|node
range|:
name|zkClient
operator|.
name|getChildren
argument_list|(
name|first
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
control|)
block|{
name|String
name|fNode
init|=
name|first
operator|+
literal|"/"
operator|+
name|node
decl_stmt|;
name|String
name|sNode
init|=
name|second
operator|+
literal|"/"
operator|+
name|node
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Node "
operator|+
name|sNode
operator|+
literal|" not found. Exists on "
operator|+
name|fNode
argument_list|,
name|zkClient
operator|.
name|exists
argument_list|(
name|sNode
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|verifyFirstZNodesInSecond
argument_list|(
name|fNode
argument_list|,
name|sNode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

