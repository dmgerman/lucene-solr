begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|SolrIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|OnlyLeaderIndexesTest
specifier|public
class|class
name|OnlyLeaderIndexesTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection1"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.directoryFactory"
argument_list|,
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.ulog.numRecordsToKeep"
argument_list|,
literal|"1000"
argument_list|)
expr_stmt|;
name|configureCluster
argument_list|(
literal|3
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"config"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal-inplace-updates"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"config"
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
operator|.
name|setRealtimeReplicas
argument_list|(
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|basicTest
argument_list|()
expr_stmt|;
name|recoveryTest
argument_list|()
expr_stmt|;
name|dbiTest
argument_list|()
expr_stmt|;
name|basicLeaderElectionTest
argument_list|()
expr_stmt|;
name|outOfOrderDBQWithInPlaceUpdatesTest
argument_list|()
expr_stmt|;
block|}
DECL|method|basicTest
specifier|public
name|void
name|basicTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
block|{
name|UpdateHandler
name|updateHandler
init|=
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iwRef
init|=
name|updateHandler
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"IndexWriter at leader must see updates "
argument_list|,
name|iwRef
operator|.
name|get
argument_list|()
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iwRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iwRef
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"IndexWriter at replicas must not see updates "
argument_list|,
name|iwRef
operator|.
name|get
argument_list|()
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iwRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteById
argument_list|(
literal|"1"
argument_list|)
operator|.
name|deleteByQuery
argument_list|(
literal|"id:2"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
comment|// The DBQ is not processed at replicas, so we still can get doc2 and other docs by RTG
name|checkRTG
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
name|getSolrRunner
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Update log roll over
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|UpdateLog
name|updateLog
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|updateLog
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// UpdateLog copy over old updates
for|for
control|(
name|int
name|i
init|=
literal|15
init|;
name|i
operator|<=
literal|150
condition|;
name|i
operator|++
control|)
block|{
name|cloudClient
operator|.
name|add
argument_list|(
name|COLLECTION
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|15
operator|&
name|i
operator|!=
literal|150
condition|)
block|{
name|cloudClient
operator|.
name|commit
argument_list|(
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
block|}
name|checkRTG
argument_list|(
literal|120
argument_list|,
literal|150
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|waitForReplicasCatchUp
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
DECL|method|recoveryTest
specifier|public
name|void
name|recoveryTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
comment|// Replica recovery
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|solrRunner
init|=
name|getSolrRunner
argument_list|(
literal|false
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
comment|// We skip peerSync, so replica will always trigger commit on leader
name|checkShardConsistency
argument_list|(
literal|4
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// LTR can be kicked off, so waiting for replicas recovery
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|5
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// More Replica recovery testing
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|3
argument_list|,
literal|8
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|true
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|3
argument_list|,
literal|8
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|6
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// Test replica recovery apply buffer updates
name|Semaphore
name|waitingForBufferUpdates
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Semaphore
name|waitingForReplay
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|RecoveryStrategy
operator|.
name|testing_beforeReplayBufferingUpdates
operator|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|waitingForReplay
operator|.
name|release
argument_list|()
expr_stmt|;
name|waitingForBufferUpdates
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
expr_stmt|;
name|ChaosMonkey
operator|.
name|stop
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
name|waitingForReplay
operator|.
name|acquire
argument_list|()
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|waitingForBufferUpdates
operator|.
name|release
argument_list|()
expr_stmt|;
name|RecoveryStrategy
operator|.
name|testing_beforeReplayBufferingUpdates
operator|=
literal|null
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|3
argument_list|,
literal|10
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|6
argument_list|,
literal|20
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|RefCounted
argument_list|<
name|IndexWriter
argument_list|>
name|iwRef
init|=
name|solrCore
operator|.
name|getUpdateHandler
argument_list|()
operator|.
name|getSolrCoreState
argument_list|()
operator|.
name|getIndexWriter
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"IndexWriter at replicas must not see updates "
argument_list|,
name|iwRef
operator|.
name|get
argument_list|()
operator|.
name|hasUncommittedChanges
argument_list|()
argument_list|)
expr_stmt|;
name|iwRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|dbiTest
specifier|public
name|void
name|dbiTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteById
argument_list|(
literal|"1"
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
try|try
block|{
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AssertionError
name|e
parameter_list|)
block|{
return|return;
block|}
name|fail
argument_list|(
literal|"Doc1 is deleted but it's still exist"
argument_list|)
expr_stmt|;
block|}
DECL|method|basicLeaderElectionTest
specifier|public
name|void
name|basicLeaderElectionTest
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|String
name|oldLeader
init|=
name|getLeader
argument_list|()
decl_stmt|;
name|JettySolrRunner
name|oldLeaderJetty
init|=
name|getSolrRunner
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|60
condition|;
name|i
operator|++
control|)
block|{
comment|// wait till leader is changed
if|if
condition|(
operator|!
name|oldLeader
operator|.
name|equals
argument_list|(
name|getLeader
argument_list|()
argument_list|)
condition|)
block|{
break|break;
block|}
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
operator|.
name|process
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|checkRTG
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|,
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|commit
argument_list|(
name|cloudClient
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|getLeader
specifier|private
name|String
name|getLeader
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ZkNodeProps
name|props
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getLeaderRetry
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|,
literal|30000
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|NODE_NAME_PROP
argument_list|)
return|;
block|}
DECL|method|outOfOrderDBQWithInPlaceUpdatesTest
specifier|public
name|void
name|outOfOrderDBQWithInPlaceUpdatesTest
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateRequest
argument_list|>
name|updates
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|simulatedUpdateRequest
argument_list|(
literal|null
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|"title_s"
argument_list|,
literal|"title0_new"
argument_list|,
literal|"inplace_updatable_int"
argument_list|,
literal|5
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// full update
name|updates
operator|.
name|add
argument_list|(
name|simulatedDBQ
argument_list|(
literal|"inplace_updatable_int:5"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|98
argument_list|)
argument_list|)
expr_stmt|;
name|updates
operator|.
name|add
argument_list|(
name|simulatedUpdateRequest
argument_list|(
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|100
argument_list|,
literal|"id"
argument_list|,
literal|1
argument_list|,
literal|"inplace_updatable_int"
argument_list|,
literal|6
argument_list|,
literal|"_version_"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|99
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|getSolrRunner
argument_list|(
literal|false
argument_list|)
control|)
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|solrRunner
operator|.
name|newClient
argument_list|()
init|)
block|{
for|for
control|(
name|UpdateRequest
name|up
range|:
name|updates
control|)
block|{
name|up
operator|.
name|process
argument_list|(
name|client
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|JettySolrRunner
name|oldLeaderJetty
init|=
name|getSolrRunner
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ChaosMonkey
operator|.
name|kill
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|ChaosMonkey
operator|.
name|start
argument_list|(
name|oldLeaderJetty
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|checkShardConsistency
argument_list|(
literal|2
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|SolrDocument
name|doc
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getById
argument_list|(
name|COLLECTION
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|simulatedUpdateRequest
specifier|private
name|UpdateRequest
name|simulatedUpdateRequest
parameter_list|(
name|Long
name|prevVersion
parameter_list|,
name|Object
modifier|...
name|fields
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
name|fields
argument_list|)
decl_stmt|;
comment|// get baseUrl of the leader
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|()
decl_stmt|;
name|UpdateRequest
name|ur
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ur
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"update.distrib"
argument_list|,
literal|"FROMLEADER"
argument_list|)
expr_stmt|;
if|if
condition|(
name|prevVersion
operator|!=
literal|null
condition|)
block|{
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.inplace.prevversion"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|prevVersion
argument_list|)
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.inplace.update"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.from"
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
return|return
name|ur
return|;
block|}
DECL|method|simulatedDBQ
specifier|private
name|UpdateRequest
name|simulatedDBQ
parameter_list|(
name|String
name|query
parameter_list|,
name|long
name|version
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|String
name|baseUrl
init|=
name|getBaseUrl
argument_list|()
decl_stmt|;
name|UpdateRequest
name|ur
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|ur
operator|.
name|deleteByQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"_version_"
argument_list|,
literal|""
operator|+
name|version
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"update.distrib"
argument_list|,
literal|"FROMLEADER"
argument_list|)
expr_stmt|;
name|ur
operator|.
name|setParam
argument_list|(
literal|"distrib.from"
argument_list|,
name|baseUrl
argument_list|)
expr_stmt|;
return|return
name|ur
return|;
block|}
DECL|method|getBaseUrl
specifier|private
name|String
name|getBaseUrl
parameter_list|()
block|{
name|DocCollection
name|collection
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|COLLECTION
argument_list|)
decl_stmt|;
name|Slice
name|slice
init|=
name|collection
operator|.
name|getSlice
argument_list|(
literal|"shard1"
argument_list|)
decl_stmt|;
return|return
name|slice
operator|.
name|getLeader
argument_list|()
operator|.
name|getCoreUrl
argument_list|()
return|;
block|}
DECL|method|checkRTG
specifier|private
name|void
name|checkRTG
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|solrRunners
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|solrRunners
control|)
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|solrRunner
operator|.
name|newClient
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<=
name|to
condition|;
name|i
operator|++
control|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|query
operator|.
name|setRequestHandler
argument_list|(
literal|"/get"
argument_list|)
expr_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QueryResponse
name|res
init|=
name|client
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Can not find doc "
operator|+
name|i
operator|+
literal|" in "
operator|+
name|solrRunner
operator|.
name|getBaseUrl
argument_list|()
argument_list|,
name|res
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|checkShardConsistency
specifier|private
name|void
name|checkShardConsistency
parameter_list|(
name|int
name|expected
parameter_list|,
name|int
name|numTry
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTry
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|inSync
init|=
literal|true
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
try|try
init|(
name|SolrClient
name|client
init|=
name|solrRunner
operator|.
name|newClient
argument_list|()
init|)
block|{
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"*:*"
argument_list|)
decl_stmt|;
name|query
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|results
init|=
name|client
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|query
argument_list|)
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
decl_stmt|;
if|if
condition|(
name|expected
operator|!=
name|results
condition|)
block|{
name|inSync
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|inSync
condition|)
return|return;
block|}
name|fail
argument_list|(
literal|"Some replicas are not in sync with leader"
argument_list|)
expr_stmt|;
block|}
DECL|method|waitForReplicasCatchUp
specifier|private
name|void
name|waitForReplicasCatchUp
parameter_list|(
name|int
name|numTry
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|String
name|leaderTimeCommit
init|=
name|getSolrCore
argument_list|(
literal|true
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|SolrIndexWriter
operator|.
name|COMMIT_TIME_MSEC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|leaderTimeCommit
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTry
condition|;
name|i
operator|++
control|)
block|{
name|boolean
name|inSync
init|=
literal|true
decl_stmt|;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|getSolrCore
argument_list|(
literal|false
argument_list|)
control|)
block|{
name|String
name|replicateTimeCommit
init|=
name|solrCore
operator|.
name|getDeletionPolicy
argument_list|()
operator|.
name|getLatestCommit
argument_list|()
operator|.
name|getUserData
argument_list|()
operator|.
name|get
argument_list|(
name|SolrIndexWriter
operator|.
name|COMMIT_TIME_MSEC_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|leaderTimeCommit
operator|.
name|equals
argument_list|(
name|replicateTimeCommit
argument_list|)
condition|)
block|{
name|inSync
operator|=
literal|false
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|inSync
condition|)
return|return;
block|}
name|fail
argument_list|(
literal|"Some replicas are not in sync with leader"
argument_list|)
expr_stmt|;
block|}
DECL|method|getSolrCore
specifier|private
name|List
argument_list|<
name|SolrCore
argument_list|>
name|getSolrCore
parameter_list|(
name|boolean
name|isLeader
parameter_list|)
block|{
name|List
argument_list|<
name|SolrCore
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|COLLECTION
argument_list|)
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCores
argument_list|()
control|)
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|docCollection
operator|.
name|getReplica
argument_list|(
name|cloudDescriptor
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|==
name|replica
operator|&&
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrCore
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|!=
name|replica
operator|&&
operator|!
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrCore
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rs
return|;
block|}
DECL|method|getSolrRunner
specifier|private
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|getSolrRunner
parameter_list|(
name|boolean
name|isLeader
parameter_list|)
block|{
name|List
argument_list|<
name|JettySolrRunner
argument_list|>
name|rs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|CloudSolrClient
name|cloudClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|DocCollection
name|docCollection
init|=
name|cloudClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|COLLECTION
argument_list|)
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|solrRunner
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
if|if
condition|(
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
for|for
control|(
name|SolrCore
name|solrCore
range|:
name|solrRunner
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getCores
argument_list|()
control|)
block|{
name|CloudDescriptor
name|cloudDescriptor
init|=
name|solrCore
operator|.
name|getCoreDescriptor
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
decl_stmt|;
name|Slice
name|slice
init|=
name|docCollection
operator|.
name|getSlice
argument_list|(
name|cloudDescriptor
operator|.
name|getShardId
argument_list|()
argument_list|)
decl_stmt|;
name|Replica
name|replica
init|=
name|docCollection
operator|.
name|getReplica
argument_list|(
name|cloudDescriptor
operator|.
name|getCoreNodeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|==
name|replica
operator|&&
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|slice
operator|.
name|getLeader
argument_list|()
operator|!=
name|replica
operator|&&
operator|!
name|isLeader
condition|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|solrRunner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rs
return|;
block|}
block|}
end_class

end_unit

