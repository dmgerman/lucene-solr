begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * How to use this test class:  * #1 Run the test, e.g.  *    in Eclipse 'Run As JUnit Test' or  *    on the command line:  cd solr/core ; ant test -Dtestcase=HelloWorldSolrCloudTestCase  * #2 Modify the test, e.g.  *    in setupCluster add further documents and then re-run the test.  */
end_comment

begin_class
DECL|class|HelloWorldSolrCloudTestCase
specifier|public
class|class
name|HelloWorldSolrCloudTestCase
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"hello_world"
decl_stmt|;
DECL|field|numShards
specifier|private
specifier|static
specifier|final
name|int
name|numShards
init|=
literal|3
decl_stmt|;
DECL|field|numReplicas
specifier|private
specifier|static
specifier|final
name|int
name|numReplicas
init|=
literal|2
decl_stmt|;
DECL|field|maxShardsPerNode
specifier|private
specifier|static
specifier|final
name|int
name|maxShardsPerNode
init|=
literal|2
decl_stmt|;
DECL|field|nodeCount
specifier|private
specifier|static
specifier|final
name|int
name|nodeCount
init|=
operator|(
name|numShards
operator|*
name|numReplicas
operator|+
operator|(
name|maxShardsPerNode
operator|-
literal|1
operator|)
operator|)
operator|/
name|maxShardsPerNode
decl_stmt|;
DECL|field|id
specifier|private
specifier|static
specifier|final
name|String
name|id
init|=
literal|"id"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create and configure cluster
name|configureCluster
argument_list|(
name|nodeCount
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|configset
argument_list|(
literal|"cloud-dynamic"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
comment|// create an empty collection
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
name|numReplicas
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
name|maxShardsPerNode
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
comment|// add a document
specifier|final
name|SolrInputDocument
name|doc1
init|=
name|sdoc
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"title_s"
argument_list|,
literal|"Here comes the sun"
argument_list|,
literal|"artist_s"
argument_list|,
literal|"The Beatles"
argument_list|,
literal|"popularity_i"
argument_list|,
literal|"123"
argument_list|)
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|doc1
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
comment|// add further document(s) here
comment|// TODO
block|}
annotation|@
name|Test
DECL|method|testHighestScoring
specifier|public
name|void
name|testHighestScoring
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|solrQuery
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,popularity_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"popularity_i desc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
specifier|final
name|QueryResponse
name|rsp
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|solrQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLowestScoring
specifier|public
name|void
name|testLowestScoring
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|solrQuery
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,popularity_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"popularity_i asc"
argument_list|,
literal|"rows"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
specifier|final
name|CloudSolrClient
name|cloudSolrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
specifier|final
name|QueryResponse
name|rsp
init|=
name|cloudSolrClient
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|solrQuery
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

