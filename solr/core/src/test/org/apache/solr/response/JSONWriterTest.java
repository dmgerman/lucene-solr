begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ReturnFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrReturnFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** Test some aspects of JSON/python writer output (very incomplete)  *  */
end_comment

begin_class
DECL|class|JSONWriterTest
specifier|public
class|class
name|JSONWriterTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|jsonEq
specifier|private
name|void
name|jsonEq
parameter_list|(
name|String
name|expected
parameter_list|,
name|String
name|received
parameter_list|)
block|{
name|expected
operator|=
name|expected
operator|.
name|trim
argument_list|()
expr_stmt|;
name|received
operator|=
name|received
operator|.
name|trim
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|received
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTypes
specifier|public
name|void
name|testTypes
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"dummy"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|QueryResponseWriter
name|w
init|=
operator|new
name|PythonResponseWriter
argument_list|()
decl_stmt|;
name|StringWriter
name|buf
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"data1"
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"data2"
argument_list|,
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"data3"
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|jsonEq
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
literal|"{'data1':float('NaN'),'data2':-float('Inf'),'data3':float('Inf')}"
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|RubyResponseWriter
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|jsonEq
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
literal|"{'data1'=>(0.0/0.0),'data2'=>-(1.0/0.0),'data3'=>(1.0/0.0)}"
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|JSONResponseWriter
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|new
name|StringWriter
argument_list|()
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|jsonEq
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|,
literal|"{\"data1\":\"NaN\",\"data2\":\"-Infinity\",\"data3\":\"Infinity\"}"
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJSON
specifier|public
name|void
name|testJSON
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
index|[]
name|namedListStyles
init|=
operator|new
name|String
index|[]
block|{
name|JSONWriter
operator|.
name|JSON_NL_FLAT
block|,
name|JSONWriter
operator|.
name|JSON_NL_MAP
block|,
name|JSONWriter
operator|.
name|JSON_NL_ARROFARR
block|,
name|JSONWriter
operator|.
name|JSON_NL_ARROFMAP
block|,
name|JSONWriter
operator|.
name|JSON_NL_ARROFNTV
block|,     }
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|namedListStyle
range|:
name|namedListStyles
control|)
block|{
name|implTestJSON
argument_list|(
name|namedListStyle
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|JSONWriter
operator|.
name|JSON_NL_STYLE_COUNT
argument_list|,
name|namedListStyles
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|implTestJSON
specifier|private
name|void
name|implTestJSON
parameter_list|(
specifier|final
name|String
name|namedListStyle
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|,
literal|"json.nl"
argument_list|,
name|namedListStyle
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|JSONResponseWriter
name|w
init|=
operator|new
name|JSONResponseWriter
argument_list|()
decl_stmt|;
name|StringWriter
name|buf
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|NamedList
name|nl
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|"data1"
argument_list|,
literal|"he\u2028llo\u2029!"
argument_list|)
expr_stmt|;
comment|// make sure that 2028 and 2029 are both escaped (they are illegal in javascript)
name|nl
operator|.
name|add
argument_list|(
literal|null
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|nl
operator|.
name|add
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"nl"
argument_list|,
name|nl
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"byte"
argument_list|,
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"short"
argument_list|,
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"bytes"
argument_list|,
literal|"abc"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedNLjson
decl_stmt|;
if|if
condition|(
name|namedListStyle
operator|==
name|JSONWriter
operator|.
name|JSON_NL_FLAT
condition|)
block|{
name|expectedNLjson
operator|=
literal|"\"nl\":[\"data1\",\"he\\u2028llo\\u2029!\",null,42,null,null]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSONWriter
operator|.
name|JSON_NL_MAP
condition|)
block|{
name|expectedNLjson
operator|=
literal|"\"nl\":{\"data1\":\"he\\u2028llo\\u2029!\",\"\":42,\"\":null}"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSONWriter
operator|.
name|JSON_NL_ARROFARR
condition|)
block|{
name|expectedNLjson
operator|=
literal|"\"nl\":[[\"data1\",\"he\\u2028llo\\u2029!\"],[null,42],[null,null]]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSONWriter
operator|.
name|JSON_NL_ARROFMAP
condition|)
block|{
name|expectedNLjson
operator|=
literal|"\"nl\":[{\"data1\":\"he\\u2028llo\\u2029!\"},42,null]"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|namedListStyle
operator|==
name|JSONWriter
operator|.
name|JSON_NL_ARROFNTV
condition|)
block|{
name|expectedNLjson
operator|=
literal|"\"nl\":[{\"name\":\"data1\",\"type\":\"str\",\"value\":\"he\\u2028llo\\u2029!\"},"
operator|+
literal|"{\"name\":null,\"type\":\"int\",\"value\":42},"
operator|+
literal|"{\"name\":null,\"type\":\"null\",\"value\":null}]"
expr_stmt|;
block|}
else|else
block|{
name|expectedNLjson
operator|=
literal|null
expr_stmt|;
name|fail
argument_list|(
literal|"unexpected namedListStyle="
operator|+
name|namedListStyle
argument_list|)
expr_stmt|;
block|}
name|jsonEq
argument_list|(
literal|"{"
operator|+
name|expectedNLjson
operator|+
literal|",\"byte\":-3,\"short\":-4,\"bytes\":\"YWJj\"}"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testJSONSolrDocument
specifier|public
name|void
name|testJSONSolrDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|CommonParams
operator|.
name|WT
argument_list|,
literal|"json"
argument_list|,
name|CommonParams
operator|.
name|FL
argument_list|,
literal|"id,score"
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|JSONResponseWriter
name|w
init|=
operator|new
name|JSONResponseWriter
argument_list|()
decl_stmt|;
name|ReturnFields
name|returnFields
init|=
operator|new
name|SolrReturnFields
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|rsp
operator|.
name|setReturnFields
argument_list|(
name|returnFields
argument_list|)
expr_stmt|;
name|StringWriter
name|buf
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SolrDocument
name|solrDoc
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"subject"
argument_list|,
literal|"hello2"
argument_list|)
expr_stmt|;
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"title"
argument_list|,
literal|"hello3"
argument_list|)
expr_stmt|;
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"score"
argument_list|,
literal|"0.7"
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|list
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|list
operator|.
name|setNumFound
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|setStart
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|setMaxScore
argument_list|(
literal|0.7f
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|solrDoc
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|addResponse
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|buf
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"response contains unexpected fields: "
operator|+
name|result
argument_list|,
name|result
operator|.
name|contains
argument_list|(
literal|"hello"
argument_list|)
operator|||
name|result
operator|.
name|contains
argument_list|(
literal|"\"subject\""
argument_list|)
operator|||
name|result
operator|.
name|contains
argument_list|(
literal|"\"title\""
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"response doesn't contain expected fields: "
operator|+
name|result
argument_list|,
name|result
operator|.
name|contains
argument_list|(
literal|"\"id\""
argument_list|)
operator|&&
name|result
operator|.
name|contains
argument_list|(
literal|"\"score\""
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArrntvWriterOverridesAllWrites
specifier|public
name|void
name|testArrntvWriterOverridesAllWrites
parameter_list|()
block|{
comment|// List rather than Set because two not-overridden methods could share name but not signature
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|methodsExpectedNotOverriden
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|14
argument_list|)
decl_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeResponse"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeKey"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeNamedListAsMapMangled"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeNamedListAsMapWithDups"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeNamedListAsArrMap"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeNamedListAsArrArr"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeNamedListAsFlat"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeEndDocumentList"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeMapOpener"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeMapSeparator"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeMapCloser"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"public void org.apache.solr.response.JSONWriter.writeArray(java.lang.String,java.util.List) throws java.io.IOException"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeArrayOpener"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeArraySeparator"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"writeArrayCloser"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"public void org.apache.solr.response.JSONWriter.writeMap(org.apache.solr.common.MapWriter) throws java.io.IOException"
argument_list|)
expr_stmt|;
name|methodsExpectedNotOverriden
operator|.
name|add
argument_list|(
literal|"public void org.apache.solr.response.JSONWriter.writeIterator(org.apache.solr.common.IteratorWriter) throws java.io.IOException"
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|subClass
init|=
name|ArrayOfNameTypeValueJSONWriter
operator|.
name|class
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|subClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|superClassMethod
range|:
name|superClass
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
specifier|final
name|String
name|methodName
init|=
name|superClassMethod
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|String
name|methodFullName
init|=
name|superClassMethod
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|methodName
operator|.
name|startsWith
argument_list|(
literal|"write"
argument_list|)
condition|)
continue|continue;
specifier|final
name|int
name|modifiers
init|=
name|superClassMethod
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
name|Modifier
operator|.
name|isFinal
argument_list|(
name|modifiers
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|Modifier
operator|.
name|isStatic
argument_list|(
name|modifiers
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|Modifier
operator|.
name|isPrivate
argument_list|(
name|modifiers
argument_list|)
condition|)
continue|continue;
specifier|final
name|boolean
name|expectOverriden
init|=
operator|!
name|methodsExpectedNotOverriden
operator|.
name|contains
argument_list|(
name|methodName
argument_list|)
operator|&&
operator|!
name|methodsExpectedNotOverriden
operator|.
name|contains
argument_list|(
name|methodFullName
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Method
name|subClassMethod
init|=
name|subClass
operator|.
name|getDeclaredMethod
argument_list|(
name|superClassMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|superClassMethod
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectOverriden
condition|)
block|{
name|assertEquals
argument_list|(
literal|"getReturnType() difference"
argument_list|,
name|superClassMethod
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|subClassMethod
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
name|subClass
operator|+
literal|" must not override '"
operator|+
name|superClassMethod
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
if|if
condition|(
name|expectOverriden
condition|)
block|{
name|fail
argument_list|(
name|subClass
operator|+
literal|" needs to override '"
operator|+
name|superClassMethod
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|methodName
operator|+
literal|" not found in remaining "
operator|+
name|methodsExpectedNotOverriden
argument_list|,
name|methodsExpectedNotOverriden
operator|.
name|remove
argument_list|(
name|methodName
argument_list|)
operator|||
name|methodsExpectedNotOverriden
operator|.
name|remove
argument_list|(
name|methodFullName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertTrue
argument_list|(
literal|"methodsExpected NotOverriden but NotFound instead: "
operator|+
name|methodsExpectedNotOverriden
argument_list|,
name|methodsExpectedNotOverriden
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testArrntvWriterLacksMethodsOfItsOwn
specifier|public
name|void
name|testArrntvWriterLacksMethodsOfItsOwn
parameter_list|()
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|subClass
init|=
name|ArrayOfNameTypeValueJSONWriter
operator|.
name|class
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|superClass
init|=
name|subClass
operator|.
name|getSuperclass
argument_list|()
decl_stmt|;
comment|// ArrayOfNamedValuePairJSONWriter is a simple sub-class
comment|// which should have (almost) no methods of its own
for|for
control|(
specifier|final
name|Method
name|subClassMethod
range|:
name|subClass
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
comment|// only own private method of its own
if|if
condition|(
name|subClassMethod
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"ifNeededWriteTypeAndValueKey"
argument_list|)
condition|)
continue|continue;
try|try
block|{
specifier|final
name|Method
name|superClassMethod
init|=
name|superClass
operator|.
name|getDeclaredMethod
argument_list|(
name|subClassMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|subClassMethod
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getReturnType() difference"
argument_list|,
name|subClassMethod
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|superClassMethod
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|subClass
operator|+
literal|" should not have '"
operator|+
name|subClassMethod
operator|+
literal|"' method of its own"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testConstantsUnchanged
specifier|public
name|void
name|testConstantsUnchanged
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"json.nl"
argument_list|,
name|JSONWriter
operator|.
name|JSON_NL_STYLE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map"
argument_list|,
name|JSONWriter
operator|.
name|JSON_NL_MAP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"flat"
argument_list|,
name|JSONWriter
operator|.
name|JSON_NL_FLAT
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arrarr"
argument_list|,
name|JSONWriter
operator|.
name|JSON_NL_ARROFARR
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arrmap"
argument_list|,
name|JSONWriter
operator|.
name|JSON_NL_ARROFMAP
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"arrntv"
argument_list|,
name|JSONWriter
operator|.
name|JSON_NL_ARROFNTV
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"json.wrf"
argument_list|,
name|JSONWriter
operator|.
name|JSON_WRAPPER_FUNCTION
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

