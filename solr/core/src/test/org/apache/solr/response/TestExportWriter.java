begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestExportWriter
specifier|public
class|class
name|TestExportWriter
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"export.test"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-sortingresponse.xml"
argument_list|,
literal|"schema-sortingresponse.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2.1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"1"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"hello world"
argument_list|,
literal|"longdv"
argument_list|,
literal|"323223232323"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2344.345"
argument_list|,
literal|"intdv_m"
argument_list|,
literal|"100"
argument_list|,
literal|"intdv_m"
argument_list|,
literal|"250"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"123.321"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"345.123"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"3444.222"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"23232.2"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"43434343434"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"343332"
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"manchester \"city\""
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"liverpool"
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"Everton"
argument_list|,
literal|"datedv"
argument_list|,
literal|"2017-06-16T07:00:00Z"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"2017-06-16T01:00:00Z"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"2017-06-16T02:00:00Z"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"2017-06-16T03:00:00Z"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"2017-06-16T04:00:00Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2.1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"7"
argument_list|,
literal|"longdv"
argument_list|,
literal|"323223232323"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2344.345"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"123.321"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"345.123"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"3444.222"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"23232.2"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"43434343434"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"343332"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2.1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"2"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"hello world"
argument_list|,
literal|"longdv"
argument_list|,
literal|"323223232323"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2344.344"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2.1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"3"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"chello world"
argument_list|,
literal|"longdv"
argument_list|,
literal|"323223232323"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2344.346"
argument_list|,
literal|"intdv_m"
argument_list|,
literal|"100"
argument_list|,
literal|"intdv_m"
argument_list|,
literal|"250"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"123.321"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"345.123"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"3444.222"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"23232.2"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"43434343434"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"343332"
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"manchester \"city\""
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"liverpool"
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"everton"
argument_list|,
literal|"int_is_t"
argument_list|,
literal|"1"
argument_list|,
literal|"int_is_t"
argument_list|,
literal|"1"
argument_list|,
literal|"int_is_t"
argument_list|,
literal|"1"
argument_list|,
literal|"int_is_t"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"floatdv"
argument_list|,
literal|"2.1"
argument_list|,
literal|"intdv"
argument_list|,
literal|"10000000"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"chello \"world\""
argument_list|,
literal|"longdv"
argument_list|,
literal|"323223232323"
argument_list|,
literal|"doubledv"
argument_list|,
literal|"2344.346"
argument_list|,
literal|"intdv_m"
argument_list|,
literal|"100"
argument_list|,
literal|"intdv_m"
argument_list|,
literal|"250"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"123.321"
argument_list|,
literal|"floatdv_m"
argument_list|,
literal|"345.123"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"3444.222"
argument_list|,
literal|"doubledv_m"
argument_list|,
literal|"23232.2"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"43434343434"
argument_list|,
literal|"longdv_m"
argument_list|,
literal|"343332"
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"manchester \"city\""
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"liverpool"
argument_list|,
literal|"stringdv_m"
argument_list|,
literal|"everton"
argument_list|,
literal|"datedv"
argument_list|,
literal|"2017-01-01T00:00:00Z"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"2017-01-01T01:00:00Z"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"2017-01-01T02:00:00Z"
argument_list|,
literal|"int_is_p"
argument_list|,
literal|"1"
argument_list|,
literal|"int_is_p"
argument_list|,
literal|"1"
argument_list|,
literal|"int_is_p"
argument_list|,
literal|"1"
argument_list|,
literal|"int_is_p"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSortingOutput
specifier|public
name|void
name|testSortingOutput
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Test single value DocValue output
name|String
name|s
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"floatdv,intdv,stringdv,longdv,doubledv"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"floatdv\":2.1,\"intdv\":1,\"stringdv\":\"hello world\",\"longdv\":323223232323,\"doubledv\":2344.345}]}}"
argument_list|)
expr_stmt|;
comment|//Test null value string:
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:7"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"floatdv,intdv,stringdv,longdv,doubledv"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"floatdv\":2.1,\"intdv\":7,\"longdv\":323223232323,\"doubledv\":2344.345}]}}"
argument_list|)
expr_stmt|;
comment|//Test multiValue docValues output
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"intdv_m\":[100,250],\"floatdv_m\":[123.321,345.123],\"doubledv_m\":[3444.222,23232.2],\"longdv_m\":[343332,43434343434],\"stringdv_m\":[\"Everton\",\"liverpool\",\"manchester \\\"city\\\"\"]}]}}"
argument_list|)
expr_stmt|;
comment|//Test multiValues docValues output with nulls
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:7"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv_m,floatdv_m,doubledv_m,longdv_m,stringdv_m"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"floatdv_m\":[123.321,345.123],\"doubledv_m\":[3444.222,23232.2],\"longdv_m\":[343332,43434343434]}]}}"
argument_list|)
expr_stmt|;
comment|//Test single sort param is working
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":2, \"docs\":[{\"intdv\":2},{\"intdv\":1}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":2, \"docs\":[{\"intdv\":1},{\"intdv\":2}]}}"
argument_list|)
expr_stmt|;
comment|// Test sort on String will null value. Null value should sort last on desc and first on asc.
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 7)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":2, \"docs\":[{\"intdv\":1},{\"intdv\":7}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 7)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"stringdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":2, \"docs\":[{\"intdv\":7},{\"intdv\":1}]}}"
argument_list|)
expr_stmt|;
comment|//Test multi-sort params
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc,intdv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":2, \"docs\":[{\"intdv\":2},{\"intdv\":1}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv desc,intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":2, \"docs\":[{\"intdv\":1},{\"intdv\":2}]}}"
argument_list|)
expr_stmt|;
comment|//Test three sort fields
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2 3)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc,stringdv asc,intdv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":3, \"docs\":[{\"intdv\":3},{\"intdv\":2},{\"intdv\":1}]}}"
argument_list|)
expr_stmt|;
comment|//Test three sort fields
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2 3)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc,stringdv desc,intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":3, \"docs\":[{\"intdv\":1},{\"intdv\":2},{\"intdv\":3}]}}"
argument_list|)
expr_stmt|;
comment|//Test four sort fields
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2 3)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"floatdv asc,floatdv desc,floatdv asc,intdv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":3, \"docs\":[{\"intdv\":3},{\"intdv\":2},{\"intdv\":1}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:(1 2 3)"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":3, \"docs\":[{\"intdv\":3},{\"intdv\":1},{\"intdv\":2}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"intdv:[2 TO 1000]"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":3, \"docs\":[{\"intdv\":3},{\"intdv\":7},{\"intdv\":2}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"stringdv:blah"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"intdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"doubledv desc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":0, \"docs\":[]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:8"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"stringdv"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"stringdv\":\"chello \\\"world\\\"\"}]}}"
argument_list|)
expr_stmt|;
block|}
DECL|method|assertJsonEquals
specifier|private
name|void
name|assertJsonEquals
parameter_list|(
name|String
name|actual
parameter_list|,
name|String
name|expected
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|Utils
operator|.
name|toJSONString
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|expected
argument_list|)
argument_list|)
argument_list|,
name|Utils
operator|.
name|toJSONString
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|actual
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExportRequiredParams
specifier|public
name|void
name|testExportRequiredParams
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Test whether missing required parameters returns expected errors.
comment|//String s =  h.query(req("q", "id:1", "qt", "/export", "fl", "floatdv,intdv,stringdv,longdv,doubledv", "sort", "intdv asc"));
name|String
name|s
decl_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have had a sort error"
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"No sort criteria"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Should have had fl error"
argument_list|,
name|s
operator|.
name|contains
argument_list|(
literal|"export field list (fl) must be specified"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"stringdv"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Interesting you don't even need to specify a "q" parameter.
block|}
annotation|@
name|Test
DECL|method|testDates
specifier|public
name|void
name|testDates
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"datedv"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv asc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"datedv\":\"2017-06-16T07:00:00Z\"}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"datedv_m"
argument_list|,
literal|"sort"
argument_list|,
literal|"datedv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"datedv_m\":[\"2017-06-16T01:00:00Z\",\"2017-06-16T02:00:00Z\",\"2017-06-16T03:00:00Z\",\"2017-06-16T04:00:00Z\"]}]}}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDuplicates
specifier|public
name|void
name|testDuplicates
parameter_list|()
throws|throws
name|Exception
block|{
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|ref
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ref
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|LeafReader
name|reader
init|=
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getSlowAtomicReader
argument_list|()
decl_stmt|;
comment|// MultiValued Trie fields use SortedSet
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"int_is_t"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|reader
operator|.
name|getSortedNumericDocValues
argument_list|(
literal|"int_is_t"
argument_list|)
argument_list|)
expr_stmt|;
comment|// MultiValued Point fields use SortedNumerics
name|assertNull
argument_list|(
name|reader
operator|.
name|getSortedSetDocValues
argument_list|(
literal|"int_is_p"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|reader
operator|.
name|getSortedNumericDocValues
argument_list|(
literal|"int_is_p"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|ref
operator|!=
literal|null
condition|)
name|ref
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|String
name|s
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:3"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"int_is_t"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
decl_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"int_is_t\":[1]}]}}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:8"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"int_is_p"
argument_list|,
literal|"sort"
argument_list|,
literal|"intdv asc"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJsonEquals
argument_list|(
name|s
argument_list|,
literal|"{\"responseHeader\": {\"status\": 0}, \"response\":{\"numFound\":1, \"docs\":[{\"int_is_p\":[1,1,1,1]}]}}"
argument_list|)
expr_stmt|;
block|}
comment|/**    * This test doesn't validate the correctness of results, it just compares the response of the same request    * when asking for Trie fields vs Point fields. Can be removed once Trie fields are no longer supported    */
annotation|@
name|Test
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"using new Date(time) to create random dates"
argument_list|)
DECL|method|testRandomNumerics
specifier|public
name|void
name|testRandomNumerics
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|delQ
argument_list|(
literal|"*:*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|trieFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|pointFields
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|mv
range|:
operator|new
name|String
index|[]
block|{
literal|"s"
block|,
literal|""
block|}
control|)
block|{
for|for
control|(
name|String
name|indexed
range|:
operator|new
name|String
index|[]
block|{
literal|"_ni"
block|,
literal|""
block|}
control|)
block|{
for|for
control|(
name|String
name|type
range|:
operator|new
name|String
index|[]
block|{
literal|"i"
block|,
literal|"l"
block|,
literal|"f"
block|,
literal|"d"
block|,
literal|"dt"
block|}
control|)
block|{
name|String
name|field
init|=
literal|"number_"
operator|+
name|type
operator|+
name|mv
operator|+
name|indexed
decl_stmt|;
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
operator|+
literal|"_t"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getNumberType
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|isPointField
argument_list|()
argument_list|)
expr_stmt|;
name|sf
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
operator|+
literal|"_p"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getNumberType
argument_list|()
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|isPointField
argument_list|()
argument_list|)
expr_stmt|;
name|trieFields
operator|.
name|add
argument_list|(
name|field
operator|+
literal|"_t"
argument_list|)
expr_stmt|;
name|pointFields
operator|.
name|add
argument_list|(
name|field
operator|+
literal|"_p"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|100
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//have some empty docs
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|//delete some docs
name|assertU
argument_list|(
name|delI
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|addInt
argument_list|(
name|doc
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addLong
argument_list|(
name|doc
argument_list|,
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addFloat
argument_list|(
name|doc
argument_list|,
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|3000
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addDouble
argument_list|(
name|doc
argument_list|,
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|3000
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addDate
argument_list|(
name|doc
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// MV need to be unique in order to be the same in Trie vs Points
name|Set
argument_list|<
name|Integer
argument_list|>
name|ints
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|longs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Float
argument_list|>
name|floats
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Double
argument_list|>
name|doubles
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Date
argument_list|>
name|dates
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
condition|;
name|j
operator|++
control|)
block|{
name|ints
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|longs
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|floats
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|3000
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|doubles
operator|.
name|add
argument_list|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|3000
operator|*
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|add
argument_list|(
operator|new
name|Date
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ints
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|val
parameter_list|)
lambda|->
name|addInt
argument_list|(
name|doc
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|longs
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|val
parameter_list|)
lambda|->
name|addLong
argument_list|(
name|doc
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|floats
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|val
parameter_list|)
lambda|->
name|addFloat
argument_list|(
name|doc
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|doubles
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|val
parameter_list|)
lambda|->
name|addDouble
argument_list|(
name|doc
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|dates
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
parameter_list|(
name|val
parameter_list|)
lambda|->
name|addDate
argument_list|(
name|doc
argument_list|,
name|val
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
operator|==
literal|0
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|doTestQuery
argument_list|(
literal|"id:1"
argument_list|,
name|trieFields
argument_list|,
name|pointFields
argument_list|)
expr_stmt|;
name|doTestQuery
argument_list|(
literal|"*:*"
argument_list|,
name|trieFields
argument_list|,
name|pointFields
argument_list|)
expr_stmt|;
name|doTestQuery
argument_list|(
literal|"id:[0 TO 2]"
argument_list|,
name|trieFields
argument_list|,
name|pointFields
argument_list|)
expr_stmt|;
comment|// "id" field is really a string, this is not a numeric range query
name|doTestQuery
argument_list|(
literal|"id:[0 TO 9]"
argument_list|,
name|trieFields
argument_list|,
name|pointFields
argument_list|)
expr_stmt|;
name|doTestQuery
argument_list|(
literal|"id:DOES_NOT_EXIST"
argument_list|,
name|trieFields
argument_list|,
name|pointFields
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestQuery
specifier|private
name|void
name|doTestQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|trieFields
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pointFields
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|trieFieldsFl
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|trieFields
argument_list|)
decl_stmt|;
name|String
name|pointFieldsFl
init|=
name|String
operator|.
name|join
argument_list|(
literal|","
argument_list|,
name|pointFields
argument_list|)
decl_stmt|;
name|String
name|sort
init|=
name|pickRandom
argument_list|(
operator|(
name|String
operator|)
name|pickRandom
argument_list|(
name|trieFields
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
operator|(
name|String
operator|)
name|pickRandom
argument_list|(
name|pointFields
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"s_"
argument_list|,
literal|"_"
argument_list|)
operator|+
name|pickRandom
argument_list|(
literal|" asc"
argument_list|,
literal|" desc"
argument_list|)
decl_stmt|;
name|String
name|resultPoints
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|query
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
name|pointFieldsFl
argument_list|,
literal|"sort"
argument_list|,
name|sort
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|resultTries
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|query
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
name|trieFieldsFl
argument_list|,
literal|"sort"
argument_list|,
name|sort
argument_list|)
argument_list|)
decl_stmt|;
name|assertJsonEquals
argument_list|(
name|resultPoints
operator|.
name|replaceAll
argument_list|(
literal|"_p"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|resultTries
operator|.
name|replaceAll
argument_list|(
literal|"_t"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addFloat
specifier|private
name|void
name|addFloat
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|float
name|value
parameter_list|,
name|boolean
name|mv
parameter_list|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
literal|"f"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|mv
argument_list|)
expr_stmt|;
block|}
DECL|method|addDouble
specifier|private
name|void
name|addDouble
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|double
name|value
parameter_list|,
name|boolean
name|mv
parameter_list|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
literal|"d"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|mv
argument_list|)
expr_stmt|;
block|}
DECL|method|addLong
specifier|private
name|void
name|addLong
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|long
name|value
parameter_list|,
name|boolean
name|mv
parameter_list|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
literal|"l"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|mv
argument_list|)
expr_stmt|;
block|}
DECL|method|addInt
specifier|private
name|void
name|addInt
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|int
name|value
parameter_list|,
name|boolean
name|mv
parameter_list|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
literal|"i"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|mv
argument_list|)
expr_stmt|;
block|}
DECL|method|addDate
specifier|private
name|void
name|addDate
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|Date
name|value
parameter_list|,
name|boolean
name|mv
parameter_list|)
block|{
name|addField
argument_list|(
name|doc
argument_list|,
literal|"dt"
argument_list|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|value
argument_list|)
argument_list|,
name|mv
argument_list|)
expr_stmt|;
block|}
DECL|method|addField
specifier|private
name|void
name|addField
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|mv
parameter_list|)
block|{
name|doc
operator|.
name|addField
argument_list|(
literal|"number_"
operator|+
name|type
operator|+
operator|(
name|mv
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|"_t"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"number_"
operator|+
name|type
operator|+
operator|(
name|mv
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|"_p"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"number_"
operator|+
name|type
operator|+
operator|(
name|mv
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|"_ni_t"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"number_"
operator|+
name|type
operator|+
operator|(
name|mv
condition|?
literal|"s"
else|:
literal|""
operator|)
operator|+
literal|"_ni_p"
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

