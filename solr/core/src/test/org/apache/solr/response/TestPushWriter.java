begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|IteratorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|MapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|PushWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|JavaBinCodec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_class
DECL|class|TestPushWriter
specifier|public
class|class
name|TestPushWriter
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|testStandardResponse
specifier|public
name|void
name|testStandardResponse
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|OutputStreamWriter
name|osw
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|baos
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|PushWriter
name|pw
init|=
operator|new
name|JSONWriter
argument_list|(
name|osw
argument_list|,
operator|new
name|LocalSolrQueryRequest
argument_list|(
literal|null
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
argument_list|)
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|)
decl_stmt|;
name|writeData
argument_list|(
name|pw
argument_list|)
expr_stmt|;
name|osw
operator|.
name|flush
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|checkValues
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|writeData
argument_list|(
operator|new
name|JavaBinCodec
argument_list|(
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|=
operator|(
name|Map
operator|)
operator|new
name|JavaBinCodec
argument_list|()
operator|.
name|unmarshal
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|checkValues
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
DECL|method|checkValues
specifier|protected
name|void
name|checkValues
parameter_list|(
name|Map
name|m
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"responseHeader/status"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"response/numFound"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"response/docs[0]/id"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"response/docs[1]/id"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"response/docs[2]/id"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|writeData
specifier|protected
name|void
name|writeData
parameter_list|(
name|PushWriter
name|pw
parameter_list|)
throws|throws
name|IOException
block|{
name|pw
operator|.
name|writeMap
argument_list|(
name|m
lambda|->
block|{
name|m
operator|.
name|put
argument_list|(
literal|"responseHeader"
argument_list|,
name|singletonMap
argument_list|(
literal|"status"
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|put
argument_list|(
literal|"response"
argument_list|,
operator|(
name|MapWriter
operator|)
name|m1
lambda|->
block|{
name|m1
operator|.
name|put
argument_list|(
literal|"numFound"
argument_list|,
literal|10
argument_list|)
operator|.
name|put
argument_list|(
literal|"docs"
argument_list|,
operator|(
name|IteratorWriter
operator|)
name|w
lambda|->
block|{
name|w
operator|.
name|add
argument_list|(
operator|(
name|MapWriter
operator|)
name|m3
lambda|->
name|m3
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|singletonMap
argument_list|(
literal|"id"
argument_list|,
literal|2
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|singletonMap
argument_list|(
literal|"id"
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

