begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.servlet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|servlet
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ReadListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|WriteListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|server
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|HttpSolrCallGetCoreTest
specifier|public
class|class
name|HttpSolrCallGetCoreTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|NUM_SHARD
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARD
init|=
literal|3
decl_stmt|;
DECL|field|REPLICA_FACTOR
specifier|private
specifier|static
specifier|final
name|int
name|REPLICA_FACTOR
init|=
literal|2
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|1
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"config"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"config"
argument_list|,
name|NUM_SHARD
argument_list|,
name|REPLICA_FACTOR
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
name|NUM_SHARD
operator|*
name|REPLICA_FACTOR
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|COLLECTION
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|assertCoreChosen
argument_list|(
name|NUM_SHARD
argument_list|,
operator|new
name|TestRequest
argument_list|(
literal|"/collection1/update"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCoreChosen
argument_list|(
name|NUM_SHARD
argument_list|,
operator|new
name|TestRequest
argument_list|(
literal|"/collection1/update/json"
argument_list|)
argument_list|)
expr_stmt|;
name|assertCoreChosen
argument_list|(
name|NUM_SHARD
operator|*
name|REPLICA_FACTOR
argument_list|,
operator|new
name|TestRequest
argument_list|(
literal|"/collection1/select"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertCoreChosen
specifier|private
name|void
name|assertCoreChosen
parameter_list|(
name|int
name|numCores
parameter_list|,
name|TestRequest
name|testRequest
parameter_list|)
block|{
name|JettySolrRunner
name|jettySolrRunner
init|=
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|coreNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|SolrDispatchFilter
name|dispatchFilter
init|=
name|jettySolrRunner
operator|.
name|getSolrDispatchFilter
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_SHARD
operator|*
name|REPLICA_FACTOR
operator|*
literal|20
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|coreNames
operator|.
name|size
argument_list|()
operator|==
name|numCores
condition|)
return|return;
name|HttpSolrCall
name|httpSolrCall
init|=
operator|new
name|HttpSolrCall
argument_list|(
name|dispatchFilter
argument_list|,
name|dispatchFilter
operator|.
name|getCores
argument_list|()
argument_list|,
name|testRequest
argument_list|,
operator|new
name|TestResponse
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|httpSolrCall
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{       }
finally|finally
block|{
name|coreNames
operator|.
name|add
argument_list|(
name|httpSolrCall
operator|.
name|core
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|httpSolrCall
operator|.
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|numCores
argument_list|,
name|coreNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|class|TestResponse
specifier|private
specifier|static
class|class
name|TestResponse
extends|extends
name|Response
block|{
DECL|method|TestResponse
specifier|public
name|TestResponse
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getOutputStream
specifier|public
name|ServletOutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ServletOutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setWriteListener
parameter_list|(
name|WriteListener
name|writeListener
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{          }
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|isCommitted
specifier|public
name|boolean
name|isCommitted
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
DECL|class|TestRequest
specifier|private
specifier|static
class|class
name|TestRequest
extends|extends
name|Request
block|{
DECL|field|path
specifier|private
name|String
name|path
decl_stmt|;
DECL|method|TestRequest
specifier|public
name|TestRequest
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getQueryString
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
literal|"wt=json&version=2"
return|;
block|}
annotation|@
name|Override
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"application/json"
return|;
block|}
annotation|@
name|Override
DECL|method|getServletPath
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getRequestURI
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
DECL|method|getInputStream
specifier|public
name|ServletInputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ServletInputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadListener
parameter_list|(
name|ReadListener
name|readListener
parameter_list|)
block|{          }
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

