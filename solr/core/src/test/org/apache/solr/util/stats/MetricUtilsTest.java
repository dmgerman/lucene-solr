begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util.stats
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Gauge
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Histogram
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricFilter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Snapshot
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|AggregateMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|MetricUtilsTest
specifier|public
class|class
name|MetricUtilsTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|Test
DECL|method|testSolrTimerGetSnapshot
specifier|public
name|void
name|testSolrTimerGetSnapshot
parameter_list|()
block|{
comment|// create a timer with up to 100 data points
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iterations
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iterations
condition|;
operator|++
name|i
control|)
block|{
name|timer
operator|.
name|update
argument_list|(
name|Math
operator|.
name|abs
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|+
literal|1
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
expr_stmt|;
block|}
comment|// obtain timer metrics
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|MetricUtils
operator|.
name|convertTimer
argument_list|(
literal|""
argument_list|,
name|timer
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
name|map
operator|.
name|putAll
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|NamedList
name|lst
init|=
operator|new
name|NamedList
argument_list|(
name|map
argument_list|)
decl_stmt|;
comment|// check that expected metrics were obtained
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|lst
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Snapshot
name|snapshot
init|=
name|timer
operator|.
name|getSnapshot
argument_list|()
decl_stmt|;
comment|// cannot test avgRequestsPerMinute directly because mean rate changes as time increases!
comment|// assertEquals(lst.get("avgRequestsPerSecond"), timer.getMeanRate());
name|assertEquals
argument_list|(
name|timer
operator|.
name|getFiveMinuteRate
argument_list|()
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"5minRate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|timer
operator|.
name|getFifteenMinuteRate
argument_list|()
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"15minRate"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MetricUtils
operator|.
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|getMean
argument_list|()
argument_list|)
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"mean_ms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MetricUtils
operator|.
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|getMedian
argument_list|()
argument_list|)
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"median_ms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MetricUtils
operator|.
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get75thPercentile
argument_list|()
argument_list|)
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"p75_ms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MetricUtils
operator|.
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get95thPercentile
argument_list|()
argument_list|)
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"p95_ms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MetricUtils
operator|.
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get99thPercentile
argument_list|()
argument_list|)
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"p99_ms"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|MetricUtils
operator|.
name|nsToMs
argument_list|(
name|snapshot
operator|.
name|get999thPercentile
argument_list|()
argument_list|)
argument_list|,
name|lst
operator|.
name|get
argument_list|(
literal|"p999_ms"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMetrics
specifier|public
name|void
name|testMetrics
parameter_list|()
throws|throws
name|Exception
block|{
name|MetricRegistry
name|registry
init|=
operator|new
name|MetricRegistry
argument_list|()
decl_stmt|;
name|Counter
name|counter
init|=
name|registry
operator|.
name|counter
argument_list|(
literal|"counter"
argument_list|)
decl_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
name|Timer
name|timer
init|=
name|registry
operator|.
name|timer
argument_list|(
literal|"timer"
argument_list|)
decl_stmt|;
name|Timer
operator|.
name|Context
name|ctx
init|=
name|timer
operator|.
name|time
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|stop
argument_list|()
expr_stmt|;
name|Meter
name|meter
init|=
name|registry
operator|.
name|meter
argument_list|(
literal|"meter"
argument_list|)
decl_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
name|Histogram
name|histogram
init|=
name|registry
operator|.
name|histogram
argument_list|(
literal|"histogram"
argument_list|)
decl_stmt|;
name|histogram
operator|.
name|update
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|AggregateMetric
name|am
init|=
operator|new
name|AggregateMetric
argument_list|()
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
literal|"aggregate"
argument_list|,
name|am
argument_list|)
expr_stmt|;
name|am
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|am
operator|.
name|set
argument_list|(
literal|"bar"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|am
operator|.
name|set
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Gauge
argument_list|<
name|String
argument_list|>
name|gauge
init|=
parameter_list|()
lambda|->
literal|"foobar"
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
literal|"gauge"
argument_list|,
name|gauge
argument_list|)
expr_stmt|;
name|Gauge
argument_list|<
name|Long
argument_list|>
name|error
init|=
parameter_list|()
lambda|->
block|{
throw|throw
operator|new
name|InternalError
argument_list|(
literal|"Memory Pool not found error"
argument_list|)
throw|;
block|}
decl_stmt|;
name|registry
operator|.
name|register
argument_list|(
literal|"memory.expected.error"
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|MetricUtils
operator|.
name|toMaps
argument_list|(
name|registry
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|MetricFilter
operator|.
name|ALL
argument_list|)
argument_list|,
name|MetricFilter
operator|.
name|ALL
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|o
parameter_list|)
lambda|->
block|{
name|Map
name|v
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"counter"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"gauge"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"timer"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|v
operator|.
name|get
argument_list|(
literal|"min_ms"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|100
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"meter"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"histogram"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"aggregate"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|v
operator|.
name|get
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|update
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"updateCount"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"updateCount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"memory.expected.error"
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
comment|// test compact format
name|MetricUtils
operator|.
name|toMaps
argument_list|(
name|registry
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|MetricFilter
operator|.
name|ALL
argument_list|)
argument_list|,
name|MetricFilter
operator|.
name|ALL
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
parameter_list|(
name|k
parameter_list|,
name|o
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"counter"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"gauge"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"timer"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|v
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|v
operator|.
name|get
argument_list|(
literal|"min_ms"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
operator|>
literal|100
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"meter"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|v
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"histogram"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|v
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"aggregate"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|o
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|v
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|v
operator|.
name|get
argument_list|(
literal|"values"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|values
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|values
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|update
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"updateCount"
argument_list|)
argument_list|)
expr_stmt|;
name|update
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|values
operator|.
name|get
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|update
operator|.
name|get
argument_list|(
literal|"updateCount"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|k
operator|.
name|startsWith
argument_list|(
literal|"memory.expected.error"
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
name|v
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|v
operator|.
name|get
argument_list|(
literal|"count"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

