begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core.snapshots
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|SimpleFSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|CreateSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|DeleteSnapshot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|ListSnapshots
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotMetaDataManager
operator|.
name|SnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|BackupRestoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|BASE_URL_PROP
import|;
end_import

begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
comment|// Currently unknown why SSL does not work with this test
annotation|@
name|Slow
DECL|class|TestSolrCoreSnapshots
specifier|public
class|class
name|TestSolrCoreSnapshots
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|docsSeed
specifier|private
specifier|static
name|long
name|docsSeed
decl_stmt|;
comment|// see indexDocs()
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|useFactory
argument_list|(
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
name|configureCluster
argument_list|(
literal|1
argument_list|)
comment|// nodes
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|docsSeed
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownClass
specifier|public
specifier|static
name|void
name|teardownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.build.data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.cache.data"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBackupRestore
specifier|public
name|void
name|testBackupRestore
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|solrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
literal|"SolrCoreSnapshots"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|String
name|location
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|int
name|nDocs
init|=
name|BackupRestoreUtils
operator|.
name|indexDocs
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|,
name|docsSeed
argument_list|)
decl_stmt|;
name|DocCollection
name|collectionState
init|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Slice
name|shard
init|=
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|replica
init|=
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|replicaBaseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|backupName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|commitName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|duplicateName
init|=
name|commitName
operator|.
name|concat
argument_list|(
literal|"_duplicate"
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrClient
name|adminClient
init|=
name|getHttpSolrClient
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
init|;
name|SolrClient
name|masterClient
operator|=
name|getHttpSolrClient
argument_list|(
name|replica
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|SnapshotMetaData
name|metaData
init|=
name|createSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|commitName
argument_list|)
decl_stmt|;
comment|// Create another snapshot referring to the same index commit to verify the
comment|// reference counting implementation during snapshot deletion.
name|SnapshotMetaData
name|duplicateCommit
init|=
name|createSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|duplicateName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|,
name|duplicateCommit
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metaData
operator|.
name|getGenerationNumber
argument_list|()
argument_list|,
name|duplicateCommit
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete all documents
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|verifyDocs
argument_list|(
literal|0
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
comment|// Verify that the index directory contains at least 2 index commits - one referred by the snapshots
comment|// and the other containing document deletions.
block|{
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|listCommits
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|2
operator|<=
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Backup the earlier created snapshot.
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"commitName"
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|runCoreAdminCommand
argument_list|(
name|replicaBaseUrl
argument_list|,
name|coreName
argument_list|,
name|CoreAdminAction
operator|.
name|BACKUPCORE
operator|.
name|toString
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|// Restore the backup
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"snapshot."
operator|+
name|backupName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|runCoreAdminCommand
argument_list|(
name|replicaBaseUrl
argument_list|,
name|coreName
argument_list|,
name|CoreAdminAction
operator|.
name|RESTORECORE
operator|.
name|toString
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|verifyDocs
argument_list|(
name|nDocs
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
comment|// Verify that the old index directory (before restore) contains only those index commits referred by snapshots.
block|{
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|listCommits
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|commits
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|metaData
operator|.
name|getGenerationNumber
argument_list|()
argument_list|,
name|commits
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getGeneration
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Delete first snapshot
name|deleteSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|commitName
argument_list|)
expr_stmt|;
comment|// Verify that corresponding index files have NOT been deleted (due to reference counting).
name|assertFalse
argument_list|(
name|listCommits
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete second snapshot
name|deleteSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|duplicateCommit
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that corresponding index files have been deleted.
name|assertTrue
argument_list|(
name|listCommits
argument_list|(
name|duplicateCommit
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHandlingSharedIndexFiles
specifier|public
name|void
name|testHandlingSharedIndexFiles
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|solrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
literal|"SolrCoreSnapshots_IndexFileSharing"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|int
name|nDocs
init|=
name|BackupRestoreUtils
operator|.
name|indexDocs
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|,
name|docsSeed
argument_list|)
decl_stmt|;
name|DocCollection
name|collectionState
init|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Slice
name|shard
init|=
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|replica
init|=
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|replicaBaseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|backupName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|String
name|location
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
try|try
init|(
name|SolrClient
name|adminClient
init|=
name|getHttpSolrClient
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
init|;
name|SolrClient
name|masterClient
operator|=
name|getHttpSolrClient
argument_list|(
name|replica
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|int
name|numTests
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|numTests
argument_list|)
decl_stmt|;
comment|// Create multiple commits and create a snapshot per commit.
comment|// This should result in Lucene reusing some of the segments for later index commits.
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<
name|numTests
condition|;
name|attempt
operator|++
control|)
block|{
if|if
condition|(
name|nDocs
operator|>
literal|0
condition|)
block|{
comment|//Delete a few docs
name|int
name|numDeletes
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|nDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeletes
condition|;
name|i
operator|++
control|)
block|{
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"id:"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add a few more
name|int
name|moreAdds
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moreAdds
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
name|nDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"name = "
operator|+
operator|(
name|i
operator|+
name|nDocs
operator|)
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// Create a snapshot
name|snapshots
operator|.
name|add
argument_list|(
name|createSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
literal|"snapshot_"
operator|+
name|attempt
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Backup the earlier created snapshot.
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
name|backupName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"commitName"
argument_list|,
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|runCoreAdminCommand
argument_list|(
name|replicaBaseUrl
argument_list|,
name|coreName
argument_list|,
name|CoreAdminAction
operator|.
name|BACKUPCORE
operator|.
name|toString
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|// Restore the backup. The purpose of the restore operation is to change the *current* index directory.
comment|// This is required since we delegate the file deletion to underlying IndexDeletionPolicy in case of
comment|// *current* index directory. Hence for the purpose of this test, we want to ensure that the created
comment|// snapshots are NOT in the *current* index directory.
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"snapshot."
operator|+
name|backupName
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|runCoreAdminCommand
argument_list|(
name|replicaBaseUrl
argument_list|,
name|coreName
argument_list|,
name|CoreAdminAction
operator|.
name|RESTORECORE
operator|.
name|toString
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|{
name|SnapshotMetaData
name|snapshotMetaData
init|=
name|snapshots
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|listCommits
argument_list|(
name|snapshotMetaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Check if number of index commits are> 0 to ensure index file sharing.
name|assertTrue
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|refCounts
init|=
name|SolrSnapshotManager
operator|.
name|buildRefCounts
argument_list|(
name|snapshots
argument_list|,
name|commits
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|IndexCommit
argument_list|>
name|ic
init|=
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|entry
lambda|->
name|entry
operator|.
name|getGeneration
argument_list|()
operator|==
name|snapshotMetaData
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|ic
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|nonSharedFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|sharedFiles
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|fileName
range|:
name|ic
operator|.
name|get
argument_list|()
operator|.
name|getFileNames
argument_list|()
control|)
block|{
if|if
condition|(
name|refCounts
operator|.
name|getOrDefault
argument_list|(
name|fileName
argument_list|,
literal|0
argument_list|)
operator|>
literal|1
condition|)
block|{
name|sharedFiles
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nonSharedFiles
operator|.
name|add
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Delete snapshot
name|deleteSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|snapshotMetaData
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that the shared files are not deleted.
for|for
control|(
name|String
name|fileName
range|:
name|sharedFiles
control|)
block|{
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|snapshotMetaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|path
operator|+
literal|" should exist."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Verify that the non-shared files are deleted.
for|for
control|(
name|String
name|fileName
range|:
name|nonSharedFiles
control|)
block|{
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|snapshotMetaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|path
operator|+
literal|" should not exist."
argument_list|,
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testIndexOptimization
specifier|public
name|void
name|testIndexOptimization
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|solrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
literal|"SolrCoreSnapshots_IndexOptimization"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|int
name|nDocs
init|=
name|BackupRestoreUtils
operator|.
name|indexDocs
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|,
name|docsSeed
argument_list|)
decl_stmt|;
name|DocCollection
name|collectionState
init|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Slice
name|shard
init|=
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|replica
init|=
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|String
name|commitName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrClient
name|adminClient
init|=
name|getHttpSolrClient
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
init|;
name|SolrClient
name|masterClient
operator|=
name|getHttpSolrClient
argument_list|(
name|replica
operator|.
name|getCoreUrl
argument_list|()
argument_list|)
init|)
block|{
name|SnapshotMetaData
name|metaData
init|=
name|createSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|commitName
argument_list|)
decl_stmt|;
name|int
name|numTests
init|=
name|nDocs
operator|>
literal|0
condition|?
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
else|:
literal|1
decl_stmt|;
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
name|attempt
operator|<
name|numTests
condition|;
name|attempt
operator|++
control|)
block|{
comment|//Modify existing index before we call optimize.
if|if
condition|(
name|nDocs
operator|>
literal|0
condition|)
block|{
comment|//Delete a few docs
name|int
name|numDeletes
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|nDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDeletes
condition|;
name|i
operator|++
control|)
block|{
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
literal|"id:"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|//Add a few more
name|int
name|moreAdds
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moreAdds
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
name|nDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"name = "
operator|+
operator|(
name|i
operator|+
name|nDocs
operator|)
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Before invoking optimize command, verify that the index directory contains multiple commits (including the one we snapshotted earlier).
block|{
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|listCommits
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify that multiple index commits are stored in this directory.
name|assertTrue
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Verify that the snapshot commit is present in this directory.
name|assertTrue
argument_list|(
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getGeneration
argument_list|()
operator|==
name|metaData
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Optimize the index.
name|masterClient
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// After invoking optimize command, verify that the index directory contains multiple commits (including the one we snapshotted earlier).
block|{
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|listCommits
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
comment|// Verify that multiple index commits are stored in this directory.
name|assertTrue
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that the snapshot commit is present in this directory.
name|assertTrue
argument_list|(
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getGeneration
argument_list|()
operator|==
name|metaData
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Delete the snapshot
name|deleteSnapshot
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|,
name|metaData
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add few documents. Without this the optimize command below does not take effect.
block|{
name|int
name|moreAdds
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|moreAdds
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
operator|+
name|nDocs
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"name = "
operator|+
operator|(
name|i
operator|+
name|nDocs
operator|)
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|masterClient
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
comment|// Optimize the index.
name|masterClient
operator|.
name|optimize
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Verify that the index directory contains only 1 index commit (which is not the same as the snapshotted commit).
name|Collection
argument_list|<
name|IndexCommit
argument_list|>
name|commits
init|=
name|listCommits
argument_list|(
name|metaData
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|commits
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|commits
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|x
operator|.
name|getGeneration
argument_list|()
operator|==
name|metaData
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createSnapshot
specifier|private
name|SnapshotMetaData
name|createSnapshot
parameter_list|(
name|SolrClient
name|adminClient
parameter_list|,
name|String
name|coreName
parameter_list|,
name|String
name|commitName
parameter_list|)
throws|throws
name|Exception
block|{
name|CreateSnapshot
name|req
init|=
operator|new
name|CreateSnapshot
argument_list|(
name|commitName
argument_list|)
decl_stmt|;
name|req
operator|.
name|setCoreName
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|adminClient
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
init|=
name|listSnapshots
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SnapshotMetaData
argument_list|>
name|metaData
init|=
name|snapshots
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|commitName
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|metaData
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|metaData
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|deleteSnapshot
specifier|private
name|void
name|deleteSnapshot
parameter_list|(
name|SolrClient
name|adminClient
parameter_list|,
name|String
name|coreName
parameter_list|,
name|String
name|commitName
parameter_list|)
throws|throws
name|Exception
block|{
name|DeleteSnapshot
name|req
init|=
operator|new
name|DeleteSnapshot
argument_list|(
name|commitName
argument_list|)
decl_stmt|;
name|req
operator|.
name|setCoreName
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|adminClient
operator|.
name|request
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
init|=
name|listSnapshots
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|snapshots
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|commitName
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|listSnapshots
specifier|private
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|listSnapshots
parameter_list|(
name|SolrClient
name|adminClient
parameter_list|,
name|String
name|coreName
parameter_list|)
throws|throws
name|Exception
block|{
name|ListSnapshots
name|req
init|=
operator|new
name|ListSnapshots
argument_list|()
decl_stmt|;
name|req
operator|.
name|setCoreName
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|NamedList
name|resp
init|=
name|adminClient
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|get
argument_list|(
literal|"snapshots"
argument_list|)
operator|instanceof
name|NamedList
argument_list|)
expr_stmt|;
name|NamedList
name|apiResult
init|=
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"snapshots"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotMetaData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|apiResult
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|apiResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|commitName
init|=
name|apiResult
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|indexDirPath
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|apiResult
operator|.
name|get
argument_list|(
name|commitName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"indexDirPath"
argument_list|)
decl_stmt|;
name|long
name|genNumber
init|=
name|Long
operator|.
name|valueOf
argument_list|(
call|(
name|String
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|apiResult
operator|.
name|get
argument_list|(
name|commitName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"generation"
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|SnapshotMetaData
argument_list|(
name|commitName
argument_list|,
name|indexDirPath
argument_list|,
name|genNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|listCommits
specifier|private
name|List
argument_list|<
name|IndexCommit
argument_list|>
name|listCommits
parameter_list|(
name|String
name|directory
parameter_list|)
throws|throws
name|Exception
block|{
name|SimpleFSDirectory
name|dir
init|=
operator|new
name|SimpleFSDirectory
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|directory
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|DirectoryReader
operator|.
name|listCommits
argument_list|(
name|dir
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IndexNotFoundException
name|ex
parameter_list|)
block|{
comment|// This can happen when the delete snapshot functionality cleans up the index files (when the directory
comment|// storing these files is not the *current* index directory).
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

