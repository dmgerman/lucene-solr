begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|MetricRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|MetricsMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|SolrMetricProducer
import|;
end_import

begin_class
DECL|class|MockInfoBean
class|class
name|MockInfoBean
implements|implements
name|SolrInfoBean
implements|,
name|SolrMetricProducer
block|{
DECL|field|metricNames
name|Set
argument_list|<
name|String
argument_list|>
name|metricNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|registry
name|MetricRegistry
name|registry
decl_stmt|;
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
DECL|method|getCategory
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|OTHER
return|;
block|}
annotation|@
name|Override
DECL|method|getDescription
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"mock"
return|;
block|}
annotation|@
name|Override
DECL|method|getMetricNames
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getMetricNames
parameter_list|()
block|{
return|return
name|metricNames
return|;
block|}
annotation|@
name|Override
DECL|method|getMetricRegistry
specifier|public
name|MetricRegistry
name|getMetricRegistry
parameter_list|()
block|{
return|return
name|registry
return|;
block|}
annotation|@
name|Override
DECL|method|initializeMetrics
specifier|public
name|void
name|initializeMetrics
parameter_list|(
name|SolrMetricManager
name|manager
parameter_list|,
name|String
name|registryName
parameter_list|,
name|String
name|scope
parameter_list|)
block|{
name|registry
operator|=
name|manager
operator|.
name|registry
argument_list|(
name|registryName
argument_list|)
expr_stmt|;
name|MetricsMap
name|metricsMap
init|=
operator|new
name|MetricsMap
argument_list|(
parameter_list|(
name|detailed
parameter_list|,
name|map
parameter_list|)
lambda|->
block|{
name|map
operator|.
name|put
argument_list|(
literal|"Integer"
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Double"
argument_list|,
literal|567.534
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Long"
argument_list|,
literal|32352463l
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Short"
argument_list|,
operator|(
name|short
operator|)
literal|32768
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Byte"
argument_list|,
operator|(
name|byte
operator|)
literal|254
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Float"
argument_list|,
literal|3.456f
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"String"
argument_list|,
literal|"testing"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"Object"
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|manager
operator|.
name|registerGauge
argument_list|(
name|this
argument_list|,
name|registryName
argument_list|,
name|metricsMap
argument_list|,
literal|true
argument_list|,
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|,
name|getCategory
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|scope
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

