begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|rules
operator|.
name|SystemPropertiesRestoreRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|BackupRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|BackupRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|backup
operator|.
name|repository
operator|.
name|LocalFileSystemRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|RuleChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TestRule
import|;
end_import

begin_class
DECL|class|TestBackupRepositoryFactory
specifier|public
class|class
name|TestBackupRepositoryFactory
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|Rule
DECL|field|solrTestRules
specifier|public
name|TestRule
name|solrTestRules
init|=
name|RuleChain
operator|.
name|outerRule
argument_list|(
operator|new
name|SystemPropertiesRestoreRule
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
comment|// tmp dir, cleaned up automatically.
DECL|field|solrHome
specifier|private
specifier|static
name|File
name|solrHome
init|=
literal|null
decl_stmt|;
DECL|field|loader
specifier|private
specifier|static
name|SolrResourceLoader
name|loader
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupLoader
specifier|public
specifier|static
name|void
name|setupLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
name|loader
operator|=
operator|new
name|SolrResourceLoader
argument_list|(
name|solrHome
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanupLoader
specifier|public
specifier|static
name|void
name|cleanupLoader
parameter_list|()
throws|throws
name|Exception
block|{
name|solrHome
operator|=
literal|null
expr_stmt|;
name|loader
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleDefaultRepositories
specifier|public
name|void
name|testMultipleDefaultRepositories
parameter_list|()
block|{
name|PluginInfo
index|[]
name|plugins
init|=
operator|new
name|PluginInfo
index|[
literal|2
index|]
decl_stmt|;
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"repo1"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|,
literal|"a.b.C"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|plugins
index|[
literal|0
index|]
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"repository"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"repo2"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|,
literal|"p.q.R"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|plugins
index|[
literal|1
index|]
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"repository"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"More than one backup repository is configured as default"
argument_list|)
expr_stmt|;
operator|new
name|BackupRepositoryFactory
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleRepositoriesWithSameName
specifier|public
name|void
name|testMultipleRepositoriesWithSameName
parameter_list|()
block|{
name|PluginInfo
index|[]
name|plugins
init|=
operator|new
name|PluginInfo
index|[
literal|2
index|]
decl_stmt|;
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"repo1"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|,
literal|"a.b.C"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|plugins
index|[
literal|0
index|]
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"repository"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"repo1"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|,
literal|"p.q.R"
argument_list|)
expr_stmt|;
name|plugins
index|[
literal|1
index|]
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"repository"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
name|expectedException
operator|.
name|expect
argument_list|(
name|SolrException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Duplicate backup repository with name repo1"
argument_list|)
expr_stmt|;
operator|new
name|BackupRepositoryFactory
argument_list|(
name|plugins
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonExistantBackupRepository
specifier|public
name|void
name|testNonExistantBackupRepository
parameter_list|()
block|{
name|PluginInfo
index|[]
name|plugins
init|=
operator|new
name|PluginInfo
index|[
literal|0
index|]
decl_stmt|;
name|BackupRepositoryFactory
name|f
init|=
operator|new
name|BackupRepositoryFactory
argument_list|(
name|plugins
argument_list|)
decl_stmt|;
name|expectedException
operator|.
name|expect
argument_list|(
name|NullPointerException
operator|.
name|class
argument_list|)
expr_stmt|;
name|expectedException
operator|.
name|expectMessage
argument_list|(
literal|"Could not find a backup repository with name repo1"
argument_list|)
expr_stmt|;
name|f
operator|.
name|newInstance
argument_list|(
name|loader
argument_list|,
literal|"repo1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRepositoryConfig
specifier|public
name|void
name|testRepositoryConfig
parameter_list|()
block|{
name|PluginInfo
index|[]
name|plugins
init|=
operator|new
name|PluginInfo
index|[
literal|1
index|]
decl_stmt|;
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|CoreAdminParams
operator|.
name|NAME
argument_list|,
literal|"repo1"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|FieldType
operator|.
name|CLASS_NAME
argument_list|,
name|LocalFileSystemRepository
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"default"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|attrs
operator|.
name|put
argument_list|(
literal|"location"
argument_list|,
literal|"/tmp"
argument_list|)
expr_stmt|;
name|plugins
index|[
literal|0
index|]
operator|=
operator|new
name|PluginInfo
argument_list|(
literal|"repository"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
name|BackupRepositoryFactory
name|f
init|=
operator|new
name|BackupRepositoryFactory
argument_list|(
name|plugins
argument_list|)
decl_stmt|;
block|{
name|BackupRepository
name|repo
init|=
name|f
operator|.
name|newInstance
argument_list|(
name|loader
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|instanceof
name|LocalFileSystemRepository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/tmp"
argument_list|,
name|repo
operator|.
name|getConfigProperty
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|BackupRepository
name|repo
init|=
name|f
operator|.
name|newInstance
argument_list|(
name|loader
argument_list|,
literal|"repo1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|repo
operator|instanceof
name|LocalFileSystemRepository
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/tmp"
argument_list|,
name|repo
operator|.
name|getConfigProperty
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

