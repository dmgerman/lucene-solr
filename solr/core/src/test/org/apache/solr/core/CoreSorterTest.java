begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|CloudDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|ZkController
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreSorter
operator|.
name|CountsForEachShard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|MockCoreContainer
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreSorter
operator|.
name|getShardName
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expectLastCall
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|reset
import|;
end_import

begin_class
DECL|class|CoreSorterTest
specifier|public
class|class
name|CoreSorterTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|nodes
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|nodes
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|liveNodes
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|testComparator
specifier|public
name|void
name|testComparator
parameter_list|()
block|{
name|List
argument_list|<
name|CountsForEachShard
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|//                           DN LIV  MY
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CountsForEachShard
argument_list|>
name|expected
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|2
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|2
argument_list|,
literal|4
argument_list|,
literal|2
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|CountsForEachShard
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|CountsForEachShard
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|copy
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|copy
argument_list|,
name|CoreSorter
operator|.
name|countsComparator
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|copy
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expected
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|,
name|copy
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSort
specifier|public
name|void
name|testSort
parameter_list|()
throws|throws
name|Exception
block|{
name|CoreContainer
name|mockCC
init|=
name|getMockContainer
argument_list|()
decl_stmt|;
name|MockCoreSorter
name|coreSorter
init|=
operator|(
name|MockCoreSorter
operator|)
operator|new
name|MockCoreSorter
argument_list|()
operator|.
name|init
argument_list|(
name|mockCC
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|coreSorter
operator|.
name|getLocalCores
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|copy
argument_list|,
name|coreSorter
operator|::
name|compare
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CountsForEachShard
argument_list|>
name|l
init|=
name|copy
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|CoreDescriptor
operator|::
name|getCloudDescriptor
argument_list|)
operator|.
name|map
argument_list|(
name|it
lambda|->
name|coreSorter
operator|.
name|shardsVsReplicaCounts
operator|.
name|get
argument_list|(
name|getShardName
argument_list|(
name|it
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|CountsForEachShard
name|curr
init|=
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|CountsForEachShard
name|prev
init|=
name|l
operator|.
name|get
argument_list|(
name|i
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CoreSorter
operator|.
name|countsComparator
operator|.
name|compare
argument_list|(
name|prev
argument_list|,
name|curr
argument_list|)
operator|<
literal|1
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|CountsForEachShard
name|c
range|:
name|l
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMockContainer
specifier|private
name|CoreContainer
name|getMockContainer
parameter_list|()
block|{
name|CoreContainer
name|mockCC
init|=
name|createMock
argument_list|(
name|CoreContainer
operator|.
name|class
argument_list|)
decl_stmt|;
name|ZkController
name|mockZKC
init|=
name|createMock
argument_list|(
name|ZkController
operator|.
name|class
argument_list|)
decl_stmt|;
name|ClusterState
name|mockClusterState
init|=
name|createMock
argument_list|(
name|ClusterState
operator|.
name|class
argument_list|)
decl_stmt|;
name|reset
argument_list|(
name|mockCC
argument_list|,
name|mockZKC
argument_list|,
name|mockClusterState
argument_list|)
expr_stmt|;
name|mockCC
operator|.
name|isZooKeeperAware
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
parameter_list|()
lambda|->
name|Boolean
operator|.
name|TRUE
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|mockCC
operator|.
name|getZkController
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
parameter_list|()
lambda|->
name|mockZKC
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|mockClusterState
operator|.
name|getLiveNodes
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
parameter_list|()
lambda|->
name|liveNodes
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|mockZKC
operator|.
name|getClusterState
argument_list|()
expr_stmt|;
name|expectLastCall
argument_list|()
operator|.
name|andAnswer
argument_list|(
parameter_list|()
lambda|->
name|mockClusterState
argument_list|)
operator|.
name|anyTimes
argument_list|()
expr_stmt|;
name|replay
argument_list|(
name|mockCC
argument_list|,
name|mockZKC
argument_list|,
name|mockClusterState
argument_list|)
expr_stmt|;
return|return
name|mockCC
return|;
block|}
DECL|class|ReplicaInfo
specifier|static
class|class
name|ReplicaInfo
block|{
DECL|field|coll
DECL|field|slice
DECL|field|replica
specifier|final
name|int
name|coll
decl_stmt|,
name|slice
decl_stmt|,
name|replica
decl_stmt|;
DECL|field|replicaName
specifier|final
name|String
name|replicaName
decl_stmt|;
DECL|field|cd
name|CloudDescriptor
name|cd
decl_stmt|;
DECL|method|ReplicaInfo
name|ReplicaInfo
parameter_list|(
name|int
name|coll
parameter_list|,
name|int
name|slice
parameter_list|,
name|int
name|replica
parameter_list|)
block|{
name|this
operator|.
name|coll
operator|=
name|coll
expr_stmt|;
name|this
operator|.
name|slice
operator|=
name|slice
expr_stmt|;
name|this
operator|.
name|replica
operator|=
name|replica
expr_stmt|;
name|replicaName
operator|=
literal|"coll_"
operator|+
name|coll
operator|+
literal|"_"
operator|+
name|slice
operator|+
literal|"_"
operator|+
name|replica
expr_stmt|;
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_SHARD
argument_list|,
literal|"shard_"
operator|+
name|slice
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_COLLECTION
argument_list|,
literal|"coll_"
operator|+
name|slice
argument_list|)
expr_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|CoreDescriptor
operator|.
name|CORE_NODE_NAME
argument_list|,
name|replicaName
argument_list|)
expr_stmt|;
name|cd
operator|=
operator|new
name|CloudDescriptor
argument_list|(
name|replicaName
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|ReplicaInfo
condition|)
block|{
name|ReplicaInfo
name|replicaInfo
init|=
operator|(
name|ReplicaInfo
operator|)
name|obj
decl_stmt|;
return|return
name|replicaInfo
operator|.
name|replicaName
operator|.
name|equals
argument_list|(
name|replicaName
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|replicaName
operator|.
name|hashCode
argument_list|()
return|;
block|}
DECL|method|getCloudDescriptor
name|CloudDescriptor
name|getCloudDescriptor
parameter_list|()
block|{
return|return
name|cd
return|;
block|}
DECL|method|getReplica
specifier|public
name|Replica
name|getReplica
parameter_list|(
name|String
name|node
parameter_list|)
block|{
return|return
operator|new
name|Replica
argument_list|(
name|replicaName
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"core"
argument_list|,
name|replicaName
argument_list|,
literal|"node_name"
argument_list|,
name|node
argument_list|)
argument_list|)
return|;
block|}
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|String
name|coll
parameter_list|,
name|String
name|slice
parameter_list|)
block|{
return|return
name|cd
operator|.
name|getCollectionName
argument_list|()
operator|.
name|equals
argument_list|(
name|coll
argument_list|)
operator|&&
name|slice
operator|.
name|equals
argument_list|(
name|cd
operator|.
name|getShardId
argument_list|()
argument_list|)
return|;
block|}
block|}
DECL|class|MockCoreSorter
class|class
name|MockCoreSorter
extends|extends
name|CoreSorter
block|{
DECL|field|numColls
name|int
name|numColls
init|=
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
decl_stmt|;
DECL|field|numReplicas
name|int
name|numReplicas
init|=
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|numShards
name|int
name|numShards
init|=
literal|50
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
DECL|field|myNodeName
name|String
name|myNodeName
decl_stmt|;
DECL|field|myCores
name|Collection
argument_list|<
name|CloudDescriptor
argument_list|>
name|myCores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|localCores
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|localCores
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|replicaPositions
name|Map
argument_list|<
name|ReplicaInfo
argument_list|,
name|String
argument_list|>
name|replicaPositions
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|//replicaname vs. nodename
DECL|method|MockCoreSorter
specifier|public
name|MockCoreSorter
parameter_list|()
block|{
name|int
name|totalNodes
init|=
literal|50
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|int
name|myNode
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|totalNodes
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|nodeNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|totalNodes
condition|;
name|i
operator|++
control|)
block|{
name|String
name|s
init|=
literal|"192.168.1."
operator|+
name|i
operator|+
literal|":8983_solr"
decl_stmt|;
if|if
condition|(
name|i
operator|==
name|myNode
condition|)
name|myNodeName
operator|=
name|s
expr_stmt|;
name|boolean
name|on
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|70
decl_stmt|;
name|nodes
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|on
argument_list|)
expr_stmt|;
comment|//70% chance that the node is up;
name|nodeNames
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|on
condition|)
name|liveNodes
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numColls
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numShards
condition|;
name|j
operator|++
control|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|numReplicas
condition|;
name|k
operator|++
control|)
block|{
name|ReplicaInfo
name|ri
init|=
operator|new
name|ReplicaInfo
argument_list|(
name|i
argument_list|,
name|j
argument_list|,
name|k
argument_list|)
decl_stmt|;
name|replicaPositions
operator|.
name|put
argument_list|(
name|ri
argument_list|,
name|nodeNames
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|totalNodes
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReplicaInfo
argument_list|,
name|String
argument_list|>
name|e
range|:
name|replicaPositions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|equals
argument_list|(
name|myNodeName
argument_list|)
condition|)
block|{
name|myCores
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
argument_list|)
expr_stmt|;
name|localCores
operator|.
name|add
argument_list|(
operator|new
name|MockCoreContainer
operator|.
name|MockCoreDescriptor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CloudDescriptor
name|getCloudDescriptor
parameter_list|()
block|{
return|return
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getCloudDescriptor
argument_list|()
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getNodeName
name|String
name|getNodeName
parameter_list|()
block|{
return|return
name|myNodeName
return|;
block|}
annotation|@
name|Override
DECL|method|getCloudDescriptors
name|Collection
argument_list|<
name|CloudDescriptor
argument_list|>
name|getCloudDescriptors
parameter_list|()
block|{
return|return
name|myCores
return|;
block|}
DECL|method|getLocalCores
specifier|public
name|List
argument_list|<
name|CoreDescriptor
argument_list|>
name|getLocalCores
parameter_list|()
block|{
return|return
name|localCores
return|;
block|}
annotation|@
name|Override
DECL|method|getReplicas
name|Collection
argument_list|<
name|Replica
argument_list|>
name|getReplicas
parameter_list|(
name|ClusterState
name|cs
parameter_list|,
name|String
name|coll
parameter_list|,
name|String
name|slice
parameter_list|)
block|{
name|List
argument_list|<
name|Replica
argument_list|>
name|r
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ReplicaInfo
argument_list|,
name|String
argument_list|>
name|e
range|:
name|replicaPositions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|equals
argument_list|(
name|coll
argument_list|,
name|slice
argument_list|)
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getReplica
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
block|}
block|}
end_class

end_unit

