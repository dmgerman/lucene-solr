begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.core.snapshots
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
operator|.
name|BASE_URL_PROP
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreAdminRequest
operator|.
name|ListSnapshots
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|RequestStatusState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
operator|.
name|State
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|CollectionSnapshotMetaData
operator|.
name|CoreSnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|snapshots
operator|.
name|SolrSnapshotMetaDataManager
operator|.
name|SnapshotMetaData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|BackupRestoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SolrTestCaseJ4
operator|.
name|SuppressSSL
comment|// Currently unknown why SSL does not work with this test
annotation|@
name|Slow
DECL|class|TestSolrCloudSnapshots
specifier|public
class|class
name|TestSolrCloudSnapshots
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|docsSeed
specifier|private
specifier|static
name|long
name|docsSeed
decl_stmt|;
comment|// see indexDocs()
DECL|field|NUM_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|NUM_REPLICAS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_REPLICAS
init|=
literal|2
decl_stmt|;
DECL|field|NUM_NODES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODES
init|=
name|NUM_REPLICAS
operator|*
name|NUM_SHARDS
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupClass
specifier|public
specifier|static
name|void
name|setupClass
parameter_list|()
throws|throws
name|Exception
block|{
name|useFactory
argument_list|(
literal|"solr.StandardDirectoryFactory"
argument_list|)
expr_stmt|;
name|configureCluster
argument_list|(
name|NUM_NODES
argument_list|)
comment|// nodes
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|TEST_PATH
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"cloud-minimal"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|docsSeed
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|teardownClass
specifier|public
specifier|static
name|void
name|teardownClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.build.data"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"test.cache.data"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSnapshots
specifier|public
name|void
name|testSnapshots
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudSolrClient
name|solrClient
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
literal|"SolrCloudSnapshots"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collectionName
argument_list|,
literal|"conf1"
argument_list|,
name|NUM_SHARDS
argument_list|,
name|NUM_REPLICAS
argument_list|)
decl_stmt|;
name|create
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|int
name|nDocs
init|=
name|BackupRestoreUtils
operator|.
name|indexDocs
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|collectionName
argument_list|,
name|docsSeed
argument_list|)
decl_stmt|;
name|BackupRestoreUtils
operator|.
name|verifyDocs
argument_list|(
name|nDocs
argument_list|,
name|solrClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
name|String
name|commitName
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
comment|// Verify if snapshot creation works with replica failures.
name|boolean
name|replicaFailures
init|=
name|usually
argument_list|()
decl_stmt|;
name|Optional
argument_list|<
name|String
argument_list|>
name|stoppedCoreName
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicaFailures
condition|)
block|{
comment|// Here the assumption is that Solr will spread the replicas uniformly across nodes.
comment|// If this is not true for some reason, then we will need to add some logic to find a
comment|// node with a single replica.
name|this
operator|.
name|cluster
operator|.
name|getRandomJetty
argument_list|(
name|random
argument_list|()
argument_list|)
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// Sleep a bit for allowing ZK watch to fire.
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Figure out if at-least one replica is "down".
name|DocCollection
name|collState
init|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
for|for
control|(
name|Slice
name|s
range|:
name|collState
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|s
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|==
name|State
operator|.
name|DOWN
condition|)
block|{
name|stoppedCoreName
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|int
name|expectedCoresWithSnapshot
init|=
name|stoppedCoreName
operator|.
name|isPresent
argument_list|()
condition|?
operator|(
name|NUM_SHARDS
operator|*
name|NUM_REPLICAS
operator|)
operator|-
literal|1
else|:
operator|(
name|NUM_SHARDS
operator|*
name|NUM_REPLICAS
operator|)
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|CreateSnapshot
name|createSnap
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateSnapshot
argument_list|(
name|collectionName
argument_list|,
name|commitName
argument_list|)
decl_stmt|;
name|createSnap
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|collectionSnaps
init|=
name|listCollectionSnapshots
argument_list|(
name|solrClient
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionSnaps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionSnapshotMetaData
name|meta
init|=
name|collectionSnaps
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|commitName
argument_list|,
name|meta
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CollectionSnapshotMetaData
operator|.
name|SnapshotStatus
operator|.
name|Successful
argument_list|,
name|meta
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedCoresWithSnapshot
argument_list|,
name|meta
operator|.
name|getReplicaSnapshots
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|CoreSnapshotMetaData
argument_list|>
name|snapshotByCoreName
init|=
name|meta
operator|.
name|getReplicaSnapshots
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toMap
argument_list|(
name|CoreSnapshotMetaData
operator|::
name|getCoreName
argument_list|,
name|Function
operator|.
name|identity
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DocCollection
name|collectionState
init|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|shard
operator|.
name|getReplicas
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|shard
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|stoppedCoreName
operator|.
name|isPresent
argument_list|()
operator|&&
name|stoppedCoreName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
comment|// We know that the snapshot is not created for this replica.
block|}
name|String
name|replicaBaseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|snapshotByCoreName
operator|.
name|containsKey
argument_list|(
name|coreName
argument_list|)
argument_list|)
expr_stmt|;
name|CoreSnapshotMetaData
name|coreSnapshot
init|=
name|snapshotByCoreName
operator|.
name|get
argument_list|(
name|coreName
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrClient
name|adminClient
init|=
name|getHttpSolrClient
argument_list|(
name|replicaBaseUrl
argument_list|)
init|)
block|{
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
init|=
name|listCoreSnapshots
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SnapshotMetaData
argument_list|>
name|metaData
init|=
name|snapshots
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|commitName
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Snapshot not created for core "
operator|+
name|coreName
argument_list|,
name|metaData
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|coreSnapshot
operator|.
name|getIndexDirPath
argument_list|()
argument_list|,
name|metaData
operator|.
name|get
argument_list|()
operator|.
name|getIndexDirPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|coreSnapshot
operator|.
name|getGenerationNumber
argument_list|()
argument_list|,
name|metaData
operator|.
name|get
argument_list|()
operator|.
name|getGenerationNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Delete all documents.
block|{
name|solrClient
operator|.
name|deleteByQuery
argument_list|(
name|collectionName
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|solrClient
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|verifyDocs
argument_list|(
literal|0
argument_list|,
name|solrClient
argument_list|,
name|collectionName
argument_list|)
expr_stmt|;
block|}
name|String
name|backupLocation
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|backupName
init|=
literal|"mytestbackup"
decl_stmt|;
name|String
name|restoreCollectionName
init|=
name|collectionName
operator|+
literal|"_restored"
decl_stmt|;
comment|//Create a backup using the earlier created snapshot.
block|{
name|CollectionAdminRequest
operator|.
name|Backup
name|backup
init|=
name|CollectionAdminRequest
operator|.
name|backupCollection
argument_list|(
name|collectionName
argument_list|,
name|backupName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|backupLocation
argument_list|)
operator|.
name|setCommitName
argument_list|(
name|commitName
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|backup
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|backup
operator|.
name|processAndWait
argument_list|(
name|solrClient
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
comment|//async
block|}
block|}
comment|// Restore backup.
block|{
name|CollectionAdminRequest
operator|.
name|Restore
name|restore
init|=
name|CollectionAdminRequest
operator|.
name|restoreCollection
argument_list|(
name|restoreCollectionName
argument_list|,
name|backupName
argument_list|)
operator|.
name|setLocation
argument_list|(
name|backupLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|restore
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|RequestStatusState
operator|.
name|COMPLETED
argument_list|,
name|restore
operator|.
name|processAndWait
argument_list|(
name|solrClient
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
comment|//async
block|}
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|restoreCollectionName
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
name|log
operator|.
name|isDebugEnabled
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|BackupRestoreUtils
operator|.
name|verifyDocs
argument_list|(
name|nDocs
argument_list|,
name|solrClient
argument_list|,
name|restoreCollectionName
argument_list|)
expr_stmt|;
block|}
comment|// Verify if the snapshot deletion works correctly when one or more replicas containing the snapshot are
comment|// deleted
name|boolean
name|replicaDeletion
init|=
name|rarely
argument_list|()
decl_stmt|;
if|if
condition|(
name|replicaDeletion
condition|)
block|{
name|CoreSnapshotMetaData
name|replicaToDelete
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|shardId
range|:
name|meta
operator|.
name|getShards
argument_list|()
control|)
block|{
name|List
argument_list|<
name|CoreSnapshotMetaData
argument_list|>
name|replicas
init|=
name|meta
operator|.
name|getReplicaSnapshotsForShard
argument_list|(
name|shardId
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicas
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|int
name|r_index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|replicas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|replicaToDelete
operator|=
name|replicas
operator|.
name|get
argument_list|(
name|r_index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|replicaToDelete
operator|!=
literal|null
condition|)
block|{
name|collectionState
operator|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|s
range|:
name|collectionState
operator|.
name|getSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|r
range|:
name|s
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|r
operator|.
name|getCoreName
argument_list|()
operator|.
name|equals
argument_list|(
name|replicaToDelete
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Deleting replica {}"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|DeleteReplica
name|delReplica
init|=
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
name|collectionName
argument_list|,
name|replicaToDelete
operator|.
name|getShardId
argument_list|()
argument_list|,
name|r
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|delReplica
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
comment|// The replica deletion will cleanup the snapshot meta-data.
name|snapshotByCoreName
operator|.
name|remove
argument_list|(
name|r
operator|.
name|getCoreName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
comment|// Delete snapshot
name|CollectionAdminRequest
operator|.
name|DeleteSnapshot
name|deleteSnap
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|DeleteSnapshot
argument_list|(
name|collectionName
argument_list|,
name|commitName
argument_list|)
decl_stmt|;
name|deleteSnap
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
expr_stmt|;
comment|// Wait for a while so that the clusterstate.json updates are propagated to the client side.
name|Thread
operator|.
name|sleep
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|collectionState
operator|=
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getClusterState
argument_list|()
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
for|for
control|(
name|Slice
name|shard
range|:
name|collectionState
operator|.
name|getActiveSlices
argument_list|()
control|)
block|{
for|for
control|(
name|Replica
name|replica
range|:
name|shard
operator|.
name|getReplicas
argument_list|()
control|)
block|{
if|if
condition|(
name|stoppedCoreName
operator|.
name|isPresent
argument_list|()
operator|&&
name|stoppedCoreName
operator|.
name|get
argument_list|()
operator|.
name|equals
argument_list|(
name|replica
operator|.
name|getCoreName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
comment|// We know that the snapshot was not created for this replica.
block|}
name|String
name|replicaBaseUrl
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|BASE_URL_PROP
argument_list|)
decl_stmt|;
name|String
name|coreName
init|=
name|replica
operator|.
name|getStr
argument_list|(
name|ZkStateReader
operator|.
name|CORE_NAME_PROP
argument_list|)
decl_stmt|;
try|try
init|(
name|SolrClient
name|adminClient
init|=
name|getHttpSolrClient
argument_list|(
name|replicaBaseUrl
argument_list|)
init|)
block|{
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|snapshots
init|=
name|listCoreSnapshots
argument_list|(
name|adminClient
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
name|Optional
argument_list|<
name|SnapshotMetaData
argument_list|>
name|metaData
init|=
name|snapshots
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|x
lambda|->
name|commitName
operator|.
name|equals
argument_list|(
name|x
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Snapshot not deleted for core "
operator|+
name|coreName
argument_list|,
name|metaData
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
comment|// Remove the entry for core if the snapshot is deleted successfully.
name|snapshotByCoreName
operator|.
name|remove
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Verify all core-level snapshots are deleted.
name|assertTrue
argument_list|(
literal|"The cores remaining "
operator|+
name|snapshotByCoreName
argument_list|,
name|snapshotByCoreName
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|listCollectionSnapshots
argument_list|(
name|solrClient
argument_list|,
name|collectionName
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify if the collection deletion result in proper cleanup of snapshot metadata.
block|{
name|String
name|commitName_2
init|=
name|commitName
operator|+
literal|"_2"
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|CreateSnapshot
name|createSnap_2
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|CreateSnapshot
argument_list|(
name|collectionName
argument_list|,
name|commitName_2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|createSnap_2
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|collectionSnaps_2
init|=
name|listCollectionSnapshots
argument_list|(
name|solrClient
argument_list|,
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collectionSnaps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|commitName_2
argument_list|,
name|collectionSnaps_2
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Delete collection
name|CollectionAdminRequest
operator|.
name|Delete
name|deleteCol
init|=
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|deleteCol
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|SolrSnapshotManager
operator|.
name|listSnapshots
argument_list|(
name|solrClient
operator|.
name|getZkStateReader
argument_list|()
operator|.
name|getZkClient
argument_list|()
argument_list|,
name|collectionName
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|listCollectionSnapshots
specifier|private
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|listCollectionSnapshots
parameter_list|(
name|SolrClient
name|adminClient
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|ListSnapshots
name|listSnapshots
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ListSnapshots
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|resp
init|=
name|listSnapshots
operator|.
name|process
argument_list|(
name|adminClient
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|)
operator|instanceof
name|NamedList
argument_list|)
expr_stmt|;
name|NamedList
name|apiResult
init|=
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|CollectionSnapshotMetaData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|apiResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
operator|new
name|CollectionSnapshotMetaData
argument_list|(
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|apiResult
operator|.
name|getVal
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|listCoreSnapshots
specifier|private
name|Collection
argument_list|<
name|SnapshotMetaData
argument_list|>
name|listCoreSnapshots
parameter_list|(
name|SolrClient
name|adminClient
parameter_list|,
name|String
name|coreName
parameter_list|)
throws|throws
name|Exception
block|{
name|ListSnapshots
name|req
init|=
operator|new
name|ListSnapshots
argument_list|()
decl_stmt|;
name|req
operator|.
name|setCoreName
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
name|NamedList
name|resp
init|=
name|adminClient
operator|.
name|request
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|resp
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|)
operator|instanceof
name|NamedList
argument_list|)
expr_stmt|;
name|NamedList
name|apiResult
init|=
operator|(
name|NamedList
operator|)
name|resp
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|SNAPSHOTS_INFO
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|SnapshotMetaData
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|apiResult
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|apiResult
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|commitName
init|=
name|apiResult
operator|.
name|getName
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|indexDirPath
init|=
call|(
name|String
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|apiResult
operator|.
name|get
argument_list|(
name|commitName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|INDEX_DIR_PATH
argument_list|)
decl_stmt|;
name|long
name|genNumber
init|=
name|Long
operator|.
name|parseLong
argument_list|(
call|(
name|String
call|)
argument_list|(
operator|(
name|NamedList
operator|)
name|apiResult
operator|.
name|get
argument_list|(
name|commitName
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
name|SolrSnapshotManager
operator|.
name|GENERATION_NUM
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|SnapshotMetaData
argument_list|(
name|commitName
argument_list|,
name|indexDirPath
argument_list|,
name|genNumber
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

