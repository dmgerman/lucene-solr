begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|DoublePointField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IntPointField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|PointField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Tests for PointField functionality  *  *  */
end_comment

begin_class
DECL|class|TestPointFields
specifier|public
class|class
name|TestPointFields
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema-point.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldExactQuery
specifier|public
name|void
name|testIntPointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni_ns_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// uncomment once MultiValued docValues are supported in PointFields
comment|//    doTestIntPointFieldExactQuery("number_p_i_ni_mv_dv", false);
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldReturn
specifier|public
name|void
name|testIntPointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|}
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_i_dv_ns"
argument_list|,
literal|"int"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldRangeQuery
specifier|public
name|void
name|testIntPointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_i_ni_ns_dv"
argument_list|,
literal|"int"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldSort
specifier|public
name|void
name|testIntPointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldSort
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldFacetField
specifier|public
name|void
name|testIntPointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldRangeFacet
specifier|public
name|void
name|testIntPointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeFacet
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"number_p_i"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFunctionQuery
specifier|public
name|void
name|testIntPointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFunctionQuery
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointStats
specifier|public
name|void
name|testIntPointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|,
literal|0D
argument_list|,
literal|9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedExactQuery
specifier|public
name|void
name|testIntPointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedReturn
specifier|public
name|void
name|testIntPointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testIntPointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO MV SORT?
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Enable once MultiValued docValues are supported in PointFields"
argument_list|)
DECL|method|testIntPointFieldMultiValuedFacetField
specifier|public
name|void
name|testIntPointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"number_p_i_mv_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Enable once MultiValued docValues are supported in PointFields"
argument_list|)
DECL|method|testIntPointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testIntPointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|docValuesField
init|=
literal|"number_p_i_mv_dv"
decl_stmt|;
name|String
name|nonDocValuesField
init|=
literal|"number_p_i_mv"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|IntPointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='10']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|IntPointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Enable once MultiValued docValues are supported in PointFields"
argument_list|)
DECL|method|testIntPointMultiValuedFunctionQuery
specifier|public
name|void
name|testIntPointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"number_p_i_mv_dv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldsAtomicUpdates
specifier|public
name|void
name|testIntPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_dv_ns"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointSetQuery
specifier|public
name|void
name|testIntPointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_i"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_i_mv"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_i_ni_dv"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// DoublePointField
annotation|@
name|Test
DECL|method|testDoublePointFieldExactQuery
specifier|public
name|void
name|testDoublePointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_d"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_ns_dv"
argument_list|)
expr_stmt|;
comment|// TODO enable once MuultiValued docValues are supported with PointFields
comment|//    doTestFloatPointFieldExactQuery("number_p_d_ni_mv_dv");
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldReturn
specifier|public
name|void
name|testDoublePointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_d_dv_ns"
argument_list|,
literal|"double"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|atLeast
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|rand
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|10
decl_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
name|testPointFieldReturn
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldRangeQuery
specifier|public
name|void
name|testDoublePointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_d_ni_ns_dv"
argument_list|,
literal|"double"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldSort
specifier|public
name|void
name|testDoublePointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|arr
init|=
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doTestPointFieldSort
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldFacetField
specifier|public
name|void
name|testDoublePointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldRangeFacet
specifier|public
name|void
name|testDoublePointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeFacet
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"number_p_d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFunctionQuery
specifier|public
name|void
name|testDoublePointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFunctionQuery
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointStats
specifier|public
name|void
name|testDoublePointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-10.0"
block|,
literal|"1.1"
block|,
literal|"2.2"
block|,
literal|"3.3"
block|,
literal|"4.4"
block|,
literal|"5.5"
block|,
literal|"6.6"
block|,
literal|"7.7"
block|,
literal|"8.8"
block|,
literal|"9.9"
block|}
argument_list|,
operator|-
literal|10.0D
argument_list|,
literal|9.9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|1E
operator|-
literal|10D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedExactQuery
specifier|public
name|void
name|testDoublePointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedReturn
specifier|public
name|void
name|testDoublePointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testDoublePointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Enable once MultiValued docValues are supported in PointFields"
argument_list|)
DECL|method|testDoublePointFieldMultiValuedFacetField
specifier|public
name|void
name|testDoublePointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Enable once MultiValued docValues are supported in PointFields"
argument_list|)
DECL|method|testDoublePointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testDoublePointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|docValuesField
init|=
literal|"number_p_d_mv_dv"
decl_stmt|;
name|String
name|nonDocValuesField
init|=
literal|"number_p_d_mv"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|DoublePointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='10']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|DoublePointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Enable once MultiValued docValues are supported in PointFields"
argument_list|)
DECL|method|testDoublePointMultiValuedFunctionQuery
specifier|public
name|void
name|testDoublePointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldsAtomicUpdates
specifier|public
name|void
name|testDoublePointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_dv_ns"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloatPointFieldsAtomicUpdates
specifier|private
name|void
name|doTestFloatPointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"1.1234"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
literal|1.1F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='2.2234']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
operator|-
literal|1.1F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: can this test be better?
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.>'1.1233']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.<'1.1235']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
literal|3.123F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='3.123']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
literal|3.14F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
literal|1F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.>'4.13']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.<'4.15']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointSetQuery
specifier|public
name|void
name|testDoublePointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_d"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_d_mv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_d_ni_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Float
annotation|@
name|Test
DECL|method|testFloatPointFieldExactQuery
specifier|public
name|void
name|testFloatPointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_ns_dv"
argument_list|)
expr_stmt|;
comment|//    doTestFloatPointFieldExactQuery("number_p_f_ni_mv_dv");
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldReturn
specifier|public
name|void
name|testFloatPointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"-1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_f_dv_ns"
argument_list|,
literal|"float"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"-1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|atLeast
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|float
name|rand
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
decl_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
name|testPointFieldReturn
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldRangeQuery
specifier|public
name|void
name|testFloatPointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_f_ni_ns_dv"
argument_list|,
literal|"float"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldSort
specifier|public
name|void
name|testFloatPointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|arr
init|=
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doTestPointFieldSort
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldFacetField
specifier|public
name|void
name|testFloatPointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldRangeFacet
specifier|public
name|void
name|testFloatPointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeFacet
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"number_p_f"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFunctionQuery
specifier|public
name|void
name|testFloatPointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFunctionQuery
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointStats
specifier|public
name|void
name|testFloatPointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-10.0"
block|,
literal|"1.1"
block|,
literal|"2.2"
block|,
literal|"3.3"
block|,
literal|"4.4"
block|,
literal|"5.5"
block|,
literal|"6.6"
block|,
literal|"7.7"
block|,
literal|"8.8"
block|,
literal|"9.9"
block|}
argument_list|,
operator|-
literal|10D
argument_list|,
literal|9.9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|1E
operator|-
literal|6D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedExactQuery
specifier|public
name|void
name|testFloatPointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedReturn
specifier|public
name|void
name|testFloatPointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testFloatPointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldsAtomicUpdates
specifier|public
name|void
name|testFloatPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_dv_ns"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointSetQuery
specifier|public
name|void
name|testFloatPointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_f"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_f_mv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_f_ni_dv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Long
annotation|@
name|Test
DECL|method|testLongPointFieldExactQuery
specifier|public
name|void
name|testLongPointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_ns_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//    doTestIntPointFieldExactQuery("number_p_i_ni_mv_dv", true);
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldReturn
specifier|public
name|void
name|testLongPointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_l_dv_ns"
argument_list|,
literal|"long"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldRangeQuery
specifier|public
name|void
name|testLongPointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_l_ni_ns_dv"
argument_list|,
literal|"long"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldSort
specifier|public
name|void
name|testLongPointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldSort
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldFacetField
specifier|public
name|void
name|testLongPointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldRangeFacet
specifier|public
name|void
name|testLongPointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeFacet
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"number_p_l"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFunctionQuery
specifier|public
name|void
name|testLongPointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFunctionQuery
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointStats
specifier|public
name|void
name|testLongPointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|,
literal|0D
argument_list|,
literal|9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedExactQuery
specifier|public
name|void
name|testLongPointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedReturn
specifier|public
name|void
name|testLongPointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testLongPointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldsAtomicUpdates
specifier|public
name|void
name|testLongPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_dv_ns"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointSetQuery
specifier|public
name|void
name|testLongPointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_l"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_l_mv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_l_ni_dv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods
DECL|method|getRandomStringArrayWithDoubles
specifier|private
name|String
index|[]
name|getRandomStringArrayWithDoubles
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Double
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|double
name|f
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
name|Double
operator|.
name|MAX_VALUE
operator|/
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|f
operator|=
name|f
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getRandomStringArrayWithFloats
specifier|private
name|String
index|[]
name|getRandomStringArrayWithFloats
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Float
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|float
name|f
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|Float
operator|.
name|MAX_VALUE
operator|/
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|f
operator|=
name|f
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|float
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getSequentialStringArrayWithInts
specifier|private
name|String
index|[]
name|getSequentialStringArrayWithInts
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|getSequentialStringArrayWithDoubles
specifier|private
name|String
index|[]
name|getSequentialStringArrayWithDoubles
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d.0"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|getRandomStringArrayWithInts
specifier|private
name|String
index|[]
name|getRandomStringArrayWithInts
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|int
name|number
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|number
operator|=
name|number
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getRandomStringArrayWithLongs
specifier|private
name|String
index|[]
name|getRandomStringArrayWithLongs
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|long
name|number
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|number
operator|=
name|number
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|doTestIntPointFieldExactQuery
specifier|private
name|void
name|doTestIntPointFieldExactQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|boolean
name|testLong
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" OR "
operator|+
name|field
operator|+
literal|":"
operator|+
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|10
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
if|if
condition|(
name|testLong
condition|)
block|{
for|for
control|(
name|long
name|i
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
init|;
name|i
operator|<
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
init|;
name|i
operator|<
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldReturn
specifier|private
name|void
name|testPointFieldReturn
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
assert|assert
name|sf
operator|.
name|stored
argument_list|()
operator|||
operator|(
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|&&
name|sf
operator|.
name|useDocValuesAsStored
argument_list|()
operator|)
operator|:
literal|"Unexpected field definition for "
operator|+
name|field
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check using RTG
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"//doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[
name|values
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='"
operator|+
name|values
operator|.
name|length
operator|+
literal|"']"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
literal|"//result/doc["
operator|+
name|i
operator|+
literal|"]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|values
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|"']"
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|,
literal|"rows"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|length
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Check using RTG
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"//doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doTestIntPointFieldRangeQuery
specifier|private
name|void
name|doTestIntPointFieldRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|testLong
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//result/doc[4]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='9']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
decl_stmt|;
if|if
condition|(
name|testLong
condition|)
block|{
name|arr
operator|=
name|getRandomStringArrayWithLongs
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arr
operator|=
name|getRandomStringArrayWithInts
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":["
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{"
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPointFieldFacetField
specifier|private
name|void
name|testPointFieldFacetField
parameter_list|(
name|String
name|nonDocValuesField
parameter_list|,
name|String
name|docValuesField
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|10
assert|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|docValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|docValuesField
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|docValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|docValuesField
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't facet on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDocValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|nonDocValuesField
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIntPointFieldRangeFacet
specifier|private
name|void
name|doTestIntPointFieldRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIntPointFunctionQuery
specifier|private
name|void
name|doTestIntPointFunctionQuery
parameter_list|(
name|String
name|dvFieldName
parameter_list|,
name|String
name|nonDvFieldName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDvFieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|dvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='9']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='8']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='7']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-0.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-1.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-2.0']"
argument_list|,
literal|"//result/doc[10]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-9.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", field("
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='2']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='9']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|nonDvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointStats
specifier|private
name|void
name|testPointStats
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|dvField
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|,
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|,
name|String
name|count
parameter_list|,
name|String
name|missing
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|minMin
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|min
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|min
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|maxMin
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|min
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|min
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|minMax
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|max
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|max
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|maxMax
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|max
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|max
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|field
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numbers
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvField
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|dvField
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='min'][.>='"
operator|+
name|minMin
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='min'][.<='"
operator|+
name|maxMin
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='max'][.>='"
operator|+
name|minMax
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='max'][.<='"
operator|+
name|maxMax
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/long[@name='count'][.='"
operator|+
name|count
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/long[@name='missing'][.='"
operator|+
name|missing
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't calculate stats on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|field
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldMultiValuedExactQuery
specifier|private
name|void
name|testPointFieldMultiValuedExactQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|numbers
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|numbers
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
operator|+
literal|" OR "
operator|+
name|fieldName
operator|+
literal|":"
operator|+
name|numbers
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|10
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPointFieldMultiValuedReturn
specifier|private
name|void
name|testPointFieldMultiValuedReturn
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[
literal|11
index|]
decl_stmt|;
name|String
index|[]
name|expected2
init|=
operator|new
name|String
index|[
literal|11
index|]
decl_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='10']"
expr_stmt|;
name|expected2
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='10']"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
index|]
operator|=
literal|"//result/doc["
operator|+
name|i
operator|+
literal|"]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|"']"
expr_stmt|;
name|expected2
index|[
name|i
index|]
operator|=
literal|"//result/doc["
operator|+
name|i
operator|+
literal|"]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
name|i
operator|+
literal|9
index|]
operator|+
literal|"']"
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
name|expected2
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldMultiValuedRangeQuery
specifier|private
name|void
name|testPointFieldMultiValuedRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|11
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|12
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[4]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[4]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|13
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{10 TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[10]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|9
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldMultiValuedFacetField
specifier|private
name|void
name|testPointFieldMultiValuedFacetField
parameter_list|(
name|String
name|nonDocValuesField
parameter_list|,
name|String
name|dvFieldName
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|11
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|12
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't facet on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDocValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|nonDocValuesField
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointMultiValuedFunctionQuery
specifier|private
name|void
name|testPointMultiValuedFunctionQuery
parameter_list|(
name|String
name|nonDocValuesField
parameter_list|,
name|String
name|docValuesField
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|String
name|function
init|=
literal|"field("
operator|+
name|docValuesField
operator|+
literal|", min)"
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|function
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|function
operator|+
literal|"'][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|function
operator|+
literal|"'][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|function
operator|+
literal|"'][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|function
operator|+
literal|"'][.='"
operator|+
name|numbers
index|[
literal|9
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
comment|//    if (dvIsRandomAccessOrds(docValuesField)) {
comment|//      function = "field(" + docValuesField + ", max)";
comment|//      assertQ(req("q", "*:*", "fl", "id, " + function),
comment|//          "//*[@numFound='10']",
comment|//          "//result/doc[1]/int[@name='" + function + "'][.='10']",
comment|//          "//result/doc[2]/int[@name='" + function + "'][.='11']",
comment|//          "//result/doc[3]/int[@name='" + function + "'][.='12']",
comment|//          "//result/doc[10]/int[@name='" + function + "'][.='19']");
comment|//    }
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|function
operator|=
literal|"field("
operator|+
name|nonDocValuesField
operator|+
literal|",min)"
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|function
operator|+
literal|" desc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"docValues='true' is required to select 'min' value from multivalued field ("
operator|+
name|nonDocValuesField
operator|+
literal|") at query time"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|function
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|function
operator|=
literal|"field("
operator|+
name|docValuesField
operator|+
literal|",foo)"
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Multi-Valued field selector 'foo' not supported"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|function
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntPointFieldsAtomicUpdates
specifier|private
name|void
name|testIntPointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloatPointFieldExactQuery
specifier|private
name|void
name|doTestFloatPointFieldExactQuery
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|"."
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|String
name|num1
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|String
name|num2
init|=
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|9
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|9
operator|+
literal|1
operator|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|num1
operator|+
literal|" OR "
operator|+
name|field
operator|+
literal|":"
operator|+
name|num2
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|float
name|rand
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"random_number "
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//always the same id to override
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|rand
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestPointFieldSort
specifier|private
name|void
name|doTestPointFieldSort
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|dvField
parameter_list|,
name|String
index|[]
name|arr
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|arr
operator|!=
literal|null
operator|&&
name|arr
operator|.
name|length
operator|==
literal|10
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|dvField
operator|+
literal|" desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='9']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='8']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='7']"
argument_list|,
literal|"//result/doc[10]/str[@name='id'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"can not sort on a PointField without doc values: "
operator|+
name|field
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|field
operator|+
literal|" desc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|//TODO: sort missing
block|}
DECL|method|doTestFloatPointFieldRangeQuery
specifier|private
name|void
name|doTestFloatPointFieldRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|testDouble
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|,
literal|"//result/doc[4]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='9.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0.9 TO 1.01]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0.9 TO 1.01}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
decl_stmt|;
if|if
condition|(
name|testDouble
condition|)
block|{
name|arr
operator|=
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arr
operator|=
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":["
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{"
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestFloatPointFieldRangeFacet
specifier|private
name|void
name|doTestFloatPointFieldRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloatPointFunctionQuery
specifier|private
name|void
name|doTestFloatPointFunctionQuery
parameter_list|(
name|String
name|dvFieldName
parameter_list|,
name|String
name|nonDvFieldName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|,
name|nonDvFieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|dvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='9.9']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='8.8']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='7.7']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='0.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-0.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-1.1']"
argument_list|,
literal|"//result/doc[3]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-2.2']"
argument_list|,
literal|"//result/doc[10]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-9.9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", field("
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1.1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='2.2']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='9.9']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|nonDvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestSetQueries
specifier|private
name|void
name|doTestSetQueries
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|boolean
name|multiValued
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!term f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!terms f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|","
operator|+
name|values
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multiValued
condition|)
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|values
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!term f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!terms f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|","
operator|+
name|values
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

