begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoublePoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexOrDocValuesQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PointRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
operator|.
name|DynamicField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DateMathParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_comment
comment|/**  * Tests for PointField functionality  *  *  */
end_comment

begin_class
DECL|class|TestPointFields
specifier|public
class|class
name|TestPointFields
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema-point.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldExactQuery
specifier|public
name|void
name|testIntPointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_mv_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni_ns_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni_mv_dv"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldNonSearchableExactQuery
specifier|public
name|void
name|testIntPointFieldNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_i_ni_ns"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldReturn
specifier|public
name|void
name|testIntPointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|}
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_i_dv_ns"
argument_list|,
literal|"int"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|}
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_i_ni"
argument_list|,
literal|"int"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldRangeQuery
specifier|public
name|void
name|testIntPointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_i_ni_ns_dv"
argument_list|,
literal|"int"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"int"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldNonSearchableRangeQuery
specifier|public
name|void
name|testIntPointFieldNonSearchableRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_i_ni"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_i_ni_ns"
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_i_ni_ns_mv"
argument_list|,
literal|"42"
argument_list|,
literal|"666"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldSort
specifier|public
name|void
name|testIntPointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldSort
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldFacetField
specifier|public
name|void
name|testIntPointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldRangeFacet
specifier|public
name|void
name|testIntPointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeFacet
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"number_p_i"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFunctionQuery
specifier|public
name|void
name|testIntPointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFunctionQuery
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointStats
specifier|public
name|void
name|testIntPointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|,
literal|0D
argument_list|,
literal|9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|testPointStats
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"number_p_i_mv_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|,
literal|0D
argument_list|,
literal|9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedExactQuery
specifier|public
name|void
name|testIntPointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_i_ni_mv_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedNonSearchableExactQuery
specifier|public
name|void
name|testIntPointFieldMultiValuedNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_i_ni_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_i_ni_ns_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedReturn
specifier|public
name|void
name|testIntPointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_i_ni_mv_dv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_i_dv_ns_mv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testIntPointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_i_ni_mv_dv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_i_mv_dv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldNotIndexed
specifier|public
name|void
name|testIntPointFieldNotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_i_ni"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_i_ni_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//TODO MV SORT?
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedFacetField
specifier|public
name|void
name|testIntPointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"number_p_i_mv_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"number_p_i_mv_dv"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testIntPointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldMultiValuedRangeFacet
argument_list|(
literal|"number_p_i_mv_dv"
argument_list|,
literal|"number_p_i_mv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointMultiValuedFunctionQuery
specifier|public
name|void
name|testIntPointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"number_p_i_mv_dv"
argument_list|,
literal|"int"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointFieldsAtomicUpdates
specifier|public
name|void
name|testIntPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_dv"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_dv_ns"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedIntPointFieldsAtomicUpdates
specifier|public
name|void
name|testMultiValuedIntPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testMultiValuedIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_mv"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|testMultiValuedIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_ni_mv_dv"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|testMultiValuedIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_i_dv_ns_mv"
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIntPointSetQuery
specifier|public
name|void
name|testIntPointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_i"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_i_mv"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_i_ni_dv"
argument_list|,
name|getRandomStringArrayWithInts
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// DoublePointField
annotation|@
name|Test
DECL|method|testDoublePointFieldExactQuery
specifier|public
name|void
name|testDoublePointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_d"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_mv_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_ns_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_dv_ns"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_mv_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldNonSearchableExactQuery
specifier|public
name|void
name|testDoublePointFieldNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_d_ni_ns"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldReturn
specifier|public
name|void
name|testDoublePointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_d_dv_ns"
argument_list|,
literal|"double"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|atLeast
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|double
name|rand
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
literal|10
decl_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
name|testPointFieldReturn
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldRangeQuery
specifier|public
name|void
name|testDoublePointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_d_ni_ns_dv"
argument_list|,
literal|"double"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"double"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoubleFieldNonSearchableRangeQuery
specifier|public
name|void
name|testDoubleFieldNonSearchableRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_d_ni"
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_d_ni_ns"
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_d_ni_ns_mv"
argument_list|,
literal|"42.3"
argument_list|,
literal|"-66.6"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldSort
specifier|public
name|void
name|testDoublePointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|arr
init|=
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doTestPointFieldSort
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldFacetField
specifier|public
name|void
name|testDoublePointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldRangeFacet
specifier|public
name|void
name|testDoublePointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeFacet
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"number_p_d"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFunctionQuery
specifier|public
name|void
name|testDoublePointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFunctionQuery
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointStats
specifier|public
name|void
name|testDoublePointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"number_p_d_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-10.0"
block|,
literal|"1.1"
block|,
literal|"2.2"
block|,
literal|"3.3"
block|,
literal|"4.4"
block|,
literal|"5.5"
block|,
literal|"6.6"
block|,
literal|"7.7"
block|,
literal|"8.8"
block|,
literal|"9.9"
block|}
argument_list|,
operator|-
literal|10.0D
argument_list|,
literal|9.9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|1E
operator|-
literal|10D
argument_list|)
expr_stmt|;
name|testPointStats
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-10.0"
block|,
literal|"1.1"
block|,
literal|"2.2"
block|,
literal|"3.3"
block|,
literal|"4.4"
block|,
literal|"5.5"
block|,
literal|"6.6"
block|,
literal|"7.7"
block|,
literal|"8.8"
block|,
literal|"9.9"
block|}
argument_list|,
operator|-
literal|10.0D
argument_list|,
literal|9.9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|1E
operator|-
literal|10D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedExactQuery
specifier|public
name|void
name|testDoublePointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_d_ni_mv_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedNonSearchableExactQuery
specifier|public
name|void
name|testDoublePointFieldMultiValuedNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_d_ni_mv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_d_ni_ns_mv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedReturn
specifier|public
name|void
name|testDoublePointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_d_ni_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_d_dv_ns_mv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testDoublePointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_d_ni_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_d_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedFacetField
specifier|public
name|void
name|testDoublePointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testDoublePointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDoublePointFieldMultiValuedRangeFacet
argument_list|(
literal|"number_p_d_mv_dv"
argument_list|,
literal|"number_p_d_mv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointMultiValuedFunctionQuery
specifier|public
name|void
name|testDoublePointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"number_p_d_mv_dv"
argument_list|,
literal|"double"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldsAtomicUpdates
specifier|public
name|void
name|testDoublePointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_dv"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_dv_ns"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedDoublePointFieldsAtomicUpdates
specifier|public
name|void
name|testMultiValuedDoublePointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testMultiValuedFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_mv"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|testMultiValuedFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_ni_mv_dv"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
name|testMultiValuedFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_d_dv_ns_mv"
argument_list|,
literal|"double"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointFieldNotIndexed
specifier|public
name|void
name|testDoublePointFieldNotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_d_ni"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_d_ni_mv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloatPointFieldsAtomicUpdates
specifier|private
name|void
name|doTestFloatPointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"1.1234"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
literal|1.1F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='2.2234']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
operator|-
literal|1.1F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO: can this test be better?
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.>'1.1233']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.<'1.1235']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
literal|3.123F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='3.123']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
literal|3.14F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
literal|1F
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.>'4.13']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.<'4.15']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDoublePointSetQuery
specifier|public
name|void
name|testDoublePointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_d"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_d_mv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_d_ni_dv"
argument_list|,
name|getRandomStringArrayWithDoubles
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// Float
annotation|@
name|Test
DECL|method|testFloatPointFieldExactQuery
specifier|public
name|void
name|testFloatPointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_mv_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_ns_dv"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_dv_ns"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_mv_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldNonSearchableExactQuery
specifier|public
name|void
name|testFloatPointFieldNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldExactQuery
argument_list|(
literal|"number_p_f_ni_ns"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldReturn
specifier|public
name|void
name|testFloatPointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"-1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_f_dv_ns"
argument_list|,
literal|"float"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0.0"
block|,
literal|"-1.2"
block|,
literal|"2.5"
block|,
literal|"3.02"
block|,
literal|"0.43"
block|,
literal|"5.2"
block|,
literal|"6.01"
block|,
literal|"74.0"
block|,
literal|"80.0"
block|,
literal|"9.9"
block|}
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|atLeast
argument_list|(
literal|10
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|float
name|rand
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
decl_stmt|;
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
expr_stmt|;
block|}
name|testPointFieldReturn
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldRangeQuery
specifier|public
name|void
name|testFloatPointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_f_ni_ns_dv"
argument_list|,
literal|"float"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldRangeQuery
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"float"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldNonSearchableRangeQuery
specifier|public
name|void
name|testFloatPointFieldNonSearchableRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_f_ni"
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_f_ni_ns"
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_f_ni_ns_mv"
argument_list|,
literal|"42.3"
argument_list|,
literal|"-66.6"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldSort
specifier|public
name|void
name|testFloatPointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|arr
init|=
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|doTestPointFieldSort
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
name|arr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldFacetField
specifier|public
name|void
name|testFloatPointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldRangeFacet
specifier|public
name|void
name|testFloatPointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldRangeFacet
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"number_p_f"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFunctionQuery
specifier|public
name|void
name|testFloatPointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFloatPointFunctionQuery
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointStats
specifier|public
name|void
name|testFloatPointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"number_p_f_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-10.0"
block|,
literal|"1.1"
block|,
literal|"2.2"
block|,
literal|"3.3"
block|,
literal|"4.4"
block|,
literal|"5.5"
block|,
literal|"6.6"
block|,
literal|"7.7"
block|,
literal|"8.8"
block|,
literal|"9.9"
block|}
argument_list|,
operator|-
literal|10D
argument_list|,
literal|9.9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|1E
operator|-
literal|6D
argument_list|)
expr_stmt|;
name|testPointStats
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"number_p_f_mv_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"-10.0"
block|,
literal|"1.1"
block|,
literal|"2.2"
block|,
literal|"3.3"
block|,
literal|"4.4"
block|,
literal|"5.5"
block|,
literal|"6.6"
block|,
literal|"7.7"
block|,
literal|"8.8"
block|,
literal|"9.9"
block|}
argument_list|,
operator|-
literal|10D
argument_list|,
literal|9.9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|1E
operator|-
literal|6D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedExactQuery
specifier|public
name|void
name|testFloatPointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_f_ni_mv_dv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedNonSearchableExactQuery
specifier|public
name|void
name|testFloatPointFieldMultiValuedNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_f_ni_mv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_f_ni_ns_mv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedReturn
specifier|public
name|void
name|testFloatPointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_f_ni_mv_dv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_f_dv_ns_mv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testFloatPointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_f_ni_mv_dv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_f_mv_dv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testFloatPointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDoublePointFieldMultiValuedRangeFacet
argument_list|(
literal|"number_p_f_mv_dv"
argument_list|,
literal|"number_p_f_mv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldMultiValuedFacetField
specifier|public
name|void
name|testFloatPointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"number_p_f_mv_dv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"number_p_f_mv_dv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointMultiValuedFunctionQuery
specifier|public
name|void
name|testFloatPointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"number_p_f_mv_dv"
argument_list|,
literal|"float"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"number_p_f_mv_dv"
argument_list|,
literal|"float"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldsAtomicUpdates
specifier|public
name|void
name|testFloatPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_dv"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|doTestFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_dv_ns"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedFloatePointFieldsAtomicUpdates
specifier|public
name|void
name|testMultiValuedFloatePointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testMultiValuedFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_mv"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|testMultiValuedFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_ni_mv_dv"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
name|testMultiValuedFloatPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_f_dv_ns_mv"
argument_list|,
literal|"float"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointSetQuery
specifier|public
name|void
name|testFloatPointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_f"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_f_mv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_f_ni_dv"
argument_list|,
name|getRandomStringArrayWithFloats
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFloatPointFieldNotIndexed
specifier|public
name|void
name|testFloatPointFieldNotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_f_ni"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_f_ni_mv"
argument_list|,
name|getSequentialStringArrayWithDoubles
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Long
annotation|@
name|Test
DECL|method|testLongPointFieldExactQuery
specifier|public
name|void
name|testLongPointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_mv_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_ns_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_dv_ns"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_mv_dv"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldNonSearchableExactQuery
specifier|public
name|void
name|testLongPointFieldNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestIntPointFieldExactQuery
argument_list|(
literal|"number_p_l_ni_ns"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldReturn
specifier|public
name|void
name|testLongPointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_l_dv_ns"
argument_list|,
literal|"long"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"-1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"43"
block|,
literal|"52"
block|,
literal|"-60"
block|,
literal|"74"
block|,
literal|"80"
block|,
literal|"99"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldRangeQuery
specifier|public
name|void
name|testLongPointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_l_ni_ns_dv"
argument_list|,
literal|"long"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestIntPointFieldRangeQuery
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"long"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldNonSearchableRangeQuery
specifier|public
name|void
name|testLongPointFieldNonSearchableRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_l_ni"
argument_list|,
literal|"3333333333"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_l_ni_ns"
argument_list|,
literal|"3333333333"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_l_ni_ns_mv"
argument_list|,
literal|"3333333333"
argument_list|,
literal|"-4444444444"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldSort
specifier|public
name|void
name|testLongPointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldSort
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldFacetField
specifier|public
name|void
name|testLongPointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldRangeFacet
specifier|public
name|void
name|testLongPointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldRangeFacet
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"number_p_l"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFunctionQuery
specifier|public
name|void
name|testLongPointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFunctionQuery
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointStats
specifier|public
name|void
name|testLongPointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointStats
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"number_p_l_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|,
literal|0D
argument_list|,
literal|9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
name|testPointStats
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"number_p_l_mv_dv"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"0"
block|,
literal|"1"
block|,
literal|"2"
block|,
literal|"3"
block|,
literal|"4"
block|,
literal|"5"
block|,
literal|"6"
block|,
literal|"7"
block|,
literal|"8"
block|,
literal|"9"
block|}
argument_list|,
literal|0D
argument_list|,
literal|9D
argument_list|,
literal|"10"
argument_list|,
literal|"1"
argument_list|,
literal|0D
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedExactQuery
specifier|public
name|void
name|testLongPointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_l_ni_mv_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedNonSearchableExactQuery
specifier|public
name|void
name|testLongPointFieldMultiValuedNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_l_ni_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_l_ni_ns_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedReturn
specifier|public
name|void
name|testLongPointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_l_ni_mv_dv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_l_dv_ns_mv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testLongPointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_l_ni_mv_dv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_l_mv_dv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedFacetField
specifier|public
name|void
name|testLongPointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"number_p_l_mv_dv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"number_p_l_mv_dv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testLongPointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestIntPointFieldMultiValuedRangeFacet
argument_list|(
literal|"number_p_l_mv_dv"
argument_list|,
literal|"number_p_l_mv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointMultiValuedFunctionQuery
specifier|public
name|void
name|testLongPointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"number_p_l_mv_dv"
argument_list|,
literal|"long"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldsAtomicUpdates
specifier|public
name|void
name|testLongPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_dv"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|testIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_dv_ns"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedLongPointFieldsAtomicUpdates
specifier|public
name|void
name|testMultiValuedLongPointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testMultiValuedIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_mv"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|testMultiValuedIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_ni_mv_dv"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
name|testMultiValuedIntPointFieldsAtomicUpdates
argument_list|(
literal|"number_p_l_dv_ns_mv"
argument_list|,
literal|"long"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointSetQuery
specifier|public
name|void
name|testLongPointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_l"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_l_mv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_l_ni_dv"
argument_list|,
name|getRandomStringArrayWithLongs
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLongPointFieldNotIndexed
specifier|public
name|void
name|testLongPointFieldNotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_l_ni"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_l_ni_mv"
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Date
annotation|@
name|Test
DECL|method|testDatePointFieldExactQuery
specifier|public
name|void
name|testDatePointFieldExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"2015-12-31T23:59:59Z-1DAY"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_dv"
argument_list|,
literal|"2000-12-31T23:59:59Z+3DAYS"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_mv_dv"
argument_list|,
literal|"2000-12-31T23:59:59Z+3DAYS"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_ni_dv"
argument_list|,
literal|"2000-12-31T23:59:59Z+3DAYS"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_ni_ns_dv"
argument_list|,
literal|"1995-12-31T23:59:59Z-1MONTH"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_ni_mv_dv"
argument_list|,
literal|"1995-12-31T23:59:59Z+2MONTHS"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldNonSearchableExactQuery
specifier|public
name|void
name|testDatePointFieldNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_ni"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestDatePointFieldExactQuery
argument_list|(
literal|"number_p_dt_ni_ns"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldReturn
specifier|public
name|void
name|testDatePointFieldReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldReturn
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"date"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1995-12-31T23:59:59Z"
block|,
literal|"1994-02-28T23:59:59Z"
block|,
literal|"2015-12-31T23:59:59Z"
block|,
literal|"2000-10-31T23:59:59Z"
block|,
literal|"1999-12-31T12:59:59Z"
block|}
argument_list|)
expr_stmt|;
name|testPointFieldReturn
argument_list|(
literal|"number_p_dt_dv_ns"
argument_list|,
literal|"date"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"1995-12-31T23:59:59Z"
block|,
literal|"1994-02-28T23:59:59Z"
block|,
literal|"2015-12-31T23:59:59Z"
block|,
literal|"2000-10-31T23:59:59Z"
block|,
literal|"1999-12-31T12:59:59Z"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldRangeQuery
specifier|public
name|void
name|testDatePointFieldRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDatePointFieldRangeQuery
argument_list|(
literal|"number_p_dt"
argument_list|)
expr_stmt|;
name|doTestDatePointFieldRangeQuery
argument_list|(
literal|"number_p_dt_ni_ns_dv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldNonSearchableRangeQuery
specifier|public
name|void
name|testDatePointFieldNonSearchableRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_dt_ni"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_dt_ni_ns"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|doTestPointFieldNonSearchableRangeQuery
argument_list|(
literal|"number_p_dt_ni_ns_mv"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|"2000-10-31T23:59:59Z"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldSort
specifier|public
name|void
name|testDatePointFieldSort
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPointFieldSort
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"number_p_dt_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldFacetField
specifier|public
name|void
name|testDatePointFieldFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldFacetField
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"number_p_dt_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|testPointFieldFacetField
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"number_p_dt_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldRangeFacet
specifier|public
name|void
name|testDatePointFieldRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDatePointFieldRangeFacet
argument_list|(
literal|"number_p_dt_dv"
argument_list|,
literal|"number_p_dt"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFunctionQuery
specifier|public
name|void
name|testDatePointFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDatePointFunctionQuery
argument_list|(
literal|"number_p_dt_dv"
argument_list|,
literal|"number_p_dt"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointStats
specifier|public
name|void
name|testDatePointStats
parameter_list|()
throws|throws
name|Exception
block|{
name|testDatePointStats
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"number_p_dt_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|testDatePointStats
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"number_p_dt_mv_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldMultiValuedExactQuery
specifier|public
name|void
name|testDatePointFieldMultiValuedExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_dt_ni_mv_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldMultiValuedNonSearchableExactQuery
specifier|public
name|void
name|testDatePointFieldMultiValuedNonSearchableExactQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_dt_ni_mv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedExactQuery
argument_list|(
literal|"number_p_dt_ni_ns_mv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldMultiValuedReturn
specifier|public
name|void
name|testDatePointFieldMultiValuedReturn
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"date"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_dt_ni_mv_dv"
argument_list|,
literal|"date"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedReturn
argument_list|(
literal|"number_p_dt_dv_ns_mv"
argument_list|,
literal|"date"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldMultiValuedRangeQuery
specifier|public
name|void
name|testDatePointFieldMultiValuedRangeQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"date"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedRangeQuery
argument_list|(
literal|"number_p_dt_ni_mv_dv"
argument_list|,
literal|"date"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldMultiValuedFacetField
specifier|public
name|void
name|testDatePointFieldMultiValuedFacetField
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"number_p_dt_mv_dv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|testPointFieldMultiValuedFacetField
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"number_p_dt_mv_dv"
argument_list|,
name|getRandomStringArrayWithDates
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldMultiValuedRangeFacet
specifier|public
name|void
name|testDatePointFieldMultiValuedRangeFacet
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestDatePointFieldMultiValuedRangeFacet
argument_list|(
literal|"number_p_dt_mv_dv"
argument_list|,
literal|"number_p_dt_mv"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointMultiValuedFunctionQuery
specifier|public
name|void
name|testDatePointMultiValuedFunctionQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|testPointMultiValuedFunctionQuery
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"number_p_dt_mv_dv"
argument_list|,
literal|"date"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldsAtomicUpdates
specifier|public
name|void
name|testDatePointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testDatePointFieldsAtomicUpdates
argument_list|(
literal|"number_p_dt"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|testDatePointFieldsAtomicUpdates
argument_list|(
literal|"number_p_dt_dv"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|testDatePointFieldsAtomicUpdates
argument_list|(
literal|"number_p_dt_dv_ns"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultiValuedDatePointFieldsAtomicUpdates
specifier|public
name|void
name|testMultiValuedDatePointFieldsAtomicUpdates
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
return|return;
block|}
name|testMultiValuedDatePointFieldsAtomicUpdates
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|testMultiValuedDatePointFieldsAtomicUpdates
argument_list|(
literal|"number_p_dt_ni_mv_dv"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
name|testMultiValuedDatePointFieldsAtomicUpdates
argument_list|(
literal|"number_p_dt_dv_ns_mv"
argument_list|,
literal|"date"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointSetQuery
specifier|public
name|void
name|testDatePointSetQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestSetQueries
argument_list|(
literal|"number_p_dt"
argument_list|,
name|getRandomStringArrayWithDates
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_dt_mv"
argument_list|,
name|getRandomStringArrayWithDates
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestSetQueries
argument_list|(
literal|"number_p_dt_ni_dv"
argument_list|,
name|getRandomStringArrayWithDates
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDatePointFieldNotIndexed
specifier|public
name|void
name|testDatePointFieldNotIndexed
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_dt_ni"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFieldNotIndexed
argument_list|(
literal|"number_p_dt_ni_mv"
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testIndexOrDocValuesQuery
specifier|public
name|void
name|testIndexOrDocValuesQuery
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|fieldTypeNames
init|=
operator|new
name|String
index|[]
block|{
literal|"_p_i"
block|,
literal|"_p_l"
block|,
literal|"_p_d"
block|,
literal|"_p_f"
block|}
decl_stmt|;
name|FieldType
index|[]
name|fieldTypes
init|=
operator|new
name|FieldType
index|[]
block|{
operator|new
name|IntPointField
argument_list|()
block|,
operator|new
name|LongPointField
argument_list|()
block|,
operator|new
name|DoublePointField
argument_list|()
block|,
operator|new
name|FloatPointField
argument_list|()
block|}
decl_stmt|;
assert|assert
name|fieldTypeNames
operator|.
name|length
operator|==
name|fieldTypes
operator|.
name|length
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldTypeNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SchemaField
name|fieldIndexed
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_"
operator|+
name|fieldTypeNames
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|SchemaField
name|fieldIndexedAndDv
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_"
operator|+
name|fieldTypeNames
index|[
name|i
index|]
operator|+
literal|"_dv"
argument_list|)
decl_stmt|;
name|SchemaField
name|fieldIndexedMv
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_"
operator|+
name|fieldTypeNames
index|[
name|i
index|]
operator|+
literal|"_mv"
argument_list|)
decl_stmt|;
name|SchemaField
name|fieldIndexedAndDvMv
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_"
operator|+
name|fieldTypeNames
index|[
name|i
index|]
operator|+
literal|"_mv_dv"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexed
argument_list|,
literal|"0"
argument_list|,
literal|"10"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|instanceof
name|PointRangeQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexedAndDv
argument_list|,
literal|"0"
argument_list|,
literal|"10"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|instanceof
name|IndexOrDocValuesQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexedMv
argument_list|,
literal|"0"
argument_list|,
literal|"10"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|instanceof
name|PointRangeQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getRangeQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexedAndDvMv
argument_list|,
literal|"0"
argument_list|,
literal|"10"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
operator|instanceof
name|IndexOrDocValuesQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getFieldQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexed
argument_list|,
literal|"0"
argument_list|)
operator|instanceof
name|PointRangeQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getFieldQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexedAndDv
argument_list|,
literal|"0"
argument_list|)
operator|instanceof
name|IndexOrDocValuesQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getFieldQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexedMv
argument_list|,
literal|"0"
argument_list|)
operator|instanceof
name|PointRangeQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldTypes
index|[
name|i
index|]
operator|.
name|getFieldQuery
argument_list|(
literal|null
argument_list|,
name|fieldIndexedAndDvMv
argument_list|,
literal|"0"
argument_list|)
operator|instanceof
name|IndexOrDocValuesQuery
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testInternals
specifier|public
name|void
name|testInternals
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[]
block|{
literal|"i"
block|,
literal|"l"
block|,
literal|"f"
block|,
literal|"d"
block|}
decl_stmt|;
name|String
index|[]
name|suffixes
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"_dv"
block|,
literal|"_mv"
block|,
literal|"_mv_dv"
block|,
literal|"_ni"
block|,
literal|"_ni_dv"
block|,
literal|"_ni_dv_ns"
block|,
literal|"_ni_dv_ns_mv"
block|,
literal|"_ni_mv"
block|,
literal|"_ni_mv_dv"
block|,
literal|"_ni_ns"
block|,
literal|"_ni_ns_mv"
block|,
literal|"_dv_ns"
block|,
literal|"_ni_ns_dv"
block|,
literal|"_dv_ns_mv"
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|typesTested
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|type
range|:
name|types
control|)
block|{
for|for
control|(
name|String
name|suffix
range|:
name|suffixes
control|)
block|{
name|doTestInternals
argument_list|(
literal|"number_p_"
operator|+
name|type
operator|+
name|suffix
argument_list|,
name|getSequentialStringArrayWithInts
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|typesTested
operator|.
name|add
argument_list|(
literal|"*_p_"
operator|+
name|type
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|suffix
range|:
name|suffixes
control|)
block|{
name|doTestInternals
argument_list|(
literal|"number_p_dt"
operator|+
name|suffix
argument_list|,
name|getSequentialStringArrayWithDates
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|typesTested
operator|.
name|add
argument_list|(
literal|"*_p_dt"
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|typesToTest
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DynamicField
name|dynField
range|:
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getDynamicFields
argument_list|()
control|)
block|{
if|if
condition|(
name|dynField
operator|.
name|getPrototype
argument_list|()
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
condition|)
block|{
name|typesToTest
operator|.
name|add
argument_list|(
name|dynField
operator|.
name|getRegex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Missing types in the test"
argument_list|,
name|typesTested
argument_list|,
name|typesToTest
argument_list|)
expr_stmt|;
block|}
comment|// Helper methods
DECL|method|getRandomStringArrayWithDoubles
specifier|private
name|String
index|[]
name|getRandomStringArrayWithDoubles
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Double
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|double
name|f
init|=
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|*
operator|(
name|Double
operator|.
name|MAX_VALUE
operator|/
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|f
operator|=
name|f
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|double
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getRandomStringArrayWithFloats
specifier|private
name|String
index|[]
name|getRandomStringArrayWithFloats
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Float
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|float
name|f
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
operator|(
name|Float
operator|.
name|MAX_VALUE
operator|/
literal|2
operator|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|f
operator|=
name|f
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|float
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getSequentialStringArrayWithInts
specifier|private
name|String
index|[]
name|getSequentialStringArrayWithInts
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|getSequentialStringArrayWithDates
specifier|private
name|String
index|[]
name|getSequentialStringArrayWithDates
parameter_list|(
name|int
name|length
parameter_list|)
block|{
assert|assert
name|length
operator|<
literal|60
assert|;
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"1995-12-11T19:59:%02dZ"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|getSequentialStringArrayWithDoubles
specifier|private
name|String
index|[]
name|getSequentialStringArrayWithDoubles
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|String
index|[]
name|arr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%d.0"
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
DECL|method|getRandomStringArrayWithInts
specifier|private
name|String
index|[]
name|getRandomStringArrayWithInts
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|int
name|number
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|number
operator|=
name|number
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getRandomStringArrayWithLongs
specifier|private
name|String
index|[]
name|getRandomStringArrayWithLongs
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|long
name|number
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|number
operator|=
name|number
operator|*
operator|-
literal|1
expr_stmt|;
block|}
name|set
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|getRandomStringArrayWithDates
specifier|private
name|String
index|[]
name|getRandomStringArrayWithDates
parameter_list|(
name|int
name|length
parameter_list|,
name|boolean
name|sorted
parameter_list|)
block|{
assert|assert
name|length
operator|<
literal|60
assert|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
decl_stmt|;
if|if
condition|(
name|sorted
condition|)
block|{
name|set
operator|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|set
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
name|set
operator|.
name|size
argument_list|()
operator|<
name|length
condition|)
block|{
name|int
name|number
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|stringArr
init|=
operator|new
name|String
index|[
name|length
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|set
control|)
block|{
name|stringArr
index|[
name|i
index|]
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"1995-12-11T19:59:%02dZ"
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|stringArr
return|;
block|}
DECL|method|doTestFieldNotIndexed
specifier|private
name|void
name|doTestFieldNotIndexed
parameter_list|(
name|String
name|field
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|values
operator|.
name|length
operator|==
literal|10
assert|;
comment|// test preconditions
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"Field should be indexed=false"
argument_list|,
name|sf
operator|.
name|indexed
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Field should be docValues=false"
argument_list|,
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Can't search on index=false docValues=false field"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":[* TO *]"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|ref
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ref
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|ir
operator|=
name|ref
operator|.
name|get
argument_list|()
operator|.
name|getIndexReader
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should have no point values"
argument_list|,
literal|0
argument_list|,
name|PointValues
operator|.
name|size
argument_list|(
name|ir
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ref
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTestIntPointFieldExactQuery
specifier|private
name|void
name|doTestIntPointFieldExactQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|boolean
name|testLong
parameter_list|)
throws|throws
name|Exception
block|{
name|doTestIntPointFieldExactQuery
argument_list|(
name|field
argument_list|,
name|testLong
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param field the field to use for indexing and searching against    * @param testLong set to true if "field" is expected to support long values, false if only integers    * @param searchable set to true if searches against "field" should succeed, false if field is only stored and searches should always get numFound=0    */
DECL|method|doTestIntPointFieldExactQuery
specifier|private
name|void
name|doTestIntPointFieldExactQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|boolean
name|testLong
parameter_list|,
specifier|final
name|boolean
name|searchable
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|MATCH_ONE
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
specifier|final
name|String
name|MATCH_TWO
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"2"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"debug"
argument_list|,
literal|"true"
argument_list|,
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" OR "
operator|+
name|field
operator|+
literal|":"
operator|+
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|10
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|MATCH_TWO
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
if|if
condition|(
name|testLong
condition|)
block|{
for|for
control|(
name|long
name|i
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
init|;
name|i
operator|<
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
init|;
name|i
operator|<
operator|(
name|long
operator|)
name|Integer
operator|.
name|MAX_VALUE
operator|+
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldReturn
specifier|private
name|void
name|testPointFieldReturn
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|Exception
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
assert|assert
name|sf
operator|.
name|stored
argument_list|()
operator|||
operator|(
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|&&
name|sf
operator|.
name|useDocValuesAsStored
argument_list|()
operator|)
operator|:
literal|"Unexpected field definition for "
operator|+
name|field
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check using RTG
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"//doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[
name|values
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='"
operator|+
name|values
operator|.
name|length
operator|+
literal|"']"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|expected
index|[
name|i
operator|+
literal|1
index|]
operator|=
literal|"//result/doc[str[@name='id']='"
operator|+
name|i
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|"']"
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|,
literal|"rows"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|values
operator|.
name|length
argument_list|)
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Check using RTG
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"//doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestPointFieldNonSearchableRangeQuery
specifier|private
name|void
name|doTestPointFieldNonSearchableRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIntPointFieldRangeQuery
specifier|private
name|void
name|doTestIntPointFieldRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|testLong
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//result/doc[4]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"0=count(//result/doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0'])"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"0=count(//result/doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3'])"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"0=count(//result/doc/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3'])"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 1] OR "
operator|+
name|fieldName
operator|+
literal|":[8 TO 9]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='8']"
argument_list|,
literal|"//result/doc[4]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 1] AND "
operator|+
name|fieldName
operator|+
literal|":[1 TO 2]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 1] AND NOT "
operator|+
name|fieldName
operator|+
literal|":[1 TO 2]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
decl_stmt|;
if|if
condition|(
name|testLong
condition|)
block|{
name|arr
operator|=
name|getRandomStringArrayWithLongs
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arr
operator|=
name|getRandomStringArrayWithInts
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":["
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{"
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":["
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"] AND "
operator|+
name|fieldName
operator|+
literal|":"
operator|+
name|arr
index|[
literal|0
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPointFieldFacetField
specifier|private
name|void
name|testPointFieldFacetField
parameter_list|(
name|String
name|nonDocValuesField
parameter_list|,
name|String
name|docValuesField
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|10
assert|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|docValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|docValuesField
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|docValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|docValuesField
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
comment|//    assertU(commit());
comment|//    assertQ(req("q", "id:0", "fl", "id, " + docValuesField, "facet", "true", "facet.field", docValuesField, "facet.mincount", "0"),
comment|//        "//*[@numFound='1']",
comment|//        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='" + docValuesField +"']/int[@name='" + numbers[0] + "'][.='1']",
comment|//        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='" + docValuesField +"']/int[@name='" + numbers[1] + "'][.='0']",
comment|//        "//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='" + docValuesField +"']/int[@name='" + numbers[2] + "'][.='0']",
comment|//        "count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='" + docValuesField +"']/int))==10");
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't facet on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDocValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|nonDocValuesField
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIntPointFieldRangeFacet
specifier|private
name|void
name|doTestIntPointFieldRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIntPointFunctionQuery
specifier|private
name|void
name|doTestIntPointFunctionQuery
parameter_list|(
name|String
name|dvFieldName
parameter_list|,
name|String
name|nonDvFieldName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDvFieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|dvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='9']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='8']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='7']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-0.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-1.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-2.0']"
argument_list|,
literal|"//result/doc[10]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-9.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", field("
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='2']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='9']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|nonDvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointStats
specifier|private
name|void
name|testPointStats
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|dvField
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|,
name|double
name|min
parameter_list|,
name|double
name|max
parameter_list|,
name|String
name|count
parameter_list|,
name|String
name|missing
parameter_list|,
name|double
name|delta
parameter_list|)
block|{
name|String
name|minMin
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|min
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|min
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|maxMin
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|min
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|min
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|minMax
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|max
operator|-
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|max
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|maxMax
init|=
name|String
operator|.
name|valueOf
argument_list|(
name|max
operator|+
name|Math
operator|.
name|abs
argument_list|(
name|delta
operator|*
name|max
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numbers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|field
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numbers
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvField
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|dvField
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='min'][.>='"
operator|+
name|minMin
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='min'][.<='"
operator|+
name|maxMin
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='max'][.>='"
operator|+
name|minMax
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/double[@name='max'][.<='"
operator|+
name|maxMax
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/long[@name='count'][.='"
operator|+
name|count
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/long[@name='missing'][.='"
operator|+
name|missing
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't calculate stats on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|field
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldMultiValuedExactQuery
specifier|private
name|void
name|testPointFieldMultiValuedExactQuery
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
name|testPointFieldMultiValuedExactQuery
argument_list|(
name|fieldName
argument_list|,
name|numbers
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param fieldName the field to use for indexing and searching against    * @param numbers list of 20 values to index in 10 docs (pairwise)    * @param searchable set to true if searches against "field" should succeed, false if field is only stored and searches should always get numFound=0    */
DECL|method|testPointFieldMultiValuedExactQuery
specifier|private
name|void
name|testPointFieldMultiValuedExactQuery
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|String
index|[]
name|numbers
parameter_list|,
specifier|final
name|boolean
name|searchable
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|MATCH_ONE
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
specifier|final
name|String
name|MATCH_TWO
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"2"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|DatePointField
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":\""
operator|+
name|numbers
index|[
name|i
index|]
operator|+
literal|"\""
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|numbers
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|DatePointField
condition|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":\""
operator|+
name|numbers
index|[
name|i
index|]
operator|+
literal|"\""
operator|+
literal|" OR "
operator|+
name|fieldName
operator|+
literal|":\""
operator|+
name|numbers
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|10
index|]
operator|+
literal|"\""
argument_list|)
argument_list|,
name|MATCH_TWO
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|numbers
index|[
name|i
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
operator|+
literal|" OR "
operator|+
name|fieldName
operator|+
literal|":"
operator|+
name|numbers
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|10
index|]
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
argument_list|)
argument_list|,
name|MATCH_TWO
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testPointFieldMultiValuedReturn
specifier|private
name|void
name|testPointFieldMultiValuedReturn
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check using RTG before commit
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"//doc/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|,
literal|"//doc/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
name|i
operator|+
literal|10
index|]
operator|+
literal|"']"
argument_list|,
literal|"count(//doc/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=2"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check using RTG after commit
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"enable.update.log"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|"//doc/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
name|i
index|]
operator|+
literal|"']"
argument_list|,
literal|"//doc/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
name|i
operator|+
literal|10
index|]
operator|+
literal|"']"
argument_list|,
literal|"count(//doc/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=2"
argument_list|)
expr_stmt|;
block|}
block|}
name|String
index|[]
name|expected
init|=
operator|new
name|String
index|[
literal|21
index|]
decl_stmt|;
name|expected
index|[
literal|0
index|]
operator|=
literal|"//*[@numFound='10']"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|10
condition|;
name|i
operator|++
control|)
block|{
comment|// checks for each doc's two values aren't next to eachother in array, but that doesn't matter for correctness
name|expected
index|[
name|i
index|]
operator|=
literal|"//result/doc["
operator|+
name|i
operator|+
literal|"]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
name|i
operator|-
literal|1
index|]
operator|+
literal|"']"
expr_stmt|;
name|expected
index|[
name|i
operator|+
literal|10
index|]
operator|=
literal|"//result/doc["
operator|+
name|i
operator|+
literal|"]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
name|i
operator|+
literal|9
index|]
operator|+
literal|"']"
expr_stmt|;
block|}
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldMultiValuedRangeQuery
specifier|private
name|void
name|testPointFieldMultiValuedRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:[%s TO %s]"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|11
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|12
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[4]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[4]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[2][.='"
operator|+
name|numbers
index|[
literal|13
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:{%s TO %s]"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:[%s TO %s}"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:{%s TO %s}"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:{%s TO *}"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:{%s TO *}"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|10
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:{* TO %s}"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:[* TO %s}"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|3
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[10]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|9
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:[%s TO %s] OR %s:[%s TO %s]"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|8
index|]
argument_list|,
name|numbers
index|[
literal|9
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[2]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[3]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|8
index|]
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[4]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|9
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s:[%s TO %s] OR %s:[%s TO %s]"
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|numbers
index|[
literal|0
index|]
argument_list|,
name|fieldName
argument_list|,
name|numbers
index|[
literal|10
index|]
argument_list|,
name|numbers
index|[
literal|10
index|]
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|fieldName
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[1][.='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointFieldMultiValuedFacetField
specifier|private
name|void
name|testPointFieldMultiValuedFacetField
parameter_list|(
name|String
name|nonDocValuesField
parameter_list|,
name|String
name|dvFieldName
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|11
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|12
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|dvFieldName
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[not(@name)][.='0']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add missing values
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|,
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|1
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|2
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|3
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[not(@name)][.='1']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|,
literal|"facet.mincount"
argument_list|,
literal|"3"
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int)=0"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:0"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|0
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|numbers
index|[
literal|10
index|]
operator|+
literal|"'][.='1']"
argument_list|,
literal|"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int)=2"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't facet on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDocValuesField
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|nonDocValuesField
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|smaller
decl_stmt|,
name|larger
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Long
operator|.
name|parseLong
argument_list|(
name|numbers
index|[
literal|1
index|]
argument_list|)
operator|<
name|Long
operator|.
name|parseLong
argument_list|(
name|numbers
index|[
literal|2
index|]
argument_list|)
condition|)
block|{
name|smaller
operator|=
name|numbers
index|[
literal|1
index|]
expr_stmt|;
name|larger
operator|=
name|numbers
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|smaller
operator|=
name|numbers
index|[
literal|2
index|]
expr_stmt|;
name|larger
operator|=
name|numbers
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|Double
operator|.
name|valueOf
argument_list|(
name|numbers
index|[
literal|1
index|]
argument_list|)
operator|<
name|Double
operator|.
name|valueOf
argument_list|(
name|numbers
index|[
literal|2
index|]
argument_list|)
condition|)
block|{
name|smaller
operator|=
name|numbers
index|[
literal|1
index|]
expr_stmt|;
name|larger
operator|=
name|numbers
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|smaller
operator|=
name|numbers
index|[
literal|2
index|]
expr_stmt|;
name|larger
operator|=
name|numbers
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e2
parameter_list|)
block|{
if|if
condition|(
name|DateMathParser
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|numbers
index|[
literal|1
index|]
argument_list|)
operator|.
name|getTime
argument_list|()
operator|<
name|DateMathParser
operator|.
name|parseMath
argument_list|(
literal|null
argument_list|,
name|numbers
index|[
literal|2
index|]
argument_list|)
operator|.
name|getTime
argument_list|()
condition|)
block|{
name|smaller
operator|=
name|numbers
index|[
literal|1
index|]
expr_stmt|;
name|larger
operator|=
name|numbers
index|[
literal|2
index|]
expr_stmt|;
block|}
else|else
block|{
name|smaller
operator|=
name|numbers
index|[
literal|2
index|]
expr_stmt|;
name|larger
operator|=
name|numbers
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|dvFieldName
argument_list|,
name|smaller
argument_list|,
name|dvFieldName
argument_list|,
name|larger
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|dvFieldName
argument_list|,
name|larger
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|larger
operator|+
literal|"'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|smaller
operator|+
literal|"'][.='1']"
argument_list|,
literal|"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int)=2"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
name|dvFieldName
argument_list|,
literal|"facet.sort"
argument_list|,
literal|"index"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|smaller
operator|+
literal|"'][.='1']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int[@name='"
operator|+
name|larger
operator|+
literal|"'][.='2']"
argument_list|,
literal|"count(//lst[@name='facet_counts']/lst[@name='facet_fields']/lst[@name='"
operator|+
name|dvFieldName
operator|+
literal|"']/int)=2"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPointMultiValuedFunctionQuery
specifier|private
name|void
name|testPointMultiValuedFunctionQuery
parameter_list|(
name|String
name|nonDocValuesField
parameter_list|,
name|String
name|docValuesField
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|numbers
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|numbers
operator|!=
literal|null
operator|&&
name|numbers
operator|.
name|length
operator|==
literal|20
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|docValuesField
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
index|]
argument_list|,
name|nonDocValuesField
argument_list|,
name|numbers
index|[
name|i
operator|+
literal|10
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|String
name|function
init|=
literal|"field("
operator|+
name|docValuesField
operator|+
literal|", min)"
decl_stmt|;
comment|//    assertQ(req("q", "*:*", "fl", "id, " + function),
comment|//        "//*[@numFound='10']",
comment|//        "//result/doc[1]/" + type + "[@name='" + function + "'][.='" + numbers[0] + "']",
comment|//        "//result/doc[2]/" + type + "[@name='" + function + "'][.='" + numbers[1] + "']",
comment|//        "//result/doc[3]/" + type + "[@name='" + function + "'][.='" + numbers[2] + "']",
comment|//        "//result/doc[10]/" + type + "[@name='" + function + "'][.='" + numbers[9] + "']");
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|docValuesField
argument_list|,
literal|"sort"
argument_list|,
name|function
operator|+
literal|" desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='9']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='8']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='7']"
argument_list|,
literal|"//result/doc[10]/str[@name='id'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|function
operator|=
literal|"field("
operator|+
name|nonDocValuesField
operator|+
literal|",min)"
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|function
operator|+
literal|" desc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"docValues='true' is required to select 'min' value from multivalued field ("
operator|+
name|nonDocValuesField
operator|+
literal|") at query time"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|function
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
name|function
operator|=
literal|"field("
operator|+
name|docValuesField
operator|+
literal|",foo)"
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Multi-Valued field selector 'foo' not supported"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|function
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedIntPointFieldsAtomicUpdates
specifier|private
name|void
name|testMultiValuedIntPointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='1']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"add"
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='1']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='2']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=2"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"remove"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='2']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='1']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='2']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='3']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=3"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"removeregex"
argument_list|,
literal|".*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedFloatPointFieldsAtomicUpdates
specifier|private
name|void
name|testMultiValuedFloatPointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"1.0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='1.0']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"add"
argument_list|,
literal|2.1f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='1.0']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='2.1']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=2"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"remove"
argument_list|,
literal|1f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='2.1']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
literal|1f
argument_list|,
literal|2f
argument_list|,
literal|3f
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='1.0']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='2.0']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='3.0']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=3"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"removeregex"
argument_list|,
literal|".*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=0"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIntPointFieldsAtomicUpdates
specifier|private
name|void
name|testIntPointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
literal|"1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='2']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"inc"
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='1']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='3']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloatPointFieldExactQuery
specifier|private
name|void
name|doTestFloatPointFieldExactQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|)
throws|throws
name|Exception
block|{
name|doTestFloatPointFieldExactQuery
argument_list|(
name|field
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param field the field to use for indexing and searching against    * @param searchable set to true if searches against "field" should succeed, false if field is only stored and searches should always get numFound=0    */
DECL|method|doTestFloatPointFieldExactQuery
specifier|private
name|void
name|doTestFloatPointFieldExactQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|boolean
name|searchable
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|MATCH_ONE
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
specifier|final
name|String
name|MATCH_TWO
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"2"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|"."
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
name|i
operator|++
control|)
block|{
name|String
name|num1
init|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
decl_stmt|;
name|String
name|num2
init|=
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|9
operator|+
literal|1
operator|)
operator|+
literal|"."
operator|+
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|9
operator|+
literal|1
operator|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|num1
operator|+
literal|" OR "
operator|+
name|field
operator|+
literal|":"
operator|+
name|num2
argument_list|)
argument_list|,
name|MATCH_TWO
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|float
name|rand
init|=
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"random_number "
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|rand
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//always the same id to override
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":"
operator|+
name|rand
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestPointFieldSort
specifier|private
name|void
name|doTestPointFieldSort
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|dvField
parameter_list|,
name|String
index|[]
name|arr
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|arr
operator|!=
literal|null
operator|&&
name|arr
operator|.
name|length
operator|==
literal|10
assert|;
for|for
control|(
name|int
name|i
init|=
name|arr
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|dvField
operator|+
literal|" desc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/str[@name='id'][.='9']"
argument_list|,
literal|"//result/doc[2]/str[@name='id'][.='8']"
argument_list|,
literal|"//result/doc[3]/str[@name='id'][.='7']"
argument_list|,
literal|"//result/doc[10]/str[@name='id'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"can not sort on a PointField without doc values: "
operator|+
name|field
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"sort"
argument_list|,
name|field
operator|+
literal|" desc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
comment|//TODO: sort missing
block|}
DECL|method|doTestFloatPointFieldRangeQuery
specifier|private
name|void
name|doTestFloatPointFieldRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
name|type
parameter_list|,
name|boolean
name|testDouble
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|,
literal|"//result/doc[4]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='3.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0 TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO 3}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='2.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='0.0']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='9.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[0.9 TO 1.01]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{0.9 TO 1.01}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1.0']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|arr
decl_stmt|;
if|if
condition|(
name|testDouble
condition|)
block|{
name|arr
operator|=
name|getRandomStringArrayWithDoubles
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|arr
operator|=
name|getRandomStringArrayWithFloats
argument_list|(
literal|10
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|arr
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arr
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":["
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":{"
operator|+
name|arr
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|arr
index|[
name|i
index|]
operator|+
literal|"}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
operator|(
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|i
operator|-
literal|1
argument_list|)
operator|)
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|doTestFloatPointFieldRangeFacet
specifier|private
name|void
name|doTestFloatPointFieldRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"10"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestFloatPointFunctionQuery
specifier|private
name|void
name|doTestFloatPointFunctionQuery
parameter_list|(
name|String
name|dvFieldName
parameter_list|,
name|String
name|nonDvFieldName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|,
name|nonDvFieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%f"
argument_list|,
operator|(
name|float
operator|)
name|i
operator|*
literal|1.1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|dvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='9.9']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='8.8']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='7.7']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='0.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-0.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-1.1']"
argument_list|,
literal|"//result/doc[3]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-2.2']"
argument_list|,
literal|"//result/doc[10]/float[@name='product(-1,"
operator|+
name|dvFieldName
operator|+
literal|")'][.='-9.9']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", field("
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='0.0']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1.1']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='2.2']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='9.9']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|nonDvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestSetQueries
specifier|private
name|void
name|doTestSetQueries
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|boolean
name|multiValued
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sf
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!term f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!terms f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|","
operator|+
name|values
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|values
operator|.
name|length
operator|>
name|SolrQueryParser
operator|.
name|TERMS_QUERY_THRESHOLD
argument_list|)
expr_stmt|;
name|int
name|numTerms
init|=
name|SolrQueryParser
operator|.
name|TERMS_QUERY_THRESHOLD
operator|+
literal|1
decl_stmt|;
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|fieldName
operator|+
literal|":("
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numTerms
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getNumberType
argument_list|()
operator|==
name|NumberType
operator|.
name|DATE
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|":"
argument_list|,
literal|"\\:"
argument_list|)
operator|+
literal|' '
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
operator|.
name|replace
argument_list|(
literal|"-"
argument_list|,
literal|"\\-"
argument_list|)
operator|+
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
if|if
condition|(
name|sf
operator|.
name|indexed
argument_list|()
condition|)
block|{
comment|// SolrQueryParser should also be generating a PointInSetQuery if indexed
name|assertQ
argument_list|(
name|req
argument_list|(
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|numTerms
operator|+
literal|"']"
argument_list|,
literal|"//*[@name='parsed_filter_queries']/str[.='("
operator|+
name|getSetQueryToString
argument_list|(
name|fieldName
argument_list|,
name|values
argument_list|,
name|numTerms
argument_list|)
operator|+
literal|")']"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Won't use PointInSetQuery if the fiels is not indexed, but should match the same docs
name|assertQ
argument_list|(
name|req
argument_list|(
name|CommonParams
operator|.
name|DEBUG
argument_list|,
name|CommonParams
operator|.
name|QUERY
argument_list|,
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|builder
operator|.
name|toString
argument_list|()
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='"
operator|+
name|numTerms
operator|+
literal|"']"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|multiValued
condition|)
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|values
index|[
name|i
index|]
argument_list|,
name|fieldName
argument_list|,
name|values
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!term f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!terms f='"
operator|+
name|fieldName
operator|+
literal|"'}"
operator|+
name|values
index|[
name|i
index|]
operator|+
literal|","
operator|+
name|values
index|[
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
name|values
operator|.
name|length
index|]
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|getSetQueryToString
specifier|private
name|String
name|getSetQueryToString
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|String
index|[]
name|values
parameter_list|,
name|int
name|numTerms
parameter_list|)
block|{
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|sf
operator|.
name|getType
argument_list|()
operator|.
name|getSetQuery
argument_list|(
literal|null
argument_list|,
name|sf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|copyOf
argument_list|(
name|values
argument_list|,
name|numTerms
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|doTestDoublePointFieldMultiValuedRangeFacet
specifier|private
name|void
name|doTestDoublePointFieldMultiValuedRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='10']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|multiValued
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18.0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10.0'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestIntPointFieldMultiValuedRangeFacet
specifier|private
name|void
name|doTestIntPointFieldMultiValuedRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|nonDocValuesField
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"0"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='10']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"-10"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"20"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"2"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='0'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='2'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='4'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='6'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='8'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='10'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='12'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='14'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='16'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='18'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='-10'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDatePointFieldExactQuery
specifier|private
name|void
name|doTestDatePointFieldExactQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|baseDate
parameter_list|)
throws|throws
name|Exception
block|{
name|doTestDatePointFieldExactQuery
argument_list|(
name|field
argument_list|,
name|baseDate
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param field the field to use for indexing and searching against    * @param baseDate basic value to use for indexing and searching    * @param searchable set to true if searches against "field" should succeed, false if field is only stored and searches should always get numFound=0    */
DECL|method|doTestDatePointFieldExactQuery
specifier|private
name|void
name|doTestDatePointFieldExactQuery
parameter_list|(
specifier|final
name|String
name|field
parameter_list|,
specifier|final
name|String
name|baseDate
parameter_list|,
specifier|final
name|boolean
name|searchable
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|MATCH_ONE
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"1"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
specifier|final
name|String
name|MATCH_TWO
init|=
literal|"//*[@numFound='"
operator|+
operator|(
name|searchable
condition|?
literal|"2"
else|:
literal|"0"
operator|)
operator|+
literal|"']"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dMINUTES"
argument_list|,
name|baseDate
argument_list|,
name|i
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|date
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dMINUTES"
argument_list|,
name|baseDate
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":\""
operator|+
name|date
operator|+
literal|"\""
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|)
argument_list|,
name|MATCH_ONE
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|date1
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dMINUTES"
argument_list|,
name|baseDate
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|String
name|date2
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dMINUTES"
argument_list|,
name|baseDate
argument_list|,
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|%
literal|10
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|field
operator|+
literal|":\""
operator|+
name|date1
operator|+
literal|"\""
operator|+
literal|" OR "
operator|+
name|field
operator|+
literal|":\""
operator|+
name|date2
operator|+
literal|"\""
argument_list|)
argument_list|,
name|MATCH_TWO
argument_list|)
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDatePointFieldRangeQuery
specifier|private
name|void
name|doTestDatePointFieldRangeQuery
parameter_list|(
name|String
name|fieldName
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseDate
init|=
literal|"1995-12-31T10:59:59Z"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|fieldName
argument_list|,
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dHOURS"
argument_list|,
name|baseDate
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+0HOURS TO %s+3HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|,
literal|"//result/doc[2]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|,
literal|"//result/doc[3]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T12:59:59Z']"
argument_list|,
literal|"//result/doc[4]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T13:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"{%s+0HOURS TO %s+3HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|,
literal|"//result/doc[2]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T12:59:59Z']"
argument_list|,
literal|"//result/doc[3]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T13:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+0HOURS TO %s+3HOURS}"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|,
literal|"//result/doc[2]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|,
literal|"//result/doc[3]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T12:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"{%s+0HOURS TO %s+3HOURS}"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|,
literal|"//result/doc[2]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T12:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"{%s+0HOURS TO *}"
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='9']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"{* TO %s+3HOURS}"
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[* TO %s+3HOURS}"
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='3']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":[* TO *}"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|,
literal|"//result/doc[10]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T19:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+0HOURS TO %s+1HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
operator|+
literal|" OR "
operator|+
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+8HOURS TO %s+9HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='4']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|,
literal|"//result/doc[2]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|,
literal|"//result/doc[3]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T18:59:59Z']"
argument_list|,
literal|"//result/doc[4]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T19:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+0HOURS TO %s+1HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
operator|+
literal|" AND "
operator|+
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+1HOURS TO %s+2HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T11:59:59Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+0HOURS TO %s+1HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
operator|+
literal|" AND NOT "
operator|+
name|fieldName
operator|+
literal|":"
operator|+
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"[%s+1HOURS TO %s+2HOURS]"
argument_list|,
name|baseDate
argument_list|,
name|baseDate
argument_list|)
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|,
literal|"//result/doc[1]/date[@name='"
operator|+
name|fieldName
operator|+
literal|"'][.='1995-12-31T10:59:59Z']"
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDatePointFieldRangeFacet
specifier|private
name|void
name|doTestDatePointFieldRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseDate
init|=
literal|"1995-01-10T10:59:59Z"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|date
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dDAYS"
argument_list|,
name|baseDate
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|date
argument_list|,
name|nonDocValuesField
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+10DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-08T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+10DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-08T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+10DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-08T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+10DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-08T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDatePointFieldMultiValuedRangeFacet
specifier|private
name|void
name|doTestDatePointFieldMultiValuedRangeFacet
parameter_list|(
name|String
name|docValuesField
parameter_list|,
name|String
name|nonDocValuesField
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseDate
init|=
literal|"1995-01-10T10:59:59Z"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|String
name|date1
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dDAYS"
argument_list|,
name|baseDate
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|date2
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dDAYS"
argument_list|,
name|baseDate
argument_list|,
name|i
operator|+
literal|10
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|docValuesField
argument_list|,
name|date1
argument_list|,
name|docValuesField
argument_list|,
name|date2
argument_list|,
name|nonDocValuesField
argument_list|,
name|date1
argument_list|,
name|nonDocValuesField
argument_list|,
name|date2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|docValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+20DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-20T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-22T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-24T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-26T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-28T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1994-12-31T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+20DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-20T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-22T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-24T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-26T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-28T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1994-12-31T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|docValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+20DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+100DAYS"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|docValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='10']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDocValuesField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
comment|// Range Faceting with method = filter should work
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+20DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"filter"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-20T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-22T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-24T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-26T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-28T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1994-12-31T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
comment|// this should actually use filter method instead of dv
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.range"
argument_list|,
name|nonDocValuesField
argument_list|,
literal|"facet.range.start"
argument_list|,
literal|"1995-01-10T10:59:59Z-10DAYS"
argument_list|,
literal|"facet.range.end"
argument_list|,
literal|"1995-01-10T10:59:59Z+20DAYS"
argument_list|,
literal|"facet.range.gap"
argument_list|,
literal|"+2DAYS"
argument_list|,
literal|"facet.range.method"
argument_list|,
literal|"dv"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-10T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-12T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-14T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-16T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-18T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-20T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-22T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-24T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-26T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1995-01-28T10:59:59Z'][.='2']"
argument_list|,
literal|"//lst[@name='facet_counts']/lst[@name='facet_ranges']/lst[@name='"
operator|+
name|nonDocValuesField
operator|+
literal|"']/lst[@name='counts']/int[@name='1994-12-31T10:59:59Z'][.='0']"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDatePointFunctionQuery
specifier|private
name|void
name|doTestDatePointFunctionQuery
parameter_list|(
name|String
name|dvFieldName
parameter_list|,
name|String
name|nonDvFieldName
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|baseDate
init|=
literal|"1995-01-10T10:59:10Z"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|9
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|String
name|date
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s+%dSECONDS"
argument_list|,
name|baseDate
argument_list|,
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvFieldName
argument_list|,
name|date
argument_list|,
name|nonDvFieldName
argument_list|,
name|date
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,ms("
operator|+
name|dvFieldName
operator|+
literal|")) asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='1995-01-10T10:59:20Z']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='1995-01-10T10:59:19Z']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='1995-01-10T10:59:18Z']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|dvFieldName
operator|+
literal|"'][.='1995-01-10T10:59:11Z']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", ms("
operator|+
name|dvFieldName
operator|+
literal|","
operator|+
name|baseDate
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/float[@name='ms("
operator|+
name|dvFieldName
operator|+
literal|","
operator|+
name|baseDate
operator|+
literal|")'][.='1000.0']"
argument_list|,
literal|"//result/doc[2]/float[@name='ms("
operator|+
name|dvFieldName
operator|+
literal|","
operator|+
name|baseDate
operator|+
literal|")'][.='2000.0']"
argument_list|,
literal|"//result/doc[3]/float[@name='ms("
operator|+
name|dvFieldName
operator|+
literal|","
operator|+
name|baseDate
operator|+
literal|")'][.='3000.0']"
argument_list|,
literal|"//result/doc[10]/float[@name='ms("
operator|+
name|dvFieldName
operator|+
literal|","
operator|+
name|baseDate
operator|+
literal|")'][.='10000.0']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvFieldName
operator|+
literal|", field("
operator|+
name|dvFieldName
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1995-01-10T10:59:11Z']"
argument_list|,
literal|"//result/doc[2]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1995-01-10T10:59:12Z']"
argument_list|,
literal|"//result/doc[3]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1995-01-10T10:59:13Z']"
argument_list|,
literal|"//result/doc[10]/"
operator|+
name|type
operator|+
literal|"[@name='field("
operator|+
name|dvFieldName
operator|+
literal|")'][.='1995-01-10T10:59:20Z']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|nonDvFieldName
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"sort param could not be parsed as a query"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|nonDvFieldName
argument_list|,
literal|"sort"
argument_list|,
literal|"product(-1,"
operator|+
name|nonDvFieldName
operator|+
literal|") asc"
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testDatePointStats
specifier|private
name|void
name|testDatePointStats
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|dvField
parameter_list|,
name|String
index|[]
name|dates
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dates
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|dvField
argument_list|,
name|dates
index|[
name|i
index|]
argument_list|,
name|field
argument_list|,
name|dates
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|dates
operator|.
name|length
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|dvField
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|dvField
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|dvField
argument_list|)
argument_list|,
literal|"//*[@numFound='11']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/date[@name='min'][.='"
operator|+
name|dates
index|[
literal|0
index|]
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/date[@name='max'][.='"
operator|+
name|dates
index|[
name|dates
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/long[@name='count'][.='"
operator|+
name|dates
operator|.
name|length
operator|+
literal|"']"
argument_list|,
literal|"//lst[@name='stats']/lst[@name='stats_fields']/lst[@name='"
operator|+
name|dvField
operator|+
literal|"']/long[@name='missing'][.='1']"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|hasDocValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
name|assertQEx
argument_list|(
literal|"Expecting Exception"
argument_list|,
literal|"Can't calculate stats on a PointField without docValues"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id, "
operator|+
name|field
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|,
literal|"stats.field"
argument_list|,
name|field
argument_list|)
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|)
expr_stmt|;
block|}
DECL|method|testDatePointFieldsAtomicUpdates
specifier|private
name|void
name|testDatePointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|date
init|=
literal|"1995-01-10T10:59:10Z"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|date
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='"
operator|+
name|date
operator|+
literal|"']"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
name|date
operator|+
literal|"+2DAYS"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/"
operator|+
name|type
operator|+
literal|"[@name='"
operator|+
name|field
operator|+
literal|"'][.='1995-01-12T10:59:10Z']"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValuedDatePointFieldsAtomicUpdates
specifier|private
name|void
name|testMultiValuedDatePointFieldsAtomicUpdates
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|date1
init|=
literal|"1995-01-10T10:59:10Z"
decl_stmt|;
name|String
name|date2
init|=
literal|"1995-01-11T10:59:10Z"
decl_stmt|;
name|String
name|date3
init|=
literal|"1995-01-12T10:59:10Z"
decl_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|date1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date1
operator|+
literal|"']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"add"
argument_list|,
name|date2
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date1
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date2
operator|+
literal|"']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=2"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"remove"
argument_list|,
name|date1
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date2
operator|+
literal|"']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=1"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"set"
argument_list|,
name|ImmutableList
operator|.
name|of
argument_list|(
name|date1
argument_list|,
name|date2
argument_list|,
name|date3
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date1
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date2
operator|+
literal|"']"
argument_list|,
literal|"//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|"[.='"
operator|+
name|date3
operator|+
literal|"']"
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=3"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|field
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"removeregex"
argument_list|,
literal|".*"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"count(//result/doc[1]/arr[@name='"
operator|+
name|field
operator|+
literal|"']/"
operator|+
name|type
operator|+
literal|")=0"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestInternals
specifier|private
name|void
name|doTestInternals
parameter_list|(
name|String
name|field
parameter_list|,
name|String
index|[]
name|values
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|field
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|ref
init|=
literal|null
decl_stmt|;
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|boolean
name|ignoredField
init|=
operator|!
operator|(
name|sf
operator|.
name|indexed
argument_list|()
operator|||
name|sf
operator|.
name|stored
argument_list|()
operator|||
name|sf
operator|.
name|hasDocValues
argument_list|()
operator|)
decl_stmt|;
try|try
block|{
name|ref
operator|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
expr_stmt|;
name|SolrIndexSearcher
name|searcher
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
name|ir
operator|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
expr_stmt|;
if|if
condition|(
name|sf
operator|.
name|indexed
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should have point values"
argument_list|,
literal|10
argument_list|,
name|PointValues
operator|.
name|size
argument_list|(
name|ir
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should have no point values"
argument_list|,
literal|0
argument_list|,
name|PointValues
operator|.
name|size
argument_list|(
name|ir
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ignoredField
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should not have docValues"
argument_list|,
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should not have docValues"
argument_list|,
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should not have docValues"
argument_list|,
name|DocValues
operator|.
name|getSorted
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should not have docValues"
argument_list|,
name|DocValues
operator|.
name|getBinary
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
if|if
condition|(
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should have docValues"
argument_list|,
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" should have docValues"
argument_list|,
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
operator|.
name|nextDoc
argument_list|()
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValues
operator|.
name|getNumeric
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValues
operator|.
name|getSorted
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|DocValues
operator|.
name|getBinary
argument_list|(
name|searcher
operator|.
name|getSlowAtomicReader
argument_list|()
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LeafReaderContext
name|leave
range|:
name|ir
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|reader
init|=
name|leave
operator|.
name|reader
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|numDocs
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
name|reader
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|.
name|stored
argument_list|()
condition|)
block|{
name|assertNotNull
argument_list|(
literal|"Field "
operator|+
name|field
operator|+
literal|" not found. Doc: "
operator|+
name|doc
argument_list|,
name|doc
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|doc
operator|.
name|get
argument_list|(
name|field
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|ref
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testNonReturnable
specifier|public
name|void
name|testNonReturnable
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_i_ni_ns"
argument_list|,
literal|false
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_i_ni_dv_ns"
argument_list|,
literal|true
argument_list|,
literal|"42"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_i_ni_ns_mv"
argument_list|,
literal|false
argument_list|,
literal|"42"
argument_list|,
literal|"666"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_i_ni_dv_ns_mv"
argument_list|,
literal|true
argument_list|,
literal|"42"
argument_list|,
literal|"666"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_l_ni_ns"
argument_list|,
literal|false
argument_list|,
literal|"3333333333"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_l_ni_dv_ns"
argument_list|,
literal|true
argument_list|,
literal|"3333333333"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_l_ni_ns_mv"
argument_list|,
literal|false
argument_list|,
literal|"3333333333"
argument_list|,
literal|"-4444444444"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_l_ni_dv_ns_mv"
argument_list|,
literal|true
argument_list|,
literal|"3333333333"
argument_list|,
literal|"-4444444444"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_f_ni_ns"
argument_list|,
literal|false
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_f_ni_dv_ns"
argument_list|,
literal|true
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_f_ni_ns_mv"
argument_list|,
literal|false
argument_list|,
literal|"42.3"
argument_list|,
literal|"-66.6"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_f_ni_dv_ns_mv"
argument_list|,
literal|true
argument_list|,
literal|"42.3"
argument_list|,
literal|"-66.6"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_d_ni_ns"
argument_list|,
literal|false
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_d_ni_dv_ns"
argument_list|,
literal|true
argument_list|,
literal|"42.3"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_d_ni_ns_mv"
argument_list|,
literal|false
argument_list|,
literal|"42.3"
argument_list|,
literal|"-66.6"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_d_ni_dv_ns_mv"
argument_list|,
literal|true
argument_list|,
literal|"42.3"
argument_list|,
literal|"-66.6"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_dt_ni_ns"
argument_list|,
literal|false
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_dt_ni_dv_ns"
argument_list|,
literal|true
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_dt_ni_ns_mv"
argument_list|,
literal|false
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|"2000-12-31T23:59:59Z+3DAYS"
argument_list|)
expr_stmt|;
name|doTestReturnNonStored
argument_list|(
literal|"foo_p_dt_ni_dv_ns_mv"
argument_list|,
literal|true
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|"2000-12-31T23:59:59Z+3DAYS"
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestReturnNonStored
specifier|public
name|void
name|doTestReturnNonStored
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
name|boolean
name|shouldReturnFieldIfRequested
parameter_list|,
specifier|final
name|String
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|RETURN_FIELD
init|=
literal|"count(//doc/*[@name='"
operator|+
name|fieldName
operator|+
literal|"'])=10"
decl_stmt|;
specifier|final
name|String
name|DONT_RETURN_FIELD
init|=
literal|"count(//doc/*[@name='"
operator|+
name|fieldName
operator|+
literal|"'])=0"
decl_stmt|;
name|assertFalse
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|.
name|stored
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
name|sdoc
argument_list|(
literal|"id"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|fieldName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"100"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|fieldName
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"count(//doc)=10"
argument_list|,
comment|// exactly 10 docs in response
operator|(
name|shouldReturnFieldIfRequested
condition|?
name|RETURN_FIELD
else|:
name|DONT_RETURN_FIELD
operator|)
argument_list|)
expr_stmt|;
comment|// no field in any doc other then 'id'
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"100"
argument_list|,
literal|"fl"
argument_list|,
literal|"*"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"count(//doc)=10"
argument_list|,
comment|// exactly 10 docs in response
name|DONT_RETURN_FIELD
argument_list|)
expr_stmt|;
comment|// no field in any doc other then 'id'
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"100"
argument_list|)
argument_list|,
literal|"//*[@numFound='10']"
argument_list|,
literal|"count(//doc)=10"
argument_list|,
comment|// exactly 10 docs in response
name|DONT_RETURN_FIELD
argument_list|)
expr_stmt|;
comment|// no field in any doc other then 'id'
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testWhiteboxCreateFields
specifier|public
name|void
name|testWhiteboxCreateFields
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|typeNames
init|=
operator|new
name|String
index|[]
block|{
literal|"i"
block|,
literal|"l"
block|,
literal|"f"
block|,
literal|"d"
block|,
literal|"dt"
block|}
decl_stmt|;
name|String
index|[]
name|suffixes
init|=
operator|new
name|String
index|[]
block|{
literal|""
block|,
literal|"_dv"
block|,
literal|"_mv"
block|,
literal|"_mv_dv"
block|,
literal|"_ni"
block|,
literal|"_ni_dv"
block|,
literal|"_ni_dv_ns"
block|,
literal|"_ni_dv_ns_mv"
block|,
literal|"_ni_mv"
block|,
literal|"_ni_mv_dv"
block|,
literal|"_ni_ns"
block|,
literal|"_ni_ns_mv"
block|,
literal|"_dv_ns"
block|,
literal|"_ni_ns_dv"
block|,
literal|"_dv_ns_mv"
block|}
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|expectedClasses
init|=
operator|new
name|Class
index|[]
block|{
name|IntPoint
operator|.
name|class
block|,
name|LongPoint
operator|.
name|class
block|,
name|FloatPoint
operator|.
name|class
block|,
name|DoublePoint
operator|.
name|class
block|,
name|LongPoint
operator|.
name|class
block|}
decl_stmt|;
name|Date
name|dateToTest
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|Object
index|[]
index|[]
name|values
init|=
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|42
block|,
literal|"42"
block|}
block|,
block|{
literal|42
block|,
literal|"42"
block|}
block|,
block|{
literal|42.123
block|,
literal|"42.123"
block|}
block|,
block|{
literal|12345.6789
block|,
literal|"12345.6789"
block|}
block|,
block|{
name|dateToTest
block|,
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd'T'HH:mm:ss'Z'"
argument_list|,
name|Locale
operator|.
name|ROOT
argument_list|)
operator|.
name|format
argument_list|(
name|dateToTest
argument_list|)
block|,
literal|"NOW"
block|}
comment|// "NOW" won't be equal to the other dates
block|}
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|typesTested
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|suffix
range|:
name|suffixes
control|)
block|{
name|doWhiteboxCreateFields
argument_list|(
literal|"whitebox_p_"
operator|+
name|typeNames
index|[
name|i
index|]
operator|+
name|suffix
argument_list|,
name|expectedClasses
index|[
name|i
index|]
argument_list|,
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|typesTested
operator|.
name|add
argument_list|(
literal|"*_p_"
operator|+
name|typeNames
index|[
name|i
index|]
operator|+
name|suffix
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|typesToTest
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DynamicField
name|dynField
range|:
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getDynamicFields
argument_list|()
control|)
block|{
if|if
condition|(
name|dynField
operator|.
name|getPrototype
argument_list|()
operator|.
name|getType
argument_list|()
operator|instanceof
name|PointField
condition|)
block|{
name|typesToTest
operator|.
name|add
argument_list|(
name|dynField
operator|.
name|getRegex
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
literal|"Missing types in the test"
argument_list|,
name|typesTested
argument_list|,
name|typesToTest
argument_list|)
expr_stmt|;
block|}
comment|/**     * Calls {@link #callAndCheckCreateFields} on each of the specified values.    * This is a convinience method for testing the same fieldname with multiple inputs.    *    * @see #callAndCheckCreateFields    */
DECL|method|doWhiteboxCreateFields
specifier|private
name|void
name|doWhiteboxCreateFields
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|pointType
parameter_list|,
specifier|final
name|Object
modifier|...
name|values
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Object
name|value
range|:
name|values
control|)
block|{
comment|// ideally we should require that all input values be diff forms of the same logical value
comment|// (ie '"42"' vs 'new Integer(42)') and assert that each produces an equivilent list of IndexableField objects
comment|// but that doesn't seem to work -- appears not all IndexableField classes override Object.equals?
specifier|final
name|List
argument_list|<
name|IndexableField
argument_list|>
name|result
init|=
name|callAndCheckCreateFields
argument_list|(
name|fieldName
argument_list|,
name|pointType
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|value
operator|+
literal|" => null"
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**     * Calls {@link SchemaField#createFields} on the specified value for the specified field name, and asserts     * that the results match the SchemaField propeties, with an additional check that the<code>pointType</code>     * is included if and only if the SchemaField is "indexed"     */
DECL|method|callAndCheckCreateFields
specifier|private
name|List
argument_list|<
name|IndexableField
argument_list|>
name|callAndCheckCreateFields
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|pointType
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SchemaField
name|sf
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|IndexableField
argument_list|>
name|results
init|=
name|sf
operator|.
name|createFields
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|IndexableField
argument_list|>
name|resultSet
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|(
name|results
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"duplicates found in results? "
operator|+
name|results
operator|.
name|toString
argument_list|()
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|,
name|resultSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|>
name|resultClasses
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|IndexableField
name|f
range|:
name|results
control|)
block|{
name|resultClasses
operator|.
name|add
argument_list|(
name|f
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sf
operator|.
name|hasDocValues
argument_list|()
condition|)
block|{
name|assertFalse
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|,
operator|(
name|f
operator|instanceof
name|NumericDocValuesField
operator|)
operator|||
operator|(
name|f
operator|instanceof
name|SortedNumericDocValuesField
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|fieldName
operator|+
literal|" stored? Result Fields: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|results
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|sf
operator|.
name|stored
argument_list|()
argument_list|,
name|resultClasses
operator|.
name|contains
argument_list|(
name|StoredField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldName
operator|+
literal|" indexed? Result Fields: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|results
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|sf
operator|.
name|indexed
argument_list|()
argument_list|,
name|resultClasses
operator|.
name|contains
argument_list|(
name|pointType
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sf
operator|.
name|multiValued
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|fieldName
operator|+
literal|" docvalues? Result Fields: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|results
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|,
name|resultClasses
operator|.
name|contains
argument_list|(
name|SortedNumericDocValuesField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|fieldName
operator|+
literal|" docvalues? Result Fields: "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|results
operator|.
name|toArray
argument_list|()
argument_list|)
argument_list|,
name|sf
operator|.
name|hasDocValues
argument_list|()
argument_list|,
name|resultClasses
operator|.
name|contains
argument_list|(
name|NumericDocValuesField
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
block|}
end_class

end_unit

