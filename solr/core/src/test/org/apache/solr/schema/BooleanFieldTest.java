begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|BooleanFieldTest
specifier|public
class|class
name|BooleanFieldTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-basic.xml"
argument_list|,
literal|"schema15.xml"
argument_list|)
expr_stmt|;
block|}
comment|// Note, docValues-based boolean tests are tested elsewhere refering to more appropriate schemas
annotation|@
name|Test
DECL|method|testBoolField
specifier|public
name|void
name|testBoolField
parameter_list|()
block|{
comment|// found an odd case when adding booleans to docValues and noticed that we didn't have any boolean
comment|// specific tests. Only caught the odd case by accident so let's have a place for explicit tests
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// missing
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"bind"
argument_list|,
literal|"true"
argument_list|,
literal|"bsto"
argument_list|,
literal|"true"
argument_list|,
literal|"bindsto"
argument_list|,
literal|"true"
argument_list|,
literal|"bindstom"
argument_list|,
literal|"true"
argument_list|,
literal|"bindstom"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"bind"
argument_list|,
literal|"false"
argument_list|,
literal|"bsto"
argument_list|,
literal|"false"
argument_list|,
literal|"bindsto"
argument_list|,
literal|"false"
argument_list|,
literal|"bindstom"
argument_list|,
literal|"false"
argument_list|,
literal|"bindstom"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"bind"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"bsto"
argument_list|,
literal|"false"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"bindsto"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"bindstom"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,bind,bsto,bindsto,bindstom"
argument_list|)
argument_list|,
literal|"count(//result/doc[1]/bool[@name='bind'])=0"
argument_list|,
literal|"count(//result/doc[1]/bool[@name='bsto'])=0"
argument_list|,
literal|"count(//result/doc[1]/bool[@name='bindsto'])=0"
argument_list|,
literal|"count(//result/doc[2]/bool[@name='bind'])=0"
argument_list|,
literal|"count(//result/doc[3]/bool[@name='bind'])=0"
argument_list|,
literal|"//result/doc[2]/bool[@name='bsto'][.='true']"
argument_list|,
literal|"//result/doc[2]/bool[@name='bindsto'][.='true']"
argument_list|,
literal|"//result/doc[3]/bool[@name='bsto'][.='false']"
argument_list|,
literal|"//result/doc[3]/bool[@name='bindsto'][.='false']"
argument_list|,
literal|"//result/doc[2]/arr[@name='bindstom']/bool[1][.='true']"
argument_list|,
literal|"//result/doc[2]/arr[@name='bindstom']/bool[2][.='false']"
argument_list|,
literal|"//result/doc[3]/arr[@name='bindstom']/bool[1][.='false']"
argument_list|,
literal|"//result/doc[3]/arr[@name='bindstom']/bool[2][.='true']"
argument_list|)
expr_stmt|;
comment|// Make sure faceting is behaving.
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"facet"
argument_list|,
literal|"true"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"bind"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"bsto"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"bindsto"
argument_list|,
literal|"facet.field"
argument_list|,
literal|"bindstom"
argument_list|)
argument_list|,
literal|"//lst[@name='bind']/int[@name='false'][.='2']"
argument_list|,
literal|"//lst[@name='bind']/int[@name='true'][.='1']"
argument_list|,
literal|"//lst[@name='bsto'][not(node())]"
argument_list|,
literal|"//lst[@name='bsto'][not(node())]"
argument_list|,
literal|"//lst[@name='bindsto']/int[@name='false'][.='1']"
argument_list|,
literal|"//lst[@name='bindsto']/int[@name='true'][.='2']"
argument_list|,
literal|"//lst[@name='bindstom']/int[@name='false'][.='2']"
argument_list|,
literal|"//lst[@name='bindstom']/int[@name='true'][.='3']"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

