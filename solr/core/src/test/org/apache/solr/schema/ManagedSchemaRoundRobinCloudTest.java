begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|schema
operator|.
name|SchemaRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|schema
operator|.
name|SchemaResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ManagedSchemaRoundRobinCloudTest
specifier|public
class|class
name|ManagedSchemaRoundRobinCloudTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTION
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"managed_coll"
decl_stmt|;
DECL|field|CONFIG
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG
init|=
literal|"cloud-managed"
decl_stmt|;
DECL|field|FIELD_PREFIX
specifier|private
specifier|static
specifier|final
name|String
name|FIELD_PREFIX
init|=
literal|"NumberedField_"
decl_stmt|;
DECL|field|NUM_SHARDS
specifier|private
specifier|static
specifier|final
name|int
name|NUM_SHARDS
init|=
literal|2
decl_stmt|;
DECL|field|NUM_FIELDS_TO_ADD
specifier|private
specifier|static
specifier|final
name|int
name|NUM_FIELDS_TO_ADD
init|=
literal|10
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|configureCluster
argument_list|(
name|NUM_SHARDS
argument_list|)
operator|.
name|addConfig
argument_list|(
name|CONFIG
argument_list|,
name|configset
argument_list|(
name|CONFIG
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
name|CONFIG
argument_list|,
name|NUM_SHARDS
argument_list|,
literal|1
argument_list|)
operator|.
name|setMaxShardsPerNode
argument_list|(
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|waitForState
argument_list|(
name|COLLECTION
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
parameter_list|(
name|n
parameter_list|,
name|c
parameter_list|)
lambda|->
name|DocCollection
operator|.
name|isFullyActive
argument_list|(
name|n
argument_list|,
name|c
argument_list|,
name|NUM_SHARDS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|clearSysProps
specifier|public
specifier|static
name|void
name|clearSysProps
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAddFieldsRoundRobin
specifier|public
name|void
name|testAddFieldsRoundRobin
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|HttpSolrClient
argument_list|>
name|clients
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|NUM_SHARDS
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|NUM_SHARDS
condition|;
operator|++
name|shardNum
control|)
block|{
name|clients
operator|.
name|add
argument_list|(
name|getHttpSolrClient
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
name|shardNum
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|shardNum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|fieldNum
init|=
literal|0
init|;
name|fieldNum
operator|<
name|NUM_FIELDS_TO_ADD
condition|;
operator|++
name|fieldNum
control|)
block|{
name|addField
argument_list|(
name|clients
operator|.
name|get
argument_list|(
name|shardNum
argument_list|)
argument_list|,
name|keyValueArrayToMap
argument_list|(
literal|"name"
argument_list|,
name|FIELD_PREFIX
operator|+
name|fieldNum
argument_list|,
literal|"type"
argument_list|,
literal|"string"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|shardNum
operator|==
name|NUM_SHARDS
condition|)
block|{
name|shardNum
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
for|for
control|(
name|int
name|shardNum
init|=
literal|0
init|;
name|shardNum
operator|<
name|NUM_SHARDS
condition|;
operator|++
name|shardNum
control|)
block|{
name|clients
operator|.
name|get
argument_list|(
name|shardNum
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|method|addField
specifier|private
name|void
name|addField
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|field
parameter_list|)
throws|throws
name|Exception
block|{
name|SchemaResponse
operator|.
name|UpdateResponse
name|addFieldResponse
init|=
operator|new
name|SchemaRequest
operator|.
name|AddField
argument_list|(
name|field
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|addFieldResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|addFieldResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|addFieldResponse
operator|.
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"errors"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|fieldName
init|=
name|field
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|SchemaResponse
operator|.
name|FieldResponse
name|fieldResponse
init|=
operator|new
name|SchemaRequest
operator|.
name|Field
argument_list|(
name|fieldName
argument_list|)
operator|.
name|process
argument_list|(
name|client
argument_list|,
name|COLLECTION
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldResponse
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|fieldResponse
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|keyValueArrayToMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|keyValueArrayToMap
parameter_list|(
name|String
modifier|...
name|alternatingKeysAndValues
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alternatingKeysAndValues
operator|.
name|length
condition|;
name|i
operator|+=
literal|2
control|)
name|map
operator|.
name|put
argument_list|(
name|alternatingKeysAndValues
index|[
name|i
index|]
argument_list|,
name|alternatingKeysAndValues
index|[
name|i
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

