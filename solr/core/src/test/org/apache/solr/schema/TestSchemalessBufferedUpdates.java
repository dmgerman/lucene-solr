begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.schema
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributingUpdateProcessorFactory
operator|.
name|DISTRIB_UPDATE_PARAM
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrRequestInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|DirectUpdateHandler2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|UpdateHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorChain
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|UpdateRequestProcessorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
operator|.
name|DistribPhase
import|;
end_import

begin_class
DECL|class|TestSchemalessBufferedUpdates
specifier|public
class|class
name|TestSchemalessBufferedUpdates
extends|extends
name|SolrTestCaseJ4
block|{
comment|// means that we've seen the leader and have version info (i.e. we are a non-leader replica)
DECL|field|FROM_LEADER
specifier|private
specifier|static
specifier|final
name|String
name|FROM_LEADER
init|=
name|DistribPhase
operator|.
name|FROMLEADER
operator|.
name|toString
argument_list|()
decl_stmt|;
DECL|field|UPDATE_CHAIN
specifier|private
specifier|static
specifier|final
name|String
name|UPDATE_CHAIN
init|=
literal|"add-unknown-fields-to-the-schema"
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
literal|10
decl_stmt|;
DECL|field|collection
specifier|private
specifier|static
specifier|final
name|String
name|collection
init|=
literal|"collection1"
decl_stmt|;
DECL|field|confDir
specifier|private
specifier|static
specifier|final
name|String
name|confDir
init|=
name|collection
operator|+
literal|"/conf"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|tmpSolrHome
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|File
name|tmpConfDir
init|=
operator|new
name|File
argument_list|(
name|tmpSolrHome
argument_list|,
name|confDir
argument_list|)
decl_stmt|;
name|File
name|testHomeConfDir
init|=
operator|new
name|File
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|,
name|confDir
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testHomeConfDir
argument_list|,
literal|"solrconfig-schemaless.xml"
argument_list|)
argument_list|,
name|tmpConfDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testHomeConfDir
argument_list|,
literal|"schema-add-schema-fields-update-processor.xml"
argument_list|)
argument_list|,
name|tmpConfDir
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|copyFileToDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|testHomeConfDir
argument_list|,
literal|"solrconfig.snippet.randomindexconfig.xml"
argument_list|)
argument_list|,
name|tmpConfDir
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-schemaless.xml"
argument_list|,
literal|"schema-add-schema-fields-update-processor.xml"
argument_list|,
name|tmpSolrHome
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|false
expr_stmt|;
specifier|final
name|Semaphore
name|logReplay
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Semaphore
name|logReplayFinish
init|=
operator|new
name|Semaphore
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayHook
operator|=
parameter_list|()
lambda|->
block|{
try|try
block|{
name|assertTrue
argument_list|(
name|logReplay
operator|.
name|tryAcquire
argument_list|(
name|TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
name|logReplayFinish
operator|::
name|release
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|UpdateHandler
name|uhandler
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
name|UpdateLog
name|ulog
init|=
name|uhandler
operator|.
name|getUpdateLog
argument_list|()
decl_stmt|;
try|try
block|{
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|ulog
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid date will be normalized by ParseDateField URP
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|processAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"f_dt"
argument_list|,
literal|"2017-01-04"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|DISTRIB_UPDATE_PARAM
argument_list|,
name|FROM_LEADER
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|ulog
operator|.
name|bufferUpdates
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|State
operator|.
name|BUFFERING
argument_list|,
name|ulog
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
comment|// If the ParseDateField URP isn't ahead of the DUP, then the date won't be normalized in the buffered tlog entry,
comment|// and the doc won't be indexed on the replaying replica - a warning is logged as follows:
comment|// WARN [...] o.a.s.u.UpdateLog REYPLAY_ERR: IOException reading log
comment|//            org.apache.solr.common.SolrException: Invalid Date String:'2017-01-05'
comment|//              at org.apache.solr.util.DateMathParser.parseMath(DateMathParser.java:234)
comment|//              at org.apache.solr.schema.TrieField.createField(TrieField.java:725) [...]
name|updateJ
argument_list|(
name|jsonAdd
argument_list|(
name|processAdd
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"f_dt"
argument_list|,
literal|"2017-01-05"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|(
name|DISTRIB_UPDATE_PARAM
argument_list|,
name|FROM_LEADER
argument_list|)
argument_list|)
expr_stmt|;
name|Future
argument_list|<
name|UpdateLog
operator|.
name|RecoveryInfo
argument_list|>
name|rinfoFuture
init|=
name|ulog
operator|.
name|applyBufferedUpdates
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rinfoFuture
operator|!=
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|State
operator|.
name|APPLYING_BUFFERED
argument_list|,
name|ulog
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|logReplay
operator|.
name|release
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|UpdateLog
operator|.
name|RecoveryInfo
name|rinfo
init|=
name|rinfoFuture
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|State
operator|.
name|ACTIVE
argument_list|,
name|ulog
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|DirectUpdateHandler2
operator|.
name|commitOnClose
operator|=
literal|true
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayHook
operator|=
literal|null
expr_stmt|;
name|UpdateLog
operator|.
name|testing_logReplayFinishHook
operator|=
literal|null
expr_stmt|;
name|req
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|processAdd
specifier|private
name|SolrInputDocument
name|processAdd
parameter_list|(
specifier|final
name|SolrInputDocument
name|docIn
parameter_list|)
throws|throws
name|IOException
block|{
name|UpdateRequestProcessorChain
name|processorChain
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateProcessingChain
argument_list|(
name|UPDATE_CHAIN
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Undefined URP chain '"
operator|+
name|UPDATE_CHAIN
operator|+
literal|"'"
argument_list|,
name|processorChain
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|UpdateRequestProcessorFactory
argument_list|>
name|factoriesUpToDUP
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|UpdateRequestProcessorFactory
name|urpFactory
range|:
name|processorChain
operator|.
name|getProcessors
argument_list|()
control|)
block|{
name|factoriesUpToDUP
operator|.
name|add
argument_list|(
name|urpFactory
argument_list|)
expr_stmt|;
if|if
condition|(
name|urpFactory
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|DistributedUpdateProcessorFactory
operator|.
name|class
argument_list|)
condition|)
break|break;
block|}
name|UpdateRequestProcessorChain
name|chainUpToDUP
init|=
operator|new
name|UpdateRequestProcessorChain
argument_list|(
name|factoriesUpToDUP
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"URP chain '"
operator|+
name|UPDATE_CHAIN
operator|+
literal|"'"
argument_list|,
name|chainUpToDUP
argument_list|)
expr_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
try|try
block|{
name|SolrRequestInfo
operator|.
name|setRequestInfo
argument_list|(
operator|new
name|SolrRequestInfo
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|docIn
expr_stmt|;
name|UpdateRequestProcessor
name|processor
init|=
name|chainUpToDUP
operator|.
name|createProcessor
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
name|processor
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|cmd
operator|.
name|solrDoc
operator|.
name|get
argument_list|(
literal|"f_dt"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Date
condition|)
block|{
comment|// Non-JSON types (Date in this case) aren't handled properly in noggit-0.6.  Although this is fixed in
comment|// https://github.com/yonik/noggit/commit/ec3e732af7c9425e8f40297463cbe294154682b1 to call obj.toString(),
comment|// Date::toString produces a Date representation that Solr doesn't like, so we convert using Instant::toString
name|cmd
operator|.
name|solrDoc
operator|.
name|get
argument_list|(
literal|"f_dt"
argument_list|)
operator|.
name|setValue
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|cmd
operator|.
name|solrDoc
operator|.
name|get
argument_list|(
literal|"f_dt"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|)
operator|.
name|toInstant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|cmd
operator|.
name|solrDoc
return|;
block|}
finally|finally
block|{
name|SolrRequestInfo
operator|.
name|clearRequestInfo
argument_list|()
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

