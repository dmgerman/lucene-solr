begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|CoreParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|ParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_class
DECL|class|TestSolrCoreParser
specifier|public
class|class
name|TestSolrCoreParser
extends|extends
name|LuceneTestCase
block|{
DECL|field|solrCoreParser
specifier|private
name|SolrCoreParser
name|solrCoreParser
decl_stmt|;
DECL|method|solrCoreParser
specifier|private
name|CoreParser
name|solrCoreParser
parameter_list|()
block|{
if|if
condition|(
name|solrCoreParser
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|defaultField
init|=
literal|"contents"
decl_stmt|;
specifier|final
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|,
name|MockTokenFilter
operator|.
name|ENGLISH_STOPSET
argument_list|)
decl_stmt|;
specifier|final
name|SolrQueryRequest
name|req
init|=
literal|null
decl_stmt|;
name|solrCoreParser
operator|=
operator|new
name|SolrCoreParser
argument_list|(
name|defaultField
argument_list|,
name|analyzer
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|{
specifier|final
name|NamedList
argument_list|<
name|String
argument_list|>
name|args
init|=
operator|new
name|NamedList
argument_list|<>
argument_list|()
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"HelloQuery"
argument_list|,
name|HelloQueryBuilder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"GoodbyeQuery"
argument_list|,
name|GoodbyeQueryBuilder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"HandyQuery"
argument_list|,
name|HandyQueryBuilder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"ApacheLuceneSolr"
argument_list|,
name|ApacheLuceneSolrNearQueryBuilder
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|solrCoreParser
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|solrCoreParser
return|;
block|}
DECL|method|parseXmlString
specifier|private
name|Query
name|parseXmlString
parameter_list|(
name|String
name|xml
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserException
block|{
specifier|final
name|byte
index|[]
name|xmlBytes
init|=
name|xml
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|xmlStream
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmlBytes
argument_list|)
decl_stmt|;
return|return
name|solrCoreParser
argument_list|()
operator|.
name|parse
argument_list|(
name|xmlStream
argument_list|)
return|;
block|}
DECL|method|parseHandyQuery
specifier|private
name|Query
name|parseHandyQuery
parameter_list|(
name|String
name|lhsXml
parameter_list|,
name|String
name|rhsXml
parameter_list|)
throws|throws
name|IOException
throws|,
name|ParserException
block|{
specifier|final
name|String
name|xml
init|=
literal|"<HandyQuery>"
operator|+
literal|"<Left>"
operator|+
name|lhsXml
operator|+
literal|"</Left>"
operator|+
literal|"<Right>"
operator|+
name|rhsXml
operator|+
literal|"</Right>"
operator|+
literal|"</HandyQuery>"
decl_stmt|;
return|return
name|parseXmlString
argument_list|(
name|xml
argument_list|)
return|;
block|}
DECL|method|testHello
specifier|public
name|void
name|testHello
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserException
block|{
specifier|final
name|Query
name|query
init|=
name|parseXmlString
argument_list|(
literal|"<HelloQuery/>"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|query
operator|instanceof
name|MatchAllDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testGoodbye
specifier|public
name|void
name|testGoodbye
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserException
block|{
specifier|final
name|Query
name|query
init|=
name|parseXmlString
argument_list|(
literal|"<GoodbyeQuery/>"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|query
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testApacheLuceneSolr
specifier|public
name|void
name|testApacheLuceneSolr
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserException
block|{
specifier|final
name|String
name|fieldName
init|=
literal|"contents"
decl_stmt|;
specifier|final
name|Query
name|query
init|=
name|parseXmlString
argument_list|(
literal|"<ApacheLuceneSolr fieldName='"
operator|+
name|fieldName
operator|+
literal|"'/>"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|query
operator|instanceof
name|SpanNearQuery
argument_list|)
expr_stmt|;
specifier|final
name|SpanNearQuery
name|snq
init|=
operator|(
name|SpanNearQuery
operator|)
name|query
decl_stmt|;
name|assertEquals
argument_list|(
name|fieldName
argument_list|,
name|snq
operator|.
name|getField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|snq
operator|.
name|getSlop
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|snq
operator|.
name|isInOrder
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|snq
operator|.
name|getClauses
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snq
operator|.
name|getClauses
argument_list|()
index|[
literal|0
index|]
operator|instanceof
name|SpanTermQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snq
operator|.
name|getClauses
argument_list|()
index|[
literal|1
index|]
operator|instanceof
name|SpanTermQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|snq
operator|.
name|getClauses
argument_list|()
index|[
literal|2
index|]
operator|instanceof
name|SpanTermQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|testHandyQuery
specifier|public
name|void
name|testHandyQuery
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserException
block|{
specifier|final
name|String
name|lhsXml
init|=
literal|"<HelloQuery/>"
decl_stmt|;
specifier|final
name|String
name|rhsXml
init|=
literal|"<GoodbyeQuery/>"
decl_stmt|;
specifier|final
name|Query
name|query
init|=
name|parseHandyQuery
argument_list|(
name|lhsXml
argument_list|,
name|rhsXml
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|query
operator|instanceof
name|BooleanQuery
argument_list|)
expr_stmt|;
specifier|final
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|MatchAllDocsQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|MatchNoDocsQuery
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

