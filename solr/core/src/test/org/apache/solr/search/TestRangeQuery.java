begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|ResultContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
DECL|class|TestRangeQuery
specifier|public
class|class
name|TestRangeQuery
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema11.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// if you override setUp or tearDown, you better call
comment|// the super classes version
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addInt
name|void
name|addInt
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|,
name|int
name|l
parameter_list|,
name|int
name|u
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
block|{
name|int
name|v
init|=
literal|0
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|l
operator|&&
name|l
operator|==
name|u
condition|)
block|{
name|v
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|v
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|u
operator|-
name|l
argument_list|)
operator|+
name|l
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
name|doc
operator|.
name|addField
argument_list|(
name|field
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|DocProcessor
interface|interface
name|DocProcessor
block|{
DECL|method|process
specifier|public
name|void
name|process
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
function_decl|;
block|}
DECL|method|createIndex
specifier|public
name|void
name|createIndex
parameter_list|(
name|int
name|nDocs
parameter_list|,
name|DocProcessor
name|proc
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
name|proc
operator|.
name|process
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRangeQueries
specifier|public
name|void
name|testRangeQueries
parameter_list|()
throws|throws
name|Exception
block|{
comment|// ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields
comment|// that aren't tested in testRandomRangeQueries()
name|int
name|i
init|=
literal|2000000000
decl_stmt|;
name|long
name|l
init|=
literal|500000000000000000L
decl_stmt|;
name|double
name|d
init|=
literal|0.3333333333333333
decl_stmt|;
comment|// first 3 values will be indexed, the last two won't be
name|String
index|[]
name|ints
init|=
block|{
literal|""
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
block|,
literal|""
operator|+
operator|(
name|i
operator|)
block|,
literal|""
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
block|,
literal|""
operator|+
operator|(
name|i
operator|-
literal|2
operator|)
block|,
literal|""
operator|+
operator|(
name|i
operator|+
literal|2
operator|)
block|}
decl_stmt|;
name|String
index|[]
name|longs
init|=
block|{
literal|""
operator|+
operator|(
name|l
operator|-
literal|1
operator|)
block|,
literal|""
operator|+
operator|(
name|l
operator|)
block|,
literal|""
operator|+
operator|(
name|l
operator|+
literal|1
operator|)
block|,
literal|""
operator|+
operator|(
name|l
operator|-
literal|2
operator|)
block|,
literal|""
operator|+
operator|(
name|l
operator|+
literal|2
operator|)
block|}
decl_stmt|;
name|String
index|[]
name|doubles
init|=
block|{
literal|""
operator|+
operator|(
name|d
operator|-
literal|1e-16
operator|)
block|,
literal|""
operator|+
operator|(
name|d
operator|)
block|,
literal|""
operator|+
operator|(
name|d
operator|+
literal|1e-16
operator|)
block|,
literal|""
operator|+
operator|(
name|d
operator|-
literal|2e-16
operator|)
block|,
literal|""
operator|+
operator|(
name|d
operator|+
literal|2e-16
operator|)
block|}
decl_stmt|;
name|String
index|[]
name|strings
init|=
block|{
literal|"aaa"
block|,
literal|"bbb"
block|,
literal|"ccc"
block|,
literal|"aa"
block|,
literal|"cccc"
block|}
decl_stmt|;
name|String
index|[]
name|dates
init|=
block|{
literal|"0299-12-31T23:59:59.999Z"
block|,
literal|"2000-01-01T00:00:00.000Z"
block|,
literal|"2000-01-01T00:00:00.001Z"
block|,
literal|"0299-12-31T23:59:59.998Z"
block|,
literal|"2000-01-01T00:00:00.002Z"
block|}
decl_stmt|;
comment|// fields that normal range queries should work on
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|norm_fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_i"
argument_list|,
name|ints
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_l"
argument_list|,
name|longs
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_d"
argument_list|,
name|doubles
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_ti"
argument_list|,
name|ints
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_tl"
argument_list|,
name|longs
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_td"
argument_list|,
name|doubles
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_tdt"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_s"
argument_list|,
name|strings
argument_list|)
expr_stmt|;
name|norm_fields
operator|.
name|put
argument_list|(
literal|"foo_dt"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
comment|// fields that frange queries should work on
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|frange_fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_i"
argument_list|,
name|ints
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_l"
argument_list|,
name|longs
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_d"
argument_list|,
name|doubles
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_ti"
argument_list|,
name|ints
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_tl"
argument_list|,
name|longs
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_td"
argument_list|,
name|doubles
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_tdt"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_s"
argument_list|,
name|strings
argument_list|)
expr_stmt|;
name|frange_fields
operator|.
name|put
argument_list|(
literal|"foo_dt"
argument_list|,
name|dates
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|all_fields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|all_fields
operator|.
name|putAll
argument_list|(
name|norm_fields
argument_list|)
expr_stmt|;
name|all_fields
operator|.
name|putAll
argument_list|(
name|frange_fields
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ints
operator|.
name|length
operator|-
literal|2
condition|;
name|j
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
literal|""
operator|+
name|j
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|all_fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|fields
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
name|fields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|fields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// simple test of a function rather than just the field
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange l=0 u=2}id"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange l=0 u=2}product(id,2)"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange l=100 u=102}sum(id,100)"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|norm_fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|f
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
index|[]
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":[* TO *]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":["
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"]"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":{"
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":{"
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":{"
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"}"
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
name|f
operator|+
literal|":{"
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|" TO "
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"}"
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|entry
range|:
name|frange_fields
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|f
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
index|[]
name|v
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incu=false"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incu=false"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|1
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incu=false"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=2]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incu=false"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incu=false"
operator|+
literal|" u="
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=true incu=true"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" u="
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false incu=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|0
index|]
operator|+
literal|" u="
operator|+
name|v
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"{!frange incl=false incu=false"
operator|+
literal|" l="
operator|+
name|v
index|[
literal|3
index|]
operator|+
literal|" u="
operator|+
name|v
index|[
literal|4
index|]
operator|+
literal|"}"
operator|+
name|f
argument_list|)
argument_list|,
literal|"*[count(//doc)=3]"
argument_list|)
expr_stmt|;
block|}
comment|// now pick a random range to use to delete (some of) the docs...
specifier|final
name|boolean
name|incl
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|incu
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|int
name|expected
init|=
literal|0
operator|+
operator|(
name|incl
condition|?
literal|0
else|:
literal|1
operator|)
operator|+
operator|(
name|incu
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
name|String
name|dbq
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// regular range
name|String
name|field
init|=
name|randomKey
argument_list|(
name|norm_fields
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|norm_fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|dbq
operator|=
name|field
operator|+
literal|":"
operator|+
operator|(
name|incl
condition|?
literal|"["
else|:
literal|"{"
operator|)
operator|+
name|values
index|[
literal|0
index|]
operator|+
literal|" TO "
operator|+
name|values
index|[
literal|2
index|]
operator|+
operator|(
name|incu
condition|?
literal|"]"
else|:
literal|"}"
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// frange
name|String
name|field
init|=
name|randomKey
argument_list|(
name|frange_fields
argument_list|)
decl_stmt|;
name|String
index|[]
name|values
init|=
name|frange_fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|dbq
operator|=
literal|"{!frange incl="
operator|+
name|incl
operator|+
literal|" incu="
operator|+
name|incu
operator|+
literal|" l="
operator|+
name|values
index|[
literal|0
index|]
operator|+
literal|" u="
operator|+
name|values
index|[
literal|2
index|]
operator|+
literal|"}"
operator|+
name|field
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// wrap in a BQ
name|String
name|field
init|=
name|randomKey
argument_list|(
name|norm_fields
argument_list|)
decl_stmt|;
name|String
name|value
init|=
name|norm_fields
operator|.
name|get
argument_list|(
name|field
argument_list|)
index|[
literal|1
index|]
decl_stmt|;
comment|// wraping shouldn't affect expected
name|dbq
operator|=
literal|"("
operator|+
name|field
operator|+
literal|":\""
operator|+
name|value
operator|+
literal|"\" OR "
operator|+
name|dbq
operator|+
literal|")"
expr_stmt|;
block|}
name|assertU
argument_list|(
name|delQ
argument_list|(
name|dbq
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"_trace_dbq"
argument_list|,
name|dbq
argument_list|)
argument_list|,
literal|"*[count(//doc)="
operator|+
name|expected
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRandomRangeQueries
specifier|public
name|void
name|testRandomRangeQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|handler
init|=
literal|""
decl_stmt|;
specifier|final
name|String
index|[]
name|fields
init|=
block|{
literal|"foo_s"
block|,
literal|"foo_i"
block|,
literal|"foo_l"
block|,
literal|"foo_f"
block|,
literal|"foo_d"
block|,
literal|"foo_ti"
block|,
literal|"foo_tl"
block|,
literal|"foo_tf"
block|,
literal|"foo_td"
block|}
decl_stmt|;
comment|// NOTE: foo_s supports ranges, but for the arrays below we are only
comment|// interested in fields that support *equivilent* ranges -- strings
comment|// are not ordered the same as ints/longs, so we can't test the ranges
comment|// for equivilence across diff fields.
comment|//
comment|// fields that a normal range query will work correctly on
name|String
index|[]
name|norm_fields
init|=
block|{
literal|"foo_i"
block|,
literal|"foo_l"
block|,
literal|"foo_f"
block|,
literal|"foo_d"
block|,
literal|"foo_ti"
block|,
literal|"foo_tl"
block|,
literal|"foo_tf"
block|,
literal|"foo_td"
block|}
decl_stmt|;
comment|// fields that a value source range query should work on
name|String
index|[]
name|frange_fields
init|=
block|{
literal|"foo_i"
block|,
literal|"foo_l"
block|,
literal|"foo_f"
block|,
literal|"foo_d"
block|}
decl_stmt|;
specifier|final
name|int
name|l
init|=
operator|-
literal|1
operator|*
name|atLeast
argument_list|(
literal|50
argument_list|)
decl_stmt|;
specifier|final
name|int
name|u
init|=
name|atLeast
argument_list|(
literal|250
argument_list|)
decl_stmt|;
comment|// sometimes a very small index, sometimes a very large index
specifier|final
name|int
name|numDocs
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|50
argument_list|)
else|:
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|createIndex
argument_list|(
name|numDocs
argument_list|,
operator|new
name|DocProcessor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|process
parameter_list|(
name|SolrInputDocument
name|doc
parameter_list|)
block|{
comment|// 10% of the docs have missing values
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|!=
literal|0
condition|)
name|addInt
argument_list|(
name|doc
argument_list|,
name|l
argument_list|,
name|u
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numIters
condition|;
name|i
operator|++
control|)
block|{
name|int
name|lower
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
operator|*
name|l
argument_list|,
name|u
argument_list|)
decl_stmt|;
name|int
name|upper
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|lower
argument_list|,
literal|2
operator|*
name|u
argument_list|)
decl_stmt|;
name|boolean
name|lowerMissing
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|1
decl_stmt|;
name|boolean
name|upperMissing
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|1
decl_stmt|;
name|boolean
name|inclusive
init|=
name|lowerMissing
operator|||
name|upperMissing
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
comment|// lower=2; upper=2; inclusive=true;
comment|// inclusive=true; lowerMissing=true; upperMissing=true;
name|List
argument_list|<
name|String
argument_list|>
name|qs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
name|norm_fields
control|)
block|{
name|String
name|q
init|=
name|field
operator|+
literal|':'
operator|+
operator|(
name|inclusive
condition|?
literal|'['
else|:
literal|'{'
operator|)
operator|+
operator|(
name|lowerMissing
condition|?
literal|"*"
else|:
name|lower
operator|)
operator|+
literal|" TO "
operator|+
operator|(
name|upperMissing
condition|?
literal|"*"
else|:
name|upper
operator|)
operator|+
operator|(
name|inclusive
condition|?
literal|']'
else|:
literal|'}'
operator|)
decl_stmt|;
name|qs
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|frange_fields
control|)
block|{
name|String
name|q
init|=
literal|"{!frange v="
operator|+
name|field
operator|+
operator|(
name|lowerMissing
condition|?
literal|""
else|:
operator|(
literal|" l="
operator|+
name|lower
operator|)
operator|)
operator|+
operator|(
name|upperMissing
condition|?
literal|""
else|:
operator|(
literal|" u="
operator|+
name|upper
operator|)
operator|)
operator|+
operator|(
name|inclusive
condition|?
literal|""
else|:
literal|" incl=false"
operator|)
operator|+
operator|(
name|inclusive
condition|?
literal|""
else|:
literal|" incu=false"
operator|)
operator|+
literal|"}"
decl_stmt|;
name|qs
operator|.
name|add
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|String
name|lastQ
init|=
literal|null
decl_stmt|;
name|SolrQueryResponse
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|q
range|:
name|qs
control|)
block|{
comment|// System.out.println("QUERY="+q);
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
name|numDocs
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|qr
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
name|handler
argument_list|,
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
comment|// we only test if the same docs matched since some queries will include factors like idf, etc.
name|DocList
name|rA
init|=
operator|(
operator|(
name|ResultContext
operator|)
name|qr
operator|.
name|getResponse
argument_list|()
operator|)
operator|.
name|getDocList
argument_list|()
decl_stmt|;
name|DocList
name|rB
init|=
operator|(
operator|(
name|ResultContext
operator|)
name|last
operator|.
name|getResponse
argument_list|()
operator|)
operator|.
name|getDocList
argument_list|()
decl_stmt|;
name|sameDocs
argument_list|(
name|q
operator|+
literal|" vs "
operator|+
name|lastQ
argument_list|,
name|rA
argument_list|,
name|rB
argument_list|)
expr_stmt|;
block|}
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
name|last
operator|=
name|qr
expr_stmt|;
name|lastQ
operator|=
name|q
expr_stmt|;
block|}
block|}
comment|// now build some random queries (against *any* field) and validate that using it in a DBQ changes
comment|// the index by the expected number of docs
name|int
name|numDocsLeftInIndex
init|=
name|numDocs
decl_stmt|;
specifier|final
name|int
name|numDBQs
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDBQs
condition|;
name|i
operator|++
control|)
block|{
name|int
name|lower
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
operator|*
name|l
argument_list|,
name|u
argument_list|)
decl_stmt|;
name|int
name|upper
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|lower
argument_list|,
literal|2
operator|*
name|u
argument_list|)
decl_stmt|;
name|boolean
name|lowerMissing
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|1
decl_stmt|;
name|boolean
name|upperMissing
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|==
literal|1
decl_stmt|;
name|boolean
name|inclusive
init|=
name|lowerMissing
operator|||
name|upperMissing
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|String
name|dbq
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// regular range
name|String
name|field
init|=
name|fields
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|fields
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|dbq
operator|=
name|field
operator|+
literal|':'
operator|+
operator|(
name|inclusive
condition|?
literal|'['
else|:
literal|'{'
operator|)
operator|+
operator|(
name|lowerMissing
condition|?
literal|"*"
else|:
name|lower
operator|)
operator|+
literal|" TO "
operator|+
operator|(
name|upperMissing
condition|?
literal|"*"
else|:
name|upper
operator|)
operator|+
operator|(
name|inclusive
condition|?
literal|']'
else|:
literal|'}'
operator|)
expr_stmt|;
block|}
else|else
block|{
comment|// frange
name|String
name|field
init|=
name|frange_fields
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|frange_fields
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|dbq
operator|=
literal|"{!frange v="
operator|+
name|field
operator|+
operator|(
name|lowerMissing
condition|?
literal|""
else|:
operator|(
literal|" l="
operator|+
name|lower
operator|)
operator|)
operator|+
operator|(
name|upperMissing
condition|?
literal|""
else|:
operator|(
literal|" u="
operator|+
name|upper
operator|)
operator|)
operator|+
operator|(
name|inclusive
condition|?
literal|""
else|:
literal|" incl=false"
operator|)
operator|+
operator|(
name|inclusive
condition|?
literal|""
else|:
literal|" incu=false"
operator|)
operator|+
literal|"}"
expr_stmt|;
block|}
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
name|dbq
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
init|)
block|{
name|SolrQueryResponse
name|qr
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
name|handler
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|numDocsLeftInIndex
operator|-=
operator|(
operator|(
name|ResultContext
operator|)
name|qr
operator|.
name|getResponse
argument_list|()
operator|)
operator|.
name|getDocList
argument_list|()
operator|.
name|matches
argument_list|()
expr_stmt|;
block|}
name|assertU
argument_list|(
name|delQ
argument_list|(
name|dbq
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"_trace_after_dbq"
argument_list|,
name|dbq
argument_list|)
init|)
block|{
name|SolrQueryResponse
name|qr
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
name|handler
argument_list|,
name|req
argument_list|)
decl_stmt|;
specifier|final
name|int
name|allDocsFound
init|=
operator|(
operator|(
name|ResultContext
operator|)
name|qr
operator|.
name|getResponse
argument_list|()
operator|)
operator|.
name|getDocList
argument_list|()
operator|.
name|matches
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|dbq
argument_list|,
name|numDocsLeftInIndex
argument_list|,
name|allDocsFound
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRangeQueryEndpointTO
specifier|public
name|void
name|testRangeQueryEndpointTO
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[to TO to]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[to TO TO]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[TO TO to]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[TO TO TO]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[\"TO\" TO \"TO\"]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[\"TO\" TO TO]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[TO TO \"TO\"]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO xx]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[to TO xx]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO xx]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[\"TO\" TO xx]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[to TO xx]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[TO TO xx]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[xx TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[xx TO to]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[xx TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[xx TO \"TO\"]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[xx TO to]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[xx TO TO]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQueryRequiresTO
specifier|public
name|void
name|testRangeQueryRequiresTO
parameter_list|()
throws|throws
name|Exception
block|{
name|assertEquals
argument_list|(
literal|"{a TO b}"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{A TO B}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a TO b}"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[A TO B}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{a TO b]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{A TO B]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[a TO b]"
argument_list|,
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[A TO B]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
operator|.
name|toString
argument_list|(
literal|"text"
argument_list|)
argument_list|)
expr_stmt|;
comment|// " TO " is required between range endpoints
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{A B}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[A B}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{A B]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[A B]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{TO B}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[TO B}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{TO B]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[TO B]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{A TO}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[A TO}"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"{A TO]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|SyntaxError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|QParser
operator|.
name|getParser
argument_list|(
literal|"[A TO]"
argument_list|,
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|getQuery
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|sameDocs
specifier|static
name|boolean
name|sameDocs
parameter_list|(
name|String
name|msg
parameter_list|,
name|DocSet
name|a
parameter_list|,
name|DocSet
name|b
parameter_list|)
block|{
name|DocIterator
name|i
init|=
name|a
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// System.out.println("SIZES="+a.size() + "," + b.size());
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|a
operator|.
name|size
argument_list|()
argument_list|,
name|b
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|doc
init|=
name|i
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|b
operator|.
name|exists
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
comment|// System.out.println("MATCH! " + doc);
block|}
return|return
literal|true
return|;
block|}
DECL|method|randomKey
specifier|private
specifier|static
parameter_list|<
name|X
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|X
argument_list|>
parameter_list|,
name|Y
parameter_list|>
name|X
name|randomKey
parameter_list|(
name|Map
argument_list|<
name|X
argument_list|,
name|Y
argument_list|>
name|map
parameter_list|)
block|{
assert|assert
operator|!
name|map
operator|.
name|isEmpty
argument_list|()
assert|;
name|List
argument_list|<
name|X
argument_list|>
name|sortedKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|map
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|sortedKeys
argument_list|)
expr_stmt|;
return|return
name|sortedKeys
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|sortedKeys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

