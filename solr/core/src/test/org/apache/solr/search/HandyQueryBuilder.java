begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|ParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|builders
operator|.
name|SpanQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|// A simple test query builder to demonstrate use of
end_comment

begin_comment
comment|// SolrQueryBuilder's queryFactory constructor argument.
end_comment

begin_class
DECL|class|HandyQueryBuilder
specifier|public
class|class
name|HandyQueryBuilder
extends|extends
name|SolrSpanQueryBuilder
block|{
DECL|method|HandyQueryBuilder
specifier|public
name|HandyQueryBuilder
parameter_list|(
name|String
name|defaultField
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SpanQueryBuilder
name|spanFactory
parameter_list|)
block|{
name|super
argument_list|(
name|defaultField
argument_list|,
name|analyzer
argument_list|,
name|req
argument_list|,
name|spanFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|Element
name|e
parameter_list|)
throws|throws
name|ParserException
block|{
specifier|final
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
specifier|final
name|Query
name|lhsQ
init|=
name|getSubQuery
argument_list|(
name|e
argument_list|,
literal|"Left"
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|rhsQ
init|=
name|getSubQuery
argument_list|(
name|e
argument_list|,
literal|"Right"
argument_list|)
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|lhsQ
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
name|bq
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
name|rhsQ
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bq
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|getSpanQuery
specifier|public
name|SpanQuery
name|getSpanQuery
parameter_list|(
name|Element
name|e
parameter_list|)
throws|throws
name|ParserException
block|{
name|SpanQuery
name|subQueries
index|[]
init|=
block|{
name|getSubSpanQuery
argument_list|(
name|e
argument_list|,
literal|"Left"
argument_list|)
block|,
name|getSubSpanQuery
argument_list|(
name|e
argument_list|,
literal|"Right"
argument_list|)
block|,     }
decl_stmt|;
return|return
operator|new
name|SpanOrQuery
argument_list|(
name|subQueries
argument_list|)
return|;
block|}
DECL|method|getSubQuery
specifier|private
name|Query
name|getSubQuery
parameter_list|(
name|Element
name|e
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ParserException
block|{
name|Element
name|subE
init|=
name|DOMUtils
operator|.
name|getChildByTagOrFail
argument_list|(
name|e
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|subE
operator|=
name|DOMUtils
operator|.
name|getFirstChildOrFail
argument_list|(
name|subE
argument_list|)
expr_stmt|;
return|return
name|queryFactory
operator|.
name|getQuery
argument_list|(
name|subE
argument_list|)
return|;
block|}
DECL|method|getSubSpanQuery
specifier|private
name|SpanQuery
name|getSubSpanQuery
parameter_list|(
name|Element
name|e
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ParserException
block|{
name|Element
name|subE
init|=
name|DOMUtils
operator|.
name|getChildByTagOrFail
argument_list|(
name|e
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|subE
operator|=
name|DOMUtils
operator|.
name|getFirstChildOrFail
argument_list|(
name|subE
argument_list|)
expr_stmt|;
return|return
name|spanFactory
operator|.
name|getSpanQuery
argument_list|(
name|subE
argument_list|)
return|;
block|}
block|}
end_class

end_unit

