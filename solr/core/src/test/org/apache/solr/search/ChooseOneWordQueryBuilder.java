begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|DOMUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|ParserException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|xml
operator|.
name|builders
operator|.
name|SpanQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_class
DECL|class|ChooseOneWordQueryBuilder
specifier|public
class|class
name|ChooseOneWordQueryBuilder
extends|extends
name|SolrSpanQueryBuilder
block|{
DECL|method|ChooseOneWordQueryBuilder
specifier|public
name|ChooseOneWordQueryBuilder
parameter_list|(
name|String
name|defaultField
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SpanQueryBuilder
name|spanFactory
parameter_list|)
block|{
name|super
argument_list|(
name|defaultField
argument_list|,
name|analyzer
argument_list|,
name|req
argument_list|,
name|spanFactory
argument_list|)
expr_stmt|;
block|}
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|Element
name|e
parameter_list|)
throws|throws
name|ParserException
block|{
return|return
name|implGetQuery
argument_list|(
name|e
argument_list|,
literal|false
argument_list|)
return|;
block|}
DECL|method|getSpanQuery
specifier|public
name|SpanQuery
name|getSpanQuery
parameter_list|(
name|Element
name|e
parameter_list|)
throws|throws
name|ParserException
block|{
return|return
operator|(
name|SpanQuery
operator|)
name|implGetQuery
argument_list|(
name|e
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|implGetQuery
specifier|public
name|Query
name|implGetQuery
parameter_list|(
name|Element
name|e
parameter_list|,
name|boolean
name|span
parameter_list|)
throws|throws
name|ParserException
block|{
name|Term
name|term
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|DOMUtils
operator|.
name|getAttributeWithInheritanceOrFail
argument_list|(
name|e
argument_list|,
literal|"fieldName"
argument_list|)
decl_stmt|;
for|for
control|(
name|Node
name|node
init|=
name|e
operator|.
name|getFirstChild
argument_list|()
init|;
name|node
operator|!=
literal|null
condition|;
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
control|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|node
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"Word"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|word
init|=
name|DOMUtils
operator|.
name|getNonBlankTextOrFail
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
decl_stmt|;
specifier|final
name|Term
name|t
init|=
operator|new
name|Term
argument_list|(
name|fieldName
argument_list|,
name|word
argument_list|)
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|null
operator|||
name|term
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|t
operator|.
name|text
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|term
operator|=
name|t
expr_stmt|;
block|}
block|}
block|}
return|return
operator|(
name|span
condition|?
operator|new
name|SpanTermQuery
argument_list|(
name|term
argument_list|)
else|:
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

