begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PointInSetQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermInSetQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|metrics
operator|.
name|MetricsMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|parser
operator|.
name|QueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|query
operator|.
name|FilterQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_class
DECL|class|TestSolrQueryParser
specifier|public
class|class
name|TestSolrQueryParser
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
comment|// schema12 doesn't support _version_
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema12.xml"
argument_list|)
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
block|{
name|String
name|v
decl_stmt|;
name|v
operator|=
literal|"how now brown cow"
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
name|v
argument_list|,
literal|"text_np"
argument_list|,
name|v
argument_list|,
literal|"foo_i"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|v
operator|=
literal|"now cow"
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
name|v
argument_list|,
literal|"text_np"
argument_list|,
name|v
argument_list|,
literal|"foo_i"
argument_list|,
literal|"12"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"a ' \" \\ {! ) } ( { z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// A value filled with special chars
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
literal|"qqq_s"
argument_list|,
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
literal|"www_s"
argument_list|,
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"12"
argument_list|,
literal|"eee_s"
argument_list|,
literal|"X"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"13"
argument_list|,
literal|"eee_s"
argument_list|,
literal|"'balance'"
argument_list|,
literal|"rrr_s"
argument_list|,
literal|"/leading_slash"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"20"
argument_list|,
literal|"syn"
argument_list|,
literal|"wifi ATM"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"30"
argument_list|,
literal|"shingle23"
argument_list|,
literal|"A B X D E"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPhrase
specifier|public
name|void
name|testPhrase
parameter_list|()
block|{
comment|// "text" field's type has WordDelimiterGraphFilter (WDGFF) and autoGeneratePhraseQueries=true
comment|// should generate a phrase of "now cow" and match only one doc
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"text:now-cow"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//*[@numFound='1']"
argument_list|)
expr_stmt|;
comment|// When sow=false, autoGeneratePhraseQueries=true only works when a graph is produced
comment|// (i.e. overlapping terms, e.g. if WDGFF's preserveOriginal=1 or concatenateWords=1).
comment|// The WDGFF config on the "text" field doesn't produce a graph, so the generated query
comment|// is not a phrase query.  As a result, docs can match that don't match phrase query "now cow"
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"text:now-cow"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"text:now-cow"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
comment|// "text_np" field's type has WDGFF and (default) autoGeneratePhraseQueries=false
comment|// should generate a query of (now OR cow) and match both docs
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"text_np:now-cow"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"//*[@numFound='2']"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLocalParamsInQP
specifier|public
name|void
name|testLocalParamsInQP
parameter_list|()
throws|throws
name|Exception
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"qaz {!term f=text v=$qq} wsx"
argument_list|,
literal|"qq"
argument_list|,
literal|"now"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"qaz {!term f=text v=$qq} wsx"
argument_list|,
literal|"qq"
argument_list|,
literal|"nomatch"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"qaz {!term f=text}now wsx"
argument_list|,
literal|"qq"
argument_list|,
literal|"now"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"qaz {!term f=foo_s v='a \\' \" \\\\ {! ) } ( { z'} wsx"
argument_list|)
comment|// single quote escaping
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"qaz {!term f=foo_s v=\"a ' \\\" \\\\ {! ) } ( { z\"} wsx"
argument_list|)
comment|// double quote escaping
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
comment|// double-join to test back-to-back local params
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"qaz {!join from=www_s to=eee_s}{!join from=qqq_s to=www_s}id:10"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/id=='12'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSolr4121
specifier|public
name|void
name|testSolr4121
parameter_list|()
throws|throws
name|Exception
block|{
comment|// At one point, balanced quotes messed up the parser(SOLR-4121)
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"eee_s:'balance'"
argument_list|,
literal|"indent"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSyntax
specifier|public
name|void
name|testSyntax
parameter_list|()
throws|throws
name|Exception
block|{
comment|// a bare * should be treated as *:*
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*"
argument_list|,
literal|"df"
argument_list|,
literal|"doesnotexist_s"
argument_list|)
argument_list|,
literal|"/response/docs/[0]=="
comment|// make sure we get something...
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doesnotexist_s:*"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
comment|// nothing should be found
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doesnotexist_s:( * * * )"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
comment|// nothing should be found
argument_list|)
expr_stmt|;
comment|// length of date math caused issues...
if|if
condition|(
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
operator|.
name|getField
argument_list|(
literal|"foo_dt"
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|isPointField
argument_list|()
condition|)
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo_dt:\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\""
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/debug/parsedquery=='IndexOrDocValuesQuery(foo_dt:[1378857600000 TO 1378857600000])'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"foo_dt:\"2013-03-08T00:46:15Z/DAY+000MILLISECONDS+00SECONDS+00MINUTES+00HOURS+0000000000YEARS+6MONTHS+3DAYS\""
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/debug/parsedquery=='foo_dt:2013-09-11T00:00:00Z'"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNestedQueryModifiers
specifier|public
name|void
name|testNestedQueryModifiers
parameter_list|()
throws|throws
name|Exception
block|{
comment|// One previous error was that for nested queries, outer parameters overrode nested parameters.
comment|// For example _query_:"\"a b\"~2" was parsed as "a b"
name|String
name|subqq
init|=
literal|"_query_:\"{!v=$qq}\""
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"_query_:\"\\\"how brown\\\"~2\""
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/id=='1'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|subqq
argument_list|,
literal|"qq"
argument_list|,
literal|"\"how brown\"~2"
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/id=='1'"
argument_list|)
expr_stmt|;
comment|// Should explicit slop override?  It currently does not, but that could be considered a bug.
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|subqq
operator|+
literal|"~1"
argument_list|,
literal|"qq"
argument_list|,
literal|"\"how brown\"~2"
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/id=='1'"
argument_list|)
expr_stmt|;
comment|// Should explicit slop override?  It currently does not, but that could be considered a bug.
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"  {!v=$qq}~1"
argument_list|,
literal|"qq"
argument_list|,
literal|"\"how brown\"~2"
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/id=='1'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"q"
argument_list|,
name|subqq
operator|+
literal|"^3"
argument_list|,
literal|"qq"
argument_list|,
literal|"text:x^2"
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"q"
argument_list|,
literal|"  {!v=$qq}^3"
argument_list|,
literal|"qq"
argument_list|,
literal|"text:x^2"
argument_list|,
literal|"debug"
argument_list|,
literal|"query"
argument_list|)
argument_list|,
literal|"/debug/parsedquery_toString=='((text:x)^2.0)^3.0'"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCSQ
specifier|public
name|void
name|testCSQ
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|QParser
name|qParser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"text:x^=3"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|q
operator|instanceof
name|BoostQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|BoostQuery
operator|)
name|q
operator|)
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|ConstantScoreQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
operator|(
operator|(
name|BoostQuery
operator|)
name|q
operator|)
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"(text:x text:y)^=-3"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|instanceof
name|BoostQuery
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|BoostQuery
operator|)
name|q
operator|)
operator|.
name|getQuery
argument_list|()
operator|instanceof
name|ConstantScoreQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3.0
argument_list|,
operator|(
operator|(
name|BoostQuery
operator|)
name|q
operator|)
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// automatically use TermsQuery when appropriate
annotation|@
name|Test
DECL|method|testAutoTerms
specifier|public
name|void
name|testAutoTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|QParser
name|qParser
decl_stmt|;
name|Query
name|q
decl_stmt|,
name|qq
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sowFalseParamsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sowFalseParamsMap
operator|.
name|put
argument_list|(
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sowTrueParamsMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|sowTrueParamsMap
operator|.
name|put
argument_list|(
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MapSolrParams
argument_list|>
name|paramMaps
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|MapSolrParams
argument_list|(
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
comment|// no sow param (i.e. the default sow value)
operator|new
name|MapSolrParams
argument_list|(
name|sowFalseParamsMap
argument_list|)
argument_list|,
operator|new
name|MapSolrParams
argument_list|(
name|sowTrueParamsMap
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|MapSolrParams
name|params
range|:
name|paramMaps
control|)
block|{
comment|// relevance query should not be a filter
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_s:(a b c)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// small filter query should still use BooleanQuery
if|if
condition|(
name|QueryParser
operator|.
name|TERMS_QUERY_THRESHOLD
operator|>
literal|3
condition|)
block|{
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_s:(a b c)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// large relevancy query should use BooleanQuery
comment|// TODO: we may decide that string fields shouldn't have relevance in the future... change to a text field w/o a stop filter if so
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_s:(a b c d e f g h i j k l m n o p q r s t u v w x y z)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// large filter query should use TermsQuery
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_s:(a b c d e f g h i j k l m n o p q r s t u v w x y z)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
operator|(
operator|(
name|TermInSetQuery
operator|)
name|q
operator|)
operator|.
name|getTermData
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// large numeric filter query should use TermsQuery (for trie fields)
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_ti:(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 11)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
operator|(
operator|(
name|TermInSetQuery
operator|)
name|q
operator|)
operator|.
name|getTermData
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// for point fields large filter query should use PointInSetQuery
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_pi:(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 11)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|q
operator|instanceof
name|PointInSetQuery
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
operator|(
operator|(
name|PointInSetQuery
operator|)
name|q
operator|)
operator|.
name|getPackedPoints
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// a filter() clause inside a relevancy query should be able to use a TermsQuery
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_s:aaa filter(foo_s:(a b c d e f g h i j k l m n o p q r s t u v w x y z))"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|qq
operator|=
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|qq
operator|instanceof
name|TermQuery
condition|)
block|{
name|qq
operator|=
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|qq
operator|instanceof
name|FilterQuery
condition|)
block|{
name|qq
operator|=
operator|(
operator|(
name|FilterQuery
operator|)
name|qq
operator|)
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|26
argument_list|,
operator|(
operator|(
name|TermInSetQuery
operator|)
name|qq
operator|)
operator|.
name|getTermData
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test mixed boolean query, including quotes (which shouldn't matter)
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_s:(a +aaa b -bbb c d e f bar_s:(qqq www) g h i j k l m n o p q r s t u v w x y z)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|qq
operator|=
literal|null
expr_stmt|;
for|for
control|(
name|BooleanClause
name|clause
range|:
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
control|)
block|{
name|qq
operator|=
name|clause
operator|.
name|getQuery
argument_list|()
expr_stmt|;
if|if
condition|(
name|qq
operator|instanceof
name|TermInSetQuery
condition|)
break|break;
block|}
name|assertEquals
argument_list|(
literal|26
argument_list|,
operator|(
operator|(
name|TermInSetQuery
operator|)
name|qq
operator|)
operator|.
name|getTermData
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// test terms queries of two different fields (LUCENE-7637 changed to require all terms be in the same field)
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|17
condition|;
name|i
operator|++
control|)
block|{
name|char
name|letter
init|=
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|i
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"foo_s:"
operator|+
name|letter
operator|+
literal|" bar_s:"
operator|+
name|letter
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|BooleanClause
name|clause
range|:
operator|(
operator|(
name|BooleanQuery
operator|)
name|q
operator|)
operator|.
name|clauses
argument_list|()
control|)
block|{
name|qq
operator|=
name|clause
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
operator|(
operator|(
name|TermInSetQuery
operator|)
name|qq
operator|)
operator|.
name|getTermData
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testManyClauses
specifier|public
name|void
name|testManyClauses
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|a
init|=
literal|"1 a 2 b 3 c 10 d 11 12 "
decl_stmt|;
comment|// 10 terms
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"id:("
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1024
condition|;
name|i
operator|++
control|)
block|{
comment|// historically, the max number of boolean clauses defaulted to 1024
name|sb
operator|.
name|append
argument_list|(
literal|'z'
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
name|String
name|q
init|=
name|sb
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// This will still fail when used as the main query, but will pass in a filter query since TermsQuery can be used.
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|q
argument_list|)
argument_list|,
literal|"/response/numFound==6"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|q
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==6"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fq"
argument_list|,
name|q
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==6"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testComments
specifier|public
name|void
name|testComments
parameter_list|()
throws|throws
name|Exception
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1 id:2 /* *:* */ id:3"
argument_list|)
argument_list|,
literal|"/response/numFound==3"
argument_list|)
expr_stmt|;
comment|//
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1 /**.*/"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
comment|// if it matches more than one, it's being treated as a regex.
argument_list|)
expr_stmt|;
comment|// don't match comment start in string
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|" \"/*\" id:1 id:2 \"*/\" id:3"
argument_list|)
argument_list|,
literal|"/response/numFound==3"
argument_list|)
expr_stmt|;
comment|// don't match an end of comment within  a string
comment|// assertJQ(req("q","id:1 id:2 /* \"*/\" *:* */ id:3")
comment|//     ,"/response/numFound==3"
comment|// );
comment|// removed this functionality - there's more of a danger to thinking we're in a string.
comment|//   can't do it */  ......... '
comment|// nested comments
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1 /* id:2 /* */ /* /**/ id:3 */ id:10 */ id:11"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFilter
specifier|public
name|void
name|testFilter
parameter_list|()
throws|throws
name|Exception
block|{
comment|// normal test "solrconfig.xml" has autowarm set to 2...
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:* "
operator|+
name|i
argument_list|,
literal|"fq"
argument_list|,
literal|"filter(just_to_clear_the_cache) filter(id:10000"
operator|+
name|i
operator|+
literal|") filter(id:10001"
operator|+
name|i
operator|+
literal|")"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|delI
argument_list|(
literal|"777"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// arg... commit no longer "commits" unless there has been a change.
specifier|final
name|MetricsMap
name|filterCacheStats
init|=
operator|(
name|MetricsMap
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreMetricManager
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
literal|"CACHE.searcher.filterCache"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|filterCacheStats
argument_list|)
expr_stmt|;
specifier|final
name|MetricsMap
name|queryCacheStats
init|=
operator|(
name|MetricsMap
operator|)
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getCoreMetricManager
argument_list|()
operator|.
name|getRegistry
argument_list|()
operator|.
name|getMetrics
argument_list|()
operator|.
name|get
argument_list|(
literal|"CACHE.searcher.queryResultCache"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|queryCacheStats
argument_list|)
expr_stmt|;
name|long
name|inserts
init|=
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
decl_stmt|;
name|long
name|hits
init|=
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doesnotexist filter(id:1) filter(qqq_s:X) filter(abcdefg)"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|inserts
operator|+=
literal|3
expr_stmt|;
name|assertEquals
argument_list|(
name|inserts
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doesnotexist2 filter(id:1) filter(qqq_s:X) filter(abcdefg)"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|hits
operator|+=
literal|3
expr_stmt|;
name|assertEquals
argument_list|(
name|inserts
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure normal "fq" parameters also hit the cache the same way
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"doesnotexist3"
argument_list|,
literal|"fq"
argument_list|,
literal|"id:1"
argument_list|,
literal|"fq"
argument_list|,
literal|"qqq_s:X"
argument_list|,
literal|"fq"
argument_list|,
literal|"abcdefg"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|hits
operator|+=
literal|3
expr_stmt|;
name|assertEquals
argument_list|(
name|inserts
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// try a query deeply nested in a FQ
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:* doesnotexist4"
argument_list|,
literal|"fq"
argument_list|,
literal|"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|inserts
operator|+=
literal|1
expr_stmt|;
comment|// +1 for top level fq
name|hits
operator|+=
literal|3
expr_stmt|;
name|assertEquals
argument_list|(
name|inserts
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// retry the complex FQ and make sure hashCode/equals works as expected w/ filter queries
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:* doesnotexist5"
argument_list|,
literal|"fq"
argument_list|,
literal|"(id:* +(filter(id:1) filter(qqq_s:X) filter(abcdefg)) )"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|hits
operator|+=
literal|1
expr_stmt|;
comment|// top-level fq should have been found.
name|assertEquals
argument_list|(
name|inserts
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// try nested filter with multiple top-level args (i.e. a boolean query)
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:* +filter(id:1 filter(qqq_s:X) abcdefg)"
argument_list|)
argument_list|,
literal|"/response/numFound==2"
argument_list|)
expr_stmt|;
name|hits
operator|+=
literal|1
expr_stmt|;
comment|// the inner filter
name|inserts
operator|+=
literal|1
expr_stmt|;
comment|// the outer filter
name|assertEquals
argument_list|(
name|inserts
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"inserts"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hits
argument_list|,
operator|(
operator|(
name|Long
operator|)
name|filterCacheStats
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|"hits"
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// test the score for a filter, and that default score is 0
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"+filter(*:*) +filter(id:1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/score==0.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"+filter(*:*)^=10 +filter(id:1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
argument_list|,
literal|"/response/docs/[0]/score==10.0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRegex
specifier|public
name|void
name|testRegex
parameter_list|()
throws|throws
name|Exception
block|{
comment|// leading slash in a regex fixed by SOLR-8605
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"rrr_s:/\\/lead.*/"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
argument_list|,
literal|"/response/docs==[{id:'13'}]"
argument_list|)
expr_stmt|;
block|}
comment|// parsing performance test
comment|// Run from command line with ant test -Dtestcase=TestSolrQueryParser -Dtestmethod=testParsingPerformance -Dtests.asserts=false 2>/dev/null | grep QPS
annotation|@
name|Test
DECL|method|testParsingPerformance
specifier|public
name|void
name|testParsingPerformance
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|args
init|=
block|{
literal|"-queries"
block|,
literal|"100"
block|,
literal|"-iter"
block|,
literal|"1000"
block|,
literal|"-clauses"
block|,
literal|"100"
block|,
literal|"-format"
block|,
literal|"term%d"
block|,
literal|"-seed"
block|,
literal|"0"
block|}
decl_stmt|;
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-queries"
block|,
literal|"1000"
block|,
literal|"-iter"
block|,
literal|"2000"
block|,
literal|"-clauses"
block|,
literal|"10"
block|,
literal|"-format"
block|,
literal|"term%d"
block|,
literal|"-seed"
block|,
literal|"0"
block|}
expr_stmt|;
comment|// args = new String[] {"-queries","1000" ,"-iter","1000000000", "-clauses","10", "-format","term%d", "-seed","0"};
name|boolean
name|assertOn
init|=
literal|false
decl_stmt|;
assert|assert
name|assertOn
operator|=
literal|true
assert|;
if|if
condition|(
name|assertOn
condition|)
block|{
comment|// System.out.println("WARNING! Assertions are enabled!!!! Will only execute small run.  Change with -Dtests.asserts=false");
name|args
operator|=
operator|new
name|String
index|[]
block|{
literal|"-queries"
block|,
literal|"10"
block|,
literal|"-iter"
block|,
literal|"2"
block|,
literal|"-clauses"
block|,
literal|"20"
block|,
literal|"-format"
block|,
literal|"term%d"
block|,
literal|"-seed"
block|,
literal|"0"
block|}
expr_stmt|;
block|}
name|int
name|iter
init|=
literal|1000
decl_stmt|;
name|int
name|numQueries
init|=
literal|100
decl_stmt|;
name|int
name|maxClauses
init|=
literal|5
decl_stmt|;
name|int
name|maxTerm
init|=
literal|10000000
decl_stmt|;
name|String
name|format
init|=
literal|"term%d"
decl_stmt|;
name|String
name|field
init|=
literal|"foo_s"
decl_stmt|;
name|long
name|seed
init|=
literal|0
decl_stmt|;
name|boolean
name|isFilter
init|=
literal|true
decl_stmt|;
name|boolean
name|rewrite
init|=
literal|false
decl_stmt|;
name|String
name|otherStuff
init|=
literal|""
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|a
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
literal|"-queries"
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|numQueries
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-iter"
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|iter
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-clauses"
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|maxClauses
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-format"
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|format
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"-seed"
operator|.
name|equals
argument_list|(
name|a
argument_list|)
condition|)
block|{
name|seed
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|otherStuff
operator|=
name|otherStuff
operator|+
literal|" "
operator|+
name|a
expr_stmt|;
block|}
block|}
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|String
index|[]
name|queries
init|=
operator|new
name|String
index|[
name|numQueries
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|explicitField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|explicitField
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|field
operator|+
literal|":("
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|otherStuff
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|int
name|nClauses
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxClauses
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// TODO: query parse can't parse () for some reason???
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|nClauses
condition|;
name|c
operator|++
control|)
block|{
name|String
name|termString
init|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|US
argument_list|,
name|format
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
name|maxTerm
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|explicitField
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|field
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|termString
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|explicitField
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|queries
index|[
name|i
index|]
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|// System.out.println(queries[i]);
block|}
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|iter
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|String
name|qStr
range|:
name|queries
control|)
block|{
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|qStr
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setIsFilter
argument_list|(
name|isFilter
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|parser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|rewrite
condition|)
block|{
comment|// TODO: do rewrite
block|}
name|ret
operator|+=
name|q
operator|.
name|getClass
argument_list|()
operator|.
name|hashCode
argument_list|()
expr_stmt|;
comment|// use the query somehow
block|}
block|}
name|long
name|end
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|(
name|assertOn
condition|?
literal|"WARNING, assertions enabled. "
else|:
literal|""
operator|)
operator|+
literal|"ret="
operator|+
name|ret
operator|+
literal|" Parser QPS:"
operator|+
operator|(
operator|(
name|long
operator|)
name|numQueries
operator|*
name|iter
operator|)
operator|*
literal|1000000000
operator|/
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSplitOnWhitespace_Basic
specifier|public
name|void
name|testSplitOnWhitespace_Basic
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The "syn" field has synonyms loaded from synonyms.txt
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wifi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
comment|// retrieve the single document containing literal "wifi"
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=false}wi fi"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=true}wi fi"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene}wi fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitOnWhitespace_Comments
specifier|public
name|void
name|testSplitOnWhitespace_Comments
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The "syn" field has synonyms loaded from synonyms.txt
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wifi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
comment|// retrieve the single document containing literal "wifi"
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /* foo */ fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /* foo */ /* bar */ fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|" /* foo */ wi fi /* bar */"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|" /* foo */ wi /* bar */ fi /* baz */"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /* foo */ fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /* foo */ /* bar */ fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"/* foo */ wi fi /* bar */"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"/* foo */ wi /* bar */ fi /* baz */"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /* foo */ fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /* foo */ /* bar */ fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|" /* foo */ wi fi /* bar */"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|" /* foo */ wi /* bar */ fi /* baz */"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=false}wi fi"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=false}wi /* foo */ fi"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=false}wi /* foo */ /* bar */ fi"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=false}/* foo */ wi fi /* bar */"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=true}wi fi"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=true}wi /* foo */ fi"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=true}wi /* foo */ /* bar */ fi"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=true}/* foo */ wi fi /* bar */"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene}wi fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene}wi /* foo */ fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene}wi /* foo */ /* bar */ fi"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene}/* foo */ wi fi /* bar */"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"{!lucene}/* foo */ wi /* bar */ fi /* baz */"
argument_list|)
comment|// default sow=false
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOperatorsAndMultiWordSynonyms
specifier|public
name|void
name|testOperatorsAndMultiWordSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
comment|// The "syn" field has synonyms loaded from synonyms.txt
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wifi"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
comment|// retrieve the single document containing literal "wifi"
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// trigger the "wi fi => wifi" synonym
argument_list|,
literal|"/response/numFound==1"
argument_list|,
literal|"/response/docs/[0]/id=='20'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"+wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"-wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"!wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi* fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
comment|// matches because wi* matches wifi
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"w? fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi~1 fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi^2 fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi^=2 fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi +fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi -fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi !fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi*"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi?"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi~1"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi^2"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi^=2"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"syn:wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi syn:fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NOT wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi NOT fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi AND ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"ATM AND wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi&& ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"ATM&& wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi) AND ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"ATM AND (wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi)&& ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"ATM&& (wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi OR NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NotThereAtAll OR wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi || NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NotThereAtAll || wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi) OR NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NotThereAtAll OR (wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi) || NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NotThereAtAll || (wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"\"wi\" fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi \"fi\""
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi) fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi (fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"/wi/ fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi /fi/"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"+(wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|Map
name|all
init|=
operator|(
name|Map
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"rows"
argument_list|,
literal|"0"
argument_list|,
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|totalDocs
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
operator|(
name|Map
operator|)
name|all
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
literal|"numFound"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|allDocsExceptOne
init|=
name|totalDocs
operator|-
literal|1
decl_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"-(wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound=="
operator|+
name|allDocsExceptOne
comment|// one doc contains "wifi" in the syn field
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"!(wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound=="
operator|+
name|allDocsExceptOne
comment|// one doc contains "wifi" in the syn field
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NOT (wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound=="
operator|+
name|allDocsExceptOne
comment|// one doc contains "wifi" in the syn field
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi)^2"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"(wi fi)^=2"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"syn:(wi fi)"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"+ATM wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"-ATM wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"-NotThereAtAll wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"!ATM wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"!NotThereAtAll wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NOT ATM wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"NOT NotThereAtAll wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"AT* wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"AT? wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"\"ATM\" wi fi"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi +ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi -ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi -NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi !ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi !NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi NOT ATM"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi NOT NotThereAtAll"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi AT*"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi AT?"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"wi fi \"ATM\""
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"\"wi fi\"~2"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"syn"
argument_list|,
literal|"q"
argument_list|,
literal|"syn:\"wi fi\""
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAutoGeneratePhraseQueries
specifier|public
name|void
name|testAutoGeneratePhraseQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|noSowParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|ModifiableSolrParams
name|sowFalseParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|sowFalseParams
operator|.
name|add
argument_list|(
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|sowTrueParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|sowTrueParams
operator|.
name|add
argument_list|(
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
comment|// From synonyms.txt:
comment|//
comment|//     crow blackbird, grackle
comment|//
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
init|)
block|{
for|for
control|(
name|SolrParams
name|params
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|noSowParams
argument_list|,
name|sowFalseParams
argument_list|)
control|)
block|{
name|QParser
name|qParser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"text:grackle"
argument_list|,
name|req
argument_list|)
decl_stmt|;
comment|// "text" has autoGeneratePhraseQueries="true"
name|qParser
operator|.
name|setParams
argument_list|(
name|sowFalseParams
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text:\"crow blackbird\" text:grackl"
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QParser
name|qParser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"text:grackle"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|qParser
operator|.
name|setParams
argument_list|(
name|sowTrueParams
argument_list|)
expr_stmt|;
name|Query
name|q
init|=
name|qParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"spanOr([spanNear([text:crow, text:blackbird], 0, true), text:grackl])"
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SolrParams
name|params
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|noSowParams
argument_list|,
name|sowTrueParams
argument_list|,
name|sowFalseParams
argument_list|)
control|)
block|{
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"text_sw:grackle"
argument_list|,
name|req
argument_list|)
expr_stmt|;
comment|// "text_sw" doesn't specify autoGeneratePhraseQueries => default false
name|qParser
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|q
operator|=
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"(+text_sw:crow +text_sw:blackbird) text_sw:grackl"
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testShingleQueries
specifier|public
name|void
name|testShingleQueries
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|sowFalseParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|sowFalseParams
operator|.
name|add
argument_list|(
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
name|sowFalseParams
argument_list|)
init|)
block|{
name|QParser
name|qParser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"shingle23:(A B C)"
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|Query
name|q
init|=
name|qParser
operator|.
name|getQuery
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Synonym(shingle23:A_B shingle23:A_B_C) shingle23:B_C"
argument_list|,
name|q
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"df"
argument_list|,
literal|"shingle23"
argument_list|,
literal|"q"
argument_list|,
literal|"A B C"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBadRequestInSetQuery
specifier|public
name|void
name|testBadRequestInSetQuery
parameter_list|()
throws|throws
name|SyntaxError
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
name|QParser
name|qParser
decl_stmt|;
name|String
index|[]
name|fieldSuffix
init|=
operator|new
name|String
index|[]
block|{
literal|"ti"
block|,
literal|"tf"
block|,
literal|"td"
block|,
literal|"tl"
block|,
literal|"i"
block|,
literal|"f"
block|,
literal|"d"
block|,
literal|"l"
block|,
literal|"is"
block|,
literal|"fs"
block|,
literal|"ds"
block|,
literal|"ls"
block|,
literal|"i_dv"
block|,
literal|"f_dv"
block|,
literal|"d_dv"
block|,
literal|"l_dv"
block|,
literal|"is_dv"
block|,
literal|"fs_dv"
block|,
literal|"ds_dv"
block|,
literal|"ls_dv"
block|,
literal|"i_dvo"
block|,
literal|"f_dvo"
block|,
literal|"d_dvo"
block|,
literal|"l_dvo"
block|,     }
decl_stmt|;
for|for
control|(
name|String
name|suffix
range|:
name|fieldSuffix
control|)
block|{
comment|//Good queries
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_"
operator|+
name|suffix
operator|+
literal|":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 25)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|suffix
range|:
name|fieldSuffix
control|)
block|{
name|qParser
operator|=
name|QParser
operator|.
name|getParser
argument_list|(
literal|"foo_"
operator|+
name|suffix
operator|+
literal|":(1 2 3 4 5 6 7 8 9 10 20 19 18 17 16 15 14 13 12 NOT_A_NUMBER)"
argument_list|,
name|req
argument_list|)
expr_stmt|;
name|qParser
operator|.
name|setIsFilter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// this may change in the future
try|try
block|{
name|qParser
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Expecting exception"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|,
name|e
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unexpected exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid Number: NOT_A_NUMBER"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

