begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.facet
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|JSONTestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseHS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_class
DECL|class|TestJsonFacetRefinement
specifier|public
class|class
name|TestJsonFacetRefinement
extends|extends
name|SolrTestCaseHS
block|{
DECL|field|servers
specifier|private
specifier|static
name|SolrInstances
name|servers
decl_stmt|;
comment|// for distributed testing
DECL|field|origTableSize
specifier|private
specifier|static
name|int
name|origTableSize
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|JSONTestUtil
operator|.
name|failRepeatedKeys
operator|=
literal|true
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema_latest.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|initServers
specifier|public
specifier|static
name|void
name|initServers
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|servers
operator|==
literal|null
condition|)
block|{
name|servers
operator|=
operator|new
name|SolrInstances
argument_list|(
literal|3
argument_list|,
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema_latest.xml"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
DECL|method|afterTests
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
throws|throws
name|Exception
block|{
name|JSONTestUtil
operator|.
name|failRepeatedKeys
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|servers
operator|!=
literal|null
condition|)
block|{
name|servers
operator|.
name|stop
argument_list|()
expr_stmt|;
name|servers
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// todo - pull up to test base class?
DECL|method|matchJSON
specifier|public
name|void
name|matchJSON
parameter_list|(
name|String
name|json
parameter_list|,
name|double
name|delta
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|test
range|:
name|tests
control|)
block|{
if|if
condition|(
name|test
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|json
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|test
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
name|String
name|err
init|=
name|JSONTestUtil
operator|.
name|match
argument_list|(
name|json
argument_list|,
name|test
argument_list|,
name|delta
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"JSON failed validation. error="
operator|+
name|err
operator|+
literal|"\n expected ="
operator|+
name|test
operator|+
literal|"\n got = "
operator|+
name|json
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|match
specifier|public
name|void
name|match
parameter_list|(
name|Object
name|input
parameter_list|,
name|double
name|delta
parameter_list|,
name|String
modifier|...
name|tests
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|test
range|:
name|tests
control|)
block|{
name|String
name|err
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|test
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|input
operator|!=
literal|null
condition|)
block|{
name|err
operator|=
literal|"expected null"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|input
operator|==
literal|null
condition|)
block|{
name|err
operator|=
literal|"got null"
expr_stmt|;
block|}
else|else
block|{
name|err
operator|=
name|JSONTestUtil
operator|.
name|matchObj
argument_list|(
name|input
argument_list|,
name|test
argument_list|,
name|delta
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"JSON failed validation. error="
operator|+
name|err
operator|+
literal|"\n expected ="
operator|+
name|test
operator|+
literal|"\n got = "
operator|+
name|input
argument_list|)
throw|;
block|}
block|}
block|}
comment|/** Use SimpleOrderedMap rather than Map to match responses from shards */
DECL|method|fromJSON
specifier|public
specifier|static
name|Object
name|fromJSON
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|IOException
block|{
name|JSONParser
name|parser
init|=
operator|new
name|JSONParser
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|ObjectBuilder
name|ob
init|=
operator|new
name|ObjectBuilder
argument_list|(
name|parser
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|newObject
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|SimpleOrderedMap
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addKeyVal
parameter_list|(
name|Object
name|map
parameter_list|,
name|Object
name|key
parameter_list|,
name|Object
name|val
parameter_list|)
throws|throws
name|IOException
block|{
operator|(
operator|(
name|SimpleOrderedMap
operator|)
name|map
operator|)
operator|.
name|add
argument_list|(
name|key
operator|.
name|toString
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
name|ob
operator|.
name|getObject
argument_list|()
return|;
block|}
DECL|method|doTestRefine
name|void
name|doTestRefine
parameter_list|(
name|String
name|facet
parameter_list|,
name|String
modifier|...
name|responsesAndTests
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
try|try
block|{
name|int
name|nShards
init|=
name|responsesAndTests
operator|.
name|length
operator|/
literal|2
decl_stmt|;
name|Object
name|jsonFacet
init|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|facet
argument_list|)
decl_stmt|;
name|FacetParser
name|parser
init|=
operator|new
name|FacetTopParser
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|FacetRequest
name|facetRequest
init|=
name|parser
operator|.
name|parse
argument_list|(
name|jsonFacet
argument_list|)
decl_stmt|;
name|FacetMerger
name|merger
init|=
literal|null
decl_stmt|;
name|FacetMerger
operator|.
name|Context
name|ctx
init|=
operator|new
name|FacetMerger
operator|.
name|Context
argument_list|(
name|nShards
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nShards
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|response
init|=
name|fromJSON
argument_list|(
name|responsesAndTests
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|merger
operator|=
name|facetRequest
operator|.
name|createFacetMerger
argument_list|(
name|response
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|newShard
argument_list|(
literal|"s"
operator|+
name|i
argument_list|)
expr_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|response
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nShards
condition|;
name|i
operator|++
control|)
block|{
name|ctx
operator|.
name|setShard
argument_list|(
literal|"s"
operator|+
name|i
argument_list|)
expr_stmt|;
name|Object
name|refinement
init|=
name|merger
operator|.
name|getRefinement
argument_list|(
name|ctx
argument_list|)
decl_stmt|;
name|String
name|tests
init|=
name|responsesAndTests
index|[
name|nShards
operator|+
name|i
index|]
decl_stmt|;
name|match
argument_list|(
name|refinement
argument_list|,
literal|1e-5
argument_list|,
name|tests
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMerge
specifier|public
name|void
name|testMerge
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestRefine
argument_list|(
literal|"{x : {type:terms, field:X, limit:2, refine:true} }"
argument_list|,
comment|// the facet request
literal|"{x: {buckets:[{val:x1, count:5}, {val:x2, count:3}] } }"
argument_list|,
comment|// shard0 response
literal|"{x: {buckets:[{val:x2, count:4}, {val:x3, count:2}] } }"
argument_list|,
comment|// shard1 response
literal|null
argument_list|,
comment|// shard0 expected refinement info
literal|"=={x:{_l:[x1]}}"
comment|// shard1 expected refinement info
argument_list|)
expr_stmt|;
comment|// same test w/o refinement turned on
name|doTestRefine
argument_list|(
literal|"{x : {type:terms, field:X, limit:2} }"
argument_list|,
comment|// the facet request
literal|"{x: {buckets:[{val:x1, count:5}, {val:x2, count:3}] } }"
argument_list|,
comment|// shard0 response
literal|"{x: {buckets:[{val:x2, count:4}, {val:x3, count:2}] } }"
argument_list|,
comment|// shard1 response
literal|null
argument_list|,
comment|// shard0 expected refinement info
literal|null
comment|// shard1 expected refinement info
argument_list|)
expr_stmt|;
comment|// same test, but nested in query facet
name|doTestRefine
argument_list|(
literal|"{top:{type:query, q:'foo_s:myquery', facet:{x : {type:terms, field:X, limit:2, refine:true} } } }"
argument_list|,
comment|// the facet request
literal|"{top: {x: {buckets:[{val:x1, count:5}, {val:x2, count:3}] } } }"
argument_list|,
comment|// shard0 response
literal|"{top: {x: {buckets:[{val:x2, count:4}, {val:x3, count:2}] } } }"
argument_list|,
comment|// shard1 response
literal|null
argument_list|,
comment|// shard0 expected refinement info
literal|"=={top:{x:{_l:[x1]}}}"
comment|// shard1 expected refinement info
argument_list|)
expr_stmt|;
comment|// same test w/o refinement turned on
name|doTestRefine
argument_list|(
literal|"{top:{type:query, q:'foo_s:myquery', facet:{x : {type:terms, field:X, limit:2, refine:false} } } }"
argument_list|,
literal|"{top: {x: {buckets:[{val:x1, count:5}, {val:x2, count:3}] } } }"
argument_list|,
comment|// shard0 response
literal|"{top: {x: {buckets:[{val:x2, count:4}, {val:x3, count:2}] } } }"
argument_list|,
comment|// shard1 response
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// same test, but nested in a terms facet
name|doTestRefine
argument_list|(
literal|"{top:{type:terms, field:Afield, facet:{x : {type:terms, field:X, limit:2, refine:true} } } }"
argument_list|,
literal|"{top: {buckets:[{val:'A', count:2, x:{buckets:[{val:x1, count:5},{val:x2, count:3}]} } ] } }"
argument_list|,
literal|"{top: {buckets:[{val:'A', count:1, x:{buckets:[{val:x2, count:4},{val:x3, count:2}]} } ] } }"
argument_list|,
literal|null
argument_list|,
literal|"=={top: {"
operator|+
literal|"_s:[  ['A' , {x:{_l:[x1]}} ]  ]"
operator|+
literal|"    }  "
operator|+
literal|"}"
argument_list|)
expr_stmt|;
comment|// same test, but nested in range facet
name|doTestRefine
argument_list|(
literal|"{top:{type:range, field:R, start:0, end:1, gap:1, facet:{x : {type:terms, field:X, limit:2, refine:true} } } }"
argument_list|,
literal|"{top: {buckets:[{val:0, count:2, x:{buckets:[{val:x1, count:5},{val:x2, count:3}]} } ] } }"
argument_list|,
literal|"{top: {buckets:[{val:0, count:1, x:{buckets:[{val:x2, count:4},{val:x3, count:2}]} } ] } }"
argument_list|,
literal|null
argument_list|,
literal|"=={top: {"
operator|+
literal|"_s:[  [0 , {x:{_l:[x1]}} ]  ]"
operator|+
literal|"    }  "
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

