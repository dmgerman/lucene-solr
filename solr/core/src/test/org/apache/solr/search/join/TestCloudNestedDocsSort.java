begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestCloudNestedDocsSort
specifier|public
class|class
name|TestCloudNestedDocsSort
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|vals
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|client
specifier|private
specifier|static
name|CloudSolrClient
name|client
decl_stmt|;
DECL|field|maxDocs
specifier|private
specifier|static
name|int
name|maxDocs
decl_stmt|;
DECL|field|matchingParent
specifier|private
specifier|static
name|String
name|matchingParent
decl_stmt|;
DECL|field|matchingChild
specifier|private
specifier|static
name|String
name|matchingChild
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
literal|""
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000000
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|configDir
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|,
literal|"collection1"
argument_list|,
literal|"conf"
argument_list|)
decl_stmt|;
name|String
name|configName
init|=
literal|"solrCloudCollectionConfig"
decl_stmt|;
name|int
name|nodeCount
init|=
literal|5
decl_stmt|;
name|configureCluster
argument_list|(
name|nodeCount
argument_list|)
operator|.
name|addConfig
argument_list|(
name|configName
argument_list|,
name|configDir
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|int
name|shards
init|=
literal|2
decl_stmt|;
name|int
name|replicas
init|=
literal|2
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"collection1"
argument_list|,
name|configName
argument_list|,
name|shards
argument_list|,
name|replicas
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"config"
argument_list|,
literal|"solrconfig-minimal.xml"
argument_list|)
operator|.
name|withProperty
argument_list|(
literal|"schema"
argument_list|,
literal|"schema.xml"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
expr_stmt|;
name|client
operator|.
name|setDefaultCollection
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|client
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"collection1"
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|30
argument_list|)
expr_stmt|;
block|{
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|parentsNum
init|=
literal|10
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parentsNum
operator|||
operator|(
name|matchingParent
operator|==
literal|null
operator|||
name|matchingChild
operator|==
literal|null
operator|)
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|parentTieVal
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|final
name|String
name|parentId
init|=
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
decl_stmt|;
specifier|final
name|SolrInputDocument
name|parent
init|=
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
name|parentId
argument_list|,
literal|"type_s"
argument_list|,
literal|"parent"
argument_list|,
literal|"parentTie_s1"
argument_list|,
name|parentTieVal
argument_list|,
literal|"parent_id_s1"
argument_list|,
name|parentId
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|parentFilter
init|=
name|addValsField
argument_list|(
name|parent
argument_list|,
literal|"parentFilter_s"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|kids
init|=
name|usually
argument_list|()
condition|?
name|atLeast
argument_list|(
literal|20
argument_list|)
else|:
literal|0
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|kids
condition|;
name|c
operator|++
control|)
block|{
name|SolrInputDocument
name|child
init|=
operator|new
name|SolrInputDocument
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|,
literal|"type_s"
argument_list|,
literal|"child"
argument_list|,
literal|"parentTie_s1"
argument_list|,
name|parentTieVal
argument_list|,
literal|"val_s1"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|,
name|Character
operator|.
name|MAX_RADIX
argument_list|)
operator|+
literal|""
argument_list|,
literal|"parent_id_s1"
argument_list|,
name|parentId
argument_list|)
decl_stmt|;
name|child
operator|.
name|addField
argument_list|(
literal|"parentFilter_s"
argument_list|,
name|parentFilter
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|chVals
init|=
name|addValsField
argument_list|(
name|child
argument_list|,
literal|"childFilter_s"
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addChildDocument
argument_list|(
name|child
argument_list|)
expr_stmt|;
comment|// let's pickup at least matching child
specifier|final
name|boolean
name|canPickMatchingChild
init|=
operator|!
name|chVals
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|parentFilter
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|haveNtPickedMatchingChild
init|=
name|matchingParent
operator|==
literal|null
operator|||
name|matchingChild
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|canPickMatchingChild
operator|&&
name|haveNtPickedMatchingChild
operator|&&
name|usually
argument_list|()
condition|)
block|{
name|matchingParent
operator|=
operator|(
name|String
operator|)
name|parentFilter
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
name|matchingChild
operator|=
operator|(
name|String
operator|)
name|chVals
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
block|}
name|maxDocs
operator|+=
name|parent
operator|.
name|getChildDocumentCount
argument_list|()
operator|+
literal|1
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|add
argument_list|(
name|docs
argument_list|)
expr_stmt|;
name|client
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
specifier|final
name|boolean
name|asc
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|String
name|dir
init|=
name|asc
condition|?
literal|"asc"
else|:
literal|"desc"
decl_stmt|;
specifier|final
name|String
name|parentFilter
init|=
literal|"+parentFilter_s:("
operator|+
name|matchingParent
operator|+
literal|" "
operator|+
name|anyValsSpaceDelim
argument_list|(
literal|2
argument_list|)
operator|+
literal|")^=0"
decl_stmt|;
name|String
name|childFilter
init|=
literal|"+childFilter_s:("
operator|+
name|matchingChild
operator|+
literal|" "
operator|+
name|anyValsSpaceDelim
argument_list|(
literal|4
argument_list|)
operator|+
literal|")^=0"
decl_stmt|;
specifier|final
name|String
name|fl
init|=
literal|"id,type_s,parent_id_s1,val_s1,score,parentFilter_s,childFilter_s,parentTie_s1"
decl_stmt|;
name|String
name|sortClause
init|=
literal|"val_s1 "
operator|+
name|dir
operator|+
literal|", "
operator|+
literal|"parent_id_s1 "
operator|+
name|ascDesc
argument_list|()
decl_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|sortClause
operator|=
literal|"parentTie_s1 "
operator|+
name|ascDesc
argument_list|()
operator|+
literal|","
operator|+
name|sortClause
expr_stmt|;
block|}
specifier|final
name|SolrQuery
name|q
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"q"
argument_list|,
literal|"+type_s:child^=0 "
operator|+
name|parentFilter
operator|+
literal|" "
operator|+
name|childFilter
argument_list|,
literal|"sort"
argument_list|,
name|sortClause
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
name|maxDocs
argument_list|,
literal|"fl"
argument_list|,
name|fl
argument_list|)
decl_stmt|;
specifier|final
name|QueryResponse
name|children
init|=
name|client
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
specifier|final
name|SolrQuery
name|bjq
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"q"
argument_list|,
literal|"{!parent which=type_s:parent}(+type_s:child^=0 "
operator|+
name|parentFilter
operator|+
literal|" "
operator|+
name|childFilter
operator|+
literal|")"
argument_list|,
literal|"sort"
argument_list|,
name|sortClause
operator|.
name|replace
argument_list|(
literal|"val_s1 "
argument_list|,
literal|"childfield(val_s1)"
argument_list|)
argument_list|,
literal|"rows"
argument_list|,
literal|""
operator|+
name|maxDocs
argument_list|,
literal|"fl"
argument_list|,
name|fl
argument_list|)
decl_stmt|;
specifier|final
name|QueryResponse
name|parents
init|=
name|client
operator|.
name|query
argument_list|(
name|bjq
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|parentIds
init|=
operator|new
name|LinkedHashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
literal|"it can never be empty for sure"
argument_list|,
name|parents
operator|.
name|getResults
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|SolrDocument
argument_list|>
name|parentIter
init|=
name|parents
operator|.
name|getResults
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|parentIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
for|for
control|(
name|SolrDocument
name|child
range|:
name|children
operator|.
name|getResults
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
literal|"child"
argument_list|,
name|child
operator|.
name|getFirstValue
argument_list|(
literal|"type_s"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|parentId
init|=
operator|(
name|String
operator|)
name|child
operator|.
name|getFirstValue
argument_list|(
literal|"parent_id_s1"
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIds
operator|.
name|add
argument_list|(
name|parentId
argument_list|)
condition|)
block|{
comment|// in children the next parent appears, it should be next at parents
specifier|final
name|SolrDocument
name|parent
init|=
name|parentIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"parent"
argument_list|,
name|parent
operator|.
name|getFirstValue
argument_list|(
literal|"type_s"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|actParentId
init|=
literal|""
operator|+
name|parent
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|actParentId
operator|.
name|equals
argument_list|(
name|parentId
argument_list|)
condition|)
block|{
specifier|final
name|String
name|chDump
init|=
name|children
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"SolrDocument"
argument_list|,
literal|"\nSolrDocument"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\n"
operator|+
name|chDump
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|5000
argument_list|)
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\n\n"
operator|+
name|chDump
operator|+
literal|"\n\n"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|actParentId
argument_list|,
name|parentId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|ascDesc
specifier|private
name|String
name|ascDesc
parameter_list|()
block|{
return|return
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"asc"
else|:
literal|"desc"
return|;
block|}
DECL|method|anyValsSpaceDelim
specifier|protected
name|String
name|anyValsSpaceDelim
parameter_list|(
name|int
name|howMany
parameter_list|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|vals
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|vals
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|howMany
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"[,\\[\\]]"
argument_list|,
literal|""
argument_list|)
return|;
block|}
DECL|method|addValsField
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|addValsField
parameter_list|(
specifier|final
name|SolrInputDocument
name|parent
parameter_list|,
specifier|final
name|String
name|field
parameter_list|)
block|{
name|Collections
operator|.
name|shuffle
argument_list|(
name|vals
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|vals
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|vals
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|values
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addField
argument_list|(
name|field
argument_list|,
name|values
argument_list|)
expr_stmt|;
return|return
name|values
return|;
block|}
block|}
end_class

end_unit

