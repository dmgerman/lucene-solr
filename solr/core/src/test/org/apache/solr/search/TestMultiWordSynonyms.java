begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMultiWordSynonyms
specifier|public
class|class
name|TestMultiWordSynonyms
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema-multiword-synonyms.xml"
argument_list|)
expr_stmt|;
name|index
argument_list|()
expr_stmt|;
block|}
DECL|method|index
specifier|private
specifier|static
name|void
name|index
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"USA Today"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"A dynamic US economy"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"The United States of America's 50 states"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"Party in the U.S.A."
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"These United States"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"America United of States"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"States United"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonPhrase
specifier|public
name|void
name|testNonPhrase
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Don't split on whitespace (sow=false)
for|for
control|(
name|String
name|q
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"US"
argument_list|,
literal|"U.S."
argument_list|,
literal|"USA"
argument_list|,
literal|"U.S.A."
argument_list|,
literal|"United States"
argument_list|,
literal|"United States of America"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|defType
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lucene"
argument_list|,
literal|"edismax"
argument_list|)
control|)
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"defType"
argument_list|,
name|defType
argument_list|,
literal|"df"
argument_list|,
literal|"text"
argument_list|,
literal|"sow"
argument_list|,
literal|"false"
argument_list|)
argument_list|,
literal|"/response/numFound==7"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Split on whitespace (sow=true)
for|for
control|(
name|String
name|q
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"US"
argument_list|,
literal|"U.S."
argument_list|,
literal|"USA"
argument_list|,
literal|"U.S.A."
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|defType
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lucene"
argument_list|,
literal|"edismax"
argument_list|)
control|)
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"defType"
argument_list|,
name|defType
argument_list|,
literal|"df"
argument_list|,
literal|"text"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==7"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|q
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"United States"
argument_list|,
literal|"United States of America"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|defType
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lucene"
argument_list|,
literal|"edismax"
argument_list|)
control|)
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"defType"
argument_list|,
name|defType
argument_list|,
literal|"df"
argument_list|,
literal|"text"
argument_list|,
literal|"sow"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
literal|"/response/numFound==4"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testPhrase
specifier|public
name|void
name|testPhrase
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|q
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"\"US\""
argument_list|,
literal|"\"U.S.\""
argument_list|,
literal|"\"USA\""
argument_list|,
literal|"\"U.S.A.\""
argument_list|,
literal|"\"United States\""
argument_list|,
literal|"\"United States of America\""
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|defType
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"lucene"
argument_list|,
literal|"edismax"
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|sow
range|:
name|Arrays
operator|.
name|asList
argument_list|(
literal|"true"
argument_list|,
literal|"false"
argument_list|)
control|)
block|{
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|,
literal|"defType"
argument_list|,
name|defType
argument_list|,
literal|"df"
argument_list|,
literal|"text"
argument_list|,
literal|"sow"
argument_list|,
name|sow
argument_list|)
argument_list|,
literal|"/response/numFound==5"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

