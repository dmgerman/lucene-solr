begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestComplexPhraseLeadingWildcard
specifier|public
class|class
name|TestComplexPhraseLeadingWildcard
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|noReverseText
specifier|private
specifier|static
specifier|final
name|String
name|noReverseText
init|=
literal|"three"
decl_stmt|;
DECL|field|withOriginal
specifier|private
specifier|static
specifier|final
name|String
name|withOriginal
init|=
literal|"one"
decl_stmt|;
DECL|field|withoutOriginal
specifier|private
specifier|static
specifier|final
name|String
name|withoutOriginal
init|=
literal|"two"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema-reversed.xml"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|doc123
argument_list|(
literal|1
argument_list|,
literal|"one ever"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|doc123
argument_list|(
literal|2
argument_list|,
literal|"once forever"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|doc123
argument_list|(
literal|7
argument_list|,
literal|"once slope forever"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|doc123
argument_list|(
literal|8
argument_list|,
literal|"once again slope forever"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|doc123
argument_list|(
literal|9
argument_list|,
literal|"forever once"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReverseWithOriginal
specifier|public
name|void
name|testReverseWithOriginal
parameter_list|()
throws|throws
name|Exception
block|{
name|checkField
argument_list|(
name|withOriginal
argument_list|)
expr_stmt|;
block|}
comment|// prefix query won't match without original tokens
annotation|@
name|Test
DECL|method|testReverseWithoutOriginal
specifier|public
name|void
name|testReverseWithoutOriginal
parameter_list|()
throws|throws
name|Exception
block|{
name|assertQ
argument_list|(
literal|"prefix query doesn't work without original term"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"on* for*\""
argument_list|,
literal|"df"
argument_list|,
name|withoutOriginal
argument_list|)
argument_list|,
name|expect
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"postfix query works fine even without original"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"*nce *ver\""
argument_list|,
literal|"df"
argument_list|,
name|withoutOriginal
argument_list|)
argument_list|,
name|expect
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testWithoutReverse
specifier|public
name|void
name|testWithoutReverse
parameter_list|()
throws|throws
name|Exception
block|{
name|checkField
argument_list|(
name|noReverseText
argument_list|)
expr_stmt|;
block|}
DECL|method|checkField
specifier|private
name|void
name|checkField
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"on* *ver\""
argument_list|,
literal|"df"
argument_list|,
name|field
argument_list|,
literal|"indent"
argument_list|,
literal|"on"
argument_list|,
literal|"debugQuery"
argument_list|,
literal|"true"
argument_list|)
argument_list|,
name|expect
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"ON* *VER\""
argument_list|,
literal|"df"
argument_list|,
name|field
argument_list|)
argument_list|,
name|expect
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"ON* *ver\""
argument_list|,
literal|"df"
argument_list|,
name|field
argument_list|)
argument_list|,
name|expect
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"on* *ver\"~1"
argument_list|,
literal|"df"
argument_list|,
name|field
argument_list|)
argument_list|,
name|expect
argument_list|(
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"range works if reverse doesn't mess"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"on* [* TO a]\""
argument_list|,
literal|"df"
argument_list|,
name|field
argument_list|)
argument_list|,
name|expect
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"range works if reverse doesn't mess"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!complexphrase inOrder=true}\"[on TO onZ] for*\""
argument_list|,
literal|"df"
argument_list|,
name|field
argument_list|)
argument_list|,
name|expect
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|doc123
specifier|private
specifier|static
name|String
name|doc123
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|text
parameter_list|)
block|{
return|return
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|id
argument_list|,
name|withOriginal
argument_list|,
name|text
argument_list|,
name|withoutOriginal
argument_list|,
name|text
argument_list|,
name|noReverseText
argument_list|,
name|text
argument_list|)
return|;
block|}
DECL|method|expect
specifier|private
specifier|static
name|String
index|[]
name|expect
parameter_list|(
name|String
modifier|...
name|ids
parameter_list|)
block|{
name|String
index|[]
name|xpathes
init|=
operator|new
name|String
index|[
name|ids
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|xpathes
index|[
literal|0
index|]
operator|=
literal|"//result[@numFound="
operator|+
name|ids
operator|.
name|length
operator|+
literal|"]"
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|xpathes
index|[
name|i
operator|++
index|]
operator|=
literal|"//doc/str[@name='id' and text()='"
operator|+
name|id
operator|+
literal|"']"
expr_stmt|;
block|}
return|return
name|xpathes
return|;
block|}
block|}
end_class

end_unit

