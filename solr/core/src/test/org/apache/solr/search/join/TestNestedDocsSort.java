begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SortSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SortSpecParsing
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestNestedDocsSort
specifier|public
class|class
name|TestNestedDocsSort
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testEquality
specifier|public
name|void
name|testEquality
parameter_list|()
block|{
name|parseAssertEq
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(name_s1,$q) asc"
argument_list|)
expr_stmt|;
name|parseAssertEq
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(name_s1) asc"
argument_list|)
expr_stmt|;
name|parseAssertEq
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(name_s1,) asc"
argument_list|)
expr_stmt|;
name|parseAssertNe
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(name_s1,$q) desc"
argument_list|)
expr_stmt|;
name|parseAssertNe
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(surname_s1,$q) asc"
argument_list|)
expr_stmt|;
name|parseAssertNe
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(surname_s1,$q2) desc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AwaitsFix
argument_list|(
name|bugUrl
operator|=
literal|"https://issues.apache.org/jira/browse/LUCENE-7798"
argument_list|)
DECL|method|testEqualityUpToBlockJoin
specifier|public
name|void
name|testEqualityUpToBlockJoin
parameter_list|()
block|{
name|parseAssertNe
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|,
literal|"childfield(name_s1,$q2) asc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testNotBjqReference
specifier|public
name|void
name|testNotBjqReference
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield(name_s1,$notbjq) asc"
argument_list|)
expr_stmt|;
block|}
comment|// root cause is swallowed, but it's logged there.
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testOmitFieldWithComma
specifier|public
name|void
name|testOmitFieldWithComma
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield(,$q)  asc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testOmitField
specifier|public
name|void
name|testOmitField
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield($q)  asc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testForgetEverything
specifier|public
name|void
name|testForgetEverything
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield() asc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testEvenBraces
specifier|public
name|void
name|testEvenBraces
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield asc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testAbsentField
specifier|public
name|void
name|testAbsentField
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield(NEVER_SEEN_IT,$q) asc"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SolrException
operator|.
name|class
argument_list|)
DECL|method|testOmitOrder
specifier|public
name|void
name|testOmitOrder
parameter_list|()
block|{
name|parse
argument_list|(
literal|"childfield(name_s1,$q)"
argument_list|)
expr_stmt|;
block|}
DECL|method|parseAssertEq
specifier|private
name|void
name|parseAssertEq
parameter_list|(
name|String
name|sortField
parameter_list|,
name|String
name|sortField2
parameter_list|)
block|{
name|assertEq
argument_list|(
name|parse
argument_list|(
name|sortField
argument_list|)
argument_list|,
name|parse
argument_list|(
name|sortField2
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|assertEq
specifier|private
name|void
name|assertEq
parameter_list|(
name|SortField
name|sortField
parameter_list|,
name|SortField
name|sortField2
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|sortField
argument_list|,
name|sortField2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sortField
operator|.
name|hashCode
argument_list|()
argument_list|,
name|sortField2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|parseAssertNe
specifier|private
name|void
name|parseAssertNe
parameter_list|(
name|String
name|sortField
parameter_list|,
name|String
name|sortField2
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|parse
argument_list|(
name|sortField
argument_list|)
operator|.
name|equals
argument_list|(
name|parse
argument_list|(
name|sortField2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|parse
specifier|private
name|SortField
name|parse
parameter_list|(
name|String
name|a
parameter_list|)
block|{
specifier|final
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"{!parent which=type_s1:parent}whatever_s1:foo"
argument_list|,
literal|"q2"
argument_list|,
literal|"{!parent which=type_s1:parent}nomater_s1:what"
argument_list|,
literal|"notbjq"
argument_list|,
literal|"foo_s1:bar"
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|SortSpec
name|spec
init|=
name|SortSpecParsing
operator|.
name|parseSortSpec
argument_list|(
name|a
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|spec
operator|.
name|getSchemaFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Sort
name|sort
init|=
name|spec
operator|.
name|getSort
argument_list|()
decl_stmt|;
specifier|final
name|SortField
name|field
init|=
name|sort
operator|.
name|getSort
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|assertNotNull
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testCachehits
specifier|public
name|void
name|testCachehits
parameter_list|()
block|{
specifier|final
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SolrCache
name|cache
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getCache
argument_list|(
literal|"perSegFilter"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|cache
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|state
init|=
name|cache
operator|.
name|getMetricsSnapshot
argument_list|()
decl_stmt|;
name|String
name|lookupsKey
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|state
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|key
operator|.
name|endsWith
argument_list|(
literal|".lookups"
argument_list|)
condition|)
block|{
name|lookupsKey
operator|=
name|key
expr_stmt|;
break|break;
block|}
block|}
name|Number
name|before
init|=
operator|(
name|Number
operator|)
name|state
operator|.
name|get
argument_list|(
name|lookupsKey
argument_list|)
decl_stmt|;
name|parse
argument_list|(
literal|"childfield(name_s1,$q) asc"
argument_list|)
expr_stmt|;
name|Number
name|after
init|=
operator|(
name|Number
operator|)
name|cache
operator|.
name|getMetricsSnapshot
argument_list|()
operator|.
name|get
argument_list|(
name|lookupsKey
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"parsing bjq lookups parent filter,"
operator|+
literal|"parsing sort spec lookups parent and child filters, "
operator|+
literal|"hopefully for the purpose"
argument_list|,
literal|3
argument_list|,
name|after
operator|.
name|intValue
argument_list|()
operator|-
name|before
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

