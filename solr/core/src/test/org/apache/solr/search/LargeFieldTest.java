begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LazyDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|LargeFieldTest
specifier|public
class|class
name|LargeFieldTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|ID_FLD
specifier|private
specifier|static
specifier|final
name|String
name|ID_FLD
init|=
literal|"str"
decl_stmt|;
comment|// TODO alter underlying schema to be 'id'
DECL|field|LAZY_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|LAZY_FIELD
init|=
literal|"lazyField"
decl_stmt|;
DECL|field|BIG_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|BIG_FIELD
init|=
literal|"bigField"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|initManagedSchemaCore
specifier|public
specifier|static
name|void
name|initManagedSchemaCore
parameter_list|()
throws|throws
name|Exception
block|{
comment|// This testing approach means no schema file or per-test temp solr-home!
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.resourceName"
argument_list|,
literal|"schema-one-field-no-dynamic-field-unique-key.xml"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"documentCache.enabled"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enableLazyFieldLoading"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-managed-schema.xml"
argument_list|,
literal|"ignoredSchemaName"
argument_list|)
expr_stmt|;
comment|// TODO SOLR-10229 will make this easier
name|boolean
name|PERSIST_FALSE
init|=
literal|false
decl_stmt|;
comment|// don't write to test resource dir
name|IndexSchema
name|schema
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|schema
operator|=
name|schema
operator|.
name|addFieldTypes
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|schema
operator|.
name|newFieldType
argument_list|(
literal|"textType"
argument_list|,
literal|"solr.TextField"
argument_list|,
comment|// redundant; TODO improve api
name|map
argument_list|(
literal|"name"
argument_list|,
literal|"textType"
argument_list|,
literal|"class"
argument_list|,
literal|"solr.TextField"
argument_list|,
literal|"analyzer"
argument_list|,
name|map
argument_list|(
literal|"class"
argument_list|,
literal|"org.apache.lucene.analysis.standard.StandardAnalyzer"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|PERSIST_FALSE
argument_list|)
expr_stmt|;
name|schema
operator|=
name|schema
operator|.
name|addFields
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|schema
operator|.
name|newField
argument_list|(
name|LAZY_FIELD
argument_list|,
literal|"textType"
argument_list|,
name|map
argument_list|()
argument_list|)
argument_list|,
name|schema
operator|.
name|newField
argument_list|(
name|BIG_FIELD
argument_list|,
literal|"textType"
argument_list|,
name|map
argument_list|(
literal|"large"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|PERSIST_FALSE
argument_list|)
expr_stmt|;
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|setLatestSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"documentCache.enabled"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"enableLazyFieldLoading"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add just one document (docid 0)
name|assertU
argument_list|(
name|adoc
argument_list|(
name|ID_FLD
argument_list|,
literal|"101"
argument_list|,
name|LAZY_FIELD
argument_list|,
literal|"lzy"
argument_list|,
name|BIG_FIELD
argument_list|,
literal|"big document field one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// trigger the ID_FLD to get into the doc cache; don't reference other fields
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"101"
argument_list|,
literal|"df"
argument_list|,
name|ID_FLD
argument_list|,
literal|"fl"
argument_list|,
name|ID_FLD
argument_list|)
argument_list|)
expr_stmt|;
comment|// eager load ID_FLD; rest are lazy
comment|// fetch the document; we know it will be from the documentCache, docId 0
specifier|final
name|Document
name|d
decl_stmt|;
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
try|try
block|{
name|d
operator|=
name|searcherRef
operator|.
name|get
argument_list|()
operator|.
name|doc
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
name|assertEager
argument_list|(
name|d
argument_list|,
name|ID_FLD
argument_list|)
expr_stmt|;
name|assertLazyNotLoaded
argument_list|(
name|d
argument_list|,
name|LAZY_FIELD
argument_list|)
expr_stmt|;
name|assertLazyNotLoaded
argument_list|(
name|d
argument_list|,
name|BIG_FIELD
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"101"
argument_list|,
literal|"df"
argument_list|,
name|ID_FLD
argument_list|,
literal|"fl"
argument_list|,
name|LAZY_FIELD
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger load of LAZY_FIELD
name|assertEager
argument_list|(
name|d
argument_list|,
name|ID_FLD
argument_list|)
expr_stmt|;
name|assertLazyLoaded
argument_list|(
name|d
argument_list|,
name|LAZY_FIELD
argument_list|)
expr_stmt|;
comment|// loaded now
name|assertLazyNotLoaded
argument_list|(
name|d
argument_list|,
name|BIG_FIELD
argument_list|)
expr_stmt|;
comment|// because big fields are handled separately
name|assertQ
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"101"
argument_list|,
literal|"df"
argument_list|,
name|ID_FLD
argument_list|,
literal|"fl"
argument_list|,
name|BIG_FIELD
argument_list|)
argument_list|)
expr_stmt|;
comment|// trigger load of BIG_FIELD
name|assertEager
argument_list|(
name|d
argument_list|,
name|ID_FLD
argument_list|)
expr_stmt|;
name|assertLazyLoaded
argument_list|(
name|d
argument_list|,
name|LAZY_FIELD
argument_list|)
expr_stmt|;
name|assertLazyLoaded
argument_list|(
name|d
argument_list|,
name|BIG_FIELD
argument_list|)
expr_stmt|;
comment|// loaded now
block|}
DECL|method|assertEager
specifier|private
name|void
name|assertEager
parameter_list|(
name|Document
name|d
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|d
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
operator|instanceof
name|LazyDocument
operator|.
name|LazyField
argument_list|)
expr_stmt|;
block|}
DECL|method|assertLazyNotLoaded
specifier|private
name|void
name|assertLazyNotLoaded
parameter_list|(
name|Document
name|d
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|IndexableField
name|field
init|=
name|d
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldName
operator|==
name|BIG_FIELD
condition|)
block|{
name|assertTrue
argument_list|(
name|field
operator|instanceof
name|SolrIndexSearcher
operator|.
name|LargeLazyField
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|SolrIndexSearcher
operator|.
name|LargeLazyField
operator|)
name|field
operator|)
operator|.
name|hasBeenLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|field
operator|instanceof
name|LazyDocument
operator|.
name|LazyField
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|LazyDocument
operator|.
name|LazyField
operator|)
name|field
operator|)
operator|.
name|hasBeenLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertLazyLoaded
specifier|private
name|void
name|assertLazyLoaded
parameter_list|(
name|Document
name|d
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|IndexableField
name|field
init|=
name|d
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldName
operator|==
name|BIG_FIELD
condition|)
block|{
name|assertTrue
argument_list|(
name|field
operator|instanceof
name|SolrIndexSearcher
operator|.
name|LargeLazyField
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|SolrIndexSearcher
operator|.
name|LargeLazyField
operator|)
name|field
operator|)
operator|.
name|hasBeenLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertTrue
argument_list|(
name|field
operator|instanceof
name|LazyDocument
operator|.
name|LazyField
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|LazyDocument
operator|.
name|LazyField
operator|)
name|field
operator|)
operator|.
name|hasBeenLoaded
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

