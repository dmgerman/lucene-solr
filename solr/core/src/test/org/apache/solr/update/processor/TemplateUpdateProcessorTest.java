begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TemplateUpdateProcessorTest
specifier|public
class|class
name|TemplateUpdateProcessorTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|5
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf1"
argument_list|,
name|configset
argument_list|(
literal|"cloud-minimal"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|cluster
operator|.
name|deleteAllCollections
argument_list|()
expr_stmt|;
name|cluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|org
operator|.
name|junit
operator|.
name|Rule
DECL|field|expectedException
specifier|public
name|ExpectedException
name|expectedException
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"template"
argument_list|)
operator|.
name|add
argument_list|(
literal|"template.field"
argument_list|,
literal|"id:{firstName}_{lastName}"
argument_list|)
operator|.
name|add
argument_list|(
literal|"template.field"
argument_list|,
literal|"another:{lastName}_{firstName}"
argument_list|)
operator|.
name|add
argument_list|(
literal|"template.field"
argument_list|,
literal|"missing:{lastName}_{unKnown}"
argument_list|)
decl_stmt|;
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
literal|null
argument_list|,
name|params
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"firstName"
argument_list|,
literal|"Tom"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"lastName"
argument_list|,
literal|"Cruise"
argument_list|)
expr_stmt|;
operator|new
name|TemplateUpdateProcessorFactory
argument_list|()
operator|.
name|getInstance
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tom_Cruise"
argument_list|,
name|cmd
operator|.
name|solrDoc
operator|.
name|getFieldValue
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cruise_Tom"
argument_list|,
name|cmd
operator|.
name|solrDoc
operator|.
name|getFieldValue
argument_list|(
literal|"another"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Cruise_"
argument_list|,
name|cmd
operator|.
name|solrDoc
operator|.
name|getFieldValue
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
expr_stmt|;
name|SolrInputDocument
name|solrDoc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|params
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"template"
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|add
argument_list|(
literal|"template.field"
argument_list|,
literal|"x_s:key_{id}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|UpdateRequest
name|add
init|=
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|solrDoc
argument_list|)
decl_stmt|;
name|add
operator|.
name|setParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|result
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"c"
argument_list|,
literal|"conf1"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|toJSONString
argument_list|(
name|result
operator|.
name|asMap
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractFullDistribZkTestBase
operator|.
name|waitForCollection
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|"c"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|request
argument_list|(
name|add
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|query
argument_list|(
literal|"c"
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"key_1"
argument_list|,
name|rsp
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldValue
argument_list|(
literal|"x_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

