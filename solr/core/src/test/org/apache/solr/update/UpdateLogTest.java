begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|RealTimeGetComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
operator|.
name|DistributedUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|internal
operator|.
name|matchers
operator|.
name|StringContains
operator|.
name|containsString
import|;
end_import

begin_class
DECL|class|UpdateLogTest
specifier|public
class|class
name|UpdateLogTest
extends|extends
name|SolrTestCaseJ4
block|{
comment|/** BytesRef that can be re-used to lookup doc with id "1" */
DECL|field|DOC_1_INDEXED_ID
specifier|private
specifier|static
specifier|final
name|BytesRef
name|DOC_1_INDEXED_ID
init|=
operator|new
name|BytesRef
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
DECL|field|ulog
specifier|static
name|UpdateLog
name|ulog
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.intClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieIntField"
else|:
literal|"IntPointField"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.longClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieLongField"
else|:
literal|"LongPointField"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.floatClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieFloatField"
else|:
literal|"FloatPointField"
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"solr.tests.doubleClassName"
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"TrieDoubleField"
else|:
literal|"DoublePointField"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-tlog.xml"
argument_list|,
literal|"schema-inplace-updates.xml"
argument_list|)
expr_stmt|;
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
init|)
block|{
name|UpdateHandler
name|uhandler
init|=
name|req
operator|.
name|getCore
argument_list|()
operator|.
name|getUpdateHandler
argument_list|()
decl_stmt|;
operator|(
operator|(
name|DirectUpdateHandler2
operator|)
name|uhandler
operator|)
operator|.
name|getCommitTracker
argument_list|()
operator|.
name|setTimeUpperBound
argument_list|(
literal|100
argument_list|)
expr_stmt|;
operator|(
operator|(
name|DirectUpdateHandler2
operator|)
name|uhandler
operator|)
operator|.
name|getCommitTracker
argument_list|()
operator|.
name|setOpenSearcher
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ulog
operator|=
name|uhandler
operator|.
name|getUpdateLog
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.intClassName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.longClassName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.floatClassName"
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"solr.tests.doubleClassName"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|/**    * @see org.apache.solr.update.UpdateLog#applyPartialUpdates(BytesRef,long,long,SolrDocumentBase)    */
DECL|method|testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence
specifier|public
name|void
name|testApplyPartialUpdatesOnMultipleInPlaceUpdatesInSequence
parameter_list|()
block|{
comment|// Add a full update, two in-place updates and verify applying partial updates is working
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|null
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title_s"
argument_list|,
literal|"title1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|100L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"price"
argument_list|,
literal|"1000"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"2"
argument_list|,
literal|"_version_"
argument_list|,
literal|"101"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|101L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"3"
argument_list|,
literal|"_version_"
argument_list|,
literal|"102"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|partialUpdate
init|=
name|ulog
operator|.
name|lookup
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|)
decl_stmt|;
name|SolrDocument
name|partialDoc
init|=
name|RealTimeGetComponent
operator|.
name|toSolrDoc
argument_list|(
call|(
name|SolrInputDocument
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|prevVersion
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|prevPointer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partialDoc
operator|.
name|containsKey
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|returnVal
init|=
name|ulog
operator|.
name|applyPartialUpdates
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|,
name|prevPointer
argument_list|,
name|prevVersion
argument_list|,
literal|null
argument_list|,
name|partialDoc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1000
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"price"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title1"
argument_list|,
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Add a full update, commit, then two in-place updates, and verify that applying partial updates is working (since
comment|// the prevTlog and prevTlog2 are retained after a commit
name|ulogCommit
argument_list|(
name|ulog
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes also try a second commit
name|ulogCommit
argument_list|(
name|ulog
argument_list|)
expr_stmt|;
block|}
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|102L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"price"
argument_list|,
literal|"2000"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"4"
argument_list|,
literal|"_version_"
argument_list|,
literal|"200"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|200L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"5"
argument_list|,
literal|"_version_"
argument_list|,
literal|"201"
argument_list|)
argument_list|)
expr_stmt|;
name|partialUpdate
operator|=
name|ulog
operator|.
name|lookup
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|)
expr_stmt|;
name|partialDoc
operator|=
name|RealTimeGetComponent
operator|.
name|toSolrDoc
argument_list|(
call|(
name|SolrInputDocument
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
expr_stmt|;
name|prevVersion
operator|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|prevPointer
operator|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partialDoc
operator|.
name|containsKey
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
name|returnVal
operator|=
name|ulog
operator|.
name|applyPartialUpdates
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|,
name|prevPointer
argument_list|,
name|prevVersion
argument_list|,
literal|null
argument_list|,
name|partialDoc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|returnVal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2000
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"price"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"title1"
argument_list|,
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplyPartialUpdatesAfterMultipleCommits
specifier|public
name|void
name|testApplyPartialUpdatesAfterMultipleCommits
parameter_list|()
block|{
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|null
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title_s"
argument_list|,
literal|"title1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|100L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"price"
argument_list|,
literal|"1000"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"2"
argument_list|,
literal|"_version_"
argument_list|,
literal|"101"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|101L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"3"
argument_list|,
literal|"_version_"
argument_list|,
literal|"102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Do 3 commits, then in-place update, and verify that applying partial updates can't find full doc
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
name|ulogCommit
argument_list|(
name|ulog
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|101L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"6"
argument_list|,
literal|"_version_"
argument_list|,
literal|"300"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|partialUpdate
init|=
name|ulog
operator|.
name|lookup
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|)
decl_stmt|;
name|SolrDocument
name|partialDoc
init|=
name|RealTimeGetComponent
operator|.
name|toSolrDoc
argument_list|(
call|(
name|SolrInputDocument
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|prevVersion
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|prevPointer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partialDoc
operator|.
name|containsKey
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|returnVal
init|=
name|ulog
operator|.
name|applyPartialUpdates
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|,
name|prevPointer
argument_list|,
name|prevVersion
argument_list|,
literal|null
argument_list|,
name|partialDoc
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|returnVal
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplyPartialUpdatesDependingOnNonAddShouldThrowException
specifier|public
name|void
name|testApplyPartialUpdatesDependingOnNonAddShouldThrowException
parameter_list|()
block|{
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|null
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title_s"
argument_list|,
literal|"title1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogDelete
argument_list|(
name|ulog
argument_list|,
literal|"1"
argument_list|,
literal|500L
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// dbi
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|500L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"2"
argument_list|,
literal|"_version_"
argument_list|,
literal|"501"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|501L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"3"
argument_list|,
literal|"_version_"
argument_list|,
literal|"502"
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|partialUpdate
init|=
name|ulog
operator|.
name|lookup
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|)
decl_stmt|;
name|SolrDocument
name|partialDoc
init|=
name|RealTimeGetComponent
operator|.
name|toSolrDoc
argument_list|(
call|(
name|SolrInputDocument
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|,
name|h
operator|.
name|getCore
argument_list|()
operator|.
name|getLatestSchema
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|prevVersion
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|long
name|prevPointer
init|=
call|(
name|Long
call|)
argument_list|(
operator|(
name|List
operator|)
name|partialUpdate
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"val1_i_dvo"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|502L
argument_list|,
operator|(
operator|(
name|NumericDocValuesField
operator|)
name|partialDoc
operator|.
name|getFieldValue
argument_list|(
literal|"_version_"
argument_list|)
operator|)
operator|.
name|numericValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|partialDoc
operator|.
name|containsKey
argument_list|(
literal|"title_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// If an in-place update depends on a non-add (i.e. DBI), assert that an exception is thrown.
name|SolrException
name|ex
init|=
name|expectThrows
argument_list|(
name|SolrException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|long
name|returnVal
init|=
name|ulog
operator|.
name|applyPartialUpdates
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|,
name|prevPointer
argument_list|,
name|prevVersion
argument_list|,
literal|null
argument_list|,
name|partialDoc
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"502 depends on 501, 501 depends on 500, but 500 is a"
operator|+
literal|" DELETE. This should've generated an exception. returnVal is: "
operator|+
name|returnVal
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ex
operator|.
name|toString
argument_list|()
argument_list|,
name|SolrException
operator|.
name|ErrorCode
operator|.
name|INVALID_STATE
operator|.
name|code
argument_list|,
name|ex
operator|.
name|code
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"should've been either ADD or UPDATE_INPLACE"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|containsString
argument_list|(
literal|"looking for id=1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testApplyPartialUpdatesWithDelete
specifier|public
name|void
name|testApplyPartialUpdatesWithDelete
parameter_list|()
throws|throws
name|Exception
block|{
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|null
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title_s"
argument_list|,
literal|"title1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"1"
argument_list|,
literal|"_version_"
argument_list|,
literal|"100"
argument_list|)
argument_list|)
expr_stmt|;
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|100L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"2"
argument_list|,
literal|"_version_"
argument_list|,
literal|"101"
argument_list|)
argument_list|)
expr_stmt|;
comment|// in-place update
name|ulogAdd
argument_list|(
name|ulog
argument_list|,
literal|101L
argument_list|,
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"val1_i_dvo"
argument_list|,
literal|"3"
argument_list|,
literal|"_version_"
argument_list|,
literal|"102"
argument_list|)
argument_list|)
expr_stmt|;
comment|// in-place update
comment|// sanity check that the update log has one document, and RTG returns the document
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|ulog
operator|.
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':{ 'id':'1', 'val1_i_dvo':3, '_version_':102, 'title_s':'title1', "
comment|// fields with default values
operator|+
literal|"'inplace_updatable_int_with_default':666, 'inplace_updatable_float_with_default':42.0}}"
argument_list|)
expr_stmt|;
name|boolean
name|dbq
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|ulogDelete
argument_list|(
name|ulog
argument_list|,
literal|"1"
argument_list|,
literal|200L
argument_list|,
name|dbq
argument_list|)
expr_stmt|;
comment|// delete id:1 document
if|if
condition|(
name|dbq
condition|)
block|{
name|assertNull
argument_list|(
name|ulog
operator|.
name|lookup
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|)
argument_list|)
expr_stmt|;
comment|// any DBQ clears out the ulog, so this document shouldn't exist
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ulog
operator|.
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ulog
operator|.
name|prevMap
argument_list|)
argument_list|,
name|ulog
operator|.
name|prevMap
operator|==
literal|null
operator|||
name|ulog
operator|.
name|prevMap
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|ulog
operator|.
name|prevMap2
argument_list|)
argument_list|,
name|ulog
operator|.
name|prevMap2
operator|==
literal|null
operator|||
name|ulog
operator|.
name|prevMap2
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// verify that the document is deleted, by doing an RTG call
name|assertJQ
argument_list|(
name|req
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"id"
argument_list|,
literal|"1"
argument_list|)
argument_list|,
literal|"=={'doc':null}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// dbi
name|List
name|entry
init|=
operator|(
operator|(
name|List
operator|)
name|ulog
operator|.
name|lookup
argument_list|(
name|DOC_1_INDEXED_ID
argument_list|)
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|UpdateLog
operator|.
name|DELETE
argument_list|,
operator|(
name|int
operator|)
name|entry
operator|.
name|get
argument_list|(
name|UpdateLog
operator|.
name|FLAGS_IDX
argument_list|)
operator|&
name|UpdateLog
operator|.
name|OPERATION_MASK
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simulate a commit on a given updateLog    */
DECL|method|ulogCommit
specifier|private
specifier|static
name|void
name|ulogCommit
parameter_list|(
name|UpdateLog
name|ulog
parameter_list|)
block|{
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
init|)
block|{
name|CommitUpdateCommand
name|commitCmd
init|=
operator|new
name|CommitUpdateCommand
argument_list|(
name|req
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ulog
operator|.
name|preCommit
argument_list|(
name|commitCmd
argument_list|)
expr_stmt|;
name|ulog
operator|.
name|postCommit
argument_list|(
name|commitCmd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Simulate a delete on a given updateLog    *    * @param ulog The UpdateLog to apply a delete against    * @param id of document to be deleted    * @param version Version to use on the DeleteUpdateCommand    * @param dbq if true, an<code>id:$id</code> DBQ will used, instead of delete by id    */
DECL|method|ulogDelete
specifier|private
specifier|static
name|void
name|ulogDelete
parameter_list|(
name|UpdateLog
name|ulog
parameter_list|,
name|String
name|id
parameter_list|,
name|long
name|version
parameter_list|,
name|boolean
name|dbq
parameter_list|)
block|{
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
init|)
block|{
name|DeleteUpdateCommand
name|cmd
init|=
operator|new
name|DeleteUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|setVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbq
condition|)
block|{
name|cmd
operator|.
name|query
operator|=
operator|(
literal|"id:"
operator|+
name|id
operator|)
expr_stmt|;
name|ulog
operator|.
name|deleteByQuery
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|ulog
operator|.
name|delete
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Simulate an add on a given updateLog.    *<p>    *   This method, when prevVersion is passed in (i.e. for in-place update), represents an     *   AddUpdateCommand that has undergone the merge process and inc/set operations have now been    *   converted into actual values that just need to be written.     *</p>    *<p>    * NOTE: For test simplicity, the Solr input document must include the<code>_version_</code> field.    *</p>    *    * @param ulog The UpdateLog to apply a delete against    * @param prevVersion If non-null, then this AddUpdateCommand represents an in-place update.    * @param sdoc The document to use for the add.    * @see #buildAddUpdateCommand    */
DECL|method|ulogAdd
specifier|private
specifier|static
name|void
name|ulogAdd
parameter_list|(
name|UpdateLog
name|ulog
parameter_list|,
name|Long
name|prevVersion
parameter_list|,
name|SolrInputDocument
name|sdoc
parameter_list|)
block|{
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
init|)
block|{
name|AddUpdateCommand
name|cmd
init|=
name|buildAddUpdateCommand
argument_list|(
name|req
argument_list|,
name|sdoc
argument_list|)
decl_stmt|;
if|if
condition|(
name|prevVersion
operator|!=
literal|null
condition|)
block|{
name|cmd
operator|.
name|prevVersion
operator|=
name|prevVersion
expr_stmt|;
block|}
name|ulog
operator|.
name|add
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Helper method to construct an<code>AddUpdateCommand</code> for a<code>SolrInputDocument</code>     * in the context of the specified<code>SolrQueryRequest</code>.     *    * NOTE: For test simplicity, the Solr input document must include the<code>_version_</code> field.    */
DECL|method|buildAddUpdateCommand
specifier|public
specifier|static
name|AddUpdateCommand
name|buildAddUpdateCommand
parameter_list|(
specifier|final
name|SolrQueryRequest
name|req
parameter_list|,
specifier|final
name|SolrInputDocument
name|sdoc
parameter_list|)
block|{
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
name|sdoc
expr_stmt|;
name|assertTrue
argument_list|(
literal|""
argument_list|,
name|cmd
operator|.
name|solrDoc
operator|.
name|containsKey
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|setVersion
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|cmd
operator|.
name|solrDoc
operator|.
name|getFieldValue
argument_list|(
name|DistributedUpdateProcessor
operator|.
name|VERSION_FIELD
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|cmd
return|;
block|}
block|}
end_class

end_unit

