begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringJoiner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|AddUpdateCommand
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * test class for @see AtomicUpdateProcessorFactory  */
end_comment

begin_class
DECL|class|AtomicUpdateProcessorFactoryTest
specifier|public
class|class
name|AtomicUpdateProcessorFactoryTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWrongAtomicOpPassed
specifier|public
name|void
name|testWrongAtomicOpPassed
parameter_list|()
throws|throws
name|Exception
block|{
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"Atomic"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.cat"
argument_list|,
literal|"delete"
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|AtomicUpdateProcessorFactory
name|factory
init|=
operator|new
name|AtomicUpdateProcessorFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|inform
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getInstance
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Unexpected param(s) for AtomicUpdateProcessor, invalid atomic op passed: 'delete'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testNoUniqueIdPassed
specifier|public
name|void
name|testNoUniqueIdPassed
parameter_list|()
throws|throws
name|Exception
block|{
comment|//TODO
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"Atomic"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.cat"
argument_list|,
literal|"add"
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"title"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|AtomicUpdateProcessorFactory
name|factory
init|=
operator|new
name|AtomicUpdateProcessorFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|inform
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getInstance
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
literal|null
argument_list|)
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Document passed with no unique field: 'id'"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"Atomic"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.cat"
argument_list|,
literal|"add"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.title"
argument_list|,
literal|"set"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.count_i"
argument_list|,
literal|"set"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.name_s"
argument_list|,
literal|"set"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.multiDefault"
argument_list|,
literal|"set"
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"cat"
argument_list|,
literal|"human"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"title"
argument_list|,
literal|"Mr"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"count_i"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"name_s"
argument_list|,
literal|"Virat"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"multiDefault"
argument_list|,
literal|"Delhi"
argument_list|)
expr_stmt|;
name|AtomicUpdateProcessorFactory
name|factory
init|=
operator|new
name|AtomicUpdateProcessorFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|inform
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getInstance
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
operator|new
name|DistributedUpdateProcessor
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
operator|new
name|RunUpdateProcessor
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"cat:human"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:Mr"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"count_i:20"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:Virat"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"multiDefault:Delhi"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|cmd
operator|=
operator|new
name|AddUpdateCommand
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"Atomic"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.cat"
argument_list|,
literal|"add"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.title"
argument_list|,
literal|"set"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.count_i"
argument_list|,
literal|"inc"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.name_s"
argument_list|,
literal|"remove"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.multiDefault"
argument_list|,
literal|"removeregex"
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"cat"
argument_list|,
literal|"animal"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"title"
argument_list|,
literal|"Dr"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"count_i"
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"name_s"
argument_list|,
literal|"Virat"
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"multiDefault"
argument_list|,
literal|".elh."
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|new
name|AtomicUpdateProcessorFactory
argument_list|()
expr_stmt|;
name|factory
operator|.
name|inform
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getInstance
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
operator|new
name|DistributedUpdateProcessor
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
operator|new
name|RunUpdateProcessor
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"cat:human"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"cat:animal"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:Mr"
argument_list|)
argument_list|,
literal|"//result[@numFound=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"title:Dr"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"count_i:20"
argument_list|)
argument_list|,
literal|"//result[@numFound=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"count_i:40"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:Virat"
argument_list|)
argument_list|,
literal|"//result[@numFound=0]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"multiDefault:Delhi"
argument_list|)
argument_list|,
literal|"//result[@numFound=0]"
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultipleThreads
specifier|public
name|void
name|testMultipleThreads
parameter_list|()
throws|throws
name|Exception
block|{
name|clearIndex
argument_list|()
expr_stmt|;
name|String
index|[]
name|strings
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|strings
index|[
name|i
index|]
operator|=
name|generateRandomString
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Thread
argument_list|>
name|threads
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|finalCount
init|=
literal|0
decl_stmt|;
comment|//int_i
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|int
name|index
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|AddUpdateCommand
name|cmd
init|=
operator|new
name|AddUpdateCommand
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"processor"
argument_list|,
literal|"Atomic"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.cat"
argument_list|,
literal|"add"
argument_list|)
operator|.
name|add
argument_list|(
literal|"Atomic.int_i"
argument_list|,
literal|"inc"
argument_list|)
operator|.
name|add
argument_list|(
literal|"commit"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cmd
operator|.
name|solrDoc
operator|=
operator|new
name|SolrInputDocument
argument_list|()
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//hardcoded id=2
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"cat"
argument_list|,
name|strings
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|solrDoc
operator|.
name|addField
argument_list|(
literal|"int_i"
argument_list|,
name|index
argument_list|)
expr_stmt|;
try|try
block|{
name|AtomicUpdateProcessorFactory
name|factory
init|=
operator|new
name|AtomicUpdateProcessorFactory
argument_list|()
decl_stmt|;
name|factory
operator|.
name|inform
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
expr_stmt|;
name|factory
operator|.
name|getInstance
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
operator|new
name|DistributedUpdateProcessor
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|,
operator|new
name|RunUpdateProcessor
argument_list|(
name|cmd
operator|.
name|getReq
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
argument_list|)
operator|.
name|processAdd
argument_list|(
name|cmd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{           }
block|}
block|}
decl_stmt|;
name|t
operator|.
name|run
argument_list|()
expr_stmt|;
name|threads
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|finalCount
operator|+=
name|index
expr_stmt|;
comment|//int_i
block|}
for|for
control|(
name|Thread
name|thread
range|:
name|threads
control|)
block|{
name|thread
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:10"
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|StringJoiner
name|queryString
init|=
operator|new
name|StringJoiner
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|string
range|:
name|strings
control|)
block|{
name|queryString
operator|.
name|add
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"cat:"
operator|+
name|queryString
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
name|assertQ
argument_list|(
literal|"Check the total number of docs"
argument_list|,
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"int_i:"
operator|+
name|finalCount
argument_list|)
argument_list|,
literal|"//result[@numFound=1]"
argument_list|)
expr_stmt|;
block|}
DECL|method|generateRandomString
specifier|private
name|String
name|generateRandomString
parameter_list|()
block|{
name|char
index|[]
name|chars
init|=
literal|"abcdefghijklmnopqrstuvwxyz0123456789"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|chars
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|chars
operator|.
name|length
argument_list|)
index|]
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

