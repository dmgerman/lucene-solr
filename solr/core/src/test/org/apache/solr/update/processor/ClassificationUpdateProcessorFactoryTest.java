begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ClassificationUpdateProcessorFactory}  */
end_comment

begin_class
DECL|class|ClassificationUpdateProcessorFactoryTest
specifier|public
class|class
name|ClassificationUpdateProcessorFactoryTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|cFactoryToTest
specifier|private
name|ClassificationUpdateProcessorFactory
name|cFactoryToTest
init|=
operator|new
name|ClassificationUpdateProcessorFactory
argument_list|()
decl_stmt|;
DECL|field|args
specifier|private
name|NamedList
name|args
init|=
operator|new
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Before
DECL|method|initArgs
specifier|public
name|void
name|initArgs
parameter_list|()
block|{
name|args
operator|.
name|add
argument_list|(
literal|"inputFields"
argument_list|,
literal|"inputField1,inputField2"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"classField"
argument_list|,
literal|"classField1"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"predictedClassField"
argument_list|,
literal|"classFieldX"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"algorithm"
argument_list|,
literal|"bayes"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"knn.k"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"knn.minDf"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"knn.minTf"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|init_fullArgs_shouldInitFullClassificationParams
specifier|public
name|void
name|init_fullArgs_shouldInitFullClassificationParams
parameter_list|()
block|{
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ClassificationUpdateProcessorParams
name|classificationParams
init|=
name|cFactoryToTest
operator|.
name|getClassificationParams
argument_list|()
decl_stmt|;
name|String
index|[]
name|inputFieldNames
init|=
name|classificationParams
operator|.
name|getInputFieldNames
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"inputField1"
argument_list|,
name|inputFieldNames
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"inputField2"
argument_list|,
name|inputFieldNames
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"classField1"
argument_list|,
name|classificationParams
operator|.
name|getTrainingClassField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"classFieldX"
argument_list|,
name|classificationParams
operator|.
name|getPredictedClassField
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ClassificationUpdateProcessorFactory
operator|.
name|Algorithm
operator|.
name|BAYES
argument_list|,
name|classificationParams
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|classificationParams
operator|.
name|getMinDf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|classificationParams
operator|.
name|getMinTf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|classificationParams
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|init_emptyInputFields_shouldThrowExceptionWithDetailedMessage
specifier|public
name|void
name|init_emptyInputFields_shouldThrowExceptionWithDetailedMessage
parameter_list|()
block|{
name|args
operator|.
name|removeAll
argument_list|(
literal|"inputFields"
argument_list|)
expr_stmt|;
try|try
block|{
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Classification UpdateProcessor 'inputFields' can not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|init_emptyClassField_shouldThrowExceptionWithDetailedMessage
specifier|public
name|void
name|init_emptyClassField_shouldThrowExceptionWithDetailedMessage
parameter_list|()
block|{
name|args
operator|.
name|removeAll
argument_list|(
literal|"classField"
argument_list|)
expr_stmt|;
try|try
block|{
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Classification UpdateProcessor 'classField' can not be null"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|init_emptyPredictedClassField_shouldDefaultToTrainingClassField
specifier|public
name|void
name|init_emptyPredictedClassField_shouldDefaultToTrainingClassField
parameter_list|()
block|{
name|args
operator|.
name|removeAll
argument_list|(
literal|"predictedClassField"
argument_list|)
expr_stmt|;
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ClassificationUpdateProcessorParams
name|classificationParams
init|=
name|cFactoryToTest
operator|.
name|getClassificationParams
argument_list|()
decl_stmt|;
name|assertThat
argument_list|(
name|classificationParams
operator|.
name|getPredictedClassField
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"classField1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|init_unsupportedAlgorithm_shouldThrowExceptionWithDetailedMessage
specifier|public
name|void
name|init_unsupportedAlgorithm_shouldThrowExceptionWithDetailedMessage
parameter_list|()
block|{
name|args
operator|.
name|removeAll
argument_list|(
literal|"algorithm"
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"algorithm"
argument_list|,
literal|"unsupported"
argument_list|)
expr_stmt|;
try|try
block|{
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Classification UpdateProcessor Algorithm: 'unsupported' not supported"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage
specifier|public
name|void
name|init_unsupportedFilterQuery_shouldThrowExceptionWithDetailedMessage
parameter_list|()
block|{
name|UpdateRequestProcessor
name|mockProcessor
init|=
name|mock
argument_list|(
name|UpdateRequestProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
name|SolrQueryRequest
name|mockRequest
init|=
name|mock
argument_list|(
name|SolrQueryRequest
operator|.
name|class
argument_list|)
decl_stmt|;
name|SolrQueryResponse
name|mockResponse
init|=
name|mock
argument_list|(
name|SolrQueryResponse
operator|.
name|class
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
literal|"knn.filterQuery"
argument_list|,
literal|"not supported query"
argument_list|)
expr_stmt|;
try|try
block|{
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|/* parsing failure happens because of the mocks, fine enough to check a proper exception propagation */
name|cFactoryToTest
operator|.
name|getInstance
argument_list|(
name|mockRequest
argument_list|,
name|mockResponse
argument_list|,
name|mockProcessor
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Classification UpdateProcessor Training Filter Query: 'not supported query' is not supported"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|init_emptyArgs_shouldDefaultClassificationParams
specifier|public
name|void
name|init_emptyArgs_shouldDefaultClassificationParams
parameter_list|()
block|{
name|args
operator|.
name|removeAll
argument_list|(
literal|"algorithm"
argument_list|)
expr_stmt|;
name|args
operator|.
name|removeAll
argument_list|(
literal|"knn.k"
argument_list|)
expr_stmt|;
name|args
operator|.
name|removeAll
argument_list|(
literal|"knn.minDf"
argument_list|)
expr_stmt|;
name|args
operator|.
name|removeAll
argument_list|(
literal|"knn.minTf"
argument_list|)
expr_stmt|;
name|cFactoryToTest
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ClassificationUpdateProcessorParams
name|classificationParams
init|=
name|cFactoryToTest
operator|.
name|getClassificationParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|ClassificationUpdateProcessorFactory
operator|.
name|Algorithm
operator|.
name|KNN
argument_list|,
name|classificationParams
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classificationParams
operator|.
name|getMinDf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|classificationParams
operator|.
name|getMinTf
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|classificationParams
operator|.
name|getK
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

