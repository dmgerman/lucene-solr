begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.update.processor
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|update
operator|.
name|processor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_comment
comment|/**  * Tests for {@link ClassificationUpdateProcessor} and {@link ClassificationUpdateProcessorFactory}  */
end_comment

begin_class
DECL|class|ClassificationUpdateProcessorIntegrationTest
specifier|public
class|class
name|ClassificationUpdateProcessorIntegrationTest
extends|extends
name|SolrTestCaseJ4
block|{
comment|/* field names are used in accordance with the solrconfig and schema supplied */
DECL|field|ID
specifier|private
specifier|static
specifier|final
name|String
name|ID
init|=
literal|"id"
decl_stmt|;
DECL|field|TITLE
specifier|private
specifier|static
specifier|final
name|String
name|TITLE
init|=
literal|"title"
decl_stmt|;
DECL|field|CONTENT
specifier|private
specifier|static
specifier|final
name|String
name|CONTENT
init|=
literal|"content"
decl_stmt|;
DECL|field|AUTHOR
specifier|private
specifier|static
specifier|final
name|String
name|AUTHOR
init|=
literal|"author"
decl_stmt|;
DECL|field|CLASS
specifier|private
specifier|static
specifier|final
name|String
name|CLASS
init|=
literal|"cat"
decl_stmt|;
DECL|field|CHAIN
specifier|private
specifier|static
specifier|final
name|String
name|CHAIN
init|=
literal|"classification"
decl_stmt|;
DECL|field|BROKEN_CHAIN_FILTER_QUERY
specifier|private
specifier|static
specifier|final
name|String
name|BROKEN_CHAIN_FILTER_QUERY
init|=
literal|"classification-unsupported-filterQuery"
decl_stmt|;
DECL|field|cFactoryToTest
specifier|private
name|ClassificationUpdateProcessorFactory
name|cFactoryToTest
init|=
operator|new
name|ClassificationUpdateProcessorFactory
argument_list|()
decl_stmt|;
DECL|field|args
specifier|private
name|NamedList
name|args
init|=
operator|new
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig-classification.xml"
argument_list|,
literal|"schema-classification.xml"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Before
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|clearIndex
argument_list|()
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|classify_fullConfiguration_shouldAutoClassify
specifier|public
name|void
name|classify_fullConfiguration_shouldAutoClassify
parameter_list|()
throws|throws
name|Exception
block|{
name|indexTrainingSet
argument_list|()
expr_stmt|;
comment|// To be classified,we index documents without a class and verify the expected one is returned
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"22"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5 "
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name1 Surname1"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"21"
argument_list|,
name|TITLE
argument_list|,
literal|"word1 word1"
argument_list|,
name|CONTENT
argument_list|,
literal|"word2 word2"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|Document
name|doc22
init|=
name|getDoc
argument_list|(
literal|"22"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc22
operator|.
name|get
argument_list|(
name|CLASS
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"class2"
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|doc21
init|=
name|getDoc
argument_list|(
literal|"21"
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|doc21
operator|.
name|get
argument_list|(
name|CLASS
argument_list|)
argument_list|,
name|is
argument_list|(
literal|"class1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|classify_unsupportedFilterQueryConfiguration_shouldThrowExceptionWithDetailedMessage
specifier|public
name|void
name|classify_unsupportedFilterQueryConfiguration_shouldThrowExceptionWithDetailedMessage
parameter_list|()
throws|throws
name|Exception
block|{
name|indexTrainingSet
argument_list|()
expr_stmt|;
try|try
block|{
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"21"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5 "
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name1 Surname1"
argument_list|)
argument_list|,
name|BROKEN_CHAIN_FILTER_QUERY
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"22"
argument_list|,
name|TITLE
argument_list|,
literal|"word1 word1"
argument_list|,
name|CONTENT
argument_list|,
literal|"word2 word2"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|)
argument_list|,
name|BROKEN_CHAIN_FILTER_QUERY
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Classification UpdateProcessor Training Filter Query: 'not valid ( lucene query' is not supported"
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Index some example documents with a class manually assigned.    * This will be our trained model.    *    * @throws Exception If there is a low-level I/O error    */
DECL|method|indexTrainingSet
specifier|private
name|void
name|indexTrainingSet
parameter_list|()
throws|throws
name|Exception
block|{
comment|//class1
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"1"
argument_list|,
name|TITLE
argument_list|,
literal|"word1 word1 word1"
argument_list|,
name|CONTENT
argument_list|,
literal|"word2 word2 word2"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class1"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"2"
argument_list|,
name|TITLE
argument_list|,
literal|"word1 word1"
argument_list|,
name|CONTENT
argument_list|,
literal|"word2 word2"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class1"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"3"
argument_list|,
name|TITLE
argument_list|,
literal|"word1 word1 word1"
argument_list|,
name|CONTENT
argument_list|,
literal|"word2"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class1"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"4"
argument_list|,
name|TITLE
argument_list|,
literal|"word1 word1 word1"
argument_list|,
name|CONTENT
argument_list|,
literal|"word2 word2 word2"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class1"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
comment|//class2
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"5"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class2"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"6"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class2"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"7"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5 word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class2"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"8"
argument_list|,
name|TITLE
argument_list|,
literal|"word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5 word5 word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name Surname"
argument_list|,
name|CLASS
argument_list|,
literal|"class2"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
comment|//class3
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"9"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name1 Surname1"
argument_list|,
name|CLASS
argument_list|,
literal|"class3"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"10"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name1 Surname1"
argument_list|,
name|CLASS
argument_list|,
literal|"class3"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"11"
argument_list|,
name|TITLE
argument_list|,
literal|"word4 word4 word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5 word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name1 Surname1"
argument_list|,
name|CLASS
argument_list|,
literal|"class3"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|adoc
argument_list|(
name|ID
argument_list|,
literal|"12"
argument_list|,
name|TITLE
argument_list|,
literal|"word4"
argument_list|,
name|CONTENT
argument_list|,
literal|"word5 word5 word5 word5"
argument_list|,
name|AUTHOR
argument_list|,
literal|"Name1 Surname1"
argument_list|,
name|CLASS
argument_list|,
literal|"class3"
argument_list|)
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getDoc
specifier|private
name|Document
name|getDoc
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|()
init|)
block|{
name|SolrIndexSearcher
name|searcher
init|=
name|req
operator|.
name|getSearcher
argument_list|()
decl_stmt|;
name|TermQuery
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|ID
argument_list|,
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|doc1
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
name|scoreDoc
init|=
name|doc1
operator|.
name|scoreDocs
index|[
literal|0
index|]
decl_stmt|;
return|return
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
return|;
block|}
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|String
name|doc
parameter_list|)
throws|throws
name|Exception
block|{
name|addDoc
argument_list|(
name|doc
argument_list|,
name|CHAIN
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

