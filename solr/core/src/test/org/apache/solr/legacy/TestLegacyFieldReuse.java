begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.legacy
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|legacy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|legacy
operator|.
name|LegacyIntField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|legacy
operator|.
name|LegacyNumericTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|legacy
operator|.
name|LegacyNumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|legacy
operator|.
name|LegacyNumericTokenStream
operator|.
name|LegacyNumericTermAttribute
import|;
end_import

begin_comment
comment|/** test tokenstream reuse by DefaultIndexingChain */
end_comment

begin_class
DECL|class|TestLegacyFieldReuse
specifier|public
class|class
name|TestLegacyFieldReuse
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testNumericReuse
specifier|public
name|void
name|testNumericReuse
parameter_list|()
throws|throws
name|IOException
block|{
name|LegacyIntField
name|legacyIntField
init|=
operator|new
name|LegacyIntField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
decl_stmt|;
comment|// passing null
name|TokenStream
name|ts
init|=
name|legacyIntField
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ts
operator|instanceof
name|LegacyNumericTokenStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LegacyNumericUtils
operator|.
name|PRECISION_STEP_DEFAULT_32
argument_list|,
operator|(
operator|(
name|LegacyNumericTokenStream
operator|)
name|ts
operator|)
operator|.
name|getPrecisionStep
argument_list|()
argument_list|)
expr_stmt|;
name|assertNumericContents
argument_list|(
literal|5
argument_list|,
name|ts
argument_list|)
expr_stmt|;
comment|// now reuse previous stream
name|legacyIntField
operator|=
operator|new
name|LegacyIntField
argument_list|(
literal|"foo"
argument_list|,
literal|20
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
name|TokenStream
name|ts2
init|=
name|legacyIntField
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
name|ts
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ts
argument_list|,
name|ts2
argument_list|)
expr_stmt|;
name|assertNumericContents
argument_list|(
literal|20
argument_list|,
name|ts
argument_list|)
expr_stmt|;
comment|// pass a bogus stream and ensure it's still ok
name|legacyIntField
operator|=
operator|new
name|LegacyIntField
argument_list|(
literal|"foo"
argument_list|,
literal|2343
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
name|TokenStream
name|bogus
init|=
operator|new
name|CannedTokenStream
argument_list|(
operator|new
name|Token
argument_list|(
literal|"bogus"
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|ts
operator|=
name|legacyIntField
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
name|bogus
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|bogus
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|assertNumericContents
argument_list|(
literal|2343
argument_list|,
name|ts
argument_list|)
expr_stmt|;
comment|// pass another bogus stream (numeric, but different precision step!)
name|legacyIntField
operator|=
operator|new
name|LegacyIntField
argument_list|(
literal|"foo"
argument_list|,
literal|42
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
expr_stmt|;
assert|assert
literal|3
operator|!=
name|LegacyNumericUtils
operator|.
name|PRECISION_STEP_DEFAULT
assert|;
name|bogus
operator|=
operator|new
name|LegacyNumericTokenStream
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ts
operator|=
name|legacyIntField
operator|.
name|tokenStream
argument_list|(
literal|null
argument_list|,
name|bogus
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|bogus
argument_list|,
name|ts
argument_list|)
expr_stmt|;
name|assertNumericContents
argument_list|(
literal|42
argument_list|,
name|ts
argument_list|)
expr_stmt|;
block|}
DECL|method|assertNumericContents
specifier|private
name|void
name|assertNumericContents
parameter_list|(
name|int
name|value
parameter_list|,
name|TokenStream
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|assertTrue
argument_list|(
name|ts
operator|instanceof
name|LegacyNumericTokenStream
argument_list|)
expr_stmt|;
name|LegacyNumericTermAttribute
name|numericAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|LegacyNumericTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
name|boolean
name|seen
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|numericAtt
operator|.
name|getShift
argument_list|()
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|value
argument_list|,
name|numericAtt
operator|.
name|getRawValue
argument_list|()
argument_list|)
expr_stmt|;
name|seen
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|seen
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

