begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.legacy
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|legacy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
DECL|class|TestLegacyField
specifier|public
class|class
name|TestLegacyField
extends|extends
name|LuceneTestCase
block|{
DECL|method|testLegacyDoubleField
specifier|public
name|void
name|testLegacyDoubleField
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|fields
index|[]
init|=
operator|new
name|Field
index|[]
block|{
operator|new
name|LegacyDoubleField
argument_list|(
literal|"foo"
argument_list|,
literal|5d
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
block|,
operator|new
name|LegacyDoubleField
argument_list|(
literal|"foo"
argument_list|,
literal|5d
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|trySetByteValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesRefValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setDoubleValue
argument_list|(
literal|6d
argument_list|)
expr_stmt|;
comment|// ok
name|trySetIntValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetFloatValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetLongValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetReaderValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetShortValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetStringValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetTokenStreamValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6d
argument_list|,
name|field
operator|.
name|numericValue
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.0d
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLegacyFloatField
specifier|public
name|void
name|testLegacyFloatField
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|fields
index|[]
init|=
operator|new
name|Field
index|[]
block|{
operator|new
name|LegacyFloatField
argument_list|(
literal|"foo"
argument_list|,
literal|5f
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
block|,
operator|new
name|LegacyFloatField
argument_list|(
literal|"foo"
argument_list|,
literal|5f
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|trySetByteValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesRefValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetDoubleValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetIntValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setFloatValue
argument_list|(
literal|6f
argument_list|)
expr_stmt|;
comment|// ok
name|trySetLongValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetReaderValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetShortValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetStringValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetTokenStreamValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6f
argument_list|,
name|field
operator|.
name|numericValue
argument_list|()
operator|.
name|floatValue
argument_list|()
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLegacyIntField
specifier|public
name|void
name|testLegacyIntField
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|fields
index|[]
init|=
operator|new
name|Field
index|[]
block|{
operator|new
name|LegacyIntField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
block|,
operator|new
name|LegacyIntField
argument_list|(
literal|"foo"
argument_list|,
literal|5
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|trySetByteValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesRefValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetDoubleValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setIntValue
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// ok
name|trySetFloatValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetLongValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetReaderValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetShortValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetStringValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetTokenStreamValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|field
operator|.
name|numericValue
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testLegacyLongField
specifier|public
name|void
name|testLegacyLongField
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|fields
index|[]
init|=
operator|new
name|Field
index|[]
block|{
operator|new
name|LegacyLongField
argument_list|(
literal|"foo"
argument_list|,
literal|5L
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
block|,
operator|new
name|LegacyLongField
argument_list|(
literal|"foo"
argument_list|,
literal|5L
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|trySetByteValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetBytesRefValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetDoubleValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetIntValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetFloatValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|field
operator|.
name|setLongValue
argument_list|(
literal|6
argument_list|)
expr_stmt|;
comment|// ok
name|trySetReaderValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetShortValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetStringValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|trySetTokenStreamValue
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6L
argument_list|,
name|field
operator|.
name|numericValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|trySetByteValue
specifier|private
name|void
name|trySetByteValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setByteValue
argument_list|(
operator|(
name|byte
operator|)
literal|10
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|trySetBytesValue
specifier|private
name|void
name|trySetBytesValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setBytesValue
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|5
operator|,
literal|5
block|}
argument_list|)
expr_stmt|;
block|}
block|)
class|;
end_class

begin_function
unit|}      private
DECL|method|trySetBytesRefValue
name|void
name|trySetBytesRefValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setBytesValue
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"bogus"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetDoubleValue
specifier|private
name|void
name|trySetDoubleValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setDoubleValue
argument_list|(
name|Double
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetIntValue
specifier|private
name|void
name|trySetIntValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setIntValue
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetLongValue
specifier|private
name|void
name|trySetLongValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setLongValue
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetFloatValue
specifier|private
name|void
name|trySetFloatValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setFloatValue
argument_list|(
name|Float
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetReaderValue
specifier|private
name|void
name|trySetReaderValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setReaderValue
argument_list|(
operator|new
name|StringReader
argument_list|(
literal|"BOO!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetShortValue
specifier|private
name|void
name|trySetShortValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setShortValue
argument_list|(
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetStringValue
specifier|private
name|void
name|trySetStringValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setStringValue
argument_list|(
literal|"BOO!"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|trySetTokenStreamValue
specifier|private
name|void
name|trySetTokenStreamValue
parameter_list|(
name|Field
name|f
parameter_list|)
block|{
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|f
operator|.
name|setTokenStream
argument_list|(
operator|new
name|CannedTokenStream
argument_list|(
operator|new
name|Token
argument_list|(
literal|"foo"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

