begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|BackupRestoreUtils
specifier|public
class|class
name|BackupRestoreUtils
extends|extends
name|LuceneTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|indexDocs
specifier|public
specifier|static
name|int
name|indexDocs
parameter_list|(
name|SolrClient
name|masterClient
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|long
name|docsSeed
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|masterClient
operator|.
name|deleteByQuery
argument_list|(
name|collectionName
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|Random
name|random
init|=
operator|new
name|Random
argument_list|(
name|docsSeed
argument_list|)
decl_stmt|;
comment|// use a constant seed for the whole test run so that we can easily re-index.
name|int
name|nDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Indexing {} test docs"
argument_list|,
name|nDocs
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SolrInputDocument
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nDocs
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDocs
condition|;
name|i
operator|++
control|)
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|doc
operator|.
name|addField
argument_list|(
literal|"name"
argument_list|,
literal|"name = "
operator|+
name|i
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|masterClient
operator|.
name|add
argument_list|(
name|collectionName
argument_list|,
name|docs
argument_list|)
expr_stmt|;
name|masterClient
operator|.
name|commit
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
return|return
name|nDocs
return|;
block|}
DECL|method|verifyDocs
specifier|public
specifier|static
name|void
name|verifyDocs
parameter_list|(
name|int
name|nDocs
parameter_list|,
name|SolrClient
name|masterClient
parameter_list|,
name|String
name|collectionName
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|queryParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|queryParams
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|QueryResponse
name|response
init|=
name|masterClient
operator|.
name|query
argument_list|(
name|collectionName
argument_list|,
name|queryParams
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nDocs
argument_list|,
name|response
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|runCoreAdminCommand
specifier|public
specifier|static
name|void
name|runCoreAdminCommand
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|String
name|coreName
parameter_list|,
name|String
name|action
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|baseUrl
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"/admin/cores?action="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"&core="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|coreName
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|p
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|masterUrl
init|=
name|builder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|executeHttpRequest
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|runReplicationHandlerCommand
specifier|public
specifier|static
name|void
name|runReplicationHandlerCommand
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|String
name|coreName
parameter_list|,
name|String
name|action
parameter_list|,
name|String
name|repoName
parameter_list|,
name|String
name|backupName
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|masterUrl
init|=
name|baseUrl
operator|+
literal|"/"
operator|+
name|coreName
operator|+
name|ReplicationHandler
operator|.
name|PATH
operator|+
literal|"?command="
operator|+
name|action
operator|+
literal|"&repository="
operator|+
name|repoName
operator|+
literal|"&name="
operator|+
name|backupName
decl_stmt|;
name|executeHttpRequest
argument_list|(
name|masterUrl
argument_list|)
expr_stmt|;
block|}
DECL|method|executeHttpRequest
specifier|static
name|void
name|executeHttpRequest
parameter_list|(
name|String
name|requestUrl
parameter_list|)
throws|throws
name|IOException
block|{
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|requestUrl
argument_list|)
decl_stmt|;
name|stream
operator|=
name|url
operator|.
name|openStream
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

