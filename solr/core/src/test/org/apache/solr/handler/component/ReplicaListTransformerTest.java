begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ReplicaListTransformerTest
specifier|public
class|class
name|ReplicaListTransformerTest
extends|extends
name|LuceneTestCase
block|{
comment|// A transformer that keeps only matching choices
DECL|class|ToyMatchingReplicaListTransformer
specifier|private
specifier|static
class|class
name|ToyMatchingReplicaListTransformer
implements|implements
name|ReplicaListTransformer
block|{
DECL|field|regex
specifier|private
specifier|final
name|String
name|regex
decl_stmt|;
DECL|method|ToyMatchingReplicaListTransformer
specifier|public
name|ToyMatchingReplicaListTransformer
parameter_list|(
name|String
name|regex
parameter_list|)
block|{
name|this
operator|.
name|regex
operator|=
name|regex
expr_stmt|;
block|}
DECL|method|transform
specifier|public
name|void
name|transform
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|choices
parameter_list|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|it
init|=
name|choices
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|choice
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|url
decl_stmt|;
if|if
condition|(
name|choice
operator|instanceof
name|String
condition|)
block|{
name|url
operator|=
operator|(
name|String
operator|)
name|choice
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|choice
operator|instanceof
name|Replica
condition|)
block|{
name|url
operator|=
operator|(
operator|(
name|Replica
operator|)
name|choice
operator|)
operator|.
name|getCoreUrl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|==
literal|null
operator|||
operator|!
name|url
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// A transformer that makes no transformation
DECL|class|ToyNoOpReplicaListTransformer
specifier|private
specifier|static
class|class
name|ToyNoOpReplicaListTransformer
implements|implements
name|ReplicaListTransformer
block|{
DECL|method|ToyNoOpReplicaListTransformer
specifier|public
name|ToyNoOpReplicaListTransformer
parameter_list|()
block|{     }
DECL|method|transform
specifier|public
name|void
name|transform
parameter_list|(
name|List
argument_list|<
name|?
argument_list|>
name|choices
parameter_list|)
block|{
comment|// no-op
block|}
block|}
annotation|@
name|Test
DECL|method|testTransform
specifier|public
name|void
name|testTransform
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|regex
init|=
literal|".*"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|+
literal|".*"
decl_stmt|;
specifier|final
name|ReplicaListTransformer
name|transformer
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|transformer
operator|=
operator|new
name|ToyMatchingReplicaListTransformer
argument_list|(
name|regex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transformer
operator|=
operator|new
name|HttpShardHandlerFactory
argument_list|()
block|{
annotation|@
name|Override
name|ReplicaListTransformer
name|getReplicaListTransformer
parameter_list|(
specifier|final
name|SolrQueryRequest
name|req
parameter_list|)
block|{
specifier|final
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|getBool
argument_list|(
literal|"toyNoTransform"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
return|return
operator|new
name|ToyNoOpReplicaListTransformer
argument_list|()
return|;
block|}
specifier|final
name|String
name|regex
init|=
name|params
operator|.
name|get
argument_list|(
literal|"toyRegEx"
argument_list|)
decl_stmt|;
if|if
condition|(
name|regex
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ToyMatchingReplicaListTransformer
argument_list|(
name|regex
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|getReplicaListTransformer
argument_list|(
name|req
argument_list|)
return|;
block|}
block|}
operator|.
name|getReplicaListTransformer
argument_list|(
operator|new
name|LocalSolrQueryRequest
argument_list|(
literal|null
argument_list|,
operator|new
name|ModifiableSolrParams
argument_list|()
operator|.
name|add
argument_list|(
literal|"toyRegEx"
argument_list|,
name|regex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Replica
argument_list|>
name|inputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Replica
argument_list|>
name|expectedTransformed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
name|createRandomUrls
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|urls
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
specifier|final
name|String
name|name
init|=
literal|"replica"
operator|+
operator|(
name|ii
operator|+
literal|1
operator|)
decl_stmt|;
specifier|final
name|String
name|url
init|=
name|urls
operator|.
name|get
argument_list|(
name|ii
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|propMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|propMap
operator|.
name|put
argument_list|(
literal|"base_url"
argument_list|,
name|url
argument_list|)
expr_stmt|;
comment|// a skeleton replica, good enough for this test's purposes
specifier|final
name|Replica
name|replica
init|=
operator|new
name|Replica
argument_list|(
name|name
argument_list|,
name|propMap
argument_list|)
decl_stmt|;
name|inputs
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|.
name|matches
argument_list|(
name|regex
argument_list|)
condition|)
block|{
name|expectedTransformed
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|List
argument_list|<
name|Replica
argument_list|>
name|actualTransformed
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|actualTransformed
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTransformed
operator|.
name|size
argument_list|()
argument_list|,
name|actualTransformed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|expectedTransformed
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
name|assertEquals
argument_list|(
literal|"mismatch for ii="
operator|+
name|ii
argument_list|,
name|expectedTransformed
operator|.
name|get
argument_list|(
name|ii
argument_list|)
argument_list|,
name|actualTransformed
operator|.
name|get
argument_list|(
name|ii
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRandomUrls
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|createRandomUrls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"a"
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"bb"
operator|+
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"ccc"
operator|+
name|random
argument_list|()
operator|.
name|nextGaussian
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"dddd"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"eeeee"
operator|+
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|urls
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|urls
return|;
block|}
DECL|method|maybeAddUrl
specifier|private
specifier|final
name|void
name|maybeAddUrl
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
parameter_list|,
specifier|final
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

