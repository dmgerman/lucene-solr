begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|SolrStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSQLHandlerNonCloud
specifier|public
class|class
name|TestSQLHandlerNonCloud
extends|extends
name|SolrJettyTestBase
block|{
DECL|method|createSolrHome
specifier|private
specifier|static
name|File
name|createSolrHome
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|workDir
init|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|setupJettyTestHome
argument_list|(
name|workDir
argument_list|,
name|DEFAULT_TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
return|return
name|workDir
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|solrHome
init|=
name|createSolrHome
argument_list|()
decl_stmt|;
name|solrHome
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|createJetty
argument_list|(
name|solrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSQLHandler
specifier|public
name|void
name|testSQLHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|sql
init|=
literal|"select id, field_i, str_s from "
operator|+
name|DEFAULT_TEST_COLLECTION_NAME
operator|+
literal|" limit 10"
decl_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
name|sql
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/"
operator|+
name|DEFAULT_TEST_COLLECTION_NAME
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
try|try
block|{
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|SQLHandler
operator|.
name|sqlNonCloudErrorMsg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|SQLHandler
operator|.
name|sqlNonCloudErrorMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTuples
specifier|private
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|tupleStream
argument_list|)
expr_stmt|;
block|}
return|return
name|tuples
return|;
block|}
DECL|method|mapParams
specifier|public
specifier|static
name|SolrParams
name|mapParams
parameter_list|(
name|String
modifier|...
name|vals
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Parameters passed in here must be in pairs!"
argument_list|,
literal|0
argument_list|,
operator|(
name|vals
operator|.
name|length
operator|%
literal|2
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|vals
operator|.
name|length
condition|;
name|idx
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|vals
index|[
name|idx
index|]
argument_list|,
name|vals
index|[
name|idx
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
block|}
end_class

end_unit

