begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|ShufflingReplicaListTransformerTest
specifier|public
class|class
name|ShufflingReplicaListTransformerTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|transformer
specifier|private
specifier|final
name|ShufflingReplicaListTransformer
name|transformer
init|=
operator|new
name|ShufflingReplicaListTransformer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Test
DECL|method|testTransformReplicas
specifier|public
name|void
name|testTransformReplicas
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|url
range|:
name|createRandomUrls
argument_list|()
control|)
block|{
name|replicas
operator|.
name|add
argument_list|(
operator|new
name|Replica
argument_list|(
name|url
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|implTestTransform
argument_list|(
name|replicas
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTransformUrls
specifier|public
name|void
name|testTransformUrls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
name|createRandomUrls
argument_list|()
decl_stmt|;
name|implTestTransform
argument_list|(
name|urls
argument_list|)
expr_stmt|;
block|}
DECL|method|implTestTransform
specifier|private
parameter_list|<
name|TYPE
parameter_list|>
name|void
name|implTestTransform
parameter_list|(
name|List
argument_list|<
name|TYPE
argument_list|>
name|inputs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|TYPE
argument_list|>
name|transformedInputs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
name|transformedInputs
argument_list|)
expr_stmt|;
specifier|final
name|Set
argument_list|<
name|TYPE
argument_list|>
name|inputSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|inputs
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|TYPE
argument_list|>
name|transformedSet
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|transformedInputs
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inputSet
operator|.
name|equals
argument_list|(
name|transformedSet
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|createRandomUrls
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|createRandomUrls
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"a"
operator|+
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"bb"
operator|+
name|random
argument_list|()
operator|.
name|nextFloat
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"ccc"
operator|+
name|random
argument_list|()
operator|.
name|nextGaussian
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"dddd"
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|maybeAddUrl
argument_list|(
name|urls
argument_list|,
literal|"eeeee"
operator|+
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|urls
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|urls
return|;
block|}
DECL|method|maybeAddUrl
specifier|private
specifier|final
name|void
name|maybeAddUrl
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
parameter_list|,
specifier|final
name|String
name|url
parameter_list|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|urls
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

