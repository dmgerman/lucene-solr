begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|StatsReloadRaceTest
specifier|public
class|class
name|StatsReloadRaceTest
extends|extends
name|SolrTestCaseJ4
block|{
comment|// to support many times repeating
DECL|field|taskNum
specifier|static
name|AtomicInteger
name|taskNum
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|XmlDoc
name|docs
init|=
operator|new
name|XmlDoc
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|10
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|docs
operator|.
name|xml
operator|+=
name|doc
argument_list|(
literal|"id"
argument_list|,
literal|""
operator|+
name|i
argument_list|,
literal|"name_s"
argument_list|,
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|add
argument_list|(
name|docs
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelReloadAndStats
specifier|public
name|void
name|testParallelReloadAndStats
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|atLeast
argument_list|(
literal|2
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|asyncId
init|=
name|taskNum
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMultiCoreHandler
argument_list|()
operator|.
name|handleRequest
argument_list|(
name|req
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/admin/cores"
argument_list|,
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|RELOAD
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|CORE
argument_list|,
name|DEFAULT_TEST_CORENAME
argument_list|,
literal|"async"
argument_list|,
literal|""
operator|+
name|asyncId
argument_list|)
argument_list|,
operator|new
name|SolrQueryResponse
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|isCompleted
decl_stmt|;
do|do
block|{
name|String
name|stats
init|=
name|h
operator|.
name|query
argument_list|(
name|req
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/admin/mbeans"
argument_list|,
literal|"stats"
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|actualStats
init|=
name|SolrInfoMBeanHandler
operator|.
name|fromXML
argument_list|(
name|stats
argument_list|)
operator|.
name|get
argument_list|(
literal|"CORE"
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|>
name|tuple
range|:
name|actualStats
control|)
block|{
if|if
condition|(
name|tuple
operator|.
name|getKey
argument_list|()
operator|.
name|contains
argument_list|(
literal|"earcher"
argument_list|)
condition|)
block|{
comment|// catches "searcher" and "Searcher@345345 blah"
name|NamedList
argument_list|<
name|Object
argument_list|>
name|searcherStats
init|=
name|tuple
operator|.
name|getValue
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|NamedList
argument_list|<
name|Object
argument_list|>
name|statsList
init|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|searcherStats
operator|.
name|get
argument_list|(
literal|"stats"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"expect to have exactly one indexVersion at "
operator|+
name|statsList
argument_list|,
literal|1
argument_list|,
name|statsList
operator|.
name|getAll
argument_list|(
literal|"indexVersion"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|statsList
operator|.
name|get
argument_list|(
literal|"indexVersion"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
block|}
block|}
name|h
operator|.
name|getCoreContainer
argument_list|()
operator|.
name|getMultiCoreHandler
argument_list|()
operator|.
name|handleRequest
argument_list|(
name|req
argument_list|(
name|CoreAdminParams
operator|.
name|ACTION
argument_list|,
name|CoreAdminParams
operator|.
name|CoreAdminAction
operator|.
name|REQUESTSTATUS
operator|.
name|toString
argument_list|()
argument_list|,
name|CoreAdminParams
operator|.
name|REQUESTID
argument_list|,
literal|""
operator|+
name|asyncId
argument_list|)
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|List
argument_list|<
name|Object
argument_list|>
name|statusLog
init|=
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|getAll
argument_list|(
name|CoreAdminAction
operator|.
name|STATUS
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"expect status check w/o error, got:"
operator|+
name|statusLog
argument_list|,
name|statusLog
operator|.
name|contains
argument_list|(
name|CoreAdminHandler
operator|.
name|FAILED
argument_list|)
argument_list|)
expr_stmt|;
name|isCompleted
operator|=
name|statusLog
operator|.
name|contains
argument_list|(
name|CoreAdminHandler
operator|.
name|COMPLETED
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|isCompleted
condition|)
do|;
block|}
block|}
block|}
end_class

end_unit

