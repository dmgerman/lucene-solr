begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|LBHttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|HttpShardHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
operator|.
name|ShardHandlerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_comment
comment|/**  * Tests specifying a custom ShardHandlerFactory  */
end_comment

begin_class
DECL|class|TestHttpShardHandlerFactory
specifier|public
class|class
name|TestHttpShardHandlerFactory
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|LOAD_BALANCER_REQUESTS_MIN_ABSOLUTE
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_BALANCER_REQUESTS_MIN_ABSOLUTE
init|=
literal|"solr.tests.loadBalancerRequestsMinimumAbsolute"
decl_stmt|;
DECL|field|LOAD_BALANCER_REQUESTS_MAX_FRACTION
specifier|private
specifier|static
specifier|final
name|String
name|LOAD_BALANCER_REQUESTS_MAX_FRACTION
init|=
literal|"solr.tests.loadBalancerRequestsMaximumFraction"
decl_stmt|;
DECL|field|expectedLoadBalancerRequestsMinimumAbsolute
specifier|private
specifier|static
name|int
name|expectedLoadBalancerRequestsMinimumAbsolute
init|=
literal|0
decl_stmt|;
DECL|field|expectedLoadBalancerRequestsMaximumFraction
specifier|private
specifier|static
name|float
name|expectedLoadBalancerRequestsMaximumFraction
init|=
literal|1.0f
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|expectedLoadBalancerRequestsMinimumAbsolute
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// 0 .. 2
name|expectedLoadBalancerRequestsMaximumFraction
operator|=
operator|(
literal|1
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|)
operator|/
literal|10f
expr_stmt|;
comment|// 0.1 .. 1.0
name|System
operator|.
name|setProperty
argument_list|(
name|LOAD_BALANCER_REQUESTS_MIN_ABSOLUTE
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|expectedLoadBalancerRequestsMinimumAbsolute
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|LOAD_BALANCER_REQUESTS_MAX_FRACTION
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|expectedLoadBalancerRequestsMaximumFraction
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterTests
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|LOAD_BALANCER_REQUESTS_MIN_ABSOLUTE
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
name|LOAD_BALANCER_REQUESTS_MAX_FRACTION
argument_list|)
expr_stmt|;
block|}
DECL|method|testLoadBalancerRequestsMinMax
specifier|public
name|void
name|testLoadBalancerRequestsMinMax
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Path
name|home
init|=
name|Paths
operator|.
name|get
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|)
decl_stmt|;
name|CoreContainer
name|cc
init|=
literal|null
decl_stmt|;
name|ShardHandlerFactory
name|factory
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cc
operator|=
name|CoreContainer
operator|.
name|createAndLoad
argument_list|(
name|home
argument_list|,
name|home
operator|.
name|resolve
argument_list|(
literal|"solr-shardhandler-loadBalancerRequests.xml"
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|=
name|cc
operator|.
name|getShardHandlerFactory
argument_list|()
expr_stmt|;
comment|// test that factory is HttpShardHandlerFactory with expected url reserve fraction
name|assertTrue
argument_list|(
name|factory
operator|instanceof
name|HttpShardHandlerFactory
argument_list|)
expr_stmt|;
specifier|final
name|HttpShardHandlerFactory
name|httpShardHandlerFactory
init|=
operator|(
operator|(
name|HttpShardHandlerFactory
operator|)
name|factory
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLoadBalancerRequestsMinimumAbsolute
argument_list|,
name|httpShardHandlerFactory
operator|.
name|permittedLoadBalancerRequestsMinimumAbsolute
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLoadBalancerRequestsMaximumFraction
argument_list|,
name|httpShardHandlerFactory
operator|.
name|permittedLoadBalancerRequestsMaximumFraction
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
comment|// create a dummy request and dummy url list
specifier|final
name|QueryRequest
name|queryRequest
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|urls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|10
condition|;
operator|++
name|ii
control|)
block|{
name|urls
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// create LBHttpSolrClient request
specifier|final
name|LBHttpSolrClient
operator|.
name|Req
name|req
init|=
name|httpShardHandlerFactory
operator|.
name|newLBHttpSolrClientReq
argument_list|(
name|queryRequest
argument_list|,
name|urls
argument_list|)
decl_stmt|;
comment|// actual vs. expected test
specifier|final
name|int
name|actualNumServersToTry
init|=
name|req
operator|.
name|getNumServersToTry
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|int
name|expectedNumServersToTry
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|urls
operator|.
name|size
argument_list|()
operator|*
name|expectedLoadBalancerRequestsMaximumFraction
argument_list|)
decl_stmt|;
if|if
condition|(
name|expectedNumServersToTry
operator|<
name|expectedLoadBalancerRequestsMinimumAbsolute
condition|)
block|{
name|expectedNumServersToTry
operator|=
name|expectedLoadBalancerRequestsMinimumAbsolute
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"wrong numServersToTry for"
operator|+
literal|" urls.size="
operator|+
name|urls
operator|.
name|size
argument_list|()
operator|+
literal|" expectedLoadBalancerRequestsMinimumAbsolute="
operator|+
name|expectedLoadBalancerRequestsMinimumAbsolute
operator|+
literal|" expectedLoadBalancerRequestsMaximumFraction="
operator|+
name|expectedLoadBalancerRequestsMaximumFraction
argument_list|,
name|expectedNumServersToTry
argument_list|,
name|actualNumServersToTry
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|factory
operator|!=
literal|null
condition|)
name|factory
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cc
operator|!=
literal|null
condition|)
name|cc
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

