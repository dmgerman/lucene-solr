begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.component
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|component
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|is
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|BaseDistributedSearchTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|FacetField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
DECL|class|DistributedFacetExistsSmallTest
specifier|public
class|class
name|DistributedFacetExistsSmallTest
extends|extends
name|BaseDistributedSearchTestCase
block|{
DECL|field|FLD
specifier|public
specifier|static
specifier|final
name|String
name|FLD
init|=
literal|"t_s"
decl_stmt|;
DECL|field|maxId
specifier|private
name|int
name|maxId
decl_stmt|;
DECL|method|DistributedFacetExistsSmallTest
specifier|public
name|DistributedFacetExistsSmallTest
parameter_list|()
block|{   }
annotation|@
name|Before
DECL|method|prepareIndex
specifier|public
name|void
name|prepareIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
specifier|final
name|Random
name|rnd
init|=
name|random
argument_list|()
decl_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"AAA"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"B"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"BB"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"BB"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"BBB"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"BBB"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"BBB"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"CC"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"CC"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"CCC"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"CCC"
argument_list|)
expr_stmt|;
name|index
argument_list|(
name|id
argument_list|,
name|maxId
operator|+=
literal|1
operator|+
name|rnd
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|,
name|FLD
argument_list|,
literal|"CCC"
argument_list|)
expr_stmt|;
specifier|final
name|SolrClient
name|shard0
init|=
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// expectidly fails test
comment|//shard0.add(sdoc("id", 13, FLD, "DDD"));
name|commit
argument_list|()
expr_stmt|;
name|handle
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"QTime"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"timestamp"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"maxScore"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
name|handle
operator|.
name|put
argument_list|(
literal|"_version_"
argument_list|,
name|SKIPVAL
argument_list|)
expr_stmt|;
block|}
annotation|@
name|ShardsFixed
argument_list|(
name|num
operator|=
literal|4
argument_list|)
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|Exception
block|{
name|checkBasicRequest
argument_list|()
expr_stmt|;
name|checkWithMinCountEqOne
argument_list|()
expr_stmt|;
name|checkWithSortCount
argument_list|()
expr_stmt|;
name|checkWithMethodSetPerField
argument_list|()
expr_stmt|;
block|{
comment|// empty enum for checking npe
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"facet.exists"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
block|}
name|checkRandomParams
argument_list|()
expr_stmt|;
name|checkInvalidMincount
argument_list|()
expr_stmt|;
block|}
DECL|method|checkRandomParams
specifier|private
name|void
name|checkRandomParams
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|()
decl_stmt|;
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|int
name|from
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"["
operator|+
operator|(
name|from
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
name|maxId
operator|/
literal|2
argument_list|)
operator|)
operator|+
literal|" TO "
operator|+
operator|(
operator|(
name|from
operator|-
literal|1
operator|)
operator|+
operator|(
name|rand
operator|.
name|nextInt
argument_list|(
name|maxId
argument_list|)
operator|)
operator|)
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|int
name|offset
init|=
literal|0
decl_stmt|;
name|int
name|indexSize
init|=
literal|6
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|offset
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|*
literal|2
argument_list|)
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|/
literal|3
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"facet.offset"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|int
name|limit
init|=
literal|100
decl_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|limit
operator|=
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|10
condition|?
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|/
literal|2
operator|+
literal|1
argument_list|)
else|:
name|rand
operator|.
name|nextInt
argument_list|(
name|indexSize
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"facet.limit"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|limit
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.sort"
argument_list|,
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"index"
else|:
literal|"count"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
specifier|final
name|String
index|[]
name|prefixes
init|=
operator|new
name|String
index|[]
block|{
literal|"A"
block|,
literal|"B"
block|,
literal|"C"
block|}
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.prefix"
argument_list|,
name|prefixes
index|[
name|rand
operator|.
name|nextInt
argument_list|(
name|prefixes
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.missing"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rand
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|<
literal|20
condition|)
block|{
comment|// assigning only valid vals
name|params
operator|.
name|add
argument_list|(
literal|"facet.mincount"
argument_list|,
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"0"
else|:
literal|"1"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|shardRespondsWithMissingEvenLimitIsZero
init|=
name|params
operator|.
name|getBool
argument_list|(
literal|"facet.missing"
argument_list|,
literal|false
argument_list|)
operator|&&
name|params
operator|.
name|getInt
argument_list|(
literal|"facet.limit"
argument_list|,
literal|100
argument_list|)
operator|==
literal|0
decl_stmt|;
comment|// skip miss count check, here cloud is different to non-distrib
if|if
condition|(
name|shardRespondsWithMissingEvenLimitIsZero
condition|)
block|{
name|handle
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|SKIP
argument_list|)
expr_stmt|;
block|}
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
if|if
condition|(
name|shardRespondsWithMissingEvenLimitIsZero
condition|)
block|{
name|handle
operator|.
name|remove
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkInvalidMincount
specifier|private
name|void
name|checkInvalidMincount
parameter_list|()
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"facet.exists"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|FLD
operator|+
literal|".facet.exists"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|set
argument_list|(
literal|"facet.mincount"
argument_list|,
literal|""
operator|+
operator|(
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
literal|"f."
operator|+
name|FLD
operator|+
literal|".facet.mincount"
argument_list|,
literal|""
operator|+
operator|(
literal|2
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|setDistributedParams
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|queryServer
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|params
operator|.
name|set
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|controlClient
operator|.
name|query
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrException
name|e
parameter_list|)
block|{
comment|// check that distr and single index search fail the same
name|assertEquals
argument_list|(
name|e
operator|.
name|code
argument_list|()
argument_list|,
name|ErrorCode
operator|.
name|BAD_REQUEST
operator|.
name|code
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"facet.exists"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"facet.mincount"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|FLD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|checkBasicRequest
specifier|private
name|void
name|checkBasicRequest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|()
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertResponse
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|checkWithMinCountEqOne
specifier|private
name|void
name|checkWithMinCountEqOne
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|(
literal|"facet.mincount"
argument_list|,
literal|"1"
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertResponse
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|checkWithSortCount
specifier|private
name|void
name|checkWithSortCount
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|(
literal|"facet.sort"
argument_list|,
literal|"count"
argument_list|)
decl_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertResponse
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|checkWithMethodSetPerField
specifier|private
name|void
name|checkWithMethodSetPerField
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
name|buildParams
argument_list|(
literal|"f."
operator|+
name|FLD
operator|+
literal|".facet.exists"
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"facet.exists"
argument_list|)
expr_stmt|;
name|QueryResponse
name|rsp
init|=
name|query
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|assertResponse
argument_list|(
name|rsp
argument_list|)
expr_stmt|;
block|}
DECL|method|buildParams
specifier|private
name|ModifiableSolrParams
name|buildParams
parameter_list|(
name|String
modifier|...
name|additionalParams
parameter_list|)
block|{
specifier|final
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
comment|//params.add("debugQuery", "true");
name|params
operator|.
name|add
argument_list|(
literal|"facet"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"facet.method"
argument_list|,
literal|"enum"
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"facet.exists"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"facet.field"
argument_list|,
name|FLD
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|additionalParams
operator|.
name|length
condition|;
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|additionalParams
index|[
name|i
operator|++
index|]
argument_list|,
name|additionalParams
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|assertResponse
specifier|private
name|void
name|assertResponse
parameter_list|(
name|QueryResponse
name|rsp
parameter_list|)
block|{
specifier|final
name|FacetField
name|facetField
init|=
name|rsp
operator|.
name|getFacetField
argument_list|(
name|FLD
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|facetField
operator|.
name|getValueCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|FacetField
operator|.
name|Count
argument_list|>
name|counts
init|=
name|facetField
operator|.
name|getValues
argument_list|()
decl_stmt|;
for|for
control|(
name|FacetField
operator|.
name|Count
name|count
range|:
name|counts
control|)
block|{
name|assertThat
argument_list|(
literal|"Count for: "
operator|+
name|count
operator|.
name|getName
argument_list|()
argument_list|,
name|count
operator|.
name|getCount
argument_list|()
argument_list|,
name|is
argument_list|(
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertThat
argument_list|(
name|counts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"AAA"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"B"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|counts
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|,
name|is
argument_list|(
literal|"BB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

