begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.admin
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|api
operator|.
name|Api
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|api
operator|.
name|ApiBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|zookeeper
operator|.
name|KeeperException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|EMPTY_MAP
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|Overseer
operator|.
name|QUEUE_OPERATION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|admin
operator|.
name|TestCollectionAPIs
operator|.
name|compareOutput
import|;
end_import

begin_class
DECL|class|TestConfigsApi
specifier|public
class|class
name|TestConfigsApi
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testCommands
specifier|public
name|void
name|testCommands
parameter_list|()
throws|throws
name|Exception
block|{
name|ConfigSetsHandler
name|handler
init|=
operator|new
name|ConfigSetsHandler
argument_list|(
literal|null
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|sendToZk
parameter_list|(
name|SolrQueryResponse
name|rsp
parameter_list|,
name|ConfigSetOperation
name|operation
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
parameter_list|)
throws|throws
name|KeeperException
throws|,
name|InterruptedException
block|{
name|result
operator|.
name|put
argument_list|(
name|QUEUE_OPERATION
argument_list|,
name|operation
operator|.
name|action
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
name|ZkNodeProps
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|ZkNodeProps
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|ApiBag
name|apiBag
init|=
operator|new
name|ApiBag
argument_list|(
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|Api
name|api
range|:
name|handler
operator|.
name|getApis
argument_list|()
control|)
name|apiBag
operator|.
name|register
argument_list|(
name|api
argument_list|,
name|EMPTY_MAP
argument_list|)
expr_stmt|;
name|compareOutput
argument_list|(
name|apiBag
argument_list|,
literal|"/cluster/configs/sample"
argument_list|,
name|DELETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|"{name :sample, operation:delete}"
argument_list|)
expr_stmt|;
name|compareOutput
argument_list|(
name|apiBag
argument_list|,
literal|"/cluster/configs"
argument_list|,
name|POST
argument_list|,
literal|"{create:{name : newconf, baseConfigSet: sample }}"
argument_list|,
literal|null
argument_list|,
literal|"{operation:create, name :newconf,  baseConfigSet: sample, immutable: false }"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

