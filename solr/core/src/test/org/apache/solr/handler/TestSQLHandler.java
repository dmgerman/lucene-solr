begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|InputStreamResponseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|ExceptionStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|SolrStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|TupleStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSQLHandler
specifier|public
class|class
name|TestSQLHandler
extends|extends
name|AbstractFullDistribZkTestBase
block|{
static|static
block|{
name|schemaString
operator|=
literal|"schema-sql.xml"
expr_stmt|;
block|}
DECL|method|TestSQLHandler
specifier|public
name|TestSQLHandler
parameter_list|()
block|{
name|sliceCount
operator|=
literal|2
expr_stmt|;
block|}
DECL|method|getCloudSolrConfig
specifier|protected
name|String
name|getCloudSolrConfig
parameter_list|()
block|{
return|return
literal|"solrconfig-sql.xml"
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"numShards"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|sliceCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
name|resetExceptionIgnores
argument_list|()
expr_stmt|;
block|}
DECL|method|delete
specifier|private
name|void
name|delete
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|doTest
specifier|public
name|void
name|doTest
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeFalse
argument_list|(
literal|"This test fails on UNIX with Turkish default locale"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"tr"
argument_list|)
operator|.
name|getLanguage
argument_list|()
operator|.
name|equals
argument_list|(
name|Locale
operator|.
name|getDefault
argument_list|()
operator|.
name|getLanguage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|waitForRecoveriesToFinish
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testBasicSelect
argument_list|()
expr_stmt|;
name|testWhere
argument_list|()
expr_stmt|;
name|testMixedCaseFields
argument_list|()
expr_stmt|;
name|testBasicGrouping
argument_list|()
expr_stmt|;
name|testBasicGroupingTint
argument_list|()
expr_stmt|;
name|testBasicGroupingFacets
argument_list|()
expr_stmt|;
name|testSelectDistinct
argument_list|()
expr_stmt|;
name|testSelectDistinctFacets
argument_list|()
expr_stmt|;
name|testAggregatesWithoutGrouping
argument_list|()
expr_stmt|;
name|testSQLException
argument_list|()
expr_stmt|;
name|testTimeSeriesGrouping
argument_list|()
expr_stmt|;
name|testTimeSeriesGroupingFacet
argument_list|()
expr_stmt|;
name|testParallelBasicGrouping
argument_list|()
expr_stmt|;
name|testParallelSelectDistinct
argument_list|()
expr_stmt|;
name|testParallelTimeSeriesGrouping
argument_list|()
expr_stmt|;
block|}
DECL|method|testBasicSelect
specifier|private
name|void
name|testBasicSelect
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"############# testBasicSelect() ############"
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|6
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|40
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|5
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
comment|//Assert field order
name|assertResponseContains
argument_list|(
name|clients
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|sParams
argument_list|,
literal|"{\"docs\":[{\"id\":\"8\",\"field_i\":60,\"str_s\":\"c\"}"
argument_list|)
expr_stmt|;
comment|//Test unlimited unsorted result. Should sort on _version_ desc
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, field_i, str_s from collection1 where text='XXXX'"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|6
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|40
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|5
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, field_i, str_s from collection1 where text='XXXX' order by field_i desc limit 1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, field_i, str_s from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by myInt desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
comment|//Test after reload SOLR-9059//
name|Replica
name|leader
init|=
name|getShardLeader
argument_list|(
literal|"collection1"
argument_list|,
literal|"shard1"
argument_list|,
literal|30
comment|/* timeout secs */
argument_list|)
decl_stmt|;
comment|// reload collection and wait to see the core report it has been reloaded
name|boolean
name|wasReloaded
init|=
name|reloadCollection
argument_list|(
name|leader
argument_list|,
literal|"collection1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|wasReloaded
argument_list|)
expr_stmt|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id as myId, field_i as myInt, str_s as myString from collection1 where text='XXXX' AND id='(1 2 3)' order by field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myId"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
comment|// SOLR-8845 - Test to make sure that 1 = 0 works for things like Spark SQL
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, field_i, str_s from collection1 where 1 = 0"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testWhere
specifier|private
name|void
name|testWhere
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
comment|// Equals
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id from collection1 where id = 1 order by id asc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Not Equals<>
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id from collection1 where id<> 1 order by id asc limit 10"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO requires different Calcite SQL conformance level
comment|// Not Equals !=
comment|//      sParams = mapParams(CommonParams.QT, "/sql",
comment|//          "stmt", "select id from collection1 where id != 1 order by id asc limit 10");
comment|//
comment|//      solrStream = new SolrStream(jetty.url, sParams);
comment|//      tuples = getTuples(solrStream);
comment|//
comment|//      assertEquals(7, tuples.size());
comment|//
comment|//      tuple = tuples.get(0);
comment|//      assertEquals(2L, tuple.get("id"));
comment|//      tuple = tuples.get(1);
comment|//      assertEquals(3L, tuple.get("id"));
comment|//      tuple = tuples.get(2);
comment|//      assertEquals(4L, tuple.get("id"));
comment|//      tuple = tuples.get(3);
comment|//      assertEquals(5L, tuple.get("id"));
comment|//      tuple = tuples.get(4);
comment|//      assertEquals(6L, tuple.get("id"));
comment|//      tuple = tuples.get(5);
comment|//      assertEquals(7L, tuple.get("id"));
comment|//      tuple = tuples.get(6);
comment|//      assertEquals(8L, tuple.get("id"));
comment|// Less than
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id from collection1 where id< 2 order by id asc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Less than equal
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id from collection1 where id<= 2 order by id asc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Greater than
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id from collection1 where id> 7 order by id asc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Greater than equal
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id from collection1 where id>= 7 order by id asc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8"
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testMixedCaseFields
specifier|private
name|void
name|testMixedCaseFields
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"Text_t"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"Str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"Field_i"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, Field_i, Str_s from collection1 where Text_t='XXXX' order by Field_i desc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|6
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|40
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|5
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"Field_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
comment|// TODO get sum(Field_i) as named one
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select Str_s, sum(Field_i) from collection1 where id='(1 8)' group by Str_s having (sum(Field_i) = 7 OR sum(Field_i) = 60) order by sum(Field_i) desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|7
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select Str_s, sum(Field_i) from collection1 where id='(1 8)' group by Str_s having (sum(Field_i) = 7 OR sum(Field_i) = 60) order by sum(Field_i) desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"Str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|7
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSQLException
specifier|private
name|void
name|testSQLException
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
argument_list|)
expr_stmt|;
name|indexDoc
argument_list|(
name|sdoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, str_s from collection1 where text='XXXX' order by field_iff desc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|Tuple
name|tuple
init|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column 'field_iff' not found in any table"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select id, field_iff, str_s from collection1 where text='XXXX' order by field_iff desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column 'field_iff' not found in any table"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_iff), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_iff) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Column 'field_iff' not found in any table"
argument_list|)
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), blah(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|getTuple
argument_list|(
operator|new
name|ExceptionStream
argument_list|(
name|solrStream
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|EOF
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|EXCEPTION
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"No match found for function signature blah"
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBasicGrouping
specifier|private
name|void
name|testBasicGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXY"
argument_list|,
literal|"str_s"
argument_list|,
literal|"d"
argument_list|,
literal|"field_i"
argument_list|,
literal|"70"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), cast(avg(1.0 * field_i) as float) as blah from collection1 where text='XXXX' group by str_s order by sum(field_i) asc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"blah"
argument_list|)
operator|==
literal|9.5
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"blah"
argument_list|)
operator|==
literal|13.5
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), avg(field_i)  from collection1 where text='XXXX' group by str_s order by mySum asc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where (text='XXXX' AND NOT ((text='XXXY') AND (text='XXXY' OR text='XXXY'))) "
operator|+
literal|"group by str_s order by str_s desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|180
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|30
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|45
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10D
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s as myString, count(*) as myCount, sum(field_i) as mySum, min(field_i) as myMin, "
operator|+
literal|"max(field_i) as myMax, avg(field_i) as myAvg from collection1 "
operator|+
literal|"where (text='XXXX' AND NOT (text='XXXY')) group by str_s order by str_s desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myCount"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|180
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMin"
argument_list|)
operator|==
literal|30
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMax"
argument_list|)
operator|==
literal|60
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myAvg"
argument_list|)
operator|==
literal|45
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myCount"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMin"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMax"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myAvg"
argument_list|)
operator|==
literal|10
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myCount"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMin"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMax"
argument_list|)
operator|==
literal|20
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myAvg"
argument_list|)
operator|==
literal|14
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) "
operator|+
literal|"from collection1 where text='XXXX' group by str_s having sum(field_i) = 19"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) "
operator|+
literal|"from collection1 where text='XXXX' group by str_s having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 100))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBasicGroupingTint
specifier|private
name|void
name|testBasicGroupingTint
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXY"
argument_list|,
literal|"str_s"
argument_list|,
literal|"d"
argument_list|,
literal|"field_ti"
argument_list|,
literal|"70"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_ti), min(field_ti), max(field_ti), avg(field_ti) from collection1 where text='XXXX' group by str_s order by sum(field_ti) asc limit 2"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSelectDistinctFacets
specifier|private
name|void
name|testSelectDistinctFacets
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"######## selectDistinctFacets #######"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//assert(false);
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//reverse the sort
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//reverse the sort
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s as myString, field_i as myInt from collection1 order by str_s desc, myInt desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"myInt"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//test with limit
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
comment|// Test without a sort. Sort should be asc by default.
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|// Test with a predicate.
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 where str_s = 'a'"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testSelectDistinct
specifier|private
name|void
name|testSelectDistinct
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"##################### testSelectDistinct()"
argument_list|)
expr_stmt|;
name|TupleStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//reverse the sort
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//test with limit
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
comment|// Test without a sort. Sort should be asc by default.
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|// Test with a predicate.
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 where str_s = 'a'"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testParallelSelectDistinct
specifier|private
name|void
name|testParallelSelectDistinct
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//reverse the sort
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//reverse the sort
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//test with limit
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
comment|// Test without a sort. Sort should be asc by default.
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|30
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|50
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|// Test with a predicate.
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select distinct str_s, field_i from collection1 where str_s = 'a'"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
operator|==
literal|20
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testBasicGroupingFacets
specifier|private
name|void
name|testBasicGroupingFacets
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXY"
argument_list|,
literal|"str_s"
argument_list|,
literal|"d"
argument_list|,
literal|"field_i"
argument_list|,
literal|"70"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"order by sum(field_i) asc limit 2"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"order by sum(field_i) asc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) "
operator|+
literal|"group by str_s order by str_s desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|180
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|30
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|45
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s as myString, count(*), sum(field_i) as mySum, min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where (text='XXXX' AND NOT (text='XXXY')) "
operator|+
literal|"group by str_s order by myString desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|180
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|30
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|45
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|13.5D
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5D
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 100))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testParallelBasicGrouping
specifier|private
name|void
name|testParallelBasicGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"a"
argument_list|,
literal|"field_i"
argument_list|,
literal|"20"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"b"
argument_list|,
literal|"field_i"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"40"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"text"
argument_list|,
literal|"XXXX XXXX"
argument_list|,
literal|"str_s"
argument_list|,
literal|"c"
argument_list|,
literal|"field_i"
argument_list|,
literal|"60"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"order by sum(field_i) asc limit 2"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"cast(avg(1.0 * field_i) as float) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"order by sum(field_i) asc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|9.5
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|13.5
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i) as mySum, min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s order by mySum asc limit 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//Only two results because of the limit.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|19
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
operator|==
literal|27
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s order by str_s desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|180
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|30
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|45
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s as myString, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s order by myString desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
comment|//The sort by and order by match and no limit is applied. All the Tuples should be returned in
comment|//this scenario.
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|180
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|30
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|60
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|45
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myString"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|27
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|20
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|14
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s having sum(field_i) = 19"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 8))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"str_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|2
operator|)
assert|;
comment|//count(*)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|19
operator|)
assert|;
comment|//sum(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|8
operator|)
assert|;
comment|//min(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
operator|==
literal|11
operator|)
assert|;
comment|//max(field_i)
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
operator|==
literal|10
operator|)
assert|;
comment|//avg(field_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select str_s, count(*), sum(field_i), min(field_i), max(field_i), "
operator|+
literal|"avg(field_i) from collection1 where text='XXXX' group by str_s "
operator|+
literal|"having ((sum(field_i) = 19) AND (min(field_i) = 100))"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testAggregatesWithoutGrouping
specifier|private
name|void
name|testAggregatesWithoutGrouping
parameter_list|()
throws|throws
name|Exception
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), "
operator|+
literal|"min(a_f), max(a_f), avg(a_f) from collection1"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$0"
argument_list|)
decl_stmt|;
comment|//count(*)
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
decl_stmt|;
comment|//sum(a_i)
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
decl_stmt|;
comment|//min(a_i)
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
decl_stmt|;
comment|//max(a_i)
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
decl_stmt|;
comment|//avg(a_i)
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
decl_stmt|;
comment|//sum(a_f)
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$6"
argument_list|)
decl_stmt|;
comment|//min(a_f)
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$7"
argument_list|)
decl_stmt|;
comment|//max(a_f)
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$8"
argument_list|)
decl_stmt|;
comment|//avg(a_f)
name|assertTrue
argument_list|(
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|==
literal|70
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|==
literal|55.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, "
operator|+
literal|"cast(avg(1.0 * a_i) as float) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|//Test Long and Double Sums
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myCount"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMin"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMax"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myAvg"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
expr_stmt|;
comment|//sum(a_f)
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$6"
argument_list|)
expr_stmt|;
comment|//min(a_f)
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$7"
argument_list|)
expr_stmt|;
comment|//max(a_f)
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$8"
argument_list|)
expr_stmt|;
comment|//avg(a_f)
name|assertTrue
argument_list|(
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|==
literal|70
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|==
literal|55.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
comment|//Test without cast on average int field
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select count(*) as myCount, sum(a_i) as mySum, min(a_i) as myMin, max(a_i) as myMax, "
operator|+
literal|"avg(a_i) as myAvg, sum(a_f), min(a_f), max(a_f), avg(a_f) from collection1"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|//Test Long and Double Sums
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myCount"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"mySum"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMin"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myMax"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"myAvg"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"myAvg"
argument_list|)
operator|instanceof
name|Long
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
expr_stmt|;
comment|//sum(a_f)
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$6"
argument_list|)
expr_stmt|;
comment|//min(a_f)
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$7"
argument_list|)
expr_stmt|;
comment|//max(a_f)
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$8"
argument_list|)
expr_stmt|;
comment|//avg(a_f)
name|assertTrue
argument_list|(
name|count
operator|==
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|==
literal|70
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|==
literal|7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|==
literal|55.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
comment|// Test where clause hits
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), "
operator|+
literal|"min(a_f), max(a_f), avg(a_f) from collection1 where id = 2"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$0"
argument_list|)
expr_stmt|;
comment|//count(*)
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
expr_stmt|;
comment|//sum(a_i)
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
expr_stmt|;
comment|//min(a_i)
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
expr_stmt|;
comment|//max(a_i)
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
expr_stmt|;
comment|//avg(a_i)
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
expr_stmt|;
comment|//sum(a_f)
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$6"
argument_list|)
expr_stmt|;
comment|//min(a_f)
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$7"
argument_list|)
expr_stmt|;
comment|//max(a_f)
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$8"
argument_list|)
expr_stmt|;
comment|//avg(a_f)
name|assertTrue
argument_list|(
name|count
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|==
literal|2.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|==
literal|2.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|==
literal|2.0
argument_list|)
expr_stmt|;
comment|// Test zero hits
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select count(*), sum(a_i), min(a_i), max(a_i), cast(avg(1.0 * a_i) as float), sum(a_f), "
operator|+
literal|"min(a_f), max(a_f), avg(a_f) from collection1 where a_s = 'blah'"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$0"
argument_list|)
expr_stmt|;
comment|//count(*)
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
expr_stmt|;
comment|//sum(a_i)
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
expr_stmt|;
comment|//min(a_i)
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
expr_stmt|;
comment|//max(a_i)
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$4"
argument_list|)
expr_stmt|;
comment|//avg(a_i)
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$5"
argument_list|)
expr_stmt|;
comment|//sum(a_f)
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$6"
argument_list|)
expr_stmt|;
comment|//min(a_f)
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$7"
argument_list|)
expr_stmt|;
comment|//max(a_f)
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$8"
argument_list|)
expr_stmt|;
comment|//avg(a_f)
name|assertTrue
argument_list|(
name|count
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|==
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|==
literal|null
argument_list|)
expr_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
block|}
DECL|method|testTimeSeriesGrouping
specifier|private
name|void
name|testTimeSeriesGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"1"
argument_list|,
literal|"item_i"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"3"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"4"
argument_list|,
literal|"item_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"2"
argument_list|,
literal|"item_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|66
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//sum(item_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i "
operator|+
literal|"order by year_i desc, month_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|57
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|9
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//sum(item_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i "
operator|+
literal|"order by year_i desc, month_i desc, day_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|42
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|15
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|5
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|6
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//sum(item_i)
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testTimeSeriesGroupingFacet
specifier|private
name|void
name|testTimeSeriesGroupingFacet
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"1"
argument_list|,
literal|"item_i"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"3"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"4"
argument_list|,
literal|"item_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"2"
argument_list|,
literal|"item_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|66
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//sum(item_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i "
operator|+
literal|"order by year_i desc, month_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|57
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|9
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//sum(item_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"facet"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i "
operator|+
literal|"order by year_i desc, month_i desc, day_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|42
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|15
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|5
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|6
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//sum(item_i)
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testParallelTimeSeriesGrouping
specifier|private
name|void
name|testParallelTimeSeriesGrouping
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|CloudJettyRunner
name|jetty
init|=
name|this
operator|.
name|cloudJettys
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|del
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"7"
argument_list|,
literal|"item_i"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"30"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"11"
argument_list|,
literal|"day_i"
argument_list|,
literal|"8"
argument_list|,
literal|"item_i"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"1"
argument_list|,
literal|"item_i"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2015"
argument_list|,
literal|"month_i"
argument_list|,
literal|"10"
argument_list|,
literal|"day_i"
argument_list|,
literal|"3"
argument_list|,
literal|"item_i"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"4"
argument_list|,
literal|"item_i"
argument_list|,
literal|"6"
argument_list|)
expr_stmt|;
name|indexr
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"year_i"
argument_list|,
literal|"2014"
argument_list|,
literal|"month_i"
argument_list|,
literal|"4"
argument_list|,
literal|"day_i"
argument_list|,
literal|"2"
argument_list|,
literal|"item_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|commit
argument_list|()
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, sum(item_i) from collection1 group by year_i order by year_i desc"
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|Tuple
name|tuple
decl_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"year_i"
argument_list|)
operator|instanceof
name|Long
operator|)
assert|;
comment|// SOLR-8601, This tests that the bucket is actually a Long and not parsed from a String.
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|66
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$1"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//sum(item_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, month_i, sum(item_i) from collection1 group by year_i, month_i "
operator|+
literal|"order by year_i desc, month_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"year_i"
argument_list|)
operator|instanceof
name|Long
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"month_i"
argument_list|)
operator|instanceof
name|Long
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|57
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|9
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$2"
argument_list|)
operator|==
literal|7
operator|)
assert|;
comment|//sum(item_i)
name|sParams
operator|=
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/sql"
argument_list|,
literal|"numWorkers"
argument_list|,
literal|"2"
argument_list|,
literal|"aggregationMode"
argument_list|,
literal|"map_reduce"
argument_list|,
literal|"stmt"
argument_list|,
literal|"select year_i, month_i, day_i, sum(item_i) from collection1 group by year_i, month_i, day_i "
operator|+
literal|"order by year_i desc, month_i desc, day_i desc"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|8
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|42
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|11
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|7
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|15
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|5
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2015
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|10
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|4
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|6
operator|)
assert|;
comment|//sum(item_i)
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"year_i"
argument_list|)
operator|==
literal|2014
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"month_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"day_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"EXPR$3"
argument_list|)
operator|==
literal|1
operator|)
assert|;
comment|//sum(item_i)
block|}
finally|finally
block|{
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|getTuple
specifier|protected
name|Tuple
name|getTuple
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|mapParams
specifier|public
specifier|static
name|SolrParams
name|mapParams
parameter_list|(
name|String
modifier|...
name|vals
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Parameters passed in here must be in pairs!"
argument_list|,
literal|0
argument_list|,
operator|(
name|vals
operator|.
name|length
operator|%
literal|2
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|vals
operator|.
name|length
condition|;
name|idx
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|vals
index|[
name|idx
index|]
argument_list|,
name|vals
index|[
name|idx
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|assertResponseContains
specifier|public
name|void
name|assertResponseContains
parameter_list|(
name|SolrClient
name|server
parameter_list|,
name|SolrParams
name|requestParams
parameter_list|,
name|String
name|json
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
name|String
name|p
init|=
name|requestParams
operator|.
name|get
argument_list|(
literal|"qt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|ModifiableSolrParams
name|modifiableSolrParams
init|=
operator|(
name|ModifiableSolrParams
operator|)
name|requestParams
decl_stmt|;
name|modifiableSolrParams
operator|.
name|remove
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
block|}
name|QueryRequest
name|query
init|=
operator|new
name|QueryRequest
argument_list|(
name|requestParams
argument_list|)
decl_stmt|;
name|query
operator|.
name|setPath
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|query
operator|.
name|setResponseParser
argument_list|(
operator|new
name|InputStreamResponseParser
argument_list|(
literal|"json"
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|.
name|setMethod
argument_list|(
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
argument_list|)
expr_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|genericResponse
init|=
name|server
operator|.
name|request
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|InputStream
name|stream
init|=
operator|(
name|InputStream
operator|)
name|genericResponse
operator|.
name|get
argument_list|(
literal|"stream"
argument_list|)
decl_stmt|;
name|InputStreamReader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|stream
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|BufferedReader
name|bufferedReader
init|=
operator|new
name|BufferedReader
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|String
name|response
init|=
name|bufferedReader
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|contains
argument_list|(
name|json
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

