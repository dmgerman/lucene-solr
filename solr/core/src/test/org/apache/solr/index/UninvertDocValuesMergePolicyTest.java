begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.index
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|IntUnaryOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IndexSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RefCounted
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|TestHarness
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_class
DECL|class|UninvertDocValuesMergePolicyTest
specifier|public
class|class
name|UninvertDocValuesMergePolicyTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|SOLR_TESTS_SKIP_INTEGRITY_CHECK
specifier|private
specifier|static
name|String
name|SOLR_TESTS_SKIP_INTEGRITY_CHECK
init|=
literal|"solr.tests.skipIntegrityCheck"
decl_stmt|;
DECL|field|ID_FIELD
specifier|private
specifier|static
name|String
name|ID_FIELD
init|=
literal|"id"
decl_stmt|;
DECL|field|TEST_FIELD
specifier|private
specifier|static
name|String
name|TEST_FIELD
init|=
literal|"string_add_dv_later"
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeTests
specifier|public
specifier|static
name|void
name|beforeTests
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
name|SOLR_TESTS_SKIP_INTEGRITY_CHECK
argument_list|,
operator|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|afterTests
specifier|public
specifier|static
name|void
name|afterTests
parameter_list|()
block|{
name|System
operator|.
name|clearProperty
argument_list|(
name|SOLR_TESTS_SKIP_INTEGRITY_CHECK
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|after
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|deleteCore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
literal|"solrconfig-uninvertdocvaluesmergepolicyfactory.xml"
argument_list|,
literal|"schema-docValues.xml"
argument_list|)
expr_stmt|;
block|}
DECL|method|testIndexAndAddDocValues
specifier|public
name|void
name|testIndexAndAddDocValues
parameter_list|()
throws|throws
name|Exception
block|{
name|Random
name|rand
init|=
name|random
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|ID_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|TEST_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assert everything has been indexed and there are no docvalues
name|withNewRawReader
argument_list|(
name|h
argument_list|,
name|topReader
lambda|->
block|{
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|topReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|infos
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|topReader
argument_list|)
decl_stmt|;
comment|// The global field type should not have docValues yet
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|addDocValuesTo
argument_list|(
name|h
argument_list|,
name|TEST_FIELD
argument_list|)
expr_stmt|;
comment|// Add some more documents with doc values turned on including updating some
for|for
control|(
name|int
name|i
init|=
literal|90
init|;
name|i
operator|<
literal|110
condition|;
name|i
operator|++
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
name|ID_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
name|TEST_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|withNewRawReader
argument_list|(
name|h
argument_list|,
name|topReader
lambda|->
block|{
name|assertEquals
argument_list|(
literal|110
argument_list|,
name|topReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|infos
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|topReader
argument_list|)
decl_stmt|;
comment|// The global field type should have docValues because a document with dvs was added
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|int
name|optimizeSegments
init|=
literal|1
decl_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|(
literal|"maxSegments"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|optimizeSegments
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Assert all docs have the right docvalues
name|withNewRawReader
argument_list|(
name|h
argument_list|,
name|topReader
lambda|->
block|{
comment|// Assert merged into one segment
name|assertEquals
argument_list|(
literal|110
argument_list|,
name|topReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|optimizeSegments
argument_list|,
name|topReader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|infos
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|topReader
argument_list|)
decl_stmt|;
comment|// The global field type should have docValues because a document with dvs was added
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that all segments have the right docvalues type with the correct value
comment|// Also check that other fields (e.g. the id field) didn't mistakenly get docvalues added
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|topReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|r
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedDocValues
name|docvalues
init|=
name|r
operator|.
name|getSortedDocValues
argument_list|(
name|TEST_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|numDocs
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|r
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|doc
operator|.
name|getField
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|doc
operator|.
name|getField
argument_list|(
name|ID_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|r
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|r
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|ID_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|docvalues
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|docvalues
operator|.
name|binaryValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// When an non-indexed field gets merged, it exhibit the old behavior
comment|// The field will be merged, docvalues headers updated, but no docvalues for this field
DECL|method|testNonIndexedFieldDoesNonFail
specifier|public
name|void
name|testNonIndexedFieldDoesNonFail
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Remove Indexed from fieldType
name|removeIndexFrom
argument_list|(
name|h
argument_list|,
name|TEST_FIELD
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|ID_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
name|TEST_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|addDocValuesTo
argument_list|(
name|h
argument_list|,
name|TEST_FIELD
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
name|ID_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
name|TEST_FIELD
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|optimize
argument_list|(
literal|"maxSegments"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|withNewRawReader
argument_list|(
name|h
argument_list|,
name|topReader
lambda|->
block|{
comment|// Assert merged into one segment
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topReader
operator|.
name|numDocs
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topReader
operator|.
name|leaves
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|FieldInfos
name|infos
init|=
name|MultiFields
operator|.
name|getMergedFieldInfos
argument_list|(
name|topReader
argument_list|)
decl_stmt|;
comment|// The global field type should have docValues because a document with dvs was added
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|infos
operator|.
name|fieldInfo
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|LeafReaderContext
name|ctx
range|:
name|topReader
operator|.
name|leaves
argument_list|()
control|)
block|{
name|LeafReader
name|r
init|=
name|ctx
operator|.
name|reader
argument_list|()
decl_stmt|;
name|SortedDocValues
name|docvalues
init|=
name|r
operator|.
name|getSortedDocValues
argument_list|(
name|TEST_FIELD
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r
operator|.
name|numDocs
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
name|r
operator|.
name|document
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|doc
operator|.
name|getField
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|doc
operator|.
name|getField
argument_list|(
name|ID_FIELD
argument_list|)
operator|.
name|stringValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|SORTED
argument_list|,
name|r
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|TEST_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|DocValuesType
operator|.
name|NONE
argument_list|,
name|r
operator|.
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|ID_FIELD
argument_list|)
operator|.
name|getDocValuesType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|.
name|equals
argument_list|(
literal|"2"
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|docvalues
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|v
argument_list|,
name|docvalues
operator|.
name|binaryValue
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|docvalues
operator|.
name|advanceExact
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|addDocValuesTo
specifier|private
specifier|static
name|void
name|addDocValuesTo
parameter_list|(
name|TestHarness
name|h
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|implUpdateSchemaField
argument_list|(
name|h
argument_list|,
name|fieldName
argument_list|,
parameter_list|(
name|p
parameter_list|)
lambda|->
operator|(
name|p
operator||
literal|0x00008000
operator|)
argument_list|)
expr_stmt|;
comment|// FieldProperties.DOC_VALUES
block|}
DECL|method|removeIndexFrom
specifier|private
specifier|static
name|void
name|removeIndexFrom
parameter_list|(
name|TestHarness
name|h
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|implUpdateSchemaField
argument_list|(
name|h
argument_list|,
name|fieldName
argument_list|,
parameter_list|(
name|p
parameter_list|)
lambda|->
operator|(
name|p
operator|^
literal|0x00000001
operator|)
argument_list|)
expr_stmt|;
comment|// FieldProperties.INDEXED
block|}
DECL|method|implUpdateSchemaField
specifier|private
specifier|static
name|void
name|implUpdateSchemaField
parameter_list|(
name|TestHarness
name|h
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|IntUnaryOperator
name|propertiesModifier
parameter_list|)
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCoreInc
argument_list|()
init|)
block|{
comment|// Add docvalues to the field type
name|IndexSchema
name|schema
init|=
name|core
operator|.
name|getLatestSchema
argument_list|()
decl_stmt|;
name|SchemaField
name|oldSchemaField
init|=
name|schema
operator|.
name|getField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|SchemaField
name|newSchemaField
init|=
operator|new
name|SchemaField
argument_list|(
name|fieldName
argument_list|,
name|oldSchemaField
operator|.
name|getType
argument_list|()
argument_list|,
name|propertiesModifier
operator|.
name|applyAsInt
argument_list|(
name|oldSchemaField
operator|.
name|getProperties
argument_list|()
argument_list|)
argument_list|,
name|oldSchemaField
operator|.
name|getDefaultValue
argument_list|()
argument_list|)
decl_stmt|;
name|schema
operator|.
name|getFields
argument_list|()
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|newSchemaField
argument_list|)
expr_stmt|;
block|}
block|}
DECL|interface|DirectoryReaderConsumer
specifier|private
interface|interface
name|DirectoryReaderConsumer
block|{
DECL|method|accept
specifier|public
name|void
name|accept
parameter_list|(
name|DirectoryReader
name|consumer
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|method|withNewRawReader
specifier|private
specifier|static
name|void
name|withNewRawReader
parameter_list|(
name|TestHarness
name|h
parameter_list|,
name|DirectoryReaderConsumer
name|consumer
parameter_list|)
block|{
try|try
init|(
name|SolrCore
name|core
init|=
name|h
operator|.
name|getCoreInc
argument_list|()
init|)
block|{
specifier|final
name|RefCounted
argument_list|<
name|SolrIndexSearcher
argument_list|>
name|searcherRef
init|=
name|core
operator|.
name|openNewSearcher
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|SolrIndexSearcher
name|searcher
init|=
name|searcherRef
operator|.
name|get
argument_list|()
decl_stmt|;
try|try
block|{
try|try
block|{
name|consumer
operator|.
name|accept
argument_list|(
name|searcher
operator|.
name|getRawReader
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|searcherRef
operator|.
name|decref
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

