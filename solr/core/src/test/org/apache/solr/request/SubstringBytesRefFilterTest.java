begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|SubstringBytesRefFilterTest
specifier|public
class|class
name|SubstringBytesRefFilterTest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testSubstringBytesRefFilter
specifier|public
name|void
name|testSubstringBytesRefFilter
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|substrings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|substrings
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|substrings
operator|.
name|add
argument_list|(
literal|"ooba"
argument_list|)
expr_stmt|;
name|substrings
operator|.
name|add
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|substrings
operator|.
name|add
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|contains
init|=
name|substrings
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|substrings
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|ignoreCase
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
specifier|final
name|SubstringBytesRefFilter
name|filter
init|=
operator|new
name|SubstringBytesRefFilter
argument_list|(
name|contains
argument_list|,
name|ignoreCase
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|test
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"foobar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreCase
condition|)
block|{
name|assertTrue
argument_list|(
name|filter
operator|.
name|test
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"FooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|filter
operator|.
name|test
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"FooBar"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|filter
operator|.
name|test
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"qux"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

