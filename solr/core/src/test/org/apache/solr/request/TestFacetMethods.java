begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SimpleFacets
operator|.
name|FacetMethod
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|BoolField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|IntPointField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|StrField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|TrieIntField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
DECL|class|TestFacetMethods
specifier|public
class|class
name|TestFacetMethods
block|{
comment|// TODO - make these public in FieldProperties?
DECL|field|MULTIVALUED
specifier|protected
specifier|final
specifier|static
name|int
name|MULTIVALUED
init|=
literal|0x00000200
decl_stmt|;
DECL|field|DOC_VALUES
specifier|protected
specifier|final
specifier|static
name|int
name|DOC_VALUES
init|=
literal|0x00008000
decl_stmt|;
annotation|@
name|Test
DECL|method|testNumericSingleValuedDV
specifier|public
name|void
name|testNumericSingleValuedDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|TrieIntField
argument_list|()
argument_list|,
name|DOC_VALUES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// default is FCS, can't use ENUM due to trie-field terms, FC rewrites to FCS for efficiency
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericMultiValuedDV
specifier|public
name|void
name|testNumericMultiValuedDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|TrieIntField
argument_list|()
argument_list|,
name|DOC_VALUES
operator|^
name|MULTIVALUED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// default is FC, can't use ENUM due to trie-field terms, can't use FCS because of multivalues
comment|// default value is FC
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericSingleValuedNoDV
specifier|public
name|void
name|testNumericSingleValuedNoDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|TrieIntField
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// only works with FCS for mincount = 0, UIF for count> 0 is fine
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNumericMultiValuedNoDV
specifier|public
name|void
name|testNumericMultiValuedNoDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|TrieIntField
argument_list|()
argument_list|,
name|MULTIVALUED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// only works with FC for mincount = 0, UIF for count> 1 is fine
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextSingleValuedDV
specifier|public
name|void
name|testTextSingleValuedDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StrField
argument_list|()
argument_list|,
name|DOC_VALUES
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// default is FC, otherwise just uses the passed-in method
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextMultiValuedDV
specifier|public
name|void
name|testTextMultiValuedDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StrField
argument_list|()
argument_list|,
name|DOC_VALUES
operator|^
name|MULTIVALUED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// default is FC, can't use FCS because of multivalues
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextSingleValuedNoDV
specifier|public
name|void
name|testTextSingleValuedNoDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StrField
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// default is FC, UIF rewrites to FCS for mincount = 0
comment|// TODO should it rewrite to FC instead?
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTextMultiValuedNoDV
specifier|public
name|void
name|testTextMultiValuedNoDV
parameter_list|()
block|{
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|StrField
argument_list|()
argument_list|,
name|MULTIVALUED
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// default is FC, can't use FCS for multivalued fields, UIF rewrites to FC for mincount = 0
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|UIF
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testBooleanDefaults
specifier|public
name|void
name|testBooleanDefaults
parameter_list|()
block|{
comment|// BoolField defaults to ENUM
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"field"
argument_list|,
operator|new
name|BoolField
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|ENUM
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPointFields
specifier|public
name|void
name|testPointFields
parameter_list|()
block|{
comment|// Methods other than FCS are not currently supported for PointFields
name|SchemaField
name|field
init|=
operator|new
name|SchemaField
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|IntPointField
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|FacetMethod
operator|.
name|ENUM
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|FacetMethod
operator|.
name|FC
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SimpleFacets
operator|.
name|FacetMethod
operator|.
name|FCS
argument_list|,
name|SimpleFacets
operator|.
name|selectFacetMethod
argument_list|(
name|field
argument_list|,
name|FacetMethod
operator|.
name|FCS
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

