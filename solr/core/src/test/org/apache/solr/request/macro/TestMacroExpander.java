begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.request.macro
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|macro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/*  * Tests for the MacroExpander  */
end_comment

begin_class
DECL|class|TestMacroExpander
specifier|public
class|class
name|TestMacroExpander
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testExamples
specifier|public
name|void
name|testExamples
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|testParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|MacroExpander
name|me
decl_stmt|;
comment|// example behavior unaffected by absence or value of failOnMissingParams
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|me
operator|=
operator|new
name|MacroExpander
argument_list|(
name|testParams
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|boolean
name|failOnMissingParams
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
name|me
operator|=
operator|new
name|MacroExpander
argument_list|(
name|testParams
argument_list|,
name|failOnMissingParams
argument_list|)
expr_stmt|;
block|}
comment|//default examples: https://cwiki.apache.org/confluence/display/solr/Parameter+Substitution
comment|// and http://yonik.com/solr-query-parameter-substitution/
comment|//using params
name|String
index|[]
name|lowParams
init|=
block|{
literal|"50"
block|}
decl_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"low"
argument_list|,
name|lowParams
argument_list|)
expr_stmt|;
name|String
index|[]
name|highParams
init|=
block|{
literal|"100"
block|}
decl_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"high"
argument_list|,
name|highParams
argument_list|)
expr_stmt|;
name|String
name|testQuery
init|=
literal|"q=popularity:[ ${low} TO ${high} ]"
decl_stmt|;
name|assertEquals
argument_list|(
literal|"q=popularity:[ 50 TO 100 ]"
argument_list|,
name|me
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
comment|//using default values
name|testQuery
operator|=
literal|"q=popularity:[ ${low:10} TO ${high:20} ]"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q=popularity:[ 50 TO 100 ]"
argument_list|,
name|me
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
name|testParams
operator|.
name|clear
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q=popularity:[ 10 TO 20 ]"
argument_list|,
name|me
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
comment|//multiple levels of substitutions
name|testQuery
operator|=
literal|"q=${pop_query}"
expr_stmt|;
name|String
index|[]
name|popQueryParams
init|=
block|{
literal|"${pop_field}:[ ${low} TO ${high} ] AND inStock:true"
block|}
decl_stmt|;
name|String
index|[]
name|popFieldParams
init|=
block|{
literal|"popularity"
block|}
decl_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"low"
argument_list|,
name|lowParams
argument_list|)
expr_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"high"
argument_list|,
name|highParams
argument_list|)
expr_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"pop_query"
argument_list|,
name|popQueryParams
argument_list|)
expr_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"pop_field"
argument_list|,
name|popFieldParams
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"q=popularity:[ 50 TO 100 ] AND inStock:true"
argument_list|,
name|me
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
comment|//end default examples
block|}
annotation|@
name|Test
DECL|method|testOnMissingParams
specifier|public
name|void
name|testOnMissingParams
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|testParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|MacroExpander
name|meSkipOnMissingParams
init|=
operator|new
name|MacroExpander
argument_list|(
name|testParams
argument_list|)
decl_stmt|;
specifier|final
name|MacroExpander
name|meFailOnMissingParams
init|=
operator|new
name|MacroExpander
argument_list|(
name|testParams
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|String
name|low
init|=
literal|"50"
decl_stmt|;
specifier|final
name|String
name|high
init|=
literal|"100"
decl_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"low"
argument_list|,
operator|new
name|String
index|[]
block|{
name|low
block|}
argument_list|)
expr_stmt|;
name|testParams
operator|.
name|put
argument_list|(
literal|"high"
argument_list|,
operator|new
name|String
index|[]
block|{
name|high
block|}
argument_list|)
expr_stmt|;
specifier|final
name|String
name|testQuery
init|=
literal|"q=popularity:[ ${low} TO ${high} ]"
decl_stmt|;
comment|//when params all present the expansion results match
specifier|final
name|String
name|expandedQuery
init|=
literal|"q=popularity:[ "
operator|+
name|low
operator|+
literal|" TO "
operator|+
name|high
operator|+
literal|" ]"
decl_stmt|;
name|assertEquals
argument_list|(
name|expandedQuery
argument_list|,
name|meSkipOnMissingParams
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expandedQuery
argument_list|,
name|meFailOnMissingParams
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
comment|//when param(s) missing and have no default the expansion results differ
specifier|final
name|String
name|expandedLow
decl_stmt|;
specifier|final
name|String
name|expandedHigh
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// keep low
name|expandedLow
operator|=
name|low
expr_stmt|;
block|}
else|else
block|{
name|expandedLow
operator|=
literal|""
expr_stmt|;
name|testParams
operator|.
name|remove
argument_list|(
literal|"low"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// keep high
name|expandedHigh
operator|=
name|high
expr_stmt|;
block|}
else|else
block|{
name|expandedHigh
operator|=
literal|""
expr_stmt|;
name|testParams
operator|.
name|remove
argument_list|(
literal|"high"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"q=popularity:[ "
operator|+
name|expandedLow
operator|+
literal|" TO "
operator|+
name|expandedHigh
operator|+
literal|" ]"
argument_list|,
name|meSkipOnMissingParams
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|testParams
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
comment|// at least one of the two parameters missing
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|meFailOnMissingParams
operator|.
name|expand
argument_list|(
name|testQuery
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMap
specifier|public
name|void
name|testMap
parameter_list|()
block|{
comment|// see SOLR-9740, the second fq param was being dropped.
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|request
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|request
operator|.
name|put
argument_list|(
literal|"fq"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"zero"
block|,
literal|"${one_ref}"
block|,
literal|"two"
block|,
literal|"${three_ref}"
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|put
argument_list|(
literal|"one_ref"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"one"
block|}
argument_list|)
expr_stmt|;
name|request
operator|.
name|put
argument_list|(
literal|"three_ref"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"three"
block|}
argument_list|)
expr_stmt|;
name|Map
name|expanded
init|=
name|MacroExpander
operator|.
name|expand
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"zero"
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|expanded
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
operator|)
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one"
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|expanded
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
operator|)
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|expanded
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
operator|)
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"three"
argument_list|,
operator|(
operator|(
name|String
index|[]
operator|)
name|expanded
operator|.
name|get
argument_list|(
literal|"fq"
argument_list|)
operator|)
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

