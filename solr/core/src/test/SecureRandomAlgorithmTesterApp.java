begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_class
DECL|class|SecureRandomAlgorithmTesterApp
specifier|public
class|class
name|SecureRandomAlgorithmTesterApp
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|NoSuchAlgorithmException
block|{
name|String
name|algorithm
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|method
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|int
name|amount
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|SecureRandom
name|secureRandom
decl_stmt|;
if|if
condition|(
name|algorithm
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|)
name|secureRandom
operator|=
operator|new
name|SecureRandom
argument_list|()
expr_stmt|;
else|else
name|secureRandom
operator|=
name|SecureRandom
operator|.
name|getInstance
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Algorithm:"
operator|+
name|secureRandom
operator|.
name|getAlgorithm
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|method
condition|)
block|{
case|case
literal|"seed"
case|:
name|secureRandom
operator|.
name|generateSeed
argument_list|(
name|amount
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"bytes"
case|:
name|secureRandom
operator|.
name|nextBytes
argument_list|(
operator|new
name|byte
index|[
name|amount
index|]
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"long"
case|:
name|secureRandom
operator|.
name|nextLong
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"int"
case|:
name|secureRandom
operator|.
name|nextInt
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not supported random function: "
operator|+
name|method
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SecureRandom function invoked"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

