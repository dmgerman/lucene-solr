begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|cos
operator|.
name|COSStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|PDDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|pdfbox
operator|.
name|pdmodel
operator|.
name|common
operator|.
name|PDStream
import|;
end_import

begin_comment
comment|/**  * A simple command line utility for reducing the size of the ref-guide PDF.  *<p>  * Currently this script focuses on using {@link COSName#FLATE_DECODE} to compress the (decoded) Objects   * in the source PDF, but other improvements may be possible in the future.  *</p>  *<p>  * This code is originally based on the<code>WriteDecodedDoc</code> example provided with<a href="https://pdfbox.apache.org/">Apache PDFBox</a>.  *</p>  *<p>  *<b>NOTE:</b> This class should<em>NOT</em> be considered a general purpose tool for reducing the size of   *<em>any</em> PDF.    * Decisions made in this code can and will be focused explicitly on serving the purpose of reducing the size of the   * Solr Reference Guide PDF, as originally produced by asciidoctor, and may not be generally useful for all PDFs   * "in the wild".  *</p>  */
end_comment

begin_class
DECL|class|ReducePDFSize
specifier|public
class|class
name|ReducePDFSize
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|2
operator|!=
name|args
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"arg0 must be input file, org1 must be output file"
argument_list|)
throw|;
block|}
name|String
name|in
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|out
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|PDDocument
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|PDDocument
operator|.
name|load
argument_list|(
operator|new
name|File
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setAllSecurityToBeRemoved
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|COSObject
name|cosObject
range|:
name|doc
operator|.
name|getDocument
argument_list|()
operator|.
name|getObjects
argument_list|()
control|)
block|{
name|COSBase
name|base
init|=
name|cosObject
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// if it's a stream: decode it, then re-write it using FLATE_DECODE
if|if
condition|(
name|base
operator|instanceof
name|COSStream
condition|)
block|{
name|COSStream
name|stream
init|=
operator|(
name|COSStream
operator|)
name|base
decl_stmt|;
name|byte
index|[]
name|bytes
decl_stmt|;
try|try
block|{
name|bytes
operator|=
operator|new
name|PDStream
argument_list|(
name|stream
argument_list|)
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
comment|// NOTE: original example code from PDFBox just logged& "continue;"d here, 'skipping' this stream.
comment|// If this type of failure ever happens, we can (perhaps) consider (re)ignoring this type of failure?
comment|//
comment|// IIUC then that will leave the original (non-decoded / non-flated) stream in place?
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"can't serialize byte[] from: "
operator|+
name|cosObject
operator|.
name|getObjectNumber
argument_list|()
operator|+
literal|" "
operator|+
name|cosObject
operator|.
name|getGenerationNumber
argument_list|()
operator|+
literal|" obj: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|stream
operator|.
name|removeItem
argument_list|(
name|COSName
operator|.
name|FILTER
argument_list|)
expr_stmt|;
name|OutputStream
name|streamOut
init|=
name|stream
operator|.
name|createOutputStream
argument_list|(
name|COSName
operator|.
name|FLATE_DECODE
argument_list|)
decl_stmt|;
name|streamOut
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|streamOut
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|doc
operator|.
name|getDocumentCatalog
argument_list|()
expr_stmt|;
name|doc
operator|.
name|save
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

