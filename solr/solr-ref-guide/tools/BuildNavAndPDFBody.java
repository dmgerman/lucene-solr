begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilenameFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|Asciidoctor
operator|.
name|Factory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|Asciidoctor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|asciidoctor
operator|.
name|ast
operator|.
name|DocumentHeader
import|;
end_import

begin_class
DECL|class|BuildNavAndPDFBody
specifier|public
class|class
name|BuildNavAndPDFBody
block|{
DECL|method|main
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Wrong # of args: "
operator|+
name|args
operator|.
name|length
argument_list|)
throw|;
block|}
specifier|final
name|File
name|adocDir
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mainPageShortname
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|adocDir
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"asciidoc directory does not exist: "
operator|+
name|adocDir
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// build up a quick mapping of every known page
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Building up tree of all known pages"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
name|allPages
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
argument_list|()
decl_stmt|;
name|Asciidoctor
name|doctor
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doctor
operator|=
name|Factory
operator|.
name|create
argument_list|()
expr_stmt|;
specifier|final
name|File
index|[]
name|adocFiles
init|=
name|adocDir
operator|.
name|listFiles
argument_list|(
name|ADOC_FILE_NAMES
argument_list|)
decl_stmt|;
for|for
control|(
name|File
name|file
range|:
name|adocFiles
control|)
block|{
name|Page
name|page
init|=
operator|new
name|Page
argument_list|(
name|file
argument_list|,
name|doctor
operator|.
name|readDocumentHeader
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|allPages
operator|.
name|containsKey
argument_list|(
name|page
operator|.
name|shortname
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"multiple pages with same shortname: "
operator|+
name|page
operator|.
name|file
operator|.
name|toString
argument_list|()
operator|+
literal|" and "
operator|+
name|allPages
operator|.
name|get
argument_list|(
name|page
operator|.
name|shortname
argument_list|)
argument_list|)
throw|;
block|}
name|allPages
operator|.
name|put
argument_list|(
name|page
operator|.
name|shortname
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
literal|null
operator|!=
name|doctor
condition|)
block|{
name|doctor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|doctor
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|// build up a hierarchical structure rooted at our mainPage
specifier|final
name|Page
name|mainPage
init|=
name|allPages
operator|.
name|get
argument_list|(
name|mainPageShortname
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|mainPage
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"no main-page found with shortname: "
operator|+
name|mainPageShortname
argument_list|)
throw|;
block|}
name|mainPage
operator|.
name|buildKidsRecursive
argument_list|(
name|allPages
argument_list|)
expr_stmt|;
comment|// TODO: use depthFirstWalk to prune allPages to validate that we don't have any loops or orphan pages
comment|// Build up the PDF file,
comment|// while doing this also build up some next/prev maps for use in building the scrollnav
name|File
name|pdfFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|adocDir
argument_list|,
literal|"_data"
argument_list|)
argument_list|,
literal|"pdf-main-body.adoc"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pdfFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|pdfFile
operator|.
name|toString
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
name|nextPage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
name|prevPage
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating "
operator|+
name|pdfFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|pdfFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
comment|// Note: not worrying about headers or anything like that ...
comment|// expecting this file to just be included by the main PDF file.
comment|// track how deep we are so we can adjust headers accordingly
comment|// start with a "negative" depth to treat all "top level" pages as same depth as main-page using Math.max
comment|// (see below)
specifier|final
name|AtomicInteger
name|depth
init|=
operator|new
name|AtomicInteger
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|// the previous page seen in our walk
name|AtomicReference
argument_list|<
name|Page
argument_list|>
name|previous
init|=
operator|new
name|AtomicReference
argument_list|<
name|Page
argument_list|>
argument_list|()
decl_stmt|;
name|mainPage
operator|.
name|depthFirstWalk
argument_list|(
operator|new
name|Page
operator|.
name|RecursiveAction
argument_list|()
block|{
specifier|public
name|boolean
name|act
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|previous
operator|.
name|get
argument_list|()
condition|)
block|{
comment|// add previous as our 'prev' page, and ourselves as the 'next' of previous
name|prevPage
operator|.
name|put
argument_list|(
name|page
operator|.
name|shortname
argument_list|,
name|previous
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|nextPage
operator|.
name|put
argument_list|(
name|previous
operator|.
name|get
argument_list|()
operator|.
name|shortname
argument_list|,
name|page
argument_list|)
expr_stmt|;
block|}
name|previous
operator|.
name|set
argument_list|(
name|page
argument_list|)
expr_stmt|;
comment|// HACK: where this file actually lives will determine what we need here...
name|w
operator|.
name|write
argument_list|(
literal|"include::../"
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
name|page
operator|.
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|write
argument_list|(
literal|"[leveloffset=+"
operator|+
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|depth
operator|.
name|intValue
argument_list|()
argument_list|)
operator|+
literal|"]\n\n"
argument_list|)
expr_stmt|;
name|depth
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"IOE recursively acting on "
operator|+
name|page
operator|.
name|shortname
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|postKids
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
name|depth
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Build up the scrollnav file for jekyll's footer
name|File
name|scrollnavFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|adocDir
argument_list|,
literal|"_data"
argument_list|)
argument_list|,
literal|"scrollnav.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|scrollnavFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|scrollnavFile
operator|.
name|toString
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating "
operator|+
name|scrollnavFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|scrollnavFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
name|JSONObject
name|scrollnav
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
for|for
control|(
name|Page
name|p
range|:
name|allPages
operator|.
name|values
argument_list|()
control|)
block|{
name|JSONObject
name|current
init|=
operator|new
name|JSONObject
argument_list|()
decl_stmt|;
name|Page
name|prev
init|=
name|prevPage
operator|.
name|get
argument_list|(
name|p
operator|.
name|shortname
argument_list|)
decl_stmt|;
name|Page
name|next
init|=
name|nextPage
operator|.
name|get
argument_list|(
name|p
operator|.
name|shortname
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|prev
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
literal|"prev"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|prev
operator|.
name|permalink
argument_list|)
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|prev
operator|.
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|next
condition|)
block|{
name|current
operator|.
name|put
argument_list|(
literal|"next"
argument_list|,
operator|new
name|JSONObject
argument_list|()
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|next
operator|.
name|permalink
argument_list|)
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|next
operator|.
name|title
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|scrollnav
operator|.
name|put
argument_list|(
name|p
operator|.
name|shortname
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
comment|// HACK: jekyll doesn't like escaped forward slashes in it's JSON?
name|w
operator|.
name|write
argument_list|(
name|scrollnav
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\\/"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Build up the sidebar file for jekyll
name|File
name|sidebarFile
init|=
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
name|adocDir
argument_list|,
literal|"_data"
argument_list|)
argument_list|,
literal|"sidebar.json"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sidebarFile
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|sidebarFile
operator|.
name|toString
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating "
operator|+
name|sidebarFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|sidebarFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
init|)
block|{
comment|// A stack for tracking what we're working on as we recurse
specifier|final
name|Stack
argument_list|<
name|JSONObject
argument_list|>
name|stack
init|=
operator|new
name|Stack
argument_list|<
name|JSONObject
argument_list|>
argument_list|()
decl_stmt|;
name|mainPage
operator|.
name|depthFirstWalk
argument_list|(
operator|new
name|Page
operator|.
name|RecursiveAction
argument_list|()
block|{
specifier|public
name|boolean
name|act
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
specifier|final
name|int
name|depth
init|=
name|stack
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
literal|4
operator|<
name|depth
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: depth=="
operator|+
name|depth
operator|+
literal|" for "
operator|+
name|page
operator|.
name|permalink
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"sidebar.html template can not support pages this deep"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|JSONObject
name|current
init|=
operator|new
name|JSONObject
argument_list|()
operator|.
name|put
argument_list|(
literal|"title"
argument_list|,
name|page
operator|.
name|title
argument_list|)
operator|.
name|put
argument_list|(
literal|"url"
argument_list|,
name|page
operator|.
name|permalink
argument_list|)
operator|.
name|put
argument_list|(
literal|"depth"
argument_list|,
name|depth
argument_list|)
operator|.
name|put
argument_list|(
literal|"kids"
argument_list|,
operator|new
name|JSONArray
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|depth
condition|)
block|{
name|JSONObject
name|parent
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
operator|(
operator|(
name|JSONArray
operator|)
name|parent
operator|.
name|get
argument_list|(
literal|"kids"
argument_list|)
operator|)
operator|.
name|put
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|postKids
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
specifier|final
name|JSONObject
name|current
init|=
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|stack
operator|.
name|size
argument_list|()
condition|)
block|{
assert|assert
name|page
operator|==
name|mainPage
assert|;
try|try
block|{
comment|// HACK: jekyll doesn't like escaped forward slashes in it's JSON?
name|w
operator|.
name|write
argument_list|(
name|current
operator|.
name|toString
argument_list|(
literal|2
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\\\/"
argument_list|,
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Simple struct for modeling the key metadata for dealing with page navigation */
DECL|class|Page
specifier|public
specifier|static
specifier|final
class|class
name|Page
block|{
DECL|field|file
specifier|public
specifier|final
name|File
name|file
decl_stmt|;
DECL|field|title
specifier|public
specifier|final
name|String
name|title
decl_stmt|;
DECL|field|shortname
specifier|public
specifier|final
name|String
name|shortname
decl_stmt|;
DECL|field|permalink
specifier|public
specifier|final
name|String
name|permalink
decl_stmt|;
DECL|field|kidShortnames
specifier|public
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|kidShortnames
decl_stmt|;
comment|/** NOTE: not populated on construction      * @see #buildKidsRecursive      */
DECL|field|kids
specifier|public
specifier|final
name|List
argument_list|<
name|Page
argument_list|>
name|kids
decl_stmt|;
DECL|field|mutableKids
specifier|private
specifier|final
name|List
argument_list|<
name|Page
argument_list|>
name|mutableKids
decl_stmt|;
DECL|method|Page
specifier|public
name|Page
parameter_list|(
name|File
name|file
parameter_list|,
name|DocumentHeader
name|header
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|title
operator|=
name|header
operator|.
name|getDocumentTitle
argument_list|()
operator|.
name|getMain
argument_list|()
expr_stmt|;
comment|// TODO: do error checking if attribute metadata we care about is missing
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
name|header
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|this
operator|.
name|shortname
operator|=
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"page-shortname"
argument_list|)
expr_stmt|;
name|this
operator|.
name|permalink
operator|=
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"page-permalink"
argument_list|)
expr_stmt|;
if|if
condition|(
name|attrs
operator|.
name|containsKey
argument_list|(
literal|"page-children"
argument_list|)
condition|)
block|{
name|String
name|kidsString
init|=
operator|(
operator|(
name|String
operator|)
name|attrs
operator|.
name|get
argument_list|(
literal|"page-children"
argument_list|)
operator|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|this
operator|.
name|kidShortnames
operator|=
name|Collections
operator|.
expr|<
name|String
operator|>
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|kidsString
operator|.
name|split
argument_list|(
literal|",\\s+"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|mutableKids
operator|=
operator|new
name|ArrayList
argument_list|<
name|Page
argument_list|>
argument_list|(
name|kidShortnames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|kidShortnames
operator|=
name|Collections
operator|.
expr|<
name|String
operator|>
name|emptyList
argument_list|()
expr_stmt|;
name|this
operator|.
name|mutableKids
operator|=
name|Collections
operator|.
expr|<
name|Page
operator|>
name|emptyList
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|kids
operator|=
name|Collections
operator|.
expr|<
name|Page
operator|>
name|unmodifiableList
argument_list|(
name|mutableKids
argument_list|)
expr_stmt|;
block|}
comment|/** Recursively populates {@link #kids} from {@link #kidShortnames} via the<code>allPages</code> Map */
DECL|method|buildKidsRecursive
specifier|public
name|void
name|buildKidsRecursive
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Page
argument_list|>
name|allPages
parameter_list|)
block|{
for|for
control|(
name|String
name|kidShortname
range|:
name|kidShortnames
control|)
block|{
name|Page
name|kid
init|=
name|allPages
operator|.
name|get
argument_list|(
name|kidShortname
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|kid
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unable to locate "
operator|+
name|kidShortname
operator|+
literal|"; child of "
operator|+
name|shortname
operator|+
literal|"("
operator|+
name|file
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
name|mutableKids
operator|.
name|add
argument_list|(
name|kid
argument_list|)
expr_stmt|;
name|kid
operator|.
name|buildKidsRecursive
argument_list|(
name|allPages
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**       * Do a depth first recursive action on this node and it's {@link #kids}       * @see RecursiveAction      */
DECL|method|depthFirstWalk
specifier|public
name|void
name|depthFirstWalk
parameter_list|(
name|RecursiveAction
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|.
name|act
argument_list|(
name|this
argument_list|)
condition|)
block|{
for|for
control|(
name|Page
name|kid
range|:
name|kids
control|)
block|{
name|kid
operator|.
name|depthFirstWalk
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
name|action
operator|.
name|postKids
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** @see #depthFirstWalk */
DECL|interface|RecursiveAction
specifier|public
specifier|static
interface|interface
name|RecursiveAction
block|{
comment|/** return true if kids should also be visited */
DECL|method|act
specifier|public
name|boolean
name|act
parameter_list|(
name|Page
name|page
parameter_list|)
function_decl|;
comment|/**         * called after recusion to each kid (if any) of specified node,         * never called if {@link #act} returned false         */
DECL|method|postKids
specifier|public
specifier|default
name|void
name|postKids
parameter_list|(
name|Page
name|page
parameter_list|)
block|{
comment|/* No-op */
block|}
empty_stmt|;
block|}
block|}
comment|/** Trivial filter for only "*.adoc" files */
DECL|field|ADOC_FILE_NAMES
specifier|public
specifier|static
specifier|final
name|FilenameFilter
name|ADOC_FILE_NAMES
init|=
operator|new
name|FilenameFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|endsWith
argument_list|(
literal|".adoc"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

