begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettyConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsNot
operator|.
name|not
import|;
end_import

begin_class
DECL|class|JettySolrRunnerTest
specifier|public
class|class
name|JettySolrRunnerTest
extends|extends
name|SolrTestCaseJ4
block|{
annotation|@
name|Test
DECL|method|testRestartPorts
specifier|public
name|void
name|testRestartPorts
parameter_list|()
throws|throws
name|Exception
block|{
name|Path
name|solrHome
init|=
name|createTempDir
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|solrHome
operator|.
name|resolve
argument_list|(
literal|"solr.xml"
argument_list|)
argument_list|,
name|MiniSolrCloudCluster
operator|.
name|DEFAULT_CLOUD_SOLR_XML
operator|.
name|getBytes
argument_list|(
name|Charset
operator|.
name|defaultCharset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|JettyConfig
name|config
init|=
name|JettyConfig
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|JettySolrRunner
name|jetty
init|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHome
operator|.
name|toString
argument_list|()
argument_list|,
name|config
argument_list|)
decl_stmt|;
try|try
block|{
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|URL
name|url
init|=
name|jetty
operator|.
name|getBaseUrl
argument_list|()
decl_stmt|;
name|int
name|usedPort
init|=
name|url
operator|.
name|getPort
argument_list|()
decl_stmt|;
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"After restart, jetty port should be the same"
argument_list|,
name|usedPort
argument_list|,
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|.
name|start
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"After restart, jetty port should be different"
argument_list|,
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|getPort
argument_list|()
argument_list|,
name|not
argument_list|(
name|usedPort
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|jetty
operator|.
name|isRunning
argument_list|()
condition|)
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

