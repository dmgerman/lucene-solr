begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractFullDistribZkTestBase
operator|.
name|StoppableThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|StoppableCommitThread
specifier|public
class|class
name|StoppableCommitThread
extends|extends
name|StoppableThread
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|cloudClient
specifier|private
specifier|final
name|SolrClient
name|cloudClient
decl_stmt|;
DECL|field|timeBetweenCommitsMs
specifier|private
specifier|final
name|long
name|timeBetweenCommitsMs
decl_stmt|;
DECL|field|softCommits
specifier|private
specifier|final
name|boolean
name|softCommits
decl_stmt|;
DECL|field|stop
specifier|private
specifier|volatile
name|boolean
name|stop
init|=
literal|false
decl_stmt|;
DECL|field|numCommits
specifier|private
specifier|final
name|AtomicInteger
name|numCommits
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|field|numFails
specifier|private
specifier|final
name|AtomicInteger
name|numFails
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
DECL|method|StoppableCommitThread
specifier|public
name|StoppableCommitThread
parameter_list|(
name|SolrClient
name|cloudClient
parameter_list|,
name|long
name|timeBetweenCommitsMs
parameter_list|,
name|boolean
name|softCommits
parameter_list|)
block|{
name|super
argument_list|(
literal|"StoppableCommitThread"
argument_list|)
expr_stmt|;
name|this
operator|.
name|cloudClient
operator|=
name|cloudClient
expr_stmt|;
name|this
operator|.
name|timeBetweenCommitsMs
operator|=
name|timeBetweenCommitsMs
expr_stmt|;
name|this
operator|.
name|softCommits
operator|=
name|softCommits
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|run
specifier|public
name|void
name|run
parameter_list|()
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"StoppableCommitThread started"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|stop
condition|)
block|{
try|try
block|{
name|cloudClient
operator|.
name|commit
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
name|softCommits
argument_list|)
expr_stmt|;
name|numCommits
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|numFails
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|timeBetweenCommitsMs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"StoppableCommitThread finished. Committed {} times. Failed {} times."
argument_list|,
name|numCommits
operator|.
name|get
argument_list|()
argument_list|,
name|numFails
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|safeStop
specifier|public
name|void
name|safeStop
parameter_list|()
block|{
name|this
operator|.
name|stop
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

