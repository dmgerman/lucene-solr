begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Documented
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|ElementType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Inherited
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Retention
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|RetentionPolicy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Target
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SuppressForbidden
import|;
end_import

begin_comment
comment|/**  * Annotation specifying the log level for a particular test case or method  *  * Log levels are set for different classes by passing a configuration string  * to the annotation, like this:  *<code>  *   {@literal @}LogLevel("org.apache.solr=DEBUG;org.apache.solr.core=INFO")  *</code>  */
end_comment

begin_annotation_defn
annotation|@
name|Documented
annotation|@
name|Inherited
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
block|{
name|ElementType
operator|.
name|TYPE
block|,
name|ElementType
operator|.
name|METHOD
block|}
argument_list|)
DECL|interface|LogLevel
specifier|public
annotation_defn|@interface
name|LogLevel
block|{
comment|/**    * A log-level definition string    */
DECL|method|value
specifier|public
name|String
name|value
parameter_list|()
function_decl|;
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"Specific to Log4J"
argument_list|)
DECL|class|Configurer
specifier|public
specifier|static
class|class
name|Configurer
block|{
DECL|method|parseFrom
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Level
argument_list|>
name|parseFrom
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Level
argument_list|>
name|testlevels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|levelSetting
range|:
name|input
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
control|)
block|{
name|String
index|[]
name|parts
init|=
name|levelSetting
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
name|testlevels
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
argument_list|,
name|Level
operator|.
name|toLevel
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|testlevels
return|;
block|}
DECL|method|levelAsString
specifier|private
specifier|static
name|String
name|levelAsString
parameter_list|(
name|Level
name|level
parameter_list|)
block|{
return|return
name|level
operator|==
literal|null
condition|?
literal|null
else|:
name|level
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|parseLevel
specifier|private
specifier|static
name|Level
name|parseLevel
parameter_list|(
name|String
name|level
parameter_list|)
block|{
return|return
name|level
operator|==
literal|null
condition|?
literal|null
else|:
name|Level
operator|.
name|toLevel
argument_list|(
name|level
argument_list|)
return|;
block|}
DECL|method|restoreLogLevels
specifier|public
specifier|static
name|void
name|restoreLogLevels
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|savedLogLevels
parameter_list|)
block|{
name|savedLogLevels
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|level
parameter_list|)
lambda|->
block|{
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|parseLevel
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|setLevels
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|setLevels
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|oldLevels
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|parseFrom
argument_list|(
name|value
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|name
parameter_list|,
name|level
parameter_list|)
lambda|->
block|{
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|oldLevels
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|levelAsString
argument_list|(
name|logger
operator|.
name|getLevel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|logger
operator|.
name|setLevel
argument_list|(
name|level
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|oldLevels
return|;
block|}
block|}
block|}
end_annotation_defn

end_unit

