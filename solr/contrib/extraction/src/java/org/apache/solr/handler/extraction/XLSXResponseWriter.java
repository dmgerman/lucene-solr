begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.extraction
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Font
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|IndexedColors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Sheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|streaming
operator|.
name|SXSSFWorkbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFCellStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|BasicResultContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|RawResponseWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|ResultContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|TextResponseWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|SchemaField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|schema
operator|.
name|StrField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|DocList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|ReturnFields
import|;
end_import

begin_class
DECL|class|XLSXResponseWriter
specifier|public
class|class
name|XLSXResponseWriter
extends|extends
name|RawResponseWriter
block|{
annotation|@
name|Override
DECL|method|write
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
block|{
comment|// throw away arraywriter just to satisfy super requirements; we're grabbing
comment|// all writes before they go to it anyway
name|XLSXWriter
name|w
init|=
operator|new
name|XLSXWriter
argument_list|(
operator|new
name|CharArrayWriter
argument_list|()
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|reqNamesMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|reqWidthsMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|paramNamesIter
init|=
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getParameterNamesIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|paramNamesIter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|nextParam
init|=
name|paramNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextParam
operator|.
name|startsWith
argument_list|(
literal|"colname."
argument_list|)
condition|)
block|{
name|String
name|field
init|=
name|nextParam
operator|.
name|substring
argument_list|(
literal|"colname."
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|reqNamesMap
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|nextParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|nextParam
operator|.
name|startsWith
argument_list|(
literal|"colwidth."
argument_list|)
condition|)
block|{
name|String
name|field
init|=
name|nextParam
operator|.
name|substring
argument_list|(
literal|"colwidth."
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|reqWidthsMap
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|req
operator|.
name|getParams
argument_list|()
operator|.
name|getInt
argument_list|(
name|nextParam
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|w
operator|.
name|writeResponse
argument_list|(
name|out
argument_list|,
name|reqNamesMap
argument_list|,
name|reqWidthsMap
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|(
name|SolrQueryRequest
name|request
parameter_list|,
name|SolrQueryResponse
name|response
parameter_list|)
block|{
return|return
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
return|;
block|}
block|}
end_class

begin_class
DECL|class|XLSXWriter
class|class
name|XLSXWriter
extends|extends
name|TextResponseWriter
block|{
DECL|field|req
name|SolrQueryRequest
name|req
decl_stmt|;
DECL|field|rsp
name|SolrQueryResponse
name|rsp
decl_stmt|;
DECL|class|SerialWriteWorkbook
class|class
name|SerialWriteWorkbook
block|{
DECL|field|swb
name|SXSSFWorkbook
name|swb
decl_stmt|;
DECL|field|sh
name|Sheet
name|sh
decl_stmt|;
DECL|field|headerStyle
name|XSSFCellStyle
name|headerStyle
decl_stmt|;
DECL|field|rowIndex
name|int
name|rowIndex
decl_stmt|;
DECL|field|curRow
name|Row
name|curRow
decl_stmt|;
DECL|field|cellIndex
name|int
name|cellIndex
decl_stmt|;
DECL|method|SerialWriteWorkbook
name|SerialWriteWorkbook
parameter_list|()
block|{
name|this
operator|.
name|swb
operator|=
operator|new
name|SXSSFWorkbook
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|this
operator|.
name|sh
operator|=
name|this
operator|.
name|swb
operator|.
name|createSheet
argument_list|()
expr_stmt|;
name|this
operator|.
name|rowIndex
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|headerStyle
operator|=
operator|(
name|XSSFCellStyle
operator|)
name|swb
operator|.
name|createCellStyle
argument_list|()
expr_stmt|;
name|this
operator|.
name|headerStyle
operator|.
name|setFillBackgroundColor
argument_list|(
name|IndexedColors
operator|.
name|BLACK
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|//solid fill
name|this
operator|.
name|headerStyle
operator|.
name|setFillPattern
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|Font
name|headerFont
init|=
name|swb
operator|.
name|createFont
argument_list|()
decl_stmt|;
name|headerFont
operator|.
name|setFontHeightInPoints
argument_list|(
operator|(
name|short
operator|)
literal|14
argument_list|)
expr_stmt|;
name|headerFont
operator|.
name|setBoldweight
argument_list|(
name|Font
operator|.
name|BOLDWEIGHT_BOLD
argument_list|)
expr_stmt|;
name|headerFont
operator|.
name|setColor
argument_list|(
name|IndexedColors
operator|.
name|WHITE
operator|.
name|getIndex
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|headerStyle
operator|.
name|setFont
argument_list|(
name|headerFont
argument_list|)
expr_stmt|;
block|}
DECL|method|addRow
name|void
name|addRow
parameter_list|()
block|{
name|curRow
operator|=
name|sh
operator|.
name|createRow
argument_list|(
name|rowIndex
operator|++
argument_list|)
expr_stmt|;
name|cellIndex
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|setHeaderRow
name|void
name|setHeaderRow
parameter_list|()
block|{
name|curRow
operator|.
name|setHeightInPoints
argument_list|(
operator|(
name|short
operator|)
literal|21
argument_list|)
expr_stmt|;
block|}
comment|//sets last created cell to have header style
DECL|method|setHeaderCell
name|void
name|setHeaderCell
parameter_list|()
block|{
name|curRow
operator|.
name|getCell
argument_list|(
name|cellIndex
operator|-
literal|1
argument_list|)
operator|.
name|setCellStyle
argument_list|(
name|this
operator|.
name|headerStyle
argument_list|)
expr_stmt|;
block|}
comment|//set the width of the most recently created column
DECL|method|setColWidth
name|void
name|setColWidth
parameter_list|(
name|int
name|charWidth
parameter_list|)
block|{
comment|//width in poi is units of 1/256th of a character width for some reason
name|this
operator|.
name|sh
operator|.
name|setColumnWidth
argument_list|(
name|cellIndex
operator|-
literal|1
argument_list|,
literal|256
operator|*
name|charWidth
argument_list|)
expr_stmt|;
block|}
DECL|method|writeCell
name|void
name|writeCell
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|Cell
name|cell
init|=
name|curRow
operator|.
name|createCell
argument_list|(
name|cellIndex
operator|++
argument_list|)
decl_stmt|;
name|cell
operator|.
name|setCellValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
DECL|method|flush
name|void
name|flush
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
try|try
block|{
name|swb
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|stacktrace
init|=
name|sw
operator|.
name|toString
argument_list|()
decl_stmt|;
block|}
finally|finally
block|{
name|swb
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
block|}
DECL|field|wb
specifier|private
name|SerialWriteWorkbook
name|wb
init|=
operator|new
name|SerialWriteWorkbook
argument_list|()
decl_stmt|;
DECL|class|XLField
specifier|static
class|class
name|XLField
block|{
DECL|field|name
name|String
name|name
decl_stmt|;
DECL|field|sf
name|SchemaField
name|sf
decl_stmt|;
block|}
DECL|field|xlFields
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|XLField
argument_list|>
name|xlFields
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|XLField
argument_list|>
argument_list|()
decl_stmt|;
DECL|method|XLSXWriter
specifier|public
name|XLSXWriter
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
block|{
name|super
argument_list|(
name|writer
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|this
operator|.
name|req
operator|=
name|req
expr_stmt|;
name|this
operator|.
name|rsp
operator|=
name|rsp
expr_stmt|;
block|}
DECL|method|writeResponse
specifier|public
name|void
name|writeResponse
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|colNamesMap
parameter_list|,
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|colWidthsMap
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|params
init|=
name|req
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|String
argument_list|>
name|fields
init|=
name|returnFields
operator|.
name|getRequestedFieldNames
argument_list|()
decl_stmt|;
name|Object
name|responseObj
init|=
name|rsp
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
decl_stmt|;
name|boolean
name|returnOnlyStored
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|returnFields
operator|.
name|hasPatternMatching
argument_list|()
condition|)
block|{
if|if
condition|(
name|responseObj
operator|instanceof
name|SolrDocumentList
condition|)
block|{
comment|// get the list of fields from the SolrDocumentList
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
operator|new
name|LinkedHashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|SolrDocument
name|sdoc
range|:
operator|(
name|SolrDocumentList
operator|)
name|responseObj
control|)
block|{
name|fields
operator|.
name|addAll
argument_list|(
name|sdoc
operator|.
name|getFieldNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// get the list of fields from the index
name|Iterable
argument_list|<
name|String
argument_list|>
name|all
init|=
name|req
operator|.
name|getSearcher
argument_list|()
operator|.
name|getFieldNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
block|{
name|fields
operator|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|all
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Iterables
operator|.
name|addAll
argument_list|(
name|fields
argument_list|,
name|all
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|returnFields
operator|.
name|wantsScore
argument_list|()
condition|)
block|{
name|fields
operator|.
name|add
argument_list|(
literal|"score"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|.
name|remove
argument_list|(
literal|"score"
argument_list|)
expr_stmt|;
block|}
name|returnOnlyStored
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|returnFields
operator|.
name|wantsField
argument_list|(
name|field
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|field
operator|.
name|equals
argument_list|(
literal|"score"
argument_list|)
condition|)
block|{
name|XLField
name|xlField
init|=
operator|new
name|XLField
argument_list|()
decl_stmt|;
name|xlField
operator|.
name|name
operator|=
literal|"score"
expr_stmt|;
name|xlFields
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|xlField
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|SchemaField
name|sf
init|=
name|schema
operator|.
name|getFieldOrNull
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
name|FieldType
name|ft
init|=
operator|new
name|StrField
argument_list|()
decl_stmt|;
name|sf
operator|=
operator|new
name|SchemaField
argument_list|(
name|field
argument_list|,
name|ft
argument_list|)
expr_stmt|;
block|}
comment|// Return only stored fields, unless an explicit field list is specified
if|if
condition|(
name|returnOnlyStored
operator|&&
name|sf
operator|!=
literal|null
operator|&&
operator|!
name|sf
operator|.
name|stored
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|XLField
name|xlField
init|=
operator|new
name|XLField
argument_list|()
decl_stmt|;
name|xlField
operator|.
name|name
operator|=
name|field
expr_stmt|;
name|xlField
operator|.
name|sf
operator|=
name|sf
expr_stmt|;
name|xlFields
operator|.
name|put
argument_list|(
name|field
argument_list|,
name|xlField
argument_list|)
expr_stmt|;
block|}
name|wb
operator|.
name|addRow
argument_list|()
expr_stmt|;
comment|//write header
for|for
control|(
name|XLField
name|xlField
range|:
name|xlFields
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|printName
init|=
name|xlField
operator|.
name|name
decl_stmt|;
name|int
name|colWidth
init|=
literal|14
decl_stmt|;
name|String
name|niceName
init|=
name|colNamesMap
operator|.
name|get
argument_list|(
name|xlField
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|niceName
operator|!=
literal|null
condition|)
block|{
name|printName
operator|=
name|niceName
expr_stmt|;
block|}
name|Integer
name|niceWidth
init|=
name|colWidthsMap
operator|.
name|get
argument_list|(
name|xlField
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|niceWidth
operator|!=
literal|null
condition|)
block|{
name|colWidth
operator|=
name|niceWidth
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
name|writeStr
argument_list|(
name|xlField
operator|.
name|name
argument_list|,
name|printName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|wb
operator|.
name|setColWidth
argument_list|(
name|colWidth
argument_list|)
expr_stmt|;
name|wb
operator|.
name|setHeaderCell
argument_list|()
expr_stmt|;
block|}
name|wb
operator|.
name|setHeaderRow
argument_list|()
expr_stmt|;
name|wb
operator|.
name|addRow
argument_list|()
expr_stmt|;
if|if
condition|(
name|responseObj
operator|instanceof
name|ResultContext
condition|)
block|{
name|writeDocuments
argument_list|(
literal|null
argument_list|,
operator|(
name|ResultContext
operator|)
name|responseObj
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseObj
operator|instanceof
name|DocList
condition|)
block|{
name|ResultContext
name|ctx
init|=
operator|new
name|BasicResultContext
argument_list|(
operator|(
name|DocList
operator|)
name|responseObj
argument_list|,
name|returnFields
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|writeDocuments
argument_list|(
literal|null
argument_list|,
name|ctx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|responseObj
operator|instanceof
name|SolrDocumentList
condition|)
block|{
name|writeSolrDocumentList
argument_list|(
literal|null
argument_list|,
operator|(
name|SolrDocumentList
operator|)
name|responseObj
argument_list|,
name|returnFields
argument_list|)
expr_stmt|;
block|}
name|wb
operator|.
name|flush
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|wb
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNamedList
specifier|public
name|void
name|writeNamedList
parameter_list|(
name|String
name|name
parameter_list|,
name|NamedList
name|val
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|writeStartDocumentList
specifier|public
name|void
name|writeStartDocumentList
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|start
parameter_list|,
name|int
name|size
parameter_list|,
name|long
name|numFound
parameter_list|,
name|Float
name|maxScore
parameter_list|)
throws|throws
name|IOException
block|{
comment|// nothing
block|}
annotation|@
name|Override
DECL|method|writeEndDocumentList
specifier|public
name|void
name|writeEndDocumentList
parameter_list|()
throws|throws
name|IOException
block|{
comment|// nothing
block|}
comment|//NOTE: a document cannot currently contain another document
DECL|field|tmpList
name|List
name|tmpList
decl_stmt|;
annotation|@
name|Override
DECL|method|writeSolrDocument
specifier|public
name|void
name|writeSolrDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|SolrDocument
name|doc
parameter_list|,
name|ReturnFields
name|returnFields
parameter_list|,
name|int
name|idx
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tmpList
operator|==
literal|null
condition|)
block|{
name|tmpList
operator|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tmpList
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|XLField
name|xlField
range|:
name|xlFields
operator|.
name|values
argument_list|()
control|)
block|{
name|Object
name|val
init|=
name|doc
operator|.
name|getFieldValue
argument_list|(
name|xlField
operator|.
name|name
argument_list|)
decl_stmt|;
name|int
name|nVals
init|=
name|val
operator|instanceof
name|Collection
condition|?
operator|(
operator|(
name|Collection
operator|)
name|val
operator|)
operator|.
name|size
argument_list|()
else|:
operator|(
name|val
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|nVals
operator|==
literal|0
condition|)
block|{
name|writeNull
argument_list|(
name|xlField
operator|.
name|name
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|(
name|xlField
operator|.
name|sf
operator|!=
literal|null
operator|&&
name|xlField
operator|.
name|sf
operator|.
name|multiValued
argument_list|()
operator|)
operator|||
name|nVals
operator|>
literal|1
condition|)
block|{
name|Collection
name|values
decl_stmt|;
comment|// normalize to a collection
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|values
operator|=
operator|(
name|Collection
operator|)
name|val
expr_stmt|;
block|}
else|else
block|{
name|tmpList
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|values
operator|=
name|tmpList
expr_stmt|;
block|}
name|writeArray
argument_list|(
name|xlField
operator|.
name|name
argument_list|,
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// normalize to first value
if|if
condition|(
name|val
operator|instanceof
name|Collection
condition|)
block|{
name|Collection
name|values
init|=
operator|(
name|Collection
operator|)
name|val
decl_stmt|;
name|val
operator|=
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|writeVal
argument_list|(
name|xlField
operator|.
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
name|wb
operator|.
name|addRow
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeStr
specifier|public
name|void
name|writeStr
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|,
name|boolean
name|needsEscaping
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|val
parameter_list|,
name|boolean
name|excludeOuter
parameter_list|,
name|boolean
name|isFirstVal
parameter_list|)
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|writeArray
specifier|public
name|void
name|writeArray
parameter_list|(
name|String
name|name
parameter_list|,
name|Iterator
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuffer
name|output
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|val
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|v
init|=
name|val
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|IndexableField
condition|)
block|{
name|IndexableField
name|f
init|=
operator|(
name|IndexableField
operator|)
name|v
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|Date
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Date
operator|)
name|val
operator|)
operator|.
name|toInstant
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
name|f
operator|.
name|stringValue
argument_list|()
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|output
operator|.
name|append
argument_list|(
name|v
operator|.
name|toString
argument_list|()
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|output
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|deleteCharAt
argument_list|(
name|output
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|output
operator|.
name|deleteCharAt
argument_list|(
name|output
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|writeStr
argument_list|(
name|name
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeNull
specifier|public
name|void
name|writeNull
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeInt
specifier|public
name|void
name|writeInt
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeLong
specifier|public
name|void
name|writeLong
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeBool
specifier|public
name|void
name|writeBool
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeFloat
specifier|public
name|void
name|writeFloat
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDouble
specifier|public
name|void
name|writeDouble
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|Date
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|writeDate
argument_list|(
name|name
argument_list|,
name|val
operator|.
name|toInstant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeDate
specifier|public
name|void
name|writeDate
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|wb
operator|.
name|writeCell
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

