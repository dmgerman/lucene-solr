begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.handler.extraction
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|handler
operator|.
name|extraction
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|ss
operator|.
name|usermodel
operator|.
name|Row
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFWorkbook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|poi
operator|.
name|xssf
operator|.
name|usermodel
operator|.
name|XSSFSheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrDocumentList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|QueryResponseWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|RawResponseWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrReturnFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestXLSXResponseWriter
specifier|public
class|class
name|TestXLSXResponseWriter
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|writerXlsx
specifier|private
specifier|static
name|XLSXResponseWriter
name|writerXlsx
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|beforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|initCore
argument_list|(
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|,
name|getFile
argument_list|(
literal|"extraction/solr"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|createIndex
argument_list|()
expr_stmt|;
comment|//find a reference to the default response writer so we can redirect its output later
name|SolrCore
name|testCore
init|=
name|h
operator|.
name|getCore
argument_list|()
decl_stmt|;
name|QueryResponseWriter
name|writer
init|=
name|testCore
operator|.
name|getQueryResponseWriter
argument_list|(
literal|"xlsx"
argument_list|)
decl_stmt|;
if|if
condition|(
name|writer
operator|instanceof
name|XLSXResponseWriter
condition|)
block|{
name|writerXlsx
operator|=
operator|(
name|XLSXResponseWriter
operator|)
name|testCore
operator|.
name|getQueryResponseWriter
argument_list|(
literal|"xlsx"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"XLSXResponseWriter not registered with solr core"
argument_list|)
throw|;
block|}
block|}
DECL|method|createIndex
specifier|public
specifier|static
name|void
name|createIndex
parameter_list|()
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"foo_i"
argument_list|,
literal|"-1"
argument_list|,
literal|"foo_s"
argument_list|,
literal|"hi"
argument_list|,
literal|"foo_l"
argument_list|,
literal|"12345678987654321"
argument_list|,
literal|"foo_b"
argument_list|,
literal|"false"
argument_list|,
literal|"foo_f"
argument_list|,
literal|"1.414"
argument_list|,
literal|"foo_d"
argument_list|,
literal|"-1.0E300"
argument_list|,
literal|"foo_dt1"
argument_list|,
literal|"2000-01-02T03:04:05Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"v_ss"
argument_list|,
literal|"hi"
argument_list|,
literal|"v_ss"
argument_list|,
literal|"there"
argument_list|,
literal|"v2_ss"
argument_list|,
literal|"nice"
argument_list|,
literal|"v2_ss"
argument_list|,
literal|"output"
argument_list|,
literal|"shouldbeunstored"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"shouldbeunstored"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"foo_s1"
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|cleanupWriter
specifier|public
specifier|static
name|void
name|cleanupWriter
parameter_list|()
throws|throws
name|Exception
block|{
name|writerXlsx
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStructuredDataViaBaseWriters
specifier|public
name|void
name|testStructuredDataViaBaseWriters
parameter_list|()
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|SolrQueryResponse
name|rsp
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
comment|// Don't send a ContentStream back, this will fall back to the configured base writer.
comment|// But abuse the CONTENT key to ensure writer is also checking type
name|rsp
operator|.
name|add
argument_list|(
name|RawResponseWriter
operator|.
name|CONTENT
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|add
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|r
init|=
name|req
argument_list|()
decl_stmt|;
comment|// check Content-Type
name|assertEquals
argument_list|(
literal|"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
argument_list|,
name|writerXlsx
operator|.
name|getContentType
argument_list|(
name|r
argument_list|,
name|rsp
argument_list|)
argument_list|)
expr_stmt|;
comment|// test our basic types,and that fields come back in the requested order
name|XSSFSheet
name|resultSheet
init|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1\n1,hi,-1,12345678987654321,F,1.414,-1.0E300,2000-01-02T03:04:05Z\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1^0"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score,foo_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test retrieving score
name|assertEquals
argument_list|(
literal|"id,score,foo_s\n1,0.0,hi\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1^0"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"colname.id"
argument_list|,
literal|"I.D."
argument_list|,
literal|"colwidth.id"
argument_list|,
literal|"10"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,score,foo_s"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test override colname/width
name|assertEquals
argument_list|(
literal|"I.D.,score,foo_s\n1,0.0,hi\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// test colwidth (value returned is in 256ths of a character as per excel standard)
name|assertEquals
argument_list|(
literal|10
operator|*
literal|256
argument_list|,
name|resultSheet
operator|.
name|getColumnWidth
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:2"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,v_ss"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test multivalued
name|assertEquals
argument_list|(
literal|"id,v_ss\n2,hi; there\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// test retrieving fields from index
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"wt"
argument_list|,
literal|"xslx"
argument_list|,
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|result
init|=
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|field
range|:
literal|"id,foo_s,foo_i,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss,score"
operator|.
name|split
argument_list|(
literal|","
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|result
operator|.
name|indexOf
argument_list|(
name|field
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// test null values
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:2"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,foo_s,v_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id,foo_s,v_ss\n2,,hi; there\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// now test SolrDocumentList
name|SolrDocument
name|d
init|=
operator|new
name|SolrDocument
argument_list|()
decl_stmt|;
name|SolrDocument
name|d1
init|=
name|d
decl_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_i"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_s"
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_l"
argument_list|,
literal|"12345678987654321L"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_b"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_f"
argument_list|,
literal|1.414f
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_d"
argument_list|,
operator|-
literal|1.0E300
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"foo_dt1"
argument_list|,
operator|new
name|Date
argument_list|(
name|Instant
operator|.
name|parse
argument_list|(
literal|"2000-01-02T03:04:05Z"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"score"
argument_list|,
literal|"2.718"
argument_list|)
expr_stmt|;
name|d
operator|=
operator|new
name|SolrDocument
argument_list|()
expr_stmt|;
name|SolrDocument
name|d2
init|=
name|d
decl_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"v_ss"
argument_list|,
literal|"hi"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"v_ss"
argument_list|,
literal|"there"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"v2_ss"
argument_list|,
literal|"nice"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"v2_ss"
argument_list|,
literal|"output"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"score"
argument_list|,
literal|"89.83"
argument_list|)
expr_stmt|;
name|d
operator|.
name|addField
argument_list|(
literal|"shouldbeunstored"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|SolrDocumentList
name|sdl
init|=
operator|new
name|SolrDocumentList
argument_list|()
decl_stmt|;
name|sdl
operator|.
name|add
argument_list|(
name|d1
argument_list|)
expr_stmt|;
name|sdl
operator|.
name|add
argument_list|(
name|d2
argument_list|)
expr_stmt|;
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
decl_stmt|;
name|rsp
operator|=
operator|new
name|SolrQueryResponse
argument_list|()
expr_stmt|;
name|rsp
operator|.
name|addResponse
argument_list|(
name|sdl
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"id,foo_s"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id,foo_s\n1,hi\n2,\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// try scores
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"id,score,foo_s"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id,score,foo_s\n1,2.718,hi\n2,89.83,\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// get field values from docs... should be ordered and not include score unless requested
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"*"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1,v_ss,v2_ss\n"
operator|+
literal|"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z,,\n"
operator|+
literal|"2,,,,,,,,hi; there,nice; output\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// get field values and scores - just check that the scores are there... we don't guarantee where
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"*,score"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|String
name|s
init|=
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|indexOf
argument_list|(
literal|"score"
argument_list|)
operator|>=
literal|0
operator|&&
name|s
operator|.
name|indexOf
argument_list|(
literal|"2.718"
argument_list|)
operator|>
literal|0
operator|&&
name|s
operator|.
name|indexOf
argument_list|(
literal|"89.83"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Test field globs
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"id,foo*"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id,foo_i,foo_s,foo_l,foo_b,foo_f,foo_d,foo_dt1\n"
operator|+
literal|"1,-1,hi,12345678987654321L,false,1.414,-1.0E300,2000-01-02T03:04:05Z\n"
operator|+
literal|"2,,,,,,,\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"id,*_d*"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id,foo_d,foo_dt1\n"
operator|+
literal|"1,-1.0E300,2000-01-02T03:04:05Z\n"
operator|+
literal|"2,,\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test function queries
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"sum(1,1),id,exists(foo_s1),div(9,1),foo_f"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"sum(1,1),id,exists(foo_s1),div(9,1),foo_f\n"
operator|+
literal|",1,,,1.414\n"
operator|+
literal|",2,,,\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test transformers
name|rsp
operator|.
name|setReturnFields
argument_list|(
operator|new
name|SolrReturnFields
argument_list|(
literal|"mydocid:[docid],[explain]"
argument_list|,
name|req
argument_list|)
argument_list|)
expr_stmt|;
name|resultSheet
operator|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mydocid,[explain]\n"
operator|+
literal|",\n"
operator|+
literal|",\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testPseudoFields
specifier|public
name|void
name|testPseudoFields
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Use Pseudo Field
name|SolrQueryRequest
name|req
init|=
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"XXX:id,foo_s"
argument_list|)
decl_stmt|;
name|XSSFSheet
name|resultSheet
init|=
name|getWSResultForQuery
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"XXX,foo_s\n1,hi\n"
argument_list|,
name|getStringFromSheet
argument_list|(
name|resultSheet
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|txt
init|=
name|getStringFromSheet
argument_list|(
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"id:1"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"XXX:id,YYY:[docid],FOO:foo_s"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|lines
init|=
name|txt
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lines
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XXX,YYY,FOO"
argument_list|,
name|lines
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,0,hi"
argument_list|,
name|lines
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|//assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)
name|String
name|funcText
init|=
name|getStringFromSheet
argument_list|(
name|getWSResultForQuery
argument_list|(
name|req
argument_list|(
literal|"q"
argument_list|,
literal|"*"
argument_list|,
literal|"wt"
argument_list|,
literal|"xlsx"
argument_list|,
literal|"fl"
argument_list|,
literal|"XXX:id,YYY:exists(foo_s1)"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|String
index|[]
name|funcLines
init|=
name|funcText
operator|.
name|split
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|funcLines
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XXX,YYY"
argument_list|,
name|funcLines
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1,false"
argument_list|,
name|funcLines
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3,false"
argument_list|,
name|funcLines
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
comment|// returns first worksheet as XLSXResponseWriter only returns one sheet
DECL|method|getWSResultForQuery
specifier|private
name|XSSFSheet
name|getWSResultForQuery
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|SolrQueryResponse
name|rsp
init|=
name|h
operator|.
name|queryAndResponse
argument_list|(
literal|"standard"
argument_list|,
name|req
argument_list|)
decl_stmt|;
return|return
name|getWSResultForQuery
argument_list|(
name|req
argument_list|,
name|rsp
argument_list|)
return|;
block|}
DECL|method|getWSResultForQuery
specifier|private
name|XSSFSheet
name|getWSResultForQuery
parameter_list|(
name|SolrQueryRequest
name|req
parameter_list|,
name|SolrQueryResponse
name|rsp
parameter_list|)
throws|throws
name|IOException
throws|,
name|Exception
block|{
name|ByteArrayOutputStream
name|xmlBout
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|writerXlsx
operator|.
name|write
argument_list|(
name|xmlBout
argument_list|,
name|req
argument_list|,
name|rsp
argument_list|)
expr_stmt|;
name|XSSFWorkbook
name|output
init|=
operator|new
name|XSSFWorkbook
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|xmlBout
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|XSSFSheet
name|sheet
init|=
name|output
operator|.
name|getSheetAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|req
operator|.
name|close
argument_list|()
expr_stmt|;
name|output
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|sheet
return|;
block|}
DECL|method|getStringFromSheet
specifier|private
name|String
name|getStringFromSheet
parameter_list|(
name|XSSFSheet
name|sheet
parameter_list|)
block|{
name|StringBuilder
name|output
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|sheet
control|)
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|row
control|)
block|{
name|output
operator|.
name|append
argument_list|(
name|cell
operator|.
name|getStringCellValue
argument_list|()
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|setLength
argument_list|(
name|output
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|output
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|output
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

