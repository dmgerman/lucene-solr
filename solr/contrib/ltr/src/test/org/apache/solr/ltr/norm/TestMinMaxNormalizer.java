begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.norm
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMinMaxNormalizer
specifier|public
class|class
name|TestMinMaxNormalizer
block|{
DECL|field|solrResourceLoader
specifier|private
specifier|final
name|SolrResourceLoader
name|solrResourceLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|()
decl_stmt|;
DECL|method|implTestMinMax
specifier|private
name|Normalizer
name|implTestMinMax
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|float
name|expectedMin
parameter_list|,
name|float
name|expectedMax
parameter_list|)
block|{
specifier|final
name|Normalizer
name|n
init|=
name|Normalizer
operator|.
name|getInstance
argument_list|(
name|solrResourceLoader
argument_list|,
name|MinMaxNormalizer
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|n
operator|instanceof
name|MinMaxNormalizer
argument_list|)
expr_stmt|;
specifier|final
name|MinMaxNormalizer
name|mmn
init|=
operator|(
name|MinMaxNormalizer
operator|)
name|n
decl_stmt|;
name|assertEquals
argument_list|(
name|mmn
operator|.
name|getMin
argument_list|()
argument_list|,
name|expectedMin
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|mmn
operator|.
name|getMax
argument_list|()
argument_list|,
name|expectedMax
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{min=\""
operator|+
name|expectedMin
operator|+
literal|"\", max=\""
operator|+
name|expectedMax
operator|+
literal|"\"}"
argument_list|,
name|mmn
operator|.
name|paramsToMap
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Test
DECL|method|testInvalidMinMaxNoParams
specifier|public
name|void
name|testInvalidMinMaxNoParams
parameter_list|()
block|{
name|implTestMinMax
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidMinMaxMissingMax
specifier|public
name|void
name|testInvalidMinMaxMissingMax
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|implTestMinMax
argument_list|(
name|params
argument_list|,
literal|0.0f
argument_list|,
name|Float
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidMinMaxMissingMin
specifier|public
name|void
name|testInvalidMinMaxMissingMin
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|implTestMinMax
argument_list|(
name|params
argument_list|,
name|Float
operator|.
name|NEGATIVE_INFINITY
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMinMaxNormalizerMinLargerThanMax
specifier|public
name|void
name|testMinMaxNormalizerMinLargerThanMax
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
literal|"10.0f"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
literal|"0.0f"
argument_list|)
expr_stmt|;
name|implTestMinMax
argument_list|(
name|params
argument_list|,
literal|10.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMinMaxNormalizerMinEqualToMax
specifier|public
name|void
name|testMinMaxNormalizerMinEqualToMax
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
literal|"10.0f"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
literal|"10.0f"
argument_list|)
expr_stmt|;
specifier|final
name|NormalizerException
name|expectedException
init|=
operator|new
name|NormalizerException
argument_list|(
literal|"MinMax Normalizer delta must not be zero "
operator|+
literal|"| min = 10.0,max = 10.0,delta = 0.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|implTestMinMax
argument_list|(
name|params
argument_list|,
literal|10.0f
argument_list|,
literal|10.0f
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testMinMaxNormalizerMinEqualToMax failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NormalizerException
name|actualException
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|actualException
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNormalizer
specifier|public
name|void
name|testNormalizer
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
literal|"5.0f"
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
literal|"10.0f"
argument_list|)
expr_stmt|;
specifier|final
name|Normalizer
name|n
init|=
name|implTestMinMax
argument_list|(
name|params
argument_list|,
literal|5.0f
argument_list|,
literal|10.0f
argument_list|)
decl_stmt|;
name|float
name|value
init|=
literal|8
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|value
operator|-
literal|5f
operator|)
operator|/
operator|(
literal|10f
operator|-
literal|5f
operator|)
argument_list|,
name|n
operator|.
name|normalize
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|value
operator|=
literal|100
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|value
operator|-
literal|5f
operator|)
operator|/
operator|(
literal|10f
operator|-
literal|5f
operator|)
argument_list|,
name|n
operator|.
name|normalize
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|value
operator|=
literal|150
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|value
operator|-
literal|5f
operator|)
operator|/
operator|(
literal|10f
operator|-
literal|5f
operator|)
argument_list|,
name|n
operator|.
name|normalize
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|value
operator|=
operator|-
literal|1
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|value
operator|-
literal|5f
operator|)
operator|/
operator|(
literal|10f
operator|-
literal|5f
operator|)
argument_list|,
name|n
operator|.
name|normalize
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|value
operator|=
literal|5
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|value
operator|-
literal|5f
operator|)
operator|/
operator|(
literal|10f
operator|-
literal|5f
operator|)
argument_list|,
name|n
operator|.
name|normalize
argument_list|(
name|value
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

