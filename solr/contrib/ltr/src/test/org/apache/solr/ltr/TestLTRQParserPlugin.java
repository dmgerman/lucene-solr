begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLTRQParserPlugin
specifier|public
class|class
name|TestLTRQParserPlugin
extends|extends
name|TestRerankBase
block|{
annotation|@
name|BeforeClass
DECL|method|before
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|"solrconfig-ltr.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|// store = getModelStore();
name|bulkIndex
argument_list|()
expr_stmt|;
name|loadFeatures
argument_list|(
literal|"features-linear.json"
argument_list|)
expr_stmt|;
name|loadModels
argument_list|(
literal|"linear-model.json"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|aftertest
argument_list|()
expr_stmt|;
comment|// store.clear();
block|}
annotation|@
name|Test
DECL|method|ltrModelIdMissingTest
specifier|public
name|void
name|ltrModelIdMissingTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|solrQuery
init|=
literal|"_query_:{!edismax qf='title' mm=100% v='bloomberg' tie=0.1}"
decl_stmt|;
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
name|solrQuery
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*, score"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fv"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=100}"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|res
init|=
name|restTestHarness
operator|.
name|query
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|res
operator|.
name|contains
argument_list|(
literal|"Must provide model in the request"
argument_list|)
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|ltrModelIdDoesNotExistTest
specifier|public
name|void
name|ltrModelIdDoesNotExistTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|solrQuery
init|=
literal|"_query_:{!edismax qf='title' mm=100% v='bloomberg' tie=0.1}"
decl_stmt|;
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
name|solrQuery
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*, score"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fv"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr model=-1 reRankDocs=100}"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|res
init|=
name|restTestHarness
operator|.
name|query
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|res
operator|.
name|contains
argument_list|(
literal|"cannot find model"
argument_list|)
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|ltrMoreResultsThanReRankedTest
specifier|public
name|void
name|ltrMoreResultsThanReRankedTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|solrQuery
init|=
literal|"_query_:{!edismax qf='title' mm=100% v='bloomberg' tie=0.1}"
decl_stmt|;
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
name|solrQuery
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*, score"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fv"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|nonRerankedScore
init|=
literal|"0.09271725"
decl_stmt|;
comment|// Normal solr order
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='9'"
argument_list|,
literal|"/response/docs/[1]/id=='8'"
argument_list|,
literal|"/response/docs/[2]/id=='7'"
argument_list|,
literal|"/response/docs/[3]/id=='6'"
argument_list|,
literal|"/response/docs/[3]/score=="
operator|+
name|nonRerankedScore
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr model=6029760550880411648 reRankDocs=3}"
argument_list|)
expr_stmt|;
comment|// Different order for top 3 reranked, but last one is the same top nonreranked doc
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='7'"
argument_list|,
literal|"/response/docs/[1]/id=='8'"
argument_list|,
literal|"/response/docs/[2]/id=='9'"
argument_list|,
literal|"/response/docs/[3]/id=='6'"
argument_list|,
literal|"/response/docs/[3]/score=="
operator|+
name|nonRerankedScore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|ltrNoResultsTest
specifier|public
name|void
name|ltrNoResultsTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"title:bloomberg23"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,[fv]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"debugQuery"
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=3 model=6029760550880411648}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/numFound/==0"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

