begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettyConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|CollectionAdminResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|MiniSolrCloudCluster
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrInputDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|SolrFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|ValueFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestLTROnSolrCloud
specifier|public
class|class
name|TestLTROnSolrCloud
extends|extends
name|TestRerankBase
block|{
DECL|field|solrCluster
specifier|private
name|MiniSolrCloudCluster
name|solrCluster
decl_stmt|;
DECL|field|solrconfig
name|String
name|solrconfig
init|=
literal|"solrconfig-ltr.xml"
decl_stmt|;
DECL|field|schema
name|String
name|schema
init|=
literal|"schema.xml"
decl_stmt|;
DECL|field|extraServlets
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|extraServlets
operator|=
name|setupTestInit
argument_list|(
name|solrconfig
argument_list|,
name|schema
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|int
name|numberOfShards
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|numberOfReplicas
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|maxShardsPerNode
init|=
name|numberOfShards
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|4
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|numberOfNodes
init|=
name|numberOfShards
operator|*
name|maxShardsPerNode
decl_stmt|;
name|setupSolrCluster
argument_list|(
name|numberOfShards
argument_list|,
name|numberOfReplicas
argument_list|,
name|numberOfNodes
argument_list|,
name|maxShardsPerNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|restTestHarness
operator|.
name|close
argument_list|()
expr_stmt|;
name|restTestHarness
operator|=
literal|null
expr_stmt|;
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|=
literal|null
expr_stmt|;
name|solrCluster
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleQuery
specifier|public
name|void
name|testSimpleQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|// will randomly pick a configuration with [1..5] shards and [1..3] replicas
comment|// Test regular query, it will sort the documents by inverse
comment|// popularity (the less popular, docid == 1, will be in the first
comment|// position
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|(
literal|"{!func}sub(8,field(popularity))"
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRequestHandler
argument_list|(
literal|"/query"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setFields
argument_list|(
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
operator|.
name|setParam
argument_list|(
literal|"rows"
argument_list|,
literal|"8"
argument_list|)
expr_stmt|;
name|QueryResponse
name|queryResponse
init|=
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test re-rank and feature vectors returned
name|query
operator|.
name|setFields
argument_list|(
literal|"*,score,features:[fv]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr model=powpularityS-model reRankDocs=8}"
argument_list|)
expr_stmt|;
name|queryResponse
operator|=
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|query
argument_list|(
name|COLLECTION
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|getNumFound
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"8"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"powpularityS:64.0;c3:2.0"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"features"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"7"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"powpularityS:49.0;c3:2.0"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"features"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"6"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"powpularityS:36.0;c3:2.0"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"features"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"5"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"powpularityS:25.0;c3:2.0"
argument_list|,
name|queryResponse
operator|.
name|getResults
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"features"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|setupSolrCluster
specifier|private
name|void
name|setupSolrCluster
parameter_list|(
name|int
name|numShards
parameter_list|,
name|int
name|numReplicas
parameter_list|,
name|int
name|numServers
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|)
throws|throws
name|Exception
block|{
name|JettyConfig
name|jc
init|=
name|buildJettyConfig
argument_list|(
literal|"/solr"
argument_list|)
decl_stmt|;
name|jc
operator|=
name|JettyConfig
operator|.
name|builder
argument_list|(
name|jc
argument_list|)
operator|.
name|withServlets
argument_list|(
name|extraServlets
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|solrCluster
operator|=
operator|new
name|MiniSolrCloudCluster
argument_list|(
name|numServers
argument_list|,
name|tmpSolrHome
operator|.
name|toPath
argument_list|()
argument_list|,
name|jc
argument_list|)
expr_stmt|;
name|File
name|configDir
init|=
name|tmpSolrHome
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"collection1/conf"
argument_list|)
operator|.
name|toFile
argument_list|()
decl_stmt|;
name|solrCluster
operator|.
name|uploadConfigSet
argument_list|(
name|configDir
operator|.
name|toPath
argument_list|()
argument_list|,
literal|"conf1"
argument_list|)
expr_stmt|;
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|setDefaultCollection
argument_list|(
name|COLLECTION
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|COLLECTION
argument_list|,
literal|"conf1"
argument_list|,
name|numShards
argument_list|,
name|numReplicas
argument_list|,
name|maxShardsPerNode
argument_list|)
expr_stmt|;
name|indexDocuments
argument_list|(
name|COLLECTION
argument_list|)
expr_stmt|;
name|createJettyAndHarness
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solrconfig
argument_list|,
name|schema
argument_list|,
literal|"/solr"
argument_list|,
literal|true
argument_list|,
name|extraServlets
argument_list|)
expr_stmt|;
name|loadModelsAndFeatures
argument_list|()
expr_stmt|;
block|}
DECL|method|createCollection
specifier|private
name|void
name|createCollection
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|config
parameter_list|,
name|int
name|numShards
parameter_list|,
name|int
name|numReplicas
parameter_list|,
name|int
name|maxShardsPerNode
parameter_list|)
throws|throws
name|Exception
block|{
name|CollectionAdminResponse
name|response
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|Create
name|create
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|name
argument_list|,
name|config
argument_list|,
name|numShards
argument_list|,
name|numReplicas
argument_list|)
decl_stmt|;
name|create
operator|.
name|setMaxShardsPerNode
argument_list|(
name|maxShardsPerNode
argument_list|)
expr_stmt|;
name|response
operator|=
name|create
operator|.
name|process
argument_list|(
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|response
operator|.
name|getStatus
argument_list|()
operator|!=
literal|0
operator|||
name|response
operator|.
name|getErrorMessages
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Could not create collection. Response"
operator|+
name|response
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ZkStateReader
name|zkStateReader
init|=
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|name
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDocument
name|void
name|indexDocument
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|id
parameter_list|,
name|String
name|title
parameter_list|,
name|String
name|description
parameter_list|,
name|int
name|popularity
parameter_list|)
throws|throws
name|Exception
block|{
name|SolrInputDocument
name|doc
init|=
operator|new
name|SolrInputDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"title"
argument_list|,
name|title
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"description"
argument_list|,
name|description
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setField
argument_list|(
literal|"popularity"
argument_list|,
name|popularity
argument_list|)
expr_stmt|;
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|add
argument_list|(
name|collection
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|indexDocuments
specifier|private
name|void
name|indexDocuments
parameter_list|(
specifier|final
name|String
name|collection
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|int
name|collectionSize
init|=
literal|8
decl_stmt|;
for|for
control|(
name|int
name|docId
init|=
literal|1
init|;
name|docId
operator|<=
name|collectionSize
condition|;
name|docId
operator|++
control|)
block|{
specifier|final
name|int
name|popularity
init|=
name|docId
decl_stmt|;
name|indexDocument
argument_list|(
name|collection
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|docId
argument_list|)
argument_list|,
literal|"a1"
argument_list|,
literal|"bloom"
argument_list|,
name|popularity
argument_list|)
expr_stmt|;
block|}
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
DECL|method|loadModelsAndFeatures
specifier|private
name|void
name|loadModelsAndFeatures
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|featureStore
init|=
literal|"test"
decl_stmt|;
specifier|final
name|String
index|[]
name|featureNames
init|=
operator|new
name|String
index|[]
block|{
literal|"powpularityS"
block|,
literal|"c3"
block|}
decl_stmt|;
specifier|final
name|String
name|jsonModelParams
init|=
literal|"{\"weights\":{\"powpularityS\":1.0,\"c3\":1.0}}"
decl_stmt|;
name|loadFeature
argument_list|(
name|featureNames
index|[
literal|0
index|]
argument_list|,
name|SolrFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|featureStore
argument_list|,
literal|"{\"q\":\"{!func}pow(popularity,2)\"}"
argument_list|)
expr_stmt|;
name|loadFeature
argument_list|(
name|featureNames
index|[
literal|1
index|]
argument_list|,
name|ValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|featureStore
argument_list|,
literal|"{\"value\":2}"
argument_list|)
expr_stmt|;
name|loadModel
argument_list|(
literal|"powpularityS-model"
argument_list|,
name|LinearModel
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|featureNames
argument_list|,
name|featureStore
argument_list|,
name|jsonModelParams
argument_list|)
expr_stmt|;
name|reloadCollection
argument_list|(
name|COLLECTION
argument_list|)
expr_stmt|;
block|}
DECL|method|reloadCollection
specifier|private
name|void
name|reloadCollection
parameter_list|(
name|String
name|collection
parameter_list|)
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|Reload
name|reloadRequest
init|=
name|CollectionAdminRequest
operator|.
name|reloadCollection
argument_list|(
name|collection
argument_list|)
decl_stmt|;
name|CollectionAdminResponse
name|response
init|=
name|reloadRequest
operator|.
name|process
argument_list|(
name|solrCluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|response
operator|.
name|getStatus
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|response
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpSolrHome
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

