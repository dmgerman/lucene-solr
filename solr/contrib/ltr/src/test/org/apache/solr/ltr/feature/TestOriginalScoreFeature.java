begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|FeatureLoggerTestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|TestRerankBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_class
DECL|class|TestOriginalScoreFeature
specifier|public
class|class
name|TestOriginalScoreFeature
extends|extends
name|TestRerankBase
block|{
annotation|@
name|BeforeClass
DECL|method|before
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title"
argument_list|,
literal|"w1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"title"
argument_list|,
literal|"w2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"title"
argument_list|,
literal|"w3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"title"
argument_list|,
literal|"w4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"title"
argument_list|,
literal|"w5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"title"
argument_list|,
literal|"w1 w2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"title"
argument_list|,
literal|"w1 w2 w3 w4 w5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"title"
argument_list|,
literal|"w1 w1 w1 w2 w2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|aftertest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOriginalScore
specifier|public
name|void
name|testOriginalScore
parameter_list|()
throws|throws
name|Exception
block|{
name|loadFeature
argument_list|(
literal|"score"
argument_list|,
name|OriginalScoreFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|loadModel
argument_list|(
literal|"originalScore"
argument_list|,
name|LinearModel
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"score"
block|}
argument_list|,
literal|"{\"weights\":{\"score\":1.0}}"
argument_list|)
expr_stmt|;
name|implTestOriginalScoreResponseDocsCheck
argument_list|(
literal|"originalScore"
argument_list|,
literal|"score"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testOriginalScoreWithNonScoringFeatures
specifier|public
name|void
name|testOriginalScoreWithNonScoringFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|loadFeature
argument_list|(
literal|"origScore"
argument_list|,
name|OriginalScoreFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"store2"
argument_list|,
literal|"{}"
argument_list|)
expr_stmt|;
name|loadFeature
argument_list|(
literal|"c2"
argument_list|,
name|ValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"store2"
argument_list|,
literal|"{\"value\":2.0}"
argument_list|)
expr_stmt|;
name|loadModel
argument_list|(
literal|"origScore"
argument_list|,
name|LinearModel
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"origScore"
block|}
argument_list|,
literal|"store2"
argument_list|,
literal|"{\"weights\":{\"origScore\":1.0}}"
argument_list|)
expr_stmt|;
name|implTestOriginalScoreResponseDocsCheck
argument_list|(
literal|"origScore"
argument_list|,
literal|"origScore"
argument_list|,
literal|"c2"
argument_list|,
literal|"2.0"
argument_list|)
expr_stmt|;
block|}
DECL|method|implTestOriginalScoreResponseDocsCheck
specifier|public
specifier|static
name|void
name|implTestOriginalScoreResponseDocsCheck
parameter_list|(
name|String
name|modelName
parameter_list|,
name|String
name|origScoreFeatureName
parameter_list|,
name|String
name|nonScoringFeatureName
parameter_list|,
name|String
name|nonScoringFeatureValue
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"title:w1"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*, score"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
specifier|final
name|int
name|doc0Id
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|doc1Id
init|=
literal|8
decl_stmt|;
specifier|final
name|int
name|doc2Id
init|=
literal|6
decl_stmt|;
specifier|final
name|int
name|doc3Id
init|=
literal|7
decl_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/numFound/==4"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='"
operator|+
name|doc0Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/id=='"
operator|+
name|doc1Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/id=='"
operator|+
name|doc2Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[3]/id=='"
operator|+
name|doc3Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|res
init|=
name|restTestHarness
operator|.
name|query
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonParse
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|res
argument_list|)
decl_stmt|;
specifier|final
name|String
name|doc0Score
init|=
operator|(
call|(
name|Double
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
call|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|jsonParse
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc1Score
init|=
operator|(
call|(
name|Double
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
call|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|jsonParse
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc2Score
init|=
operator|(
call|(
name|Double
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
call|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|jsonParse
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|doc3Score
init|=
operator|(
call|(
name|Double
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
call|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|jsonParse
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|debugQuery
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|debugQuery
condition|)
block|{
name|query
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|DEBUG_QUERY
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|query
operator|.
name|remove
argument_list|(
literal|"fl"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*, score, fv:[fv]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr model="
operator|+
name|modelName
operator|+
literal|" reRankDocs=4}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/numFound/==4"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='"
operator|+
name|doc0Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/id=='"
operator|+
name|doc1Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/id=='"
operator|+
name|doc2Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[3]/id=='"
operator|+
name|doc3Id
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|implTestOriginalScoreResponseDocsCheck
argument_list|(
name|modelName
argument_list|,
name|query
argument_list|,
literal|0
argument_list|,
name|doc0Id
argument_list|,
name|origScoreFeatureName
argument_list|,
name|doc0Score
argument_list|,
name|nonScoringFeatureName
argument_list|,
name|nonScoringFeatureValue
argument_list|,
name|debugQuery
argument_list|)
expr_stmt|;
name|implTestOriginalScoreResponseDocsCheck
argument_list|(
name|modelName
argument_list|,
name|query
argument_list|,
literal|1
argument_list|,
name|doc1Id
argument_list|,
name|origScoreFeatureName
argument_list|,
name|doc1Score
argument_list|,
name|nonScoringFeatureName
argument_list|,
name|nonScoringFeatureValue
argument_list|,
name|debugQuery
argument_list|)
expr_stmt|;
name|implTestOriginalScoreResponseDocsCheck
argument_list|(
name|modelName
argument_list|,
name|query
argument_list|,
literal|2
argument_list|,
name|doc2Id
argument_list|,
name|origScoreFeatureName
argument_list|,
name|doc2Score
argument_list|,
name|nonScoringFeatureName
argument_list|,
name|nonScoringFeatureValue
argument_list|,
name|debugQuery
argument_list|)
expr_stmt|;
name|implTestOriginalScoreResponseDocsCheck
argument_list|(
name|modelName
argument_list|,
name|query
argument_list|,
literal|3
argument_list|,
name|doc3Id
argument_list|,
name|origScoreFeatureName
argument_list|,
name|doc3Score
argument_list|,
name|nonScoringFeatureName
argument_list|,
name|nonScoringFeatureValue
argument_list|,
name|debugQuery
argument_list|)
expr_stmt|;
block|}
DECL|method|implTestOriginalScoreResponseDocsCheck
specifier|private
specifier|static
name|void
name|implTestOriginalScoreResponseDocsCheck
parameter_list|(
name|String
name|modelName
parameter_list|,
name|SolrQuery
name|query
parameter_list|,
name|int
name|docIdx
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|origScoreFeatureName
parameter_list|,
name|String
name|origScoreFeatureValue
parameter_list|,
name|String
name|nonScoringFeatureName
parameter_list|,
name|String
name|nonScoringFeatureValue
parameter_list|,
name|boolean
name|debugQuery
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|fv
decl_stmt|;
if|if
condition|(
name|nonScoringFeatureName
operator|==
literal|null
condition|)
block|{
name|fv
operator|=
name|FeatureLoggerTestUtils
operator|.
name|toFeatureVector
argument_list|(
name|origScoreFeatureName
argument_list|,
name|origScoreFeatureValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fv
operator|=
name|FeatureLoggerTestUtils
operator|.
name|toFeatureVector
argument_list|(
name|origScoreFeatureName
argument_list|,
name|origScoreFeatureValue
argument_list|,
name|nonScoringFeatureName
argument_list|,
name|nonScoringFeatureValue
argument_list|)
expr_stmt|;
block|}
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/["
operator|+
name|docIdx
operator|+
literal|"]/fv=='"
operator|+
name|fv
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|debugQuery
condition|)
block|{
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/debug/explain/"
operator|+
name|docId
operator|+
literal|"=='\n"
operator|+
name|origScoreFeatureValue
operator|+
literal|" = LinearModel(name="
operator|+
name|modelName
operator|+
literal|",featureWeights=["
operator|+
name|origScoreFeatureName
operator|+
literal|"=1.0]) model applied to features, sum of:\n  "
operator|+
name|origScoreFeatureValue
operator|+
literal|" = prod of:\n    1.0 = weight on feature\n    "
operator|+
name|origScoreFeatureValue
operator|+
literal|" = OriginalScoreFeature [query:"
operator|+
name|query
operator|.
name|getQuery
argument_list|()
operator|+
literal|"]\n'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

