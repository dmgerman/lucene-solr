begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestParallelWeightCreation
specifier|public
class|class
name|TestParallelWeightCreation
extends|extends
name|TestRerankBase
block|{
annotation|@
name|Test
DECL|method|testLTRScoringQueryParallelWeightCreationResultOrder
specifier|public
name|void
name|testLTRScoringQueryParallelWeightCreationResultOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|"solrconfig-ltr_Th10_10.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title"
argument_list|,
literal|"w1 w3"
argument_list|,
literal|"description"
argument_list|,
literal|"w1"
argument_list|,
literal|"popularity"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"title"
argument_list|,
literal|"w2"
argument_list|,
literal|"description"
argument_list|,
literal|"w2"
argument_list|,
literal|"popularity"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"title"
argument_list|,
literal|"w3"
argument_list|,
literal|"description"
argument_list|,
literal|"w3"
argument_list|,
literal|"popularity"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"title"
argument_list|,
literal|"w4 w3"
argument_list|,
literal|"description"
argument_list|,
literal|"w4"
argument_list|,
literal|"popularity"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"title"
argument_list|,
literal|"w5"
argument_list|,
literal|"description"
argument_list|,
literal|"w5"
argument_list|,
literal|"popularity"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|loadFeatures
argument_list|(
literal|"external_features.json"
argument_list|)
expr_stmt|;
name|loadModels
argument_list|(
literal|"external_model.json"
argument_list|)
expr_stmt|;
name|loadModels
argument_list|(
literal|"external_model_store.json"
argument_list|)
expr_stmt|;
comment|// check to make sure that the order of results will be the same when using parallel weight creation
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=4 model=externalmodel efi.user_query=w3}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='1'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/id=='3'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/id=='4'"
argument_list|)
expr_stmt|;
name|aftertest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testLTRQParserThreadInitialization
specifier|public
name|void
name|testLTRQParserThreadInitialization
parameter_list|()
throws|throws
name|Exception
block|{
comment|// setting the value of number of threads to -ve should throw an exception
name|String
name|msg1
init|=
literal|null
decl_stmt|;
try|try
block|{
operator|new
name|LTRThreadModule
argument_list|(
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|msg1
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
empty_stmt|;
block|}
name|assertTrue
argument_list|(
name|msg1
operator|.
name|equals
argument_list|(
literal|"numThreadsPerRequest cannot be less than 1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// set totalPoolThreads to 1 and numThreadsPerRequest to 2 and verify that an exception is thrown
name|String
name|msg2
init|=
literal|null
decl_stmt|;
try|try
block|{
operator|new
name|LTRThreadModule
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|msg2
operator|=
name|iae
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|msg2
operator|.
name|equals
argument_list|(
literal|"numThreadsPerRequest cannot be greater than totalPoolThreads"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

