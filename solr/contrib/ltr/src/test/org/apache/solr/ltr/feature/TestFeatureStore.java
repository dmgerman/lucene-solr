begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|TestRerankBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|FeatureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
operator|.
name|ManagedFeatureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
operator|.
name|TestManagedFeatureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestFeatureStore
specifier|public
class|class
name|TestFeatureStore
extends|extends
name|TestRerankBase
block|{
DECL|field|fstore
specifier|static
name|ManagedFeatureStore
name|fstore
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setup
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fstore
operator|=
name|getManagedFeatureStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDefaultFeatureStoreName
specifier|public
name|void
name|testDefaultFeatureStoreName
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"_DEFAULT_"
argument_list|,
name|FeatureStore
operator|.
name|DEFAULT_FEATURE_STORE_NAME
argument_list|)
expr_stmt|;
specifier|final
name|FeatureStore
name|expectedFeatureStore
init|=
name|fstore
operator|.
name|getFeatureStore
argument_list|(
name|FeatureStore
operator|.
name|DEFAULT_FEATURE_STORE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|FeatureStore
name|actualFeatureStore
init|=
name|fstore
operator|.
name|getFeatureStore
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getFeatureStore(null) should return the default feature store"
argument_list|,
name|expectedFeatureStore
argument_list|,
name|actualFeatureStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFeatureStoreAdd
specifier|public
name|void
name|testFeatureStoreAdd
parameter_list|()
throws|throws
name|FeatureException
block|{
specifier|final
name|FeatureStore
name|fs
init|=
name|fstore
operator|.
name|getFeatureStore
argument_list|(
literal|"fstore-testFeature"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|name
init|=
literal|"c"
operator|+
name|i
decl_stmt|;
name|fstore
operator|.
name|addFeature
argument_list|(
name|TestManagedFeatureStore
operator|.
name|createMap
argument_list|(
name|name
argument_list|,
name|OriginalScoreFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"fstore-testFeature"
argument_list|)
expr_stmt|;
specifier|final
name|Feature
name|f
init|=
name|fs
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|fs
operator|.
name|getFeatures
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFeatureStoreGet
specifier|public
name|void
name|testFeatureStoreGet
parameter_list|()
throws|throws
name|FeatureException
block|{
specifier|final
name|FeatureStore
name|fs
init|=
name|fstore
operator|.
name|getFeatureStore
argument_list|(
literal|"fstore-testFeature2"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
literal|"c"
operator|+
name|i
decl_stmt|;
name|fstore
operator|.
name|addFeature
argument_list|(
name|TestManagedFeatureStore
operator|.
name|createMap
argument_list|(
name|name
argument_list|,
name|ValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|,
literal|"fstore-testFeature2"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Feature
name|f
init|=
name|fs
operator|.
name|get
argument_list|(
literal|"c"
operator|+
name|i
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"c"
operator|+
name|i
argument_list|,
name|f
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|instanceof
name|ValueFeature
argument_list|)
expr_stmt|;
specifier|final
name|ValueFeature
name|vf
init|=
operator|(
name|ValueFeature
operator|)
name|f
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|vf
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMissingFeatureReturnsNull
specifier|public
name|void
name|testMissingFeatureReturnsNull
parameter_list|()
block|{
specifier|final
name|FeatureStore
name|fs
init|=
name|fstore
operator|.
name|getFeatureStore
argument_list|(
literal|"fstore-testFeature3"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|String
name|name
init|=
literal|"testc"
operator|+
operator|(
name|float
operator|)
name|i
decl_stmt|;
name|fstore
operator|.
name|addFeature
argument_list|(
name|TestManagedFeatureStore
operator|.
name|createMap
argument_list|(
name|name
argument_list|,
name|ValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|params
argument_list|)
argument_list|,
literal|"fstore-testFeature3"
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|fs
operator|.
name|get
argument_list|(
literal|"missing_feature_name"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

