begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|TestRerankBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_class
DECL|class|TestFeatureExtractionFromMultipleSegments
specifier|public
class|class
name|TestFeatureExtractionFromMultipleSegments
extends|extends
name|TestRerankBase
block|{
DECL|field|AB
specifier|static
specifier|final
name|String
name|AB
init|=
literal|"abcdefghijklmnopqrstuvwxyz"
decl_stmt|;
DECL|method|randomString
specifier|static
name|String
name|randomString
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|AB
operator|.
name|charAt
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|AB
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|before
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
comment|// solrconfig-multiseg.xml contains the merge policy to restrict merging
name|setuptest
argument_list|(
literal|"solrconfig-multiseg.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
comment|// index 400 documents
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|400
condition|;
name|i
operator|=
name|i
operator|+
literal|20
control|)
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"apple is a company "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"d "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|2
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"apple is a company too "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|3
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"new york city is big apple "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.11"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|6
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"301"
argument_list|,
literal|"description"
argument_list|,
literal|"function name "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|7
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"301"
argument_list|,
literal|"description"
argument_list|,
literal|"function "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|8
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"301"
argument_list|,
literal|"description"
argument_list|,
literal|"This is a sample function for testing "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|9
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"301"
argument_list|,
literal|"description"
argument_list|,
literal|"Function to check out stock prices "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|10
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"301"
argument_list|,
literal|"description"
argument_list|,
literal|"Some descriptions "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|11
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"apple apple is a company "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|12
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"Big Apple is New York."
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|13
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"New some York is Big. "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|14
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"apple apple is a company "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|15
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"Big Apple is New York."
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.01"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|16
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"401"
argument_list|,
literal|"description"
argument_list|,
literal|"barack h"
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|17
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"red delicious apple "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
operator|new
name|Integer
argument_list|(
name|i
operator|+
literal|18
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"popularity"
argument_list|,
literal|"201"
argument_list|,
literal|"description"
argument_list|,
literal|"nyc "
operator|+
name|randomString
argument_list|(
name|i
operator|%
literal|6
operator|+
literal|3
argument_list|)
argument_list|,
literal|"normHits"
argument_list|,
literal|"0.11"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|loadFeatures
argument_list|(
literal|"comp_features.json"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|aftertest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFeatureExtractionFromMultipleSegments
specifier|public
name|void
name|testFeatureExtractionFromMultipleSegments
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"{!edismax qf='description^1' boost='sum(product(pow(normHits, 0.7), 1600), .1)' v='apple'}"
argument_list|)
expr_stmt|;
comment|// request 100 rows, if any rows are fetched from the second or subsequent segments the tests should succeed if LTRRescorer::extractFeaturesInfo() advances the doc iterator properly
name|int
name|numRows
init|=
literal|100
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
operator|(
operator|new
name|Integer
argument_list|(
name|numRows
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"wt"
argument_list|,
literal|"json"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"popularity:201"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*, score,id,normHits,description,fv:[features store='feature-store-6' format='dense' efi.user_text='apple']"
argument_list|)
expr_stmt|;
name|String
name|res
init|=
name|restTestHarness
operator|.
name|query
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|resultJson
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|docs
init|=
call|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
call|)
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|resultJson
operator|.
name|get
argument_list|(
literal|"response"
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"docs"
argument_list|)
decl_stmt|;
name|int
name|passCount
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|doc
range|:
name|docs
control|)
block|{
name|String
name|features
init|=
operator|(
name|String
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"fv"
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|features
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|)
assert|;
operator|++
name|passCount
expr_stmt|;
block|}
assert|assert
operator|(
name|passCount
operator|==
name|numRows
operator|)
assert|;
block|}
block|}
end_class

end_unit

