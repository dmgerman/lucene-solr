begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|ValueFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LTRScoringModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|ModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|TestLinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|IdentityNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|Normalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestSelectiveWeightCreation
specifier|public
class|class
name|TestSelectiveWeightCreation
extends|extends
name|TestRerankBase
block|{
DECL|method|getSearcher
specifier|private
name|IndexSearcher
name|getSearcher
parameter_list|(
name|IndexReader
name|r
parameter_list|)
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|searcher
return|;
block|}
DECL|method|makeFeatures
specifier|private
specifier|static
name|List
argument_list|<
name|Feature
argument_list|>
name|makeFeatures
parameter_list|(
name|int
index|[]
name|featureIds
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|int
name|i
range|:
name|featureIds
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|i
argument_list|)
expr_stmt|;
specifier|final
name|Feature
name|f
init|=
name|Feature
operator|.
name|getInstance
argument_list|(
name|solrResourceLoader
argument_list|,
name|ValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"f"
operator|+
name|i
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|f
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
DECL|method|makeFeatureWeights
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|makeFeatureWeights
parameter_list|(
name|List
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nameParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|modelWeights
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Feature
name|feat
range|:
name|features
control|)
block|{
name|modelWeights
operator|.
name|put
argument_list|(
name|feat
operator|.
name|getName
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
name|nameParams
operator|.
name|put
argument_list|(
literal|"weights"
argument_list|,
name|modelWeights
argument_list|)
expr_stmt|;
return|return
name|nameParams
return|;
block|}
DECL|method|performQuery
specifier|private
name|LTRScoringQuery
operator|.
name|ModelWeight
name|performQuery
parameter_list|(
name|TopDocs
name|hits
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|int
name|docid
parameter_list|,
name|LTRScoringQuery
name|model
parameter_list|)
throws|throws
name|IOException
throws|,
name|ModelException
block|{
specifier|final
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leafContexts
init|=
name|searcher
operator|.
name|getTopReaderContext
argument_list|()
operator|.
name|leaves
argument_list|()
decl_stmt|;
specifier|final
name|int
name|n
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|,
name|leafContexts
argument_list|)
decl_stmt|;
specifier|final
name|LeafReaderContext
name|context
init|=
name|leafContexts
operator|.
name|get
argument_list|(
name|n
argument_list|)
decl_stmt|;
specifier|final
name|int
name|deBasedDoc
init|=
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
operator|-
name|context
operator|.
name|docBase
decl_stmt|;
specifier|final
name|Weight
name|weight
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|model
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|Scorer
name|scorer
init|=
name|weight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
comment|// rerank using the field final-score
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|deBasedDoc
argument_list|)
expr_stmt|;
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|weight
operator|instanceof
name|LTRScoringQuery
operator|.
name|ModelWeight
argument_list|)
expr_stmt|;
specifier|final
name|LTRScoringQuery
operator|.
name|ModelWeight
name|modelWeight
init|=
operator|(
name|LTRScoringQuery
operator|.
name|ModelWeight
operator|)
name|weight
decl_stmt|;
return|return
name|modelWeight
return|;
block|}
annotation|@
name|BeforeClass
DECL|method|before
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title"
argument_list|,
literal|"w3 w1"
argument_list|,
literal|"description"
argument_list|,
literal|"w1"
argument_list|,
literal|"popularity"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"title"
argument_list|,
literal|"w2"
argument_list|,
literal|"description"
argument_list|,
literal|"w2"
argument_list|,
literal|"popularity"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"title"
argument_list|,
literal|"w3"
argument_list|,
literal|"description"
argument_list|,
literal|"w3"
argument_list|,
literal|"popularity"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"title"
argument_list|,
literal|"w3 w3"
argument_list|,
literal|"description"
argument_list|,
literal|"w4"
argument_list|,
literal|"popularity"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"title"
argument_list|,
literal|"w5"
argument_list|,
literal|"description"
argument_list|,
literal|"w5"
argument_list|,
literal|"popularity"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|loadFeatures
argument_list|(
literal|"external_features.json"
argument_list|)
expr_stmt|;
name|loadModels
argument_list|(
literal|"external_model.json"
argument_list|)
expr_stmt|;
name|loadModels
argument_list|(
literal|"external_model2.json"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|aftertest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testScoringQueryWeightCreation
specifier|public
name|void
name|testScoringQueryWeightCreation
parameter_list|()
throws|throws
name|IOException
throws|,
name|ModelException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"10"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard the the the the the oz"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"11"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1 extra token, but wizard and oz are close;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz the the the the the the"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Do ordinary BooleanQuery:
specifier|final
name|BooleanQuery
operator|.
name|Builder
name|bqBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bqBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wizard"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bqBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"oz"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// first run the standard query
specifier|final
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|bqBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"11"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|makeFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
init|=
name|makeFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|features
operator|.
name|size
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
name|norms
operator|.
name|add
argument_list|(
name|IdentityNormalizer
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
comment|// when features are NOT requested in the response, only the modelFeature weights should be created
specifier|final
name|LTRScoringModel
name|ltrScoringModel1
init|=
name|TestLinearModel
operator|.
name|createLinearModel
argument_list|(
literal|"test"
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
literal|"test"
argument_list|,
name|allFeatures
argument_list|,
name|makeFeatureWeights
argument_list|(
name|features
argument_list|)
argument_list|)
decl_stmt|;
name|LTRScoringQuery
operator|.
name|ModelWeight
name|modelWeight
init|=
name|performQuery
argument_list|(
name|hits
argument_list|,
name|searcher
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|,
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel1
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
comment|// features not requested in response
name|LTRScoringQuery
operator|.
name|FeatureInfo
index|[]
name|featuresInfo
init|=
name|modelWeight
operator|.
name|getFeaturesInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|features
operator|.
name|size
argument_list|()
argument_list|,
name|modelWeight
operator|.
name|getModelFeatureValuesNormalized
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|int
name|validFeatures
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|featuresInfo
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|featuresInfo
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|featuresInfo
index|[
name|i
index|]
operator|.
name|isUsed
argument_list|()
condition|)
block|{
name|validFeatures
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|validFeatures
argument_list|,
name|features
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// when features are requested in the response, weights should be created for all features
specifier|final
name|LTRScoringModel
name|ltrScoringModel2
init|=
name|TestLinearModel
operator|.
name|createLinearModel
argument_list|(
literal|"test"
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
literal|"test"
argument_list|,
name|allFeatures
argument_list|,
name|makeFeatureWeights
argument_list|(
name|features
argument_list|)
argument_list|)
decl_stmt|;
name|modelWeight
operator|=
name|performQuery
argument_list|(
name|hits
argument_list|,
name|searcher
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|,
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// features requested in response
name|featuresInfo
operator|=
name|modelWeight
operator|.
name|getFeaturesInfo
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|features
operator|.
name|size
argument_list|()
argument_list|,
name|modelWeight
operator|.
name|getModelFeatureValuesNormalized
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allFeatures
operator|.
name|size
argument_list|()
argument_list|,
name|modelWeight
operator|.
name|getExtractedFeatureWeights
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|validFeatures
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|featuresInfo
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|featuresInfo
index|[
name|i
index|]
operator|!=
literal|null
operator|&&
name|featuresInfo
index|[
name|i
index|]
operator|.
name|isUsed
argument_list|()
condition|)
block|{
name|validFeatures
operator|+=
literal|1
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|validFeatures
argument_list|,
name|allFeatures
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"10"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|delI
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSelectiveWeightsRequestFeaturesFromDifferentStore
specifier|public
name|void
name|testSelectiveWeightsRequestFeaturesFromDifferentStore
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|docs0fv
init|=
name|FeatureLoggerTestUtils
operator|.
name|toFeatureVector
argument_list|(
literal|"matchedTitle"
argument_list|,
literal|"1.0"
argument_list|,
literal|"titlePhraseMatch"
argument_list|,
literal|"0.6103343"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|docs0fv_fstore4
init|=
name|FeatureLoggerTestUtils
operator|.
name|toFeatureVector
argument_list|(
literal|"popularity"
argument_list|,
literal|"3.0"
argument_list|,
literal|"originalScore"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// extract all features in externalmodel's store (default store)
comment|// rerank using externalmodel (default store)
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score,fv:[fv]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=10 model=externalmodel efi.user_query=w3}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='3'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/id=='4'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/id=='1'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/fv=='"
operator|+
name|docs0fv
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/score==0.33873552"
argument_list|)
expr_stmt|;
comment|// extract all features from fstore4
comment|// rerank using externalmodel (default store)
name|query
operator|.
name|remove
argument_list|(
literal|"fl"
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"rq"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score,fv:[fv store=fstore4 efi.myPop=3]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=10 model=externalmodel efi.user_query=w3}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='3'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/id=='4'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/id=='1'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/fv=='"
operator|+
name|docs0fv_fstore4
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/score==0.33873552"
argument_list|)
expr_stmt|;
comment|// extract all features from fstore4
comment|// rerank using externalmodel2 (fstore2)
name|query
operator|.
name|remove
argument_list|(
literal|"fl"
argument_list|)
expr_stmt|;
name|query
operator|.
name|remove
argument_list|(
literal|"rq"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score,fv:[fv store=fstore4 efi.myPop=3]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=10 model=externalmodel2 efi.user_query=w3}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='5'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/id=='4'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/id=='3'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/fv=='"
operator|+
name|docs0fv_fstore4
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/score==2.5"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

