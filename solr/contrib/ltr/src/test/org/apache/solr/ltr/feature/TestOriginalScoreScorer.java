begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestOriginalScoreScorer
specifier|public
class|class
name|TestOriginalScoreScorer
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testOverridesAbstractScorerMethods
specifier|public
name|void
name|testOverridesAbstractScorerMethods
parameter_list|()
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|ossClass
init|=
name|OriginalScoreFeature
operator|.
name|OriginalScoreWeight
operator|.
name|OriginalScoreScorer
operator|.
name|class
decl_stmt|;
for|for
control|(
specifier|final
name|Method
name|scorerClassMethod
range|:
name|Scorer
operator|.
name|class
operator|.
name|getDeclaredMethods
argument_list|()
control|)
block|{
specifier|final
name|int
name|modifiers
init|=
name|scorerClassMethod
operator|.
name|getModifiers
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isAbstract
argument_list|(
name|modifiers
argument_list|)
condition|)
continue|continue;
try|try
block|{
specifier|final
name|Method
name|ossClassMethod
init|=
name|ossClass
operator|.
name|getDeclaredMethod
argument_list|(
name|scorerClassMethod
operator|.
name|getName
argument_list|()
argument_list|,
name|scorerClassMethod
operator|.
name|getParameterTypes
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"getReturnType() difference"
argument_list|,
name|scorerClassMethod
operator|.
name|getReturnType
argument_list|()
argument_list|,
name|ossClassMethod
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|ossClass
operator|+
literal|" needs to override '"
operator|+
name|scorerClassMethod
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

