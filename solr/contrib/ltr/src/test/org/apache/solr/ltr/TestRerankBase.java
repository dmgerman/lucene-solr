begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Scanner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ContentStreamBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|FeatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|ValueFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LTRScoringModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|ModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
operator|.
name|ManagedFeatureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
operator|.
name|ManagedModelStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|SolrSchemaRestApi
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|RestTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|eclipse
operator|.
name|jetty
operator|.
name|servlet
operator|.
name|ServletHolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|restlet
operator|.
name|ext
operator|.
name|servlet
operator|.
name|ServerServlet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestRerankBase
specifier|public
class|class
name|TestRerankBase
extends|extends
name|RestTestBase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|solrResourceLoader
specifier|protected
specifier|static
specifier|final
name|SolrResourceLoader
name|solrResourceLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|()
decl_stmt|;
DECL|field|tmpSolrHome
specifier|protected
specifier|static
name|File
name|tmpSolrHome
decl_stmt|;
DECL|field|tmpConfDir
specifier|protected
specifier|static
name|File
name|tmpConfDir
decl_stmt|;
DECL|field|FEATURE_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|FEATURE_FILE_NAME
init|=
literal|"_schema_feature-store.json"
decl_stmt|;
DECL|field|MODEL_FILE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|MODEL_FILE_NAME
init|=
literal|"_schema_model-store.json"
decl_stmt|;
DECL|field|PARENT_ENDPOINT
specifier|public
specifier|static
specifier|final
name|String
name|PARENT_ENDPOINT
init|=
literal|"/schema/*"
decl_stmt|;
DECL|field|COLLECTION
specifier|protected
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection1"
decl_stmt|;
DECL|field|CONF_DIR
specifier|protected
specifier|static
specifier|final
name|String
name|CONF_DIR
init|=
name|COLLECTION
operator|+
literal|"/conf"
decl_stmt|;
DECL|field|fstorefile
specifier|protected
specifier|static
name|File
name|fstorefile
init|=
literal|null
decl_stmt|;
DECL|field|mstorefile
specifier|protected
specifier|static
name|File
name|mstorefile
init|=
literal|null
decl_stmt|;
DECL|method|setuptest
specifier|protected
specifier|static
name|void
name|setuptest
parameter_list|(
name|boolean
name|bulkIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|"solrconfig-ltr.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bulkIndex
condition|)
name|bulkIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|setupPersistenttest
specifier|protected
specifier|static
name|void
name|setupPersistenttest
parameter_list|(
name|boolean
name|bulkIndex
parameter_list|)
throws|throws
name|Exception
block|{
name|setupPersistentTest
argument_list|(
literal|"solrconfig-ltr.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bulkIndex
condition|)
name|bulkIndex
argument_list|()
expr_stmt|;
block|}
DECL|method|getManagedFeatureStore
specifier|public
specifier|static
name|ManagedFeatureStore
name|getManagedFeatureStore
parameter_list|()
block|{
return|return
name|ManagedFeatureStore
operator|.
name|getManagedFeatureStore
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getManagedModelStore
specifier|public
specifier|static
name|ManagedModelStore
name|getManagedModelStore
parameter_list|()
block|{
return|return
name|ManagedModelStore
operator|.
name|getManagedModelStore
argument_list|(
name|h
operator|.
name|getCore
argument_list|()
argument_list|)
return|;
block|}
DECL|method|setupTestInit
specifier|protected
specifier|static
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|setupTestInit
parameter_list|(
name|String
name|solrconfig
parameter_list|,
name|String
name|schema
parameter_list|,
name|boolean
name|isPersistent
parameter_list|)
throws|throws
name|Exception
block|{
name|tmpSolrHome
operator|=
name|createTempDir
argument_list|()
operator|.
name|toFile
argument_list|()
expr_stmt|;
name|tmpConfDir
operator|=
operator|new
name|File
argument_list|(
name|tmpSolrHome
argument_list|,
name|CONF_DIR
argument_list|)
expr_stmt|;
name|tmpConfDir
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|copyDirectory
argument_list|(
operator|new
name|File
argument_list|(
name|TEST_HOME
argument_list|()
argument_list|)
argument_list|,
name|tmpSolrHome
operator|.
name|getAbsoluteFile
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|File
name|fstore
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
name|FEATURE_FILE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|File
name|mstore
init|=
operator|new
name|File
argument_list|(
name|tmpConfDir
argument_list|,
name|MODEL_FILE_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|isPersistent
condition|)
block|{
name|fstorefile
operator|=
name|fstore
expr_stmt|;
name|mstorefile
operator|=
name|mstore
expr_stmt|;
block|}
if|if
condition|(
name|fstore
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"remove feature store config file in {}"
argument_list|,
name|fstore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|fstore
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mstore
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"remove model store config file in {}"
argument_list|,
name|mstore
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|Files
operator|.
name|delete
argument_list|(
name|mstore
operator|.
name|toPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|solrconfig
operator|.
name|equals
argument_list|(
literal|"solrconfig.xml"
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/collection1/conf/"
operator|+
name|solrconfig
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/collection1/conf/solrconfig.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|schema
operator|.
name|equals
argument_list|(
literal|"schema.xml"
argument_list|)
condition|)
block|{
name|FileUtils
operator|.
name|copyFile
argument_list|(
operator|new
name|File
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/collection1/conf/"
operator|+
name|schema
argument_list|)
argument_list|,
operator|new
name|File
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|"/collection1/conf/schema.xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ServletHolder
name|solrRestApi
init|=
operator|new
name|ServletHolder
argument_list|(
literal|"SolrSchemaRestApi"
argument_list|,
name|ServerServlet
operator|.
name|class
argument_list|)
decl_stmt|;
name|solrRestApi
operator|.
name|setInitParameter
argument_list|(
literal|"org.restlet.application"
argument_list|,
name|SolrSchemaRestApi
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|solrRestApi
operator|.
name|setInitParameter
argument_list|(
literal|"storageIO"
argument_list|,
name|ManagedResourceStorage
operator|.
name|InMemoryStorageIO
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|extraServlets
operator|.
name|put
argument_list|(
name|solrRestApi
argument_list|,
name|PARENT_ENDPOINT
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
return|return
name|extraServlets
return|;
block|}
DECL|method|setuptest
specifier|public
specifier|static
name|void
name|setuptest
parameter_list|(
name|String
name|solrconfig
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
name|solrconfig
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
name|setupTestInit
argument_list|(
name|solrconfig
argument_list|,
name|schema
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"enable.update.log"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|createJettyAndHarness
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solrconfig
argument_list|,
name|schema
argument_list|,
literal|"/solr"
argument_list|,
literal|true
argument_list|,
name|extraServlets
argument_list|)
expr_stmt|;
block|}
DECL|method|setupPersistentTest
specifier|public
specifier|static
name|void
name|setupPersistentTest
parameter_list|(
name|String
name|solrconfig
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|Exception
block|{
name|initCore
argument_list|(
name|solrconfig
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|SortedMap
argument_list|<
name|ServletHolder
argument_list|,
name|String
argument_list|>
name|extraServlets
init|=
name|setupTestInit
argument_list|(
name|solrconfig
argument_list|,
name|schema
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|createJettyAndHarness
argument_list|(
name|tmpSolrHome
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|solrconfig
argument_list|,
name|schema
argument_list|,
literal|"/solr"
argument_list|,
literal|true
argument_list|,
name|extraServlets
argument_list|)
expr_stmt|;
block|}
DECL|method|aftertest
specifier|protected
specifier|static
name|void
name|aftertest
parameter_list|()
throws|throws
name|Exception
block|{
name|restTestHarness
operator|.
name|close
argument_list|()
expr_stmt|;
name|restTestHarness
operator|=
literal|null
expr_stmt|;
name|jetty
operator|.
name|stop
argument_list|()
expr_stmt|;
name|jetty
operator|=
literal|null
expr_stmt|;
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|tmpSolrHome
argument_list|)
expr_stmt|;
name|System
operator|.
name|clearProperty
argument_list|(
literal|"managed.schema.mutable"
argument_list|)
expr_stmt|;
comment|// System.clearProperty("enable.update.log");
block|}
DECL|method|makeRestTestHarnessNull
specifier|public
specifier|static
name|void
name|makeRestTestHarnessNull
parameter_list|()
block|{
name|restTestHarness
operator|=
literal|null
expr_stmt|;
block|}
comment|/** produces a model encoded in json **/
DECL|method|getModelInJson
specifier|public
specifier|static
name|String
name|getModelInJson
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|features
parameter_list|,
name|String
name|fstore
parameter_list|,
name|String
name|params
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"name\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"store\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|fstore
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"class\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"features\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|feature
range|:
name|features
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"\n\t{ "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"name\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|feature
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|"},"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\n]\n"
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"params\":"
argument_list|)
operator|.
name|append
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** produces a model encoded in json **/
DECL|method|getFeatureInJson
specifier|public
specifier|static
name|String
name|getFeatureInJson
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|fstore
parameter_list|,
name|String
name|params
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"name\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"store\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|fstore
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"class\":"
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
operator|.
name|append
argument_list|(
name|type
argument_list|)
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"\"params\":"
argument_list|)
operator|.
name|append
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|loadFeature
specifier|protected
specifier|static
name|void
name|loadFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|feature
init|=
name|getFeatureInJson
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|"test"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading feauture \n{} "
argument_list|,
name|feature
argument_list|)
expr_stmt|;
name|assertJPut
argument_list|(
name|ManagedFeatureStore
operator|.
name|REST_END_POINT
argument_list|,
name|feature
argument_list|,
literal|"/responseHeader/status==0"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadFeature
specifier|protected
specifier|static
name|void
name|loadFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
name|fstore
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|feature
init|=
name|getFeatureInJson
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|fstore
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading feauture \n{} "
argument_list|,
name|feature
argument_list|)
expr_stmt|;
name|assertJPut
argument_list|(
name|ManagedFeatureStore
operator|.
name|REST_END_POINT
argument_list|,
name|feature
argument_list|,
literal|"/responseHeader/status==0"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadModel
specifier|protected
specifier|static
name|void
name|loadModel
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|features
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
name|loadModel
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|features
argument_list|,
literal|"test"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
DECL|method|loadModel
specifier|protected
specifier|static
name|void
name|loadModel
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|,
name|String
index|[]
name|features
parameter_list|,
name|String
name|fstore
parameter_list|,
name|String
name|params
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
name|model
init|=
name|getModelInJson
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|features
argument_list|,
name|fstore
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"loading model \n{} "
argument_list|,
name|model
argument_list|)
expr_stmt|;
name|assertJPut
argument_list|(
name|ManagedModelStore
operator|.
name|REST_END_POINT
argument_list|,
name|model
argument_list|,
literal|"/responseHeader/status==0"
argument_list|)
expr_stmt|;
block|}
DECL|method|loadModels
specifier|public
specifier|static
name|void
name|loadModels
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|URL
name|url
init|=
name|TestRerankBase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/modelExamples/"
operator|+
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|multipleModels
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|assertJPut
argument_list|(
name|ManagedModelStore
operator|.
name|REST_END_POINT
argument_list|,
name|multipleModels
argument_list|,
literal|"/responseHeader/status==0"
argument_list|)
expr_stmt|;
block|}
DECL|method|createModelFromFiles
specifier|public
specifier|static
name|LTRScoringModel
name|createModelFromFiles
parameter_list|(
name|String
name|modelFileName
parameter_list|,
name|String
name|featureFileName
parameter_list|)
throws|throws
name|ModelException
throws|,
name|Exception
block|{
name|URL
name|url
init|=
name|TestRerankBase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/modelExamples/"
operator|+
name|modelFileName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|modelJson
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|final
name|ManagedModelStore
name|ms
init|=
name|getManagedModelStore
argument_list|()
decl_stmt|;
name|url
operator|=
name|TestRerankBase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/featureExamples/"
operator|+
name|featureFileName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|featureJson
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|Object
name|parsedFeatureJson
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedFeatureJson
operator|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|featureJson
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioExc
parameter_list|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"ObjectBuilder failed parsing json"
argument_list|,
name|ioExc
argument_list|)
throw|;
block|}
specifier|final
name|ManagedFeatureStore
name|fs
init|=
name|getManagedFeatureStore
argument_list|()
decl_stmt|;
comment|// fs.getFeatureStore(null).clear();
name|fs
operator|.
name|doDeleteChild
argument_list|(
literal|null
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
comment|// is this safe??
comment|// based on my need to call this I dont think that
comment|// "getNewManagedFeatureStore()"
comment|// is actually returning a new feature store each time
name|fs
operator|.
name|applyUpdatesToManagedData
argument_list|(
name|parsedFeatureJson
argument_list|)
expr_stmt|;
name|ms
operator|.
name|setManagedFeatureStore
argument_list|(
name|fs
argument_list|)
expr_stmt|;
comment|// can we skip this and just use fs directly below?
specifier|final
name|LTRScoringModel
name|ltrScoringModel
init|=
name|ManagedModelStore
operator|.
name|fromLTRScoringModelMap
argument_list|(
name|solrResourceLoader
argument_list|,
name|mapFromJson
argument_list|(
name|modelJson
argument_list|)
argument_list|,
name|ms
operator|.
name|getManagedFeatureStore
argument_list|()
argument_list|)
decl_stmt|;
name|ms
operator|.
name|addModel
argument_list|(
name|ltrScoringModel
argument_list|)
expr_stmt|;
return|return
name|ltrScoringModel
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|mapFromJson
specifier|static
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|mapFromJson
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|ModelException
block|{
name|Object
name|parsedJson
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parsedJson
operator|=
name|ObjectBuilder
operator|.
name|fromJSON
argument_list|(
name|json
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioExc
parameter_list|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"ObjectBuilder failed parsing json"
argument_list|,
name|ioExc
argument_list|)
throw|;
block|}
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|parsedJson
return|;
block|}
DECL|method|loadFeatures
specifier|public
specifier|static
name|void
name|loadFeatures
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|URL
name|url
init|=
name|TestRerankBase
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"/featureExamples/"
operator|+
name|fileName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|multipleFeatures
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
operator|new
name|File
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"send \n{}"
argument_list|,
name|multipleFeatures
argument_list|)
expr_stmt|;
name|assertJPut
argument_list|(
name|ManagedFeatureStore
operator|.
name|REST_END_POINT
argument_list|,
name|multipleFeatures
argument_list|,
literal|"/responseHeader/status==0"
argument_list|)
expr_stmt|;
block|}
DECL|method|getFeatures
specifier|protected
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|FeatureException
block|{
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|names
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|Feature
name|f
init|=
name|Feature
operator|.
name|getInstance
argument_list|(
name|solrResourceLoader
argument_list|,
name|ValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|name
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|f
operator|.
name|setIndex
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
DECL|method|getFeatures
specifier|protected
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|(
name|String
index|[]
name|names
parameter_list|)
throws|throws
name|FeatureException
block|{
return|return
name|getFeatures
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|names
argument_list|)
argument_list|)
return|;
block|}
DECL|method|loadModelAndFeatures
specifier|protected
specifier|static
name|void
name|loadModelAndFeatures
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|allFeatureCount
parameter_list|,
name|int
name|modelFeatureCount
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|features
init|=
operator|new
name|String
index|[
name|modelFeatureCount
index|]
decl_stmt|;
specifier|final
name|String
index|[]
name|weights
init|=
operator|new
name|String
index|[
name|modelFeatureCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allFeatureCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|featureName
init|=
literal|"c"
operator|+
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|modelFeatureCount
condition|)
block|{
name|features
index|[
name|i
index|]
operator|=
name|featureName
expr_stmt|;
name|weights
index|[
name|i
index|]
operator|=
literal|"\""
operator|+
name|featureName
operator|+
literal|"\":1.0"
expr_stmt|;
block|}
name|loadFeature
argument_list|(
name|featureName
argument_list|,
name|ValueFeature
operator|.
name|ValueFeatureWeight
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"{\"value\":"
operator|+
name|i
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
name|loadModel
argument_list|(
name|name
argument_list|,
name|LinearModel
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
name|features
argument_list|,
literal|"{\"weights\":{"
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|weights
argument_list|,
literal|","
argument_list|)
operator|+
literal|"}}"
argument_list|)
expr_stmt|;
block|}
DECL|method|bulkIndex
specifier|protected
specifier|static
name|void
name|bulkIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"title"
argument_list|,
literal|"bloomberg different bla"
argument_list|,
literal|"description"
argument_list|,
literal|"bloomberg"
argument_list|,
literal|"id"
argument_list|,
literal|"6"
argument_list|,
literal|"popularity"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"title"
argument_list|,
literal|"bloomberg bloomberg "
argument_list|,
literal|"description"
argument_list|,
literal|"bloomberg"
argument_list|,
literal|"id"
argument_list|,
literal|"7"
argument_list|,
literal|"popularity"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"title"
argument_list|,
literal|"bloomberg bloomberg bloomberg"
argument_list|,
literal|"description"
argument_list|,
literal|"bloomberg"
argument_list|,
literal|"id"
argument_list|,
literal|"8"
argument_list|,
literal|"popularity"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"title"
argument_list|,
literal|"bloomberg bloomberg bloomberg bloomberg"
argument_list|,
literal|"description"
argument_list|,
literal|"bloomberg"
argument_list|,
literal|"id"
argument_list|,
literal|"9"
argument_list|,
literal|"popularity"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|bulkIndex
specifier|protected
specifier|static
name|void
name|bulkIndex
parameter_list|(
name|String
name|filePath
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|SolrQueryRequestBase
name|req
init|=
name|lrf
operator|.
name|makeRequest
argument_list|(
name|CommonParams
operator|.
name|STREAM_CONTENTTYPE
argument_list|,
literal|"application/xml"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ContentStream
argument_list|>
name|streams
init|=
operator|new
name|ArrayList
argument_list|<
name|ContentStream
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|streams
operator|.
name|add
argument_list|(
operator|new
name|ContentStreamBase
operator|.
name|FileStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|req
operator|.
name|setContentStreams
argument_list|(
name|streams
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|SolrQueryResponse
name|res
init|=
operator|new
name|SolrQueryResponse
argument_list|()
decl_stmt|;
name|h
operator|.
name|updater
operator|.
name|handleRequest
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|ex
parameter_list|)
block|{
comment|// Ignore. Just log the exception and go to the next file
name|log
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|buildIndexUsingAdoc
specifier|protected
specifier|static
name|void
name|buildIndexUsingAdoc
parameter_list|(
name|String
name|filepath
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
specifier|final
name|Scanner
name|scn
init|=
operator|new
name|Scanner
argument_list|(
operator|new
name|File
argument_list|(
name|filepath
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|StringBuffer
name|buff
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|scn
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|scn
operator|.
name|nextLine
argument_list|()
expr_stmt|;
name|scn
operator|.
name|nextLine
argument_list|()
expr_stmt|;
comment|// Skip the first 3 lines then add everything else
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|docsToAdd
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|scn
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|curLine
init|=
name|scn
operator|.
name|nextLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|curLine
operator|.
name|contains
argument_list|(
literal|"</doc>"
argument_list|)
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
name|curLine
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|docsToAdd
operator|.
name|add
argument_list|(
name|buff
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"</add>"
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
literal|"<doc>"
argument_list|,
literal|"<add>\n<doc>"
argument_list|)
operator|.
name|replace
argument_list|(
literal|"</doc>"
argument_list|,
literal|"</doc>\n</add>"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|scn
operator|.
name|hasNext
argument_list|()
condition|)
block|{
break|break;
block|}
else|else
block|{
name|curLine
operator|=
name|scn
operator|.
name|nextLine
argument_list|()
expr_stmt|;
block|}
name|buff
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|curLine
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|doc
range|:
name|docsToAdd
control|)
block|{
name|assertU
argument_list|(
name|doc
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|scn
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

