begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.model
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
package|;
end_package

begin_comment
comment|//import static org.junit.internal.matchers.StringContains.containsString;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|TestRerankBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestMultipleAdditiveTreesModel
specifier|public
class|class
name|TestMultipleAdditiveTreesModel
extends|extends
name|TestRerankBase
block|{
annotation|@
name|BeforeClass
DECL|method|before
specifier|public
specifier|static
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|setuptest
argument_list|(
literal|"solrconfig-ltr.xml"
argument_list|,
literal|"schema.xml"
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
literal|"title"
argument_list|,
literal|"w1"
argument_list|,
literal|"description"
argument_list|,
literal|"w1"
argument_list|,
literal|"popularity"
argument_list|,
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
literal|"title"
argument_list|,
literal|"w2"
argument_list|,
literal|"description"
argument_list|,
literal|"w2"
argument_list|,
literal|"popularity"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
literal|"title"
argument_list|,
literal|"w3"
argument_list|,
literal|"description"
argument_list|,
literal|"w3"
argument_list|,
literal|"popularity"
argument_list|,
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
literal|"title"
argument_list|,
literal|"w4"
argument_list|,
literal|"description"
argument_list|,
literal|"w4"
argument_list|,
literal|"popularity"
argument_list|,
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|adoc
argument_list|(
literal|"id"
argument_list|,
literal|"5"
argument_list|,
literal|"title"
argument_list|,
literal|"w5"
argument_list|,
literal|"description"
argument_list|,
literal|"w5"
argument_list|,
literal|"popularity"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
expr_stmt|;
name|assertU
argument_list|(
name|commit
argument_list|()
argument_list|)
expr_stmt|;
name|loadFeatures
argument_list|(
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
comment|// currently needed to force
comment|// scoring on all docs
name|loadModels
argument_list|(
literal|"multipleadditivetreesmodel.json"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
DECL|method|after
specifier|public
specifier|static
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|aftertest
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMultipleAdditiveTreesScoringWithAndWithoutEfiFeatureMatches
specifier|public
name|void
name|testMultipleAdditiveTreesScoringWithAndWithoutEfiFeatureMatches
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score"
argument_list|)
expr_stmt|;
comment|// Regular scores
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/score==1.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/score==1.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/score==1.0"
argument_list|)
expr_stmt|;
comment|// No match scores since user_query not passed in to external feature info
comment|// and feature depended on it.
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=dsjkafljjk}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/score==-120.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/score==-120.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/score==-120.0"
argument_list|)
expr_stmt|;
comment|// Matched user query since it was passed in
name|query
operator|.
name|remove
argument_list|(
literal|"rq"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/id=='3'"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[0]/score==-20.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[1]/score==-120.0"
argument_list|)
expr_stmt|;
name|assertJQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|,
literal|"/response/docs/[2]/score==-120.0"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestExplain
specifier|public
name|void
name|multipleAdditiveTreesTestExplain
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|SolrQuery
name|query
init|=
operator|new
name|SolrQuery
argument_list|()
decl_stmt|;
name|query
operator|.
name|setQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"fl"
argument_list|,
literal|"*,score,[fv]"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rows"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|query
operator|.
name|add
argument_list|(
literal|"rq"
argument_list|,
literal|"{!ltr reRankDocs=3 model=multipleadditivetreesmodel efi.user_query=w3}"
argument_list|)
expr_stmt|;
comment|// test out the explain feature, make sure it returns something
name|query
operator|.
name|setParam
argument_list|(
literal|"debugQuery"
argument_list|,
literal|"on"
argument_list|)
expr_stmt|;
name|String
name|qryResult
init|=
name|JQ
argument_list|(
literal|"/query"
operator|+
name|query
operator|.
name|toQueryString
argument_list|()
argument_list|)
decl_stmt|;
name|qryResult
operator|=
name|qryResult
operator|.
name|replaceAll
argument_list|(
literal|"\n"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|// FIXME containsString doesn't exist.
comment|// assertThat(qryResult, containsString("\"debug\":{"));
comment|// qryResult = qryResult.substring(qryResult.indexOf("debug"));
comment|//
comment|// assertThat(qryResult, containsString("\"explain\":{"));
comment|// qryResult = qryResult.substring(qryResult.indexOf("explain"));
comment|//
comment|// assertThat(qryResult, containsString("multipleadditivetreesmodel"));
comment|// assertThat(qryResult,
comment|// containsString(MultipleAdditiveTreesModel.class.getCanonicalName()));
comment|//
comment|// assertThat(qryResult, containsString("-100.0 = tree 0"));
comment|// assertThat(qryResult, containsString("50.0 = tree 0"));
comment|// assertThat(qryResult, containsString("-20.0 = tree 1"));
comment|// assertThat(qryResult, containsString("'matchedTitle':1.0> 0.5"));
comment|// assertThat(qryResult, containsString("'matchedTitle':0.0<= 0.5"));
comment|//
comment|// assertThat(qryResult, containsString(" Go Right "));
comment|// assertThat(qryResult, containsString(" Go Left "));
comment|// assertThat(qryResult,
comment|// containsString("'this_feature_doesnt_exist' does not exist in FV"));
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestNoParams
specifier|public
name|void
name|multipleAdditiveTreesTestNoParams
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"no trees declared for model multipleadditivetreesmodel_no_params"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_params.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestNoParams failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestEmptyParams
specifier|public
name|void
name|multipleAdditiveTreesTestEmptyParams
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"no trees declared for model multipleadditivetreesmodel_no_trees"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_trees.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestEmptyParams failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestNoWeight
specifier|public
name|void
name|multipleAdditiveTreesTestNoWeight
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"MultipleAdditiveTreesModel tree doesn't contain a weight"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_weight.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestNoWeight failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestTreesParamDoesNotContatinTree
specifier|public
name|void
name|multipleAdditiveTreesTestTreesParamDoesNotContatinTree
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"MultipleAdditiveTreesModel tree doesn't contain a tree"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_tree.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestTreesParamDoesNotContatinTree failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestNoFeaturesSpecified
specifier|public
name|void
name|multipleAdditiveTreesTestNoFeaturesSpecified
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"no features declared for model multipleadditivetreesmodel_no_features"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_features.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestNoFeaturesSpecified failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ModelException
name|actualException
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|actualException
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestNoRight
specifier|public
name|void
name|multipleAdditiveTreesTestNoRight
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"MultipleAdditiveTreesModel tree node is missing right"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_right.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestNoRight failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestNoLeft
specifier|public
name|void
name|multipleAdditiveTreesTestNoLeft
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"MultipleAdditiveTreesModel tree node is missing left"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_left.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestNoLeft failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestNoThreshold
specifier|public
name|void
name|multipleAdditiveTreesTestNoThreshold
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"MultipleAdditiveTreesModel tree node is missing threshold"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_threshold.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestNoThreshold failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|actualException
parameter_list|)
block|{
name|Throwable
name|rootError
init|=
name|getRootCause
argument_list|(
name|actualException
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|rootError
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|multipleAdditiveTreesTestMissingTreeFeature
specifier|public
name|void
name|multipleAdditiveTreesTestMissingTreeFeature
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|ModelException
name|expectedException
init|=
operator|new
name|ModelException
argument_list|(
literal|"MultipleAdditiveTreesModel tree node is leaf with left=-100.0 and right=75.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|createModelFromFiles
argument_list|(
literal|"multipleadditivetreesmodel_no_feature.json"
argument_list|,
literal|"multipleadditivetreesmodel_features.json"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"multipleAdditiveTreesTestMissingTreeFeature failed to throw exception: "
operator|+
name|expectedException
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ModelException
name|actualException
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedException
operator|.
name|toString
argument_list|()
argument_list|,
name|actualException
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

