begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FloatDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|FieldValueFeature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LTRScoringModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|TestLinearModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|IdentityNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|Normalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|TestLTRReRankingPipeline
specifier|public
class|class
name|TestLTRReRankingPipeline
extends|extends
name|LuceneTestCase
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|solrResourceLoader
specifier|private
specifier|static
specifier|final
name|SolrResourceLoader
name|solrResourceLoader
init|=
operator|new
name|SolrResourceLoader
argument_list|()
decl_stmt|;
DECL|method|getSearcher
specifier|private
name|IndexSearcher
name|getSearcher
parameter_list|(
name|IndexReader
name|r
parameter_list|)
block|{
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
return|return
name|searcher
return|;
block|}
DECL|method|makeFieldValueFeatures
specifier|private
specifier|static
name|List
argument_list|<
name|Feature
argument_list|>
name|makeFieldValueFeatures
parameter_list|(
name|int
index|[]
name|featureIds
parameter_list|,
name|String
name|field
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|int
name|i
range|:
name|featureIds
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
specifier|final
name|Feature
name|f
init|=
name|Feature
operator|.
name|getInstance
argument_list|(
name|solrResourceLoader
argument_list|,
name|FieldValueFeature
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
literal|"f"
operator|+
name|i
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|f
operator|.
name|setIndex
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|features
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|features
return|;
block|}
DECL|class|MockModel
specifier|private
class|class
name|MockModel
extends|extends
name|LTRScoringModel
block|{
DECL|method|MockModel
specifier|public
name|MockModel
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
parameter_list|,
name|String
name|featureStoreName
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
name|featureStoreName
argument_list|,
name|allFeatures
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|float
index|[]
name|modelFeatureValuesNormalized
parameter_list|)
block|{
return|return
name|modelFeatureValuesNormalized
index|[
literal|2
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|,
name|float
name|finalScore
parameter_list|,
name|List
argument_list|<
name|Explanation
argument_list|>
name|featureExplanations
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testRescorer
specifier|public
name|void
name|testRescorer
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard the the the the the oz"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
comment|// 1 extra token, but wizard and oz are close;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz the the the the the the"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Do ordinary BooleanQuery:
specifier|final
name|BooleanQuery
operator|.
name|Builder
name|bqBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bqBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wizard"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bqBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"oz"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// first run the standard query
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|bqBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
literal|"final-score"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
init|=
operator|new
name|ArrayList
argument_list|<
name|Normalizer
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|features
operator|.
name|size
argument_list|()
argument_list|,
name|IdentityNormalizer
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
init|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
argument_list|,
literal|"final-score"
argument_list|)
decl_stmt|;
specifier|final
name|LTRScoringModel
name|ltrScoringModel
init|=
name|TestLinearModel
operator|.
name|createLinearModel
argument_list|(
literal|"test"
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
literal|"test"
argument_list|,
name|allFeatures
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|LTRRescorer
name|rescorer
init|=
operator|new
name|LTRRescorer
argument_list|(
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel
argument_list|)
argument_list|)
decl_stmt|;
name|hits
operator|=
name|rescorer
operator|.
name|rescore
argument_list|(
name|searcher
argument_list|,
name|hits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// rerank using the field final-score
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
DECL|method|testDifferentTopN
specifier|public
name|void
name|testDifferentTopN
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
specifier|final
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"0"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz oz oz oz oz"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"1"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz oz oz oz the"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|2.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"2"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz oz oz the the "
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|3.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"3"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz oz the the the the "
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|4.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newStringField
argument_list|(
literal|"id"
argument_list|,
literal|"4"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
literal|"wizard oz the the the the the the"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|FloatDocValuesField
argument_list|(
literal|"final-score"
argument_list|,
literal|5.0f
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Do ordinary BooleanQuery:
specifier|final
name|BooleanQuery
operator|.
name|Builder
name|bqBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bqBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"wizard"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|bqBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"oz"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|getSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// first run the standard query
name|TopDocs
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|bqBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|hits
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|3
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|4
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
literal|"final-score"
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
init|=
operator|new
name|ArrayList
argument_list|<
name|Normalizer
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|features
operator|.
name|size
argument_list|()
argument_list|,
name|IdentityNormalizer
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
init|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
argument_list|,
literal|"final-score"
argument_list|)
decl_stmt|;
specifier|final
name|LTRScoringModel
name|ltrScoringModel
init|=
name|TestLinearModel
operator|.
name|createLinearModel
argument_list|(
literal|"test"
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
literal|"test"
argument_list|,
name|allFeatures
argument_list|,
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|LTRRescorer
name|rescorer
init|=
operator|new
name|LTRRescorer
argument_list|(
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel
argument_list|)
argument_list|)
decl_stmt|;
comment|// rerank @ 0 should not change the order
name|hits
operator|=
name|rescorer
operator|.
name|rescore
argument_list|(
name|searcher
argument_list|,
name|hits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|3
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
literal|4
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test rerank with different topN cuts
for|for
control|(
name|int
name|topN
init|=
literal|1
init|;
name|topN
operator|<=
literal|5
condition|;
name|topN
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"rerank {} documents "
argument_list|,
name|topN
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bqBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
specifier|final
name|ScoreDoc
index|[]
name|slice
init|=
operator|new
name|ScoreDoc
index|[
name|topN
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|hits
operator|.
name|scoreDocs
argument_list|,
literal|0
argument_list|,
name|slice
argument_list|,
literal|0
argument_list|,
name|topN
argument_list|)
expr_stmt|;
name|hits
operator|=
operator|new
name|TopDocs
argument_list|(
name|hits
operator|.
name|totalHits
argument_list|,
name|slice
argument_list|,
name|hits
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
name|hits
operator|=
name|rescorer
operator|.
name|rescore
argument_list|(
name|searcher
argument_list|,
name|hits
argument_list|,
name|topN
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|topN
operator|-
literal|1
init|,
name|j
init|=
literal|0
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
operator|,
name|j
operator|++
control|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"doc {} in pos {}"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|j
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|hits
operator|.
name|scoreDocs
index|[
name|j
index|]
operator|.
name|score
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDocParam
specifier|public
name|void
name|testDocParam
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|test
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|test
operator|.
name|put
argument_list|(
literal|"fake"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|"final-score"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
init|=
operator|new
name|ArrayList
argument_list|<
name|Normalizer
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|features
operator|.
name|size
argument_list|()
argument_list|,
name|IdentityNormalizer
operator|.
name|INSTANCE
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
init|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
literal|"final-score"
argument_list|)
decl_stmt|;
name|MockModel
name|ltrScoringModel
init|=
operator|new
name|MockModel
argument_list|(
literal|"test"
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
literal|"test"
argument_list|,
name|allFeatures
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|LTRScoringQuery
name|query
init|=
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel
argument_list|)
decl_stmt|;
name|LTRScoringQuery
operator|.
name|ModelWeight
name|wgt
init|=
name|query
operator|.
name|createWeight
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
name|LTRScoringQuery
operator|.
name|ModelWeight
operator|.
name|ModelScorer
name|modelScr
init|=
name|wgt
operator|.
name|scorer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|modelScr
operator|.
name|getDocInfo
argument_list|()
operator|.
name|setOriginalDocScore
argument_list|(
operator|new
name|Float
argument_list|(
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Scorer
operator|.
name|ChildScorer
name|feat
range|:
name|modelScr
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
operator|(
operator|(
name|Feature
operator|.
name|FeatureWeight
operator|.
name|FeatureScorer
operator|)
name|feat
operator|.
name|child
operator|)
operator|.
name|getDocInfo
argument_list|()
operator|.
name|getOriginalDocScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|features
operator|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|,
literal|"final-score"
argument_list|)
expr_stmt|;
name|norms
operator|=
operator|new
name|ArrayList
argument_list|<
name|Normalizer
argument_list|>
argument_list|(
name|Collections
operator|.
name|nCopies
argument_list|(
name|features
operator|.
name|size
argument_list|()
argument_list|,
name|IdentityNormalizer
operator|.
name|INSTANCE
argument_list|)
argument_list|)
expr_stmt|;
name|allFeatures
operator|=
name|makeFieldValueFeatures
argument_list|(
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|,
literal|3
block|,
literal|4
block|,
literal|5
block|,
literal|6
block|,
literal|7
block|,
literal|8
block|,
literal|9
block|}
argument_list|,
literal|"final-score"
argument_list|)
expr_stmt|;
name|ltrScoringModel
operator|=
operator|new
name|MockModel
argument_list|(
literal|"test"
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
literal|"test"
argument_list|,
name|allFeatures
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel
argument_list|)
expr_stmt|;
name|wgt
operator|=
name|query
operator|.
name|createWeight
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|,
literal|1f
argument_list|)
expr_stmt|;
name|modelScr
operator|=
name|wgt
operator|.
name|scorer
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|modelScr
operator|.
name|getDocInfo
argument_list|()
operator|.
name|setOriginalDocScore
argument_list|(
operator|new
name|Float
argument_list|(
literal|1f
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Scorer
operator|.
name|ChildScorer
name|feat
range|:
name|modelScr
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|assertNotNull
argument_list|(
operator|(
operator|(
name|Feature
operator|.
name|FeatureWeight
operator|.
name|FeatureScorer
operator|)
name|feat
operator|.
name|child
operator|)
operator|.
name|getDocInfo
argument_list|()
operator|.
name|getOriginalDocScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

