begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|DocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_comment
comment|/**  * This feature returns the original score that the document had before performing  * the reranking.  * Example configuration:  *<pre>{   "name":  "originalScore",   "class": "org.apache.solr.ltr.feature.OriginalScoreFeature",   "params": { } }</pre>  **/
end_comment

begin_class
DECL|class|OriginalScoreFeature
specifier|public
class|class
name|OriginalScoreFeature
extends|extends
name|Feature
block|{
DECL|method|OriginalScoreFeature
specifier|public
name|OriginalScoreFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|paramsToMap
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramsToMap
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|FeatureException
block|{   }
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|OriginalScoreWeight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|OriginalScoreWeight
argument_list|(
name|searcher
argument_list|,
name|request
argument_list|,
name|originalQuery
argument_list|,
name|efi
argument_list|)
return|;
block|}
DECL|class|OriginalScoreWeight
specifier|public
class|class
name|OriginalScoreWeight
extends|extends
name|FeatureWeight
block|{
DECL|field|w
specifier|final
name|Weight
name|w
decl_stmt|;
DECL|method|OriginalScoreWeight
specifier|public
name|OriginalScoreWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|OriginalScoreFeature
operator|.
name|this
argument_list|,
name|searcher
argument_list|,
name|request
argument_list|,
name|originalQuery
argument_list|,
name|efi
argument_list|)
expr_stmt|;
name|w
operator|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|originalQuery
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"OriginalScoreFeature [query:"
operator|+
name|originalQuery
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
return|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|FeatureScorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Scorer
name|originalScorer
init|=
name|w
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
return|return
operator|new
name|OriginalScoreScorer
argument_list|(
name|this
argument_list|,
name|originalScorer
argument_list|)
return|;
block|}
DECL|class|OriginalScoreScorer
specifier|public
class|class
name|OriginalScoreScorer
extends|extends
name|FeatureScorer
block|{
DECL|field|originalScorer
specifier|final
specifier|private
name|Scorer
name|originalScorer
decl_stmt|;
DECL|method|OriginalScoreScorer
specifier|public
name|OriginalScoreScorer
parameter_list|(
name|FeatureWeight
name|weight
parameter_list|,
name|Scorer
name|originalScorer
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|originalScorer
operator|=
name|originalScorer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
comment|// This is done to improve the speed of feature extraction. Since this
comment|// was already scored in step 1
comment|// we shouldn't need to calc original score again.
specifier|final
name|DocInfo
name|docInfo
init|=
name|getDocInfo
argument_list|()
decl_stmt|;
return|return
operator|(
name|docInfo
operator|.
name|hasOriginalDocScore
argument_list|()
condition|?
name|docInfo
operator|.
name|getOriginalDocScore
argument_list|()
else|:
name|originalScorer
operator|.
name|score
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|originalScorer
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|originalScorer
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

