begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * FeatureLogger can be registered in a model and provide a strategy for logging  * the feature values.  */
end_comment

begin_class
DECL|class|FeatureLogger
specifier|public
specifier|abstract
class|class
name|FeatureLogger
parameter_list|<
name|FV_TYPE
parameter_list|>
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/** the name of the cache using for storing the feature value **/
DECL|field|QUERY_FV_CACHE_NAME
specifier|private
specifier|static
specifier|final
name|String
name|QUERY_FV_CACHE_NAME
init|=
literal|"QUERY_DOC_FV"
decl_stmt|;
DECL|enum|FeatureFormat
DECL|enum constant|DENSE
DECL|enum constant|SPARSE
specifier|protected
enum|enum
name|FeatureFormat
block|{
name|DENSE
block|,
name|SPARSE
block|}
empty_stmt|;
DECL|field|featureFormat
specifier|protected
specifier|final
name|FeatureFormat
name|featureFormat
decl_stmt|;
DECL|method|FeatureLogger
specifier|protected
name|FeatureLogger
parameter_list|(
name|FeatureFormat
name|f
parameter_list|)
block|{
name|this
operator|.
name|featureFormat
operator|=
name|f
expr_stmt|;
block|}
comment|/**    * Log will be called every time that the model generates the feature values    * for a document and a query.    *    * @param docid    *          Solr document id whose features we are saving    * @param featuresInfo    *          List of all the {@link LTRScoringQuery.FeatureInfo} objects which contain name and value    *          for all the features triggered by the result set    * @return true if the logger successfully logged the features, false    *         otherwise.    */
DECL|method|log
specifier|public
name|boolean
name|log
parameter_list|(
name|int
name|docid
parameter_list|,
name|LTRScoringQuery
name|scoringQuery
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|,
name|LTRScoringQuery
operator|.
name|FeatureInfo
index|[]
name|featuresInfo
parameter_list|)
block|{
specifier|final
name|FV_TYPE
name|featureVector
init|=
name|makeFeatureVector
argument_list|(
name|featuresInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|featureVector
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|searcher
operator|.
name|cacheInsert
argument_list|(
name|QUERY_FV_CACHE_NAME
argument_list|,
name|fvCacheKey
argument_list|(
name|scoringQuery
argument_list|,
name|docid
argument_list|)
argument_list|,
name|featureVector
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * returns a FeatureLogger that logs the features in output, using the format    * specified in the 'stringFormat' param: 'csv' will log the features as a unique    * string in csv format 'json' will log the features in a map in a Map of    * featureName keys to featureValue values if format is null or empty, csv    * format will be selected.    * 'featureFormat' param: 'dense' will write features in dense format,    * 'sparse' will write the features in sparse format, null or empty will    * default to 'sparse'    *    *    * @return a feature logger for the format specified.    */
DECL|method|createFeatureLogger
specifier|public
specifier|static
name|FeatureLogger
argument_list|<
name|?
argument_list|>
name|createFeatureLogger
parameter_list|(
name|String
name|stringFormat
parameter_list|,
name|String
name|featureFormat
parameter_list|)
block|{
specifier|final
name|FeatureFormat
name|f
decl_stmt|;
if|if
condition|(
name|featureFormat
operator|==
literal|null
operator|||
name|featureFormat
operator|.
name|isEmpty
argument_list|()
operator|||
name|featureFormat
operator|.
name|equals
argument_list|(
literal|"sparse"
argument_list|)
condition|)
block|{
name|f
operator|=
name|FeatureFormat
operator|.
name|SPARSE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|featureFormat
operator|.
name|equals
argument_list|(
literal|"dense"
argument_list|)
condition|)
block|{
name|f
operator|=
name|FeatureFormat
operator|.
name|DENSE
expr_stmt|;
block|}
else|else
block|{
name|f
operator|=
name|FeatureFormat
operator|.
name|SPARSE
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"unknown feature logger feature format {} | {}"
argument_list|,
name|stringFormat
argument_list|,
name|featureFormat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|stringFormat
operator|==
literal|null
operator|)
operator|||
name|stringFormat
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
operator|new
name|CSVFeatureLogger
argument_list|(
name|f
argument_list|)
return|;
block|}
if|if
condition|(
name|stringFormat
operator|.
name|equals
argument_list|(
literal|"csv"
argument_list|)
condition|)
block|{
return|return
operator|new
name|CSVFeatureLogger
argument_list|(
name|f
argument_list|)
return|;
block|}
if|if
condition|(
name|stringFormat
operator|.
name|equals
argument_list|(
literal|"json"
argument_list|)
condition|)
block|{
return|return
operator|new
name|MapFeatureLogger
argument_list|(
name|f
argument_list|)
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"unknown feature logger string format {} | {}"
argument_list|,
name|stringFormat
argument_list|,
name|featureFormat
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
DECL|method|makeFeatureVector
specifier|public
specifier|abstract
name|FV_TYPE
name|makeFeatureVector
parameter_list|(
name|LTRScoringQuery
operator|.
name|FeatureInfo
index|[]
name|featuresInfo
parameter_list|)
function_decl|;
DECL|method|fvCacheKey
specifier|private
specifier|static
name|int
name|fvCacheKey
parameter_list|(
name|LTRScoringQuery
name|scoringQuery
parameter_list|,
name|int
name|docid
parameter_list|)
block|{
return|return
name|scoringQuery
operator|.
name|hashCode
argument_list|()
operator|+
operator|(
literal|31
operator|*
name|docid
operator|)
return|;
block|}
comment|/**    * populate the document with its feature vector    *    * @param docid    *          Solr document id    * @return String representation of the list of features calculated for docid    */
DECL|method|getFeatureVector
specifier|public
name|FV_TYPE
name|getFeatureVector
parameter_list|(
name|int
name|docid
parameter_list|,
name|LTRScoringQuery
name|scoringQuery
parameter_list|,
name|SolrIndexSearcher
name|searcher
parameter_list|)
block|{
return|return
operator|(
name|FV_TYPE
operator|)
name|searcher
operator|.
name|cacheLookup
argument_list|(
name|QUERY_FV_CACHE_NAME
argument_list|,
name|fvCacheKey
argument_list|(
name|scoringQuery
argument_list|,
name|docid
argument_list|)
argument_list|)
return|;
block|}
DECL|class|MapFeatureLogger
specifier|public
specifier|static
class|class
name|MapFeatureLogger
extends|extends
name|FeatureLogger
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|>
block|{
DECL|method|MapFeatureLogger
specifier|public
name|MapFeatureLogger
parameter_list|(
name|FeatureFormat
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|makeFeatureVector
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|makeFeatureVector
parameter_list|(
name|LTRScoringQuery
operator|.
name|FeatureInfo
index|[]
name|featuresInfo
parameter_list|)
block|{
name|boolean
name|isDense
init|=
name|featureFormat
operator|.
name|equals
argument_list|(
name|FeatureFormat
operator|.
name|DENSE
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
name|hashmap
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|featuresInfo
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|hashmap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Float
argument_list|>
argument_list|(
name|featuresInfo
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|LTRScoringQuery
operator|.
name|FeatureInfo
name|featInfo
range|:
name|featuresInfo
control|)
block|{
if|if
condition|(
name|featInfo
operator|.
name|isUsed
argument_list|()
operator|||
name|isDense
condition|)
block|{
name|hashmap
operator|.
name|put
argument_list|(
name|featInfo
operator|.
name|getName
argument_list|()
argument_list|,
name|featInfo
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|hashmap
return|;
block|}
block|}
DECL|class|CSVFeatureLogger
specifier|public
specifier|static
class|class
name|CSVFeatureLogger
extends|extends
name|FeatureLogger
argument_list|<
name|String
argument_list|>
block|{
DECL|field|sb
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|500
argument_list|)
decl_stmt|;
DECL|field|keyValueSep
name|char
name|keyValueSep
init|=
literal|':'
decl_stmt|;
DECL|field|featureSep
name|char
name|featureSep
init|=
literal|';'
decl_stmt|;
DECL|method|CSVFeatureLogger
specifier|public
name|CSVFeatureLogger
parameter_list|(
name|FeatureFormat
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
DECL|method|setKeyValueSep
specifier|public
name|CSVFeatureLogger
name|setKeyValueSep
parameter_list|(
name|char
name|keyValueSep
parameter_list|)
block|{
name|this
operator|.
name|keyValueSep
operator|=
name|keyValueSep
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|setFeatureSep
specifier|public
name|CSVFeatureLogger
name|setFeatureSep
parameter_list|(
name|char
name|featureSep
parameter_list|)
block|{
name|this
operator|.
name|featureSep
operator|=
name|featureSep
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|makeFeatureVector
specifier|public
name|String
name|makeFeatureVector
parameter_list|(
name|LTRScoringQuery
operator|.
name|FeatureInfo
index|[]
name|featuresInfo
parameter_list|)
block|{
name|boolean
name|isDense
init|=
name|featureFormat
operator|.
name|equals
argument_list|(
name|FeatureFormat
operator|.
name|DENSE
argument_list|)
decl_stmt|;
for|for
control|(
name|LTRScoringQuery
operator|.
name|FeatureInfo
name|featInfo
range|:
name|featuresInfo
control|)
block|{
if|if
condition|(
name|featInfo
operator|.
name|isUsed
argument_list|()
operator|||
name|isDense
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|featInfo
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|keyValueSep
argument_list|)
operator|.
name|append
argument_list|(
name|featInfo
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|featureSep
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|String
name|features
init|=
operator|(
name|sb
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|?
name|sb
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
literal|""
operator|)
decl_stmt|;
name|sb
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|features
return|;
block|}
block|}
block|}
end_class

end_unit

