begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_comment
comment|/**  * This feature allows to return a constant given value for the current document.  *  * Example configuration:  *<pre>{    "name" : "userFromMobile",    "class" : "org.apache.solr.ltr.feature.ValueFeature",    "params" : { "value" : "${userFromMobile}", "required":true }  }</pre>  *  *You can place a constant value like "1.3f" in the value params, but many times you  *would want to pass in external information to use per request. For instance, maybe  *you want to rank things differently if the search came from a mobile device, or maybe  *you want to use your external query intent system as a feature.  *In the rerank request you can pass in rq={... efi.userFromMobile=1}, and the above  *feature will return 1 for all the docs for that request.  If required is set to true,  *the request will return an error since you failed to pass in the efi, otherwise if will  *just skip the feature and use a default value of 0 instead.  **/
end_comment

begin_class
DECL|class|ValueFeature
specifier|public
class|class
name|ValueFeature
extends|extends
name|Feature
block|{
DECL|field|configValue
specifier|private
name|float
name|configValue
init|=
operator|-
literal|1f
decl_stmt|;
DECL|field|configValueStr
specifier|private
name|String
name|configValueStr
init|=
literal|null
decl_stmt|;
DECL|field|value
specifier|private
name|Object
name|value
init|=
literal|null
decl_stmt|;
DECL|field|required
specifier|private
name|Boolean
name|required
init|=
literal|null
decl_stmt|;
DECL|method|getValue
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
DECL|method|setValue
specifier|public
name|void
name|setValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|configValueStr
operator|=
operator|(
name|String
operator|)
name|value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Double
condition|)
block|{
name|configValue
operator|=
operator|(
operator|(
name|Double
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Float
condition|)
block|{
name|configValue
operator|=
operator|(
operator|(
name|Float
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Integer
condition|)
block|{
name|configValue
operator|=
operator|(
operator|(
name|Integer
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|value
operator|instanceof
name|Long
condition|)
block|{
name|configValue
operator|=
operator|(
operator|(
name|Long
operator|)
name|value
operator|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
literal|"Invalid type for 'value' in params for "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
DECL|method|isRequired
specifier|public
name|boolean
name|isRequired
parameter_list|()
block|{
return|return
name|Boolean
operator|.
name|TRUE
operator|.
name|equals
argument_list|(
name|required
argument_list|)
return|;
block|}
DECL|method|setRequired
specifier|public
name|void
name|setRequired
parameter_list|(
name|boolean
name|required
parameter_list|)
block|{
name|this
operator|.
name|required
operator|=
name|required
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|paramsToMap
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramsToMap
parameter_list|()
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|2
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"value"
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"required"
argument_list|,
name|required
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|FeatureException
block|{
if|if
condition|(
name|configValueStr
operator|!=
literal|null
operator|&&
name|configValueStr
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
literal|"Empty field 'value' in params for "
operator|+
name|this
argument_list|)
throw|;
block|}
block|}
DECL|method|ValueFeature
specifier|public
name|ValueFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|FeatureWeight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ValueFeatureWeight
argument_list|(
name|searcher
argument_list|,
name|request
argument_list|,
name|originalQuery
argument_list|,
name|efi
argument_list|)
return|;
block|}
DECL|class|ValueFeatureWeight
specifier|public
class|class
name|ValueFeatureWeight
extends|extends
name|FeatureWeight
block|{
DECL|field|featureValue
specifier|final
specifier|protected
name|Float
name|featureValue
decl_stmt|;
DECL|method|ValueFeatureWeight
specifier|public
name|ValueFeatureWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
block|{
name|super
argument_list|(
name|ValueFeature
operator|.
name|this
argument_list|,
name|searcher
argument_list|,
name|request
argument_list|,
name|originalQuery
argument_list|,
name|efi
argument_list|)
expr_stmt|;
if|if
condition|(
name|configValueStr
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|expandedValue
init|=
name|macroExpander
operator|.
name|expand
argument_list|(
name|configValueStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|expandedValue
operator|!=
literal|null
condition|)
block|{
name|featureValue
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|expandedValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isRequired
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" requires efi parameter that was not passed in request."
argument_list|)
throw|;
block|}
else|else
block|{
name|featureValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
else|else
block|{
name|featureValue
operator|=
name|configValue
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|FeatureScorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|featureValue
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ValueFeatureScorer
argument_list|(
name|this
argument_list|,
name|featureValue
argument_list|,
name|DocIdSetIterator
operator|.
name|all
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

