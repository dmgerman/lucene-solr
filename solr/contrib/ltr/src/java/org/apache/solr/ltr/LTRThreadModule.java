begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|SynchronousQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|DefaultSolrThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|plugin
operator|.
name|NamedListInitializedPlugin
import|;
end_import

begin_comment
comment|/**  * The LTRThreadModule is optionally used by the {@link org.apache.solr.ltr.search.LTRQParserPlugin} and  * {@link org.apache.solr.ltr.response.transform.LTRFeatureLoggerTransformerFactory LTRFeatureLoggerTransformerFactory}  * classes to parallelize the creation of {@link org.apache.solr.ltr.feature.Feature.FeatureWeight Feature.FeatureWeight}  * objects.  *<p>  * Example configuration:  *<pre>&lt;queryParser name="ltr" class="org.apache.solr.ltr.search.LTRQParserPlugin"&gt;&lt;int name="threadModule.totalPoolThreads"&gt;10&lt;/int&gt;&lt;int name="threadModule.numThreadsPerRequest"&gt;5&lt;/int&gt;&lt;/queryParser&gt;&lt;transformer name="features" class="org.apache.solr.ltr.response.transform.LTRFeatureLoggerTransformerFactory"&gt;&lt;int name="threadModule.totalPoolThreads"&gt;10&lt;/int&gt;&lt;int name="threadModule.numThreadsPerRequest"&gt;5&lt;/int&gt;&lt;/transformer&gt;</pre>  * If an individual solr instance is expected to receive no more than one query at a time, it is best  * to set<code>totalPoolThreads</code> and<code>numThreadsPerRequest</code> to the same value.  *  * If multiple queries need to be serviced simultaneously then<code>totalPoolThreads</code> and  *<code>numThreadsPerRequest</code> can be adjusted based on the expected response times.  *  * If the value of<code>numThreadsPerRequest</code> is higher, the response time for a single query  * will be improved up to a point. If multiple queries are serviced simultaneously, the value of  *<code>totalPoolThreads</code> imposes a contention between the queries if  *<code>(totalPoolThreads&lt; numThreadsPerRequest * total parallel queries)</code>.  */
end_comment

begin_class
DECL|class|LTRThreadModule
specifier|final
specifier|public
class|class
name|LTRThreadModule
implements|implements
name|NamedListInitializedPlugin
block|{
DECL|method|getInstance
specifier|public
specifier|static
name|LTRThreadModule
name|getInstance
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
specifier|final
name|LTRThreadModule
name|threadManager
decl_stmt|;
specifier|final
name|NamedList
name|threadManagerArgs
init|=
name|extractThreadModuleParams
argument_list|(
name|args
argument_list|)
decl_stmt|;
comment|// if and only if there are thread module args then we want a thread module!
if|if
condition|(
name|threadManagerArgs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// create and initialize the new instance
name|threadManager
operator|=
operator|new
name|LTRThreadModule
argument_list|()
expr_stmt|;
name|threadManager
operator|.
name|init
argument_list|(
name|threadManagerArgs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|threadManager
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|threadManager
return|;
block|}
DECL|field|CONFIG_PREFIX
specifier|private
specifier|static
name|String
name|CONFIG_PREFIX
init|=
literal|"threadModule."
decl_stmt|;
DECL|method|extractThreadModuleParams
specifier|private
specifier|static
name|NamedList
name|extractThreadModuleParams
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
comment|// gather the thread module args from amongst the general args
specifier|final
name|NamedList
name|extractedArgs
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|it
init|=
name|args
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|startsWith
argument_list|(
name|CONFIG_PREFIX
argument_list|)
condition|)
block|{
name|extractedArgs
operator|.
name|add
argument_list|(
name|key
operator|.
name|substring
argument_list|(
name|CONFIG_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// remove consumed keys only once iteration is complete
comment|// since NamedList iterator does not support 'remove'
for|for
control|(
name|Object
name|key
range|:
name|extractedArgs
operator|.
name|asShallowMap
argument_list|()
operator|.
name|keySet
argument_list|()
control|)
block|{
name|args
operator|.
name|remove
argument_list|(
name|CONFIG_PREFIX
operator|+
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|extractedArgs
return|;
block|}
comment|// settings
DECL|field|totalPoolThreads
specifier|private
name|int
name|totalPoolThreads
init|=
literal|1
decl_stmt|;
DECL|field|numThreadsPerRequest
specifier|private
name|int
name|numThreadsPerRequest
init|=
literal|1
decl_stmt|;
DECL|field|maxPoolSize
specifier|private
name|int
name|maxPoolSize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|keepAliveTimeSeconds
specifier|private
name|long
name|keepAliveTimeSeconds
init|=
literal|10
decl_stmt|;
DECL|field|threadNamePrefix
specifier|private
name|String
name|threadNamePrefix
init|=
literal|"ltrExecutor"
decl_stmt|;
comment|// implementation
DECL|field|ltrSemaphore
specifier|private
name|Semaphore
name|ltrSemaphore
decl_stmt|;
DECL|field|createWeightScoreExecutor
specifier|private
name|Executor
name|createWeightScoreExecutor
decl_stmt|;
DECL|method|LTRThreadModule
specifier|public
name|LTRThreadModule
parameter_list|()
block|{   }
comment|// For test use only.
DECL|method|LTRThreadModule
name|LTRThreadModule
parameter_list|(
name|int
name|totalPoolThreads
parameter_list|,
name|int
name|numThreadsPerRequest
parameter_list|)
block|{
name|this
operator|.
name|totalPoolThreads
operator|=
name|totalPoolThreads
expr_stmt|;
name|this
operator|.
name|numThreadsPerRequest
operator|=
name|numThreadsPerRequest
expr_stmt|;
name|init
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
name|NamedList
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|!=
literal|null
condition|)
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|validate
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|totalPoolThreads
operator|>
literal|1
condition|)
block|{
name|ltrSemaphore
operator|=
operator|new
name|Semaphore
argument_list|(
name|totalPoolThreads
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ltrSemaphore
operator|=
literal|null
expr_stmt|;
block|}
name|createWeightScoreExecutor
operator|=
operator|new
name|ExecutorUtil
operator|.
name|MDCAwareThreadPoolExecutor
argument_list|(
literal|0
argument_list|,
name|maxPoolSize
argument_list|,
name|keepAliveTimeSeconds
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|,
comment|// terminate idle threads after 10 sec
operator|new
name|SynchronousQueue
argument_list|<
name|Runnable
argument_list|>
argument_list|()
argument_list|,
comment|// directly hand off tasks
operator|new
name|DefaultSolrThreadFactory
argument_list|(
name|threadNamePrefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|validate
specifier|private
name|void
name|validate
parameter_list|()
block|{
if|if
condition|(
name|totalPoolThreads
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"totalPoolThreads cannot be less than 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|numThreadsPerRequest
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"numThreadsPerRequest cannot be less than 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|totalPoolThreads
operator|<
name|numThreadsPerRequest
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"numThreadsPerRequest cannot be greater than totalPoolThreads"
argument_list|)
throw|;
block|}
block|}
DECL|method|setTotalPoolThreads
specifier|public
name|void
name|setTotalPoolThreads
parameter_list|(
name|int
name|totalPoolThreads
parameter_list|)
block|{
name|this
operator|.
name|totalPoolThreads
operator|=
name|totalPoolThreads
expr_stmt|;
block|}
DECL|method|setNumThreadsPerRequest
specifier|public
name|void
name|setNumThreadsPerRequest
parameter_list|(
name|int
name|numThreadsPerRequest
parameter_list|)
block|{
name|this
operator|.
name|numThreadsPerRequest
operator|=
name|numThreadsPerRequest
expr_stmt|;
block|}
DECL|method|setMaxPoolSize
specifier|public
name|void
name|setMaxPoolSize
parameter_list|(
name|int
name|maxPoolSize
parameter_list|)
block|{
name|this
operator|.
name|maxPoolSize
operator|=
name|maxPoolSize
expr_stmt|;
block|}
DECL|method|setKeepAliveTimeSeconds
specifier|public
name|void
name|setKeepAliveTimeSeconds
parameter_list|(
name|long
name|keepAliveTimeSeconds
parameter_list|)
block|{
name|this
operator|.
name|keepAliveTimeSeconds
operator|=
name|keepAliveTimeSeconds
expr_stmt|;
block|}
DECL|method|setThreadNamePrefix
specifier|public
name|void
name|setThreadNamePrefix
parameter_list|(
name|String
name|threadNamePrefix
parameter_list|)
block|{
name|this
operator|.
name|threadNamePrefix
operator|=
name|threadNamePrefix
expr_stmt|;
block|}
DECL|method|createQuerySemaphore
specifier|public
name|Semaphore
name|createQuerySemaphore
parameter_list|()
block|{
return|return
operator|(
name|numThreadsPerRequest
operator|>
literal|1
condition|?
operator|new
name|Semaphore
argument_list|(
name|numThreadsPerRequest
argument_list|)
else|:
literal|null
operator|)
return|;
block|}
DECL|method|acquireLTRSemaphore
specifier|public
name|void
name|acquireLTRSemaphore
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ltrSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
DECL|method|releaseLTRSemaphore
specifier|public
name|void
name|releaseLTRSemaphore
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|ltrSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|createWeightScoreExecutor
operator|.
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

