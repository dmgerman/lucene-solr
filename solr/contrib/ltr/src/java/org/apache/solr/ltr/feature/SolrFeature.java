begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|LocalSolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SolrIndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import

begin_comment
comment|/**  * This feature allows you to reuse any Solr query as a feature. The value  * of the feature will be the score of the given query for the current document.  * See<a href="https://cwiki.apache.org/confluence/display/solr/Other+Parsers">Solr documentation of other parsers</a> you can use as a feature.  * Example configurations:  *<pre>[{ "name": "isBook",   "class": "org.apache.solr.ltr.feature.SolrFeature",   "params":{ "fq": ["{!terms f=category}book"] } }, {   "name":  "documentRecency",   "class": "org.apache.solr.ltr.feature.SolrFeature",   "params": {       "q": "{!func}recip( ms(NOW,publish_date), 3.16e-11, 1, 1)"   } }]</pre>  **/
end_comment

begin_class
DECL|class|SolrFeature
specifier|public
class|class
name|SolrFeature
extends|extends
name|Feature
block|{
DECL|field|df
specifier|private
name|String
name|df
decl_stmt|;
DECL|field|q
specifier|private
name|String
name|q
decl_stmt|;
DECL|field|fq
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|fq
decl_stmt|;
DECL|method|getDf
specifier|public
name|String
name|getDf
parameter_list|()
block|{
return|return
name|df
return|;
block|}
DECL|method|setDf
specifier|public
name|void
name|setDf
parameter_list|(
name|String
name|df
parameter_list|)
block|{
name|this
operator|.
name|df
operator|=
name|df
expr_stmt|;
block|}
DECL|method|getQ
specifier|public
name|String
name|getQ
parameter_list|()
block|{
return|return
name|q
return|;
block|}
DECL|method|setQ
specifier|public
name|void
name|setQ
parameter_list|(
name|String
name|q
parameter_list|)
block|{
name|this
operator|.
name|q
operator|=
name|q
expr_stmt|;
block|}
DECL|method|getFq
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFq
parameter_list|()
block|{
return|return
name|fq
return|;
block|}
DECL|method|setFq
specifier|public
name|void
name|setFq
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|fq
parameter_list|)
block|{
name|this
operator|.
name|fq
operator|=
name|fq
expr_stmt|;
block|}
DECL|method|SolrFeature
specifier|public
name|SolrFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|paramsToMap
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramsToMap
parameter_list|()
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|3
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
if|if
condition|(
name|df
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"df"
argument_list|,
name|df
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|q
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"q"
argument_list|,
name|q
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fq
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
literal|"fq"
argument_list|,
name|fq
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|FeatureWeight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SolrFeatureWeight
argument_list|(
name|searcher
argument_list|,
name|request
argument_list|,
name|originalQuery
argument_list|,
name|efi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|FeatureException
block|{
if|if
condition|(
operator|(
name|q
operator|==
literal|null
operator|||
name|q
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
operator|(
name|fq
operator|==
literal|null
operator|)
operator|||
name|fq
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": Q or FQ must be provided"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Weight for a SolrFeature    **/
DECL|class|SolrFeatureWeight
specifier|public
class|class
name|SolrFeatureWeight
extends|extends
name|FeatureWeight
block|{
DECL|field|solrQueryWeight
specifier|final
specifier|private
name|Weight
name|solrQueryWeight
decl_stmt|;
DECL|field|query
specifier|final
specifier|private
name|Query
name|query
decl_stmt|;
DECL|field|queryAndFilters
specifier|final
specifier|private
name|List
argument_list|<
name|Query
argument_list|>
name|queryAndFilters
decl_stmt|;
DECL|method|SolrFeatureWeight
specifier|public
name|SolrFeatureWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|SolrFeature
operator|.
name|this
argument_list|,
name|searcher
argument_list|,
name|request
argument_list|,
name|originalQuery
argument_list|,
name|efi
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|solrQuery
init|=
name|q
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|fqs
init|=
name|fq
decl_stmt|;
if|if
condition|(
operator|(
name|solrQuery
operator|==
literal|null
operator|)
operator|||
name|solrQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|solrQuery
operator|=
literal|"*:*"
expr_stmt|;
block|}
name|solrQuery
operator|=
name|macroExpander
operator|.
name|expand
argument_list|(
name|solrQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|solrQuery
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" requires efi parameter that was not passed in request."
argument_list|)
throw|;
block|}
specifier|final
name|SolrQueryRequest
name|req
init|=
name|makeRequest
argument_list|(
name|request
operator|.
name|getCore
argument_list|()
argument_list|,
name|solrQuery
argument_list|,
name|fqs
argument_list|,
name|df
argument_list|)
decl_stmt|;
if|if
condition|(
name|req
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"ERROR: No parameters provided"
argument_list|)
throw|;
block|}
comment|// Build the filter queries
name|queryAndFilters
operator|=
operator|new
name|ArrayList
argument_list|<
name|Query
argument_list|>
argument_list|()
expr_stmt|;
comment|// If there are no fqs we just want an empty list
if|if
condition|(
name|fqs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|fq
range|:
name|fqs
control|)
block|{
if|if
condition|(
operator|(
name|fq
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|fq
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|fq
operator|=
name|macroExpander
operator|.
name|expand
argument_list|(
name|fq
argument_list|)
expr_stmt|;
if|if
condition|(
name|fq
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|" requires efi parameter that was not passed in request."
argument_list|)
throw|;
block|}
specifier|final
name|QParser
name|fqp
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|fq
argument_list|,
name|req
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|filterQuery
init|=
name|fqp
operator|.
name|getQuery
argument_list|()
decl_stmt|;
if|if
condition|(
name|filterQuery
operator|!=
literal|null
condition|)
block|{
name|queryAndFilters
operator|.
name|add
argument_list|(
name|filterQuery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|final
name|QParser
name|parser
init|=
name|QParser
operator|.
name|getParser
argument_list|(
name|solrQuery
argument_list|,
name|req
argument_list|)
decl_stmt|;
name|query
operator|=
name|parser
operator|.
name|parse
argument_list|()
expr_stmt|;
comment|// Query can be null if there was no input to parse, for instance if you
comment|// make a phrase query with "to be", and the analyzer removes all the
comment|// words
comment|// leaving nothing for the phrase query to parse.
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|queryAndFilters
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|solrQueryWeight
operator|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|solrQueryWeight
operator|=
literal|null
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SyntaxError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
literal|"Failed to parse feature query."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|makeRequest
specifier|private
name|LocalSolrQueryRequest
name|makeRequest
parameter_list|(
name|SolrCore
name|core
parameter_list|,
name|String
name|solrQuery
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|fqs
parameter_list|,
name|String
name|df
parameter_list|)
block|{
specifier|final
name|NamedList
argument_list|<
name|String
argument_list|>
name|returnList
init|=
operator|new
name|NamedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|solrQuery
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|solrQuery
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|returnList
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|Q
argument_list|,
name|solrQuery
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fqs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|fq
range|:
name|fqs
control|)
block|{
name|returnList
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|FQ
argument_list|,
name|fq
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|df
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|df
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|returnList
operator|.
name|add
argument_list|(
name|CommonParams
operator|.
name|DF
argument_list|,
name|df
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|returnList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|LocalSolrQueryRequest
argument_list|(
name|core
argument_list|,
name|returnList
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
if|if
condition|(
name|solrQueryWeight
operator|!=
literal|null
condition|)
block|{
name|solrQueryWeight
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|FeatureScorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|solrScorer
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|solrQueryWeight
operator|!=
literal|null
condition|)
block|{
name|solrScorer
operator|=
name|solrQueryWeight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DocIdSetIterator
name|idItr
init|=
name|getDocIdSetIteratorFromQueries
argument_list|(
name|queryAndFilters
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|idItr
operator|!=
literal|null
condition|)
block|{
return|return
name|solrScorer
operator|==
literal|null
condition|?
operator|new
name|ValueFeatureScorer
argument_list|(
name|this
argument_list|,
literal|1f
argument_list|,
name|idItr
argument_list|)
else|:
operator|new
name|SolrFeatureScorer
argument_list|(
name|this
argument_list|,
name|solrScorer
argument_list|,
operator|new
name|SolrFeatureScorerIterator
argument_list|(
name|idItr
argument_list|,
name|solrScorer
operator|.
name|iterator
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Given a list of Solr filters/queries, return a doc iterator that      * traverses over the documents that matched all the criteria of the      * queries.      *      * @param queries      *          Filtering criteria to match documents against      * @param context      *          Index reader      * @return DocIdSetIterator to traverse documents that matched all filter      *         criteria      */
DECL|method|getDocIdSetIteratorFromQueries
specifier|private
name|DocIdSetIterator
name|getDocIdSetIteratorFromQueries
parameter_list|(
name|List
argument_list|<
name|Query
argument_list|>
name|queries
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrIndexSearcher
operator|.
name|ProcessedFilter
name|pf
init|=
operator|(
operator|(
name|SolrIndexSearcher
operator|)
name|searcher
operator|)
operator|.
name|getProcessedFilter
argument_list|(
literal|null
argument_list|,
name|queries
argument_list|)
decl_stmt|;
specifier|final
name|Bits
name|liveDocs
init|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getLiveDocs
argument_list|()
decl_stmt|;
name|DocIdSetIterator
name|idIter
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pf
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DocIdSet
name|idSet
init|=
name|pf
operator|.
name|filter
operator|.
name|getDocIdSet
argument_list|(
name|context
argument_list|,
name|liveDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|idSet
operator|!=
literal|null
condition|)
block|{
name|idIter
operator|=
name|idSet
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|idIter
return|;
block|}
comment|/**      * Scorer for a SolrFeature      **/
DECL|class|SolrFeatureScorer
specifier|public
class|class
name|SolrFeatureScorer
extends|extends
name|FeatureScorer
block|{
DECL|field|solrScorer
specifier|final
specifier|private
name|Scorer
name|solrScorer
decl_stmt|;
DECL|method|SolrFeatureScorer
specifier|public
name|SolrFeatureScorer
parameter_list|(
name|FeatureWeight
name|weight
parameter_list|,
name|Scorer
name|solrScorer
parameter_list|,
name|SolrFeatureScorerIterator
name|itr
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|itr
argument_list|)
expr_stmt|;
name|this
operator|.
name|solrScorer
operator|=
name|solrScorer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
return|return
name|solrScorer
operator|.
name|score
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
literal|"Unable to extract feature for "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * An iterator that allows to iterate only on the documents for which a feature has      * a value.      **/
DECL|class|SolrFeatureScorerIterator
specifier|public
class|class
name|SolrFeatureScorerIterator
extends|extends
name|DocIdSetIterator
block|{
DECL|field|filterIterator
specifier|final
specifier|private
name|DocIdSetIterator
name|filterIterator
decl_stmt|;
DECL|field|scorerFilter
specifier|final
specifier|private
name|DocIdSetIterator
name|scorerFilter
decl_stmt|;
DECL|method|SolrFeatureScorerIterator
name|SolrFeatureScorerIterator
parameter_list|(
name|DocIdSetIterator
name|filterIterator
parameter_list|,
name|DocIdSetIterator
name|scorerFilter
parameter_list|)
block|{
name|this
operator|.
name|filterIterator
operator|=
name|filterIterator
expr_stmt|;
name|this
operator|.
name|scorerFilter
operator|=
name|scorerFilter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|filterIterator
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|docID
init|=
name|filterIterator
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
name|scorerFilter
operator|.
name|advance
argument_list|(
name|docID
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
comment|// We use iterator to catch the scorer up since
comment|// that checks if the target id is in the query + all the filters
name|int
name|docID
init|=
name|filterIterator
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|scorerFilter
operator|.
name|advance
argument_list|(
name|docID
argument_list|)
expr_stmt|;
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|filterIterator
operator|.
name|cost
argument_list|()
operator|+
name|scorerFilter
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

