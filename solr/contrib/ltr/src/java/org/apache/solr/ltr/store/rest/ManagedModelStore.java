begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.store.rest
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrCore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LTRScoringModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|ModelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|IdentityNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|Normalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|FeatureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|ModelStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|response
operator|.
name|SolrQueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|BaseSolrResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceStorage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Menaged resource for storing a model  */
end_comment

begin_class
DECL|class|ManagedModelStore
specifier|public
class|class
name|ManagedModelStore
extends|extends
name|ManagedResource
implements|implements
name|ManagedResource
operator|.
name|ChildResourceSupport
block|{
DECL|method|registerManagedModelStore
specifier|public
specifier|static
name|void
name|registerManagedModelStore
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|ManagedResourceObserver
name|managedResourceObserver
parameter_list|)
block|{
name|solrResourceLoader
operator|.
name|getManagedResourceRegistry
argument_list|()
operator|.
name|registerManagedResource
argument_list|(
name|REST_END_POINT
argument_list|,
name|ManagedModelStore
operator|.
name|class
argument_list|,
name|managedResourceObserver
argument_list|)
expr_stmt|;
block|}
DECL|method|getManagedModelStore
specifier|public
specifier|static
name|ManagedModelStore
name|getManagedModelStore
parameter_list|(
name|SolrCore
name|core
parameter_list|)
block|{
return|return
operator|(
name|ManagedModelStore
operator|)
name|core
operator|.
name|getRestManager
argument_list|()
operator|.
name|getManagedResource
argument_list|(
name|REST_END_POINT
argument_list|)
return|;
block|}
comment|/** the model store rest endpoint **/
DECL|field|REST_END_POINT
specifier|public
specifier|static
specifier|final
name|String
name|REST_END_POINT
init|=
literal|"/schema/model-store"
decl_stmt|;
comment|/**    * Managed model store: the name of the attribute containing all the models of    * a model store    **/
DECL|field|MODELS_JSON_FIELD
specifier|private
specifier|static
specifier|final
name|String
name|MODELS_JSON_FIELD
init|=
literal|"models"
decl_stmt|;
comment|/** name of the attribute containing a class **/
DECL|field|CLASS_KEY
specifier|static
specifier|final
name|String
name|CLASS_KEY
init|=
literal|"class"
decl_stmt|;
comment|/** name of the attribute containing the features **/
DECL|field|FEATURES_KEY
specifier|static
specifier|final
name|String
name|FEATURES_KEY
init|=
literal|"features"
decl_stmt|;
comment|/** name of the attribute containing a name **/
DECL|field|NAME_KEY
specifier|static
specifier|final
name|String
name|NAME_KEY
init|=
literal|"name"
decl_stmt|;
comment|/** name of the attribute containing a normalizer **/
DECL|field|NORM_KEY
specifier|static
specifier|final
name|String
name|NORM_KEY
init|=
literal|"norm"
decl_stmt|;
comment|/** name of the attribute containing parameters **/
DECL|field|PARAMS_KEY
specifier|static
specifier|final
name|String
name|PARAMS_KEY
init|=
literal|"params"
decl_stmt|;
comment|/** name of the attribute containing a store **/
DECL|field|STORE_KEY
specifier|static
specifier|final
name|String
name|STORE_KEY
init|=
literal|"store"
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|ModelStore
name|store
decl_stmt|;
DECL|field|managedFeatureStore
specifier|private
name|ManagedFeatureStore
name|managedFeatureStore
decl_stmt|;
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|method|ManagedModelStore
specifier|public
name|ManagedModelStore
parameter_list|(
name|String
name|resourceId
parameter_list|,
name|SolrResourceLoader
name|loader
parameter_list|,
name|ManagedResourceStorage
operator|.
name|StorageIO
name|storageIO
parameter_list|)
throws|throws
name|SolrException
block|{
name|super
argument_list|(
name|resourceId
argument_list|,
name|loader
argument_list|,
name|storageIO
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|ModelStore
argument_list|()
expr_stmt|;
block|}
DECL|method|setManagedFeatureStore
specifier|public
name|void
name|setManagedFeatureStore
parameter_list|(
name|ManagedFeatureStore
name|managedFeatureStore
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"INIT model store"
argument_list|)
expr_stmt|;
name|this
operator|.
name|managedFeatureStore
operator|=
name|managedFeatureStore
expr_stmt|;
block|}
DECL|method|getManagedFeatureStore
specifier|public
name|ManagedFeatureStore
name|getManagedFeatureStore
parameter_list|()
block|{
return|return
name|managedFeatureStore
return|;
block|}
DECL|field|managedData
specifier|private
name|Object
name|managedData
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|onManagedDataLoadedFromStorage
specifier|protected
name|void
name|onManagedDataLoadedFromStorage
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|managedInitArgs
parameter_list|,
name|Object
name|managedData
parameter_list|)
throws|throws
name|SolrException
block|{
name|store
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// the managed models on the disk or on zookeeper will be loaded in a lazy
comment|// way, since we need to set the managed features first (unfortunately
comment|// managed resources do not
comment|// decouple the creation of a managed resource with the reading of the data
comment|// from the storage)
name|this
operator|.
name|managedData
operator|=
name|managedData
expr_stmt|;
block|}
DECL|method|loadStoredModels
specifier|public
name|void
name|loadStoredModels
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"------ managed models ~ loading ------"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|managedData
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|managedData
operator|instanceof
name|List
operator|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|up
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|managedData
decl_stmt|;
for|for
control|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|u
range|:
name|up
control|)
block|{
name|addModelFromMap
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|addModelFromMap
specifier|private
name|void
name|addModelFromMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|modelMap
parameter_list|)
block|{
try|try
block|{
specifier|final
name|LTRScoringModel
name|algo
init|=
name|fromLTRScoringModelMap
argument_list|(
name|solrResourceLoader
argument_list|,
name|modelMap
argument_list|,
name|managedFeatureStore
argument_list|)
decl_stmt|;
name|addModel
argument_list|(
name|algo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ModelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|addModel
specifier|public
specifier|synchronized
name|void
name|addModel
parameter_list|(
name|LTRScoringModel
name|ltrScoringModel
parameter_list|)
throws|throws
name|ModelException
block|{
try|try
block|{
name|log
operator|.
name|info
argument_list|(
literal|"adding model {}"
argument_list|,
name|ltrScoringModel
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|addModel
argument_list|(
name|ltrScoringModel
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ModelException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
DECL|method|applyUpdatesToManagedData
specifier|protected
name|Object
name|applyUpdatesToManagedData
parameter_list|(
name|Object
name|updates
parameter_list|)
block|{
if|if
condition|(
name|updates
operator|instanceof
name|List
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|up
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|updates
decl_stmt|;
for|for
control|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|u
range|:
name|up
control|)
block|{
name|addModelFromMap
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|updates
operator|instanceof
name|Map
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|updates
decl_stmt|;
name|addModelFromMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
return|return
name|modelsAsManagedResources
argument_list|(
name|store
operator|.
name|getModels
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doDeleteChild
specifier|public
specifier|synchronized
name|void
name|doDeleteChild
parameter_list|(
name|BaseSolrResource
name|endpoint
parameter_list|,
name|String
name|childId
parameter_list|)
block|{
name|store
operator|.
name|delete
argument_list|(
name|childId
argument_list|)
expr_stmt|;
name|storeManagedData
argument_list|(
name|applyUpdatesToManagedData
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Called to retrieve a named part (the given childId) of the resource at the    * given endpoint. Note: since we have a unique child managed store we ignore    * the childId.    */
annotation|@
name|Override
DECL|method|doGet
specifier|public
name|void
name|doGet
parameter_list|(
name|BaseSolrResource
name|endpoint
parameter_list|,
name|String
name|childId
parameter_list|)
block|{
specifier|final
name|SolrQueryResponse
name|response
init|=
name|endpoint
operator|.
name|getSolrResponse
argument_list|()
decl_stmt|;
name|response
operator|.
name|add
argument_list|(
name|MODELS_JSON_FIELD
argument_list|,
name|modelsAsManagedResources
argument_list|(
name|store
operator|.
name|getModels
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|getModel
specifier|public
name|LTRScoringModel
name|getModel
parameter_list|(
name|String
name|modelName
parameter_list|)
block|{
comment|// this function replicates getModelStore().getModel(modelName), but
comment|// it simplifies the testing (we can avoid to mock also a ModelStore).
return|return
name|store
operator|.
name|getModel
argument_list|(
name|modelName
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ManagedModelStore [store="
operator|+
name|store
operator|+
literal|", featureStores="
operator|+
name|managedFeatureStore
operator|+
literal|"]"
return|;
block|}
comment|/**    * Returns the available models as a list of Maps objects. After an update the    * managed resources needs to return the resources in this format in order to    * store in json somewhere (zookeeper, disk...)    *    *    * @return the available models as a list of Maps objects    */
DECL|method|modelsAsManagedResources
specifier|private
specifier|static
name|List
argument_list|<
name|Object
argument_list|>
name|modelsAsManagedResources
parameter_list|(
name|List
argument_list|<
name|LTRScoringModel
argument_list|>
name|models
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|models
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|LTRScoringModel
name|model
range|:
name|models
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|toLTRScoringModelMap
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|fromLTRScoringModelMap
specifier|public
specifier|static
name|LTRScoringModel
name|fromLTRScoringModelMap
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|modelMap
parameter_list|,
name|ManagedFeatureStore
name|managedFeatureStore
parameter_list|)
block|{
specifier|final
name|FeatureStore
name|featureStore
init|=
name|managedFeatureStore
operator|.
name|getFeatureStore
argument_list|(
operator|(
name|String
operator|)
name|modelMap
operator|.
name|get
argument_list|(
name|STORE_KEY
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|featureList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|modelMap
operator|.
name|get
argument_list|(
name|FEATURES_KEY
argument_list|)
decl_stmt|;
if|if
condition|(
name|featureList
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Object
name|feature
range|:
name|featureList
control|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|featureMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|feature
decl_stmt|;
name|features
operator|.
name|add
argument_list|(
name|lookupFeatureFromFeatureMap
argument_list|(
name|featureMap
argument_list|,
name|featureStore
argument_list|)
argument_list|)
expr_stmt|;
name|norms
operator|.
name|add
argument_list|(
name|createNormalizerFromFeatureMap
argument_list|(
name|solrResourceLoader
argument_list|,
name|featureMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|LTRScoringModel
operator|.
name|getInstance
argument_list|(
name|solrResourceLoader
argument_list|,
operator|(
name|String
operator|)
name|modelMap
operator|.
name|get
argument_list|(
name|CLASS_KEY
argument_list|)
argument_list|,
comment|// modelClassName
operator|(
name|String
operator|)
name|modelMap
operator|.
name|get
argument_list|(
name|NAME_KEY
argument_list|)
argument_list|,
comment|// modelName
name|features
argument_list|,
name|norms
argument_list|,
name|featureStore
operator|.
name|getName
argument_list|()
argument_list|,
name|featureStore
operator|.
name|getFeatures
argument_list|()
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|modelMap
operator|.
name|get
argument_list|(
name|PARAMS_KEY
argument_list|)
argument_list|)
return|;
block|}
DECL|method|toLTRScoringModelMap
specifier|private
specifier|static
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toLTRScoringModelMap
parameter_list|(
name|LTRScoringModel
name|model
parameter_list|)
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|modelMap
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|5
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|modelMap
operator|.
name|put
argument_list|(
name|NAME_KEY
argument_list|,
name|model
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|modelMap
operator|.
name|put
argument_list|(
name|CLASS_KEY
argument_list|,
name|model
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|modelMap
operator|.
name|put
argument_list|(
name|STORE_KEY
argument_list|,
name|model
operator|.
name|getFeatureStoreName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|features
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|featuresList
init|=
name|model
operator|.
name|getFeatures
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Normalizer
argument_list|>
name|normsList
init|=
name|model
operator|.
name|getNorms
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|featuresList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
name|features
operator|.
name|add
argument_list|(
name|toFeatureMap
argument_list|(
name|featuresList
operator|.
name|get
argument_list|(
name|ii
argument_list|)
argument_list|,
name|normsList
operator|.
name|get
argument_list|(
name|ii
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|modelMap
operator|.
name|put
argument_list|(
name|FEATURES_KEY
argument_list|,
name|features
argument_list|)
expr_stmt|;
name|modelMap
operator|.
name|put
argument_list|(
name|PARAMS_KEY
argument_list|,
name|model
operator|.
name|getParams
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|modelMap
return|;
block|}
DECL|method|lookupFeatureFromFeatureMap
specifier|private
specifier|static
name|Feature
name|lookupFeatureFromFeatureMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|featureMap
parameter_list|,
name|FeatureStore
name|featureStore
parameter_list|)
block|{
specifier|final
name|String
name|featureName
init|=
operator|(
name|String
operator|)
name|featureMap
operator|.
name|get
argument_list|(
name|NAME_KEY
argument_list|)
decl_stmt|;
return|return
operator|(
name|featureName
operator|==
literal|null
condition|?
literal|null
else|:
name|featureStore
operator|.
name|get
argument_list|(
name|featureName
argument_list|)
operator|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|createNormalizerFromFeatureMap
specifier|private
specifier|static
name|Normalizer
name|createNormalizerFromFeatureMap
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|featureMap
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|normMap
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|featureMap
operator|.
name|get
argument_list|(
name|NORM_KEY
argument_list|)
decl_stmt|;
return|return
operator|(
name|normMap
operator|==
literal|null
condition|?
name|IdentityNormalizer
operator|.
name|INSTANCE
else|:
name|fromNormalizerMap
argument_list|(
name|solrResourceLoader
argument_list|,
name|normMap
argument_list|)
operator|)
return|;
block|}
DECL|method|toFeatureMap
specifier|private
specifier|static
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toFeatureMap
parameter_list|(
name|Feature
name|feature
parameter_list|,
name|Normalizer
name|norm
parameter_list|)
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NAME_KEY
argument_list|,
name|feature
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|NORM_KEY
argument_list|,
name|toNormalizerMap
argument_list|(
name|norm
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|fromNormalizerMap
specifier|private
specifier|static
name|Normalizer
name|fromNormalizerMap
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|normMap
parameter_list|)
block|{
specifier|final
name|String
name|className
init|=
operator|(
name|String
operator|)
name|normMap
operator|.
name|get
argument_list|(
name|CLASS_KEY
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|normMap
operator|.
name|get
argument_list|(
name|PARAMS_KEY
argument_list|)
decl_stmt|;
return|return
name|Normalizer
operator|.
name|getInstance
argument_list|(
name|solrResourceLoader
argument_list|,
name|className
argument_list|,
name|params
argument_list|)
return|;
block|}
DECL|method|toNormalizerMap
specifier|private
specifier|static
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|toNormalizerMap
parameter_list|(
name|Normalizer
name|norm
parameter_list|)
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|normalizer
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|2
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|normalizer
operator|.
name|put
argument_list|(
name|CLASS_KEY
argument_list|,
name|norm
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|norm
operator|.
name|paramsToMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|normalizer
operator|.
name|put
argument_list|(
name|PARAMS_KEY
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
return|return
name|normalizer
return|;
block|}
block|}
end_class

end_unit

