begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.store
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|FeatureException
import|;
end_import

begin_class
DECL|class|FeatureStore
specifier|public
class|class
name|FeatureStore
block|{
comment|/** the name of the default feature store **/
DECL|field|DEFAULT_FEATURE_STORE_NAME
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_FEATURE_STORE_NAME
init|=
literal|"_DEFAULT_"
decl_stmt|;
DECL|field|store
specifier|private
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Feature
argument_list|>
name|store
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// LinkedHashMap because we need predictable iteration order
DECL|field|name
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
DECL|method|FeatureStore
specifier|public
name|FeatureStore
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
DECL|method|get
specifier|public
name|Feature
name|get
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|store
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|add
specifier|public
name|void
name|add
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|feature
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
name|name
operator|+
literal|" already contained in the store, please use a different name"
argument_list|)
throw|;
block|}
name|feature
operator|.
name|setIndex
argument_list|(
name|store
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|store
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|feature
argument_list|)
expr_stmt|;
block|}
DECL|method|getFeatures
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|storeValues
init|=
operator|new
name|ArrayList
argument_list|<
name|Feature
argument_list|>
argument_list|(
name|store
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|storeValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FeatureStore [features="
operator|+
name|store
operator|.
name|keySet
argument_list|()
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

