begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.search
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|ResourceLoaderAware
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|LTRRescorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|LTRScoringQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|LTRThreadModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|SolrQueryRequestContextUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LTRScoringModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
operator|.
name|ManagedFeatureStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
operator|.
name|rest
operator|.
name|ManagedModelStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|rest
operator|.
name|ManagedResourceObserver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|AbstractReRankQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|QParserPlugin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|RankQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|search
operator|.
name|SyntaxError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import

begin_comment
comment|/**  * Plug into solr a rerank model.  *  * Learning to Rank Query Parser Syntax: rq={!ltr model=6029760550880411648 reRankDocs=300  * efi.myCompanyQueryIntent=0.98}  *  */
end_comment

begin_class
DECL|class|LTRQParserPlugin
specifier|public
class|class
name|LTRQParserPlugin
extends|extends
name|QParserPlugin
implements|implements
name|ResourceLoaderAware
implements|,
name|ManagedResourceObserver
block|{
DECL|field|NAME
specifier|public
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"ltr"
decl_stmt|;
DECL|field|defaultQuery
specifier|private
specifier|static
name|Query
name|defaultQuery
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
comment|// params for setting custom external info that features can use, like query
comment|// intent
DECL|field|EXTERNAL_FEATURE_INFO
specifier|static
specifier|final
name|String
name|EXTERNAL_FEATURE_INFO
init|=
literal|"efi."
decl_stmt|;
DECL|field|fr
specifier|private
name|ManagedFeatureStore
name|fr
init|=
literal|null
decl_stmt|;
DECL|field|mr
specifier|private
name|ManagedModelStore
name|mr
init|=
literal|null
decl_stmt|;
DECL|field|threadManager
specifier|private
name|LTRThreadModule
name|threadManager
init|=
literal|null
decl_stmt|;
comment|/** query parser plugin: the name of the attribute for setting the model **/
DECL|field|MODEL
specifier|public
specifier|static
specifier|final
name|String
name|MODEL
init|=
literal|"model"
decl_stmt|;
comment|/** query parser plugin: default number of documents to rerank **/
DECL|field|DEFAULT_RERANK_DOCS
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_RERANK_DOCS
init|=
literal|200
decl_stmt|;
comment|/**    * query parser plugin:the param that will select how the number of document    * to rerank    **/
DECL|field|RERANK_DOCS
specifier|public
specifier|static
specifier|final
name|String
name|RERANK_DOCS
init|=
literal|"reRankDocs"
decl_stmt|;
annotation|@
name|Override
DECL|method|init
specifier|public
name|void
name|init
parameter_list|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|NamedList
name|args
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|threadManager
operator|=
name|LTRThreadModule
operator|.
name|getInstance
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|this
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createParser
specifier|public
name|QParser
name|createParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
return|return
operator|new
name|LTRQParser
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
return|;
block|}
comment|/**    * Given a set of local SolrParams, extract all of the efi.key=value params into a map    * @param localParams Local request parameters that might conatin efi params    * @return Map of efi params, where the key is the name of the efi param, and the    *  value is the value of the efi param    */
DECL|method|extractEFIParams
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|extractEFIParams
parameter_list|(
name|SolrParams
name|localParams
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|externalFeatureInfo
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|localParams
operator|.
name|getParameterNamesIterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|name
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|EXTERNAL_FEATURE_INFO
argument_list|)
condition|)
block|{
name|externalFeatureInfo
operator|.
name|put
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|EXTERNAL_FEATURE_INFO
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
name|localParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|externalFeatureInfo
return|;
block|}
annotation|@
name|Override
DECL|method|inform
specifier|public
name|void
name|inform
parameter_list|(
name|ResourceLoader
name|loader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|SolrResourceLoader
name|solrResourceLoader
init|=
operator|(
name|SolrResourceLoader
operator|)
name|loader
decl_stmt|;
name|ManagedFeatureStore
operator|.
name|registerManagedFeatureStore
argument_list|(
name|solrResourceLoader
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|ManagedModelStore
operator|.
name|registerManagedModelStore
argument_list|(
name|solrResourceLoader
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|onManagedResourceInitialized
specifier|public
name|void
name|onManagedResourceInitialized
parameter_list|(
name|NamedList
argument_list|<
name|?
argument_list|>
name|args
parameter_list|,
name|ManagedResource
name|res
parameter_list|)
throws|throws
name|SolrException
block|{
if|if
condition|(
name|res
operator|instanceof
name|ManagedFeatureStore
condition|)
block|{
name|fr
operator|=
operator|(
name|ManagedFeatureStore
operator|)
name|res
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|instanceof
name|ManagedModelStore
condition|)
block|{
name|mr
operator|=
operator|(
name|ManagedModelStore
operator|)
name|res
expr_stmt|;
block|}
if|if
condition|(
name|mr
operator|!=
literal|null
operator|&&
name|fr
operator|!=
literal|null
condition|)
block|{
name|mr
operator|.
name|setManagedFeatureStore
argument_list|(
name|fr
argument_list|)
expr_stmt|;
comment|// now we can safely load the models
name|mr
operator|.
name|loadStoredModels
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|LTRQParser
specifier|public
class|class
name|LTRQParser
extends|extends
name|QParser
block|{
DECL|method|LTRQParser
specifier|public
name|LTRQParser
parameter_list|(
name|String
name|qstr
parameter_list|,
name|SolrParams
name|localParams
parameter_list|,
name|SolrParams
name|params
parameter_list|,
name|SolrQueryRequest
name|req
parameter_list|)
block|{
name|super
argument_list|(
name|qstr
argument_list|,
name|localParams
argument_list|,
name|params
argument_list|,
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|parse
specifier|public
name|Query
name|parse
parameter_list|()
throws|throws
name|SyntaxError
block|{
comment|// ReRanking Model
specifier|final
name|String
name|modelName
init|=
name|localParams
operator|.
name|get
argument_list|(
name|LTRQParserPlugin
operator|.
name|MODEL
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|modelName
operator|==
literal|null
operator|)
operator|||
name|modelName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Must provide model in the request"
argument_list|)
throw|;
block|}
specifier|final
name|LTRScoringModel
name|ltrScoringModel
init|=
name|mr
operator|.
name|getModel
argument_list|(
name|modelName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ltrScoringModel
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"cannot find "
operator|+
name|LTRQParserPlugin
operator|.
name|MODEL
operator|+
literal|" "
operator|+
name|modelName
argument_list|)
throw|;
block|}
specifier|final
name|String
name|modelFeatureStoreName
init|=
name|ltrScoringModel
operator|.
name|getFeatureStoreName
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|extractFeatures
init|=
name|SolrQueryRequestContextUtils
operator|.
name|isExtractingFeatures
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|String
name|fvStoreName
init|=
name|SolrQueryRequestContextUtils
operator|.
name|getFvStoreName
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// Check if features are requested and if the model feature store and feature-transform feature store are the same
specifier|final
name|boolean
name|featuresRequestedFromSameStore
init|=
operator|(
name|modelFeatureStoreName
operator|.
name|equals
argument_list|(
name|fvStoreName
argument_list|)
operator|||
name|fvStoreName
operator|==
literal|null
operator|)
condition|?
name|extractFeatures
else|:
literal|false
decl_stmt|;
specifier|final
name|LTRScoringQuery
name|scoringQuery
init|=
operator|new
name|LTRScoringQuery
argument_list|(
name|ltrScoringModel
argument_list|,
name|extractEFIParams
argument_list|(
name|localParams
argument_list|)
argument_list|,
name|featuresRequestedFromSameStore
argument_list|,
name|threadManager
argument_list|)
decl_stmt|;
comment|// Enable the feature vector caching if we are extracting features, and the features
comment|// we requested are the same ones we are reranking with
if|if
condition|(
name|featuresRequestedFromSameStore
condition|)
block|{
name|scoringQuery
operator|.
name|setFeatureLogger
argument_list|(
name|SolrQueryRequestContextUtils
operator|.
name|getFeatureLogger
argument_list|(
name|req
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|SolrQueryRequestContextUtils
operator|.
name|setScoringQuery
argument_list|(
name|req
argument_list|,
name|scoringQuery
argument_list|)
expr_stmt|;
name|int
name|reRankDocs
init|=
name|localParams
operator|.
name|getInt
argument_list|(
name|RERANK_DOCS
argument_list|,
name|DEFAULT_RERANK_DOCS
argument_list|)
decl_stmt|;
if|if
condition|(
name|reRankDocs
operator|<=
literal|0
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"Must rerank at least 1 document"
argument_list|)
throw|;
block|}
comment|// External features
name|scoringQuery
operator|.
name|setRequest
argument_list|(
name|req
argument_list|)
expr_stmt|;
return|return
operator|new
name|LTRQuery
argument_list|(
name|scoringQuery
argument_list|,
name|reRankDocs
argument_list|)
return|;
block|}
block|}
comment|/**    * A learning to rank Query, will incapsulate a learning to rank model, and delegate to it the rescoring    * of the documents.    **/
DECL|class|LTRQuery
specifier|public
class|class
name|LTRQuery
extends|extends
name|AbstractReRankQuery
block|{
DECL|field|scoringQuery
specifier|private
specifier|final
name|LTRScoringQuery
name|scoringQuery
decl_stmt|;
DECL|method|LTRQuery
specifier|public
name|LTRQuery
parameter_list|(
name|LTRScoringQuery
name|scoringQuery
parameter_list|,
name|int
name|reRankDocs
parameter_list|)
block|{
name|super
argument_list|(
name|defaultQuery
argument_list|,
name|reRankDocs
argument_list|,
operator|new
name|LTRRescorer
argument_list|(
name|scoringQuery
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|scoringQuery
operator|=
name|scoringQuery
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|classHash
argument_list|()
operator|+
operator|(
name|mainQuery
operator|.
name|hashCode
argument_list|()
operator|+
name|scoringQuery
operator|.
name|hashCode
argument_list|()
operator|+
name|reRankDocs
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|o
argument_list|)
operator|&&
name|equalsTo
argument_list|(
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
DECL|method|equalsTo
specifier|private
name|boolean
name|equalsTo
parameter_list|(
name|LTRQuery
name|other
parameter_list|)
block|{
return|return
operator|(
name|mainQuery
operator|.
name|equals
argument_list|(
name|other
operator|.
name|mainQuery
argument_list|)
operator|&&
name|scoringQuery
operator|.
name|equals
argument_list|(
name|other
operator|.
name|scoringQuery
argument_list|)
operator|&&
operator|(
name|reRankDocs
operator|==
name|other
operator|.
name|reRankDocs
operator|)
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|wrap
specifier|public
name|RankQuery
name|wrap
parameter_list|(
name|Query
name|_mainQuery
parameter_list|)
block|{
name|super
operator|.
name|wrap
argument_list|(
name|_mainQuery
argument_list|)
expr_stmt|;
name|scoringQuery
operator|.
name|setOriginalQuery
argument_list|(
name|_mainQuery
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"{!ltr mainQuery='"
operator|+
name|mainQuery
operator|.
name|toString
argument_list|()
operator|+
literal|"' scoringQuery='"
operator|+
name|scoringQuery
operator|.
name|toString
argument_list|()
operator|+
literal|"' reRankDocs="
operator|+
name|reRankDocs
operator|+
literal|"}"
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|protected
name|Query
name|rewrite
parameter_list|(
name|Query
name|rewrittenMainQuery
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LTRQuery
argument_list|(
name|scoringQuery
argument_list|,
name|reRankDocs
argument_list|)
operator|.
name|wrap
argument_list|(
name|rewrittenMainQuery
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

