begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.norm
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import

begin_comment
comment|/**  * A normalizer normalizes the value of a feature. After the feature values  * have been computed, the {@link Normalizer#normalize(float)} methods will  * be called and the resulting values will be used by the model.  */
end_comment

begin_class
DECL|class|Normalizer
specifier|public
specifier|abstract
class|class
name|Normalizer
block|{
DECL|method|normalize
specifier|public
specifier|abstract
name|float
name|normalize
parameter_list|(
name|float
name|value
parameter_list|)
function_decl|;
DECL|method|paramsToMap
specifier|public
specifier|abstract
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramsToMap
parameter_list|()
function_decl|;
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|Explanation
name|explain
parameter_list|)
block|{
specifier|final
name|float
name|normalized
init|=
name|normalize
argument_list|(
name|explain
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|explainDesc
init|=
literal|"normalized using "
operator|+
name|toString
argument_list|()
decl_stmt|;
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|normalized
argument_list|,
name|explainDesc
argument_list|,
name|explain
argument_list|)
return|;
block|}
DECL|method|getInstance
specifier|public
specifier|static
name|Normalizer
name|getInstance
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|String
name|className
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
specifier|final
name|Normalizer
name|f
init|=
name|solrResourceLoader
operator|.
name|newInstance
argument_list|(
name|className
argument_list|,
name|Normalizer
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|f
argument_list|,
name|params
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|validate
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
comment|/**    * As part of creation of a normalizer instance, this function confirms    * that the normalizer parameters are valid.    *    * @throws NormalizerException    *             Normalizer Exception    */
DECL|method|validate
specifier|protected
specifier|abstract
name|void
name|validate
parameter_list|()
throws|throws
name|NormalizerException
function_decl|;
block|}
end_class

end_unit

