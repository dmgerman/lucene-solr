begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.model
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|Normalizer
import|;
end_import

begin_comment
comment|/**  * A scoring model that computes scores using a dot product.  * Example models are RankSVM and Pranking.  *<p>  * Example configuration:  *<pre>{    "class" : "org.apache.solr.ltr.model.LinearModel",    "name" : "myModelName",    "features" : [        { "name" : "userTextTitleMatch" },        { "name" : "originalScore" },        { "name" : "isBook" }    ],    "params" : {        "weights" : {            "userTextTitleMatch" : 1.0,            "originalScore" : 0.5,            "isBook" : 0.1        }    } }</pre>  *<p>  * Background reading:  *<ul>  *<li><a href="http://www.cs.cornell.edu/people/tj/publications/joachims_02c.pdf">  * Thorsten Joachims. Optimizing Search Engines Using Clickthrough Data.  * Proceedings of the ACM Conference on Knowledge Discovery and Data Mining (KDD), ACM, 2002.</a>  *</ul>  *<ul>  *<li><a href="https://papers.nips.cc/paper/2023-pranking-with-ranking.pdf">  * Koby Crammer and Yoram Singer. Pranking with Ranking.  * Advances in Neural Information Processing Systems (NIPS), 2001.</a>  *</ul>  */
end_comment

begin_class
DECL|class|LinearModel
specifier|public
class|class
name|LinearModel
extends|extends
name|LTRScoringModel
block|{
DECL|field|featureToWeight
specifier|protected
name|Float
index|[]
name|featureToWeight
decl_stmt|;
DECL|method|setWeights
specifier|public
name|void
name|setWeights
parameter_list|(
name|Object
name|weights
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|modelWeights
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
operator|)
name|weights
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|features
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
specifier|final
name|String
name|key
init|=
name|features
operator|.
name|get
argument_list|(
name|ii
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|Double
name|val
init|=
name|modelWeights
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|featureToWeight
index|[
name|ii
index|]
operator|=
operator|(
name|val
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Float
argument_list|(
name|val
operator|.
name|floatValue
argument_list|()
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
DECL|method|LinearModel
specifier|public
name|LinearModel
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
parameter_list|,
name|String
name|featureStoreName
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|features
argument_list|,
name|norms
argument_list|,
name|featureStoreName
argument_list|,
name|allFeatures
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|featureToWeight
operator|=
operator|new
name|Float
index|[
name|features
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|ModelException
block|{
name|super
operator|.
name|validate
argument_list|()
expr_stmt|;
specifier|final
name|ArrayList
argument_list|<
name|String
argument_list|>
name|missingWeightFeatureNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|features
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|featureToWeight
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|missingWeightFeatureNames
operator|.
name|add
argument_list|(
name|features
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|missingWeightFeatureNames
operator|.
name|size
argument_list|()
operator|==
name|features
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"Model "
operator|+
name|name
operator|+
literal|" doesn't contain any weights"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|missingWeightFeatureNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"Model "
operator|+
name|name
operator|+
literal|" lacks weight(s) for "
operator|+
name|missingWeightFeatureNames
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|float
index|[]
name|modelFeatureValuesNormalized
parameter_list|)
block|{
name|float
name|score
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modelFeatureValuesNormalized
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|score
operator|+=
name|modelFeatureValuesNormalized
index|[
name|i
index|]
operator|*
name|featureToWeight
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|score
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|,
name|float
name|finalScore
parameter_list|,
name|List
argument_list|<
name|Explanation
argument_list|>
name|featureExplanations
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Explanation
argument_list|>
name|details
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Explanation
name|featureExplain
range|:
name|featureExplanations
control|)
block|{
specifier|final
name|List
argument_list|<
name|Explanation
argument_list|>
name|featureDetails
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|featureDetails
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|featureToWeight
index|[
name|index
index|]
argument_list|,
literal|"weight on feature"
argument_list|)
argument_list|)
expr_stmt|;
name|featureDetails
operator|.
name|add
argument_list|(
name|featureExplain
argument_list|)
expr_stmt|;
name|details
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|featureExplain
operator|.
name|getValue
argument_list|()
operator|*
name|featureToWeight
index|[
name|index
index|]
argument_list|,
literal|"prod of:"
argument_list|,
name|featureDetails
argument_list|)
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|finalScore
argument_list|,
name|toString
argument_list|()
operator|+
literal|" model applied to features, sum of:"
argument_list|,
name|details
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"(name="
argument_list|)
operator|.
name|append
argument_list|(
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",featureWeights=["
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|features
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
if|if
condition|(
name|ii
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|key
init|=
name|features
operator|.
name|get
argument_list|(
name|ii
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|key
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|featureToWeight
index|[
name|ii
index|]
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"])"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

