begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.model
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|Feature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
operator|.
name|FeatureException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|IdentityNormalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
operator|.
name|Normalizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import

begin_comment
comment|/**  * A scoring model computes scores that can be used to rerank documents.  *<p>  * A scoring model consists of  *<ul>  *<li> a list of features ({@link Feature}) and  *<li> a list of normalizers ({@link Normalizer}) plus  *<li> parameters or configuration to represent the scoring algorithm.  *</ul>  *<p>  * Example configuration (snippet):  *<pre>{    "class" : "...",    "name" : "myModelName",    "features" : [        {          "name" : "isBook"        },        {          "name" : "originalScore",          "norm": {              "class" : "org.apache.solr.ltr.norm.StandardNormalizer",              "params" : { "avg":"100", "std":"10" }          }        },        {          "name" : "price",          "norm": {              "class" : "org.apache.solr.ltr.norm.MinMaxNormalizer",              "params" : { "min":"0", "max":"1000" }          }        }    ],    "params" : {        ...    } }</pre>  *<p>  * {@link LTRScoringModel} is an abstract class and concrete classes must  * implement the {@link #score(float[])} and  * {@link #explain(LeafReaderContext, int, float, List)} methods.  */
end_comment

begin_class
DECL|class|LTRScoringModel
specifier|public
specifier|abstract
class|class
name|LTRScoringModel
block|{
DECL|field|name
specifier|protected
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|featureStoreName
specifier|private
specifier|final
name|String
name|featureStoreName
decl_stmt|;
DECL|field|features
specifier|protected
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|features
decl_stmt|;
DECL|field|allFeatures
specifier|private
specifier|final
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
decl_stmt|;
DECL|field|params
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|field|norms
specifier|private
specifier|final
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
decl_stmt|;
DECL|method|getInstance
specifier|public
specifier|static
name|LTRScoringModel
name|getInstance
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
parameter_list|,
name|String
name|featureStoreName
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|ModelException
block|{
specifier|final
name|LTRScoringModel
name|model
decl_stmt|;
try|try
block|{
comment|// create an instance of the model
name|model
operator|=
name|solrResourceLoader
operator|.
name|newInstance
argument_list|(
name|className
argument_list|,
name|LTRScoringModel
operator|.
name|class
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
comment|// no sub packages
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|List
operator|.
name|class
block|,
name|List
operator|.
name|class
block|,
name|String
operator|.
name|class
block|,
name|List
operator|.
name|class
block|,
name|Map
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|features
block|,
name|norms
block|,
name|featureStoreName
block|,
name|allFeatures
block|,
name|params
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|model
argument_list|,
name|params
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"Model type does not exist "
operator|+
name|className
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|model
operator|.
name|validate
argument_list|()
expr_stmt|;
return|return
name|model
return|;
block|}
DECL|method|LTRScoringModel
specifier|public
name|LTRScoringModel
parameter_list|(
name|String
name|name
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|features
parameter_list|,
name|List
argument_list|<
name|Normalizer
argument_list|>
name|norms
parameter_list|,
name|String
name|featureStoreName
parameter_list|,
name|List
argument_list|<
name|Feature
argument_list|>
name|allFeatures
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|features
operator|=
name|features
expr_stmt|;
name|this
operator|.
name|featureStoreName
operator|=
name|featureStoreName
expr_stmt|;
name|this
operator|.
name|allFeatures
operator|=
name|allFeatures
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|norms
operator|=
name|norms
expr_stmt|;
block|}
comment|/**    * Validate that settings make sense and throws    * {@link ModelException} if they do not make sense.    */
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|ModelException
block|{
if|if
condition|(
name|features
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"no features declared for model "
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|final
name|HashSet
argument_list|<
name|String
argument_list|>
name|featureNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Feature
name|feature
range|:
name|features
control|)
block|{
specifier|final
name|String
name|featureName
init|=
name|feature
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|featureNames
operator|.
name|add
argument_list|(
name|featureName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"duplicated feature "
operator|+
name|featureName
operator|+
literal|" in model "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|features
operator|.
name|size
argument_list|()
operator|!=
name|norms
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"counted "
operator|+
name|features
operator|.
name|size
argument_list|()
operator|+
literal|" features and "
operator|+
name|norms
operator|.
name|size
argument_list|()
operator|+
literal|" norms in model "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the norms    */
DECL|method|getNorms
specifier|public
name|List
argument_list|<
name|Normalizer
argument_list|>
name|getNorms
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|norms
argument_list|)
return|;
block|}
comment|/**    * @return the name    */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * @return the features    */
DECL|method|getFeatures
specifier|public
name|List
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|features
argument_list|)
return|;
block|}
DECL|method|getParams
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getParams
parameter_list|()
block|{
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
literal|1
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|features
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|features
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|params
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|norms
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|norms
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|featureStoreName
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|featureStoreName
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getClass
argument_list|()
operator|!=
name|obj
operator|.
name|getClass
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|LTRScoringModel
name|other
init|=
operator|(
name|LTRScoringModel
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|features
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|features
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|features
operator|.
name|equals
argument_list|(
name|other
operator|.
name|features
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|norms
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|norms
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|norms
operator|.
name|equals
argument_list|(
name|other
operator|.
name|norms
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|params
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|params
operator|.
name|equals
argument_list|(
name|other
operator|.
name|params
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|featureStoreName
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|featureStoreName
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|featureStoreName
operator|.
name|equals
argument_list|(
name|other
operator|.
name|featureStoreName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|hasParams
specifier|public
name|boolean
name|hasParams
parameter_list|()
block|{
return|return
operator|!
operator|(
operator|(
name|params
operator|==
literal|null
operator|)
operator|||
name|params
operator|.
name|isEmpty
argument_list|()
operator|)
return|;
block|}
DECL|method|getAllFeatures
specifier|public
name|Collection
argument_list|<
name|Feature
argument_list|>
name|getAllFeatures
parameter_list|()
block|{
return|return
name|allFeatures
return|;
block|}
DECL|method|getFeatureStoreName
specifier|public
name|String
name|getFeatureStoreName
parameter_list|()
block|{
return|return
name|featureStoreName
return|;
block|}
comment|/**    * Given a list of normalized values for all features a scoring algorithm    * cares about, calculate and return a score.    *    * @param modelFeatureValuesNormalized    *          List of normalized feature values. Each feature is identified by    *          its id, which is the index in the array    * @return The final score for a document    */
DECL|method|score
specifier|public
specifier|abstract
name|float
name|score
parameter_list|(
name|float
index|[]
name|modelFeatureValuesNormalized
parameter_list|)
function_decl|;
comment|/**    * Similar to the score() function, except it returns an explanation of how    * the features were used to calculate the score.    *    * @param context    *          Context the document is in    * @param doc    *          Document to explain    * @param finalScore    *          Original score    * @param featureExplanations    *          Explanations for each feature calculation    * @return Explanation for the scoring of a document    */
DECL|method|explain
specifier|public
specifier|abstract
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|,
name|float
name|finalScore
parameter_list|,
name|List
argument_list|<
name|Explanation
argument_list|>
name|featureExplanations
parameter_list|)
function_decl|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"(name="
operator|+
name|getName
argument_list|()
operator|+
literal|")"
return|;
block|}
comment|/**    * Goes through all the stored feature values, and calculates the normalized    * values for all the features that will be used for scoring.    */
DECL|method|normalizeFeaturesInPlace
specifier|public
name|void
name|normalizeFeaturesInPlace
parameter_list|(
name|float
index|[]
name|modelFeatureValues
parameter_list|)
block|{
name|float
index|[]
name|modelFeatureValuesNormalized
init|=
name|modelFeatureValues
decl_stmt|;
if|if
condition|(
name|modelFeatureValues
operator|.
name|length
operator|!=
name|norms
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FeatureException
argument_list|(
literal|"Must have normalizer for every feature"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|modelFeatureValuesNormalized
operator|.
name|length
condition|;
operator|++
name|idx
control|)
block|{
name|modelFeatureValuesNormalized
index|[
name|idx
index|]
operator|=
name|norms
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|normalize
argument_list|(
name|modelFeatureValuesNormalized
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getNormalizerExplanation
specifier|public
name|Explanation
name|getNormalizerExplanation
parameter_list|(
name|Explanation
name|e
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|Normalizer
name|n
init|=
name|norms
operator|.
name|get
argument_list|(
name|idx
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|!=
name|IdentityNormalizer
operator|.
name|INSTANCE
condition|)
block|{
return|return
name|n
operator|.
name|explain
argument_list|(
name|e
argument_list|)
return|;
block|}
return|return
name|e
return|;
block|}
block|}
end_class

end_unit

