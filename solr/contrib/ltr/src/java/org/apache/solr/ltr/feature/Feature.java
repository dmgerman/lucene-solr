begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.feature
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|feature
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|DocInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|SolrQueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|request
operator|.
name|macro
operator|.
name|MacroExpander
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|util
operator|.
name|SolrPluginUtils
import|;
end_import

begin_comment
comment|/**  * A recipe for computing a feature.  Subclass this for specialized feature calculations.  *<p>  * A feature consists of  *<ul>  *<li> a name as the identifier  *<li> parameters to represent the specific feature  *</ul>  *<p>  * Example configuration (snippet):  *<pre>{    "class" : "...",    "name" : "myFeature",    "params" : {        ...    } }</pre>  *<p>  * {@link Feature} is an abstract class and concrete classes should implement  * the {@link #validate()} function, and must implement the {@link #paramsToMap()}  * and createWeight() methods.  */
end_comment

begin_class
DECL|class|Feature
specifier|public
specifier|abstract
class|class
name|Feature
extends|extends
name|Query
block|{
DECL|field|name
specifier|final
specifier|protected
name|String
name|name
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|defaultValue
specifier|private
name|float
name|defaultValue
init|=
literal|0.0f
decl_stmt|;
DECL|field|params
specifier|final
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
decl_stmt|;
DECL|method|getInstance
specifier|public
specifier|static
name|Feature
name|getInstance
parameter_list|(
name|SolrResourceLoader
name|solrResourceLoader
parameter_list|,
name|String
name|className
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
specifier|final
name|Feature
name|f
init|=
name|solrResourceLoader
operator|.
name|newInstance
argument_list|(
name|className
argument_list|,
name|Feature
operator|.
name|class
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
comment|// no sub packages
operator|new
name|Class
index|[]
block|{
name|String
operator|.
name|class
block|,
name|Map
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|params
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|SolrPluginUtils
operator|.
name|invokeSetters
argument_list|(
name|f
argument_list|,
name|params
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|validate
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
DECL|method|Feature
specifier|public
name|Feature
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
block|}
comment|/**    * As part of creation of a feature instance, this function confirms    * that the feature parameters are valid.    *    * @throws FeatureException    *             Feature Exception    */
DECL|method|validate
specifier|protected
specifier|abstract
name|void
name|validate
parameter_list|()
throws|throws
name|FeatureException
function_decl|;
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
comment|// default initialCapacity of 16 won't be enough
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" [name="
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
name|paramsToMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|", params="
argument_list|)
operator|.
name|append
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|createWeight
specifier|public
specifier|abstract
name|FeatureWeight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getDefaultValue
specifier|public
name|float
name|getDefaultValue
parameter_list|()
block|{
return|return
name|defaultValue
return|;
block|}
DECL|method|setDefaultValue
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|defaultValue
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
specifier|final
name|int
name|prime
init|=
literal|31
decl_stmt|;
name|int
name|result
init|=
name|classHash
argument_list|()
decl_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
name|index
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|name
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|name
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
name|result
operator|=
operator|(
name|prime
operator|*
name|result
operator|)
operator|+
operator|(
operator|(
name|params
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|params
operator|.
name|hashCode
argument_list|()
operator|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|o
argument_list|)
operator|&&
name|equalsTo
argument_list|(
name|getClass
argument_list|()
operator|.
name|cast
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
block|}
DECL|method|equalsTo
specifier|private
name|boolean
name|equalsTo
parameter_list|(
name|Feature
name|other
parameter_list|)
block|{
if|if
condition|(
name|index
operator|!=
name|other
operator|.
name|index
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|params
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|params
operator|.
name|equals
argument_list|(
name|other
operator|.
name|params
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * @return the name    */
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**    * @return the id    */
DECL|method|getIndex
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|index
return|;
block|}
comment|/**    * @param index    *          Unique ID for this feature. Similar to feature name, except it can    *          be used to directly access the feature in the global list of    *          features.    */
DECL|method|setIndex
specifier|public
name|void
name|setIndex
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|index
expr_stmt|;
block|}
DECL|method|paramsToMap
specifier|public
specifier|abstract
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramsToMap
parameter_list|()
function_decl|;
comment|/**    * Weight for a feature    **/
DECL|class|FeatureWeight
specifier|public
specifier|abstract
class|class
name|FeatureWeight
extends|extends
name|Weight
block|{
DECL|field|searcher
specifier|final
specifier|protected
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|request
specifier|final
specifier|protected
name|SolrQueryRequest
name|request
decl_stmt|;
DECL|field|efi
specifier|final
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
decl_stmt|;
DECL|field|macroExpander
specifier|final
specifier|protected
name|MacroExpander
name|macroExpander
decl_stmt|;
DECL|field|originalQuery
specifier|final
specifier|protected
name|Query
name|originalQuery
decl_stmt|;
comment|/**      * Initialize a feature without the normalizer from the feature file. This is      * called on initial construction since multiple models share the same      * features, but have different normalizers. A concrete model's feature is      * copied through featForNewModel().      *      * @param q      *          Solr query associated with this FeatureWeight      * @param searcher      *          Solr searcher available for features if they need them      */
DECL|method|FeatureWeight
specifier|public
name|FeatureWeight
parameter_list|(
name|Query
name|q
parameter_list|,
name|IndexSearcher
name|searcher
parameter_list|,
name|SolrQueryRequest
name|request
parameter_list|,
name|Query
name|originalQuery
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|efi
parameter_list|)
block|{
name|super
argument_list|(
name|q
argument_list|)
expr_stmt|;
name|this
operator|.
name|searcher
operator|=
name|searcher
expr_stmt|;
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|originalQuery
operator|=
name|originalQuery
expr_stmt|;
name|this
operator|.
name|efi
operator|=
name|efi
expr_stmt|;
name|macroExpander
operator|=
operator|new
name|MacroExpander
argument_list|(
name|efi
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|Feature
operator|.
name|this
operator|.
name|getName
argument_list|()
return|;
block|}
DECL|method|getIndex
specifier|public
name|int
name|getIndex
parameter_list|()
block|{
return|return
name|Feature
operator|.
name|this
operator|.
name|getIndex
argument_list|()
return|;
block|}
DECL|method|getDefaultValue
specifier|public
name|float
name|getDefaultValue
parameter_list|()
block|{
return|return
name|Feature
operator|.
name|this
operator|.
name|getDefaultValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
specifier|abstract
name|FeatureScorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FeatureScorer
name|r
init|=
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|float
name|score
init|=
name|getDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
name|r
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|r
operator|.
name|docID
argument_list|()
operator|==
name|doc
condition|)
block|{
name|score
operator|=
name|r
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|score
argument_list|,
name|toString
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|score
argument_list|,
literal|"The feature has no value"
argument_list|)
return|;
block|}
block|}
comment|/**      * Used in the FeatureWeight's explain. Each feature should implement this      * returning properties of the specific scorer useful for an explain. For      * example "MyCustomClassFeature [name=" + name + "myVariable:" + myVariable +      * "]";  If not provided, a default implementation will return basic feature      * properties, which might not include query time specific values.      */
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Feature
operator|.
name|this
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
comment|// no-op
block|}
comment|/**      * A 'recipe' for computing a feature      */
DECL|class|FeatureScorer
specifier|public
specifier|abstract
class|class
name|FeatureScorer
extends|extends
name|Scorer
block|{
DECL|field|name
specifier|final
specifier|protected
name|String
name|name
decl_stmt|;
DECL|field|docInfo
specifier|private
name|DocInfo
name|docInfo
decl_stmt|;
DECL|field|itr
specifier|final
specifier|protected
name|DocIdSetIterator
name|itr
decl_stmt|;
DECL|method|FeatureScorer
specifier|public
name|FeatureScorer
parameter_list|(
name|Feature
operator|.
name|FeatureWeight
name|weight
parameter_list|,
name|DocIdSetIterator
name|itr
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|)
expr_stmt|;
name|this
operator|.
name|itr
operator|=
name|itr
expr_stmt|;
name|name
operator|=
name|weight
operator|.
name|getName
argument_list|()
expr_stmt|;
name|docInfo
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
specifier|abstract
name|float
name|score
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/**        * Used to provide context from initial score steps to later reranking steps.        */
DECL|method|setDocInfo
specifier|public
name|void
name|setDocInfo
parameter_list|(
name|DocInfo
name|docInfo
parameter_list|)
block|{
name|this
operator|.
name|docInfo
operator|=
name|docInfo
expr_stmt|;
block|}
DECL|method|getDocInfo
specifier|public
name|DocInfo
name|getDocInfo
parameter_list|()
block|{
return|return
name|docInfo
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|itr
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|itr
return|;
block|}
block|}
comment|/**      * Default FeatureScorer class that returns the score passed in. Can be used      * as a simple ValueFeature, or to return a default scorer in case an      * underlying feature's scorer is null.      */
DECL|class|ValueFeatureScorer
specifier|public
class|class
name|ValueFeatureScorer
extends|extends
name|FeatureScorer
block|{
DECL|field|constScore
name|float
name|constScore
decl_stmt|;
DECL|method|ValueFeatureScorer
specifier|public
name|ValueFeatureScorer
parameter_list|(
name|FeatureWeight
name|weight
parameter_list|,
name|float
name|constScore
parameter_list|,
name|DocIdSetIterator
name|itr
parameter_list|)
block|{
name|super
argument_list|(
name|weight
argument_list|,
name|itr
argument_list|)
expr_stmt|;
name|this
operator|.
name|constScore
operator|=
name|constScore
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
block|{
return|return
name|constScore
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

