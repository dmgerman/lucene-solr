begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.norm
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|norm
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_comment
comment|/**  * A Normalizer to scale a feature value using a (min,max) range.  *<p>  * Example configuration:<pre> "norm" : {     "class" : "org.apache.solr.ltr.norm.MinMaxNormalizer",     "params" : { "min":"0", "max":"50" } }</pre>  * Example normalizations:  *<ul>  *<li>-5 will be normalized to -0.1  *<li>55 will be normalized to  1.1  *<li>+5 will be normalized to +0.1  *</ul>  */
end_comment

begin_class
DECL|class|MinMaxNormalizer
specifier|public
class|class
name|MinMaxNormalizer
extends|extends
name|Normalizer
block|{
DECL|field|min
specifier|private
name|float
name|min
init|=
name|Float
operator|.
name|NEGATIVE_INFINITY
decl_stmt|;
DECL|field|max
specifier|private
name|float
name|max
init|=
name|Float
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
DECL|field|delta
specifier|private
name|float
name|delta
init|=
name|max
operator|-
name|min
decl_stmt|;
DECL|method|updateDelta
specifier|private
name|void
name|updateDelta
parameter_list|()
block|{
name|delta
operator|=
name|max
operator|-
name|min
expr_stmt|;
block|}
DECL|method|getMin
specifier|public
name|float
name|getMin
parameter_list|()
block|{
return|return
name|min
return|;
block|}
DECL|method|setMin
specifier|public
name|void
name|setMin
parameter_list|(
name|float
name|min
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|updateDelta
argument_list|()
expr_stmt|;
block|}
DECL|method|setMin
specifier|public
name|void
name|setMin
parameter_list|(
name|String
name|min
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|updateDelta
argument_list|()
expr_stmt|;
block|}
DECL|method|getMax
specifier|public
name|float
name|getMax
parameter_list|()
block|{
return|return
name|max
return|;
block|}
DECL|method|setMax
specifier|public
name|void
name|setMax
parameter_list|(
name|float
name|max
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
name|updateDelta
argument_list|()
expr_stmt|;
block|}
DECL|method|setMax
specifier|public
name|void
name|setMax
parameter_list|(
name|String
name|max
parameter_list|)
block|{
name|this
operator|.
name|max
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|updateDelta
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|validate
specifier|protected
name|void
name|validate
parameter_list|()
throws|throws
name|NormalizerException
block|{
if|if
condition|(
name|delta
operator|==
literal|0f
condition|)
block|{
throw|throw
operator|new
name|NormalizerException
argument_list|(
literal|"MinMax Normalizer delta must not be zero "
operator|+
literal|"| min = "
operator|+
name|min
operator|+
literal|",max = "
operator|+
name|max
operator|+
literal|",delta = "
operator|+
name|delta
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|public
name|float
name|normalize
parameter_list|(
name|float
name|value
parameter_list|)
block|{
return|return
operator|(
name|value
operator|-
name|min
operator|)
operator|/
name|delta
return|;
block|}
annotation|@
name|Override
DECL|method|paramsToMap
specifier|public
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|paramsToMap
parameter_list|()
block|{
specifier|final
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
literal|2
argument_list|,
literal|1.0f
argument_list|)
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"min"
argument_list|,
name|min
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"max"
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return
name|params
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
comment|// default initialCapacity of 16 won't be enough
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"min="
argument_list|)
operator|.
name|append
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",max="
argument_list|)
operator|.
name|append
argument_list|(
name|max
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

