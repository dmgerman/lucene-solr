begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.ltr.store
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|LTRScoringModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|ltr
operator|.
name|model
operator|.
name|ModelException
import|;
end_import

begin_comment
comment|/**  * Contains the model and features declared.  */
end_comment

begin_class
DECL|class|ModelStore
specifier|public
class|class
name|ModelStore
block|{
DECL|field|availableModels
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|LTRScoringModel
argument_list|>
name|availableModels
decl_stmt|;
DECL|method|ModelStore
specifier|public
name|ModelStore
parameter_list|()
block|{
name|availableModels
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
DECL|method|getModel
specifier|public
specifier|synchronized
name|LTRScoringModel
name|getModel
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|availableModels
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|availableModels
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|method|getModels
specifier|public
name|List
argument_list|<
name|LTRScoringModel
argument_list|>
name|getModels
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|LTRScoringModel
argument_list|>
name|availableModelsValues
init|=
operator|new
name|ArrayList
argument_list|<
name|LTRScoringModel
argument_list|>
argument_list|(
name|availableModels
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|availableModelsValues
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ModelStore [availableModels="
operator|+
name|availableModels
operator|.
name|keySet
argument_list|()
operator|+
literal|"]"
return|;
block|}
DECL|method|delete
specifier|public
name|LTRScoringModel
name|delete
parameter_list|(
name|String
name|modelName
parameter_list|)
block|{
return|return
name|availableModels
operator|.
name|remove
argument_list|(
name|modelName
argument_list|)
return|;
block|}
DECL|method|addModel
specifier|public
specifier|synchronized
name|void
name|addModel
parameter_list|(
name|LTRScoringModel
name|modeldata
parameter_list|)
throws|throws
name|ModelException
block|{
specifier|final
name|String
name|name
init|=
name|modeldata
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|availableModels
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ModelException
argument_list|(
literal|"model '"
operator|+
name|name
operator|+
literal|"' already exists. Please use a different name"
argument_list|)
throw|;
block|}
name|availableModels
operator|.
name|put
argument_list|(
name|modeldata
operator|.
name|getName
argument_list|()
argument_list|,
name|modeldata
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

