begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.autoscaling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
operator|.
name|Clause
operator|.
name|Violation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
operator|.
name|Policy
operator|.
name|Suggester
operator|.
name|Hint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|MOVEREPLICA
import|;
end_import

begin_class
DECL|class|TestPolicy
specifier|public
class|class
name|TestPolicy
extends|extends
name|SolrTestCaseJ4
block|{
DECL|field|clusterState
specifier|public
specifier|static
name|String
name|clusterState
init|=
literal|"{'gettingstarted':{"
operator|+
literal|"    'router':{'name':'compositeId'},"
operator|+
literal|"    'shards':{"
operator|+
literal|"      'shard1':{"
operator|+
literal|"        'range':'80000000-ffffffff',"
operator|+
literal|"        'replicas':{"
operator|+
literal|"          'r1':{"
operator|+
literal|"            'core':r1,"
operator|+
literal|"            'base_url':'http://10.0.0.4:8983/solr',"
operator|+
literal|"            'node_name':'node1',"
operator|+
literal|"            'state':'active',"
operator|+
literal|"            'leader':'true'},"
operator|+
literal|"          'r2':{"
operator|+
literal|"            'core':r2,"
operator|+
literal|"            'base_url':'http://10.0.0.4:7574/solr',"
operator|+
literal|"            'node_name':'node2',"
operator|+
literal|"            'state':'active'}}},"
operator|+
literal|"      'shard2':{"
operator|+
literal|"        'range':'0-7fffffff',"
operator|+
literal|"        'replicas':{"
operator|+
literal|"          'r3':{"
operator|+
literal|"            'core':r3,"
operator|+
literal|"            'base_url':'http://10.0.0.4:8983/solr',"
operator|+
literal|"            'node_name':'node1',"
operator|+
literal|"            'state':'active',"
operator|+
literal|"            'leader':'true'},"
operator|+
literal|"          'r4':{"
operator|+
literal|"            'core':r4,"
operator|+
literal|"            'base_url':'http://10.0.0.4:8987/solr',"
operator|+
literal|"            'node_name':'node4',"
operator|+
literal|"            'state':'active'},"
operator|+
literal|"          'r6':{"
operator|+
literal|"            'core':r6,"
operator|+
literal|"            'base_url':'http://10.0.0.4:8989/solr',"
operator|+
literal|"            'node_name':'node3',"
operator|+
literal|"            'state':'active'},"
operator|+
literal|"          'r5':{"
operator|+
literal|"            'core':r5,"
operator|+
literal|"            'base_url':'http://10.0.0.4:7574/solr',"
operator|+
literal|"            'node_name':'node1',"
operator|+
literal|"            'state':'active'}}}}}}"
decl_stmt|;
DECL|method|getReplicaDetails
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaDetails
parameter_list|(
name|String
name|node
parameter_list|,
name|String
name|s
parameter_list|)
block|{
name|ValidatingJsonMap
name|m
init|=
name|ValidatingJsonMap
operator|.
name|getDeepCopy
argument_list|(
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|s
argument_list|)
argument_list|,
literal|6
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|m
operator|.
name|forEach
argument_list|(
parameter_list|(
name|collName
parameter_list|,
name|o
parameter_list|)
lambda|->
block|{
name|ValidatingJsonMap
name|coll
init|=
operator|(
name|ValidatingJsonMap
operator|)
name|o
decl_stmt|;
name|coll
operator|.
name|getMap
argument_list|(
literal|"shards"
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|shard
parameter_list|,
name|o1
parameter_list|)
lambda|->
block|{
name|ValidatingJsonMap
name|sh
init|=
operator|(
name|ValidatingJsonMap
operator|)
name|o1
decl_stmt|;
name|sh
operator|.
name|getMap
argument_list|(
literal|"replicas"
argument_list|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|replicaName
parameter_list|,
name|o2
parameter_list|)
lambda|->
block|{
name|ValidatingJsonMap
name|r
init|=
operator|(
name|ValidatingJsonMap
operator|)
name|o2
decl_stmt|;
name|String
name|node_name
init|=
operator|(
name|String
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"node_name"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|node_name
operator|.
name|equals
argument_list|(
name|node
argument_list|)
condition|)
return|return;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
name|shardVsReplicaStats
init|=
name|result
operator|.
name|get
argument_list|(
name|collName
argument_list|)
decl_stmt|;
if|if
condition|(
name|shardVsReplicaStats
operator|==
literal|null
condition|)
name|result
operator|.
name|put
argument_list|(
name|collName
argument_list|,
name|shardVsReplicaStats
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
name|replicaInfos
init|=
name|shardVsReplicaStats
operator|.
name|get
argument_list|(
name|shard
argument_list|)
decl_stmt|;
if|if
condition|(
name|replicaInfos
operator|==
literal|null
condition|)
name|shardVsReplicaStats
operator|.
name|put
argument_list|(
name|shard
argument_list|,
name|replicaInfos
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
name|replicaInfos
operator|.
name|add
argument_list|(
operator|new
name|Policy
operator|.
name|ReplicaInfo
argument_list|(
name|replicaName
argument_list|,
name|collName
argument_list|,
name|shard
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
DECL|method|testOperands
specifier|public
name|void
name|testOperands
parameter_list|()
block|{
name|Clause
name|c
init|=
operator|new
name|Clause
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{replica:'<2', node:'#ANY'}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|replica
operator|.
name|isPass
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|replica
operator|.
name|isPass
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|replica
operator|.
name|isPass
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|Clause
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{replica:'>2', node:'#ANY'}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|replica
operator|.
name|isPass
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|replica
operator|.
name|isPass
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|replica
operator|.
name|isPass
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|Clause
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{replica:0, nodeRole:'!overseer'}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|tag
operator|.
name|isPass
argument_list|(
literal|"OVERSEER"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|c
operator|.
name|tag
operator|.
name|isPass
argument_list|(
literal|"overseer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRow
specifier|public
name|void
name|testRow
parameter_list|()
block|{
name|Row
name|row
init|=
operator|new
name|Row
argument_list|(
literal|"nodex"
argument_list|,
operator|new
name|Cell
index|[]
block|{
operator|new
name|Cell
argument_list|(
literal|0
argument_list|,
literal|"node"
argument_list|,
literal|"nodex"
argument_list|)
block|}
argument_list|,
literal|false
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
name|Row
name|r1
init|=
name|row
operator|.
name|addReplica
argument_list|(
literal|"c1"
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|Row
name|r2
init|=
name|r1
operator|.
name|addReplica
argument_list|(
literal|"c1"
argument_list|,
literal|"s1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|r1
operator|.
name|collectionVsShardVsReplicas
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r2
operator|.
name|collectionVsShardVsReplicas
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|collectionVsShardVsReplicas
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|Policy
operator|.
name|ReplicaInfo
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|r2
operator|.
name|collectionVsShardVsReplicas
operator|.
name|get
argument_list|(
literal|"c1"
argument_list|)
operator|.
name|get
argument_list|(
literal|"s1"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|instanceof
name|Policy
operator|.
name|ReplicaInfo
argument_list|)
expr_stmt|;
block|}
DECL|method|testMerge
specifier|public
name|void
name|testMerge
parameter_list|()
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"  'cluster-preferences': ["
operator|+
literal|"    { 'maximize': 'freedisk', 'precision': 50},"
operator|+
literal|"    { 'minimize': 'cores', 'precision': 50}"
operator|+
literal|"  ],"
operator|+
literal|"  'cluster-policy': ["
operator|+
literal|"    { 'replica': 0, 'nodeRole': 'overseer'},"
operator|+
literal|"    { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'}"
operator|+
literal|"  ],"
operator|+
literal|"  'policies': {"
operator|+
literal|"    'policy1': ["
operator|+
literal|"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'},"
operator|+
literal|"      { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'},"
operator|+
literal|"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}"
operator|+
literal|"    ]"
operator|+
literal|"  }"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|clauses
init|=
name|Policy
operator|.
name|mergePolicies
argument_list|(
literal|"mycoll"
argument_list|,
name|policy
operator|.
name|policies
operator|.
name|get
argument_list|(
literal|"policy1"
argument_list|)
argument_list|,
name|policy
operator|.
name|clusterPolicy
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|clauses
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|clauses
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clauses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|original
operator|.
name|get
argument_list|(
literal|"replica"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|clauses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|original
operator|.
name|get
argument_list|(
literal|"replica"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"#ANY"
argument_list|,
name|clauses
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|original
operator|.
name|get
argument_list|(
literal|"shard"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rack1"
argument_list|,
name|clauses
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|original
operator|.
name|get
argument_list|(
literal|"rack"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"overseer"
argument_list|,
name|clauses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|original
operator|.
name|get
argument_list|(
literal|"nodeRole"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConditionsSort
specifier|public
name|void
name|testConditionsSort
parameter_list|()
block|{
name|String
name|rules
init|=
literal|"{"
operator|+
literal|"    'cluster-policy':["
operator|+
literal|"      { 'nodeRole':'overseer', replica: 0,  'strict':false},"
operator|+
literal|"      { 'replica':'<1', 'node':'node3', 'shard':'#EACH'},"
operator|+
literal|"      { 'replica':'<2', 'node':'#ANY', 'shard':'#EACH'},"
operator|+
literal|"      { 'replica':1, 'rack':'rack1'}]"
operator|+
literal|"  }"
decl_stmt|;
name|Policy
name|p
init|=
operator|new
name|Policy
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|rules
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|clauses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|p
operator|.
name|getClusterPolicy
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|clauses
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"nodeRole"
argument_list|,
name|clauses
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|tag
operator|.
name|name
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rack"
argument_list|,
name|clauses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|tag
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
DECL|method|testRules
specifier|public
name|void
name|testRules
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|rules
init|=
literal|"{"
operator|+
literal|"cluster-policy:["
operator|+
literal|"{nodeRole:'overseer',replica : 0 , strict:false},"
operator|+
literal|"{replica:'<1',node:node3},"
operator|+
literal|"{replica:'<2',node:'#ANY', shard:'#EACH'}],"
operator|+
literal|" cluster-preferences:["
operator|+
literal|"{minimize:cores , precision:2},"
operator|+
literal|"{maximize:freedisk, precision:50}, "
operator|+
literal|"{minimize:heapUsage, precision:1000}]}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|nodeValues
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"node1:{cores:12, freedisk: 334, heapUsage:10480},"
operator|+
literal|"node2:{cores:4, freedisk: 749, heapUsage:6873},"
operator|+
literal|"node3:{cores:7, freedisk: 262, heapUsage:7834},"
operator|+
literal|"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|rules
argument_list|)
argument_list|)
decl_stmt|;
name|Policy
operator|.
name|Session
name|session
decl_stmt|;
name|session
operator|=
name|policy
operator|.
name|createSession
argument_list|(
name|getClusterDataProvider
argument_list|(
name|nodeValues
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Row
argument_list|>
name|l
init|=
name|session
operator|.
name|getSorted
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"node1"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node3"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node4"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|node
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|l
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|node
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Violation
argument_list|>
name|violations
init|=
name|session
operator|.
name|getViolations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|violations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|violations
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|violation
lambda|->
literal|"node3"
operator|.
name|equals
argument_list|(
name|violation
operator|.
name|getClause
argument_list|()
operator|.
name|tag
operator|.
name|val
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|violations
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|violation
lambda|->
literal|"nodeRole"
operator|.
name|equals
argument_list|(
name|violation
operator|.
name|getClause
argument_list|()
operator|.
name|tag
operator|.
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|violations
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|violation
lambda|->
operator|(
name|violation
operator|.
name|getClause
argument_list|()
operator|.
name|replica
operator|.
name|op
operator|==
name|Operand
operator|.
name|LESS_THAN
operator|&&
literal|"node"
operator|.
name|equals
argument_list|(
name|violation
operator|.
name|getClause
argument_list|()
operator|.
name|tag
operator|.
name|name
argument_list|)
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|Policy
operator|.
name|Suggester
name|suggester
init|=
name|session
operator|.
name|getSuggester
argument_list|(
name|ADDREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|,
literal|"gettingstarted"
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|,
literal|"r1"
argument_list|)
decl_stmt|;
name|SolrParams
name|operation
init|=
name|suggester
operator|.
name|getOperation
argument_list|()
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|operation
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|nodeValues
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"node1:{cores:12, freedisk: 334, heapUsage:10480},"
operator|+
literal|"node2:{cores:4, freedisk: 749, heapUsage:6873},"
operator|+
literal|"node3:{cores:7, freedisk: 262, heapUsage:7834},"
operator|+
literal|"node5:{cores:0, freedisk: 895, heapUsage:17834},"
operator|+
literal|"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer}"
operator|+
literal|"}"
argument_list|)
expr_stmt|;
name|session
operator|=
name|policy
operator|.
name|createSession
argument_list|(
name|getClusterDataProvider
argument_list|(
name|nodeValues
argument_list|,
name|clusterState
argument_list|)
argument_list|)
expr_stmt|;
name|SolrRequest
name|opReq
init|=
name|session
operator|.
name|getSuggester
argument_list|(
name|MOVEREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|TARGET_NODE
argument_list|,
literal|"node5"
argument_list|)
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|opReq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node5"
argument_list|,
name|opReq
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"targetNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testGreedyConditions
specifier|public
name|void
name|testGreedyConditions
parameter_list|()
block|{
name|String
name|autoscaleJson
init|=
literal|"{"
operator|+
literal|"      'cluster-policy':["
operator|+
literal|"      {'cores':'<10','node':'#ANY'},"
operator|+
literal|"      {'replica':'<3','shard':'#EACH','node':'#ANY'},"
operator|+
literal|"      { 'replica': 2, 'sysprop.fs': 'ssd', 'shard': '#EACH'},"
operator|+
comment|//greedy condition
literal|"      {'nodeRole':'overseer','replica':'0'}],"
operator|+
literal|"      'cluster-preferences':["
operator|+
literal|"      {'minimize':'cores', 'precision':3},"
operator|+
literal|"      {'maximize':'freedisk','precision':100}]}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|nodeValues
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},"
operator|+
literal|"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},"
operator|+
literal|"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2, sysprop.fs : ssd},"
operator|+
literal|"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|autoscaleJson
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterDataProvider
name|clusterDataProvider
init|=
name|getClusterDataProvider
argument_list|(
name|nodeValues
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|ClusterDataProvider
name|cdp
init|=
operator|new
name|ClusterDataProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNodeValues
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|clusterDataProvider
operator|.
name|getNodeValues
argument_list|(
name|node
argument_list|,
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaInfo
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|clusterDataProvider
operator|.
name|getReplicaInfo
argument_list|(
name|node
argument_list|,
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|clusterDataProvider
operator|.
name|getNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyNameByCollection
parameter_list|(
name|String
name|coll
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Policy
operator|.
name|Session
name|session
init|=
name|policy
operator|.
name|createSession
argument_list|(
name|cdp
argument_list|)
decl_stmt|;
name|Policy
operator|.
name|Suggester
name|suggester
init|=
name|session
operator|.
name|getSuggester
argument_list|(
name|ADDREPLICA
argument_list|)
decl_stmt|;
name|SolrRequest
name|op
init|=
name|suggester
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|,
literal|"newColl"
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|,
literal|"shard1"
argument_list|)
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node3"
argument_list|,
name|op
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|=
name|suggester
operator|.
name|getSession
argument_list|()
operator|.
name|getSuggester
argument_list|(
name|ADDREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|,
literal|"newColl"
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|,
literal|"shard1"
argument_list|)
expr_stmt|;
name|op
operator|=
name|suggester
operator|.
name|getOperation
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node3"
argument_list|,
name|op
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
name|suggester
operator|=
name|suggester
operator|.
name|getSession
argument_list|()
operator|.
name|getSuggester
argument_list|(
name|ADDREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|,
literal|"newColl"
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|,
literal|"shard1"
argument_list|)
expr_stmt|;
name|op
operator|=
name|suggester
operator|.
name|getOperation
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|op
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"node"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMoveReplica
specifier|public
name|void
name|testMoveReplica
parameter_list|()
block|{
name|String
name|autoscaleJson
init|=
literal|"{"
operator|+
literal|"      'cluster-policy':["
operator|+
literal|"      {'cores':'<10','node':'#ANY'},"
operator|+
literal|"      {'replica':'<3','shard':'#EACH','node':'#ANY'},"
operator|+
literal|"      {'nodeRole':'overseer','replica':'0'}],"
operator|+
literal|"      'cluster-preferences':["
operator|+
literal|"      {'minimize':'cores', 'precision':3},"
operator|+
literal|"      {'maximize':'freedisk','precision':100}]}"
decl_stmt|;
name|Map
name|replicaInfoMap
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{ '127.0.0.1:60099_solr':{},"
operator|+
literal|" '127.0.0.1:60089_solr':{'compute_plan_action_test':{'shard1':["
operator|+
literal|"      {'core_node1':{}},"
operator|+
literal|"      {'core_node2':{}}]}}}"
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|replicaInfoMap
argument_list|,
literal|false
argument_list|,
literal|"127.0.0.1:60089_solr/compute_plan_action_test"
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"shard1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Policy
operator|.
name|ReplicaInfo
argument_list|(
literal|"core_node1"
argument_list|,
literal|"compute_plan_action_test"
argument_list|,
literal|"shard1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Policy
operator|.
name|ReplicaInfo
argument_list|(
literal|"core_node2"
argument_list|,
literal|"compute_plan_action_test"
argument_list|,
literal|"shard1"
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|tagsMap
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"      '127.0.0.1:60099_solr':{"
operator|+
literal|"        'cores':0,"
operator|+
literal|"            'freedisk':918005641216},"
operator|+
literal|"      '127.0.0.1:60089_solr':{"
operator|+
literal|"        'cores':2,"
operator|+
literal|"            'freedisk':918005641216}}}"
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|autoscaleJson
argument_list|)
argument_list|)
decl_stmt|;
name|Policy
operator|.
name|Session
name|session
init|=
name|policy
operator|.
name|createSession
argument_list|(
operator|new
name|ClusterDataProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNodeValues
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|tagsMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaInfo
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
operator|)
name|replicaInfoMap
operator|.
name|get
argument_list|(
name|node
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|replicaInfoMap
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyNameByCollection
parameter_list|(
name|String
name|coll
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Policy
operator|.
name|Suggester
name|suggester
init|=
name|session
operator|.
name|getSuggester
argument_list|(
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|MOVEREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|TARGET_NODE
argument_list|,
literal|"127.0.0.1:60099_solr"
argument_list|)
decl_stmt|;
name|SolrParams
name|op
init|=
name|suggester
operator|.
name|getOperation
argument_list|()
operator|.
name|getParams
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|session
operator|=
name|suggester
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|suggester
operator|=
name|session
operator|.
name|getSuggester
argument_list|(
name|MOVEREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|TARGET_NODE
argument_list|,
literal|"127.0.0.1:60099_solr"
argument_list|)
expr_stmt|;
name|op
operator|=
name|suggester
operator|.
name|getOperation
argument_list|()
operator|.
name|getParams
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
block|}
DECL|method|testOtherTag
specifier|public
name|void
name|testOtherTag
parameter_list|()
block|{
name|String
name|rules
init|=
literal|"{"
operator|+
literal|"'cluster-preferences':["
operator|+
literal|"{'minimize':'cores','precision':2},"
operator|+
literal|"{'maximize':'freedisk','precision':50},"
operator|+
literal|"{'minimize':'heapUsage','precision':1000}"
operator|+
literal|"],"
operator|+
literal|"'cluster-policy':["
operator|+
literal|"{replica:0, 'nodeRole':'overseer','strict':false},"
operator|+
literal|"{'replica':'<1','node':'node3'},"
operator|+
literal|"{'replica':'<2','node':'#ANY','shard':'#EACH'}"
operator|+
literal|"],"
operator|+
literal|"'policies':{"
operator|+
literal|"'p1':["
operator|+
literal|"{replica:0, 'nodeRole':'overseer','strict':false},"
operator|+
literal|"{'replica':'<1','node':'node3'},"
operator|+
literal|"{'replica':'<2','node':'#ANY','shard':'#EACH'},"
operator|+
literal|"{'replica':'<3','shard':'#EACH','rack':'#ANY'}"
operator|+
literal|"]"
operator|+
literal|"}"
operator|+
literal|"}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|nodeValues
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"node1:{cores:12, freedisk: 334, heapUsage:10480, rack: rack4},"
operator|+
literal|"node2:{cores:4, freedisk: 749, heapUsage:6873, rack: rack3},"
operator|+
literal|"node3:{cores:7, freedisk: 262, heapUsage:7834, rack: rack2},"
operator|+
literal|"node4:{cores:8, freedisk: 375, heapUsage:16900, nodeRole:overseer, rack: rack1}"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|rules
argument_list|)
argument_list|)
decl_stmt|;
name|ClusterDataProvider
name|clusterDataProvider
init|=
name|getClusterDataProvider
argument_list|(
name|nodeValues
argument_list|,
name|clusterState
argument_list|)
decl_stmt|;
name|ClusterDataProvider
name|cdp
init|=
operator|new
name|ClusterDataProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNodeValues
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|clusterDataProvider
operator|.
name|getNodeValues
argument_list|(
name|node
argument_list|,
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaInfo
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|clusterDataProvider
operator|.
name|getReplicaInfo
argument_list|(
name|node
argument_list|,
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|clusterDataProvider
operator|.
name|getNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyNameByCollection
parameter_list|(
name|String
name|coll
parameter_list|)
block|{
return|return
literal|"p1"
return|;
block|}
block|}
decl_stmt|;
name|Policy
operator|.
name|Session
name|session
init|=
name|policy
operator|.
name|createSession
argument_list|(
name|cdp
argument_list|)
decl_stmt|;
name|CollectionAdminRequest
operator|.
name|AddReplica
name|op
init|=
operator|(
name|CollectionAdminRequest
operator|.
name|AddReplica
operator|)
name|session
operator|.
name|getSuggester
argument_list|(
name|ADDREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|,
literal|"newColl"
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|,
literal|"s1"
argument_list|)
operator|.
name|getOperation
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"node2"
argument_list|,
name|op
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getClusterDataProvider
specifier|private
name|ClusterDataProvider
name|getClusterDataProvider
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|nodeValues
parameter_list|,
name|String
name|clusterState
parameter_list|)
block|{
return|return
operator|new
name|ClusterDataProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNodeValues
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|tags
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|result
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|nodeValues
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|nodeValues
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyNameByCollection
parameter_list|(
name|String
name|coll
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaInfo
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|getReplicaDetails
argument_list|(
name|node
argument_list|,
name|clusterState
argument_list|)
return|;
block|}
block|}
return|;
block|}
DECL|method|testMultiReplicaPlacement
specifier|public
name|void
name|testMultiReplicaPlacement
parameter_list|()
block|{
name|String
name|autoScaleJson
init|=
literal|"{"
operator|+
literal|"  'cluster-preferences': ["
operator|+
literal|"    { maximize : freedisk , precision: 50},"
operator|+
literal|"    { minimize : cores, precision: 2}"
operator|+
literal|"  ],"
operator|+
literal|"  'cluster-policy': ["
operator|+
literal|"    { replica : '0' , 'nodeRole': 'overseer'},"
operator|+
literal|"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'"
operator|+
literal|"    }"
operator|+
literal|"  ],"
operator|+
literal|"  'policies': {"
operator|+
literal|"    'policy1': ["
operator|+
literal|"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},"
operator|+
literal|"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}"
operator|+
comment|//        "      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}" +
literal|"    ]"
operator|+
literal|"  }"
operator|+
literal|"}"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
name|nodeValues
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{"
operator|+
literal|"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},"
operator|+
literal|"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},"
operator|+
literal|"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},"
operator|+
literal|"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}"
operator|+
literal|"}"
argument_list|)
decl_stmt|;
name|ClusterDataProvider
name|dataProvider
init|=
operator|new
name|ClusterDataProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNodeValues
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|result
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|keys
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|s
lambda|->
name|result
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|nodeValues
operator|.
name|get
argument_list|(
name|node
argument_list|)
operator|.
name|get
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaInfo
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|getReplicaDetails
argument_list|(
name|node
argument_list|,
name|clusterState
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyNameByCollection
parameter_list|(
name|String
name|coll
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
literal|"node1"
argument_list|,
literal|"node2"
argument_list|,
literal|"node3"
argument_list|,
literal|"node4"
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|locations
init|=
name|PolicyHelper
operator|.
name|getReplicaLocations
argument_list|(
literal|"newColl"
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
name|autoScaleJson
argument_list|)
argument_list|,
name|dataProvider
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"newColl"
argument_list|,
literal|"policy1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"shard1"
argument_list|,
literal|"shard2"
argument_list|)
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|"shard1"
argument_list|)
operator|.
name|containsAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|,
literal|"node3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|locations
operator|.
name|get
argument_list|(
literal|"shard2"
argument_list|)
operator|.
name|containsAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"node2"
argument_list|,
literal|"node1"
argument_list|,
literal|"node3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

