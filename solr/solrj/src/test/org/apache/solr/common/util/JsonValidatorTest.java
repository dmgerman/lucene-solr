begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|toJSONString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
operator|.
name|NOT_NULL
import|;
end_import

begin_class
DECL|class|JsonValidatorTest
specifier|public
class|class
name|JsonValidatorTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testSchema
specifier|public
name|void
name|testSchema
parameter_list|()
block|{
name|checkSchema
argument_list|(
literal|"collections.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"collections.collection.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"collections.collection.shards.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"collections.collection.shards.shard.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"cores.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"cores.core.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"node.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"cluster.security.BasicAuth.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"cluster.security.RuleBasedAuthorization"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"core.config.Commands"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"core.SchemaEdit"
argument_list|)
expr_stmt|;
name|checkSchema
argument_list|(
literal|"cluster.configs.Commands"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSchemaValidation
specifier|public
name|void
name|testSchemaValidation
parameter_list|()
block|{
name|ValidatingJsonMap
name|spec
init|=
name|Utils
operator|.
name|getSpec
argument_list|(
literal|"collections.Commands"
argument_list|)
operator|.
name|getSpec
argument_list|()
decl_stmt|;
name|Map
name|createSchema
init|=
name|spec
operator|.
name|getMap
argument_list|(
literal|"commands"
argument_list|,
name|NOT_NULL
argument_list|)
operator|.
name|getMap
argument_list|(
literal|"create-alias"
argument_list|,
name|NOT_NULL
argument_list|)
decl_stmt|;
name|JsonSchemaValidator
name|validator
init|=
operator|new
name|JsonSchemaValidator
argument_list|(
name|createSchema
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|errs
init|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name : x, collections: [ c1 , c2]}"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name : x, collections: [c1] }"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name : x, x:y, collections: [ c1 , c2]}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name : 123, collections: c1 }"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"expected"
argument_list|)
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{x:y, collections: [ c1 , c2]}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|StrUtils
operator|.
name|join
argument_list|(
name|errs
argument_list|,
literal|'|'
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name : x, collections: [ 1 , 2]}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|toJSONString
argument_list|(
name|errs
argument_list|)
argument_list|,
name|errs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"expected"
argument_list|)
argument_list|)
expr_stmt|;
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
literal|"{"
operator|+
literal|"  type:object,"
operator|+
literal|"  properties: {"
operator|+
literal|"   age : {type: number},"
operator|+
literal|"   adult : {type: boolean},"
operator|+
literal|"   name: {type: string}}}"
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name:x, age:21, adult:true}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|errs
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name:x, age:'21', adult:'true'}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|errs
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name:x, age:'x21', adult:'true'}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
literal|"{"
operator|+
literal|"  type:object,"
operator|+
literal|"  properties: {"
operator|+
literal|"   age : {type: int},"
operator|+
literal|"   adult : {type: Boolean},"
operator|+
literal|"   name: {type: string}}}"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unknown type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|JsonSchemaValidator
argument_list|(
literal|"{"
operator|+
literal|"  type:object,"
operator|+
literal|"   x : y,"
operator|+
literal|"  properties: {"
operator|+
literal|"   age : {type: number},"
operator|+
literal|"   adult : {type: boolean},"
operator|+
literal|"   name: {type: string}}}"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unknown key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
operator|new
name|JsonSchemaValidator
argument_list|(
literal|"{"
operator|+
literal|"  type:object,"
operator|+
literal|"  propertes: {"
operator|+
literal|"   age : {type: number},"
operator|+
literal|"   adult : {type: boolean},"
operator|+
literal|"   name: {type: string}}}"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"should have failed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Unknown key : propertes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
literal|"{"
operator|+
literal|"  type:object,"
operator|+
literal|"  properties: {"
operator|+
literal|"   age : {type: number},"
operator|+
literal|"   sex: {type: string, enum:[M, F]},"
operator|+
literal|"   adult : {type: boolean},"
operator|+
literal|"   name: {type: string}}}"
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name: 'Joe Average' , sex:M}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"errs are "
operator|+
name|errs
argument_list|,
name|errs
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{name: 'Joe Average' , sex:m}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|errs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|errs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Value of enum"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|schema
init|=
literal|"{\n"
operator|+
literal|"  'type': 'object',\n"
operator|+
literal|"  'properties': {\n"
operator|+
literal|"    'links': {\n"
operator|+
literal|"      'type': 'array',\n"
operator|+
literal|"      'items':{"
operator|+
literal|"          'type': 'object',\n"
operator|+
literal|"          'properties': {\n"
operator|+
literal|"            'rel': {\n"
operator|+
literal|"              'type': 'string'\n"
operator|+
literal|"            },\n"
operator|+
literal|"            'href': {\n"
operator|+
literal|"              'type': 'string'\n"
operator|+
literal|"            }\n"
operator|+
literal|"          }\n"
operator|+
literal|"        }\n"
operator|+
literal|"    }\n"
operator|+
literal|"\n"
operator|+
literal|"  }\n"
operator|+
literal|"}"
decl_stmt|;
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{\n"
operator|+
literal|"  'links': [\n"
operator|+
literal|"    {\n"
operator|+
literal|"        'rel': 'x',\n"
operator|+
literal|"        'href': 'x'\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"        'rel': 'x',\n"
operator|+
literal|"        'href': 'x'\n"
operator|+
literal|"    },\n"
operator|+
literal|"    {\n"
operator|+
literal|"        'rel': 'x',\n"
operator|+
literal|"        'href': 'x'\n"
operator|+
literal|"    }\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
argument_list|)
argument_list|)
expr_stmt|;
name|schema
operator|=
literal|"{\n"
operator|+
literal|"'type' : 'object',\n"
operator|+
literal|"'oneOf' : ['a', 'b']\n"
operator|+
literal|"}"
expr_stmt|;
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
name|schema
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|""
operator|+
literal|"{'c':'val'}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|errs
argument_list|)
expr_stmt|;
name|errs
operator|=
name|validator
operator|.
name|validateJson
argument_list|(
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|""
operator|+
literal|"{'a':'val'}"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|errs
argument_list|)
expr_stmt|;
block|}
DECL|method|checkSchema
specifier|private
name|void
name|checkSchema
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ValidatingJsonMap
name|spec
init|=
name|Utils
operator|.
name|getSpec
argument_list|(
name|name
argument_list|)
operator|.
name|getSpec
argument_list|()
decl_stmt|;
name|Map
name|commands
init|=
operator|(
name|Map
operator|)
name|spec
operator|.
name|get
argument_list|(
literal|"commands"
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|commands
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|cmd
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
try|try
block|{
name|JsonSchemaValidator
name|validator
init|=
operator|new
name|JsonSchemaValidator
argument_list|(
operator|(
name|Map
operator|)
name|cmd
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error in command  "
operator|+
name|cmd
operator|.
name|getKey
argument_list|()
operator|+
literal|" in schema "
operator|+
name|name
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

