begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
operator|.
name|makeMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
operator|.
name|ENUM_OF
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
operator|.
name|NOT_NULL
import|;
end_import

begin_class
DECL|class|TestValidatingJsonMap
specifier|public
class|class
name|TestValidatingJsonMap
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testBasic
specifier|public
name|void
name|testBasic
parameter_list|()
throws|throws
name|Exception
block|{
name|ValidatingJsonMap
name|m
init|=
name|ValidatingJsonMap
operator|.
name|wrap
argument_list|(
name|makeMap
argument_list|(
literal|"a"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
literal|"b"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
literal|"i"
argument_list|,
literal|10
argument_list|,
literal|"l"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"X"
argument_list|,
literal|"Y"
argument_list|)
argument_list|,
literal|"c"
argument_list|,
name|makeMap
argument_list|(
literal|"d"
argument_list|,
literal|"D"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|TRUE
argument_list|,
name|m
operator|.
name|getBool
argument_list|(
literal|"a"
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Boolean
operator|.
name|FALSE
argument_list|,
name|m
operator|.
name|getBool
argument_list|(
literal|"b"
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Integer
argument_list|(
literal|10
argument_list|)
argument_list|,
name|m
operator|.
name|getInt
argument_list|(
literal|"i"
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|m
operator|.
name|getList
argument_list|(
literal|"l"
argument_list|,
name|ENUM_OF
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"X"
argument_list|,
literal|"Z"
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Must have failed with unexpected type"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{ }
name|List
name|l
init|=
name|m
operator|.
name|getList
argument_list|(
literal|"l"
argument_list|,
name|ENUM_OF
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"X"
argument_list|,
literal|"Y"
argument_list|,
literal|"Z"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|getList
argument_list|(
literal|"l"
argument_list|,
name|NOT_NULL
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|m
operator|.
name|getMap
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

