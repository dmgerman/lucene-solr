begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrJettyTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|XMLResponseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|SolrResourceLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for ClusteringComponent's response in Solrj  */
end_comment

begin_class
DECL|class|TestClusteringResponse
specifier|public
class|class
name|TestClusteringResponse
extends|extends
name|SolrJettyTestBase
block|{
annotation|@
name|Test
DECL|method|testClusteringResponse
specifier|public
name|void
name|testClusteringResponse
parameter_list|()
throws|throws
name|Exception
block|{
name|XMLResponseParser
name|parser
init|=
operator|new
name|XMLResponseParser
argument_list|()
decl_stmt|;
comment|/*Load a simple XML with the clustering response encoded in an XML format*/
name|InputStream
name|is
init|=
operator|new
name|SolrResourceLoader
argument_list|()
operator|.
name|openResource
argument_list|(
literal|"solrj/sampleClusteringResponse.xml"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|Reader
name|in
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|NamedList
argument_list|<
name|Object
argument_list|>
name|response
init|=
name|parser
operator|.
name|processResponse
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|QueryResponse
name|qr
init|=
operator|new
name|QueryResponse
argument_list|(
name|response
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|ClusteringResponse
name|clusteringResponse
init|=
name|qr
operator|.
name|getClusteringResponse
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Cluster
argument_list|>
name|clusters
init|=
name|clusteringResponse
operator|.
name|getClusters
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|clusters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|checkCluster
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"label1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|,
literal|"id3"
argument_list|)
argument_list|,
literal|0.6d
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCluster
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"label2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id5"
argument_list|,
literal|"id6"
argument_list|)
argument_list|,
literal|0.93d
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCluster
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"label3"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id7"
argument_list|,
literal|"id8"
argument_list|)
argument_list|,
literal|1.26d
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCluster
argument_list|(
name|clusters
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"label4"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id9"
argument_list|)
argument_list|,
literal|0d
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Cluster
argument_list|>
name|sub
init|=
name|clusters
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getSubclusters
argument_list|()
decl_stmt|;
name|checkCluster
argument_list|(
name|sub
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"label1.sub1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id1"
argument_list|,
literal|"id2"
argument_list|)
argument_list|,
literal|0.0d
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|checkCluster
argument_list|(
name|sub
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"label1.sub2"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"id2"
argument_list|)
argument_list|,
literal|0.0d
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sub
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
DECL|method|checkCluster
specifier|private
name|void
name|checkCluster
parameter_list|(
name|Cluster
name|cluster
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|labels
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|docRefs
parameter_list|,
name|double
name|score
parameter_list|,
name|boolean
name|otherTopics
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getLabels
argument_list|()
argument_list|,
name|labels
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getDocs
argument_list|()
argument_list|,
name|docRefs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Double
operator|.
name|compare
argument_list|(
name|cluster
operator|.
name|getScore
argument_list|()
argument_list|,
name|score
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|otherTopics
argument_list|,
name|cluster
operator|.
name|isOtherTopics
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

