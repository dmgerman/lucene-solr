begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|FieldEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_class
DECL|class|FieldEvaluatorTest
specifier|public
class|class
name|FieldEvaluatorTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|values
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
decl_stmt|;
DECL|method|FieldEvaluatorTest
specifier|public
name|FieldEvaluatorTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|values
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|Test
DECL|method|listTypes
specifier|public
name|void
name|listTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Double
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|FieldEvaluator
argument_list|(
name|fieldName
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|instanceof
name|Collection
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
name|fieldName
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"a"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"b"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"c"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"d"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"second"
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"e"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|arrayTypes
specifier|public
name|void
name|arrayTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
operator|new
name|Boolean
index|[]
block|{
literal|true
block|,
literal|false
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
operator|new
name|Double
index|[]
block|{
literal|0.0
block|,
literal|1.1
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
operator|new
name|Long
index|[]
block|{
literal|0L
block|,
literal|1L
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"first"
block|,
literal|"second"
block|}
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|FieldEvaluator
argument_list|(
name|fieldName
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|instanceof
name|Collection
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
name|fieldName
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"a"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"b"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"c"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"d"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"second"
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"e"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
annotation|@
name|Test
DECL|method|iterableTypes
specifier|public
name|void
name|iterableTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
operator|new
name|PriorityQueue
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"b"
argument_list|,
operator|new
name|PriorityQueue
argument_list|<
name|Double
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|0.0
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|1.1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"c"
argument_list|,
operator|new
name|PriorityQueue
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"d"
argument_list|,
operator|new
name|PriorityQueue
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"e"
argument_list|,
operator|new
name|PriorityQueue
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
block|{
name|add
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|add
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"e"
block|}
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|new
name|FieldEvaluator
argument_list|(
name|fieldName
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|instanceof
name|Collection
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
name|fieldName
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// the priority queue is doing natural ordering, so false is first
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"a"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1.1
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"b"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"c"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"d"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"second"
argument_list|,
operator|(
operator|(
name|Collection
argument_list|<
name|?
argument_list|>
operator|)
operator|new
name|FieldEvaluator
argument_list|(
literal|"e"
argument_list|)
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
operator|)
operator|.
name|toArray
argument_list|()
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

