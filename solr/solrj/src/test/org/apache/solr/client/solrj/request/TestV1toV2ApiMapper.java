begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
operator|.
name|Create
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_class
DECL|class|TestV1toV2ApiMapper
specifier|public
class|class
name|TestV1toV2ApiMapper
extends|extends
name|LuceneTestCase
block|{
DECL|method|testCommands
specifier|public
name|void
name|testCommands
parameter_list|()
throws|throws
name|IOException
block|{
name|Create
name|cmd
init|=
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"mycoll"
argument_list|,
literal|"conf1"
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
operator|.
name|setProperties
argument_list|(
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
literal|"p1"
argument_list|,
literal|"v1"
argument_list|)
operator|.
name|put
argument_list|(
literal|"p2"
argument_list|,
literal|"v2"
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|V2Request
name|v2r
init|=
name|V1toV2ApiMapper
operator|.
name|convert
argument_list|(
name|cmd
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Map
name|m
init|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|v2r
operator|.
name|getContentStreams
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"/c"
argument_list|,
name|v2r
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v1"
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"/create/properties/p1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"v2"
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"/create/properties/p2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"/create/numShards"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"/create/nrtReplicas"
argument_list|)
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|AddReplica
name|addReplica
init|=
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
literal|"mycoll"
argument_list|,
literal|"shard1"
argument_list|)
decl_stmt|;
name|v2r
operator|=
name|V1toV2ApiMapper
operator|.
name|convert
argument_list|(
name|addReplica
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|m
operator|=
operator|(
name|Map
operator|)
name|Utils
operator|.
name|fromJSON
argument_list|(
name|v2r
operator|.
name|getContentStreams
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|.
name|getStream
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"/c/mycoll/shards"
argument_list|,
name|v2r
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"shard1"
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"/add-replica/shard"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NRT"
argument_list|,
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|true
argument_list|,
literal|"/add-replica/type"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

