begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|MultipleFieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eq
operator|.
name|FieldEqualitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|GroupOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Bucket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|CountMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MaxMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|Metric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MinMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|SumMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/** *  All base tests will be done with CloudSolrStream. Under the covers CloudSolrStream uses SolrStream so *  SolrStream will get fully exercised through these tests. * **/
end_comment

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|StreamingTest
specifier|public
class|class
name|StreamingTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTIONORALIAS
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTIONORALIAS
init|=
literal|"streams"
decl_stmt|;
DECL|field|streamFactory
specifier|private
specifier|static
specifier|final
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"merge"
argument_list|,
name|MergeStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"reduce"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|GroupOperation
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|zkHost
specifier|private
specifier|static
name|String
name|zkHost
decl_stmt|;
DECL|field|numShards
specifier|private
specifier|static
name|int
name|numShards
decl_stmt|;
DECL|field|numWorkers
specifier|private
specifier|static
name|int
name|numWorkers
decl_stmt|;
DECL|field|useAlias
specifier|private
specifier|static
name|boolean
name|useAlias
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|configureCluster
specifier|public
specifier|static
name|void
name|configureCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|numShards
operator|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|+
literal|1
expr_stmt|;
comment|//1 - 3
name|numWorkers
operator|=
name|numShards
operator|>
literal|2
condition|?
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|numShards
operator|-
literal|1
argument_list|)
operator|+
literal|1
else|:
name|numShards
expr_stmt|;
name|configureCluster
argument_list|(
name|numShards
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|getFile
argument_list|(
literal|"solrj"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"streaming"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|String
name|collection
decl_stmt|;
name|useAlias
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|useAlias
condition|)
block|{
name|collection
operator|=
name|COLLECTIONORALIAS
operator|+
literal|"_collection"
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createAlias
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|collection
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|=
name|COLLECTIONORALIAS
expr_stmt|;
block|}
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
name|numShards
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collection
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|DEFAULT_TIMEOUT
argument_list|)
expr_stmt|;
name|zkHost
operator|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
expr_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
block|}
DECL|field|id
specifier|private
specifier|static
specifier|final
name|String
name|id
init|=
literal|"id"
decl_stmt|;
annotation|@
name|Before
DECL|method|clearCollection
specifier|public
name|void
name|clearCollection
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUniqueStream
specifier|public
name|void
name|testUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Test CloudSolrStream and UniqueStream
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|UniqueStream
name|ustream
init|=
operator|new
name|UniqueStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|ustream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSpacesInParams
specifier|public
name|void
name|testSpacesInParams
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrParams
name|sParams
init|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id , a_s , a_i , a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f  asc , a_i  asc"
argument_list|)
decl_stmt|;
comment|//CloudSolrStream compares the values of the sort with the fl field.
comment|//The constructor will throw an exception if the sort fields do not the
comment|//a value in the field list.
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
literal|""
argument_list|,
literal|"collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNonePartitionKeys
specifier|public
name|void
name|testNonePartitionKeys
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"none"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
operator|(
literal|10
operator|*
name|numWorkers
operator|)
operator|)
assert|;
comment|// Each tuple will be double counted.
block|}
annotation|@
name|Test
DECL|method|testParallelUniqueStream
specifier|public
name|void
name|testParallelUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_f"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|UniqueStream
name|ustream
init|=
operator|new
name|UniqueStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_f"
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|ustream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Test the eofTuples
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numWorkers
argument_list|,
name|eofTuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//There should be an EOF tuple for each worker.
block|}
annotation|@
name|Test
DECL|method|testMultipleFqClauses
specifier|public
name|void
name|testMultipleFqClauses
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|streamFactory
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
expr_stmt|;
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"fq"
argument_list|,
literal|"a_ss:hello0"
argument_list|,
literal|"fq"
argument_list|,
literal|"a_ss:hello1"
argument_list|)
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Multiple fq clauses should have been honored"
argument_list|,
literal|1
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"should only have gotten back document 0"
argument_list|,
literal|"0"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRankStream
specifier|public
name|void
name|testRankStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|RankStream
name|rstream
init|=
operator|new
name|RankStream
argument_list|(
name|stream
argument_list|,
literal|3
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelRankStream
specifier|public
name|void
name|testParallelRankStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|RankStream
name|rstream
init|=
operator|new
name|RankStream
argument_list|(
name|stream
argument_list|,
literal|11
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|rstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTrace
specifier|public
name|void
name|testTrace
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists.
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f   asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setTrace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"_COLLECTION_"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testReducerStream
specifier|public
name|void
name|testReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists.
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,  a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc  ,  a_f   asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|GroupOperation
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|t0
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
init|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Tuple
name|t1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps1
init|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Tuple
name|t2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps2
init|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists using a comparator
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,  a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc  ,  a_f   asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|rstream
operator|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|GroupOperation
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroReducerStream
specifier|public
name|void
name|testZeroReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Gracefully handle zero results
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test with spaces in the parameter lists.
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"blah"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s, a_i,  a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc  ,  a_f   asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|GroupOperation
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelReducerStream
specifier|public
name|void
name|testParallelReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|GroupOperation
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|rstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|t0
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
init|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Tuple
name|t1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps1
init|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Tuple
name|t2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps2
init|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test Descending with Ascending subsort
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s desc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|rstream
operator|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|GroupOperation
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|pstream
operator|=
name|parallelStream
argument_list|(
name|rstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testExceptionStream
specifier|public
name|void
name|testExceptionStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test an error that comes originates from the /select handler
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,blah"
argument_list|,
literal|"sort"
argument_list|,
literal|"blah asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ExceptionStream
name|estream
init|=
operator|new
name|ExceptionStream
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|getTuple
argument_list|(
name|estream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EOF
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EXCEPTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"sort param field can't be found: blah"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test an error that comes originates from the /export handler
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|estream
operator|=
operator|new
name|ExceptionStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTuple
argument_list|(
name|estream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EOF
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EXCEPTION
argument_list|)
expr_stmt|;
comment|//The /export handler will pass through a real exception.
name|assertTrue
argument_list|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"undefined field:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
DECL|method|testParallelExceptionStream
specifier|public
name|void
name|testParallelExceptionStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,blah"
argument_list|,
literal|"sort"
argument_list|,
literal|"blah asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"blah"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ExceptionStream
name|estream
init|=
operator|new
name|ExceptionStream
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|Tuple
name|t
init|=
name|getTuple
argument_list|(
name|estream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EOF
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EXCEPTION
argument_list|)
expr_stmt|;
comment|//ParallelStream requires that partitionKeys be set.
name|assertTrue
argument_list|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"When numWorkers> 1 partitionKeys must be set."
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test an error that originates from the /select handler
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,blah"
argument_list|,
literal|"sort"
argument_list|,
literal|"blah asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"blah"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|estream
operator|=
operator|new
name|ExceptionStream
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTuple
argument_list|(
name|estream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EOF
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EXCEPTION
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"sort param field can't be found: blah"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test an error that originates from the /export handler
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f,score"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|stream
argument_list|,
literal|2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|estream
operator|=
operator|new
name|ExceptionStream
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|t
operator|=
name|getTuple
argument_list|(
name|estream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EOF
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|EXCEPTION
argument_list|)
expr_stmt|;
comment|//The /export handler will pass through a real exception.
name|assertTrue
argument_list|(
name|t
operator|.
name|getException
argument_list|()
operator|.
name|contains
argument_list|(
literal|"undefined field:"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStatsStream
specifier|public
name|void
name|testStatsStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|)
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|StatsStream
name|statsStream
init|=
operator|new
name|StatsStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|statsStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|70
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|55.0
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14.0
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.0
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFacetStream
specifier|public
name|void
name|testFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|FieldComparator
index|[]
name|sorts
init|=
block|{
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
block|}
decl_stmt|;
name|FacetStream
name|facetStream
init|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11.0
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11.0
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0.0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14.0
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10.0
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.25
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|.01
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38.0
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26.0
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3.0
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13.0
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9.0
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|//Reverse the Sort.
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test Long and Double Sums
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.25
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11.0
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|//Test index sort
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.25
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|//Test index sort
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.25
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11.0
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.0
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11.0
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.0
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
DECL|method|docPairs
name|String
index|[]
name|docPairs
parameter_list|(
name|int
name|base
parameter_list|,
name|String
name|sSeq
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|iSeq
init|=
name|base
operator|*
literal|100
decl_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|sSeq
operator|+
name|base
argument_list|)
expr_stmt|;
comment|// aaa1
name|pairs
operator|.
name|add
argument_list|(
literal|"s_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|iSeq
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// 101
name|pairs
operator|.
name|add
argument_list|(
literal|"i_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|iSeq
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// 102
name|pairs
operator|.
name|add
argument_list|(
literal|"f_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|Float
operator|.
name|toString
argument_list|(
name|iSeq
operator|+
literal|3
argument_list|)
argument_list|)
expr_stmt|;
comment|// 103.0
name|pairs
operator|.
name|add
argument_list|(
literal|"l_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|iSeq
operator|+
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// 104
name|pairs
operator|.
name|add
argument_list|(
literal|"d_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|Double
operator|.
name|toString
argument_list|(
name|iSeq
operator|+
literal|5
argument_list|)
argument_list|)
expr_stmt|;
comment|// 105
name|pairs
operator|.
name|add
argument_list|(
literal|"dt_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"2000-01-01T%02d:00:00Z"
argument_list|,
name|base
argument_list|)
argument_list|)
expr_stmt|;
comment|// Works as long as we add fewer than 60 docs
name|pairs
operator|.
name|add
argument_list|(
literal|"b_sing"
argument_list|)
expr_stmt|;
name|pairs
operator|.
name|add
argument_list|(
operator|(
name|base
operator|%
literal|2
operator|)
operator|==
literal|0
condition|?
literal|"T"
else|:
literal|"F"
argument_list|)
expr_stmt|;
comment|// Tricky
name|String
index|[]
name|ret
init|=
operator|new
name|String
index|[
name|pairs
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
name|pairs
operator|.
name|toArray
argument_list|(
name|ret
argument_list|)
return|;
block|}
comment|// Select and export should be identical sort orders I think.
DECL|method|checkSort
specifier|private
name|void
name|checkSort
parameter_list|(
name|JettySolrRunner
name|jetty
parameter_list|,
name|String
name|field
parameter_list|,
name|String
name|sortDir
parameter_list|,
name|String
index|[]
name|fields
parameter_list|)
throws|throws
name|IOException
throws|,
name|SolrServerException
block|{
comment|// Comes back after after LUCENE-7548
comment|//    SolrQuery query = new SolrQuery("*:*");
comment|//    query.addSort(field, ("asc".equals(sortDir) ? SolrQuery.ORDER.asc : SolrQuery.ORDER.desc));
comment|//    query.addSort("id", SolrQuery.ORDER.asc);
comment|//    query.addField("id");
comment|//    query.addField(field);
comment|//    query.setRequestHandler("standard");
comment|//    query.setRows(100);
comment|//
comment|//    List<String> selectOrder = new ArrayList<>();
comment|//
comment|//    String url = jetty.getBaseUrl() + "/" + COLLECTION;
comment|//
comment|//    try (HttpSolrClient client = getHttpSolrClient(url)) {
comment|//      client.setConnectionTimeout(DEFAULT_CONNECTION_TIMEOUT);
comment|//      QueryResponse rsp = client.query(query);
comment|//      for (SolrDocument doc : rsp.getResults()) {
comment|//        selectOrder.add((String) doc.getFieldValue("id"));
comment|//      }
comment|//    }
comment|//    SolrParams exportParams = mapParams("q", "*:*", "qt", "/export", "fl", "id," + field, "sort", field + " " + sortDir + ",id asc");
comment|//    try (CloudSolrStream solrStream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, exportParams)) {
comment|//      List<Tuple> tuples = getTuples(solrStream);
comment|//      assertEquals("There should be exactly 32 responses returned", 32, tuples.size());
comment|//      // Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.
comment|//      assertEquals("Tuple count should exactly match sort array size for field " + field + " sort order " + sortDir, selectOrder.size(), tuples.size());
comment|//
comment|//      for (int idx = 0; idx< selectOrder.size(); ++idx) { // Tuples should be in lock step with the orders from select.
comment|//        assertEquals("Order for missing docValues fields wrong for field '" + field + "' sort direction '" + sortDir,
comment|//            tuples.get(idx).getString("id"), selectOrder.get(idx));
comment|//      }
comment|//    }
comment|// Remove below and uncomment above after LUCENE-7548
name|List
argument_list|<
name|String
argument_list|>
name|selectOrder
init|=
operator|(
literal|"asc"
operator|.
name|equals
argument_list|(
name|sortDir
argument_list|)
operator|)
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|ascOrder
argument_list|)
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|descOrder
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|selectOrderBool
init|=
operator|(
literal|"asc"
operator|.
name|equals
argument_list|(
name|sortDir
argument_list|)
operator|)
condition|?
name|Arrays
operator|.
name|asList
argument_list|(
name|ascOrderBool
argument_list|)
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|descOrderBool
argument_list|)
decl_stmt|;
name|SolrParams
name|exportParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,"
operator|+
name|field
argument_list|,
literal|"sort"
argument_list|,
name|field
operator|+
literal|" "
operator|+
name|sortDir
operator|+
literal|",id asc"
argument_list|)
decl_stmt|;
try|try
init|(
name|CloudSolrStream
name|solrStream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|exportParams
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be exactly 32 responses returned"
argument_list|,
literal|32
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Since the getTuples method doesn't return the EOF tuple, these two entries should be the same size.
name|assertEquals
argument_list|(
literal|"Tuple count should exactly match sort array size for field "
operator|+
name|field
operator|+
literal|" sort order "
operator|+
name|sortDir
argument_list|,
name|selectOrder
operator|.
name|size
argument_list|()
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|selectOrder
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
comment|// Tuples should be in lock step with the orders passed in.
name|assertEquals
argument_list|(
literal|"Order for missing docValues fields wrong for field '"
operator|+
name|field
operator|+
literal|"' sort direction '"
operator|+
name|sortDir
operator|+
literal|"' RESTORE GETTING selectOrder from select statement after LUCENE-7548"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
operator|(
name|field
operator|.
name|startsWith
argument_list|(
literal|"b_"
argument_list|)
condition|?
name|selectOrderBool
operator|.
name|get
argument_list|(
name|idx
argument_list|)
else|:
name|selectOrder
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|field|voidIds
specifier|static
specifier|final
name|String
index|[]
name|voidIds
init|=
operator|new
name|String
index|[]
block|{
literal|"iii1"
block|,
literal|"eee1"
block|,
literal|"aaa1"
block|,
literal|"ooo1"
block|,
literal|"iii2"
block|,
literal|"eee2"
block|,
literal|"aaa2"
block|,
literal|"ooo2"
block|,
literal|"iii3"
block|,
literal|"eee3"
block|,
literal|"aaa3"
block|,
literal|"ooo3"
block|}
decl_stmt|;
DECL|method|checkReturnValsForEmpty
specifier|private
name|void
name|checkReturnValsForEmpty
parameter_list|(
name|String
index|[]
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|voids
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|voidIds
argument_list|)
argument_list|)
decl_stmt|;
name|StringBuilder
name|fl
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|fl
operator|.
name|append
argument_list|(
literal|","
argument_list|)
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|,
literal|"fl"
argument_list|,
name|fl
operator|.
name|toString
argument_list|()
argument_list|,
literal|"sort"
argument_list|,
literal|"id asc"
argument_list|)
decl_stmt|;
try|try
init|(
name|CloudSolrStream
name|solrStream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
init|)
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"There should be exactly 32 responses returned"
argument_list|,
literal|32
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|String
name|id
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|voids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|assertNull
argument_list|(
literal|"Should have returned a void for field "
operator|+
name|f
operator|+
literal|" doc "
operator|+
name|id
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|assertNotNull
argument_list|(
literal|"Should have returned a value for field "
operator|+
name|f
operator|+
literal|" doc "
operator|+
name|id
argument_list|,
name|tuple
operator|.
name|get
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Goes away after after LUCENE-7548
DECL|field|ascOrder
specifier|final
specifier|static
name|String
index|[]
name|ascOrder
init|=
operator|new
name|String
index|[]
block|{
literal|"aaa1"
block|,
literal|"aaa2"
block|,
literal|"aaa3"
block|,
literal|"eee1"
block|,
literal|"eee2"
block|,
literal|"eee3"
block|,
literal|"iii1"
block|,
literal|"iii2"
block|,
literal|"iii3"
block|,
literal|"ooo1"
block|,
literal|"ooo2"
block|,
literal|"ooo3"
block|,
literal|"aaa4"
block|,
literal|"eee4"
block|,
literal|"iii4"
block|,
literal|"ooo4"
block|,
literal|"aaa5"
block|,
literal|"eee5"
block|,
literal|"iii5"
block|,
literal|"ooo5"
block|,
literal|"aaa6"
block|,
literal|"eee6"
block|,
literal|"iii6"
block|,
literal|"ooo6"
block|,
literal|"aaa7"
block|,
literal|"eee7"
block|,
literal|"iii7"
block|,
literal|"ooo7"
block|,
literal|"aaa8"
block|,
literal|"eee8"
block|,
literal|"iii8"
block|,
literal|"ooo8"
block|}
decl_stmt|;
comment|// Goes away after after LUCENE-7548
DECL|field|descOrder
specifier|final
specifier|static
name|String
index|[]
name|descOrder
init|=
operator|new
name|String
index|[]
block|{
literal|"aaa8"
block|,
literal|"eee8"
block|,
literal|"iii8"
block|,
literal|"ooo8"
block|,
literal|"aaa7"
block|,
literal|"eee7"
block|,
literal|"iii7"
block|,
literal|"ooo7"
block|,
literal|"aaa6"
block|,
literal|"eee6"
block|,
literal|"iii6"
block|,
literal|"ooo6"
block|,
literal|"aaa5"
block|,
literal|"eee5"
block|,
literal|"iii5"
block|,
literal|"ooo5"
block|,
literal|"aaa4"
block|,
literal|"eee4"
block|,
literal|"iii4"
block|,
literal|"ooo4"
block|,
literal|"aaa1"
block|,
literal|"aaa2"
block|,
literal|"aaa3"
block|,
literal|"eee1"
block|,
literal|"eee2"
block|,
literal|"eee3"
block|,
literal|"iii1"
block|,
literal|"iii2"
block|,
literal|"iii3"
block|,
literal|"ooo1"
block|,
literal|"ooo2"
block|,
literal|"ooo3"
block|}
decl_stmt|;
comment|// Goes away after after LUCENE-7548
DECL|field|ascOrderBool
specifier|final
specifier|static
name|String
index|[]
name|ascOrderBool
init|=
operator|new
name|String
index|[]
block|{
literal|"aaa1"
block|,
literal|"aaa2"
block|,
literal|"aaa3"
block|,
literal|"eee1"
block|,
literal|"eee2"
block|,
literal|"eee3"
block|,
literal|"iii1"
block|,
literal|"iii2"
block|,
literal|"iii3"
block|,
literal|"ooo1"
block|,
literal|"ooo2"
block|,
literal|"ooo3"
block|,
literal|"aaa5"
block|,
literal|"aaa7"
block|,
literal|"eee5"
block|,
literal|"eee7"
block|,
literal|"iii5"
block|,
literal|"iii7"
block|,
literal|"ooo5"
block|,
literal|"ooo7"
block|,
literal|"aaa4"
block|,
literal|"aaa6"
block|,
literal|"aaa8"
block|,
literal|"eee4"
block|,
literal|"eee6"
block|,
literal|"eee8"
block|,
literal|"iii4"
block|,
literal|"iii6"
block|,
literal|"iii8"
block|,
literal|"ooo4"
block|,
literal|"ooo6"
block|,
literal|"ooo8"
block|}
decl_stmt|;
comment|// Goes away after after LUCENE-7548
DECL|field|descOrderBool
specifier|final
specifier|static
name|String
index|[]
name|descOrderBool
init|=
operator|new
name|String
index|[]
block|{
literal|"aaa4"
block|,
literal|"aaa6"
block|,
literal|"aaa8"
block|,
literal|"eee4"
block|,
literal|"eee6"
block|,
literal|"eee8"
block|,
literal|"iii4"
block|,
literal|"iii6"
block|,
literal|"iii8"
block|,
literal|"ooo4"
block|,
literal|"ooo6"
block|,
literal|"ooo8"
block|,
literal|"aaa5"
block|,
literal|"aaa7"
block|,
literal|"eee5"
block|,
literal|"eee7"
block|,
literal|"iii5"
block|,
literal|"iii7"
block|,
literal|"ooo5"
block|,
literal|"ooo7"
block|,
literal|"aaa1"
block|,
literal|"aaa2"
block|,
literal|"aaa3"
block|,
literal|"eee1"
block|,
literal|"eee2"
block|,
literal|"eee3"
block|,
literal|"iii1"
block|,
literal|"iii2"
block|,
literal|"iii3"
block|,
literal|"ooo1"
block|,
literal|"ooo2"
block|,
literal|"ooo3"
block|,   }
decl_stmt|;
annotation|@
name|Test
DECL|method|testMissingFields
specifier|public
name|void
name|testMissingFields
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
comment|// Some docs with nothing at all for any of the "interesting" fields.
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"iii1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"eee1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"aaa1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"ooo1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"iii2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"eee2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"aaa2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"ooo2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"iii3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"eee3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"aaa3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"ooo3"
argument_list|)
comment|// Docs with values in for all of the types we want to sort on.
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|4
argument_list|,
literal|"iii"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|4
argument_list|,
literal|"eee"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|4
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|4
argument_list|,
literal|"ooo"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|5
argument_list|,
literal|"iii"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|5
argument_list|,
literal|"eee"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|5
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|5
argument_list|,
literal|"ooo"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|6
argument_list|,
literal|"iii"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|6
argument_list|,
literal|"eee"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|6
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|6
argument_list|,
literal|"ooo"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|7
argument_list|,
literal|"iii"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|7
argument_list|,
literal|"eee"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|7
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|7
argument_list|,
literal|"ooo"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|8
argument_list|,
literal|"iii"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|8
argument_list|,
literal|"eee"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|8
argument_list|,
literal|"aaa"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|docPairs
argument_list|(
literal|8
argument_list|,
literal|"ooo"
argument_list|)
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
index|[]
name|fields
init|=
operator|new
name|String
index|[]
block|{
literal|"s_sing"
block|,
literal|"i_sing"
block|,
literal|"f_sing"
block|,
literal|"l_sing"
block|,
literal|"d_sing"
block|,
literal|"dt_sing"
block|,
literal|"b_sing"
block|}
decl_stmt|;
for|for
control|(
name|String
name|f
range|:
name|fields
control|)
block|{
name|checkSort
argument_list|(
name|jetty
argument_list|,
name|f
argument_list|,
literal|"asc"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|checkSort
argument_list|(
name|jetty
argument_list|,
name|f
argument_list|,
literal|"desc"
argument_list|,
name|fields
argument_list|)
expr_stmt|;
block|}
name|checkReturnValsForEmpty
argument_list|(
name|fields
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSubFacetStream
specifier|public
name|void
name|testSubFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_i,a_f"
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"level1_s"
argument_list|)
block|,
operator|new
name|Bucket
argument_list|(
literal|"level2_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|FieldComparator
index|[]
name|sorts
init|=
block|{
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
block|,
operator|new
name|FieldComparator
argument_list|(
literal|"sum(a_i)"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
block|}
decl_stmt|;
name|FacetStream
name|facetStream
init|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket1
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
decl_stmt|;
name|String
name|bucket2
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|sorts
index|[
literal|0
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"level1_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|sorts
index|[
literal|1
index|]
operator|=
operator|new
name|FieldComparator
argument_list|(
literal|"level2_s"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|facetStream
operator|=
operator|new
name|FacetStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|,
name|sorts
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|facetStream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|35
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|bucket2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRollupStream
specifier|public
name|void
name|testRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|RollupStream
name|rollupStream
init|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|rollupStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.25
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
comment|//Test will null value in the grouping field
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"a_s"
argument_list|,
literal|null
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"qt"
argument_list|,
literal|"/export"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|Bucket
index|[]
name|buckets1
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics1
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|rollupStream
operator|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets1
argument_list|,
name|metrics1
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|rollupStream
argument_list|)
expr_stmt|;
comment|//Check that we've got the extra NULL bucket
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NULL"
argument_list|,
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDaemonTopicStream
specifier|public
name|void
name|testDaemonTopicStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"a_s:hello0"
argument_list|,
literal|"rows"
argument_list|,
literal|"500"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|TopicStream
name|topicStream
init|=
operator|new
name|TopicStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
literal|"50000000"
argument_list|,
operator|-
literal|1
argument_list|,
literal|1000000
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|DaemonStream
name|daemonStream
init|=
operator|new
name|DaemonStream
argument_list|(
name|topicStream
argument_list|,
literal|"daemon1"
argument_list|,
literal|1000
argument_list|,
literal|500
argument_list|)
decl_stmt|;
name|daemonStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|daemonStream
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// Wait for the checkpoint
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrParams
name|sParams1
init|=
name|mapParams
argument_list|(
literal|"qt"
argument_list|,
literal|"/get"
argument_list|,
literal|"ids"
argument_list|,
literal|"50000000"
argument_list|,
literal|"fl"
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|count
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
argument_list|,
name|sParams1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|count
operator|=
name|tuples
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|count
operator|>
literal|0
condition|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|50000000
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"###### Waiting for checkpoint #######:"
operator|+
name|count
argument_list|)
expr_stmt|;
block|}
block|}
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
name|daemonStream
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|Tuple
name|tuple
init|=
name|daemonStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|tuple
operator|.
name|EOF
argument_list|)
expr_stmt|;
name|daemonStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelRollupStream
specifier|public
name|void
name|testParallelRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|Bucket
index|[]
name|buckets
init|=
block|{
operator|new
name|Bucket
argument_list|(
literal|"a_s"
argument_list|)
block|}
decl_stmt|;
name|Metric
index|[]
name|metrics
init|=
block|{
operator|new
name|SumMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|SumMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MinMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MaxMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_i"
argument_list|)
block|,
operator|new
name|MeanMetric
argument_list|(
literal|"a_f"
argument_list|)
block|,
operator|new
name|CountMetric
argument_list|()
block|}
decl_stmt|;
name|RollupStream
name|rollupStream
init|=
operator|new
name|RollupStream
argument_list|(
name|stream
argument_list|,
name|buckets
argument_list|,
name|metrics
argument_list|)
decl_stmt|;
name|ParallelStream
name|parallelStream
init|=
name|parallelStream
argument_list|(
name|rollupStream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|parallelStream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelStream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|18
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.25
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello3"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|38
argument_list|,
name|sumi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|26
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello4"
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|sumi
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|sumf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|mini
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|minf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|11
argument_list|,
name|maxi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|maxf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7.5
argument_list|,
name|avgi
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5.5
argument_list|,
name|avgf
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|count
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testZeroParallelReducerStream
specifier|public
name|void
name|testZeroParallelReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"blah"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc,a_f asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_s"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|ReducerStream
name|rstream
init|=
operator|new
name|ReducerStream
argument_list|(
name|stream
argument_list|,
operator|new
name|FieldEqualitor
argument_list|(
literal|"a_s"
argument_list|)
argument_list|,
operator|new
name|GroupOperation
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|rstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_s"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testTuple
specifier|public
name|void
name|testTuple
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5.1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"a"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"b"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"2"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.2"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.3"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f,s_multi,i_multi,f_multi"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_s asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"hello0"
argument_list|,
name|s
argument_list|)
expr_stmt|;
empty_stmt|;
name|long
name|l
init|=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
name|double
name|d
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5.1
argument_list|,
name|d
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|stringList
init|=
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|stringList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|stringList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longList
init|=
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|longList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|longList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|doubleList
init|=
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"f_multi"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1.2
argument_list|,
name|doubleList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.3
argument_list|,
name|doubleList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testMergeStream
specifier|public
name|void
name|testMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test ascending
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|SolrParams
name|sParamsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test descending
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|sParamsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Test compound sort
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|sParamsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|MultipleFieldComparator
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(2 4 1)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|sParamsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 3)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|MultipleFieldComparator
argument_list|(
operator|new
name|FieldComparator
argument_list|(
literal|"a_f"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|mstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelMergeStream
specifier|public
name|void
name|testParallelMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test ascending
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1 8 7 9)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|SolrParams
name|sParamsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|mstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|//Test descending
name|sParamsA
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1 8 9)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
expr_stmt|;
name|streamA
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
expr_stmt|;
name|sParamsB
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
expr_stmt|;
name|streamB
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
expr_stmt|;
name|mstream
operator|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|pstream
operator|=
name|parallelStream
argument_list|(
name|mstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|DESCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelEOF
specifier|public
name|void
name|testParallelEOF
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test ascending
name|SolrParams
name|sParamsA
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(4 1 8 7 9)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamA
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsA
argument_list|)
decl_stmt|;
name|SolrParams
name|sParamsB
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"id:(0 2 3 6)"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|,
literal|"partitionKeys"
argument_list|,
literal|"a_i"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|streamB
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParamsB
argument_list|)
decl_stmt|;
name|MergeStream
name|mstream
init|=
operator|new
name|MergeStream
argument_list|(
name|streamA
argument_list|,
name|streamB
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|ParallelStream
name|pstream
init|=
name|parallelStream
argument_list|(
name|mstream
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
decl_stmt|;
name|attachStreamFactory
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|numWorkers
argument_list|,
name|eofTuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// There should be an EOF Tuple for each worker.
block|}
annotation|@
name|Test
DECL|method|streamTests
specifier|public
name|void
name|streamTests
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Basic CloudSolrStream Test with Descending Sort
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i desc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//With Ascending Sort
name|sParams
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Test compound sort
name|sParams
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i desc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|sParams
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"fl"
argument_list|,
literal|"id,a_s,a_i,a_f"
argument_list|,
literal|"sort"
argument_list|,
literal|"a_f asc,a_i asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testDateBoolSorting
specifier|public
name|void
name|testDateBoolSorting
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"b_sing"
argument_list|,
literal|"false"
argument_list|,
literal|"dt_sing"
argument_list|,
literal|"1981-03-04T01:02:03.78Z"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"b_sing"
argument_list|,
literal|"true"
argument_list|,
literal|"dt_sing"
argument_list|,
literal|"1980-03-04T01:02:03.78Z"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"b_sing"
argument_list|,
literal|"false"
argument_list|,
literal|"dt_sing"
argument_list|,
literal|"1981-04-04T01:02:03.78Z"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"b_sing"
argument_list|,
literal|"true"
argument_list|,
literal|"dt_sing"
argument_list|,
literal|"1980-04-04T01:02:03.78Z"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"b_sing"
argument_list|,
literal|"true"
argument_list|,
literal|"dt_sing"
argument_list|,
literal|"1980-04-04T01:02:03.78Z"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|trySortWithQt
argument_list|(
literal|"/export"
argument_list|)
expr_stmt|;
name|trySortWithQt
argument_list|(
literal|"/select"
argument_list|)
expr_stmt|;
block|}
DECL|method|trySortWithQt
specifier|private
name|void
name|trySortWithQt
parameter_list|(
name|String
name|which
parameter_list|)
throws|throws
name|Exception
block|{
comment|//Basic CloudSolrStream Test bools desc
name|SolrParams
name|sParams
init|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
name|which
argument_list|,
literal|"fl"
argument_list|,
literal|"id,b_sing"
argument_list|,
literal|"sort"
argument_list|,
literal|"b_sing asc,id asc"
argument_list|)
decl_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//Basic CloudSolrStream Test bools desc
name|sParams
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
name|which
argument_list|,
literal|"fl"
argument_list|,
literal|"id,b_sing"
argument_list|,
literal|"sort"
argument_list|,
literal|"b_sing desc,id desc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Basic CloudSolrStream Test dates desc
name|sParams
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
name|which
argument_list|,
literal|"fl"
argument_list|,
literal|"id,dt_sing"
argument_list|,
literal|"sort"
argument_list|,
literal|"dt_sing desc,id asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|//Basic CloudSolrStream Test ates desc
name|sParams
operator|=
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
name|which
argument_list|,
literal|"fl"
argument_list|,
literal|"id,dt_sing"
argument_list|,
literal|"sort"
argument_list|,
literal|"dt_sing asc,id desc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
DECL|method|testAllValidExportTypes
specifier|public
name|void
name|testAllValidExportTypes
parameter_list|()
throws|throws
name|Exception
block|{
comment|//Test whether all the expected types are actually returned, including booleans and dates.
comment|// The contract is that the /select and /export handlers return the same format, so we can test this once each
comment|// way
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"i_sing"
argument_list|,
literal|"11"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"12"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"13"
argument_list|,
literal|"l_sing"
argument_list|,
literal|"14"
argument_list|,
literal|"l_multi"
argument_list|,
literal|"15"
argument_list|,
literal|"l_multi"
argument_list|,
literal|"16"
argument_list|,
literal|"f_sing"
argument_list|,
literal|"1.70"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.80"
argument_list|,
literal|"f_multi"
argument_list|,
literal|"1.90"
argument_list|,
literal|"d_sing"
argument_list|,
literal|"1.20"
argument_list|,
literal|"d_multi"
argument_list|,
literal|"1.21"
argument_list|,
literal|"d_multi"
argument_list|,
literal|"1.22"
argument_list|,
literal|"s_sing"
argument_list|,
literal|"single"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"sm1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"sm2"
argument_list|,
literal|"dt_sing"
argument_list|,
literal|"1980-01-02T11:11:33.89Z"
argument_list|,
literal|"dt_multi"
argument_list|,
literal|"1981-03-04T01:02:03.78Z"
argument_list|,
literal|"dt_multi"
argument_list|,
literal|"1981-05-24T04:05:06.99Z"
argument_list|,
literal|"b_sing"
argument_list|,
literal|"true"
argument_list|,
literal|"b_multi"
argument_list|,
literal|"false"
argument_list|,
literal|"b_multi"
argument_list|,
literal|"true"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|tryWithQt
argument_list|(
literal|"/export"
argument_list|)
expr_stmt|;
name|tryWithQt
argument_list|(
literal|"/select"
argument_list|)
expr_stmt|;
block|}
comment|// We should be getting the exact same thing back with both the export and select handlers, so test
DECL|method|tryWithQt
specifier|private
name|void
name|tryWithQt
parameter_list|(
name|String
name|which
parameter_list|)
throws|throws
name|IOException
block|{
name|SolrParams
name|sParams
init|=
name|StreamingTest
operator|.
name|mapParams
argument_list|(
literal|"q"
argument_list|,
literal|"*:*"
argument_list|,
literal|"qt"
argument_list|,
name|which
argument_list|,
literal|"fl"
argument_list|,
literal|"id,i_sing,i_multi,l_sing,l_multi,f_sing,f_multi,d_sing,d_multi,dt_sing,dt_multi,s_sing,s_multi,b_sing,b_multi"
argument_list|,
literal|"sort"
argument_list|,
literal|"i_sing asc"
argument_list|)
decl_stmt|;
try|try
init|(
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|sParams
argument_list|)
init|)
block|{
name|Tuple
name|tuple
init|=
name|getTuple
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|// All I really care about is that all the fields are returned. There's
name|assertEquals
argument_list|(
literal|"Integers should be returned"
argument_list|,
literal|11
argument_list|,
name|tuple
operator|.
name|getLong
argument_list|(
literal|"i_sing"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for i_multi"
argument_list|,
literal|12
argument_list|,
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for i_multi"
argument_list|,
literal|13
argument_list|,
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"longs should be returned"
argument_list|,
literal|14
argument_list|,
name|tuple
operator|.
name|getLong
argument_list|(
literal|"l_sing"
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for l_multi"
argument_list|,
literal|15
argument_list|,
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"l_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for l_multi"
argument_list|,
literal|16
argument_list|,
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"l_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"floats should be returned"
argument_list|,
literal|1.7
argument_list|,
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"f_sing"
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for f_multi"
argument_list|,
literal|1.8
argument_list|,
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"f_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for f_multi"
argument_list|,
literal|1.9
argument_list|,
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"f_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"doubles should be returned"
argument_list|,
literal|1.2
argument_list|,
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"d_sing"
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for d_multi"
argument_list|,
literal|1.21
argument_list|,
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"d_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"MV should be returned for d_multi"
argument_list|,
literal|1.22
argument_list|,
name|tuple
operator|.
name|getDoubles
argument_list|(
literal|"d_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Strings should be returned"
argument_list|,
name|tuple
operator|.
name|getString
argument_list|(
literal|"s_sing"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"single"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV should be returned for s_multi"
argument_list|,
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"sm1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV should be returned for s_multi"
argument_list|,
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"sm2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be returned as Strings"
argument_list|,
name|tuple
operator|.
name|getString
argument_list|(
literal|"dt_sing"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1980-01-02T11:11:33.890Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV dates should be returned as Strings for dt_multi"
argument_list|,
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"dt_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1981-03-04T01:02:03.780Z"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV dates should be returned as Strings for dt_multi"
argument_list|,
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"dt_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1981-05-24T04:05:06.990Z"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also test native type conversion
name|Date
name|dt
init|=
operator|new
name|Date
argument_list|(
name|Instant
operator|.
name|parse
argument_list|(
literal|"1980-01-02T11:11:33.890Z"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be returned as Dates"
argument_list|,
name|tuple
operator|.
name|getDate
argument_list|(
literal|"dt_sing"
argument_list|)
operator|.
name|equals
argument_list|(
name|dt
argument_list|)
argument_list|)
expr_stmt|;
name|dt
operator|=
operator|new
name|Date
argument_list|(
name|Instant
operator|.
name|parse
argument_list|(
literal|"1981-03-04T01:02:03.780Z"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV dates should be returned as Dates for dt_multi"
argument_list|,
name|tuple
operator|.
name|getDates
argument_list|(
literal|"dt_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|dt
argument_list|)
argument_list|)
expr_stmt|;
name|dt
operator|=
operator|new
name|Date
argument_list|(
name|Instant
operator|.
name|parse
argument_list|(
literal|"1981-05-24T04:05:06.990Z"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV dates should be returned as Dates  for dt_multi"
argument_list|,
name|tuple
operator|.
name|getDates
argument_list|(
literal|"dt_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
name|dt
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Booleans should be returned"
argument_list|,
name|tuple
operator|.
name|getBool
argument_list|(
literal|"b_sing"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"MV boolean should be returned for b_multi"
argument_list|,
name|tuple
operator|.
name|getBools
argument_list|(
literal|"b_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"MV boolean should be returned for b_multi"
argument_list|,
name|tuple
operator|.
name|getBools
argument_list|(
literal|"b_multi"
argument_list|)
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tuples
return|;
block|}
DECL|method|getTuple
specifier|protected
name|Tuple
name|getTuple
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|assertOrder
specifier|protected
name|boolean
name|assertOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|tip
init|=
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertGroupOrder
specifier|protected
name|boolean
name|assertGroupOrder
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|group
init|=
operator|(
name|List
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"tuples"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
operator|(
name|Map
operator|)
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMaps
specifier|protected
name|boolean
name|assertMaps
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|maps
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|maps
operator|.
name|size
argument_list|()
operator|!=
name|ids
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected id count != actual map count:"
operator|+
name|ids
operator|.
name|length
operator|+
literal|":"
operator|+
name|maps
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
name|maps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|tip
init|=
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|attachStreamFactory
specifier|private
name|void
name|attachStreamFactory
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
block|{
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setStreamFactory
argument_list|(
name|streamFactory
argument_list|)
expr_stmt|;
name|tupleStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
block|}
DECL|method|mapParams
specifier|public
specifier|static
name|SolrParams
name|mapParams
parameter_list|(
name|String
modifier|...
name|vals
parameter_list|)
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Parameters passed in here must be in pairs!"
argument_list|,
literal|0
argument_list|,
operator|(
name|vals
operator|.
name|length
operator|%
literal|2
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|vals
operator|.
name|length
condition|;
name|idx
operator|+=
literal|2
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|vals
index|[
name|idx
index|]
argument_list|,
name|vals
index|[
name|idx
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
DECL|method|parallelStream
specifier|private
name|ParallelStream
name|parallelStream
parameter_list|(
name|TupleStream
name|stream
parameter_list|,
name|FieldComparator
name|comparator
parameter_list|)
throws|throws
name|IOException
block|{
name|ParallelStream
name|pstream
init|=
operator|new
name|ParallelStream
argument_list|(
name|zkHost
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|stream
argument_list|,
name|numWorkers
argument_list|,
name|comparator
argument_list|)
decl_stmt|;
return|return
name|pstream
return|;
block|}
block|}
end_class

end_unit

