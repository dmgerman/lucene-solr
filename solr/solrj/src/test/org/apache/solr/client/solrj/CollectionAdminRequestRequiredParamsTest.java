begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionAdminParams
operator|.
name|FLUSH
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ShardParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Tests that default {@link CollectionAdminRequest#getParams()} returns only  * the required parameters of this request, and none other.  */
end_comment

begin_class
DECL|class|CollectionAdminRequestRequiredParamsTest
specifier|public
class|class
name|CollectionAdminRequestRequiredParamsTest
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBalanceShardUnique
specifier|public
name|void
name|testBalanceShardUnique
parameter_list|()
block|{
name|CollectionAdminRequest
operator|.
name|BalanceShardUnique
name|request
init|=
name|CollectionAdminRequest
operator|.
name|balanceReplicaProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"prop"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
literal|"property"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShardUnique
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
literal|"property"
argument_list|,
literal|"shardUnique"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setOnlyActiveNodes
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
literal|"property"
argument_list|,
literal|"shardUnique"
argument_list|,
literal|"onlyactivenodes"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShardUnique
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
literal|"property"
argument_list|,
literal|"onlyactivenodes"
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterProp
specifier|public
name|void
name|testClusterProp
parameter_list|()
block|{
name|CollectionAdminRequest
operator|.
name|ClusterProp
name|request
init|=
name|CollectionAdminRequest
operator|.
name|setClusterProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddRole
specifier|public
name|void
name|testAddRole
parameter_list|()
block|{
name|CollectionAdminRequest
operator|.
name|AddRole
name|request
init|=
name|CollectionAdminRequest
operator|.
name|addRole
argument_list|(
literal|"node"
argument_list|,
literal|"role"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
literal|"node"
argument_list|,
literal|"role"
argument_list|)
expr_stmt|;
block|}
DECL|method|testRemoveRole
specifier|public
name|void
name|testRemoveRole
parameter_list|()
block|{
name|CollectionAdminRequest
operator|.
name|RemoveRole
name|request
init|=
name|CollectionAdminRequest
operator|.
name|removeRole
argument_list|(
literal|"node"
argument_list|,
literal|"role"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
literal|"node"
argument_list|,
literal|"role"
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddReplica
specifier|public
name|void
name|testAddReplica
parameter_list|()
block|{
comment|// with shard parameter and "client side" implicit type param
name|CollectionAdminRequest
operator|.
name|AddReplica
name|request
init|=
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|,
name|ZkStateReader
operator|.
name|REPLICA_TYPE
argument_list|)
expr_stmt|;
comment|// with only shard parameter and "server side" implicit type, so no param
name|request
operator|=
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|)
expr_stmt|;
comment|// with route parameter
name|request
operator|=
name|CollectionAdminRequest
operator|.
name|addReplicaByRouteKey
argument_list|(
literal|"collection"
argument_list|,
literal|"route"
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|ShardParams
operator|.
name|_ROUTE_
argument_list|)
expr_stmt|;
comment|// with explicit type parameter
name|request
operator|=
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|,
name|Replica
operator|.
name|Type
operator|.
name|NRT
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|,
name|ZkStateReader
operator|.
name|REPLICA_TYPE
argument_list|)
expr_stmt|;
block|}
DECL|method|testAddReplicaProp
specifier|public
name|void
name|testAddReplicaProp
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|AddReplicaProp
name|request
init|=
name|CollectionAdminRequest
operator|.
name|addReplicaProperty
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|,
literal|"replica"
argument_list|,
literal|"prop"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|,
name|REPLICA
argument_list|,
literal|"property"
argument_list|,
literal|"property.value"
argument_list|)
expr_stmt|;
block|}
DECL|method|testClusterStatus
specifier|public
name|void
name|testClusterStatus
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|ClusterStatus
name|request
init|=
name|CollectionAdminRequest
operator|.
name|getClusterStatus
argument_list|()
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|)
expr_stmt|;
name|request
operator|.
name|setCollectionName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShardName
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRouteKey
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setShardName
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|ShardParams
operator|.
name|_ROUTE_
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateShard
specifier|public
name|void
name|testCreateShard
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|CreateShard
name|request
init|=
name|CollectionAdminRequest
operator|.
name|createShard
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteReplica
specifier|public
name|void
name|testDeleteReplica
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|DeleteReplica
name|request
init|=
name|CollectionAdminRequest
operator|.
name|deleteReplica
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|,
literal|"replica"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|,
name|REPLICA
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteReplicaProp
specifier|public
name|void
name|testDeleteReplicaProp
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|DeleteReplicaProp
name|request
init|=
name|CollectionAdminRequest
operator|.
name|deleteReplicaProperty
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|,
literal|"replica"
argument_list|,
literal|"foo"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|,
name|REPLICA
argument_list|,
literal|"property"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteShard
specifier|public
name|void
name|testDeleteShard
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|DeleteShard
name|request
init|=
name|CollectionAdminRequest
operator|.
name|deleteShard
argument_list|(
literal|"collection"
argument_list|,
literal|"shard"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitShard
specifier|public
name|void
name|testSplitShard
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|SplitShard
name|request
init|=
name|CollectionAdminRequest
operator|.
name|splitShard
argument_list|(
literal|"collection"
argument_list|)
operator|.
name|setShardName
argument_list|(
literal|"shard"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateCollection
specifier|public
name|void
name|testCreateCollection
parameter_list|()
block|{
comment|// shortest form
name|assertContainsParams
argument_list|(
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|,
name|ZkStateReader
operator|.
name|NUM_SHARDS_PROP
argument_list|,
literal|"replicationFactor"
argument_list|,
name|ZkStateReader
operator|.
name|NRT_REPLICAS
argument_list|)
expr_stmt|;
comment|// shortest form w/ "explicitly" choosing "implicit" router
name|assertContainsParams
argument_list|(
name|CollectionAdminRequest
operator|.
name|createCollectionWithImplicitRouter
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|,
literal|"bar"
argument_list|,
literal|1
argument_list|)
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|,
literal|"shards"
argument_list|,
literal|"router.name"
argument_list|,
literal|"replicationFactor"
argument_list|,
name|ZkStateReader
operator|.
name|NRT_REPLICAS
argument_list|)
expr_stmt|;
block|}
DECL|method|testReloadCollection
specifier|public
name|void
name|testReloadCollection
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|Reload
name|request
init|=
name|CollectionAdminRequest
operator|.
name|reloadCollection
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteCollection
specifier|public
name|void
name|testDeleteCollection
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|Delete
name|request
init|=
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testCreateAlias
specifier|public
name|void
name|testCreateAlias
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|CreateAlias
name|request
init|=
name|CollectionAdminRequest
operator|.
name|createAlias
argument_list|(
literal|"name"
argument_list|,
literal|"collections"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|,
literal|"collections"
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteAlias
specifier|public
name|void
name|testDeleteAlias
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|DeleteAlias
name|request
init|=
name|CollectionAdminRequest
operator|.
name|deleteAlias
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
DECL|method|testListCollections
specifier|public
name|void
name|testListCollections
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|List
name|request
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|List
argument_list|()
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|)
expr_stmt|;
block|}
DECL|method|testMigrate
specifier|public
name|void
name|testMigrate
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|Migrate
name|request
init|=
name|CollectionAdminRequest
operator|.
name|migrateData
argument_list|(
literal|"collection"
argument_list|,
literal|"targer"
argument_list|,
literal|"splitKey"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
literal|"target.collection"
argument_list|,
literal|"split.key"
argument_list|)
expr_stmt|;
block|}
DECL|method|testOverseerStatus
specifier|public
name|void
name|testOverseerStatus
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|OverseerStatus
name|request
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|OverseerStatus
argument_list|()
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|)
expr_stmt|;
block|}
DECL|method|testRequestStatus
specifier|public
name|void
name|testRequestStatus
parameter_list|()
block|{
specifier|final
name|CollectionAdminRequest
operator|.
name|RequestStatus
name|request
init|=
name|CollectionAdminRequest
operator|.
name|requestStatus
argument_list|(
literal|"request"
argument_list|)
decl_stmt|;
name|assertContainsParams
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|REQUESTID
argument_list|)
expr_stmt|;
block|}
DECL|method|testDeleteStatus
specifier|public
name|void
name|testDeleteStatus
parameter_list|()
block|{
name|assertContainsParams
argument_list|(
name|CollectionAdminRequest
operator|.
name|deleteAsyncId
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|REQUESTID
argument_list|)
expr_stmt|;
name|assertContainsParams
argument_list|(
name|CollectionAdminRequest
operator|.
name|deleteAllAsyncIds
argument_list|()
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|FLUSH
argument_list|)
expr_stmt|;
block|}
DECL|method|testForceLeader
specifier|public
name|void
name|testForceLeader
parameter_list|()
block|{
name|assertContainsParams
argument_list|(
name|CollectionAdminRequest
operator|.
name|forceLeaderElection
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
operator|.
name|getParams
argument_list|()
argument_list|,
name|ACTION
argument_list|,
name|COLLECTION
argument_list|,
name|SHARD
argument_list|)
expr_stmt|;
block|}
DECL|method|assertContainsParams
specifier|private
name|void
name|assertContainsParams
parameter_list|(
name|SolrParams
name|solrParams
parameter_list|,
name|String
modifier|...
name|requiredParams
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|requiredParamsSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|requiredParams
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|solrParamsSet
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|solrParams
operator|.
name|getParameterNamesIterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|solrParamsSet
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"required params missing: required="
operator|+
name|requiredParamsSet
operator|+
literal|", params="
operator|+
name|solrParamsSet
argument_list|,
name|solrParamsSet
operator|.
name|containsAll
argument_list|(
name|requiredParamsSet
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"extra parameters included in request: required="
operator|+
name|requiredParamsSet
operator|+
literal|", params="
operator|+
name|solrParams
argument_list|,
name|Sets
operator|.
name|difference
argument_list|(
name|solrParamsSet
argument_list|,
name|requiredParamsSet
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

