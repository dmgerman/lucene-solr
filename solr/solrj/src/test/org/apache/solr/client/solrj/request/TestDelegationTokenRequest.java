begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for DelegationTokenRequests  */
end_comment

begin_class
DECL|class|TestDelegationTokenRequest
specifier|public
class|class
name|TestDelegationTokenRequest
extends|extends
name|LuceneTestCase
block|{
annotation|@
name|Test
DECL|method|testGetRequest
specifier|public
name|void
name|testGetRequest
parameter_list|()
throws|throws
name|Exception
block|{
comment|// without renewer
name|DelegationTokenRequest
operator|.
name|Get
name|get
init|=
operator|new
name|DelegationTokenRequest
operator|.
name|Get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"GETDELEGATIONTOKEN"
argument_list|,
name|get
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|get
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"renewer"
argument_list|)
argument_list|)
expr_stmt|;
comment|// with renewer
specifier|final
name|String
name|renewer
init|=
literal|"test"
decl_stmt|;
name|get
operator|=
operator|new
name|DelegationTokenRequest
operator|.
name|Get
argument_list|(
name|renewer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"GETDELEGATIONTOKEN"
argument_list|,
name|get
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|renewer
argument_list|,
name|get
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"renewer"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRenewRequest
specifier|public
name|void
name|testRenewRequest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|token
init|=
literal|"testToken"
decl_stmt|;
name|DelegationTokenRequest
operator|.
name|Renew
name|renew
init|=
operator|new
name|DelegationTokenRequest
operator|.
name|Renew
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"RENEWDELEGATIONTOKEN"
argument_list|,
name|renew
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
argument_list|,
name|renew
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|renew
operator|.
name|getQueryParams
argument_list|()
operator|.
name|contains
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|renew
operator|.
name|getQueryParams
argument_list|()
operator|.
name|contains
argument_list|(
literal|"token"
argument_list|)
argument_list|)
expr_stmt|;
comment|// can handle null token
name|renew
operator|=
operator|new
name|DelegationTokenRequest
operator|.
name|Renew
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|renew
operator|.
name|getParams
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCancelRequest
specifier|public
name|void
name|testCancelRequest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
name|token
init|=
literal|"testToken"
decl_stmt|;
name|DelegationTokenRequest
operator|.
name|Cancel
name|cancel
init|=
operator|new
name|DelegationTokenRequest
operator|.
name|Cancel
argument_list|(
name|token
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"CANCELDELEGATIONTOKEN"
argument_list|,
name|cancel
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|token
argument_list|,
name|cancel
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
literal|"token"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cancel
operator|.
name|getQueryParams
argument_list|()
operator|.
name|contains
argument_list|(
literal|"op"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cancel
operator|.
name|getQueryParams
argument_list|()
operator|.
name|contains
argument_list|(
literal|"token"
argument_list|)
argument_list|)
expr_stmt|;
comment|// can handle null token
name|cancel
operator|=
operator|new
name|DelegationTokenRequest
operator|.
name|Cancel
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|cancel
operator|.
name|getParams
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

