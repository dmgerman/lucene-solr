begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|map
operator|.
name|HashedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|DateEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|StreamEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests numeric Date/Time stream evaluators  */
end_comment

begin_class
DECL|class|DateEvaluatorTest
specifier|public
class|class
name|DateEvaluatorTest
block|{
DECL|field|factory
name|StreamFactory
name|factory
decl_stmt|;
DECL|field|values
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|values
decl_stmt|;
DECL|method|DateEvaluatorTest
specifier|public
name|DateEvaluatorTest
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|factory
operator|=
operator|new
name|StreamFactory
argument_list|()
expr_stmt|;
name|factory
operator|.
name|withFunctionName
argument_list|(
literal|"nope"
argument_list|,
name|DateEvaluator
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|DateEvaluator
operator|.
name|FUNCTION
name|function
range|:
name|DateEvaluator
operator|.
name|FUNCTION
operator|.
name|values
argument_list|()
control|)
block|{
name|factory
operator|.
name|withFunctionName
argument_list|(
name|function
operator|.
name|toString
argument_list|()
argument_list|,
name|DateEvaluator
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|values
operator|=
operator|new
name|HashedMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testInvalidExpression
specifier|public
name|void
name|testInvalidExpression
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamEvaluator
name|evaluator
decl_stmt|;
try|try
block|{
name|evaluator
operator|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
literal|"nope(a)"
argument_list|)
expr_stmt|;
name|evaluator
operator|.
name|evaluate
argument_list|(
operator|new
name|Tuple
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid date expression nope"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"expecting one of [year, month, day"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|evaluator
operator|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
literal|"week()"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid expression week()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|evaluator
operator|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
literal|"week(a, b)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getCause
argument_list|()
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"expecting one value but found 2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|evaluator
operator|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
literal|"Week()"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid evaluator expression Week() - function 'Week' is unknown"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInvalidValues
specifier|public
name|void
name|testInvalidValues
parameter_list|()
throws|throws
name|Exception
block|{
name|StreamEvaluator
name|evaluator
init|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
literal|"year(a)"
argument_list|)
decl_stmt|;
try|try
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"1995-12-31"
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"Invalid field a - The field must be a string formatted in the ISO_INSTANT date format."
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|evaluator
operator|.
name|evaluate
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAllFunctions
specifier|public
name|void
name|testAllFunctions
parameter_list|()
throws|throws
name|Exception
block|{
comment|//year, month, day, dayofyear, hour, minute, quarter, week, second, epoch
name|testFunction
argument_list|(
literal|"year(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|1995
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"month(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"day(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|31
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"dayofyear(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|365
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"dayofquarter(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|92
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"hour(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|23
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"minute(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"quarter(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"week(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|52
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"second(a)"
argument_list|,
literal|"1995-12-31T23:59:58Z"
argument_list|,
literal|58
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"epoch(a)"
argument_list|,
literal|"1995-12-31T23:59:59Z"
argument_list|,
literal|820454399000l
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"year(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|2017
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"year('a')"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|2017
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"month(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"day(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"day('a')"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|17
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"dayofyear(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|76
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"dayofquarter(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|76
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"hour(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"minute(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"quarter(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"week(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"second(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"epoch(a)"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|,
literal|1489746645000l
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"epoch(a)"
argument_list|,
operator|new
name|Date
argument_list|(
literal|1489746645500l
argument_list|)
operator|.
name|toInstant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|1489746645500l
argument_list|)
expr_stmt|;
name|testFunction
argument_list|(
literal|"epoch(a)"
argument_list|,
operator|new
name|Date
argument_list|(
literal|820454399990l
argument_list|)
operator|.
name|toInstant
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|820454399990l
argument_list|)
expr_stmt|;
comment|//Additionally test all functions to make sure they return a non-null number
for|for
control|(
name|DateEvaluator
operator|.
name|FUNCTION
name|function
range|:
name|DateEvaluator
operator|.
name|FUNCTION
operator|.
name|values
argument_list|()
control|)
block|{
name|StreamEvaluator
name|evaluator
init|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
name|function
operator|+
literal|"(a)"
argument_list|)
decl_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
literal|"2017-03-17T10:30:45Z"
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|function
operator|+
literal|" should return a result"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|function
operator|+
literal|" should return a number"
argument_list|,
name|result
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFunction
specifier|public
name|void
name|testFunction
parameter_list|(
name|String
name|expression
parameter_list|,
name|String
name|value
parameter_list|,
name|Number
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|StreamEvaluator
name|evaluator
init|=
name|factory
operator|.
name|constructEvaluator
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|values
operator|.
name|put
argument_list|(
literal|"a"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|Object
name|result
init|=
name|evaluator
operator|.
name|evaluate
argument_list|(
operator|new
name|Tuple
argument_list|(
name|values
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|Number
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExplain
specifier|public
name|void
name|testExplain
parameter_list|()
throws|throws
name|IOException
block|{
name|StreamExpression
name|express
init|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"month('myfield')"
argument_list|)
decl_stmt|;
name|DateEvaluator
name|dateEvaluator
init|=
operator|new
name|DateEvaluator
argument_list|(
name|express
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|Explanation
name|explain
init|=
name|dateEvaluator
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"month(myfield)"
argument_list|,
name|explain
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
name|express
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"day(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbb)"
argument_list|)
expr_stmt|;
name|dateEvaluator
operator|=
operator|new
name|DateEvaluator
argument_list|(
name|express
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|explain
operator|=
name|dateEvaluator
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"day(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbb)"
argument_list|,
name|explain
operator|.
name|getExpression
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

