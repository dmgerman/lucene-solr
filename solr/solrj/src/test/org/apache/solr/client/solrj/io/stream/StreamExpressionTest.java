begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|Slow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ClassificationEvaluation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|ComparatorOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|AddEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|AndEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|EqualsEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|GreaterThanEqualToEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|GreaterThanEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|IfThenElseEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|LessThanEqualToEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|LessThanEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|NotEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|OrEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
operator|.
name|RawValueEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|ConcatOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|GroupOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ops
operator|.
name|ReplaceOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|CountMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MaxMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MeanMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|MinMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|metrics
operator|.
name|SumMetric
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|AbstractDistribZkTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|SolrCloudTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assume
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *  All base tests will be done with CloudSolrStream. Under the covers CloudSolrStream uses SolrStream so  *  SolrStream will get fully exercised through these tests.  *  **/
end_comment

begin_class
annotation|@
name|Slow
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"Lucene3x"
block|,
literal|"Lucene40"
block|,
literal|"Lucene41"
block|,
literal|"Lucene42"
block|,
literal|"Lucene45"
block|}
argument_list|)
DECL|class|StreamExpressionTest
specifier|public
class|class
name|StreamExpressionTest
extends|extends
name|SolrCloudTestCase
block|{
DECL|field|COLLECTIONORALIAS
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTIONORALIAS
init|=
literal|"collection1"
decl_stmt|;
DECL|field|TIMEOUT
specifier|private
specifier|static
specifier|final
name|int
name|TIMEOUT
init|=
name|DEFAULT_TIMEOUT
decl_stmt|;
DECL|field|id
specifier|private
specifier|static
specifier|final
name|String
name|id
init|=
literal|"id"
decl_stmt|;
DECL|field|useAlias
specifier|private
specifier|static
name|boolean
name|useAlias
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|setupCluster
specifier|public
specifier|static
name|void
name|setupCluster
parameter_list|()
throws|throws
name|Exception
block|{
name|configureCluster
argument_list|(
literal|4
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"conf"
argument_list|,
name|getFile
argument_list|(
literal|"solrj"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"streaming"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|addConfig
argument_list|(
literal|"ml"
argument_list|,
name|getFile
argument_list|(
literal|"solrj"
argument_list|)
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"solr"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"configsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"ml"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf"
argument_list|)
argument_list|)
operator|.
name|configure
argument_list|()
expr_stmt|;
name|String
name|collection
decl_stmt|;
name|useAlias
operator|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
expr_stmt|;
if|if
condition|(
name|useAlias
condition|)
block|{
name|collection
operator|=
name|COLLECTIONORALIAS
operator|+
literal|"_collection"
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|=
name|COLLECTIONORALIAS
expr_stmt|;
block|}
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
name|collection
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
name|collection
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
if|if
condition|(
name|useAlias
condition|)
block|{
name|CollectionAdminRequest
operator|.
name|createAlias
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|collection
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
DECL|method|cleanIndex
specifier|public
name|void
name|cleanIndex
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCloudSolrStream
specifier|public
name|void
name|testCloudSolrStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|CloudSolrStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/aliases
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", aliases=\"a_i=alias.a_i, a_s=name\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"alias.a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|"hello0"
argument_list|)
expr_stmt|;
comment|// Basic filtered test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Should be an exception here"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"q param expected for search function"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"blah\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Should be an exception here"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"fl param expected for search function"
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"blah\", fl=\"id, a_f\", sort=\"a_f\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Should be an exception here"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Invalid sort spec"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Test with shards param
name|List
argument_list|<
name|String
argument_list|>
name|shardUrls
init|=
name|TupleStream
operator|.
name|getShards
argument_list|(
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|streamContext
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|shardsMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|shardsMap
operator|.
name|put
argument_list|(
literal|"myCollection"
argument_list|,
name|shardUrls
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"shards"
argument_list|,
name|shardsMap
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(myCollection, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//Execersise the /stream hander
comment|//Add the shards http parameter for the myCollection
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shardUrl
range|:
name|shardUrls
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|shardUrl
argument_list|)
expr_stmt|;
block|}
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
literal|"expr"
argument_list|,
literal|"search(myCollection, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
literal|"myCollection.shards"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|shardUrls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|solrParams
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCloudSolrStreamWithZkHost
specifier|public
name|void
name|testCloudSolrStreamWithZkHost
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|CloudSolrStream
name|stream
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", zkHost="
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/aliases
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", aliases=\"a_i=alias.a_i, a_s=name\", zkHost="
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"alias.a_i"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"name"
argument_list|,
literal|"hello0"
argument_list|)
expr_stmt|;
comment|// Basic filtered test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", zkHost="
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"a_i"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// Test a couple of multile field lists.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, fq=\"a_s:hello0\", fq=\"a_s:hello1\", q=\"id:(*)\", "
operator|+
literal|"zkHost="
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fq clauses should have prevented any docs from coming back"
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, fq=\"a_s:(hello0 OR hello1)\", q=\"id:(*)\", "
operator|+
literal|"zkHost="
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Combining an f1 clause should show us 2 docs"
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParameterSubstitution
specifier|public
name|void
name|testParameterSubstitution
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
comment|// Basic test
name|ModifiableSolrParams
name|sParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
literal|"merge("
operator|+
literal|"${q1},"
operator|+
literal|"${q2},"
operator|+
literal|"on=${mySort})"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"q1"
argument_list|,
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=${mySort})"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"q2"
argument_list|,
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=${mySort})"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"mySort"
argument_list|,
literal|"a_f asc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|sParams
operator|.
name|set
argument_list|(
literal|"mySort"
argument_list|,
literal|"a_f desc"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/ multi comp
name|sParams
operator|.
name|set
argument_list|(
literal|"q2"
argument_list|,
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=${mySort})"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"mySort"
argument_list|,
literal|"\"a_f asc, a_s asc\""
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|sParams
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testUniqueStream
specifier|public
name|void
name|testUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"unique(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"unique(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc, a_i desc\"), over=\"a_f\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Basic w/multi comp
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"unique(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f, a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UniqueStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory w/multi comp
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"unique(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"), over=\"a_f, a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSortStream
specifier|public
name|void
name|testSortStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sort"
argument_list|,
name|SortStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"sort(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"sort(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/multi comp
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"sort(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i asc, a_f desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNullStream
specifier|public
name|void
name|testNullStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"null"
argument_list|,
name|NullStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"null(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), by=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"nullCount"
argument_list|)
operator|==
literal|6
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelNullStream
specifier|public
name|void
name|testParallelNullStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"null"
argument_list|,
name|NullStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"nullCount desc\", null(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=id), by=\"a_i asc\"))"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|long
name|nullCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Tuple
name|t
range|:
name|tuples
control|)
block|{
name|nullCount
operator|+=
name|t
operator|.
name|getLong
argument_list|(
literal|"nullCount"
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|nullCount
argument_list|,
literal|6L
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testNulls
specifier|public
name|void
name|testNulls
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"100"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"200"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|Tuple
name|tuple
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f, s_multi, i_multi\", qt=\"/export\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"hello4"
operator|.
name|equals
argument_list|(
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|strings
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"aaa"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bbb"
argument_list|,
name|strings
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|longs
init|=
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|longs
argument_list|)
expr_stmt|;
comment|//test sort (asc) with null string field. Null should sort to the top.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f, s_multi, i_multi\", qt=\"/export\", sort=\"a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//test sort(desc) with null string field.  Null should sort to the bottom.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f, s_multi, i_multi\", qt=\"/export\", sort=\"a_s desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMergeStream
specifier|public
name|void
name|testMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"merge"
argument_list|,
name|MergeStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"merge("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"),"
operator|+
literal|"on=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|MergeStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"merge("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"
operator|+
literal|"on=\"a_f desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|MergeStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Basic w/multi comp
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"merge("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"on=\"a_f asc, a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|MergeStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory w/multi comp
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"merge("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 3 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1 2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"on=\"a_f asc, a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory w/multi streams
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"merge("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 4)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(1)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(2)\", fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_s asc\"),"
operator|+
literal|"on=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRankStream
specifier|public
name|void
name|testRankStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"top("
operator|+
literal|"n=3,"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"),"
operator|+
literal|"sort=\"a_f asc, a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|RankStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Basic test desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"top("
operator|+
literal|"n=2,"
operator|+
literal|"unique("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc\"),"
operator|+
literal|"over=\"a_f\"),"
operator|+
literal|"sort=\"a_f desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|RankStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// full factory
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"top("
operator|+
literal|"n=4,"
operator|+
literal|"unique("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\"),"
operator|+
literal|"over=\"a_f\"),"
operator|+
literal|"sort=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// full factory, switch order
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"top("
operator|+
literal|"n=4,"
operator|+
literal|"unique("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f desc, a_i desc\"),"
operator|+
literal|"over=\"a_f\"),"
operator|+
literal|"sort=\"a_f asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testRandomStream
specifier|public
name|void
name|testRandomStream
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|update
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|1000
condition|;
operator|++
name|idx
control|)
block|{
name|String
name|idxString
init|=
operator|new
name|Integer
argument_list|(
name|idx
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|update
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|idxString
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
operator|+
name|idxString
argument_list|,
literal|"a_i"
argument_list|,
name|idxString
argument_list|,
literal|"a_f"
argument_list|,
name|idxString
argument_list|)
expr_stmt|;
block|}
name|update
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"random"
argument_list|,
name|RandomStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"random("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", rows=\"1000\", fl=\"id, a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples1
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples1
operator|.
name|size
argument_list|()
operator|==
literal|1000
operator|)
assert|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"random("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", rows=\"1000\", fl=\"id, a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples2
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples2
operator|.
name|size
argument_list|()
operator|==
literal|1000
operator|)
assert|;
name|boolean
name|different
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tuples1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple1
init|=
name|tuples1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Tuple
name|tuple2
init|=
name|tuples2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tuple1
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
name|tuple2
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
condition|)
block|{
name|different
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|assertTrue
argument_list|(
name|different
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples1
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"id"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples2
argument_list|,
operator|new
name|FieldComparator
argument_list|(
literal|"id"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tuples1
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple1
init|=
name|tuples1
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Tuple
name|tuple2
init|=
name|tuples2
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tuple1
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
name|tuple2
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
condition|)
block|{
assert|assert
operator|(
name|tuple1
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
name|tuple2
operator|.
name|get
argument_list|(
literal|"a_i"
argument_list|)
argument_list|)
operator|)
assert|;
block|}
block|}
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"random("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", rows=\"1\", fl=\"id, a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples3
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples3
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|//Exercise the /stream handler
name|ModifiableSolrParams
name|sParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|StreamingTest
operator|.
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
argument_list|)
decl_stmt|;
name|sParams
operator|.
name|add
argument_list|(
literal|"expr"
argument_list|,
literal|"random("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", rows=\"1\", fl=\"id, a_i\")"
argument_list|)
expr_stmt|;
name|JettySolrRunner
name|jetty
init|=
name|cluster
operator|.
name|getJettySolrRunner
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples4
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples4
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testReducerStream
specifier|public
name|void
name|testReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|Tuple
name|t0
decl_stmt|,
name|t1
decl_stmt|,
name|t2
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
decl_stmt|,
name|maps1
decl_stmt|,
name|maps2
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"reduce"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|GroupOperation
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"reduce("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f asc\"),"
operator|+
literal|"by=\"a_s\","
operator|+
literal|"group(sort=\"a_f desc\", n=\"4\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// basic w/spaces
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"reduce("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc, a_f       asc\"),"
operator|+
literal|"by=\"a_s\","
operator|+
literal|"group(sort=\"a_i asc\", n=\"2\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|maps0
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHavingStream
specifier|public
name|void
name|testHavingStream
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 9"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"having"
argument_list|,
name|HavingStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"and"
argument_list|,
name|AndEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"or"
argument_list|,
name|OrEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"not"
argument_list|,
name|NotEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gt"
argument_list|,
name|GreaterThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lt"
argument_list|,
name|LessThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"eq"
argument_list|,
name|EqualsEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lteq"
argument_list|,
name|LessThanEqualToEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gteq"
argument_list|,
name|GreaterThanEqualToEvaluator
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), eq(a_i, 9))"
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), and(eq(a_i, 9),lt(a_i, 10)))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), or(eq(a_i, 9),eq(a_i, 8)))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), and(eq(a_i, 9),not(eq(a_i, 9))))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), and(lteq(a_i, 9), gteq(a_i, 8)))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"having(rollup(over=a_f, sum(a_i), search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\")), and(eq(sum(a_i), 9),eq(sum(a_i), 9)))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelHavingStream
specifier|public
name|void
name|testParallelHavingStream
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 9"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"having"
argument_list|,
name|HavingStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"and"
argument_list|,
name|AndEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"or"
argument_list|,
name|OrEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"not"
argument_list|,
name|NotEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gt"
argument_list|,
name|GreaterThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lt"
argument_list|,
name|LessThanEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"eq"
argument_list|,
name|EqualsEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"lteq"
argument_list|,
name|LessThanEqualToEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gteq"
argument_list|,
name|GreaterThanEqualToEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"val"
argument_list|,
name|RawValueEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\", having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=id), eq(a_i, 9)))"
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\", having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=id), and(eq(a_i, 9),lt(a_i, 10))))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\",having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=id), or(eq(a_i, 9),eq(a_i, 8))))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\", having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=id), and(eq(a_i, 9),not(eq(a_i, 9)))))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\",having(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=id), and(lteq(a_i, 9), gteq(a_i, 8))))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"8"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"9"
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\", having(rollup(over=a_f, sum(a_i), search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=a_f)), and(eq(sum(a_i), 9),eq(sum(a_i),9))))"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFetchStream
specifier|public
name|void
name|testFetchStream
parameter_list|()
throws|throws
name|Exception
block|{
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
comment|//TODO share in @Before ; close in @After ?
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 9"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"fetch"
argument_list|,
name|FetchStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"fetch("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|",  search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), on=\"id=a_i\", batchSize=\"2\", fl=\"subject\")"
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 0"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 2"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 3"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 4"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 1"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 5"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 6"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 7"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 8"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 9"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//Change the batch size
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"fetch("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|",  search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\"), on=\"id=a_i\", batchSize=\"3\", fl=\"subject\")"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 0"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 2"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 3"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 4"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 1"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 5"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 6"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 7"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 8"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 9"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// SOLR-10404 test that "hello 99" as a value gets escaped
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"99"
argument_list|,
literal|"a1_s"
argument_list|,
literal|"hello 99"
argument_list|,
literal|"a2_s"
argument_list|,
literal|"hello 99"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 99"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"fetch("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|",  search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q="
operator|+
name|id
operator|+
literal|":99, fl=\"id,a1_s\", sort=\"id asc\"), on=\"a1_s=a2_s\", fl=\"subject\")"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 99"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelFetchStream
specifier|public
name|void
name|testParallelFetchStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|,
literal|"subject"
argument_list|,
literal|"blah blah blah 9"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"fetch"
argument_list|,
name|FetchStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\", fetch("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|",  search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=\"id\"), on=\"id=a_i\", batchSize=\"2\", fl=\"subject\"))"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 0"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 2"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 3"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 4"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 1"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 5"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 6"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 7"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 8"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 9"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"a_f asc\", fetch("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|",  search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\", partitionKeys=\"id\"), on=\"id=a_i\", batchSize=\"3\", fl=\"subject\"))"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 0"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 2"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 3"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 4"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 1"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 5"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 6"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 7"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 8"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"blah blah blah 9"
operator|.
name|equals
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testDaemonStream
specifier|public
name|void
name|testDaemonStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|DaemonStream
name|daemonStream
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"daemon(rollup("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"a_i,a_s\", sort=\"a_s asc\"),"
operator|+
literal|"over=\"a_s\","
operator|+
literal|"sum(a_i)"
operator|+
literal|"), id=\"test\", runInterval=\"1000\", queueSize=\"9\")"
argument_list|)
expr_stmt|;
name|daemonStream
operator|=
operator|(
name|DaemonStream
operator|)
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|daemonStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Test Long and Double Sums
name|daemonStream
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// This will start the daemon thread
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|daemonStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Reads from the queue
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
comment|//System.out.println("#################################### Bucket 1:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 2:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 3:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
block|}
comment|//Now lets wait until the internal queue fills up
while|while
condition|(
name|daemonStream
operator|.
name|remainingCapacity
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{          }
block|}
comment|//OK capacity is full, let's index a new doc
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Now lets clear the existing docs in the queue 9, plus 3 more to get passed the run that was blocked. The next run should
comment|//have the tuples with the updated count.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|12
condition|;
name|i
operator|++
control|)
block|{
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
comment|//And rerun the loop. It should have a new count for hello0
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|daemonStream
operator|.
name|read
argument_list|()
decl_stmt|;
comment|// Reads from the queue
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
comment|//System.out.println("#################################### Bucket 1:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 2:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|daemonStream
operator|.
name|read
argument_list|()
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
comment|//System.out.println("#################################### Bucket 3:"+bucket);
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|daemonStream
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//This should stop the daemon thread
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testTerminatingDaemonStream
specifier|public
name|void
name|testTerminatingDaemonStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|DaemonStream
name|daemonStream
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"daemon(topic("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|","
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"a_s:hello\", initialCheckpoint=0, id=\"topic1\", rows=2, fl=\"id\""
operator|+
literal|"), id=test, runInterval=1000, terminate=true, queueSize=50)"
argument_list|)
expr_stmt|;
name|daemonStream
operator|=
operator|(
name|DaemonStream
operator|)
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|daemonStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|daemonStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testRollupStream
specifier|public
name|void
name|testRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"rollup("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"a_s,a_i,a_f\", sort=\"a_s asc\"),"
operator|+
literal|"over=\"a_s\","
operator|+
literal|"sum(a_i),"
operator|+
literal|"sum(a_f),"
operator|+
literal|"min(a_i),"
operator|+
literal|"min(a_f),"
operator|+
literal|"max(a_i),"
operator|+
literal|"max(a_f),"
operator|+
literal|"avg(a_i),"
operator|+
literal|"avg(a_f),"
operator|+
literal|"count(*),"
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testStatsStream
specifier|public
name|void
name|testStatsStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"stats"
argument_list|,
name|StatsStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"stats(collection1, q=*:*, sum(a_i), sum(a_f), min(a_i), min(a_f), max(a_i), max(a_f), avg(a_i), avg(a_f), count(*))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|70
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|55.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelUniqueStream
specifier|public
name|void
name|testParallelUniqueStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", unique(search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\"), over=\"a_f\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_f asc\")"
argument_list|)
decl_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
comment|//Test the eofTuples
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|eofTuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//There should be an EOF tuple for each worker.
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelShuffleStream
specifier|public
name|void
name|testParallelShuffleStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"16"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"17"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"18"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"19"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"20"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"21"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"22"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"23"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"24"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"25"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"26"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"27"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"28"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"29"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"30"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"31"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"32"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"33"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"34"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"35"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"36"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"37"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"38"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"39"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"40"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"41"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"42"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"43"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"44"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"45"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"46"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"47"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"48"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"49"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"50"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"51"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"52"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"53"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"54"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"55"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"56"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1000"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"shuffle"
argument_list|,
name|ShuffleStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", unique(shuffle(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\"), over=\"a_f\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_f asc\")"
argument_list|)
decl_stmt|;
name|pstream
operator|.
name|setStreamFactory
argument_list|(
name|streamFactory
argument_list|)
expr_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|,
literal|56
argument_list|)
expr_stmt|;
comment|//Test the eofTuples
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|eofTuples
init|=
name|pstream
operator|.
name|getEofTuples
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|eofTuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//There should be an EOF tuple for each worker.
assert|assert
operator|(
name|pstream
operator|.
name|toExpression
argument_list|(
name|streamFactory
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"shuffle"
argument_list|)
operator|)
assert|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelReducerStream
specifier|public
name|void
name|testParallelReducerStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|GroupOperation
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"reduce"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", "
operator|+
literal|"reduce("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id,a_s,a_i,a_f\", sort=\"a_s asc,a_f asc\", partitionKeys=\"a_s\"), "
operator|+
literal|"by=\"a_s\","
operator|+
literal|"group(sort=\"a_i asc\", n=\"5\")), "
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_s asc\")"
argument_list|)
decl_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|Tuple
name|t0
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps0
init|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|Tuple
name|t1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps1
init|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|Tuple
name|t2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|maps2
init|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|4
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|pstream
operator|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", "
operator|+
literal|"reduce("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id,a_s,a_i,a_f\", sort=\"a_s desc,a_f asc\", partitionKeys=\"a_s\"), "
operator|+
literal|"by=\"a_s\", "
operator|+
literal|"group(sort=\"a_i desc\", n=\"5\")),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_s desc\")"
argument_list|)
expr_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|t0
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|maps0
operator|=
name|t0
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps0
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|t1
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|maps1
operator|=
name|t1
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps1
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|t2
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|maps2
operator|=
name|t2
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
name|assertMaps
argument_list|(
name|maps2
argument_list|,
literal|9
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelRankStream
specifier|public
name|void
name|testParallelRankStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"9"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", "
operator|+
literal|"top("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), "
operator|+
literal|"n=\"11\", "
operator|+
literal|"sort=\"a_i desc\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i desc\")"
argument_list|)
decl_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|10
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|5
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelMergeStream
specifier|public
name|void
name|testParallelMergeStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"8"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"7"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"100"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|zkHost
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"unique"
argument_list|,
name|UniqueStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"top"
argument_list|,
name|RankStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"group"
argument_list|,
name|ReducerStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"merge"
argument_list|,
name|MergeStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Test ascending
name|ParallelStream
name|pstream
init|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", merge(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(4 1 8 7 9)\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 2 3 6)\", fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"), on=\"a_i asc\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i asc\")"
argument_list|)
decl_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|9
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|//Test descending
name|pstream
operator|=
operator|(
name|ParallelStream
operator|)
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", merge(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(4 1 8 9)\", fl=\"id,a_s,a_i\", sort=\"a_i desc\", partitionKeys=\"a_i\"), search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:(0 2 3 6)\", fl=\"id,a_s,a_i\", sort=\"a_i desc\", partitionKeys=\"a_i\"), on=\"a_i desc\"), workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i desc\")"
argument_list|)
expr_stmt|;
name|pstream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|pstream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|9
argument_list|,
literal|8
argument_list|,
literal|6
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelRollupStream
specifier|public
name|void
name|testParallelRollupStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"rollup"
argument_list|,
name|RollupStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|","
operator|+
literal|"rollup("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=*:*, fl=\"a_s,a_i,a_f\", sort=\"a_s asc\", partitionKeys=\"a_s\"),"
operator|+
literal|"over=\"a_s\","
operator|+
literal|"sum(a_i),"
operator|+
literal|"sum(a_f),"
operator|+
literal|"min(a_i),"
operator|+
literal|"min(a_f),"
operator|+
literal|"max(a_i),"
operator|+
literal|"max(a_f),"
operator|+
literal|"avg(a_i),"
operator|+
literal|"avg(a_f),"
operator|+
literal|"count(*)"
operator|+
literal|"),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|"\", sort=\"a_s asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testInnerJoinStream
specifier|public
name|void
name|testInnerJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
comment|// 10
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
comment|// 11
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
comment|// 12
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
comment|// 14
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 3
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 4
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 5
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
comment|// 7
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"innerJoin"
argument_list|,
name|InnerJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\", aliases=\"id=right.id, join1_i=right.join1_i, join2_s=right.join2_s, ident_s=right.ident_s\"),"
operator|+
literal|"on=\"ident_s=right.ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
comment|// Differing field names
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"innerJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\", aliases=\"join3_i=aliasesField\"),"
operator|+
literal|"on=\"join1_i=aliasesField, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|InnerJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testLeftOuterJoinStream
specifier|public
name|void
name|testLeftOuterJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
comment|// 10
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
comment|// 11
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
comment|// 12
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
comment|// 14
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 3
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 4
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 5
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
comment|// 7
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"leftOuterJoin"
argument_list|,
name|LeftOuterJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join1_i, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\", aliases=\"id=right.id, join1_i=right.join1_i, join2_s=right.join2_s, ident_s=right.ident_s\"),"
operator|+
literal|"on=\"ident_s=right.ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Differing field names
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"leftOuterJoin("
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\", aliases=\"join3_i=aliasesField\"),"
operator|+
literal|"on=\"join1_i=aliasesField, join2_s=join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|LeftOuterJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHashJoinStream
specifier|public
name|void
name|testHashJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
comment|// 10
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
comment|// 11
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
comment|// 12
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
comment|// 14
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 3
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 4
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 5
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
comment|// 7
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
name|COLLECTIONORALIAS
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"hashJoin"
argument_list|,
name|HashJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"on=\"ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
comment|// Basic test with "on" mapping
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"hashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join3_i,ident_s\", sort=\"join1_i asc, join3_i asc, id asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join3_i,ident_s\", sort=\"join1_i asc, join3_i asc\"),"
operator|+
literal|"on=\"join1_i=join3_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|HashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Does a lexical sort
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testOuterHashJoinStream
specifier|public
name|void
name|testOuterHashJoinStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
comment|// 10
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
comment|// 11
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
comment|// 12
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
comment|// 14
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 3
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 4
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 5
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
comment|// 7
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"outerHashJoin"
argument_list|,
name|OuterHashJoinStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic desc
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join1_i,join2_s,ident_s\", sort=\"join1_i desc, join2_s asc\"),"
operator|+
literal|"on=\"join1_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|7
argument_list|,
literal|6
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Results in both searches, no join matches
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"ident_s asc\"),"
operator|+
literal|"on=\"ident_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|8
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Basic test
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"outerHashJoin("
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\"),"
operator|+
literal|"hashed=search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join2_s asc\"),"
operator|+
literal|"on=\"join1_i=join3_i, join2_s\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|OuterHashJoinStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|10
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSelectStream
specifier|public
name|void
name|testSelectStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_1"
argument_list|)
comment|// 8, 9
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_3"
argument_list|)
comment|// 10
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_4"
argument_list|)
comment|// 11
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_5"
argument_list|)
comment|// 12
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"d"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"side_s"
argument_list|,
literal|"left"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"left_7"
argument_list|)
comment|// 14
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_1"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"0"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_2"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"0"
argument_list|)
comment|// 1,15
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_3"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 3
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_4"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 4
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"1"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"c"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_5"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"1"
argument_list|)
comment|// 5
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"2"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"dad"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_6"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"side_s"
argument_list|,
literal|"right"
argument_list|,
literal|"join1_i"
argument_list|,
literal|"3"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"e"
argument_list|,
literal|"ident_s"
argument_list|,
literal|"right_7"
argument_list|,
literal|"join3_i"
argument_list|,
literal|"3"
argument_list|)
comment|// 7
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|clause
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"innerJoin"
argument_list|,
name|InnerJoinStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"select"
argument_list|,
name|SelectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"replace"
argument_list|,
name|ReplaceOperation
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"concat"
argument_list|,
name|ConcatOperation
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"add"
argument_list|,
name|AddEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"if"
argument_list|,
name|IfThenElseEvaluator
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"gt"
argument_list|,
name|GreaterThanEvaluator
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Basic test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, join1_i as join1, join2_s as join2, ident_s as identity,"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"join1"
argument_list|,
literal|"join2"
argument_list|,
literal|"identity"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"join1_i"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"ident_s"
argument_list|)
expr_stmt|;
comment|// Basic with replacements test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, join1_i as join1, join2_s as join2, ident_s as identity,"
operator|+
literal|"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"join1"
argument_list|,
literal|"join2"
argument_list|,
literal|"identity"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"join1_i"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"ident_s"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
comment|// Basic with replacements and concat test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, join1_i as join1, join2_s as join2, ident_s as identity,"
operator|+
literal|"replace(join1, 0, withValue=12), replace(join1, 3, withValue=12), replace(join1, 2, withField=join2),"
operator|+
literal|"concat(fields=\"identity,join1\", as=\"newIdentity\",delim=\"-\"),"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"join1"
argument_list|,
literal|"join2"
argument_list|,
literal|"identity"
argument_list|,
literal|"newIdentity"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"join1_i"
argument_list|,
literal|"join2_s"
argument_list|,
literal|"ident_s"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_1-12"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_1-12"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_2-12"
argument_list|)
expr_stmt|;
name|assertLong
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_7-12"
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"join1"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
name|assertString
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|"newIdentity"
argument_list|,
literal|"left_6-d"
argument_list|)
expr_stmt|;
comment|// Inner stream test
name|clause
operator|=
literal|"innerJoin("
operator|+
literal|"select("
operator|+
literal|"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|"),"
operator|+
literal|"select("
operator|+
literal|"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),"
operator|+
literal|"),"
operator|+
literal|"on=\"left.join1=right.join1, left.join2=right.join2\""
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"left.join1"
argument_list|,
literal|"left.join2"
argument_list|,
literal|"left.ident"
argument_list|,
literal|"right.join1"
argument_list|,
literal|"right.join2"
argument_list|,
literal|"right.ident"
argument_list|)
expr_stmt|;
comment|// Wrapped select test
name|clause
operator|=
literal|"select("
operator|+
literal|"id, left.ident, right.ident,"
operator|+
literal|"innerJoin("
operator|+
literal|"select("
operator|+
literal|"id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,"
operator|+
literal|"search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")"
operator|+
literal|"),"
operator|+
literal|"select("
operator|+
literal|"join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,"
operator|+
literal|"search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),"
operator|+
literal|"),"
operator|+
literal|"on=\"left.join1=right.join1, left.join2=right.join2\""
operator|+
literal|")"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertFields
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
literal|"left.ident"
argument_list|,
literal|"right.ident"
argument_list|)
expr_stmt|;
name|assertNotFields
argument_list|(
name|tuples
argument_list|,
literal|"left.join1"
argument_list|,
literal|"left.join2"
argument_list|,
literal|"right.join1"
argument_list|,
literal|"right.join2"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFacetStream
specifier|public
name|void
name|testFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|clause
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"facet"
argument_list|,
name|FacetStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"sum(a_i) asc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
comment|//Test Long and Double Sums
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|sumf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|mini
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|minf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|maxi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|maxf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|avgi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|avgf
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Reverse the Sort.
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"sum(a_i) desc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Test Long and Double Sums
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//Test index sort
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"a_s desc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
comment|//Test index sort
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"a_s asc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|17.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|18.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|0.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|14.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|10.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.25D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|38.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|26.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|13.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|9.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|6.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"a_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|sumf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_f)"
argument_list|)
expr_stmt|;
name|mini
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_i)"
argument_list|)
expr_stmt|;
name|minf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"min(a_f)"
argument_list|)
expr_stmt|;
name|maxi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_i)"
argument_list|)
expr_stmt|;
name|maxf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"max(a_f)"
argument_list|)
expr_stmt|;
name|avgi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_i)"
argument_list|)
expr_stmt|;
name|avgf
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"avg(a_f)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mini
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|minf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|4.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|11.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|maxf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.0D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgi
operator|.
name|doubleValue
argument_list|()
operator|==
literal|7.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|avgf
operator|.
name|doubleValue
argument_list|()
operator|==
literal|5.5D
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|//Test zero result facets
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"blahhh\", "
operator|+
literal|"fl=\"a_s,a_i,a_f\", "
operator|+
literal|"sort=\"a_s asc\", "
operator|+
literal|"buckets=\"a_s\", "
operator|+
literal|"bucketSorts=\"a_s asc\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), sum(a_f), "
operator|+
literal|"min(a_i), min(a_f), "
operator|+
literal|"max(a_i), max(a_f), "
operator|+
literal|"avg(a_i), avg(a_f), "
operator|+
literal|"count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testSubFacetStream
specifier|public
name|void
name|testSubFacetStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"a"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"level1_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"level2_s"
argument_list|,
literal|"b"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|clause
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"facet"
argument_list|,
name|FacetStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"sum"
argument_list|,
name|SumMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"min"
argument_list|,
name|MinMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"max"
argument_list|,
name|MaxMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"avg"
argument_list|,
name|MeanMetric
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"count"
argument_list|,
name|CountMetric
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Basic test
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"buckets=\"level1_s, level2_s\", "
operator|+
literal|"bucketSorts=\"sum(a_i) desc, sum(a_i) desc)\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|bucket1
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
decl_stmt|;
name|String
name|bucket2
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
decl_stmt|;
name|Double
name|sumi
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
decl_stmt|;
name|Double
name|count
init|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|35
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|clause
operator|=
literal|"facet("
operator|+
literal|"collection1, "
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"buckets=\"level1_s, level2_s\", "
operator|+
literal|"bucketSorts=\"level1_s desc, level2_s desc)\", "
operator|+
literal|"bucketSizeLimit=100, "
operator|+
literal|"sum(a_i), count(*)"
operator|+
literal|")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|6
operator|)
assert|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|11
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|35
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|15
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|bucket1
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level1_s"
argument_list|)
expr_stmt|;
name|bucket2
operator|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"level2_s"
argument_list|)
expr_stmt|;
name|sumi
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"sum(a_i)"
argument_list|)
expr_stmt|;
name|count
operator|=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"count(*)"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket1
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|bucket2
operator|.
name|equals
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sumi
operator|.
name|longValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|count
operator|.
name|doubleValue
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTopicStream
specifier|public
name|void
name|testTopicStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Store checkpoints in the same index as the main documents. This perfectly valid
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"topic(collection1, collection1, q=\"a_s:hello\", fl=\"id\", id=\"1000000\", checkpointEvery=3)"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Should be zero because the checkpoints will be set to the highest vesion on the shards.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
comment|//Now check to see if the checkpoints are present
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|version1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
comment|//Index a few more documents
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"topic(collection1, collection1, fl=\"id\", q=\"a_s:hello\", id=\"1000000\", checkpointEvery=2)"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
try|try
block|{
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tuple1
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|tuple1
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
argument_list|,
literal|10l
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
comment|// Checkpoint should not have changed.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|TupleStream
name|cstream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|cstream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|cstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkpoints
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|version2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|version1
argument_list|,
name|version2
argument_list|)
expr_stmt|;
name|Tuple
name|tuple2
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|(
name|long
operator|)
name|tuple2
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
argument_list|,
literal|11l
argument_list|)
expr_stmt|;
comment|//Checkpoint should have changed.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|cstream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|cstream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|cstream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkpoints
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Long
name|version3
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|version3
operator|>
name|version2
argument_list|)
expr_stmt|;
name|Tuple
name|tuple3
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|tuple3
operator|.
name|EOF
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//Test with the DaemonStream
name|DaemonStream
name|dstream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"daemon(topic(collection1, collection1, fl=\"id\", q=\"a_s:hello\", id=\"1000000\", checkpointEvery=2), id=\"test\", runInterval=\"1000\", queueSize=\"9\")"
argument_list|)
expr_stmt|;
name|dstream
operator|=
operator|(
name|DaemonStream
operator|)
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|dstream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|//Index a few more documents
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Start reading from the DaemonStream
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
name|dstream
operator|.
name|open
argument_list|()
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|13
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
comment|// We want to see if the version has been updated after reading two tuples
comment|//Index a few more documents
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"14"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"15"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Read from the same DaemonStream stream
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|14
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
comment|// This should trigger a checkpoint as it's the 4th read from the stream.
name|assertEquals
argument_list|(
literal|15
argument_list|,
operator|(
name|long
operator|)
name|tuple
operator|.
name|getLong
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|dstream
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|tuple
operator|=
name|dstream
operator|.
name|read
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|tuple
operator|.
name|EOF
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|dstream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testPriorityStream
specifier|public
name|void
name|testPriorityStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"priority"
argument_list|,
name|PriorityStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
name|FieldComparator
name|comp
init|=
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"priority(topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_i\", id=1000000, initialCheckpoint=0),"
operator|+
literal|"topic(collection1, collection1, q=\"a_s:hello1\", fl=\"id,a_i\", id=2000000, initialCheckpoint=0))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|//The tuples from the first topic (high priority) should be returned.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"priority(topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_i\", id=1000000, initialCheckpoint=0),"
operator|+
literal|"topic(collection1, collection1, q=\"a_s:hello1\", fl=\"id,a_i\", id=2000000, initialCheckpoint=0))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|//The Tuples from the second topic (Low priority) should be returned.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"priority(topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_i\", id=1000000, initialCheckpoint=0),"
operator|+
literal|"topic(collection1, collection1, q=\"a_s:hello1\", fl=\"id,a_i\", id=2000000, initialCheckpoint=0))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Both queus are empty.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelPriorityStream
specifier|public
name|void
name|testParallelPriorityStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"priority"
argument_list|,
name|PriorityStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
name|FieldComparator
name|comp
init|=
operator|new
name|FieldComparator
argument_list|(
literal|"a_i"
argument_list|,
name|ComparatorOrder
operator|.
name|ASCENDING
argument_list|)
decl_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, workers=2, sort=\"_version_ asc\", priority(topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_i\", id=1000000, initialCheckpoint=0, partitionKeys=id),"
operator|+
literal|"topic(collection1, collection1, q=\"a_s:hello1\", fl=\"id,a_i\", id=2000000, initialCheckpoint=0, partitionKeys=id)))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|//The tuples from the first topic (high priority) should be returned.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|5
argument_list|,
literal|6
argument_list|,
literal|7
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, workers=2, sort=\"_version_ asc\", priority(topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_i\", id=1000000, initialCheckpoint=0, partitionKeys=id),"
operator|+
literal|"topic(collection1, collection1, q=\"a_s:hello1\", fl=\"id,a_i\", id=2000000, initialCheckpoint=0, partitionKeys=id)))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|tuples
argument_list|,
name|comp
argument_list|)
expr_stmt|;
comment|//The Tuples from the second topic (Low priority) should be returned.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, workers=2, sort=\"_version_ asc\", priority(topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_i\", id=1000000, initialCheckpoint=0, partitionKeys=id),"
operator|+
literal|"topic(collection1, collection1, q=\"a_s:hello1\", fl=\"id,a_i\", id=2000000, initialCheckpoint=0, partitionKeys=id)))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Both queus are empty.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelTopicStream
specifier|public
name|void
name|testParallelTopicStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"2"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah4"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"5"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"10"
argument_list|,
literal|"a_f"
argument_list|,
literal|"6"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah6"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"11"
argument_list|,
literal|"a_f"
argument_list|,
literal|"7"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"12"
argument_list|,
literal|"a_f"
argument_list|,
literal|"8"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah8"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|,
literal|"subject"
argument_list|,
literal|"ha ha bla blah10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Store checkpoints in the same index as the main documents. This is perfectly valid
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, "
operator|+
literal|"workers=\"2\", "
operator|+
literal|"sort=\"_version_ asc\","
operator|+
literal|"topic(collection1, "
operator|+
literal|"collection1, "
operator|+
literal|"q=\"a_s:hello\", "
operator|+
literal|"fl=\"id\", "
operator|+
literal|"id=\"1000000\", "
operator|+
literal|"partitionKeys=\"id\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
comment|//Should be zero because the checkpoints will be set to the highest version on the shards.
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"collection1"
argument_list|)
expr_stmt|;
comment|//Now check to see if the checkpoints are present
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(collection1, q=\"id:1000000*\", fl=\"id, checkpoint_ss, _version_\", sort=\"id asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|checkpoints
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStrings
argument_list|(
literal|"checkpoint_ss"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|checkpoints
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|String
name|id1
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|id2
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|id1
operator|.
name|equals
argument_list|(
literal|"1000000_0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|id2
operator|.
name|equals
argument_list|(
literal|"1000000_1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Index a few more documents
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"10"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"11"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, "
operator|+
literal|"workers=\"2\", "
operator|+
literal|"sort=\"_version_ asc\","
operator|+
literal|"topic(collection1, "
operator|+
literal|"collection1, "
operator|+
literal|"q=\"a_s:hello\", "
operator|+
literal|"fl=\"id\", "
operator|+
literal|"id=\"1000000\", "
operator|+
literal|"partitionKeys=\"id\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTopicRun
argument_list|(
name|stream
argument_list|,
literal|"10"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
comment|//Test will initial checkpoint. This should pull all
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, "
operator|+
literal|"workers=\"2\", "
operator|+
literal|"sort=\"_version_ asc\","
operator|+
literal|"topic(collection1, "
operator|+
literal|"collection1, "
operator|+
literal|"q=\"a_s:hello\", "
operator|+
literal|"fl=\"id\", "
operator|+
literal|"id=\"2000000\", "
operator|+
literal|"initialCheckpoint=\"0\", "
operator|+
literal|"partitionKeys=\"id\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTopicRun
argument_list|(
name|stream
argument_list|,
literal|"0"
argument_list|,
literal|"1"
argument_list|,
literal|"2"
argument_list|,
literal|"3"
argument_list|,
literal|"4"
argument_list|,
literal|"5"
argument_list|,
literal|"6"
argument_list|,
literal|"7"
argument_list|,
literal|"8"
argument_list|,
literal|"9"
argument_list|,
literal|"10"
argument_list|,
literal|"11"
argument_list|)
expr_stmt|;
comment|//Add more documents
comment|//Index a few more documents
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"12"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"13"
argument_list|,
literal|"a_f"
argument_list|,
literal|"9"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"13"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"14"
argument_list|,
literal|"a_f"
argument_list|,
literal|"10"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Run the same topic again including the initialCheckpoint. It should start where it left off.
comment|//initialCheckpoint should be ignored for all but the first run.
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTopicRun
argument_list|(
name|stream
argument_list|,
literal|"12"
argument_list|,
literal|"13"
argument_list|)
expr_stmt|;
comment|//Test text extraction
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"parallel(collection1, "
operator|+
literal|"workers=\"2\", "
operator|+
literal|"sort=\"_version_ asc\","
operator|+
literal|"topic(collection1, "
operator|+
literal|"collection1, "
operator|+
literal|"q=\"subject:bla\", "
operator|+
literal|"fl=\"subject\", "
operator|+
literal|"id=\"3000000\", "
operator|+
literal|"initialCheckpoint=\"0\", "
operator|+
literal|"partitionKeys=\"id\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|assertTopicSubject
argument_list|(
name|stream
argument_list|,
literal|"ha ha bla blah0"
argument_list|,
literal|"ha ha bla blah1"
argument_list|,
literal|"ha ha bla blah2"
argument_list|,
literal|"ha ha bla blah3"
argument_list|,
literal|"ha ha bla blah4"
argument_list|,
literal|"ha ha bla blah5"
argument_list|,
literal|"ha ha bla blah6"
argument_list|,
literal|"ha ha bla blah7"
argument_list|,
literal|"ha ha bla blah8"
argument_list|,
literal|"ha ha bla blah9"
argument_list|,
literal|"ha ha bla blah10"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testUpdateStream
specifier|public
name|void
name|testUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"destinationCollection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\"))"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UpdateStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"destinationCollection"
argument_list|)
expr_stmt|;
comment|//Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|==
literal|false
operator|)
assert|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|"batchIndexed"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(destinationCollection, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"destinationCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelUpdateStream
specifier|public
name|void
name|testParallelUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\"))"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|parallelUpdateStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"parallelDestinationCollection"
argument_list|)
expr_stmt|;
comment|//Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|count
operator|+=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"batchIndexed"
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|count
operator|==
literal|5
operator|)
assert|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"parallelDestinationCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelDaemonUpdateStream
specifier|public
name|void
name|testParallelDaemonUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"daemon(update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\")), runInterval=\"1000\", id=\"test\")"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|parallelUpdateStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//Lets sleep long enough for daemon updates to run.
comment|//Lets stop the daemons
name|ModifiableSolrParams
name|sParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|StreamingTest
operator|.
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|,
literal|"action"
argument_list|,
literal|"list"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|workersComplete
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|int
name|iterations
init|=
literal|0
decl_stmt|;
name|INNER
label|:
while|while
condition|(
name|iterations
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|long
name|l
init|=
name|tupleResponse
operator|.
name|getLong
argument_list|(
literal|"iterations"
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
condition|)
block|{
operator|++
name|workersComplete
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                }
block|}
name|iterations
operator|=
operator|(
name|int
operator|)
name|l
expr_stmt|;
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|workersComplete
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|)
expr_stmt|;
comment|//Lets stop the daemons
name|sParams
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"stop"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sParams
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|workersComplete
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|long
name|stopTime
init|=
literal|0
decl_stmt|;
name|INNER
label|:
while|while
condition|(
name|stopTime
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|stopTime
operator|=
name|tupleResponse
operator|.
name|getLong
argument_list|(
literal|"stopTime"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopTime
operator|>
literal|0
condition|)
block|{
operator|++
name|workersComplete
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                }
block|}
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|workersComplete
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelTerminatingDaemonUpdateStream
specifier|public
name|void
name|testParallelTerminatingDaemonUpdateStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"topic"
argument_list|,
name|TopicStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"daemon(update(parallelDestinationCollection1, batchSize=2, topic(collection1, collection1, q=\"a_s:hello\", fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", partitionKeys=\"a_f\", initialCheckpoint=0, id=\"topic1\")), terminate=true, runInterval=\"1000\", id=\"test\")"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|parallelUpdateStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|ModifiableSolrParams
name|sParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|StreamingTest
operator|.
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|,
literal|"action"
argument_list|,
literal|"list"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|workersComplete
init|=
literal|0
decl_stmt|;
comment|//Daemons should terminate after the topic is completed
comment|//Loop through all shards and wait for the daemons to be gone from the listing.
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|INNER
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
operator|++
name|workersComplete
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|workersComplete
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|////////////////////////////////////////////
annotation|@
name|Test
DECL|method|testCommitStream
specifier|public
name|void
name|testCommitStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"destinationCollection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"commit"
argument_list|,
name|CommitStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"commit(destinationCollection, batchSize=2, update(destinationCollection, batchSize=5, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\")))"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|expression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
comment|//Ensure that all CommitStream tuples indicate the correct number of copied/indexed docs
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|t
operator|.
name|EOF
operator|==
literal|false
operator|)
assert|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|t
operator|.
name|get
argument_list|(
literal|"batchIndexed"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(destinationCollection, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"destinationCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelCommitStream
specifier|public
name|void
name|testParallelCommitStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"commit"
argument_list|,
name|CommitStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"commit(parallelDestinationCollection, batchSize=0, zkHost=\""
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|"\", update(parallelDestinationCollection, batchSize=2, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\")))"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|parallelUpdateStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
comment|//Ensure that all UpdateStream tuples indicate the correct number of copied/indexed docs
name|long
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|count
operator|+=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"batchIndexed"
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|count
operator|==
literal|5
operator|)
assert|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"parallelDestinationCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelDaemonCommitStream
specifier|public
name|void
name|testParallelDaemonCommitStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello0"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello2"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|,
literal|"a_f"
argument_list|,
literal|"0"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb1"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello3"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|,
literal|"a_f"
argument_list|,
literal|"3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb2"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello4"
argument_list|,
literal|"a_i"
argument_list|,
literal|"4"
argument_list|,
literal|"a_f"
argument_list|,
literal|"4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb3"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"4444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"7777"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_s"
argument_list|,
literal|"hello1"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|,
literal|"a_f"
argument_list|,
literal|"1"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"s_multi"
argument_list|,
literal|"bbbb4"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"44444"
argument_list|,
literal|"i_multi"
argument_list|,
literal|"77777"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"collection1"
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|Tuple
name|t
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"commit"
argument_list|,
name|CommitStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"daemon"
argument_list|,
name|DaemonStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Copy all docs to destinationCollection
name|String
name|updateExpression
init|=
literal|"daemon(commit(parallelDestinationCollection1, batchSize=0, zkHost=\""
operator|+
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
operator|+
literal|"\", update(parallelDestinationCollection1, batchSize=2, search(collection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_f asc, a_i asc\", partitionKeys=\"a_f\"))), runInterval=\"1000\", id=\"test\")"
decl_stmt|;
name|TupleStream
name|parallelUpdateStream
init|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"parallel(collection1, "
operator|+
name|updateExpression
operator|+
literal|", workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"batchNumber asc\")"
argument_list|)
decl_stmt|;
name|parallelUpdateStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|parallelUpdateStream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
comment|//Lets sleep long enough for daemon updates to run.
comment|//Lets stop the daemons
name|ModifiableSolrParams
name|sParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|(
name|StreamingTest
operator|.
name|mapParams
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|,
literal|"action"
argument_list|,
literal|"list"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|workersComplete
init|=
literal|0
decl_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|int
name|iterations
init|=
literal|0
decl_stmt|;
name|INNER
label|:
while|while
condition|(
name|iterations
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|long
name|l
init|=
name|tupleResponse
operator|.
name|getLong
argument_list|(
literal|"iterations"
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
condition|)
block|{
operator|++
name|workersComplete
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{               }
block|}
name|iterations
operator|=
operator|(
name|int
operator|)
name|l
expr_stmt|;
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|workersComplete
argument_list|)
expr_stmt|;
comment|//Lets stop the daemons
name|sParams
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"stop"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"id"
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|sParams
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
name|CommonParams
operator|.
name|QT
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|sParams
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"list"
argument_list|)
expr_stmt|;
name|workersComplete
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|JettySolrRunner
name|jetty
range|:
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
control|)
block|{
name|long
name|stopTime
init|=
literal|0
decl_stmt|;
name|INNER
label|:
while|while
condition|(
name|stopTime
operator|==
literal|0
condition|)
block|{
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|jetty
operator|.
name|getBaseUrl
argument_list|()
operator|+
literal|"/collection1"
argument_list|,
name|sParams
argument_list|)
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|Tuple
name|tupleResponse
init|=
name|solrStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tupleResponse
operator|.
name|EOF
condition|)
block|{
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
break|break
name|INNER
break|;
block|}
else|else
block|{
name|stopTime
operator|=
name|tupleResponse
operator|.
name|getLong
argument_list|(
literal|"stopTime"
argument_list|)
expr_stmt|;
if|if
condition|(
name|stopTime
operator|>
literal|0
condition|)
block|{
operator|++
name|workersComplete
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{                }
block|}
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|assertEquals
argument_list|(
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|workersComplete
argument_list|)
expr_stmt|;
comment|//Ensure that destinationCollection actually has the new docs.
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(parallelDestinationCollection1, q=*:*, fl=\"id,a_s,a_i,a_f,s_multi,i_multi\", sort=\"a_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello0"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|0
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa"
argument_list|,
literal|"bbbb"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|1
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|1.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa4"
argument_list|,
literal|"bbbb4"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|2
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|0.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa1"
argument_list|,
literal|"bbbb1"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"44"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"77"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello3"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|3
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|3.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa2"
argument_list|,
literal|"bbbb2"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"777"
argument_list|)
argument_list|)
expr_stmt|;
name|tuple
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"id"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|get
argument_list|(
literal|"a_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello4"
argument_list|)
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getLong
argument_list|(
literal|"a_i"
argument_list|)
operator|==
literal|4
operator|)
assert|;
assert|assert
operator|(
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"a_f"
argument_list|)
operator|==
literal|4.0
operator|)
assert|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getStrings
argument_list|(
literal|"s_multi"
argument_list|)
argument_list|,
literal|"aaaa3"
argument_list|,
literal|"bbbb3"
argument_list|)
expr_stmt|;
name|assertList
argument_list|(
name|tuple
operator|.
name|getLongs
argument_list|(
literal|"i_multi"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"4444"
argument_list|)
argument_list|,
name|Long
operator|.
name|parseLong
argument_list|(
literal|"7777"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"parallelDestinationCollection1"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
comment|////////////////////////////////////////////
annotation|@
name|Test
DECL|method|testIntersectStream
specifier|public
name|void
name|testIntersectStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"intersect"
argument_list|,
name|IntersectStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"intersect("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\"),"
operator|+
literal|"on=\"a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|IntersectStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testClassifyStream
specifier|public
name|void
name|testClassifyStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"modelCollection"
argument_list|,
literal|"ml"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"modelCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"uknownCollection"
argument_list|,
literal|"ml"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"uknownCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"checkpointCollection"
argument_list|,
literal|"ml"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"checkpointCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"tv_text"
argument_list|,
literal|"a b c c d"
argument_list|,
literal|"out_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|"tv_text"
argument_list|,
literal|"a b e e f"
argument_list|,
literal|"out_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|updateRequest
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"text_s"
argument_list|,
literal|"a b c c d"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"text_s"
argument_list|,
literal|"a b e e f"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"uknownCollection"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|TupleStream
name|updateTrainModelStream
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"modelCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"uknownCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"features"
argument_list|,
name|FeaturesSelectionStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"train"
argument_list|,
name|TextLogitStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// train the model
name|String
name|textLogitExpression
init|=
literal|"train("
operator|+
literal|"collection1, "
operator|+
literal|"features(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4),"
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"name=\"model\", "
operator|+
literal|"field=\"tv_text\", "
operator|+
literal|"outcome=\"out_i\", "
operator|+
literal|"maxIterations=100)"
decl_stmt|;
name|updateTrainModelStream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"update(modelCollection, batchSize=5, "
operator|+
name|textLogitExpression
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|updateTrainModelStream
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"modelCollection"
argument_list|)
expr_stmt|;
comment|// classify unknown documents
name|String
name|expr
init|=
literal|"classify("
operator|+
literal|"model(modelCollection, id=\"model\", cacheMillis=5000),"
operator|+
literal|"topic(checkpointCollection, uknownCollection, q=\"*:*\", fl=\"text_s, id\", id=\"1000000\", initialCheckpoint=\"0\"),"
operator|+
literal|"field=\"text_s\","
operator|+
literal|"analyzerField=\"tv_text\")"
decl_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|SolrStream
name|classifyStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|idToLabel
init|=
name|getIdToLabel
argument_list|(
name|classifyStream
argument_list|,
literal|"probability_d"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|idToLabel
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"0"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"1"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|// Add more documents and classify it
name|updateRequest
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|"text_s"
argument_list|,
literal|"a b c c d"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|"text_s"
argument_list|,
literal|"a b e e f"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"uknownCollection"
argument_list|)
expr_stmt|;
name|classifyStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|idToLabel
operator|=
name|getIdToLabel
argument_list|(
name|classifyStream
argument_list|,
literal|"probability_d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idToLabel
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"2"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"3"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|// Train another model
name|updateRequest
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|updateRequest
operator|.
name|deleteByQuery
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|updateRequest
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"tv_text"
argument_list|,
literal|"a b c c d"
argument_list|,
literal|"out_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|"tv_text"
argument_list|,
literal|"a b e e f"
argument_list|,
literal|"out_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|updateTrainModelStream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"update(modelCollection, batchSize=5, "
operator|+
name|textLogitExpression
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|updateTrainModelStream
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"modelCollection"
argument_list|)
expr_stmt|;
comment|// Add more documents and classify it
name|updateRequest
operator|=
operator|new
name|UpdateRequest
argument_list|()
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|"text_s"
argument_list|,
literal|"a b c c d"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|"text_s"
argument_list|,
literal|"a b e e f"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"uknownCollection"
argument_list|)
expr_stmt|;
comment|//Sleep for 5 seconds to let model cache expire
name|Thread
operator|.
name|sleep
argument_list|(
literal|5100
argument_list|)
expr_stmt|;
name|classifyStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|idToLabel
operator|=
name|getIdToLabel
argument_list|(
name|classifyStream
argument_list|,
literal|"probability_d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idToLabel
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"4"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"5"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
comment|//Classify in parallel
comment|// classify unknown documents
name|expr
operator|=
literal|"parallel(collection1, workers=2, sort=\"_version_ asc\", classify("
operator|+
literal|"model(modelCollection, id=\"model\"),"
operator|+
literal|"topic(checkpointCollection, uknownCollection, q=\"id:(4 5)\", fl=\"text_s, id, _version_\", id=\"2000000\", partitionKeys=\"id\", initialCheckpoint=\"0\"),"
operator|+
literal|"field=\"text_s\","
operator|+
literal|"analyzerField=\"tv_text\"))"
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|classifyStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|idToLabel
operator|=
name|getIdToLabel
argument_list|(
name|classifyStream
argument_list|,
literal|"probability_d"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|idToLabel
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"4"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1.0
argument_list|,
name|idToLabel
operator|.
name|get
argument_list|(
literal|"5"
argument_list|)
argument_list|,
literal|0.001
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"modelCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"uknownCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"checkpointCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCalculatorStream
specifier|public
name|void
name|testCalculatorStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expr
init|=
literal|"select(calc(), add(1, 1) as result)"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getLong
argument_list|(
literal|"result"
argument_list|)
operator|.
name|equals
argument_list|(
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testAnalyzeEvaluator
specifier|public
name|void
name|testAnalyzeEvaluator
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
try|try
block|{
name|String
name|expr
init|=
literal|"cartesianProduct(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id, test_t\", sort=\"id desc\"), analyze(test_t, test_t) as test_t)"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Try with single param
name|expr
operator|=
literal|"cartesianProduct(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id, test_t\", sort=\"id desc\"), analyze(test_t) as test_t)"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|=
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Try with null in the test_t field
name|expr
operator|=
literal|"cartesianProduct(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id\", sort=\"id desc\"), analyze(test_t, test_t) as test_t)"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|//Test annotating tuple
name|expr
operator|=
literal|"select(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id, test_t\", sort=\"id desc\"), analyze(test_t, test_t) as test1_t)"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|List
name|l
init|=
operator|(
name|List
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"test1_t"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|l
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testEchoStream
specifier|public
name|void
name|testEchoStream
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|expr
init|=
literal|"echo(hello world)"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|TupleStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"echo(\"hello world\")"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello world"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"echo(\"hello, world\")"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello, world"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"echo(\"hello, \\\"t\\\" world\")"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello, \"t\" world"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"echo asc\", echo(\"hello, \\\"t\\\" world\"))"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello, \"t\" world"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello, \"t\" world"
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"echo(\"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi"
operator|+
literal|" yiuyiuyi yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy\")"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"echo"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"tuytuy iuyiuyi iuyiuyiu iuyiuyiuyiu iuyi iuyiyiuy iuyiuyiu iyiuyiu iyiuyiuyyiyiu yiuyiuyi yiuyiuyi "
operator|+
literal|"yiuyiuuyiu yiyiuyiyiu iyiuyiuyiuiuyiu yiuyiuyi yiuyiy yiuiyiuiuy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testEvalStream
specifier|public
name|void
name|testEvalStream
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"hello"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|expr
init|=
literal|"eval(select(echo(\"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\\\"*:*\\\", fl=id, sort=\\\"id desc\\\")\"), echo as expr_s))"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|TupleStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testListStream
specifier|public
name|void
name|testListStream
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"hello"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"hello1"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"hello2"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|expr1
init|=
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:hello\",  fl=id, sort=\"id desc\")"
decl_stmt|;
name|String
name|expr2
init|=
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:hello1\", fl=id, sort=\"id desc\")"
decl_stmt|;
name|String
name|expr3
init|=
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"id:hello2\", fl=id, sort=\"id desc\")"
decl_stmt|;
name|String
name|cat
init|=
literal|"list("
operator|+
name|expr1
operator|+
literal|","
operator|+
name|expr2
operator|+
literal|","
operator|+
name|expr3
operator|+
literal|")"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|cat
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|TupleStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|String
name|s
init|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|(
name|String
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|s
operator|.
name|equals
argument_list|(
literal|"hello2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testCellStream
specifier|public
name|void
name|testCellStream
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"hello"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c e"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"hello1"
argument_list|,
literal|"test_t"
argument_list|,
literal|"l b c d c"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|String
name|expr
init|=
literal|"search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", fl=\"id,test_t\", sort=\"id desc\")"
decl_stmt|;
name|String
name|cat
init|=
literal|"cell(results,"
operator|+
name|expr
operator|+
literal|")"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|cat
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|TupleStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|Map
argument_list|>
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"results"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l b c d c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"test_t"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l b c d c e"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testConvertEvaluator
specifier|public
name|void
name|testConvertEvaluator
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"miles_i"
argument_list|,
literal|"50"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"miles_i"
argument_list|,
literal|"70"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
comment|//Test annotating tuple
name|String
name|expr
init|=
literal|"select(calc(), convert(miles, kilometers, 10) as kilometers)"
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/"
operator|+
name|COLLECTIONORALIAS
decl_stmt|;
name|TupleStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|double
name|d
init|=
operator|(
name|double
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"kilometers"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
call|(
name|double
call|)
argument_list|(
literal|10
operator|*
literal|1.61
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"select(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", sort=\"miles_i asc\", fl=\"miles_i\"), convert(miles, kilometers, miles_i) as kilometers)"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|d
operator|=
operator|(
name|double
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"kilometers"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
call|(
name|double
call|)
argument_list|(
literal|50
operator|*
literal|1.61
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
operator|(
name|double
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"kilometers"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
call|(
name|double
call|)
argument_list|(
literal|70
operator|*
literal|1.61
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"parallel("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", workers=2, sort=\"miles_i asc\", select(search("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", partitionKeys=miles_i, sort=\"miles_i asc\", fl=\"miles_i\"), convert(miles, kilometers, miles_i) as kilometers))"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|d
operator|=
operator|(
name|double
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"kilometers"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
call|(
name|double
call|)
argument_list|(
literal|50
operator|*
literal|1.61
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|=
operator|(
name|double
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"kilometers"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
call|(
name|double
call|)
argument_list|(
literal|70
operator|*
literal|1.61
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|=
literal|"select(stats("
operator|+
name|COLLECTIONORALIAS
operator|+
literal|", q=\"*:*\", sum(miles_i)), convert(miles, kilometers, sum(miles_i)) as kilometers)"
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|StreamContext
argument_list|()
expr_stmt|;
name|solrStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|d
operator|=
operator|(
name|double
operator|)
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"kilometers"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|d
operator|==
call|(
name|double
call|)
argument_list|(
literal|120
operator|*
literal|1.61
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testExecutorStream
specifier|public
name|void
name|testExecutorStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"workQueue"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"workQueue"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"mainCorpus"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"mainCorpus"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"destination"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"destination"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|UpdateRequest
name|workRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|UpdateRequest
name|dataRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|workRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"expr_s"
argument_list|,
literal|"update(destination, batchSize=50, search(mainCorpus, q=id:"
operator|+
name|i
operator|+
literal|", rows=1, sort=\"id asc\", fl=\"id, body_t, field_i\"))"
argument_list|)
expr_stmt|;
name|dataRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"body_t"
argument_list|,
literal|"hello world "
operator|+
name|i
argument_list|,
literal|"field_i"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|workRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"workQueue"
argument_list|)
expr_stmt|;
name|dataRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"mainCorpus"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/destination"
decl_stmt|;
name|TupleStream
name|executorStream
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"workQueue"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"mainCorpus"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destination"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"executor"
argument_list|,
name|ExecutorStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|executorExpression
init|=
literal|"executor(threads=3, search(workQueue, q=\"*:*\", fl=\"id, expr_s\", rows=1000, sort=\"id desc\"))"
decl_stmt|;
name|executorStream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|executorExpression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|clientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|clientCache
argument_list|)
expr_stmt|;
name|executorStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|executorStream
argument_list|)
expr_stmt|;
comment|//Destination collection should now contain all the records in the main corpus.
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"destination"
argument_list|)
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
literal|"search(destination, q=\"*:*\", fl=\"id, body_t, field_i\", rows=1000, sort=\"field_i asc\")"
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|ivalue
init|=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
decl_stmt|;
name|String
name|body
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"body_t"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ivalue
operator|==
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|equals
argument_list|(
literal|"hello world "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"workQueue"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"mainCorpus"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"destination"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testParallelExecutorStream
specifier|public
name|void
name|testParallelExecutorStream
parameter_list|()
throws|throws
name|Exception
block|{
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"workQueue"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"workQueue"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"mainCorpus"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"mainCorpus"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"destination"
argument_list|,
literal|"conf"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"destination"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|UpdateRequest
name|workRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
name|UpdateRequest
name|dataRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|workRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"expr_s"
argument_list|,
literal|"update(destination, batchSize=50, search(mainCorpus, q=id:"
operator|+
name|i
operator|+
literal|", rows=1, sort=\"id asc\", fl=\"id, body_t, field_i\"))"
argument_list|)
expr_stmt|;
name|dataRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"body_t"
argument_list|,
literal|"hello world "
operator|+
name|i
argument_list|,
literal|"field_i"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|workRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"workQueue"
argument_list|)
expr_stmt|;
name|dataRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
literal|"mainCorpus"
argument_list|)
expr_stmt|;
name|String
name|url
init|=
name|cluster
operator|.
name|getJettySolrRunners
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getBaseUrl
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"/destination"
decl_stmt|;
name|TupleStream
name|executorStream
decl_stmt|;
name|ModifiableSolrParams
name|paramsLoc
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"workQueue"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"mainCorpus"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destination"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"executor"
argument_list|,
name|ExecutorStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|executorExpression
init|=
literal|"parallel(workQueue, workers=2, sort=\"EOF asc\", executor(threads=3, queueSize=100, search(workQueue, q=\"*:*\", fl=\"id, expr_s\", rows=1000, partitionKeys=id, sort=\"id desc\")))"
decl_stmt|;
name|executorStream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|executorExpression
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|clientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|clientCache
argument_list|)
expr_stmt|;
name|executorStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|executorStream
argument_list|)
expr_stmt|;
comment|//Destination collection should now contain all the records in the main corpus.
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"destination"
argument_list|)
expr_stmt|;
name|paramsLoc
operator|=
operator|new
name|ModifiableSolrParams
argument_list|()
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"expr"
argument_list|,
literal|"search(destination, q=\"*:*\", fl=\"id, body_t, field_i\", rows=1000, sort=\"field_i asc\")"
argument_list|)
expr_stmt|;
name|paramsLoc
operator|.
name|set
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|url
argument_list|,
name|paramsLoc
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|Tuple
name|tuple
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|ivalue
init|=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"field_i"
argument_list|)
decl_stmt|;
name|String
name|body
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"body_t"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ivalue
operator|==
name|i
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|body
operator|.
name|equals
argument_list|(
literal|"hello world "
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|solrStream
operator|.
name|close
argument_list|()
expr_stmt|;
name|clientCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"workQueue"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"mainCorpus"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"destination"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|getIdToLabel
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|getIdToLabel
parameter_list|(
name|TupleStream
name|stream
parameter_list|,
name|String
name|outField
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Double
argument_list|>
name|idToLabel
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|idToLabel
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
argument_list|,
name|tuple
operator|.
name|getDouble
argument_list|(
name|outField
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|idToLabel
return|;
block|}
annotation|@
name|Test
DECL|method|testBasicTextLogitStream
specifier|public
name|void
name|testBasicTextLogitStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"destinationCollection"
argument_list|,
literal|"ml"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"tv_text"
argument_list|,
literal|"a b c c d"
argument_list|,
literal|"out_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|"tv_text"
argument_list|,
literal|"a b e e f"
argument_list|,
literal|"out_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"features"
argument_list|,
name|FeaturesSelectionStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"train"
argument_list|,
name|TextLogitStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"features(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4)"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|FeaturesSelectionStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
name|terms
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|terms
operator|.
name|contains
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|textLogitExpression
init|=
literal|"train("
operator|+
literal|"collection1, "
operator|+
literal|"features(collection1, q=\"*:*\", featureSet=\"first\", field=\"tv_text\", outcome=\"out_i\", numTerms=4),"
operator|+
literal|"q=\"*:*\", "
operator|+
literal|"name=\"model\", "
operator|+
literal|"field=\"tv_text\", "
operator|+
literal|"outcome=\"out_i\", "
operator|+
literal|"maxIterations=100)"
decl_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|textLogitExpression
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|Tuple
name|lastTuple
init|=
name|tuples
operator|.
name|get
argument_list|(
name|tuples
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|lastWeights
init|=
name|lastTuple
operator|.
name|getDoubles
argument_list|(
literal|"weights_ds"
argument_list|)
decl_stmt|;
name|Double
index|[]
name|lastWeightsArray
init|=
name|lastWeights
operator|.
name|toArray
argument_list|(
operator|new
name|Double
index|[
name|lastWeights
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
comment|// first feature is bias value
name|Double
index|[]
name|testRecord
init|=
block|{
literal|1.0
block|,
literal|1.17
block|,
literal|0.691
block|,
literal|0.0
block|,
literal|0.0
block|}
decl_stmt|;
name|double
name|d
init|=
name|sum
argument_list|(
name|multiply
argument_list|(
name|testRecord
argument_list|,
name|lastWeightsArray
argument_list|)
argument_list|)
decl_stmt|;
name|double
name|prob
init|=
name|sigmoid
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|prob
argument_list|,
literal|1.0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
comment|// first feature is bias value
name|Double
index|[]
name|testRecord2
init|=
block|{
literal|1.0
block|,
literal|0.0
block|,
literal|0.0
block|,
literal|1.17
block|,
literal|0.691
block|}
decl_stmt|;
name|d
operator|=
name|sum
argument_list|(
name|multiply
argument_list|(
name|testRecord2
argument_list|,
name|lastWeightsArray
argument_list|)
argument_list|)
expr_stmt|;
name|prob
operator|=
name|sigmoid
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|prob
argument_list|,
literal|0
argument_list|,
literal|0.1
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"update(destinationCollection, batchSize=5, "
operator|+
name|textLogitExpression
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"destinationCollection"
argument_list|)
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"search(destinationCollection, "
operator|+
literal|"q=*:*, "
operator|+
literal|"fl=\"iteration_i,* \", "
operator|+
literal|"rows=100, "
operator|+
literal|"sort=\"iteration_i desc\")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Tuple
name|lastModel
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ClassificationEvaluation
name|evaluation
init|=
name|ClassificationEvaluation
operator|.
name|create
argument_list|(
name|lastModel
operator|.
name|fields
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|evaluation
operator|.
name|getF1
argument_list|()
operator|>=
literal|1.0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|log
argument_list|(
literal|5000.0
operator|/
operator|(
literal|2500
operator|+
literal|1
operator|)
argument_list|)
argument_list|,
name|lastModel
operator|.
name|getDoubles
argument_list|(
literal|"idfs_ds"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
comment|// make sure the tuples is retrieved in correct order
name|Tuple
name|firstTuple
init|=
name|tuples
operator|.
name|get
argument_list|(
literal|99
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|firstTuple
operator|.
name|getLong
argument_list|(
literal|"iteration_i"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"destinationCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|sigmoid
specifier|private
name|double
name|sigmoid
parameter_list|(
name|double
name|in
parameter_list|)
block|{
name|double
name|d
init|=
literal|1.0
operator|/
operator|(
literal|1
operator|+
name|Math
operator|.
name|exp
argument_list|(
operator|-
name|in
argument_list|)
operator|)
decl_stmt|;
return|return
name|d
return|;
block|}
DECL|method|multiply
specifier|private
name|double
index|[]
name|multiply
parameter_list|(
name|Double
index|[]
name|vec1
parameter_list|,
name|Double
index|[]
name|vec2
parameter_list|)
block|{
name|double
index|[]
name|working
init|=
operator|new
name|double
index|[
name|vec1
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vec1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|working
index|[
name|i
index|]
operator|=
name|vec1
index|[
name|i
index|]
operator|*
name|vec2
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|working
return|;
block|}
DECL|method|sum
specifier|private
name|double
name|sum
parameter_list|(
name|double
index|[]
name|vec
parameter_list|)
block|{
name|double
name|d
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|double
name|v
range|:
name|vec
control|)
block|{
name|d
operator|+=
name|v
expr_stmt|;
block|}
return|return
name|d
return|;
block|}
annotation|@
name|Test
DECL|method|testParallelIntersectStream
specifier|public
name|void
name|testParallelIntersectStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"intersect"
argument_list|,
name|IntersectStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// basic
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
specifier|final
name|TupleStream
name|stream
init|=
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
literal|"collection1, "
operator|+
literal|"intersect("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"on=\"a_i\"),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i asc\")"
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|5
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|,
literal|3
argument_list|,
literal|4
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testFeaturesSelectionStream
specifier|public
name|void
name|testFeaturesSelectionStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Assume
operator|.
name|assumeTrue
argument_list|(
operator|!
name|useAlias
argument_list|)
expr_stmt|;
name|CollectionAdminRequest
operator|.
name|createCollection
argument_list|(
literal|"destinationCollection"
argument_list|,
literal|"ml"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|AbstractDistribZkTestBase
operator|.
name|waitForRecoveriesToFinish
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|getZkStateReader
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|+=
literal|2
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|,
literal|"whitetok"
argument_list|,
literal|"a b c d"
argument_list|,
literal|"out_i"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
literal|"whitetok"
argument_list|,
literal|"a b e f"
argument_list|,
literal|"out_i"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withCollectionZkHost
argument_list|(
literal|"destinationCollection"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"featuresSelection"
argument_list|,
name|FeaturesSelectionStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"update"
argument_list|,
name|UpdateStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|featuresExpression
init|=
literal|"featuresSelection(collection1, q=\"*:*\", featureSet=\"first\", field=\"whitetok\", outcome=\"out_i\", numTerms=4)"
decl_stmt|;
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
name|featuresExpression
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|FeaturesSelectionStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|4
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
comment|// update
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"update(destinationCollection, batchSize=5, "
operator|+
name|featuresExpression
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|UpdateStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|cluster
operator|.
name|getSolrClient
argument_list|()
operator|.
name|commit
argument_list|(
literal|"destinationCollection"
argument_list|)
expr_stmt|;
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"search(destinationCollection, q=featureSet_s:first, fl=\"index_i, term_s\", sort=\"index_i asc\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|CloudSolrStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"term_s"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"f"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|CollectionAdminRequest
operator|.
name|deleteCollection
argument_list|(
literal|"destinationCollection"
argument_list|)
operator|.
name|process
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|)
expr_stmt|;
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSignificantTermsStream
specifier|public
name|void
name|testSignificantTermsStream
parameter_list|()
throws|throws
name|Exception
block|{
name|UpdateRequest
name|updateRequest
init|=
operator|new
name|UpdateRequest
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"a"
operator|+
name|i
argument_list|,
literal|"test_t"
argument_list|,
literal|"a b c d m l"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5000
condition|;
name|i
operator|++
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"b"
operator|+
name|i
argument_list|,
literal|"test_t"
argument_list|,
literal|"a b e f"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|900
condition|;
name|i
operator|++
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"c"
operator|+
name|i
argument_list|,
literal|"test_t"
argument_list|,
literal|"c"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|600
condition|;
name|i
operator|++
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"d"
operator|+
name|i
argument_list|,
literal|"test_t"
argument_list|,
literal|"d"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
name|i
operator|++
control|)
block|{
name|updateRequest
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"e"
operator|+
name|i
argument_list|,
literal|"test_t"
argument_list|,
literal|"m"
argument_list|)
expr_stmt|;
block|}
name|updateRequest
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withDefaultZkHost
argument_list|(
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"significantTerms"
argument_list|,
name|SignificantTermsStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|cache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|significantTerms
init|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=3, minTermLength=1, maxDocFreq=\".5\")"
decl_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5600
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Test maxDocFreq
name|significantTerms
operator|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=3, maxDocFreq=2650, minTermLength=1)"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Test maxDocFreq percentage
name|significantTerms
operator|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=3, maxDocFreq=\".45\", minTermLength=1)"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"l"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Test min doc freq
name|significantTerms
operator|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=3, minDocFreq=\"2700\", minTermLength=1, maxDocFreq=\".5\")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|3
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5600
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5900
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Test min doc freq percent
name|significantTerms
operator|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=3, minDocFreq=\".478\", minTermLength=1, maxDocFreq=\".5\")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5900
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Test limit
name|significantTerms
operator|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=2, minDocFreq=\"2700\", minTermLength=1, maxDocFreq=\".5\")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5600
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Test term length
name|significantTerms
operator|=
literal|"significantTerms(collection1, q=\"id:a*\",  field=\"test_t\", limit=2, minDocFreq=\"2700\", minTermLength=2)"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
assert|;
comment|//Test with shards parameter
name|List
argument_list|<
name|String
argument_list|>
name|shardUrls
init|=
name|TupleStream
operator|.
name|getShards
argument_list|(
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|,
name|streamContext
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|shardsMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|shardsMap
operator|.
name|put
argument_list|(
literal|"myCollection"
argument_list|,
name|shardUrls
argument_list|)
expr_stmt|;
name|StreamContext
name|context
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|context
operator|.
name|put
argument_list|(
literal|"shards"
argument_list|,
name|shardsMap
argument_list|)
expr_stmt|;
name|context
operator|.
name|setSolrClientCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|significantTerms
operator|=
literal|"significantTerms(myCollection, q=\"id:a*\",  field=\"test_t\", limit=2, minDocFreq=\"2700\", minTermLength=1, maxDocFreq=\".5\")"
expr_stmt|;
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|significantTerms
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5600
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Execersise the /stream hander
comment|//Add the shards http parameter for the myCollection
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shardUrl
range|:
name|shardUrls
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|shardUrl
argument_list|)
expr_stmt|;
block|}
name|ModifiableSolrParams
name|solrParams
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
literal|"expr"
argument_list|,
name|significantTerms
argument_list|)
expr_stmt|;
name|solrParams
operator|.
name|add
argument_list|(
literal|"myCollection.shards"
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SolrStream
name|solrStream
init|=
operator|new
name|SolrStream
argument_list|(
name|shardUrls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|solrParams
argument_list|)
decl_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|2
operator|)
assert|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"m"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5500
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"term"
argument_list|)
operator|.
name|equals
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"background"
argument_list|)
operator|==
literal|5600
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getLong
argument_list|(
literal|"foreground"
argument_list|)
operator|==
literal|5000
argument_list|)
expr_stmt|;
comment|//Add a negative test to prove that it cannot find slices if shards parameter is removed
try|try
block|{
name|ModifiableSolrParams
name|solrParamsBad
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|solrParamsBad
operator|.
name|add
argument_list|(
literal|"qt"
argument_list|,
literal|"/stream"
argument_list|)
expr_stmt|;
name|solrParamsBad
operator|.
name|add
argument_list|(
literal|"expr"
argument_list|,
name|significantTerms
argument_list|)
expr_stmt|;
name|solrStream
operator|=
operator|new
name|SolrStream
argument_list|(
name|shardUrls
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|solrParamsBad
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|solrStream
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Exception should have been thrown above"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Slices not found for myCollection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testComplementStream
specifier|public
name|void
name|testComplementStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"complement"
argument_list|,
name|ComplementStream
operator|.
name|class
argument_list|)
decl_stmt|;
try|try
block|{
comment|// basic
name|expression
operator|=
name|StreamExpressionParser
operator|.
name|parse
argument_list|(
literal|"complement("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\"),"
operator|+
literal|"on=\"a_i\")"
argument_list|)
expr_stmt|;
name|stream
operator|=
operator|new
name|ComplementStream
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testCartesianProductStream
specifier|public
name|void
name|testCartesianProductStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"a"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"b"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"c"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"d"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"e"
argument_list|,
literal|"b_ls"
argument_list|,
literal|"1"
argument_list|,
literal|"b_ls"
argument_list|,
literal|"2"
argument_list|,
literal|"b_ls"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"1"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"a"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"b"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"c"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"d"
argument_list|,
literal|"a_ss"
argument_list|,
literal|"e"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamExpression
name|expression
decl_stmt|;
name|TupleStream
name|stream
decl_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|StreamFactory
name|factory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"cartesian"
argument_list|,
name|CartesianProductStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// single selection, no sort
try|try
block|{
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"cartesian("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_ss\", sort=\"id asc\"),"
operator|+
literal|"a_ss"
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
comment|// single selection, sort
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"cartesian("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_ss\", sort=\"id asc\"),"
operator|+
literal|"a_ss,"
operator|+
literal|"productSort=\"a_ss DESC\""
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
comment|// multi selection, sort
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"cartesian("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_ss,b_ls\", sort=\"id asc\"),"
operator|+
literal|"a_ss,"
operator|+
literal|"b_ls,"
operator|+
literal|"productSort=\"a_ss ASC\""
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (5 * 3) + 5
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
comment|// multi selection, sort
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"cartesian("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_ss,b_ls\", sort=\"id asc\"),"
operator|+
literal|"a_ss,"
operator|+
literal|"b_ls,"
operator|+
literal|"productSort=\"a_ss ASC, b_ls DESC\""
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (5 * 3) + 5
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
comment|// multi selection, sort
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
literal|"cartesian("
operator|+
literal|"search(collection1, q=*:*, fl=\"id,a_ss,b_ls\", sort=\"id asc\"),"
operator|+
literal|"a_ss,"
operator|+
literal|"b_ls,"
operator|+
literal|"productSort=\"b_ls DESC\""
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|tuples
operator|=
name|getTuples
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|tuples
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// (5 * 3) + 5
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"c"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"d"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"e"
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|.
name|get
argument_list|(
literal|"a_ss"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|tuples
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|.
name|get
argument_list|(
literal|"b_ls"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testParallelComplementStream
specifier|public
name|void
name|testParallelComplementStream
parameter_list|()
throws|throws
name|Exception
block|{
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"0"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"2"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"1"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"3"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"4"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setA"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"5"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"2"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"6"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"3"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"9"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"5"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"7"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"0"
argument_list|)
operator|.
name|add
argument_list|(
name|id
argument_list|,
literal|"8"
argument_list|,
literal|"a_s"
argument_list|,
literal|"setAB"
argument_list|,
literal|"a_i"
argument_list|,
literal|"6"
argument_list|)
operator|.
name|commit
argument_list|(
name|cluster
operator|.
name|getSolrClient
argument_list|()
argument_list|,
name|COLLECTIONORALIAS
argument_list|)
expr_stmt|;
name|StreamFactory
name|streamFactory
init|=
operator|new
name|StreamFactory
argument_list|()
operator|.
name|withCollectionZkHost
argument_list|(
literal|"collection1"
argument_list|,
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"search"
argument_list|,
name|CloudSolrStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"complement"
argument_list|,
name|ComplementStream
operator|.
name|class
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"parallel"
argument_list|,
name|ParallelStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|SolrClientCache
name|solrClientCache
init|=
operator|new
name|SolrClientCache
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|String
name|zkHost
init|=
name|cluster
operator|.
name|getZkServer
argument_list|()
operator|.
name|getZkAddress
argument_list|()
decl_stmt|;
specifier|final
name|TupleStream
name|stream
init|=
name|streamFactory
operator|.
name|constructStream
argument_list|(
literal|"parallel("
operator|+
literal|"collection1, "
operator|+
literal|"complement("
operator|+
literal|"search(collection1, q=a_s:(setA || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc, a_s asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"search(collection1, q=a_s:(setB || setAB), fl=\"id,a_s,a_i\", sort=\"a_i asc\", partitionKeys=\"a_i\"),"
operator|+
literal|"on=\"a_i\"),"
operator|+
literal|"workers=\"2\", zkHost=\""
operator|+
name|zkHost
operator|+
literal|"\", sort=\"a_i asc\")"
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
name|getTuples
argument_list|(
name|stream
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|)
assert|;
name|assertOrder
argument_list|(
name|tuples
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|solrClientCache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|getTuples
specifier|protected
name|List
argument_list|<
name|Tuple
argument_list|>
name|getTuples
parameter_list|(
name|TupleStream
name|tupleStream
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|<
name|Tuple
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|tupleStream
operator|.
name|open
argument_list|()
expr_stmt|;
for|for
control|(
name|Tuple
name|t
init|=
name|tupleStream
operator|.
name|read
argument_list|()
init|;
operator|!
name|t
operator|.
name|EOF
condition|;
name|t
operator|=
name|tupleStream
operator|.
name|read
argument_list|()
control|)
block|{
name|tuples
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|tupleStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|tuples
return|;
block|}
DECL|method|assertOrder
specifier|protected
name|boolean
name|assertOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|assertOrderOf
argument_list|(
name|tuples
argument_list|,
literal|"id"
argument_list|,
name|ids
argument_list|)
return|;
block|}
DECL|method|assertOrderOf
specifier|protected
name|boolean
name|assertOrderOf
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|tip
init|=
name|t
operator|.
name|getString
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMapOrder
specifier|protected
name|boolean
name|assertMapOrder
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Tuple
name|t
init|=
name|tuples
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Map
argument_list|>
name|tip
init|=
name|t
operator|.
name|getMaps
argument_list|(
literal|"group"
argument_list|)
decl_stmt|;
name|int
name|id
init|=
operator|(
name|int
operator|)
name|tip
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|id
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertFields
specifier|protected
name|boolean
name|assertFields
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
operator|!
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Expected field '%s' not found"
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertNotFields
specifier|protected
name|boolean
name|assertNotFields
parameter_list|(
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
parameter_list|,
name|String
modifier|...
name|fields
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Tuple
name|tuple
range|:
name|tuples
control|)
block|{
for|for
control|(
name|String
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|field
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unexpected field '%s' found"
argument_list|,
name|field
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertGroupOrder
specifier|protected
name|boolean
name|assertGroupOrder
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|?
argument_list|>
name|group
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"tuples"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|t
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|group
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Long
name|tip
init|=
operator|(
name|Long
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tip
operator|.
name|intValue
argument_list|()
operator|!=
name|val
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|.
name|intValue
argument_list|()
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertLong
specifier|public
name|boolean
name|assertLong
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|long
name|l
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|lv
init|=
operator|(
name|long
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
operator|!=
name|l
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|l
operator|+
literal|" : "
operator|+
name|lv
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertString
specifier|public
name|boolean
name|assertString
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|actual
init|=
operator|(
name|String
operator|)
name|tuple
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|null
operator|==
name|expected
operator|&&
literal|null
operator|!=
name|actual
operator|)
operator|||
operator|(
literal|null
operator|!=
name|expected
operator|&&
literal|null
operator|==
name|actual
operator|)
operator|||
operator|(
literal|null
operator|!=
name|expected
operator|&&
operator|!
name|expected
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Longs not equal:"
operator|+
name|expected
operator|+
literal|" : "
operator|+
name|actual
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertMaps
specifier|protected
name|boolean
name|assertMaps
parameter_list|(
name|List
argument_list|<
name|Map
argument_list|>
name|maps
parameter_list|,
name|int
modifier|...
name|ids
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|maps
operator|.
name|size
argument_list|()
operator|!=
name|ids
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expected id count != actual map count:"
operator|+
name|ids
operator|.
name|length
operator|+
literal|":"
operator|+
name|maps
operator|.
name|size
argument_list|()
argument_list|)
throw|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|val
range|:
name|ids
control|)
block|{
name|Map
name|t
init|=
name|maps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|tip
init|=
operator|(
name|String
operator|)
name|t
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tip
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|val
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Found value:"
operator|+
name|tip
operator|+
literal|" expecting:"
operator|+
name|val
argument_list|)
throw|;
block|}
operator|++
name|i
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertList
specifier|private
name|boolean
name|assertList
parameter_list|(
name|List
name|list
parameter_list|,
name|Object
modifier|...
name|vals
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|vals
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Lists are not the same size:"
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" : "
operator|+
name|vals
operator|.
name|length
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|a
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|b
init|=
name|vals
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"List items not equals:"
operator|+
name|a
operator|+
literal|" : "
operator|+
name|b
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|assertTopicRun
specifier|private
name|void
name|assertTopicRun
parameter_list|(
name|TupleStream
name|stream
parameter_list|,
name|String
modifier|...
name|idArray
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|idArray
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
operator|++
name|count
expr_stmt|;
name|String
name|id
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expecting id in topic run not found:"
operator|+
name|id
argument_list|)
throw|;
block|}
name|long
name|v
init|=
name|tuple
operator|.
name|getLong
argument_list|(
literal|"_version_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|<
name|version
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Out of order version in topic run:"
operator|+
name|v
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|!=
name|ids
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Wrong count in topic run:"
operator|+
name|count
argument_list|)
throw|;
block|}
block|}
DECL|method|assertTopicSubject
specifier|private
name|void
name|assertTopicSubject
parameter_list|(
name|TupleStream
name|stream
parameter_list|,
name|String
modifier|...
name|textArray
parameter_list|)
throws|throws
name|Exception
block|{
name|long
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|texts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|text
range|:
name|textArray
control|)
block|{
name|texts
operator|.
name|add
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|tuple
init|=
name|stream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
operator|++
name|count
expr_stmt|;
name|String
name|subject
init|=
name|tuple
operator|.
name|getString
argument_list|(
literal|"subject"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|texts
operator|.
name|contains
argument_list|(
name|subject
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"Expecting subject in topic run not found:"
operator|+
name|subject
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

