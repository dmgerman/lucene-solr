begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|SocketException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NoHttpResponseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|SolrTestCaseJ4
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|UpdateRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_class
DECL|class|CloudSolrClientCacheTest
specifier|public
class|class
name|CloudSolrClientCacheTest
extends|extends
name|SolrTestCaseJ4
block|{
DECL|method|testCaching
specifier|public
name|void
name|testCaching
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|collName
init|=
literal|"gettingstarted"
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|livenodes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|CollectionRef
argument_list|>
name|refs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|colls
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
class|class
name|Ref
extends|extends
name|ClusterState
operator|.
name|CollectionRef
block|{
specifier|private
name|String
name|c
decl_stmt|;
specifier|public
name|Ref
parameter_list|(
name|String
name|c
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|c
operator|=
name|c
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLazilyLoaded
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocCollection
name|get
parameter_list|()
block|{
name|gets
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|colls
operator|.
name|get
argument_list|(
name|c
argument_list|)
return|;
block|}
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|responses
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|NamedList
name|okResponse
init|=
operator|new
name|NamedList
argument_list|()
decl_stmt|;
name|okResponse
operator|.
name|add
argument_list|(
literal|"responseHeader"
argument_list|,
operator|new
name|NamedList
argument_list|<>
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"status"
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LBHttpSolrClient
name|mockLbclient
init|=
name|getMockLbHttpSolrClient
argument_list|(
name|responses
argument_list|)
decl_stmt|;
name|AtomicInteger
name|lbhttpRequestCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
try|try
init|(
name|CloudSolrClient
name|cloudClient
init|=
operator|new
name|CloudSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withLBHttpSolrClient
argument_list|(
name|mockLbclient
argument_list|)
operator|.
name|withClusterStateProvider
argument_list|(
name|getStateProvider
argument_list|(
name|livenodes
argument_list|,
name|refs
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|livenodes
operator|.
name|addAll
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"192.168.1.108:7574_solr"
argument_list|,
literal|"192.168.1.108:8983_solr"
argument_list|)
argument_list|)
expr_stmt|;
name|ClusterState
name|cs
init|=
name|ClusterState
operator|.
name|load
argument_list|(
literal|1
argument_list|,
name|coll1State
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|,
literal|"/collections/gettingstarted/state.json"
argument_list|)
decl_stmt|;
name|refs
operator|.
name|put
argument_list|(
name|collName
argument_list|,
operator|new
name|Ref
argument_list|(
name|collName
argument_list|)
argument_list|)
expr_stmt|;
name|colls
operator|.
name|put
argument_list|(
name|collName
argument_list|,
name|cs
operator|.
name|getCollectionOrNull
argument_list|(
name|collName
argument_list|)
argument_list|)
expr_stmt|;
name|responses
operator|.
name|put
argument_list|(
literal|"request"
argument_list|,
name|o
lambda|->
block|{
name|int
name|i
init|=
name|lbhttpRequestCount
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|1
condition|)
return|return
operator|new
name|ConnectException
argument_list|(
literal|"TEST"
argument_list|)
return|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
return|return
operator|new
name|SocketException
argument_list|(
literal|"TEST"
argument_list|)
return|;
if|if
condition|(
name|i
operator|==
literal|3
condition|)
return|return
operator|new
name|NoHttpResponseException
argument_list|(
literal|"TEST"
argument_list|)
return|;
return|return
name|okResponse
return|;
block|}
argument_list|)
expr_stmt|;
name|UpdateRequest
name|update
init|=
operator|new
name|UpdateRequest
argument_list|()
operator|.
name|add
argument_list|(
literal|"id"
argument_list|,
literal|"123"
argument_list|,
literal|"desc"
argument_list|,
literal|"Something 0"
argument_list|)
decl_stmt|;
name|cloudClient
operator|.
name|request
argument_list|(
name|update
argument_list|,
name|collName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|refs
operator|.
name|get
argument_list|(
name|collName
argument_list|)
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getMockLbHttpSolrClient
specifier|private
name|LBHttpSolrClient
name|getMockLbHttpSolrClient
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Function
argument_list|>
name|responses
parameter_list|)
throws|throws
name|Exception
block|{
name|LBHttpSolrClient
name|mockLbclient
init|=
name|mock
argument_list|(
name|LBHttpSolrClient
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|mockLbclient
operator|.
name|request
argument_list|(
name|any
argument_list|(
name|LBHttpSolrClient
operator|.
name|Req
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|then
argument_list|(
name|invocationOnMock
lambda|->
block|{
name|LBHttpSolrClient
operator|.
name|Req
name|req
init|=
name|invocationOnMock
operator|.
name|getArgument
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Function
name|f
init|=
name|responses
operator|.
name|get
argument_list|(
literal|"request"
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Object
name|res
init|=
name|f
operator|.
name|apply
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|Exception
condition|)
throw|throw
operator|(
name|Throwable
operator|)
name|res
throw|;
name|LBHttpSolrClient
operator|.
name|Rsp
name|rsp
init|=
operator|new
name|LBHttpSolrClient
operator|.
name|Rsp
argument_list|()
decl_stmt|;
name|rsp
operator|.
name|rsp
operator|=
operator|(
name|NamedList
argument_list|<
name|Object
argument_list|>
operator|)
name|res
expr_stmt|;
name|rsp
operator|.
name|server
operator|=
name|req
operator|.
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|rsp
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|mockLbclient
return|;
block|}
DECL|method|getStateProvider
specifier|private
name|ClusterStateProvider
name|getStateProvider
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|livenodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|ClusterState
operator|.
name|CollectionRef
argument_list|>
name|colls
parameter_list|)
block|{
return|return
operator|new
name|ClusterStateProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ClusterState
operator|.
name|CollectionRef
name|getState
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
name|colls
operator|.
name|get
argument_list|(
name|collection
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|()
block|{
return|return
name|livenodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAlias
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
return|return
name|collection
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCollectionName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{        }
annotation|@
name|Override
specifier|public
name|Object
name|getClusterProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getClusterProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|def
parameter_list|)
block|{
return|return
name|def
return|;
block|}
block|}
return|;
block|}
DECL|field|coll1State
specifier|private
name|String
name|coll1State
init|=
literal|"{'gettingstarted':{\n"
operator|+
literal|"    'replicationFactor':'2',\n"
operator|+
literal|"    'router':{'name':'compositeId'},\n"
operator|+
literal|"    'maxShardsPerNode':'2',\n"
operator|+
literal|"    'autoAddReplicas':'false',\n"
operator|+
literal|"    'shards':{\n"
operator|+
literal|"      'shard1':{\n"
operator|+
literal|"        'range':'80000000-ffffffff',\n"
operator|+
literal|"        'state':'active',\n"
operator|+
literal|"        'replicas':{\n"
operator|+
literal|"          'core_node2':{\n"
operator|+
literal|"            'core':'gettingstarted_shard1_replica1',\n"
operator|+
literal|"            'base_url':'http://192.168.1.108:8983/solr',\n"
operator|+
literal|"            'node_name':'192.168.1.108:8983_solr',\n"
operator|+
literal|"            'state':'active',\n"
operator|+
literal|"            'leader':'true'},\n"
operator|+
literal|"          'core_node4':{\n"
operator|+
literal|"            'core':'gettingstarted_shard1_replica2',\n"
operator|+
literal|"            'base_url':'http://192.168.1.108:7574/solr',\n"
operator|+
literal|"            'node_name':'192.168.1.108:7574_solr',\n"
operator|+
literal|"            'state':'active'}}},\n"
operator|+
literal|"      'shard2':{\n"
operator|+
literal|"        'range':'0-7fffffff',\n"
operator|+
literal|"        'state':'active',\n"
operator|+
literal|"        'replicas':{\n"
operator|+
literal|"          'core_node1':{\n"
operator|+
literal|"            'core':'gettingstarted_shard2_replica1',\n"
operator|+
literal|"            'base_url':'http://192.168.1.108:8983/solr',\n"
operator|+
literal|"            'node_name':'192.168.1.108:8983_solr',\n"
operator|+
literal|"            'state':'active',\n"
operator|+
literal|"            'leader':'true'},\n"
operator|+
literal|"          'core_node3':{\n"
operator|+
literal|"            'core':'gettingstarted_shard2_replica2',\n"
operator|+
literal|"            'base_url':'http://192.168.1.108:7574/solr',\n"
operator|+
literal|"            'node_name':'192.168.1.108:7574_solr',\n"
operator|+
literal|"            'state':'active'}}}}}}"
decl_stmt|;
block|}
end_class

end_unit

