begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|unmodifiableSet
import|;
end_import

begin_class
DECL|class|ValidatingJsonMap
specifier|public
class|class
name|ValidatingJsonMap
implements|implements
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
DECL|field|INCLUDE
specifier|private
specifier|static
specifier|final
name|String
name|INCLUDE
init|=
literal|"#include"
decl_stmt|;
DECL|field|RESOURCE_EXTENSION
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCE_EXTENSION
init|=
literal|".json"
decl_stmt|;
DECL|field|NOT_NULL
specifier|public
specifier|static
specifier|final
name|PredicateWithErrMsg
argument_list|<
name|Object
argument_list|>
name|NOT_NULL
init|=
name|o
lambda|->
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
return|return
literal|" Must not be NULL"
return|;
return|return
literal|null
return|;
block|}
decl_stmt|;
DECL|field|ENUM_OF
specifier|public
specifier|static
specifier|final
name|PredicateWithErrMsg
argument_list|<
name|Pair
argument_list|>
name|ENUM_OF
init|=
name|pair
lambda|->
block|{
if|if
condition|(
name|pair
operator|.
name|second
argument_list|()
operator|instanceof
name|Set
condition|)
block|{
name|Set
name|set
init|=
operator|(
name|Set
operator|)
name|pair
operator|.
name|second
argument_list|()
decl_stmt|;
if|if
condition|(
name|pair
operator|.
name|first
argument_list|()
operator|instanceof
name|Collection
condition|)
block|{
for|for
control|(
name|Object
name|o
range|:
operator|(
name|Collection
operator|)
name|pair
operator|.
name|first
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|set
operator|.
name|contains
argument_list|(
name|o
argument_list|)
condition|)
block|{
return|return
literal|" Must be one of "
operator|+
name|pair
operator|.
name|second
argument_list|()
return|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|set
operator|.
name|contains
argument_list|(
name|pair
operator|.
name|first
argument_list|()
argument_list|)
condition|)
return|return
literal|" Must be one of "
operator|+
name|pair
operator|.
name|second
argument_list|()
operator|+
literal|", got "
operator|+
name|pair
operator|.
name|first
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|" Unknown type"
return|;
block|}
block|}
decl_stmt|;
DECL|field|delegate
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|delegate
decl_stmt|;
DECL|method|ValidatingJsonMap
specifier|public
name|ValidatingJsonMap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|delegate
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
DECL|method|ValidatingJsonMap
specifier|public
name|ValidatingJsonMap
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|delegate
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
DECL|method|ValidatingJsonMap
specifier|public
name|ValidatingJsonMap
parameter_list|()
block|{
name|delegate
operator|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|isEmpty
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|containsKey
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|containsValue
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|containsValue
argument_list|(
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|put
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|remove
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|remove
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|putAll
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
name|delegate
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clear
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|delegate
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|keySet
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|values
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|entrySet
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|entrySet
argument_list|()
return|;
block|}
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|PredicateWithErrMsg
name|predicate
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|predicate
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|predicate
operator|.
name|test
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
operator|+
name|key
operator|+
name|msg
argument_list|)
throw|;
block|}
block|}
return|return
name|v
return|;
block|}
DECL|method|getBool
specifier|public
name|Boolean
name|getBool
parameter_list|(
name|String
name|key
parameter_list|,
name|Boolean
name|def
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
return|return
name|def
return|;
if|if
condition|(
name|v
operator|instanceof
name|Boolean
condition|)
return|return
operator|(
name|Boolean
operator|)
name|v
return|;
try|try
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"value of "
operator|+
name|key
operator|+
literal|"must be an boolean"
argument_list|)
throw|;
block|}
block|}
DECL|method|getInt
specifier|public
name|Integer
name|getInt
parameter_list|(
name|String
name|key
parameter_list|,
name|Integer
name|def
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
return|return
name|def
return|;
if|if
condition|(
name|v
operator|instanceof
name|Integer
condition|)
return|return
operator|(
name|Integer
operator|)
name|v
return|;
try|try
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"value of "
operator|+
name|key
operator|+
literal|"must be an integer"
argument_list|)
throw|;
block|}
block|}
DECL|method|getMap
specifier|public
name|ValidatingJsonMap
name|getMap
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|getMap
argument_list|(
name|key
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getMap
specifier|public
name|ValidatingJsonMap
name|getMap
parameter_list|(
name|String
name|key
parameter_list|,
name|PredicateWithErrMsg
name|predicate
parameter_list|)
block|{
return|return
name|getMap
argument_list|(
name|key
argument_list|,
name|predicate
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getMap
specifier|public
name|ValidatingJsonMap
name|getMap
parameter_list|(
name|String
name|key
parameter_list|,
name|PredicateWithErrMsg
name|predicate
parameter_list|,
name|String
name|message
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|v
operator|instanceof
name|Map
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
operator|+
name|key
operator|+
literal|" should be of type map"
argument_list|)
throw|;
block|}
if|if
condition|(
name|predicate
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|predicate
operator|.
name|test
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
name|msg
operator|=
name|message
operator|!=
literal|null
condition|?
name|message
else|:
name|key
operator|+
name|msg
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
return|return
name|wrap
argument_list|(
operator|(
name|Map
operator|)
name|v
argument_list|)
return|;
block|}
DECL|method|getList
specifier|public
name|List
name|getList
parameter_list|(
name|String
name|key
parameter_list|,
name|PredicateWithErrMsg
name|predicate
parameter_list|)
block|{
return|return
name|getList
argument_list|(
name|key
argument_list|,
name|predicate
argument_list|,
literal|null
argument_list|)
return|;
block|}
DECL|method|getList
specifier|public
name|List
name|getList
parameter_list|(
name|String
name|key
parameter_list|,
name|PredicateWithErrMsg
name|predicate
parameter_list|,
name|Object
name|test
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|v
operator|instanceof
name|List
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
operator|+
name|key
operator|+
literal|" should be of type List"
argument_list|)
throw|;
block|}
if|if
condition|(
name|predicate
operator|!=
literal|null
condition|)
block|{
name|String
name|msg
init|=
name|predicate
operator|.
name|test
argument_list|(
name|test
operator|==
literal|null
condition|?
name|v
else|:
operator|new
name|Pair
argument_list|(
name|v
argument_list|,
name|test
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|msg
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
operator|+
name|key
operator|+
name|msg
argument_list|)
throw|;
block|}
block|}
return|return
operator|(
name|List
operator|)
name|v
return|;
block|}
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|key
parameter_list|,
name|PredicateWithErrMsg
argument_list|<
name|Pair
argument_list|>
name|predicate
parameter_list|,
name|Object
name|arg
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|test
init|=
name|predicate
operator|.
name|test
argument_list|(
operator|new
name|Pair
argument_list|(
name|v
argument_list|,
name|arg
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|""
operator|+
name|key
operator|+
name|test
argument_list|)
throw|;
block|}
return|return
name|v
return|;
block|}
DECL|method|get
specifier|public
name|Object
name|get
parameter_list|(
name|String
name|k
parameter_list|,
name|Object
name|def
parameter_list|)
block|{
name|Object
name|v
init|=
name|get
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
return|return
name|def
return|;
return|return
name|v
return|;
block|}
DECL|method|wrap
specifier|static
name|ValidatingJsonMap
name|wrap
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|map
operator|instanceof
name|ValidatingJsonMap
condition|)
block|{
return|return
operator|(
name|ValidatingJsonMap
operator|)
name|map
return|;
block|}
else|else
block|{
return|return
operator|new
name|ValidatingJsonMap
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
DECL|method|fromJSON
specifier|public
specifier|static
name|ValidatingJsonMap
name|fromJSON
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|includeLocation
parameter_list|)
block|{
return|return
name|fromJSON
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
name|includeLocation
argument_list|)
return|;
block|}
DECL|method|fromJSON
specifier|public
specifier|static
name|ValidatingJsonMap
name|fromJSON
parameter_list|(
name|Reader
name|s
parameter_list|,
name|String
name|includeLocation
parameter_list|)
block|{
try|try
block|{
name|ValidatingJsonMap
name|map
init|=
operator|(
name|ValidatingJsonMap
operator|)
name|getObjectBuilder
argument_list|(
operator|new
name|JSONParser
argument_list|(
name|s
argument_list|)
argument_list|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|handleIncludes
argument_list|(
name|map
argument_list|,
name|includeLocation
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
comment|/**    * In the given map, recursively replace "#include":"resource-name" with the key/value pairs    * parsed from the resource at {location}/{resource-name}.json    */
DECL|method|handleIncludes
specifier|private
specifier|static
name|void
name|handleIncludes
parameter_list|(
name|ValidatingJsonMap
name|map
parameter_list|,
name|String
name|location
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
specifier|final
name|String
name|loc
init|=
name|location
operator|==
literal|null
condition|?
literal|""
comment|// trim trailing slash
else|:
operator|(
name|location
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|location
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
else|:
name|location
operator|)
decl_stmt|;
name|String
name|resourceToInclude
init|=
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
name|INCLUDE
argument_list|)
decl_stmt|;
if|if
condition|(
name|resourceToInclude
operator|!=
literal|null
condition|)
block|{
name|ValidatingJsonMap
name|includedMap
init|=
name|parse
argument_list|(
name|loc
operator|+
literal|"/"
operator|+
name|resourceToInclude
operator|+
name|RESOURCE_EXTENSION
argument_list|,
name|loc
argument_list|)
decl_stmt|;
name|map
operator|.
name|remove
argument_list|(
name|INCLUDE
argument_list|)
expr_stmt|;
name|map
operator|.
name|putAll
argument_list|(
name|includedMap
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|maxDepth
operator|>
literal|0
condition|)
block|{
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|e
lambda|->
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
argument_list|)
operator|.
name|map
argument_list|(
name|Map
operator|.
name|Entry
operator|::
name|getValue
argument_list|)
operator|.
name|forEach
argument_list|(
name|m
lambda|->
name|handleIncludes
argument_list|(
operator|(
name|ValidatingJsonMap
operator|)
name|m
argument_list|,
name|loc
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getDeepCopy
specifier|public
specifier|static
name|ValidatingJsonMap
name|getDeepCopy
parameter_list|(
name|Map
name|map
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|boolean
name|mutable
parameter_list|)
block|{
if|if
condition|(
name|map
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|maxDepth
operator|<
literal|1
condition|)
return|return
name|ValidatingJsonMap
operator|.
name|wrap
argument_list|(
name|map
argument_list|)
return|;
name|ValidatingJsonMap
name|copy
init|=
name|mutable
condition|?
operator|new
name|ValidatingJsonMap
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
else|:
operator|new
name|ValidatingJsonMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
init|=
operator|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
decl_stmt|;
name|Object
name|v
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|v
operator|instanceof
name|Map
condition|)
name|v
operator|=
name|getDeepCopy
argument_list|(
operator|(
name|Map
operator|)
name|v
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|,
name|mutable
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|instanceof
name|Collection
condition|)
name|v
operator|=
name|getDeepCopy
argument_list|(
operator|(
name|Collection
operator|)
name|v
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|,
name|mutable
argument_list|)
expr_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|mutable
condition|?
name|copy
else|:
operator|new
name|ValidatingJsonMap
argument_list|(
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|copy
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getDeepCopy
specifier|public
specifier|static
name|Collection
name|getDeepCopy
parameter_list|(
name|Collection
name|c
parameter_list|,
name|int
name|maxDepth
parameter_list|,
name|boolean
name|mutable
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|null
operator|||
name|maxDepth
operator|<
literal|1
condition|)
return|return
name|c
return|;
name|Collection
name|result
init|=
name|c
operator|instanceof
name|Set
condition|?
operator|new
name|HashSet
argument_list|()
else|:
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|o
range|:
name|c
control|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|o
operator|=
name|getDeepCopy
argument_list|(
operator|(
name|Map
operator|)
name|o
argument_list|,
name|maxDepth
operator|-
literal|1
argument_list|,
name|mutable
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
return|return
name|mutable
condition|?
name|result
else|:
name|result
operator|instanceof
name|Set
condition|?
name|unmodifiableSet
argument_list|(
operator|(
name|Set
operator|)
name|result
argument_list|)
else|:
name|unmodifiableList
argument_list|(
operator|(
name|List
operator|)
name|result
argument_list|)
return|;
block|}
DECL|method|getObjectBuilder
specifier|private
specifier|static
name|ObjectBuilder
name|getObjectBuilder
parameter_list|(
specifier|final
name|JSONParser
name|jp
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ObjectBuilder
argument_list|(
name|jp
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Object
name|newObject
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|ValidatingJsonMap
argument_list|()
return|;
block|}
block|}
return|;
block|}
DECL|method|parse
specifier|public
specifier|static
name|ValidatingJsonMap
name|parse
parameter_list|(
name|String
name|resourceName
parameter_list|,
name|String
name|includeLocation
parameter_list|)
block|{
name|InputStream
name|is
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
decl_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"invalid API spec: "
operator|+
name|resourceName
argument_list|)
throw|;
name|ValidatingJsonMap
name|map
init|=
literal|null
decl_stmt|;
try|try
block|{
name|map
operator|=
name|fromJSON
argument_list|(
name|is
argument_list|,
name|includeLocation
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Error in JSON : "
operator|+
name|resourceName
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"Empty value for "
operator|+
name|resourceName
argument_list|)
throw|;
return|return
name|getDeepCopy
argument_list|(
name|map
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
return|return
name|that
operator|instanceof
name|Map
operator|&&
name|this
operator|.
name|delegate
operator|.
name|equals
argument_list|(
name|that
argument_list|)
return|;
block|}
DECL|field|EMPTY
specifier|public
specifier|static
specifier|final
name|ValidatingJsonMap
name|EMPTY
init|=
operator|new
name|ValidatingJsonMap
argument_list|(
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
decl_stmt|;
DECL|interface|PredicateWithErrMsg
specifier|public
interface|interface
name|PredicateWithErrMsg
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**      * Test the object and return null if the predicate is true      * or return a string with a message;      *      * @param t test value      * @return null if test succeeds or an error description if test fails      */
DECL|method|test
name|String
name|test
parameter_list|(
name|T
name|t
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

