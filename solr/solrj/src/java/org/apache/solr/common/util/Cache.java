begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.common.util
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_interface
DECL|interface|Cache
specifier|public
interface|interface
name|Cache
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
DECL|method|put
name|V
name|put
parameter_list|(
name|K
name|key
parameter_list|,
name|V
name|val
parameter_list|)
function_decl|;
DECL|method|get
name|V
name|get
parameter_list|(
name|K
name|key
parameter_list|)
function_decl|;
DECL|method|remove
name|V
name|remove
parameter_list|(
name|K
name|key
parameter_list|)
function_decl|;
DECL|method|clear
name|void
name|clear
parameter_list|()
function_decl|;
DECL|method|computeIfAbsent
specifier|default
name|V
name|computeIfAbsent
parameter_list|(
name|K
name|key
parameter_list|,
name|Function
argument_list|<
name|?
super|super
name|K
argument_list|,
name|?
extends|extends
name|V
argument_list|>
name|mappingFunction
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|mappingFunction
argument_list|)
expr_stmt|;
name|V
name|v
decl_stmt|;
if|if
condition|(
operator|(
name|v
operator|=
name|get
argument_list|(
name|key
argument_list|)
operator|)
operator|==
literal|null
condition|)
block|{
name|V
name|newValue
decl_stmt|;
if|if
condition|(
operator|(
name|newValue
operator|=
name|mappingFunction
operator|.
name|apply
argument_list|(
name|key
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|put
argument_list|(
name|key
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
return|return
name|newValue
return|;
block|}
block|}
return|return
name|v
return|;
block|}
block|}
end_interface

end_unit

