begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ConfigSetParams
operator|.
name|ConfigSetAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|CommandOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|ConfigSetEndPoint
operator|.
name|CONFIG_COMMANDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|ConfigSetEndPoint
operator|.
name|CONFIG_DEL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|ConfigSetEndPoint
operator|.
name|LIST_CONFIG
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|CLUSTER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|CLUSTER_ALIASES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|CLUSTER_CMD
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|CLUSTER_CMD_STATUS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|CLUSTER_CMD_STATUS_DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|CLUSTER_NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|COLLECTIONS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|COLLECTIONS_COMMANDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|COLLECTION_STATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|PER_COLLECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_COMMANDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|EndPoint
operator|.
name|PER_COLLECTION_SHARDS_COMMANDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|NAME
import|;
end_import

begin_comment
comment|/** stores the mapping of v1 API parameters to v2 API parameters  * for collection API and configset API  *  */
end_comment

begin_class
DECL|class|CollectionApiMapping
specifier|public
class|class
name|CollectionApiMapping
block|{
DECL|enum|Meta
specifier|public
enum|enum
name|Meta
implements|implements
name|CommandMeta
block|{
DECL|enum constant|GET_COLLECTIONS
name|GET_COLLECTIONS
parameter_list|(
name|COLLECTIONS
parameter_list|,
name|GET
parameter_list|,
name|LIST
parameter_list|)
operator|,
DECL|enum constant|GET_CLUSTER
constructor|GET_CLUSTER(CLUSTER
operator|,
constructor|GET
operator|,
constructor|LIST
operator|,
constructor|"/cluster"
operator|,
constructor|null
block|)
enum|,
DECL|enum constant|GET_CLUSTER_OVERSEER
name|GET_CLUSTER_OVERSEER
argument_list|(
name|CLUSTER
argument_list|,
name|GET
argument_list|,
name|OVERSEERSTATUS
argument_list|,
literal|"/cluster/overseer"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|GET_CLUSTER_STATUS_CMD
name|GET_CLUSTER_STATUS_CMD
argument_list|(
name|CLUSTER_CMD_STATUS
argument_list|,
name|GET
argument_list|,
name|REQUESTSTATUS
argument_list|)
operator|,
DECL|enum constant|DELETE_CLUSTER_STATUS
name|DELETE_CLUSTER_STATUS
argument_list|(
name|CLUSTER_CMD_STATUS_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETESTATUS
argument_list|)
operator|,
DECL|enum constant|GET_A_COLLECTION
name|GET_A_COLLECTION
argument_list|(
name|COLLECTION_STATE
argument_list|,
name|GET
argument_list|,
name|CLUSTERSTATUS
argument_list|)
operator|,
DECL|enum constant|LIST_ALIASES
name|LIST_ALIASES
argument_list|(
name|CLUSTER_ALIASES
argument_list|,
name|GET
argument_list|,
name|LISTALIASES
argument_list|)
operator|,
DECL|enum constant|CREATE_COLLECTION
name|CREATE_COLLECTION
argument_list|(
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CREATE
argument_list|,
name|CREATE
operator|.
name|toLower
argument_list|()
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"collection.configName"
argument_list|,
literal|"config"
argument_list|,
literal|"createNodeSet.shuffle"
argument_list|,
literal|"shuffleNodes"
argument_list|,
literal|"createNodeSet"
argument_list|,
literal|"nodeSet"
argument_list|)
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"properties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_COLL
name|DELETE_COLL
argument_list|(
name|EndPoint
operator|.
name|PER_COLLECTION_DELETE
argument_list|,
name|DELETE
argument_list|,
name|CollectionAction
operator|.
name|DELETE
argument_list|,
name|CollectionAction
operator|.
name|DELETE
operator|.
name|toLower
argument_list|()
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
name|NAME
argument_list|,
literal|"collection"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|RELOAD_COLL
name|RELOAD_COLL
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|RELOAD
argument_list|,
name|RELOAD
operator|.
name|toLower
argument_list|()
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
name|NAME
argument_list|,
literal|"collection"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|MODIFY_COLLECTION
name|MODIFY_COLLECTION
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|MODIFYCOLLECTION
argument_list|,
literal|"modify"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|MIGRATE_DOCS
name|MIGRATE_DOCS
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|MIGRATE
argument_list|,
literal|"migrate-docs"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"split.key"
argument_list|,
literal|"splitKey"
argument_list|,
literal|"target.collection"
argument_list|,
literal|"target"
argument_list|,
literal|"forward.timeout"
argument_list|,
literal|"forwardTimeout"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|REBALANCE_LEADERS
name|REBALANCE_LEADERS
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|REBALANCELEADERS
argument_list|,
literal|"rebalance-leaders"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|CREATE_ALIAS
name|CREATE_ALIAS
argument_list|(
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CREATEALIAS
argument_list|,
literal|"create-alias"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|DELETE_ALIAS
name|DELETE_ALIAS
argument_list|(
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|DELETEALIAS
argument_list|,
literal|"delete-alias"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|method|CREATE_SHARD
DECL|method|CREATE_SHARD
name|CREATE_SHARD
argument_list|(
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CREATESHARD
argument_list|,
literal|"create"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"createNodeSet"
argument_list|,
literal|"nodeSet"
argument_list|)
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"coreProperties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
block|{       @
name|Override
specifier|public
name|String
name|getParamSubstitute
argument_list|(
name|String
name|param
argument_list|)
block|{
return|return
name|super
operator|.
name|getParamSubstitute
argument_list|(
name|param
argument_list|)
return|;
block|}
block|}
end_class

begin_operator
operator|,
end_operator

begin_expr_stmt
DECL|enum constant|SPLIT_SHARD
name|SPLIT_SHARD
argument_list|(
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|SPLITSHARD
argument_list|,
literal|"split"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"split.key"
argument_list|,
literal|"splitKey"
argument_list|)
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"coreProperties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_SHARD
name|DELETE_SHARD
argument_list|(
name|PER_COLLECTION_PER_SHARD_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETESHARD
argument_list|)
operator|,
DECL|enum constant|CREATE_REPLICA
name|CREATE_REPLICA
argument_list|(
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|ADDREPLICA
argument_list|,
literal|"add-replica"
argument_list|,
literal|null
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"coreProperties."
argument_list|,
literal|"property."
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_REPLICA
name|DELETE_REPLICA
argument_list|(
name|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
argument_list|,
name|DELETE
argument_list|,
name|DELETEREPLICA
argument_list|)
operator|,
DECL|enum constant|SYNC_SHARD
name|SYNC_SHARD
argument_list|(
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CollectionAction
operator|.
name|SYNCSHARD
argument_list|,
literal|"synch-shard"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|ADD_REPLICA_PROPERTY
name|ADD_REPLICA_PROPERTY
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|CollectionAction
operator|.
name|ADDREPLICAPROP
argument_list|,
literal|"add-replica-property"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"property"
argument_list|,
literal|"name"
argument_list|,
literal|"property.value"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
operator|,
DECL|enum constant|DELETE_REPLICA_PROPERTY
name|DELETE_REPLICA_PROPERTY
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|DELETEREPLICAPROP
argument_list|,
literal|"delete-replica-property"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|ADD_ROLE
name|ADD_ROLE
argument_list|(
name|CLUSTER_CMD
argument_list|,
name|POST
argument_list|,
name|ADDROLE
argument_list|,
literal|"add-role"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|REMOVE_ROLE
name|REMOVE_ROLE
argument_list|(
name|CLUSTER_CMD
argument_list|,
name|POST
argument_list|,
name|REMOVEROLE
argument_list|,
literal|"remove-role"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|SET_CLUSTER_PROPERTY
name|SET_CLUSTER_PROPERTY
argument_list|(
name|CLUSTER_CMD
argument_list|,
name|POST
argument_list|,
name|CLUSTERPROP
argument_list|,
literal|"set-property"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|BACKUP_COLLECTION
name|BACKUP_COLLECTION
argument_list|(
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|BACKUP
argument_list|,
literal|"backup-collection"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|RESTORE_COLLECTION
name|RESTORE_COLLECTION
argument_list|(
name|COLLECTIONS_COMMANDS
argument_list|,
name|POST
argument_list|,
name|RESTORE
argument_list|,
literal|"restore-collection"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|GET_NODES
name|GET_NODES
argument_list|(
name|CLUSTER_NODES
argument_list|,
name|GET
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|FORCE_LEADER
name|FORCE_LEADER
argument_list|(
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CollectionAction
operator|.
name|FORCELEADER
argument_list|,
literal|"force-leader"
argument_list|,
literal|null
argument_list|)
operator|,
DECL|enum constant|BALANCE_SHARD_UNIQUE
name|BALANCE_SHARD_UNIQUE
argument_list|(
name|PER_COLLECTION
argument_list|,
name|POST
argument_list|,
name|BALANCESHARDUNIQUE
argument_list|,
literal|"balance-shard-unique"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_decl_stmt
DECL|field|commandName
specifier|public
specifier|final
name|String
name|commandName
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|endPoint
specifier|public
specifier|final
name|EndPoint
name|endPoint
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|method
specifier|public
specifier|final
name|SolrRequest
operator|.
name|METHOD
name|method
decl_stmt|;
end_decl_stmt

begin_comment
comment|//mapping of http param name to json attribute
end_comment

begin_decl_stmt
DECL|field|paramstoAttr
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramstoAttr
decl_stmt|;
end_decl_stmt

begin_comment
comment|//mapping of old prefix to new for instance properties.a=val can be substituted with property:{a:val}
end_comment

begin_decl_stmt
DECL|field|prefixSubstitutes
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prefixSubstitutes
decl_stmt|;
end_decl_stmt

begin_decl_stmt
DECL|field|action
specifier|public
specifier|final
name|CollectionAction
name|action
decl_stmt|;
end_decl_stmt

begin_function
DECL|method|getMethod
specifier|public
name|SolrRequest
operator|.
name|METHOD
name|getMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
end_function

begin_expr_stmt
DECL|method|Meta
name|Meta
argument_list|(
name|EndPoint
name|endPoint
argument_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
argument_list|,
name|CollectionAction
name|action
argument_list|)
block|{
name|this
argument_list|(
name|endPoint
argument_list|,
name|method
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
block|;     }
DECL|method|Meta
name|Meta
argument_list|(
name|EndPoint
name|endPoint
argument_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
argument_list|,
name|CollectionAction
name|action
argument_list|,
name|String
name|commandName
argument_list|,
name|Map
name|paramstoAttr
argument_list|)
block|{
name|this
argument_list|(
name|endPoint
argument_list|,
name|method
argument_list|,
name|action
argument_list|,
name|commandName
argument_list|,
name|paramstoAttr
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
block|;      }
DECL|method|Meta
name|Meta
argument_list|(
name|EndPoint
name|endPoint
argument_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
argument_list|,
name|CollectionAction
name|action
argument_list|,
name|String
name|commandName
argument_list|,
name|Map
name|paramstoAttr
argument_list|,
name|Map
name|prefixSubstitutes
argument_list|)
block|{
name|this
operator|.
name|action
operator|=
name|action
block|;
name|this
operator|.
name|commandName
operator|=
name|commandName
block|;
name|this
operator|.
name|endPoint
operator|=
name|endPoint
block|;
name|this
operator|.
name|method
operator|=
name|method
block|;
name|this
operator|.
name|paramstoAttr
operator|=
name|paramstoAttr
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|paramstoAttr
argument_list|)
block|;
name|this
operator|.
name|prefixSubstitutes
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|prefixSubstitutes
argument_list|)
block|;      }
expr|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
argument_list|()
block|{
return|return
name|commandName
return|;
block|}
end_expr_stmt

begin_function
annotation|@
name|Override
DECL|method|getHttpMethod
specifier|public
name|SolrRequest
operator|.
name|METHOD
name|getHttpMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getEndPoint
specifier|public
name|V2EndPoint
name|getEndPoint
parameter_list|()
block|{
return|return
name|endPoint
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getParamNames
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getParamNames
parameter_list|(
name|CommandOperation
name|op
parameter_list|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|paramNames
init|=
name|getParamNames_
argument_list|(
name|op
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prefixSubstitutes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|paramNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|prefixSubstitutes
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|paramName
range|:
name|paramNames
control|)
block|{
if|if
condition|(
name|paramName
operator|.
name|startsWith
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|paramName
operator|.
name|replace
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
block|}
block|}
name|paramNames
operator|=
name|result
expr_stmt|;
block|}
block|}
return|return
name|paramNames
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|getParamSubstitute
specifier|public
name|String
name|getParamSubstitute
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|String
name|s
init|=
name|paramstoAttr
operator|.
name|containsKey
argument_list|(
name|param
argument_list|)
condition|?
name|paramstoAttr
operator|.
name|get
argument_list|(
name|param
argument_list|)
else|:
name|param
decl_stmt|;
if|if
condition|(
name|prefixSubstitutes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|prefixSubstitutes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|s
operator|.
name|startsWith
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
return|return
name|s
operator|.
name|replace
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|s
return|;
block|}
end_function

begin_function
DECL|method|getReverseParamSubstitute
specifier|public
name|Object
name|getReverseParamSubstitute
parameter_list|(
name|String
name|param
parameter_list|)
block|{
name|String
name|s
init|=
name|paramstoAttr
operator|.
name|containsKey
argument_list|(
name|param
argument_list|)
condition|?
name|paramstoAttr
operator|.
name|get
argument_list|(
name|param
argument_list|)
else|:
name|param
decl_stmt|;
if|if
condition|(
name|prefixSubstitutes
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|prefixSubstitutes
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|param
operator|.
name|startsWith
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|Pair
argument_list|<>
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
name|param
operator|.
name|substring
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|s
return|;
block|}
end_function

begin_enum
unit|}    public
DECL|enum|EndPoint
enum|enum
name|EndPoint
implements|implements
name|V2EndPoint
block|{
DECL|enum constant|CLUSTER
name|CLUSTER
argument_list|(
literal|"cluster"
argument_list|)
block|,
DECL|enum constant|CLUSTER_ALIASES
name|CLUSTER_ALIASES
argument_list|(
literal|"cluster.aliases"
argument_list|)
block|,
DECL|enum constant|CLUSTER_CMD
name|CLUSTER_CMD
argument_list|(
literal|"cluster.Commands"
argument_list|)
block|,
DECL|enum constant|CLUSTER_NODES
name|CLUSTER_NODES
argument_list|(
literal|"cluster.nodes"
argument_list|)
block|,
DECL|enum constant|CLUSTER_CMD_STATUS
name|CLUSTER_CMD_STATUS
argument_list|(
literal|"cluster.commandstatus"
argument_list|)
block|,
DECL|enum constant|CLUSTER_CMD_STATUS_DELETE
name|CLUSTER_CMD_STATUS_DELETE
argument_list|(
literal|"cluster.commandstatus.delete"
argument_list|)
block|,
DECL|enum constant|COLLECTIONS_COMMANDS
name|COLLECTIONS_COMMANDS
argument_list|(
literal|"collections.Commands"
argument_list|)
block|,
DECL|enum constant|COLLECTIONS
name|COLLECTIONS
argument_list|(
literal|"collections"
argument_list|)
block|,
DECL|enum constant|COLLECTION_STATE
name|COLLECTION_STATE
argument_list|(
literal|"collections.collection"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION
name|PER_COLLECTION
argument_list|(
literal|"collections.collection.Commands"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_DELETE
name|PER_COLLECTION_DELETE
argument_list|(
literal|"collections.collection.delete"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_SHARDS_COMMANDS
name|PER_COLLECTION_SHARDS_COMMANDS
argument_list|(
literal|"collections.collection.shards.Commands"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_PER_SHARD_COMMANDS
name|PER_COLLECTION_PER_SHARD_COMMANDS
argument_list|(
literal|"collections.collection.shards.shard.Commands"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_PER_SHARD_DELETE
name|PER_COLLECTION_PER_SHARD_DELETE
argument_list|(
literal|"collections.collection.shards.shard.delete"
argument_list|)
block|,
DECL|enum constant|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
name|PER_COLLECTION_PER_SHARD_PER_REPLICA_DELETE
argument_list|(
literal|"collections.collection.shards.shard.replica.delete"
argument_list|)
block|;
DECL|field|specName
specifier|final
name|String
name|specName
decl_stmt|;
DECL|method|EndPoint
name|EndPoint
parameter_list|(
name|String
name|specName
parameter_list|)
block|{
name|this
operator|.
name|specName
operator|=
name|specName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSpecName
specifier|public
name|String
name|getSpecName
parameter_list|()
block|{
return|return
name|specName
return|;
block|}
block|}
end_enum

begin_interface
DECL|interface|V2EndPoint
specifier|public
interface|interface
name|V2EndPoint
block|{
DECL|method|getSpecName
name|String
name|getSpecName
parameter_list|()
function_decl|;
block|}
end_interface

begin_enum
DECL|enum|ConfigSetMeta
specifier|public
enum|enum
name|ConfigSetMeta
implements|implements
name|CommandMeta
block|{
DECL|enum constant|LIST
name|LIST
argument_list|(
name|LIST_CONFIG
argument_list|,
name|GET
argument_list|,
literal|null
argument_list|,
name|ConfigSetAction
operator|.
name|LIST
argument_list|)
block|,
DECL|enum constant|CREATE
name|CREATE
argument_list|(
name|CONFIG_COMMANDS
argument_list|,
name|POST
argument_list|,
literal|"create"
argument_list|,
name|ConfigSetAction
operator|.
name|CREATE
argument_list|)
block|,
DECL|enum constant|DEL
name|DEL
argument_list|(
name|CONFIG_DEL
argument_list|,
name|DELETE
argument_list|,
literal|null
argument_list|,
name|ConfigSetAction
operator|.
name|DELETE
argument_list|)
block|;
DECL|field|endPoint
specifier|public
specifier|final
name|ConfigSetEndPoint
name|endPoint
decl_stmt|;
DECL|field|method
specifier|public
specifier|final
name|SolrRequest
operator|.
name|METHOD
name|method
decl_stmt|;
DECL|field|cmdName
specifier|public
specifier|final
name|String
name|cmdName
decl_stmt|;
DECL|field|action
specifier|public
specifier|final
name|ConfigSetAction
name|action
decl_stmt|;
DECL|method|ConfigSetMeta
name|ConfigSetMeta
parameter_list|(
name|ConfigSetEndPoint
name|endPoint
parameter_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
parameter_list|,
name|String
name|cmdName
parameter_list|,
name|ConfigSetAction
name|action
parameter_list|)
block|{
name|this
operator|.
name|cmdName
operator|=
name|cmdName
expr_stmt|;
name|this
operator|.
name|endPoint
operator|=
name|endPoint
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|cmdName
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpMethod
specifier|public
name|SolrRequest
operator|.
name|METHOD
name|getHttpMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
annotation|@
name|Override
DECL|method|getEndPoint
specifier|public
name|V2EndPoint
name|getEndPoint
parameter_list|()
block|{
return|return
name|endPoint
return|;
block|}
block|}
end_enum

begin_enum
DECL|enum|ConfigSetEndPoint
specifier|public
enum|enum
name|ConfigSetEndPoint
implements|implements
name|V2EndPoint
block|{
DECL|enum constant|LIST_CONFIG
name|LIST_CONFIG
argument_list|(
literal|"cluster.configs"
argument_list|)
block|,
DECL|enum constant|CONFIG_COMMANDS
name|CONFIG_COMMANDS
argument_list|(
literal|"cluster.configs.Commands"
argument_list|)
block|,
DECL|enum constant|CONFIG_DEL
name|CONFIG_DEL
argument_list|(
literal|"cluster.configs.delete"
argument_list|)
block|;
DECL|field|spec
specifier|public
specifier|final
name|String
name|spec
decl_stmt|;
DECL|method|ConfigSetEndPoint
name|ConfigSetEndPoint
parameter_list|(
name|String
name|spec
parameter_list|)
block|{
name|this
operator|.
name|spec
operator|=
name|spec
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSpecName
specifier|public
name|String
name|getSpecName
parameter_list|()
block|{
return|return
name|spec
return|;
block|}
block|}
end_enum

begin_function
DECL|method|getParamNames_
specifier|private
specifier|static
name|Collection
argument_list|<
name|String
argument_list|>
name|getParamNames_
parameter_list|(
name|CommandOperation
name|op
parameter_list|,
name|CommandMeta
name|command
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|op
operator|.
name|getCommandData
argument_list|()
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|Map
condition|)
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|o
decl_stmt|;
name|collectKeyNames
argument_list|(
name|map
argument_list|,
name|result
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function

begin_function
DECL|method|collectKeyNames
specifier|public
specifier|static
name|void
name|collectKeyNames
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|instanceof
name|Map
condition|)
block|{
name|collectKeyNames
argument_list|(
operator|(
name|Map
operator|)
name|e
operator|.
name|getValue
argument_list|()
argument_list|,
name|result
argument_list|,
name|prefix
operator|+
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|add
argument_list|(
name|prefix
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_interface
DECL|interface|CommandMeta
specifier|public
interface|interface
name|CommandMeta
block|{
DECL|method|getName
name|String
name|getName
parameter_list|()
function_decl|;
comment|/**      * the http method supported by this command      */
DECL|method|getHttpMethod
name|SolrRequest
operator|.
name|METHOD
name|getHttpMethod
parameter_list|()
function_decl|;
DECL|method|getEndPoint
name|V2EndPoint
name|getEndPoint
parameter_list|()
function_decl|;
DECL|method|getParamNames
specifier|default
name|Collection
argument_list|<
name|String
argument_list|>
name|getParamNames
parameter_list|(
name|CommandOperation
name|op
parameter_list|)
block|{
return|return
name|getParamNames_
argument_list|(
name|op
argument_list|,
name|CommandMeta
operator|.
name|this
argument_list|)
return|;
block|}
DECL|method|getParamSubstitute
specifier|default
name|String
name|getParamSubstitute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|name
return|;
block|}
block|}
end_interface

unit|}
end_unit

