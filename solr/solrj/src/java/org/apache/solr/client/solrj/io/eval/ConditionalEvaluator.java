begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_class
DECL|class|ConditionalEvaluator
specifier|public
specifier|abstract
class|class
name|ConditionalEvaluator
extends|extends
name|ComplexEvaluator
block|{
DECL|field|serialVersionUID
specifier|protected
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|ConditionalEvaluator
specifier|public
name|ConditionalEvaluator
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
block|}
DECL|method|evaluateAll
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|evaluateAll
parameter_list|(
specifier|final
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StreamEvaluator
name|subEvaluator
range|:
name|subEvaluators
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|subEvaluator
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|interface|Checker
specifier|public
interface|interface
name|Checker
block|{
DECL|method|isNullAllowed
specifier|default
name|boolean
name|isNullAllowed
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|method|isCorrectType
name|boolean
name|isCorrectType
parameter_list|(
name|Object
name|value
parameter_list|)
function_decl|;
DECL|method|test
name|boolean
name|test
parameter_list|(
name|Object
name|left
parameter_list|,
name|Object
name|right
parameter_list|)
function_decl|;
block|}
DECL|interface|BooleanChecker
specifier|public
interface|interface
name|BooleanChecker
extends|extends
name|Checker
block|{
DECL|method|isCorrectType
specifier|default
name|boolean
name|isCorrectType
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
return|return
name|value
operator|instanceof
name|Boolean
return|;
block|}
block|}
block|}
end_class

end_unit

