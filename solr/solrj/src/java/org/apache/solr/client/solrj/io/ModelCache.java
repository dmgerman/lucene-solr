begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|CloudSolrStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|SORT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|VERSION_FIELD
import|;
end_import

begin_comment
comment|/**  *  The Model cache keeps a local in-memory copy of models  */
end_comment

begin_class
DECL|class|ModelCache
specifier|public
class|class
name|ModelCache
block|{
DECL|field|models
specifier|private
name|LRU
name|models
decl_stmt|;
DECL|field|defaultZkHost
specifier|private
name|String
name|defaultZkHost
decl_stmt|;
DECL|field|solrClientCache
specifier|private
name|SolrClientCache
name|solrClientCache
decl_stmt|;
DECL|method|ModelCache
specifier|public
name|ModelCache
parameter_list|(
name|int
name|size
parameter_list|,
name|String
name|defaultZkHost
parameter_list|,
name|SolrClientCache
name|solrClientCache
parameter_list|)
block|{
name|this
operator|.
name|models
operator|=
operator|new
name|LRU
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|this
operator|.
name|defaultZkHost
operator|=
name|defaultZkHost
expr_stmt|;
name|this
operator|.
name|solrClientCache
operator|=
name|solrClientCache
expr_stmt|;
block|}
DECL|method|getModel
specifier|public
name|Tuple
name|getModel
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|modelID
parameter_list|,
name|long
name|checkMillis
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getModel
argument_list|(
name|defaultZkHost
argument_list|,
name|collection
argument_list|,
name|modelID
argument_list|,
name|checkMillis
argument_list|)
return|;
block|}
DECL|method|getModel
specifier|public
name|Tuple
name|getModel
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|String
name|modelID
parameter_list|,
name|long
name|checkMillis
parameter_list|)
throws|throws
name|IOException
block|{
name|Model
name|model
init|=
literal|null
decl_stmt|;
name|long
name|currentTime
init|=
operator|new
name|Date
argument_list|()
operator|.
name|getTime
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
name|model
operator|=
name|models
operator|.
name|get
argument_list|(
name|modelID
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|currentTime
operator|-
name|model
operator|.
name|getLastChecked
argument_list|()
operator|)
operator|<=
name|checkMillis
operator|)
condition|)
block|{
return|return
name|model
operator|.
name|getTuple
argument_list|()
return|;
block|}
if|if
condition|(
name|model
operator|!=
literal|null
condition|)
block|{
comment|//model is expired
name|models
operator|.
name|remove
argument_list|(
name|modelID
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Model is not in cache or has expired so fetch the model
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"q"
argument_list|,
literal|"name_s:"
operator|+
name|modelID
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"fl"
argument_list|,
literal|"terms_ss, idfs_ds, weights_ds, iteration_i, _version_"
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
name|SORT
argument_list|,
literal|"iteration_i desc"
argument_list|)
expr_stmt|;
name|StreamContext
name|streamContext
init|=
operator|new
name|StreamContext
argument_list|()
decl_stmt|;
name|streamContext
operator|.
name|setSolrClientCache
argument_list|(
name|solrClientCache
argument_list|)
expr_stmt|;
name|CloudSolrStream
name|stream
init|=
operator|new
name|CloudSolrStream
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|stream
operator|.
name|setStreamContext
argument_list|(
name|streamContext
argument_list|)
expr_stmt|;
name|Tuple
name|tuple
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|.
name|open
argument_list|()
expr_stmt|;
name|tuple
operator|=
name|stream
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|//check again to see if another thread has updated the same model
name|Model
name|m
init|=
name|models
operator|.
name|get
argument_list|(
name|modelID
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|Tuple
name|t
init|=
name|m
operator|.
name|getTuple
argument_list|()
decl_stmt|;
name|long
name|v
init|=
name|t
operator|.
name|getLong
argument_list|(
name|VERSION_FIELD
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|>=
name|tuple
operator|.
name|getLong
argument_list|(
name|VERSION_FIELD
argument_list|)
condition|)
block|{
return|return
name|t
return|;
block|}
else|else
block|{
name|models
operator|.
name|put
argument_list|(
name|modelID
argument_list|,
operator|new
name|Model
argument_list|(
name|tuple
argument_list|,
name|currentTime
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tuple
return|;
block|}
block|}
else|else
block|{
name|models
operator|.
name|put
argument_list|(
name|modelID
argument_list|,
operator|new
name|Model
argument_list|(
name|tuple
argument_list|,
name|currentTime
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tuple
return|;
block|}
block|}
block|}
DECL|class|Model
specifier|private
class|class
name|Model
block|{
DECL|field|tuple
specifier|private
name|Tuple
name|tuple
decl_stmt|;
DECL|field|lastChecked
specifier|private
name|long
name|lastChecked
decl_stmt|;
DECL|method|Model
specifier|public
name|Model
parameter_list|(
name|Tuple
name|tuple
parameter_list|,
name|long
name|lastChecked
parameter_list|)
block|{
name|this
operator|.
name|tuple
operator|=
name|tuple
expr_stmt|;
name|this
operator|.
name|lastChecked
operator|=
name|lastChecked
expr_stmt|;
block|}
DECL|method|getTuple
specifier|public
name|Tuple
name|getTuple
parameter_list|()
block|{
return|return
name|tuple
return|;
block|}
DECL|method|getLastChecked
specifier|public
name|long
name|getLastChecked
parameter_list|()
block|{
return|return
name|lastChecked
return|;
block|}
block|}
DECL|class|LRU
specifier|private
class|class
name|LRU
extends|extends
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Model
argument_list|>
block|{
DECL|field|maxSize
specifier|private
name|int
name|maxSize
decl_stmt|;
DECL|method|LRU
specifier|public
name|LRU
parameter_list|(
name|int
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
block|}
DECL|method|removeEldestEntry
specifier|public
name|boolean
name|removeEldestEntry
parameter_list|(
name|Map
operator|.
name|Entry
name|eldest
parameter_list|)
block|{
if|if
condition|(
name|size
argument_list|()
operator|>
name|maxSize
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

