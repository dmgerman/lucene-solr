begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionApiMapping
operator|.
name|CommandMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
operator|.
name|CoreAdminAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|GET
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreApiMapping
operator|.
name|EndPoint
operator|.
name|CORES_COMMANDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreApiMapping
operator|.
name|EndPoint
operator|.
name|CORES_STATUS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreApiMapping
operator|.
name|EndPoint
operator|.
name|NODEAPIS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreApiMapping
operator|.
name|EndPoint
operator|.
name|NODEINVOKE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CoreApiMapping
operator|.
name|EndPoint
operator|.
name|PER_CORE_COMMANDS
import|;
end_import

begin_comment
comment|/** stores the mapping of v1 API parameters to v2 API parameters  * for core admin API  *  */
end_comment

begin_class
DECL|class|CoreApiMapping
specifier|public
class|class
name|CoreApiMapping
block|{
DECL|enum|Meta
specifier|public
enum|enum
name|Meta
implements|implements
name|CommandMeta
block|{
DECL|enum constant|CREATE
name|CREATE
argument_list|(
name|CORES_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|CREATE
argument_list|,
literal|"create"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"config"
argument_list|,
literal|"configSet"
argument_list|)
argument_list|)
block|,
DECL|enum constant|UNLOAD
name|UNLOAD
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|UNLOAD
argument_list|,
literal|"unload"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|RELOAD
name|RELOAD
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|RELOAD
argument_list|,
literal|"reload"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|STATUS
name|STATUS
argument_list|(
name|CORES_STATUS
argument_list|,
name|GET
argument_list|,
name|CoreAdminAction
operator|.
name|STATUS
argument_list|,
literal|"status"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|SWAP
name|SWAP
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|SWAP
argument_list|,
literal|"swap"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"other"
argument_list|,
literal|"with"
argument_list|)
argument_list|)
block|,
DECL|enum constant|RENAME
name|RENAME
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|RENAME
argument_list|,
literal|"rename"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|MERGEINDEXES
name|MERGEINDEXES
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|MERGEINDEXES
argument_list|,
literal|"merge-indexes"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|SPLIT
name|SPLIT
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|SPLIT
argument_list|,
literal|"split"
argument_list|,
name|Utils
operator|.
name|makeMap
argument_list|(
literal|"split.key"
argument_list|,
literal|"splitKey"
argument_list|)
argument_list|)
block|,
DECL|enum constant|PREPRECOVERY
name|PREPRECOVERY
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|PREPRECOVERY
argument_list|,
literal|"prep-recovery"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|REQUESTRECOVERY
name|REQUESTRECOVERY
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTRECOVERY
argument_list|,
literal|"request-recovery"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|REQUESTSYNCSHARD
name|REQUESTSYNCSHARD
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTSYNCSHARD
argument_list|,
literal|"request-sync-shard"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|REQUESTBUFFERUPDATES
name|REQUESTBUFFERUPDATES
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTBUFFERUPDATES
argument_list|,
literal|"request-buffer-updates"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|REQUESTAPPLYUPDATES
name|REQUESTAPPLYUPDATES
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTAPPLYUPDATES
argument_list|,
literal|"request-apply-updates"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|REQUESTSTATUS
name|REQUESTSTATUS
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|GET
argument_list|,
name|CoreAdminAction
operator|.
name|REQUESTSTATUS
argument_list|,
literal|"request-status"
argument_list|,
literal|null
argument_list|)
block|,
comment|/*TODO*/
DECL|enum constant|OVERSEEROP
name|OVERSEEROP
argument_list|(
name|NODEAPIS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|OVERSEEROP
argument_list|,
literal|"overseer-op"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|REJOINLEADERELECTION
name|REJOINLEADERELECTION
argument_list|(
name|NODEAPIS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|REJOINLEADERELECTION
argument_list|,
literal|"rejoin-leader-election"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|INVOKE
name|INVOKE
argument_list|(
name|NODEINVOKE
argument_list|,
name|GET
argument_list|,
name|CoreAdminAction
operator|.
name|INVOKE
argument_list|,
literal|"invoke"
argument_list|,
literal|null
argument_list|)
block|,
DECL|enum constant|FORCEPREPAREFORLEADERSHIP
name|FORCEPREPAREFORLEADERSHIP
argument_list|(
name|PER_CORE_COMMANDS
argument_list|,
name|POST
argument_list|,
name|CoreAdminAction
operator|.
name|FORCEPREPAREFORLEADERSHIP
argument_list|,
literal|"force-prepare-for-leadership"
argument_list|,
literal|null
argument_list|)
block|;
DECL|field|commandName
specifier|public
specifier|final
name|String
name|commandName
decl_stmt|;
DECL|field|endPoint
specifier|public
specifier|final
name|EndPoint
name|endPoint
decl_stmt|;
DECL|field|method
specifier|public
specifier|final
name|SolrRequest
operator|.
name|METHOD
name|method
decl_stmt|;
DECL|field|action
specifier|public
specifier|final
name|CoreAdminAction
name|action
decl_stmt|;
DECL|field|paramstoAttr
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramstoAttr
decl_stmt|;
DECL|method|Meta
name|Meta
parameter_list|(
name|EndPoint
name|endPoint
parameter_list|,
name|SolrRequest
operator|.
name|METHOD
name|method
parameter_list|,
name|CoreAdminAction
name|action
parameter_list|,
name|String
name|commandName
parameter_list|,
name|Map
name|paramstoAttr
parameter_list|)
block|{
name|this
operator|.
name|commandName
operator|=
name|commandName
expr_stmt|;
name|this
operator|.
name|endPoint
operator|=
name|endPoint
expr_stmt|;
name|this
operator|.
name|method
operator|=
name|method
expr_stmt|;
name|this
operator|.
name|paramstoAttr
operator|=
name|paramstoAttr
operator|==
literal|null
condition|?
name|Collections
operator|.
name|EMPTY_MAP
else|:
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|paramstoAttr
argument_list|)
expr_stmt|;
name|this
operator|.
name|action
operator|=
name|action
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getName
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|commandName
return|;
block|}
annotation|@
name|Override
DECL|method|getHttpMethod
specifier|public
name|SolrRequest
operator|.
name|METHOD
name|getHttpMethod
parameter_list|()
block|{
return|return
name|method
return|;
block|}
annotation|@
name|Override
DECL|method|getEndPoint
specifier|public
name|CollectionApiMapping
operator|.
name|V2EndPoint
name|getEndPoint
parameter_list|()
block|{
return|return
name|endPoint
return|;
block|}
annotation|@
name|Override
DECL|method|getParamSubstitute
specifier|public
name|String
name|getParamSubstitute
parameter_list|(
name|String
name|param
parameter_list|)
block|{
return|return
name|paramstoAttr
operator|.
name|containsKey
argument_list|(
name|param
argument_list|)
condition|?
name|paramstoAttr
operator|.
name|get
argument_list|(
name|param
argument_list|)
else|:
name|param
return|;
block|}
block|}
DECL|enum|EndPoint
specifier|public
enum|enum
name|EndPoint
implements|implements
name|CollectionApiMapping
operator|.
name|V2EndPoint
block|{
DECL|enum constant|CORES_STATUS
name|CORES_STATUS
argument_list|(
literal|"cores.Status"
argument_list|)
block|,
DECL|enum constant|CORES_COMMANDS
name|CORES_COMMANDS
argument_list|(
literal|"cores.Commands"
argument_list|)
block|,
DECL|enum constant|PER_CORE_COMMANDS
name|PER_CORE_COMMANDS
argument_list|(
literal|"cores.core.Commands"
argument_list|)
block|,
DECL|enum constant|NODEINVOKE
name|NODEINVOKE
argument_list|(
literal|"node.invoke"
argument_list|)
block|,
DECL|enum constant|NODEAPIS
name|NODEAPIS
argument_list|(
literal|"node.Commands"
argument_list|)
block|;
DECL|field|specName
specifier|final
name|String
name|specName
decl_stmt|;
DECL|method|EndPoint
name|EndPoint
parameter_list|(
name|String
name|specName
parameter_list|)
block|{
name|this
operator|.
name|specName
operator|=
name|specName
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSpecName
specifier|public
name|String
name|getSpecName
parameter_list|()
block|{
return|return
name|specName
return|;
block|}
block|}
block|}
end_class

end_unit

