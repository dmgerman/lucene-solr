begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|/**  *   */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|StreamContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import

begin_interface
DECL|interface|StreamEvaluator
specifier|public
interface|interface
name|StreamEvaluator
extends|extends
name|Expressible
extends|,
name|Serializable
block|{
DECL|method|setStreamContext
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|streamContext
parameter_list|)
function_decl|;
DECL|method|getStreamContext
name|StreamContext
name|getStreamContext
parameter_list|()
function_decl|;
DECL|method|evaluate
name|Object
name|evaluate
parameter_list|(
specifier|final
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Execute the evaluator over lets stored within the StreamContext. This allows     * evaluators to be executed over values calculated elsewhere in the pipeline    * and stored in the {@link StreamContext#getLets() streamContext.lets}    *     * Default implementation just creates a tuple out of all values in the context     * and passes that to {@link StreamEvaluator#evaluate(Tuple)}.    *     * @return Evaluated value    * @throws IOException throw on error during evaluation    */
DECL|method|evaluateOverContext
specifier|default
name|Object
name|evaluateOverContext
parameter_list|()
throws|throws
name|IOException
block|{
name|StreamContext
name|context
init|=
name|getStreamContext
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|context
condition|)
block|{
name|Tuple
name|contextTuple
init|=
operator|new
name|Tuple
argument_list|(
name|context
operator|.
name|getLets
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|evaluate
argument_list|(
name|contextTuple
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_interface

end_unit

