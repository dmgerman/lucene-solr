begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|HttpClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
operator|.
name|RemoteSolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
operator|.
name|CollectionRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SimpleOrderedMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
DECL|class|HttpClusterStateProvider
specifier|public
class|class
name|HttpClusterStateProvider
implements|implements
name|ClusterStateProvider
block|{
DECL|field|log
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
DECL|field|urlScheme
specifier|private
name|String
name|urlScheme
decl_stmt|;
DECL|field|liveNodes
specifier|volatile
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
decl_stmt|;
DECL|field|liveNodesTimestamp
name|long
name|liveNodesTimestamp
init|=
literal|0
decl_stmt|;
DECL|field|aliases
specifier|volatile
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
decl_stmt|;
DECL|field|aliasesTimestamp
name|long
name|aliasesTimestamp
init|=
literal|0
decl_stmt|;
DECL|field|cacheTimeout
specifier|private
name|int
name|cacheTimeout
init|=
literal|5
decl_stmt|;
comment|// the liveNodes and aliases cache will be invalidated after 5 secs
DECL|field|httpClient
specifier|final
name|HttpClient
name|httpClient
decl_stmt|;
DECL|field|clientIsInternal
specifier|final
name|boolean
name|clientIsInternal
decl_stmt|;
DECL|method|HttpClusterStateProvider
specifier|public
name|HttpClusterStateProvider
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|solrUrls
parameter_list|,
name|HttpClient
name|httpClient
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|httpClient
operator|=
name|httpClient
operator|==
literal|null
condition|?
name|HttpClientUtil
operator|.
name|createClient
argument_list|(
literal|null
argument_list|)
else|:
name|httpClient
expr_stmt|;
name|this
operator|.
name|clientIsInternal
operator|=
name|httpClient
operator|==
literal|null
expr_stmt|;
for|for
control|(
name|String
name|solrUrl
range|:
name|solrUrls
control|)
block|{
name|urlScheme
operator|=
name|solrUrl
operator|.
name|startsWith
argument_list|(
literal|"https"
argument_list|)
condition|?
literal|"https"
else|:
literal|"http"
expr_stmt|;
try|try
init|(
name|SolrClient
name|initialClient
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withBaseSolrUrl
argument_list|(
name|solrUrl
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|fetchLiveNodes
argument_list|(
name|initialClient
argument_list|)
decl_stmt|;
comment|// throws exception if unable to fetch
name|this
operator|.
name|liveNodes
operator|=
name|liveNodes
expr_stmt|;
name|liveNodesTimestamp
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt to fetch live_nodes from "
operator|+
name|solrUrl
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|liveNodes
operator|==
literal|null
operator|||
name|this
operator|.
name|liveNodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Tried fetching live_nodes using Solr URLs provided, i.e. "
operator|+
name|solrUrls
operator|+
literal|". However, "
operator|+
literal|"succeeded in obtaining the cluster state from none of them."
operator|+
literal|"If you think your Solr cluster is up and is accessible,"
operator|+
literal|" you could try re-creating a new CloudSolrClient using working"
operator|+
literal|" solrUrl(s) or zkHost(s)."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|clientIsInternal
operator|&&
name|this
operator|.
name|httpClient
operator|!=
literal|null
condition|)
block|{
name|HttpClientUtil
operator|.
name|close
argument_list|(
name|httpClient
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getState
specifier|public
name|CollectionRef
name|getState
parameter_list|(
name|String
name|collection
parameter_list|)
block|{
for|for
control|(
name|String
name|nodeName
range|:
name|liveNodes
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withBaseSolrUrl
argument_list|(
name|ZkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|,
name|urlScheme
argument_list|)
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|ClusterState
name|cs
init|=
name|fetchClusterState
argument_list|(
name|client
argument_list|,
name|collection
argument_list|)
decl_stmt|;
return|return
name|cs
operator|.
name|getCollectionRef
argument_list|(
name|collection
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|RemoteSolrException
decl||
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
name|collection
operator|+
literal|" not found"
argument_list|)
condition|)
block|{
comment|// Cluster state for the given collection was not found.
comment|// Lets fetch/update our aliases:
name|getAliases
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt to fetch cluster state from "
operator|+
name|ZkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|,
name|urlScheme
argument_list|)
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Tried fetching cluster state using the node names we knew of, i.e. "
operator|+
name|liveNodes
operator|+
literal|". However, "
operator|+
literal|"succeeded in obtaining the cluster state from none of them."
operator|+
literal|"If you think your Solr cluster is up and is accessible,"
operator|+
literal|" you could try re-creating a new CloudSolrClient using working"
operator|+
literal|" solrUrl(s) or zkHost(s)."
argument_list|)
throw|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|method|fetchClusterState
specifier|private
name|ClusterState
name|fetchClusterState
parameter_list|(
name|SolrClient
name|client
parameter_list|,
name|String
name|collection
parameter_list|)
throws|throws
name|SolrServerException
throws|,
name|IOException
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"collection"
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"CLUSTERSTATUS"
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
name|cluster
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|collectionsMap
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|collection
argument_list|,
operator|(
operator|(
name|NamedList
operator|)
name|cluster
operator|.
name|get
argument_list|(
literal|"collections"
argument_list|)
operator|)
operator|.
name|get
argument_list|(
name|collection
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|znodeVersion
init|=
call|(
name|int
call|)
argument_list|(
call|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
call|)
argument_list|(
name|collectionsMap
argument_list|)
operator|.
name|get
argument_list|(
name|collection
argument_list|)
argument_list|)
operator|.
name|get
argument_list|(
literal|"znodeVersion"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
operator|new
name|HashSet
argument_list|(
call|(
name|List
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
name|cluster
operator|.
name|get
argument_list|(
literal|"live_nodes"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|liveNodes
operator|=
name|liveNodes
expr_stmt|;
name|liveNodesTimestamp
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
name|ClusterState
name|cs
init|=
name|ClusterState
operator|.
name|load
argument_list|(
name|znodeVersion
argument_list|,
name|collectionsMap
argument_list|,
name|liveNodes
argument_list|,
name|ZkStateReader
operator|.
name|CLUSTER_STATE
argument_list|)
decl_stmt|;
return|return
name|cs
return|;
block|}
annotation|@
name|Override
DECL|method|liveNodes
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
parameter_list|()
block|{
if|if
condition|(
name|liveNodes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"We don't know of any live_nodes to fetch the"
operator|+
literal|" latest live_nodes information from. "
operator|+
literal|"If you think your Solr cluster is up and is accessible,"
operator|+
literal|" you could try re-creating a new CloudSolrClient using working"
operator|+
literal|" solrUrl(s) or zkHost(s)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|liveNodesTimestamp
operator|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|>
name|getCacheTimeout
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|nodeName
range|:
name|liveNodes
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withBaseSolrUrl
argument_list|(
name|ZkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|,
name|urlScheme
argument_list|)
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|fetchLiveNodes
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|this
operator|.
name|liveNodes
operator|=
operator|(
name|liveNodes
operator|)
expr_stmt|;
name|liveNodesTimestamp
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
return|return
name|liveNodes
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt to fetch live_nodes from "
operator|+
name|ZkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|,
name|urlScheme
argument_list|)
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Tried fetching live_nodes using all the node names we knew of, i.e. "
operator|+
name|liveNodes
operator|+
literal|". However, "
operator|+
literal|"succeeded in obtaining the cluster state from none of them."
operator|+
literal|"If you think your Solr cluster is up and is accessible,"
operator|+
literal|" you could try re-creating a new CloudSolrClient using working"
operator|+
literal|" solrUrl(s) or zkHost(s)."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|liveNodes
return|;
comment|// cached copy is fresh enough
block|}
block|}
DECL|method|fetchLiveNodes
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|fetchLiveNodes
parameter_list|(
name|SolrClient
name|client
parameter_list|)
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|params
operator|.
name|set
argument_list|(
literal|"action"
argument_list|,
literal|"CLUSTERSTATUS"
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|request
operator|.
name|setPath
argument_list|(
literal|"/admin/collections"
argument_list|)
expr_stmt|;
name|NamedList
name|cluster
init|=
operator|(
name|SimpleOrderedMap
operator|)
name|client
operator|.
name|request
argument_list|(
name|request
argument_list|)
operator|.
name|get
argument_list|(
literal|"cluster"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
operator|new
name|HashSet
argument_list|(
call|(
name|List
argument_list|<
name|String
argument_list|>
call|)
argument_list|(
name|cluster
operator|.
name|get
argument_list|(
literal|"live_nodes"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|liveNodes
return|;
block|}
annotation|@
name|Override
DECL|method|getAlias
specifier|public
name|String
name|getAlias
parameter_list|(
name|String
name|alias
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
init|=
name|getAliases
argument_list|(
literal|false
argument_list|)
decl_stmt|;
return|return
name|aliases
operator|.
name|get
argument_list|(
name|alias
argument_list|)
return|;
block|}
DECL|method|getAliases
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getAliases
parameter_list|(
name|boolean
name|forceFetch
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|liveNodes
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"We don't know of any live_nodes to fetch the"
operator|+
literal|" latest aliases information from. "
operator|+
literal|"If you think your Solr cluster is up and is accessible,"
operator|+
literal|" you could try re-creating a new CloudSolrClient using working"
operator|+
literal|" solrUrl(s) or zkHost(s)."
argument_list|)
throw|;
block|}
if|if
condition|(
name|forceFetch
operator|||
name|this
operator|.
name|aliases
operator|==
literal|null
operator|||
name|TimeUnit
operator|.
name|SECONDS
operator|.
name|convert
argument_list|(
operator|(
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|aliasesTimestamp
operator|)
argument_list|,
name|TimeUnit
operator|.
name|NANOSECONDS
argument_list|)
operator|>
name|getCacheTimeout
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|nodeName
range|:
name|liveNodes
control|)
block|{
try|try
init|(
name|HttpSolrClient
name|client
init|=
operator|new
name|HttpSolrClient
operator|.
name|Builder
argument_list|()
operator|.
name|withBaseSolrUrl
argument_list|(
name|ZkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|,
name|urlScheme
argument_list|)
argument_list|)
operator|.
name|withHttpClient
argument_list|(
name|httpClient
argument_list|)
operator|.
name|build
argument_list|()
init|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
init|=
operator|new
name|CollectionAdminRequest
operator|.
name|ListAliases
argument_list|()
operator|.
name|process
argument_list|(
name|client
argument_list|)
operator|.
name|getAliases
argument_list|()
decl_stmt|;
name|this
operator|.
name|aliases
operator|=
name|aliases
expr_stmt|;
name|this
operator|.
name|aliasesTimestamp
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|aliases
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|RemoteSolrException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|// Situation where we're hitting an older Solr which doesn't have LISTALIASES
if|if
condition|(
name|e
operator|instanceof
name|RemoteSolrException
operator|&&
operator|(
operator|(
name|RemoteSolrException
operator|)
name|e
operator|)
operator|.
name|code
argument_list|()
operator|==
literal|400
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"LISTALIASES not found, possibly using older Solr server. Aliases won't work"
operator|+
literal|" unless you re-create the CloudSolrClient using zkHost(s) or upgrade Solr server"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|this
operator|.
name|aliases
operator|=
name|Collections
operator|.
name|emptyMap
argument_list|()
expr_stmt|;
name|this
operator|.
name|aliasesTimestamp
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
return|return
name|aliases
return|;
block|}
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt to fetch cluster state from "
operator|+
name|ZkStateReader
operator|.
name|getBaseUrlForNodeName
argument_list|(
name|nodeName
argument_list|,
name|urlScheme
argument_list|)
operator|+
literal|" failed."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Tried fetching aliases using all the node names we knew of, i.e. "
operator|+
name|liveNodes
operator|+
literal|". However, "
operator|+
literal|"succeeded in obtaining the cluster state from none of them."
operator|+
literal|"If you think your Solr cluster is up and is accessible,"
operator|+
literal|" you could try re-creating a new CloudSolrClient using a working"
operator|+
literal|" solrUrl or zkHost."
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|this
operator|.
name|aliases
argument_list|)
return|;
comment|// cached copy is fresh enough
block|}
block|}
annotation|@
name|Override
DECL|method|getCollectionName
specifier|public
name|String
name|getCollectionName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|aliases
init|=
name|getAliases
argument_list|(
literal|false
argument_list|)
decl_stmt|;
return|return
name|aliases
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|?
name|aliases
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|getClusterProperty
specifier|public
name|Object
name|getClusterProperty
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|propertyName
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|URL_SCHEME
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|urlScheme
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Fetching cluster properties not supported"
operator|+
literal|" using the HttpClusterStateProvider. "
operator|+
literal|"ZkClientClusterStateProvider can be used for this."
argument_list|)
throw|;
comment|// TODO
block|}
annotation|@
name|Override
DECL|method|getClusterProperty
specifier|public
name|Object
name|getClusterProperty
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|String
name|def
parameter_list|)
block|{
if|if
condition|(
name|propertyName
operator|.
name|equals
argument_list|(
name|ZkStateReader
operator|.
name|URL_SCHEME
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|urlScheme
return|;
block|}
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Fetching cluster properties not supported"
operator|+
literal|" using the HttpClusterStateProvider. "
operator|+
literal|"ZkClientClusterStateProvider can be used for this."
argument_list|)
throw|;
comment|// TODO
block|}
annotation|@
name|Override
DECL|method|connect
specifier|public
name|void
name|connect
parameter_list|()
block|{}
DECL|method|getCacheTimeout
specifier|public
name|int
name|getCacheTimeout
parameter_list|()
block|{
return|return
name|cacheTimeout
return|;
block|}
DECL|method|setCacheTimeout
specifier|public
name|void
name|setCacheTimeout
parameter_list|(
name|int
name|cacheTimeout
parameter_list|)
block|{
name|this
operator|.
name|cacheTimeout
operator|=
name|cacheTimeout
expr_stmt|;
block|}
block|}
end_class

end_unit

