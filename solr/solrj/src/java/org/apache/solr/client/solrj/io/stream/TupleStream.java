begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|IteratorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|MapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Aliases
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|DocCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_class
DECL|class|TupleStream
specifier|public
specifier|abstract
class|class
name|TupleStream
implements|implements
name|Closeable
implements|,
name|Serializable
implements|,
name|MapWriter
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|streamNodeId
specifier|private
name|UUID
name|streamNodeId
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
decl_stmt|;
DECL|method|TupleStream
specifier|public
name|TupleStream
parameter_list|()
block|{    }
DECL|method|setStreamContext
specifier|public
specifier|abstract
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
function_decl|;
DECL|method|children
specifier|public
specifier|abstract
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
function_decl|;
DECL|method|open
specifier|public
specifier|abstract
name|void
name|open
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|close
specifier|public
specifier|abstract
name|void
name|close
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|read
specifier|public
specifier|abstract
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
function_decl|;
DECL|method|getStreamSort
specifier|public
specifier|abstract
name|StreamComparator
name|getStreamSort
parameter_list|()
function_decl|;
DECL|method|toExplanation
specifier|public
specifier|abstract
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|getCost
specifier|public
name|int
name|getCost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|EntryWriter
name|ew
parameter_list|)
throws|throws
name|IOException
block|{
name|open
argument_list|()
expr_stmt|;
name|ew
operator|.
name|put
argument_list|(
literal|"docs"
argument_list|,
operator|(
name|IteratorWriter
operator|)
name|iw
lambda|->
block|{
try|try
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|Tuple
name|tuple
init|=
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|!=
literal|null
condition|)
block|{
name|iw
operator|.
name|add
argument_list|(
name|tuple
argument_list|)
expr_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
name|close
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|getStreamNodeId
specifier|public
name|UUID
name|getStreamNodeId
parameter_list|()
block|{
return|return
name|streamNodeId
return|;
block|}
DECL|method|getShards
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|getShards
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collection
parameter_list|,
name|StreamContext
name|streamContext
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|shardsMap
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|shards
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|streamContext
operator|!=
literal|null
condition|)
block|{
name|shardsMap
operator|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|streamContext
operator|.
name|get
argument_list|(
literal|"shards"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|shardsMap
operator|!=
literal|null
condition|)
block|{
comment|//Manual Sharding
name|shards
operator|=
name|shardsMap
operator|.
name|get
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//SolrCloud Sharding
name|CloudSolrClient
name|cloudSolrClient
init|=
name|streamContext
operator|.
name|getSolrClientCache
argument_list|()
operator|.
name|getCloudSolrClient
argument_list|(
name|zkHost
argument_list|)
decl_stmt|;
name|ZkStateReader
name|zkStateReader
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|getSlices
argument_list|(
name|collection
argument_list|,
name|zkStateReader
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Replica
argument_list|>
name|shuffler
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
name|liveNodes
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
name|shuffler
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|shuffler
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|rep
init|=
name|shuffler
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|zkProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|rep
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|zkProps
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|shards
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|shards
return|;
block|}
DECL|method|getSlices
specifier|public
specifier|static
name|Collection
argument_list|<
name|Slice
argument_list|>
name|getSlices
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|ZkStateReader
name|zkStateReader
parameter_list|,
name|boolean
name|checkAlias
parameter_list|)
throws|throws
name|IOException
block|{
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|DocCollection
argument_list|>
name|collectionsMap
init|=
name|clusterState
operator|.
name|getCollectionsMap
argument_list|()
decl_stmt|;
comment|// Check collection case sensitive
if|if
condition|(
name|collectionsMap
operator|.
name|containsKey
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
return|return
name|collectionsMap
operator|.
name|get
argument_list|(
name|collectionName
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
return|;
block|}
comment|// Check collection case insensitive
for|for
control|(
name|String
name|collectionMapKey
range|:
name|collectionsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|collectionMapKey
operator|.
name|equalsIgnoreCase
argument_list|(
name|collectionName
argument_list|)
condition|)
block|{
return|return
name|collectionsMap
operator|.
name|get
argument_list|(
name|collectionMapKey
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|checkAlias
condition|)
block|{
comment|// check for collection alias
name|Aliases
name|aliases
init|=
name|zkStateReader
operator|.
name|getAliases
argument_list|()
decl_stmt|;
name|String
name|alias
init|=
name|aliases
operator|.
name|getCollectionAlias
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|alias
operator|!=
literal|null
condition|)
block|{
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aliasList
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|alias
argument_list|,
literal|","
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|aliasCollectionName
range|:
name|aliasList
control|)
block|{
comment|// Add all active slices for this alias collection
name|slices
operator|.
name|addAll
argument_list|(
name|collectionsMap
operator|.
name|get
argument_list|(
name|aliasCollectionName
argument_list|)
operator|.
name|getActiveSlices
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|slices
return|;
block|}
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Slices not found for "
operator|+
name|collectionName
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

