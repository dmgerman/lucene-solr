begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|LocalDateTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneOffset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|format
operator|.
name|DateTimeParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|IsoFields
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_comment
comment|/**  * Provides numeric Date/Time stream evaluators  */
end_comment

begin_class
DECL|class|DatePartEvaluator
specifier|public
class|class
name|DatePartEvaluator
extends|extends
name|NumberEvaluator
block|{
DECL|enum|FUNCTION
DECL|enum constant|year
DECL|enum constant|month
DECL|enum constant|day
DECL|enum constant|dayofyear
DECL|enum constant|dayofquarter
DECL|enum constant|hour
DECL|enum constant|minute
DECL|enum constant|quarter
DECL|enum constant|week
DECL|enum constant|second
DECL|enum constant|epoch
specifier|public
enum|enum
name|FUNCTION
block|{
name|year
block|,
name|month
block|,
name|day
block|,
name|dayofyear
block|,
name|dayofquarter
block|,
name|hour
block|,
name|minute
block|,
name|quarter
block|,
name|week
block|,
name|second
block|,
name|epoch
block|}
DECL|field|function
specifier|private
name|FUNCTION
name|function
decl_stmt|;
DECL|method|DatePartEvaluator
specifier|public
name|DatePartEvaluator
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
name|String
name|functionName
init|=
name|expression
operator|.
name|getFunctionName
argument_list|()
decl_stmt|;
try|try
block|{
name|this
operator|.
name|function
operator|=
name|FUNCTION
operator|.
name|valueOf
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid date expression %s - expecting one of %s"
argument_list|,
name|functionName
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|FUNCTION
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|1
operator|!=
name|subEvaluators
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting one value but found %d"
argument_list|,
name|expression
argument_list|,
name|subEvaluators
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|evaluate
specifier|public
name|Number
name|evaluate
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|IOException
block|{
name|Instant
name|instant
init|=
literal|null
decl_stmt|;
name|LocalDateTime
name|date
init|=
literal|null
decl_stmt|;
comment|//First evaluate the parameter
name|StreamEvaluator
name|streamEvaluator
init|=
name|subEvaluators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|tupleValue
init|=
name|streamEvaluator
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
decl_stmt|;
if|if
condition|(
name|tupleValue
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|tupleValue
operator|instanceof
name|String
condition|)
block|{
name|instant
operator|=
name|getInstant
argument_list|(
operator|(
name|String
operator|)
name|tupleValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tupleValue
operator|instanceof
name|Instant
condition|)
block|{
name|instant
operator|=
operator|(
name|Instant
operator|)
name|tupleValue
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tupleValue
operator|instanceof
name|Date
condition|)
block|{
name|instant
operator|=
operator|(
operator|(
name|Date
operator|)
name|tupleValue
operator|)
operator|.
name|toInstant
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tupleValue
operator|instanceof
name|LocalDateTime
condition|)
block|{
name|date
operator|=
operator|(
operator|(
name|LocalDateTime
operator|)
name|tupleValue
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|instant
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|function
operator|.
name|equals
argument_list|(
name|FUNCTION
operator|.
name|epoch
argument_list|)
condition|)
return|return
name|instant
operator|.
name|toEpochMilli
argument_list|()
return|;
name|date
operator|=
name|LocalDateTime
operator|.
name|ofInstant
argument_list|(
name|instant
argument_list|,
name|ZoneOffset
operator|.
name|UTC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|date
operator|!=
literal|null
condition|)
block|{
return|return
name|evaluate
argument_list|(
name|date
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid parameter %s - The parameter must be a string formatted ISO_INSTANT or of type Instant,Date or LocalDateTime."
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|tupleValue
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
DECL|method|getInstant
specifier|private
name|Instant
name|getInstant
parameter_list|(
name|String
name|dateStr
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|dateStr
operator|!=
literal|null
operator|&&
operator|!
name|dateStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
block|{
return|return
name|Instant
operator|.
name|parse
argument_list|(
name|dateStr
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DateTimeParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid parameter %s - The String must be formatted in the ISO_INSTANT date format."
argument_list|,
name|dateStr
argument_list|)
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Evaluate the date based on the specified function    *    * @param date    * @return the evaluated value    */
DECL|method|evaluate
specifier|private
name|Number
name|evaluate
parameter_list|(
name|LocalDateTime
name|date
parameter_list|)
block|{
switch|switch
condition|(
name|function
condition|)
block|{
case|case
name|year
case|:
return|return
name|date
operator|.
name|getYear
argument_list|()
return|;
case|case
name|month
case|:
return|return
name|date
operator|.
name|getMonthValue
argument_list|()
return|;
case|case
name|day
case|:
return|return
name|date
operator|.
name|getDayOfMonth
argument_list|()
return|;
case|case
name|dayofyear
case|:
return|return
name|date
operator|.
name|getDayOfYear
argument_list|()
return|;
case|case
name|hour
case|:
return|return
name|date
operator|.
name|getHour
argument_list|()
return|;
case|case
name|minute
case|:
return|return
name|date
operator|.
name|getMinute
argument_list|()
return|;
case|case
name|second
case|:
return|return
name|date
operator|.
name|getSecond
argument_list|()
return|;
case|case
name|dayofquarter
case|:
return|return
name|date
operator|.
name|get
argument_list|(
name|IsoFields
operator|.
name|DAY_OF_QUARTER
argument_list|)
return|;
case|case
name|quarter
case|:
return|return
name|date
operator|.
name|get
argument_list|(
name|IsoFields
operator|.
name|QUARTER_OF_YEAR
argument_list|)
return|;
case|case
name|week
case|:
return|return
name|date
operator|.
name|get
argument_list|(
name|IsoFields
operator|.
name|WEEK_OF_WEEK_BASED_YEAR
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|function
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StreamEvaluator
name|evaluator
range|:
name|subEvaluators
control|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
name|evaluator
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Explanation
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|Explanation
operator|.
name|ExpressionType
operator|.
name|EVALUATOR
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

