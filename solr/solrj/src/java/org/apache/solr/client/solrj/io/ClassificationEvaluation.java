begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
DECL|package|org.apache.solr.client.solrj.io
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
package|;
end_package

begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
DECL|class|ClassificationEvaluation
specifier|public
class|class
name|ClassificationEvaluation
block|{
DECL|field|truePositive
specifier|private
name|long
name|truePositive
decl_stmt|;
DECL|field|falsePositive
specifier|private
name|long
name|falsePositive
decl_stmt|;
DECL|field|trueNegative
specifier|private
name|long
name|trueNegative
decl_stmt|;
DECL|field|falseNegative
specifier|private
name|long
name|falseNegative
decl_stmt|;
DECL|method|count
specifier|public
name|void
name|count
parameter_list|(
name|int
name|actual
parameter_list|,
name|int
name|predicted
parameter_list|)
block|{
if|if
condition|(
name|predicted
operator|==
literal|1
condition|)
block|{
if|if
condition|(
name|actual
operator|==
literal|1
condition|)
name|truePositive
operator|++
expr_stmt|;
else|else
name|falsePositive
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|actual
operator|==
literal|0
condition|)
name|trueNegative
operator|++
expr_stmt|;
else|else
name|falseNegative
operator|++
expr_stmt|;
block|}
block|}
DECL|method|putToMap
specifier|public
name|void
name|putToMap
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"truePositive_i"
argument_list|,
name|truePositive
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"trueNegative_i"
argument_list|,
name|trueNegative
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"falsePositive_i"
argument_list|,
name|falsePositive
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"falseNegative_i"
argument_list|,
name|falseNegative
argument_list|)
expr_stmt|;
block|}
DECL|method|toMap
specifier|public
name|Map
name|toMap
parameter_list|()
block|{
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|putToMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
DECL|method|create
specifier|public
specifier|static
name|ClassificationEvaluation
name|create
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|ClassificationEvaluation
name|evaluation
init|=
operator|new
name|ClassificationEvaluation
argument_list|()
decl_stmt|;
name|evaluation
operator|.
name|addEvaluation
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|evaluation
return|;
block|}
DECL|method|addEvaluation
specifier|public
name|void
name|addEvaluation
parameter_list|(
name|Map
name|map
parameter_list|)
block|{
name|this
operator|.
name|truePositive
operator|+=
operator|(
name|long
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"truePositive_i"
argument_list|)
expr_stmt|;
name|this
operator|.
name|trueNegative
operator|+=
operator|(
name|long
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"trueNegative_i"
argument_list|)
expr_stmt|;
name|this
operator|.
name|falsePositive
operator|+=
operator|(
name|long
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"falsePositive_i"
argument_list|)
expr_stmt|;
name|this
operator|.
name|falseNegative
operator|+=
operator|(
name|long
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"falseNegative_i"
argument_list|)
expr_stmt|;
block|}
DECL|method|getPrecision
specifier|public
name|double
name|getPrecision
parameter_list|()
block|{
if|if
condition|(
name|truePositive
operator|+
name|falsePositive
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
operator|(
name|double
operator|)
name|truePositive
operator|/
operator|(
name|truePositive
operator|+
name|falsePositive
operator|)
return|;
block|}
DECL|method|getRecall
specifier|public
name|double
name|getRecall
parameter_list|()
block|{
if|if
condition|(
name|truePositive
operator|+
name|falseNegative
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
operator|(
name|double
operator|)
name|truePositive
operator|/
operator|(
name|truePositive
operator|+
name|falseNegative
operator|)
return|;
block|}
DECL|method|getF1
specifier|public
name|double
name|getF1
parameter_list|()
block|{
name|double
name|precision
init|=
name|getPrecision
argument_list|()
decl_stmt|;
name|double
name|recall
init|=
name|getRecall
argument_list|()
decl_stmt|;
if|if
condition|(
name|precision
operator|+
name|recall
operator|==
literal|0
condition|)
return|return
literal|0
return|;
return|return
literal|2
operator|*
operator|(
name|precision
operator|*
name|recall
operator|)
operator|/
operator|(
name|precision
operator|+
name|recall
operator|)
return|;
block|}
DECL|method|getAccuracy
specifier|public
name|double
name|getAccuracy
parameter_list|()
block|{
return|return
call|(
name|double
call|)
argument_list|(
name|truePositive
operator|+
name|trueNegative
argument_list|)
operator|/
operator|(
name|truePositive
operator|+
name|trueNegative
operator|+
name|falseNegative
operator|+
name|falsePositive
operator|)
return|;
block|}
block|}
end_class

end_unit

