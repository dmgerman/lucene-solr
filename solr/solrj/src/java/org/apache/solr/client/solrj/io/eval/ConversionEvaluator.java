begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_class
DECL|class|ConversionEvaluator
specifier|public
class|class
name|ConversionEvaluator
extends|extends
name|ComplexEvaluator
block|{
DECL|enum|LENGTH_CONSTANT
DECL|enum constant|MILES
DECL|enum constant|YARDS
DECL|enum constant|FEET
DECL|enum constant|INCHES
DECL|enum constant|MILLIMETERS
DECL|enum constant|CENTIMETERS
DECL|enum constant|METERS
DECL|enum constant|KILOMETERS
enum|enum
name|LENGTH_CONSTANT
block|{
name|MILES
block|,
name|YARDS
block|,
name|FEET
block|,
name|INCHES
block|,
name|MILLIMETERS
block|,
name|CENTIMETERS
block|,
name|METERS
block|,
name|KILOMETERS
block|}
empty_stmt|;
DECL|field|from
specifier|private
name|LENGTH_CONSTANT
name|from
decl_stmt|;
DECL|field|to
specifier|private
name|LENGTH_CONSTANT
name|to
decl_stmt|;
DECL|field|convert
specifier|private
name|Convert
name|convert
decl_stmt|;
DECL|method|ConversionEvaluator
specifier|public
name|ConversionEvaluator
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
if|if
condition|(
literal|3
operator|!=
name|subEvaluators
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|EvaluatorException
argument_list|(
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting 3 value but found %d"
argument_list|,
name|expression
argument_list|,
name|subEvaluators
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
try|try
block|{
name|from
operator|=
name|LENGTH_CONSTANT
operator|.
name|valueOf
argument_list|(
name|subEvaluators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|to
operator|=
name|LENGTH_CONSTANT
operator|.
name|valueOf
argument_list|(
name|subEvaluators
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUpperCase
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|convert
operator|=
name|getConvert
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EvaluatorException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|listParams
specifier|private
name|String
name|listParams
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|LENGTH_CONSTANT
name|lc
range|:
name|LENGTH_CONSTANT
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|lc
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|evaluate
specifier|public
name|Object
name|evaluate
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamEvaluator
name|streamEvaluator
init|=
name|subEvaluators
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Object
name|tupleValue
init|=
name|streamEvaluator
operator|.
name|evaluate
argument_list|(
name|tuple
argument_list|)
decl_stmt|;
if|if
condition|(
name|tupleValue
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Number
name|number
init|=
operator|(
name|Number
operator|)
name|tupleValue
decl_stmt|;
name|double
name|d
init|=
name|number
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
return|return
name|convert
operator|.
name|convert
argument_list|(
name|d
argument_list|)
return|;
block|}
DECL|method|getConvert
specifier|private
name|Convert
name|getConvert
parameter_list|(
name|LENGTH_CONSTANT
name|from
parameter_list|,
name|LENGTH_CONSTANT
name|to
parameter_list|)
throws|throws
name|IOException
block|{
switch|switch
condition|(
name|from
condition|)
block|{
case|case
name|INCHES
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|MILLIMETERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|25.4
return|;
case|case
name|CENTIMETERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|2.54
return|;
case|case
name|METERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|0.0254
return|;
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
throw|;
block|}
case|case
name|FEET
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|METERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|.30
return|;
block|}
case|case
name|YARDS
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|METERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|.91
return|;
case|case
name|KILOMETERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|0.00091
return|;
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
throw|;
block|}
case|case
name|MILES
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|KILOMETERS
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|1.61
return|;
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
throw|;
block|}
case|case
name|MILLIMETERS
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|INCHES
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|0.039
return|;
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
throw|;
block|}
case|case
name|CENTIMETERS
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|INCHES
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|0.39
return|;
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
throw|;
block|}
case|case
name|METERS
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|FEET
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|3.28
return|;
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
operator|+
literal|" to "
operator|+
name|to
argument_list|)
throw|;
block|}
case|case
name|KILOMETERS
case|:
switch|switch
condition|(
name|to
condition|)
block|{
case|case
name|MILES
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|0.62
return|;
case|case
name|FEET
case|:
return|return
parameter_list|(
name|double
name|d
parameter_list|)
lambda|->
name|d
operator|*
literal|3280.8
return|;
block|}
default|default:
throw|throw
operator|new
name|EvaluatorException
argument_list|(
literal|"No conversion available from "
operator|+
name|from
argument_list|)
throw|;
block|}
block|}
DECL|interface|Convert
specifier|private
interface|interface
name|Convert
block|{
DECL|method|convert
specifier|public
name|double
name|convert
parameter_list|(
name|double
name|d
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|StreamEvaluator
name|evaluator
range|:
name|subEvaluators
control|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
name|evaluator
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|Explanation
argument_list|(
name|nodeId
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|Explanation
operator|.
name|ExpressionType
operator|.
name|EVALUATOR
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

