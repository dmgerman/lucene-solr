begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|DataInputInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|FastInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|JavaBinCodec
import|;
end_import

begin_class
DECL|class|JavabinTupleStreamParser
specifier|public
class|class
name|JavabinTupleStreamParser
extends|extends
name|JavaBinCodec
implements|implements
name|TupleStreamParser
block|{
DECL|field|is
specifier|private
specifier|final
name|InputStream
name|is
decl_stmt|;
DECL|field|fis
specifier|final
name|FastInputStream
name|fis
decl_stmt|;
DECL|field|arraySize
specifier|private
name|int
name|arraySize
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
DECL|field|onlyJsonTypes
specifier|private
name|boolean
name|onlyJsonTypes
init|=
literal|false
decl_stmt|;
DECL|field|objectSize
name|int
name|objectSize
decl_stmt|;
DECL|method|JavabinTupleStreamParser
specifier|public
name|JavabinTupleStreamParser
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|boolean
name|onlyJsonTypes
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|onlyJsonTypes
operator|=
name|onlyJsonTypes
expr_stmt|;
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
name|this
operator|.
name|fis
operator|=
name|initRead
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|readTillDocs
argument_list|()
condition|)
name|arraySize
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|readTillDocs
specifier|private
name|boolean
name|readTillDocs
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isObjectType
argument_list|(
name|fis
argument_list|)
condition|)
block|{
if|if
condition|(
name|tagByte
operator|==
name|SOLRDOCLST
condition|)
block|{
name|readVal
argument_list|(
name|fis
argument_list|)
expr_stmt|;
comment|// this is the metadata, throw it away
name|tagByte
operator|=
name|fis
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|arraySize
operator|=
name|readSize
argument_list|(
name|fis
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|objectSize
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Object
name|k
init|=
name|readVal
argument_list|(
name|fis
argument_list|)
decl_stmt|;
if|if
condition|(
name|k
operator|==
name|END_OBJ
condition|)
break|break;
if|if
condition|(
literal|"docs"
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|tagByte
operator|=
name|fis
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|tagByte
operator|==
name|ITERATOR
condition|)
return|return
literal|true
return|;
comment|//docs must be an iterator or
if|if
condition|(
name|tagByte
operator|>>>
literal|5
operator|==
name|ARR
operator|>>>
literal|5
condition|)
block|{
comment|// an array
name|arraySize
operator|=
name|readSize
argument_list|(
name|fis
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|readTillDocs
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
else|else
block|{
name|readObject
argument_list|(
name|fis
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|false
return|;
comment|//here after it will be a stream of maps
block|}
DECL|method|isObjectType
specifier|private
name|boolean
name|isObjectType
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|tagByte
operator|=
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
if|if
condition|(
name|tagByte
operator|>>>
literal|5
operator|==
name|ORDERED_MAP
operator|>>>
literal|5
operator|||
name|tagByte
operator|>>>
literal|5
operator|==
name|NAMED_LST
operator|>>>
literal|5
condition|)
block|{
name|objectSize
operator|=
name|readSize
argument_list|(
name|dis
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tagByte
operator|==
name|MAP
condition|)
block|{
name|objectSize
operator|=
name|readVInt
argument_list|(
name|dis
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|tagByte
operator|==
name|MAP_ENTRY_ITER
condition|)
block|{
name|objectSize
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|tagByte
operator|==
name|SOLRDOCLST
return|;
block|}
DECL|method|readAsMap
specifier|private
name|Map
name|readAsMap
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Map
name|m
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
DECL|method|readSolrDocumentAsMap
specifier|private
name|Map
name|readSolrDocumentAsMap
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
name|tagByte
operator|=
name|dis
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|int
name|size
init|=
name|readSize
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|Map
name|doc
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
decl_stmt|;
name|Object
name|obj
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
comment|// could be a field name, or a child document
if|if
condition|(
name|obj
operator|instanceof
name|Map
condition|)
block|{
name|List
name|l
init|=
operator|(
name|List
operator|)
name|doc
operator|.
name|get
argument_list|(
literal|"_childDocuments_"
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|==
literal|null
condition|)
name|doc
operator|.
name|put
argument_list|(
literal|"_childDocuments_"
argument_list|,
name|l
operator|=
operator|new
name|ArrayList
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|add
argument_list|(
name|obj
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|fieldName
operator|=
operator|(
name|String
operator|)
name|obj
expr_stmt|;
block|}
name|Object
name|fieldVal
init|=
name|readVal
argument_list|(
name|dis
argument_list|)
decl_stmt|;
name|doc
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|fieldVal
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|readObject
specifier|protected
name|Object
name|readObject
parameter_list|(
name|DataInputInputStream
name|dis
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tagByte
operator|==
name|SOLRDOC
condition|)
block|{
return|return
name|readSolrDocumentAsMap
argument_list|(
name|dis
argument_list|)
return|;
block|}
if|if
condition|(
name|onlyJsonTypes
condition|)
block|{
switch|switch
condition|(
name|tagByte
operator|>>>
literal|5
condition|)
block|{
case|case
name|SINT
operator|>>>
literal|5
case|:
name|int
name|i
init|=
name|readSmallInt
argument_list|(
name|dis
argument_list|)
decl_stmt|;
return|return
operator|(
name|long
operator|)
name|i
return|;
case|case
name|ORDERED_MAP
operator|>>>
literal|5
case|:
return|return
name|readAsMap
argument_list|(
name|dis
argument_list|)
return|;
case|case
name|NAMED_LST
operator|>>>
literal|5
case|:
return|return
name|readAsMap
argument_list|(
name|dis
argument_list|)
return|;
block|}
switch|switch
condition|(
name|tagByte
condition|)
block|{
case|case
name|INT
case|:
block|{
name|int
name|i
init|=
name|dis
operator|.
name|readInt
argument_list|()
decl_stmt|;
return|return
operator|(
name|long
operator|)
name|i
return|;
block|}
case|case
name|FLOAT
case|:
block|{
name|float
name|v
init|=
name|dis
operator|.
name|readFloat
argument_list|()
decl_stmt|;
return|return
operator|(
name|double
operator|)
name|v
return|;
block|}
case|case
name|BYTE
case|:
block|{
name|byte
name|b
init|=
name|dis
operator|.
name|readByte
argument_list|()
decl_stmt|;
return|return
operator|(
name|long
operator|)
name|b
return|;
block|}
case|case
name|SHORT
case|:
block|{
name|short
name|s
init|=
name|dis
operator|.
name|readShort
argument_list|()
decl_stmt|;
return|return
operator|(
name|long
operator|)
name|s
return|;
block|}
case|case
name|DATE
case|:
block|{
return|return
name|Instant
operator|.
name|ofEpochMilli
argument_list|(
name|dis
operator|.
name|readLong
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
default|default:
return|return
name|super
operator|.
name|readObject
argument_list|(
name|dis
argument_list|)
return|;
block|}
block|}
else|else
return|return
name|super
operator|.
name|readObject
argument_list|(
name|dis
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|arraySize
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|Object
name|o
init|=
name|readVal
argument_list|(
name|fis
argument_list|)
decl_stmt|;
name|arraySize
operator|--
expr_stmt|;
if|if
condition|(
name|o
operator|==
name|END_OBJ
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|o
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

