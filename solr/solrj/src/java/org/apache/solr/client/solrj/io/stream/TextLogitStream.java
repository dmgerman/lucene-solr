begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|CloudSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|ClassificationEvaluation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExplanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ClusterState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Replica
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|Slice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkCoreNodeProps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|cloud
operator|.
name|ZkStateReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import

begin_class
DECL|class|TextLogitStream
specifier|public
class|class
name|TextLogitStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|zkHost
specifier|protected
name|String
name|zkHost
decl_stmt|;
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|params
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|name
specifier|protected
name|String
name|name
decl_stmt|;
DECL|field|outcome
specifier|protected
name|String
name|outcome
decl_stmt|;
DECL|field|positiveLabel
specifier|protected
name|int
name|positiveLabel
decl_stmt|;
DECL|field|threshold
specifier|protected
name|double
name|threshold
decl_stmt|;
DECL|field|weights
specifier|protected
name|List
argument_list|<
name|Double
argument_list|>
name|weights
decl_stmt|;
DECL|field|maxIterations
specifier|protected
name|int
name|maxIterations
decl_stmt|;
DECL|field|iteration
specifier|protected
name|int
name|iteration
decl_stmt|;
DECL|field|error
specifier|protected
name|double
name|error
decl_stmt|;
DECL|field|idfs
specifier|protected
name|List
argument_list|<
name|Double
argument_list|>
name|idfs
decl_stmt|;
DECL|field|evaluation
specifier|protected
name|ClassificationEvaluation
name|evaluation
decl_stmt|;
DECL|field|cache
specifier|protected
specifier|transient
name|SolrClientCache
name|cache
decl_stmt|;
DECL|field|isCloseCache
specifier|protected
specifier|transient
name|boolean
name|isCloseCache
decl_stmt|;
DECL|field|cloudSolrClient
specifier|protected
specifier|transient
name|CloudSolrClient
name|cloudSolrClient
decl_stmt|;
DECL|field|streamContext
specifier|protected
specifier|transient
name|StreamContext
name|streamContext
decl_stmt|;
DECL|field|executorService
specifier|protected
name|ExecutorService
name|executorService
decl_stmt|;
DECL|field|termsStream
specifier|protected
name|TupleStream
name|termsStream
decl_stmt|;
DECL|field|terms
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|terms
decl_stmt|;
DECL|field|learningRate
specifier|private
name|double
name|learningRate
init|=
literal|0.01
decl_stmt|;
DECL|field|lastError
specifier|private
name|double
name|lastError
init|=
literal|0
decl_stmt|;
DECL|method|TextLogitStream
specifier|public
name|TextLogitStream
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Map
name|params
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|field
parameter_list|,
name|TupleStream
name|termsStream
parameter_list|,
name|List
argument_list|<
name|Double
argument_list|>
name|weights
parameter_list|,
name|String
name|outcome
parameter_list|,
name|int
name|positiveLabel
parameter_list|,
name|double
name|threshold
parameter_list|,
name|int
name|maxIterations
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|collectionName
argument_list|,
name|zkHost
argument_list|,
name|params
argument_list|,
name|name
argument_list|,
name|field
argument_list|,
name|termsStream
argument_list|,
name|weights
argument_list|,
name|outcome
argument_list|,
name|positiveLabel
argument_list|,
name|threshold
argument_list|,
name|maxIterations
argument_list|,
name|iteration
argument_list|)
expr_stmt|;
block|}
comment|/**    *   logit(collection, zkHost="", features="a,b,c,d,e,f,g", outcome="y", maxIteration="20")    **/
DECL|method|TextLogitStream
specifier|public
name|TextLogitStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// grab all parameters out
name|String
name|collectionName
init|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpressionNamedParameter
argument_list|>
name|namedParams
init|=
name|factory
operator|.
name|getNamedOperands
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|zkHostExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"zkHost"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|streamExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|TupleStream
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice
if|if
condition|(
name|expression
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|+
name|namedParams
operator|.
name|size
argument_list|()
operator|+
name|streamExpressions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - unknown operands found"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
comment|// Collection Name
if|if
condition|(
literal|null
operator|==
name|collectionName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - collectionName expected as first operand"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
comment|// Named parameters - passed directly to solr as solrparams
if|if
condition|(
literal|0
operator|==
name|namedParams
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StreamExpressionNamedParameter
name|namedParam
range|:
name|namedParams
control|)
block|{
if|if
condition|(
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"zkHost"
argument_list|)
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|namedParam
operator|.
name|getName
argument_list|()
argument_list|,
name|namedParam
operator|.
name|getParameter
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|name
init|=
name|params
operator|.
name|get
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"name param cannot be null for TextLogitStream"
argument_list|)
throw|;
block|}
name|String
name|feature
init|=
name|params
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|feature
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"field param cannot be null for TextLogitStream"
argument_list|)
throw|;
block|}
name|TupleStream
name|stream
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|streamExpressions
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|stream
operator|=
name|factory
operator|.
name|constructStream
argument_list|(
name|streamExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"features must be present for TextLogitStream"
argument_list|)
throw|;
block|}
name|String
name|maxIterationsParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"maxIterations"
argument_list|)
decl_stmt|;
name|int
name|maxIterations
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|maxIterationsParam
operator|!=
literal|null
condition|)
block|{
name|maxIterations
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|maxIterationsParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"maxIterations"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"maxIterations param cannot be null for TextLogitStream"
argument_list|)
throw|;
block|}
name|String
name|outcomeParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"outcome"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outcomeParam
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"outcome"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"outcome param cannot be null for TextLogitStream"
argument_list|)
throw|;
block|}
name|String
name|positiveLabelParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"positiveLabel"
argument_list|)
decl_stmt|;
name|int
name|positiveLabel
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|positiveLabelParam
operator|!=
literal|null
condition|)
block|{
name|positiveLabel
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|positiveLabelParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"positiveLabel"
argument_list|)
expr_stmt|;
block|}
name|String
name|thresholdParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"threshold"
argument_list|)
decl_stmt|;
name|double
name|threshold
init|=
literal|0.5
decl_stmt|;
if|if
condition|(
name|thresholdParam
operator|!=
literal|null
condition|)
block|{
name|threshold
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|thresholdParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"threshold"
argument_list|)
expr_stmt|;
block|}
name|int
name|iteration
init|=
literal|0
decl_stmt|;
name|String
name|iterationParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"iteration"
argument_list|)
decl_stmt|;
if|if
condition|(
name|iterationParam
operator|!=
literal|null
condition|)
block|{
name|iteration
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|iterationParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"iteration"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Double
argument_list|>
name|weights
init|=
literal|null
decl_stmt|;
name|String
name|weightsParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"weights"
argument_list|)
decl_stmt|;
if|if
condition|(
name|weightsParam
operator|!=
literal|null
condition|)
block|{
name|weights
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|String
index|[]
name|weightsArray
init|=
name|weightsParam
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|weightString
range|:
name|weightsArray
control|)
block|{
name|weights
operator|.
name|add
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|weightString
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|remove
argument_list|(
literal|"weights"
argument_list|)
expr_stmt|;
block|}
comment|// zkHost, optional - if not provided then will look into factory list to get
name|String
name|zkHost
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|zkHostExpression
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getCollectionZkHost
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
condition|)
block|{
name|zkHost
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|==
name|zkHost
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - zkHost not found for collection '%s'"
argument_list|,
name|expression
argument_list|,
name|collectionName
argument_list|)
argument_list|)
throw|;
block|}
comment|// We've got all the required items
name|init
argument_list|(
name|collectionName
argument_list|,
name|zkHost
argument_list|,
name|params
argument_list|,
name|name
argument_list|,
name|feature
argument_list|,
name|stream
argument_list|,
name|weights
argument_list|,
name|outcomeParam
argument_list|,
name|positiveLabel
argument_list|,
name|threshold
argument_list|,
name|maxIterations
argument_list|,
name|iteration
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toExpression
argument_list|(
name|factory
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|toExpression
specifier|private
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|,
name|boolean
name|includeStreams
parameter_list|)
throws|throws
name|IOException
block|{
comment|// function name
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// collection
name|expression
operator|.
name|addParameter
argument_list|(
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeStreams
operator|&&
operator|!
operator|(
name|termsStream
operator|instanceof
name|TermsStream
operator|)
condition|)
block|{
if|if
condition|(
name|termsStream
operator|instanceof
name|Expressible
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|termsStream
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This TextLogitStream contains a non-expressible TupleStream - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
block|}
comment|// parameters
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|termsStream
operator|instanceof
name|TermsStream
condition|)
block|{
name|loadTerms
argument_list|()
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"terms"
argument_list|,
name|toString
argument_list|(
name|terms
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"outcome"
argument_list|,
name|outcome
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|weights
operator|!=
literal|null
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"weights"
argument_list|,
name|toString
argument_list|(
name|weights
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"maxIterations"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|maxIterations
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|iteration
operator|>
literal|0
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"iteration"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|iteration
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"positiveLabel"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|positiveLabel
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"threshold"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|threshold
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// zkHost
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"zkHost"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|zkHost
parameter_list|,
name|Map
name|params
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|feature
parameter_list|,
name|TupleStream
name|termsStream
parameter_list|,
name|List
argument_list|<
name|Double
argument_list|>
name|weights
parameter_list|,
name|String
name|outcome
parameter_list|,
name|int
name|positiveLabel
parameter_list|,
name|double
name|threshold
parameter_list|,
name|int
name|maxIterations
parameter_list|,
name|int
name|iteration
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collectionName
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|feature
expr_stmt|;
name|this
operator|.
name|termsStream
operator|=
name|termsStream
expr_stmt|;
name|this
operator|.
name|outcome
operator|=
name|outcome
expr_stmt|;
name|this
operator|.
name|positiveLabel
operator|=
name|positiveLabel
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
name|this
operator|.
name|weights
operator|=
name|weights
expr_stmt|;
name|this
operator|.
name|maxIterations
operator|=
name|maxIterations
expr_stmt|;
name|this
operator|.
name|iteration
operator|=
name|iteration
expr_stmt|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|context
operator|.
name|getSolrClientCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|streamContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|termsStream
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
comment|/**    * Opens the CloudSolrStream    *    ***/
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|isCloseCache
operator|=
literal|true
expr_stmt|;
name|cache
operator|=
operator|new
name|SolrClientCache
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isCloseCache
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|cloudSolrClient
operator|=
name|this
operator|.
name|cache
operator|.
name|getCloudSolrClient
argument_list|(
name|zkHost
argument_list|)
expr_stmt|;
name|this
operator|.
name|executorService
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareCachedThreadPool
argument_list|(
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"TextLogitSolrStream"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|List
argument_list|<
name|TupleStream
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|l
operator|.
name|add
argument_list|(
name|termsStream
argument_list|)
expr_stmt|;
return|return
name|l
return|;
block|}
DECL|method|getShardUrls
specifier|protected
name|List
argument_list|<
name|String
argument_list|>
name|getShardUrls
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|ZkStateReader
name|zkStateReader
init|=
name|cloudSolrClient
operator|.
name|getZkStateReader
argument_list|()
decl_stmt|;
name|Collection
argument_list|<
name|Slice
argument_list|>
name|slices
init|=
name|CloudSolrStream
operator|.
name|getSlices
argument_list|(
name|this
operator|.
name|collection
argument_list|,
name|zkStateReader
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ClusterState
name|clusterState
init|=
name|zkStateReader
operator|.
name|getClusterState
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|liveNodes
init|=
name|clusterState
operator|.
name|getLiveNodes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|baseUrls
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Slice
name|slice
range|:
name|slices
control|)
block|{
name|Collection
argument_list|<
name|Replica
argument_list|>
name|replicas
init|=
name|slice
operator|.
name|getReplicas
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Replica
argument_list|>
name|shuffler
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Replica
name|replica
range|:
name|replicas
control|)
block|{
if|if
condition|(
name|replica
operator|.
name|getState
argument_list|()
operator|==
name|Replica
operator|.
name|State
operator|.
name|ACTIVE
operator|&&
name|liveNodes
operator|.
name|contains
argument_list|(
name|replica
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|shuffler
operator|.
name|add
argument_list|(
name|replica
argument_list|)
expr_stmt|;
block|}
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|shuffler
argument_list|,
operator|new
name|Random
argument_list|()
argument_list|)
expr_stmt|;
name|Replica
name|rep
init|=
name|shuffler
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ZkCoreNodeProps
name|zkProps
init|=
operator|new
name|ZkCoreNodeProps
argument_list|(
name|rep
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|zkProps
operator|.
name|getCoreUrl
argument_list|()
decl_stmt|;
name|baseUrls
operator|.
name|add
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|baseUrls
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|callShards
specifier|private
name|List
argument_list|<
name|Future
argument_list|<
name|Tuple
argument_list|>
argument_list|>
name|callShards
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|baseUrls
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|Tuple
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|baseUrl
range|:
name|baseUrls
control|)
block|{
name|LogitCall
name|lc
init|=
operator|new
name|LogitCall
argument_list|(
name|baseUrl
argument_list|,
name|this
operator|.
name|params
argument_list|,
name|this
operator|.
name|field
argument_list|,
name|this
operator|.
name|terms
argument_list|,
name|this
operator|.
name|weights
argument_list|,
name|this
operator|.
name|outcome
argument_list|,
name|this
operator|.
name|positiveLabel
argument_list|,
name|this
operator|.
name|learningRate
argument_list|,
name|this
operator|.
name|iteration
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Tuple
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
name|lc
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
return|return
name|futures
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCloseCache
condition|)
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|termsStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Return the stream sort - ie, the order in which records are returned */
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExplanation
name|explanation
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|explanation
operator|.
name|setFunctionName
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpressionType
argument_list|(
name|Explanation
operator|.
name|ExpressionType
operator|.
name|MACHINE_LEARNING_MODEL
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|addChild
argument_list|(
name|termsStream
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|explanation
return|;
block|}
DECL|method|loadTerms
specifier|public
name|void
name|loadTerms
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|terms
operator|==
literal|null
condition|)
block|{
name|termsStream
operator|.
name|open
argument_list|()
expr_stmt|;
name|this
operator|.
name|terms
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|idfs
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Tuple
name|termTuple
init|=
name|termsStream
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|termTuple
operator|.
name|EOF
condition|)
block|{
break|break;
block|}
else|else
block|{
name|terms
operator|.
name|add
argument_list|(
name|termTuple
operator|.
name|getString
argument_list|(
literal|"term_s"
argument_list|)
argument_list|)
expr_stmt|;
name|idfs
operator|.
name|add
argument_list|(
name|termTuple
operator|.
name|getDouble
argument_list|(
literal|"idf_d"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|termsStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
operator|++
name|iteration
operator|>
name|maxIterations
condition|)
block|{
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|this
operator|.
name|idfs
operator|==
literal|null
condition|)
block|{
name|loadTerms
argument_list|()
expr_stmt|;
if|if
condition|(
name|weights
operator|!=
literal|null
operator|&&
name|terms
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|!=
name|weights
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - the number of weights must be %d, found %d"
argument_list|,
name|terms
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
name|weights
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|List
argument_list|<
name|Double
argument_list|>
argument_list|>
name|allWeights
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|this
operator|.
name|evaluation
operator|=
operator|new
name|ClassificationEvaluation
argument_list|()
expr_stmt|;
name|this
operator|.
name|error
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Tuple
argument_list|>
name|logitCall
range|:
name|callShards
argument_list|(
name|getShardUrls
argument_list|()
argument_list|)
control|)
block|{
name|Tuple
name|tuple
init|=
name|logitCall
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|shardWeights
init|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"weights"
argument_list|)
decl_stmt|;
name|allWeights
operator|.
name|add
argument_list|(
name|shardWeights
argument_list|)
expr_stmt|;
name|this
operator|.
name|error
operator|+=
name|tuple
operator|.
name|getDouble
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|Map
name|shardEvaluation
init|=
operator|(
name|Map
operator|)
name|tuple
operator|.
name|get
argument_list|(
literal|"evaluation"
argument_list|)
decl_stmt|;
name|this
operator|.
name|evaluation
operator|.
name|addEvaluation
argument_list|(
name|shardEvaluation
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|weights
operator|=
name|averageWeights
argument_list|(
name|allWeights
argument_list|)
expr_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"id"
argument_list|,
name|name
operator|+
literal|"_"
operator|+
name|iteration
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"name_s"
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"field_s"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"terms_ss"
argument_list|,
name|terms
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"iteration_i"
argument_list|,
name|iteration
argument_list|)
expr_stmt|;
if|if
condition|(
name|weights
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"weights_ds"
argument_list|,
name|weights
argument_list|)
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
literal|"error_d"
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|evaluation
operator|.
name|putToMap
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"alpha_d"
argument_list|,
name|this
operator|.
name|learningRate
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"idfs_ds"
argument_list|,
name|this
operator|.
name|idfs
argument_list|)
expr_stmt|;
if|if
condition|(
name|iteration
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|lastError
operator|<=
name|error
condition|)
block|{
name|this
operator|.
name|learningRate
operator|*=
literal|0.5
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|learningRate
operator|*=
literal|1.05
expr_stmt|;
block|}
block|}
name|lastError
operator|=
name|error
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|averageWeights
specifier|private
name|List
argument_list|<
name|Double
argument_list|>
name|averageWeights
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|Double
argument_list|>
argument_list|>
name|allWeights
parameter_list|)
block|{
name|double
index|[]
name|working
init|=
operator|new
name|double
index|[
name|allWeights
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|Double
argument_list|>
name|shardWeights
range|:
name|allWeights
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|working
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|working
index|[
name|i
index|]
operator|+=
name|shardWeights
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|working
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|working
index|[
name|i
index|]
operator|=
name|working
index|[
name|i
index|]
operator|/
name|allWeights
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
name|List
argument_list|<
name|Double
argument_list|>
name|ave
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|double
name|d
range|:
name|working
control|)
block|{
name|ave
operator|.
name|add
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
return|return
name|ave
return|;
block|}
DECL|method|toString
specifier|static
name|String
name|toString
parameter_list|(
name|List
name|items
parameter_list|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Object
name|item
range|:
name|items
control|)
block|{
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|item
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|class|TermsStream
specifier|protected
class|class
name|TermsStream
extends|extends
name|TupleStream
block|{
DECL|field|terms
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|terms
decl_stmt|;
DECL|field|it
specifier|private
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
decl_stmt|;
DECL|method|TermsStream
specifier|public
name|TermsStream
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|terms
parameter_list|)
block|{
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{}
annotation|@
name|Override
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<>
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|it
operator|=
name|this
operator|.
name|terms
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|HashMap
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
literal|"term_s"
argument_list|,
name|it
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"score_f"
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
literal|"non-expressible"
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|Explanation
operator|.
name|ExpressionType
operator|.
name|STREAM_SOURCE
argument_list|)
operator|.
name|withExpression
argument_list|(
literal|"non-expressible"
argument_list|)
return|;
block|}
block|}
DECL|class|LogitCall
specifier|protected
class|class
name|LogitCall
implements|implements
name|Callable
argument_list|<
name|Tuple
argument_list|>
block|{
DECL|field|baseUrl
specifier|private
name|String
name|baseUrl
decl_stmt|;
DECL|field|feature
specifier|private
name|String
name|feature
decl_stmt|;
DECL|field|terms
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|terms
decl_stmt|;
DECL|field|weights
specifier|private
name|List
argument_list|<
name|Double
argument_list|>
name|weights
decl_stmt|;
DECL|field|iteration
specifier|private
name|int
name|iteration
decl_stmt|;
DECL|field|outcome
specifier|private
name|String
name|outcome
decl_stmt|;
DECL|field|positiveLabel
specifier|private
name|int
name|positiveLabel
decl_stmt|;
DECL|field|learningRate
specifier|private
name|double
name|learningRate
decl_stmt|;
DECL|field|paramsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramsMap
decl_stmt|;
DECL|method|LogitCall
specifier|public
name|LogitCall
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramsMap
parameter_list|,
name|String
name|feature
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|terms
parameter_list|,
name|List
argument_list|<
name|Double
argument_list|>
name|weights
parameter_list|,
name|String
name|outcome
parameter_list|,
name|int
name|positiveLabel
parameter_list|,
name|double
name|learningRate
parameter_list|,
name|int
name|iteration
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
name|this
operator|.
name|feature
operator|=
name|feature
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|terms
expr_stmt|;
name|this
operator|.
name|weights
operator|=
name|weights
expr_stmt|;
name|this
operator|.
name|iteration
operator|=
name|iteration
expr_stmt|;
name|this
operator|.
name|outcome
operator|=
name|outcome
expr_stmt|;
name|this
operator|.
name|positiveLabel
operator|=
name|positiveLabel
expr_stmt|;
name|this
operator|.
name|learningRate
operator|=
name|learningRate
expr_stmt|;
name|this
operator|.
name|paramsMap
operator|=
name|paramsMap
expr_stmt|;
block|}
DECL|method|call
specifier|public
name|Tuple
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|HttpSolrClient
name|solrClient
init|=
name|cache
operator|.
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"distrib"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!tlogit}"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"feature"
argument_list|,
name|feature
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"terms"
argument_list|,
name|TextLogitStream
operator|.
name|toString
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"idfs"
argument_list|,
name|TextLogitStream
operator|.
name|toString
argument_list|(
name|idfs
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|paramsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|paramsMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|weights
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|add
argument_list|(
literal|"weights"
argument_list|,
name|TextLogitStream
operator|.
name|toString
argument_list|(
name|weights
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"iteration"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|iteration
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"outcome"
argument_list|,
name|outcome
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"positiveLabel"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|positiveLabel
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"threshold"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|threshold
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"alpha"
argument_list|,
name|Double
operator|.
name|toString
argument_list|(
name|learningRate
argument_list|)
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|,
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|request
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|NamedList
name|res
init|=
name|response
operator|.
name|getResponse
argument_list|()
decl_stmt|;
name|NamedList
name|logit
init|=
operator|(
name|NamedList
operator|)
name|res
operator|.
name|get
argument_list|(
literal|"logit"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Double
argument_list|>
name|shardWeights
init|=
operator|(
name|List
argument_list|<
name|Double
argument_list|>
operator|)
name|logit
operator|.
name|get
argument_list|(
literal|"weights"
argument_list|)
decl_stmt|;
name|double
name|shardError
init|=
operator|(
name|double
operator|)
name|logit
operator|.
name|get
argument_list|(
literal|"error"
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"error"
argument_list|,
name|shardError
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"weights"
argument_list|,
name|shardWeights
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"evaluation"
argument_list|,
name|logit
operator|.
name|get
argument_list|(
literal|"evaluation"
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

