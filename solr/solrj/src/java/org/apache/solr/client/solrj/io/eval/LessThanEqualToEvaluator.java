begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.eval
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|eval
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_class
DECL|class|LessThanEqualToEvaluator
specifier|public
class|class
name|LessThanEqualToEvaluator
extends|extends
name|BooleanEvaluator
block|{
DECL|field|serialVersionUID
specifier|protected
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|method|LessThanEqualToEvaluator
specifier|public
name|LessThanEqualToEvaluator
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|expression
argument_list|,
name|factory
argument_list|)
expr_stmt|;
if|if
condition|(
name|subEvaluators
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting at least two values but found %d"
argument_list|,
name|expression
argument_list|,
name|subEvaluators
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|evaluate
specifier|public
name|Boolean
name|evaluate
parameter_list|(
name|Tuple
name|tuple
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|results
init|=
name|evaluateAll
argument_list|(
name|tuple
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
name|String
name|message
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|1
operator|==
name|results
operator|.
name|size
argument_list|()
condition|)
block|{
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s(...) only works with at least 2 values but 1 was provided"
argument_list|,
name|constructingFactory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|message
operator|=
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"%s(...) only works with at least 2 values but 0 were provided"
argument_list|,
name|constructingFactory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|message
argument_list|)
throw|;
block|}
name|Checker
name|checker
init|=
name|constructChecker
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|result
lambda|->
literal|null
operator|==
name|result
argument_list|)
condition|)
block|{
throw|throw
argument_list|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unable to check %s(...) because a null value was found"
argument_list|,
name|constructingFactory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
argument_list|)
block|;     }
if|if
condition|(
name|results
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|result
lambda|->
operator|!
name|checker
operator|.
name|isCorrectType
argument_list|(
name|result
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
argument_list|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unable to check %s(...) of differing types [%s]"
argument_list|,
name|constructingFactory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|results
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|item
lambda|->
name|item
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
argument_list|)
block|;     }
for|for
control|(
name|int
name|idx
init|=
literal|1
init|;
name|idx
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
operator|!
name|checker
operator|.
name|test
argument_list|(
name|results
operator|.
name|get
argument_list|(
name|idx
operator|-
literal|1
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|idx
argument_list|)
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
DECL|method|constructChecker
specifier|private
name|Checker
name|constructChecker
parameter_list|(
name|Object
name|fromValue
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
literal|null
operator|==
name|fromValue
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unable to check %s(...) because a null value was found"
argument_list|,
name|constructingFactory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|fromValue
operator|instanceof
name|Number
condition|)
block|{
return|return
operator|new
name|NumberChecker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|Object
name|left
parameter_list|,
name|Object
name|right
parameter_list|)
block|{
return|return
operator|(
operator|new
name|BigDecimal
argument_list|(
name|left
operator|.
name|toString
argument_list|()
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|right
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|<=
literal|0
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|fromValue
operator|instanceof
name|String
condition|)
block|{
return|return
operator|new
name|StringChecker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|test
parameter_list|(
name|Object
name|left
parameter_list|,
name|Object
name|right
parameter_list|)
block|{
return|return
operator|(
operator|(
name|String
operator|)
name|left
operator|)
operator|.
name|compareToIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|right
argument_list|)
operator|<=
literal|0
return|;
block|}
block|}
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unable to check %s(...) for values of type '%s'"
argument_list|,
name|constructingFactory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|,
name|fromValue
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

