begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.request
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|MapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|JsonSchemaValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Template
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ValidatingJsonMap
operator|.
name|NOT_NULL
import|;
end_import

begin_class
DECL|class|V1toV2ApiMapper
specifier|public
class|class
name|V1toV2ApiMapper
block|{
DECL|field|mapping
specifier|private
specifier|static
name|EnumMap
argument_list|<
name|CollectionAction
argument_list|,
name|ActionInfo
argument_list|>
name|mapping
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|CollectionAction
operator|.
name|class
argument_list|)
decl_stmt|;
static|static
block|{
for|for
control|(
name|CollectionApiMapping
operator|.
name|Meta
name|meta
range|:
name|CollectionApiMapping
operator|.
name|Meta
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|meta
operator|.
name|action
operator|!=
literal|null
condition|)
name|mapping
operator|.
name|put
argument_list|(
name|meta
operator|.
name|action
argument_list|,
operator|new
name|ActionInfo
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|ActionInfo
specifier|private
specifier|static
class|class
name|ActionInfo
block|{
DECL|field|meta
name|CollectionApiMapping
operator|.
name|Meta
name|meta
decl_stmt|;
DECL|field|path
name|String
name|path
decl_stmt|;
DECL|field|template
name|Template
name|template
decl_stmt|;
DECL|field|validator
name|JsonSchemaValidator
name|validator
decl_stmt|;
DECL|method|ActionInfo
name|ActionInfo
parameter_list|(
name|CollectionApiMapping
operator|.
name|Meta
name|meta
parameter_list|)
block|{
name|this
operator|.
name|meta
operator|=
name|meta
expr_stmt|;
block|}
comment|//do this lazily because , it makes no sense if this is not used
DECL|method|setPath
specifier|synchronized
name|void
name|setPath
parameter_list|()
block|{
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|ValidatingJsonMap
name|m
init|=
name|Utils
operator|.
name|getSpec
argument_list|(
name|meta
operator|.
name|getEndPoint
argument_list|()
operator|.
name|getSpecName
argument_list|()
argument_list|)
operator|.
name|getSpec
argument_list|()
decl_stmt|;
name|Object
name|o
init|=
name|Utils
operator|.
name|getObjectByPath
argument_list|(
name|m
argument_list|,
literal|false
argument_list|,
literal|"url/paths"
argument_list|)
decl_stmt|;
name|String
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|o
operator|instanceof
name|List
condition|)
block|{
comment|//choose the shortest path
for|for
control|(
name|Object
name|s
range|:
operator|(
name|List
operator|)
name|o
control|)
block|{
if|if
condition|(
name|result
operator|==
literal|null
operator|||
name|s
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
operator|<
name|result
operator|.
name|length
argument_list|()
condition|)
name|result
operator|=
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|o
operator|instanceof
name|String
condition|)
block|{
name|result
operator|=
operator|(
name|String
operator|)
name|o
expr_stmt|;
block|}
name|path
operator|=
name|result
expr_stmt|;
name|template
operator|=
operator|new
name|Template
argument_list|(
name|path
argument_list|,
name|Template
operator|.
name|BRACES_PLACEHOLDER_PATTERN
argument_list|)
expr_stmt|;
name|validator
operator|=
operator|new
name|JsonSchemaValidator
argument_list|(
name|m
operator|.
name|getMap
argument_list|(
literal|"commands"
argument_list|,
name|NOT_NULL
argument_list|)
operator|.
name|getMap
argument_list|(
name|meta
operator|.
name|commandName
argument_list|,
name|NOT_NULL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|convert
specifier|public
name|V2Request
operator|.
name|Builder
name|convert
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|String
index|[]
name|list
init|=
operator|new
name|String
index|[
name|template
operator|.
name|variables
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|MapWriter
name|data
init|=
name|serializeToV2Format
argument_list|(
name|params
argument_list|,
name|list
argument_list|)
decl_stmt|;
name|Map
name|o
init|=
name|data
operator|.
name|toMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|V2Request
operator|.
name|Builder
argument_list|(
name|template
operator|.
name|apply
argument_list|(
name|s
lambda|->
block|{
name|int
name|idx
init|=
name|template
operator|.
name|variables
operator|.
name|indexOf
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|list
index|[
name|idx
index|]
return|;
block|}
argument_list|)
argument_list|)
operator|.
name|withMethod
argument_list|(
name|meta
operator|.
name|getHttpMethod
argument_list|()
argument_list|)
operator|.
name|withPayload
argument_list|(
name|o
argument_list|)
return|;
block|}
DECL|method|serializeToV2Format
specifier|private
name|MapWriter
name|serializeToV2Format
parameter_list|(
name|SolrParams
name|params
parameter_list|,
name|String
index|[]
name|list
parameter_list|)
block|{
return|return
name|ew
lambda|->
name|ew
operator|.
name|put
argument_list|(
name|meta
operator|.
name|commandName
argument_list|,
operator|(
name|MapWriter
operator|)
name|ew1
lambda|->
block|{
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
operator|=
name|params
operator|.
name|getParameterNamesIterator
argument_list|()
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|subProperties
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|key
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|CoreAdminParams
operator|.
name|ACTION
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
continue|continue;
name|Object
name|substitute
init|=
name|meta
operator|.
name|getReverseParamSubstitute
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|int
name|idx
init|=
name|template
operator|.
name|variables
operator|.
name|indexOf
argument_list|(
name|substitute
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
name|String
name|val
init|=
name|params
operator|.
name|get
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|substitute
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"null value is not valid for "
operator|+
name|key
argument_list|)
throw|;
name|list
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|substitute
operator|instanceof
name|Pair
condition|)
block|{
comment|//this is a nested object
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|(
name|Pair
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|substitute
decl_stmt|;
if|if
condition|(
name|subProperties
operator|==
literal|null
condition|)
name|subProperties
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|subProperties
operator|.
name|computeIfAbsent
argument_list|(
name|p
operator|.
name|first
argument_list|()
argument_list|,
name|s
lambda|->
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|p
operator|.
name|second
argument_list|()
argument_list|,
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Object
name|val
init|=
name|params
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ew1
operator|.
name|put
argument_list|(
name|substitute
operator|.
name|toString
argument_list|()
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|subProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|e
range|:
name|subProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ew1
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|)
class|;
block|}
end_class

begin_function
unit|}     public
DECL|method|convert
specifier|static
name|V2Request
operator|.
name|Builder
name|convert
parameter_list|(
name|CollectionAdminRequest
name|request
parameter_list|)
block|{
name|ActionInfo
name|info
init|=
name|mapping
operator|.
name|get
argument_list|(
name|request
operator|.
name|action
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unsupported action :"
operator|+
name|request
operator|.
name|action
argument_list|)
throw|;
if|if
condition|(
name|info
operator|.
name|meta
operator|.
name|getHttpMethod
argument_list|()
operator|==
name|SolrRequest
operator|.
name|METHOD
operator|.
name|POST
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|path
operator|==
literal|null
condition|)
name|info
operator|.
name|setPath
argument_list|()
expr_stmt|;
return|return
name|info
operator|.
name|convert
argument_list|(
name|request
operator|.
name|getParams
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
end_function

unit|}
end_unit

