begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
operator|.
name|ExpressionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExplanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Sends a commit message to a SolrCloud collection  */
end_comment

begin_class
DECL|class|CommitStream
specifier|public
class|class
name|CommitStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
DECL|field|LOG
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|MethodHandles
operator|.
name|lookup
argument_list|()
operator|.
name|lookupClass
argument_list|()
argument_list|)
decl_stmt|;
comment|// Part of expression / passed in
DECL|field|collection
specifier|private
name|String
name|collection
decl_stmt|;
DECL|field|zkHost
specifier|private
name|String
name|zkHost
decl_stmt|;
DECL|field|waitFlush
specifier|private
name|boolean
name|waitFlush
decl_stmt|;
DECL|field|waitSearcher
specifier|private
name|boolean
name|waitSearcher
decl_stmt|;
DECL|field|softCommit
specifier|private
name|boolean
name|softCommit
decl_stmt|;
DECL|field|commitBatchSize
specifier|private
name|int
name|commitBatchSize
decl_stmt|;
DECL|field|tupleSource
specifier|private
name|TupleStream
name|tupleSource
decl_stmt|;
DECL|field|clientCache
specifier|private
specifier|transient
name|SolrClientCache
name|clientCache
decl_stmt|;
DECL|field|docsSinceCommit
specifier|private
name|long
name|docsSinceCommit
decl_stmt|;
DECL|method|CommitStream
specifier|public
name|CommitStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|collectionName
init|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|String
name|zkHost
init|=
name|findZkHost
argument_list|(
name|factory
argument_list|,
name|collectionName
argument_list|,
name|expression
argument_list|)
decl_stmt|;
name|int
name|batchSize
init|=
name|factory
operator|.
name|getIntOperand
argument_list|(
name|expression
argument_list|,
literal|"batchSize"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|boolean
name|waitFlush
init|=
name|factory
operator|.
name|getBooleanOperand
argument_list|(
name|expression
argument_list|,
literal|"waitFlush"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|waitSearcher
init|=
name|factory
operator|.
name|getBooleanOperand
argument_list|(
name|expression
argument_list|,
literal|"waitSearcher"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|softCommit
init|=
name|factory
operator|.
name|getBooleanOperand
argument_list|(
name|expression
argument_list|,
literal|"softCommit"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|collectionName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - collectionName expected as first operand"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|zkHost
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - zkHost not found for collection '%s'"
argument_list|,
name|expression
argument_list|,
name|collectionName
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|batchSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - batchSize cannot be less than 0 but is '%d'"
argument_list|,
name|expression
argument_list|,
name|batchSize
argument_list|)
argument_list|)
throw|;
block|}
comment|//Extract underlying TupleStream.
name|List
argument_list|<
name|StreamExpression
argument_list|>
name|streamExpressions
init|=
name|factory
operator|.
name|getExpressionOperandsRepresentingTypes
argument_list|(
name|expression
argument_list|,
name|Expressible
operator|.
name|class
argument_list|,
name|TupleStream
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
literal|1
operator|!=
name|streamExpressions
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Invalid expression %s - expecting a single stream but found %d"
argument_list|,
name|expression
argument_list|,
name|streamExpressions
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|StreamExpression
name|sourceStreamExpression
init|=
name|streamExpressions
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|collectionName
argument_list|,
name|factory
operator|.
name|constructStream
argument_list|(
name|sourceStreamExpression
argument_list|)
argument_list|,
name|zkHost
argument_list|,
name|batchSize
argument_list|,
name|waitFlush
argument_list|,
name|waitSearcher
argument_list|,
name|softCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|CommitStream
specifier|public
name|CommitStream
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TupleStream
name|tupleSource
parameter_list|,
name|String
name|zkHost
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
name|waitFlush
parameter_list|,
name|boolean
name|waitSearcher
parameter_list|,
name|boolean
name|softCommit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|batchSize
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"batchSize '%d' cannot be less than 0."
argument_list|,
name|batchSize
argument_list|)
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|collectionName
argument_list|,
name|tupleSource
argument_list|,
name|zkHost
argument_list|,
name|batchSize
argument_list|,
name|waitFlush
argument_list|,
name|waitSearcher
argument_list|,
name|softCommit
argument_list|)
expr_stmt|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|TupleStream
name|tupleSource
parameter_list|,
name|String
name|zkHost
parameter_list|,
name|int
name|batchSize
parameter_list|,
name|boolean
name|waitFlush
parameter_list|,
name|boolean
name|waitSearcher
parameter_list|,
name|boolean
name|softCommit
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collectionName
expr_stmt|;
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|commitBatchSize
operator|=
name|batchSize
expr_stmt|;
name|this
operator|.
name|waitFlush
operator|=
name|waitFlush
expr_stmt|;
name|this
operator|.
name|waitSearcher
operator|=
name|waitSearcher
expr_stmt|;
name|this
operator|.
name|softCommit
operator|=
name|softCommit
expr_stmt|;
name|this
operator|.
name|tupleSource
operator|=
name|tupleSource
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
name|tupleSource
operator|.
name|open
argument_list|()
expr_stmt|;
name|clientCache
operator|=
operator|new
name|SolrClientCache
argument_list|()
expr_stmt|;
name|docsSinceCommit
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
name|Tuple
name|tuple
init|=
name|tupleSource
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|tuple
operator|.
name|EOF
condition|)
block|{
if|if
condition|(
name|docsSinceCommit
operator|>
literal|0
condition|)
block|{
name|sendCommit
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// if the read document contains field 'batchIndexed' then it's a summary
comment|// document and we can update our count based on it's value. If not then
comment|// just increment by 1
if|if
condition|(
name|tuple
operator|.
name|fields
operator|.
name|containsKey
argument_list|(
name|UpdateStream
operator|.
name|BATCH_INDEXED_FIELD_NAME
argument_list|)
operator|&&
name|isInteger
argument_list|(
name|tuple
operator|.
name|getString
argument_list|(
name|UpdateStream
operator|.
name|BATCH_INDEXED_FIELD_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|docsSinceCommit
operator|+=
name|Integer
operator|.
name|parseInt
argument_list|(
name|tuple
operator|.
name|getString
argument_list|(
name|UpdateStream
operator|.
name|BATCH_INDEXED_FIELD_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docsSinceCommit
operator|+=
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|commitBatchSize
operator|>
literal|0
operator|&&
name|docsSinceCommit
operator|>=
name|commitBatchSize
condition|)
block|{
comment|// if commitBatchSize == 0 then the tuple.EOF above will end up calling sendCommit()
name|sendCommit
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|tuple
return|;
block|}
DECL|method|isInteger
specifier|private
name|boolean
name|isInteger
parameter_list|(
name|String
name|string
parameter_list|)
block|{
try|try
block|{
name|Integer
operator|.
name|parseInt
argument_list|(
name|string
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|clientCache
operator|.
name|close
argument_list|()
expr_stmt|;
name|tupleSource
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
name|tupleSource
operator|.
name|getStreamSort
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|TupleStream
argument_list|>
name|sourceList
init|=
operator|new
name|ArrayList
argument_list|<
name|TupleStream
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|sourceList
operator|.
name|add
argument_list|(
name|tupleSource
argument_list|)
expr_stmt|;
return|return
name|sourceList
return|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|toExpression
argument_list|(
name|factory
argument_list|,
literal|true
argument_list|)
return|;
block|}
DECL|method|toExpression
specifier|private
name|StreamExpression
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|,
name|boolean
name|includeStreams
parameter_list|)
throws|throws
name|IOException
block|{
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"zkHost"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"batchSize"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|commitBatchSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"waitFlush"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|waitFlush
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"waitSearcher"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|waitSearcher
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"softCommit"
argument_list|,
name|Boolean
operator|.
name|toString
argument_list|(
name|softCommit
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|includeStreams
condition|)
block|{
if|if
condition|(
name|tupleSource
operator|instanceof
name|Expressible
condition|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|(
operator|(
name|Expressible
operator|)
name|tupleSource
operator|)
operator|.
name|toExpression
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"This CommitStream contains a non-expressible TupleStream - it cannot be converted to an expression"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|expression
operator|.
name|addParameter
argument_list|(
literal|"<stream>"
argument_list|)
expr_stmt|;
block|}
return|return
name|expression
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// A commit stream is backward wrt the order in the explanation. This stream is the "child"
comment|// while the collection we're committing to is the parent.
name|StreamExplanation
name|explanation
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|+
literal|"-datastore"
argument_list|)
decl_stmt|;
name|explanation
operator|.
name|setFunctionName
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"solr (%s)"
argument_list|,
name|collection
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setImplementingClass
argument_list|(
literal|"Solr/Lucene"
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|DATASTORE
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|setExpression
argument_list|(
literal|"Commit into "
operator|+
name|collection
argument_list|)
expr_stmt|;
comment|// child is a stream so add it at this point
name|StreamExplanation
name|child
init|=
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|child
operator|.
name|setFunctionName
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
name|factory
operator|.
name|getFunctionName
argument_list|(
name|getClass
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|child
operator|.
name|setImplementingClass
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|setExpressionType
argument_list|(
name|ExpressionType
operator|.
name|STREAM_DECORATOR
argument_list|)
expr_stmt|;
name|child
operator|.
name|setExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|child
operator|.
name|addChild
argument_list|(
name|tupleSource
operator|.
name|toExplanation
argument_list|(
name|factory
argument_list|)
argument_list|)
expr_stmt|;
name|explanation
operator|.
name|addChild
argument_list|(
name|child
argument_list|)
expr_stmt|;
return|return
name|explanation
return|;
block|}
annotation|@
name|Override
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|!=
name|context
operator|.
name|getSolrClientCache
argument_list|()
condition|)
block|{
name|this
operator|.
name|clientCache
operator|=
name|context
operator|.
name|getSolrClientCache
argument_list|()
expr_stmt|;
comment|// this overrides the one created in open
block|}
name|this
operator|.
name|tupleSource
operator|.
name|setStreamContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
DECL|method|findZkHost
specifier|private
name|String
name|findZkHost
parameter_list|(
name|StreamFactory
name|factory
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|StreamExpression
name|expression
parameter_list|)
block|{
name|StreamExpressionNamedParameter
name|zkHostExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"zkHost"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|zkHostExpression
condition|)
block|{
name|String
name|zkHost
init|=
name|factory
operator|.
name|getCollectionZkHost
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
return|return
name|factory
operator|.
name|getDefaultZkHost
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|zkHost
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
condition|)
block|{
return|return
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
DECL|method|sendCommit
specifier|private
name|void
name|sendCommit
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|clientCache
operator|.
name|getCloudSolrClient
argument_list|(
name|zkHost
argument_list|)
operator|.
name|commit
argument_list|(
name|collection
argument_list|,
name|waitFlush
argument_list|,
name|waitSearcher
argument_list|,
name|softCommit
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SolrServerException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unable to commit documents to collection '%s' due to unexpected error."
argument_list|,
name|collection
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|String
name|className
init|=
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|message
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"Unexpected error when committing documents to collection %s- %s:%s"
argument_list|,
name|collection
argument_list|,
name|className
argument_list|,
name|message
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

