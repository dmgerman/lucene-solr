begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.response
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|ResponseParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|noggit
operator|.
name|ObjectBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Delegation Token responses  */
end_comment

begin_class
DECL|class|DelegationTokenResponse
specifier|public
specifier|abstract
class|class
name|DelegationTokenResponse
extends|extends
name|SolrResponseBase
block|{
DECL|class|Get
specifier|public
specifier|static
class|class
name|Get
extends|extends
name|DelegationTokenResponse
block|{
comment|/**      * Get the urlString to be used as the delegation token      */
DECL|method|getDelegationToken
specifier|public
name|String
name|getDelegationToken
parameter_list|()
block|{
try|try
block|{
name|Map
name|map
init|=
operator|(
name|Map
operator|)
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"Token"
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|map
operator|.
name|get
argument_list|(
literal|"urlString"
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"parsing error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
block|}
DECL|class|Renew
specifier|public
specifier|static
class|class
name|Renew
extends|extends
name|DelegationTokenResponse
block|{
DECL|method|getExpirationTime
specifier|public
name|Long
name|getExpirationTime
parameter_list|()
block|{
try|try
block|{
return|return
operator|(
name|Long
operator|)
name|getResponse
argument_list|()
operator|.
name|get
argument_list|(
literal|"long"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"parsing error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
DECL|class|Cancel
specifier|public
specifier|static
class|class
name|Cancel
extends|extends
name|DelegationTokenResponse
block|{   }
comment|/**    * ResponseParser for JsonMaps.  Used for Get and Renew DelegationToken responses.    */
DECL|class|JsonMapResponseParser
specifier|public
specifier|static
class|class
name|JsonMapResponseParser
extends|extends
name|ResponseParser
block|{
annotation|@
name|Override
DECL|method|getWriterType
specifier|public
name|String
name|getWriterType
parameter_list|()
block|{
return|return
literal|"json"
return|;
block|}
annotation|@
name|Override
DECL|method|processResponse
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|processResponse
parameter_list|(
name|InputStream
name|body
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
name|Map
name|map
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ObjectBuilder
name|builder
init|=
operator|new
name|ObjectBuilder
argument_list|(
operator|new
name|JSONParser
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|body
argument_list|,
name|encoding
operator|==
literal|null
condition|?
literal|"UTF-8"
else|:
name|encoding
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|=
operator|(
name|Map
operator|)
name|builder
operator|.
name|getObject
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
decl||
name|JSONParser
operator|.
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|SERVER_ERROR
argument_list|,
literal|"parsing error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NamedList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|NamedList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|map
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
annotation|@
name|Override
DECL|method|processResponse
specifier|public
name|NamedList
argument_list|<
name|Object
argument_list|>
name|processResponse
parameter_list|(
name|Reader
name|reader
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot handle character stream"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getContentType
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
literal|"application/json"
return|;
block|}
annotation|@
name|Override
DECL|method|getVersion
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"1"
return|;
block|}
block|}
block|}
end_class

end_unit

