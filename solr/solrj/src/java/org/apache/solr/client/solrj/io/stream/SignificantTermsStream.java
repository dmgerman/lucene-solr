begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.io.stream
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|SolrClientCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|comp
operator|.
name|StreamComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|Expressible
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExplanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionNamedParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionParameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamExpressionValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|io
operator|.
name|stream
operator|.
name|expr
operator|.
name|StreamFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|QueryRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|response
operator|.
name|QueryResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|ModifiableSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|ExecutorUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|NamedList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|SolrjNamedThreadFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CommonParams
operator|.
name|DISTRIB
import|;
end_import

begin_class
DECL|class|SignificantTermsStream
specifier|public
class|class
name|SignificantTermsStream
extends|extends
name|TupleStream
implements|implements
name|Expressible
block|{
DECL|field|serialVersionUID
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1
decl_stmt|;
DECL|field|zkHost
specifier|protected
name|String
name|zkHost
decl_stmt|;
DECL|field|collection
specifier|protected
name|String
name|collection
decl_stmt|;
DECL|field|params
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
decl_stmt|;
DECL|field|tupleIterator
specifier|protected
name|Iterator
argument_list|<
name|Tuple
argument_list|>
name|tupleIterator
decl_stmt|;
DECL|field|field
specifier|protected
name|String
name|field
decl_stmt|;
DECL|field|numTerms
specifier|protected
name|int
name|numTerms
decl_stmt|;
DECL|field|minDocFreq
specifier|protected
name|float
name|minDocFreq
decl_stmt|;
DECL|field|maxDocFreq
specifier|protected
name|float
name|maxDocFreq
decl_stmt|;
DECL|field|minTermLength
specifier|protected
name|int
name|minTermLength
decl_stmt|;
DECL|field|cache
specifier|protected
specifier|transient
name|SolrClientCache
name|cache
decl_stmt|;
DECL|field|isCloseCache
specifier|protected
specifier|transient
name|boolean
name|isCloseCache
decl_stmt|;
DECL|field|streamContext
specifier|protected
specifier|transient
name|StreamContext
name|streamContext
decl_stmt|;
DECL|field|executorService
specifier|protected
name|ExecutorService
name|executorService
decl_stmt|;
DECL|method|SignificantTermsStream
specifier|public
name|SignificantTermsStream
parameter_list|(
name|String
name|zkHost
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|Map
name|params
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|minDocFreq
parameter_list|,
name|float
name|maxDocFreq
parameter_list|,
name|int
name|minTermLength
parameter_list|,
name|int
name|numTerms
parameter_list|)
throws|throws
name|IOException
block|{
name|init
argument_list|(
name|collectionName
argument_list|,
name|zkHost
argument_list|,
name|params
argument_list|,
name|field
argument_list|,
name|minDocFreq
argument_list|,
name|maxDocFreq
argument_list|,
name|minTermLength
argument_list|,
name|numTerms
argument_list|)
expr_stmt|;
block|}
DECL|method|SignificantTermsStream
specifier|public
name|SignificantTermsStream
parameter_list|(
name|StreamExpression
name|expression
parameter_list|,
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// grab all parameters out
name|String
name|collectionName
init|=
name|factory
operator|.
name|getValueOperand
argument_list|(
name|expression
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StreamExpressionNamedParameter
argument_list|>
name|namedParams
init|=
name|factory
operator|.
name|getNamedOperands
argument_list|(
name|expression
argument_list|)
decl_stmt|;
name|StreamExpressionNamedParameter
name|zkHostExpression
init|=
name|factory
operator|.
name|getNamedOperand
argument_list|(
name|expression
argument_list|,
literal|"zkHost"
argument_list|)
decl_stmt|;
comment|// Validate there are no unknown parameters - zkHost and alias are namedParameter so we don't need to count it twice
if|if
condition|(
name|expression
operator|.
name|getParameters
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
literal|1
operator|+
name|namedParams
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - unknown operands found"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
comment|// Collection Name
if|if
condition|(
literal|null
operator|==
name|collectionName
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - collectionName expected as first operand"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
comment|// Named parameters - passed directly to solr as solrparams
if|if
condition|(
literal|0
operator|==
name|namedParams
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|String
operator|.
name|format
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|,
literal|"invalid expression %s - at least one named parameter expected. eg. 'q=*:*'"
argument_list|,
name|expression
argument_list|)
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|StreamExpressionNamedParameter
name|namedParam
range|:
name|namedParams
control|)
block|{
if|if
condition|(
operator|!
name|namedParam
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"zkHost"
argument_list|)
condition|)
block|{
name|params
operator|.
name|put
argument_list|(
name|namedParam
operator|.
name|getName
argument_list|()
argument_list|,
name|namedParam
operator|.
name|getParameter
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|fieldParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldParam
operator|!=
literal|null
condition|)
block|{
name|params
operator|.
name|remove
argument_list|(
literal|"field"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"field param cannot be null for SignificantTermsStream"
argument_list|)
throw|;
block|}
name|String
name|numTermsParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"limit"
argument_list|)
decl_stmt|;
name|int
name|numTerms
init|=
literal|20
decl_stmt|;
if|if
condition|(
name|numTermsParam
operator|!=
literal|null
condition|)
block|{
name|numTerms
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numTermsParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"limit"
argument_list|)
expr_stmt|;
block|}
name|String
name|minTermLengthParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"minTermLength"
argument_list|)
decl_stmt|;
name|int
name|minTermLength
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|minTermLengthParam
operator|!=
literal|null
condition|)
block|{
name|minTermLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|minTermLengthParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"minTermLength"
argument_list|)
expr_stmt|;
block|}
name|String
name|minDocFreqParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"minDocFreq"
argument_list|)
decl_stmt|;
name|float
name|minDocFreq
init|=
literal|5.0F
decl_stmt|;
if|if
condition|(
name|minDocFreqParam
operator|!=
literal|null
condition|)
block|{
name|minDocFreq
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|minDocFreqParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"minDocFreq"
argument_list|)
expr_stmt|;
block|}
name|String
name|maxDocFreqParam
init|=
name|params
operator|.
name|get
argument_list|(
literal|"maxDocFreq"
argument_list|)
decl_stmt|;
name|float
name|maxDocFreq
init|=
literal|.3F
decl_stmt|;
if|if
condition|(
name|maxDocFreqParam
operator|!=
literal|null
condition|)
block|{
name|maxDocFreq
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|maxDocFreqParam
argument_list|)
expr_stmt|;
name|params
operator|.
name|remove
argument_list|(
literal|"maxDocFreq"
argument_list|)
expr_stmt|;
block|}
comment|// zkHost, optional - if not provided then will look into factory list to get
name|String
name|zkHost
init|=
literal|null
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|zkHostExpression
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getCollectionZkHost
argument_list|(
name|collectionName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|instanceof
name|StreamExpressionValue
condition|)
block|{
name|zkHost
operator|=
operator|(
operator|(
name|StreamExpressionValue
operator|)
name|zkHostExpression
operator|.
name|getParameter
argument_list|()
operator|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zkHost
operator|==
literal|null
condition|)
block|{
name|zkHost
operator|=
name|factory
operator|.
name|getDefaultZkHost
argument_list|()
expr_stmt|;
block|}
comment|// We've got all the required items
name|init
argument_list|(
name|collectionName
argument_list|,
name|zkHost
argument_list|,
name|params
argument_list|,
name|fieldParam
argument_list|,
name|minDocFreq
argument_list|,
name|maxDocFreq
argument_list|,
name|minTermLength
argument_list|,
name|numTerms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toExpression
specifier|public
name|StreamExpressionParameter
name|toExpression
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
comment|// functionName(collectionName, param1, param2, ..., paramN, sort="comp", [aliases="field=alias,..."])
comment|// function name
name|StreamExpression
name|expression
init|=
operator|new
name|StreamExpression
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// collection
name|expression
operator|.
name|addParameter
argument_list|(
name|collection
argument_list|)
expr_stmt|;
comment|// parameters
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
name|param
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"minDocFreq"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|minDocFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"maxDocFreq"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|maxDocFreq
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"numTerms"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numTerms
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"minTermLength"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|minTermLength
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// zkHost
name|expression
operator|.
name|addParameter
argument_list|(
operator|new
name|StreamExpressionNamedParameter
argument_list|(
literal|"zkHost"
argument_list|,
name|zkHost
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|expression
return|;
block|}
DECL|method|init
specifier|private
name|void
name|init
parameter_list|(
name|String
name|collectionName
parameter_list|,
name|String
name|zkHost
parameter_list|,
name|Map
name|params
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|minDocFreq
parameter_list|,
name|float
name|maxDocFreq
parameter_list|,
name|int
name|minTermLength
parameter_list|,
name|int
name|numTerms
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|zkHost
operator|=
name|zkHost
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|collectionName
expr_stmt|;
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
name|numTerms
expr_stmt|;
name|this
operator|.
name|minTermLength
operator|=
name|minTermLength
expr_stmt|;
block|}
DECL|method|setStreamContext
specifier|public
name|void
name|setStreamContext
parameter_list|(
name|StreamContext
name|context
parameter_list|)
block|{
name|this
operator|.
name|cache
operator|=
name|context
operator|.
name|getSolrClientCache
argument_list|()
expr_stmt|;
name|this
operator|.
name|streamContext
operator|=
name|context
expr_stmt|;
block|}
DECL|method|open
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
name|isCloseCache
operator|=
literal|true
expr_stmt|;
name|cache
operator|=
operator|new
name|SolrClientCache
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|isCloseCache
operator|=
literal|false
expr_stmt|;
block|}
name|this
operator|.
name|executorService
operator|=
name|ExecutorUtil
operator|.
name|newMDCAwareCachedThreadPool
argument_list|(
operator|new
name|SolrjNamedThreadFactory
argument_list|(
literal|"SignificantTermsStream"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|children
specifier|public
name|List
argument_list|<
name|TupleStream
argument_list|>
name|children
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
DECL|method|callShards
specifier|private
name|List
argument_list|<
name|Future
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|callShards
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|baseUrls
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Future
argument_list|<
name|NamedList
argument_list|>
argument_list|>
name|futures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|baseUrl
range|:
name|baseUrls
control|)
block|{
name|SignificantTermsCall
name|lc
init|=
operator|new
name|SignificantTermsCall
argument_list|(
name|baseUrl
argument_list|,
name|this
operator|.
name|params
argument_list|,
name|this
operator|.
name|field
argument_list|,
name|this
operator|.
name|minDocFreq
argument_list|,
name|this
operator|.
name|maxDocFreq
argument_list|,
name|this
operator|.
name|minTermLength
argument_list|,
name|this
operator|.
name|numTerms
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|NamedList
argument_list|>
name|future
init|=
name|executorService
operator|.
name|submit
argument_list|(
name|lc
argument_list|)
decl_stmt|;
name|futures
operator|.
name|add
argument_list|(
name|future
argument_list|)
expr_stmt|;
block|}
return|return
name|futures
return|;
block|}
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isCloseCache
condition|)
block|{
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
comment|/** Return the stream sort - ie, the order in which records are returned */
DECL|method|getStreamSort
specifier|public
name|StreamComparator
name|getStreamSort
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|toExplanation
specifier|public
name|Explanation
name|toExplanation
parameter_list|(
name|StreamFactory
name|factory
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|StreamExplanation
argument_list|(
name|getStreamNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|withFunctionName
argument_list|(
name|factory
operator|.
name|getFunctionName
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
argument_list|)
operator|.
name|withImplementingClass
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|withExpressionType
argument_list|(
name|Explanation
operator|.
name|ExpressionType
operator|.
name|STREAM_DECORATOR
argument_list|)
operator|.
name|withExpression
argument_list|(
name|toExpression
argument_list|(
name|factory
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
DECL|method|read
specifier|public
name|Tuple
name|read
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|tupleIterator
operator|==
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|int
index|[]
argument_list|>
name|mergeFreqs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|long
name|numDocs
init|=
literal|0
decl_stmt|;
name|long
name|resultCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Future
argument_list|<
name|NamedList
argument_list|>
name|getTopTermsCall
range|:
name|callShards
argument_list|(
name|getShards
argument_list|(
name|zkHost
argument_list|,
name|collection
argument_list|,
name|streamContext
argument_list|)
argument_list|)
control|)
block|{
name|NamedList
name|resp
init|=
name|getTopTermsCall
operator|.
name|get
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"sterms"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|docFreqs
init|=
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"docFreq"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|queryDocFreqs
init|=
operator|(
name|List
argument_list|<
name|Integer
argument_list|>
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"queryDocFreq"
argument_list|)
decl_stmt|;
name|numDocs
operator|+=
operator|(
name|Integer
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"numDocs"
argument_list|)
expr_stmt|;
name|resultCount
operator|+=
operator|(
name|Integer
operator|)
name|resp
operator|.
name|get
argument_list|(
literal|"resultCount"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|term
init|=
name|terms
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|docFreq
init|=
name|docFreqs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|queryDocFreq
init|=
name|queryDocFreqs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mergeFreqs
operator|.
name|containsKey
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|mergeFreqs
operator|.
name|put
argument_list|(
name|term
argument_list|,
operator|new
name|int
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|int
index|[]
name|freqs
init|=
name|mergeFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|freqs
index|[
literal|0
index|]
operator|+=
name|docFreq
expr_stmt|;
name|freqs
index|[
literal|1
index|]
operator|+=
name|queryDocFreq
expr_stmt|;
block|}
block|}
name|List
argument_list|<
name|Map
argument_list|>
name|maps
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|mergeFreqs
operator|.
name|keySet
argument_list|()
control|)
block|{
name|int
index|[]
name|freqs
init|=
name|mergeFreqs
operator|.
name|get
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"term"
argument_list|,
name|term
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"background"
argument_list|,
name|freqs
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"foreground"
argument_list|,
name|freqs
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|float
name|score
init|=
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
name|freqs
index|[
literal|1
index|]
argument_list|)
operator|+
literal|1.0
argument_list|)
operator|*
call|(
name|float
call|)
argument_list|(
name|Math
operator|.
name|log
argument_list|(
operator|(
call|(
name|float
call|)
argument_list|(
name|numDocs
operator|+
literal|1
argument_list|)
operator|)
operator|/
operator|(
name|freqs
index|[
literal|0
index|]
operator|+
literal|1
operator|)
argument_list|)
operator|+
literal|1.0
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"score"
argument_list|,
name|score
argument_list|)
expr_stmt|;
name|maps
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|maps
argument_list|,
operator|new
name|ScoreComp
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Tuple
argument_list|>
name|tuples
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
name|map
range|:
name|maps
control|)
block|{
if|if
condition|(
name|tuples
operator|.
name|size
argument_list|()
operator|==
name|numTerms
condition|)
break|break;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
name|map
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"EOF"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tuples
operator|.
name|add
argument_list|(
operator|new
name|Tuple
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|tupleIterator
operator|=
name|tuples
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
return|return
name|tupleIterator
operator|.
name|next
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|class|ScoreComp
specifier|private
specifier|static
class|class
name|ScoreComp
implements|implements
name|Comparator
argument_list|<
name|Map
argument_list|>
block|{
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|Map
name|a
parameter_list|,
name|Map
name|b
parameter_list|)
block|{
name|Float
name|scorea
init|=
operator|(
name|Float
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
name|Float
name|scoreb
init|=
operator|(
name|Float
operator|)
name|b
operator|.
name|get
argument_list|(
literal|"score"
argument_list|)
decl_stmt|;
return|return
name|scoreb
operator|.
name|compareTo
argument_list|(
name|scorea
argument_list|)
return|;
block|}
block|}
DECL|class|SignificantTermsCall
specifier|protected
class|class
name|SignificantTermsCall
implements|implements
name|Callable
argument_list|<
name|NamedList
argument_list|>
block|{
DECL|field|baseUrl
specifier|private
name|String
name|baseUrl
decl_stmt|;
DECL|field|field
specifier|private
name|String
name|field
decl_stmt|;
DECL|field|minDocFreq
specifier|private
name|float
name|minDocFreq
decl_stmt|;
DECL|field|maxDocFreq
specifier|private
name|float
name|maxDocFreq
decl_stmt|;
DECL|field|numTerms
specifier|private
name|int
name|numTerms
decl_stmt|;
DECL|field|minTermLength
specifier|private
name|int
name|minTermLength
decl_stmt|;
DECL|field|paramsMap
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramsMap
decl_stmt|;
DECL|method|SignificantTermsCall
specifier|public
name|SignificantTermsCall
parameter_list|(
name|String
name|baseUrl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paramsMap
parameter_list|,
name|String
name|field
parameter_list|,
name|float
name|minDocFreq
parameter_list|,
name|float
name|maxDocFreq
parameter_list|,
name|int
name|minTermLength
parameter_list|,
name|int
name|numTerms
parameter_list|)
block|{
name|this
operator|.
name|baseUrl
operator|=
name|baseUrl
expr_stmt|;
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|minDocFreq
operator|=
name|minDocFreq
expr_stmt|;
name|this
operator|.
name|maxDocFreq
operator|=
name|maxDocFreq
expr_stmt|;
name|this
operator|.
name|paramsMap
operator|=
name|paramsMap
expr_stmt|;
name|this
operator|.
name|numTerms
operator|=
name|numTerms
expr_stmt|;
name|this
operator|.
name|minTermLength
operator|=
name|minTermLength
expr_stmt|;
block|}
DECL|method|call
specifier|public
name|NamedList
argument_list|<
name|Double
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|ModifiableSolrParams
name|params
init|=
operator|new
name|ModifiableSolrParams
argument_list|()
decl_stmt|;
name|HttpSolrClient
name|solrClient
init|=
name|cache
operator|.
name|getHttpSolrClient
argument_list|(
name|baseUrl
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
name|DISTRIB
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"fq"
argument_list|,
literal|"{!sigificantTerms}"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|paramsMap
operator|.
name|keySet
argument_list|()
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|key
argument_list|,
name|paramsMap
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|params
operator|.
name|add
argument_list|(
literal|"minDocFreq"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|minDocFreq
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"maxDocFreq"
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|maxDocFreq
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"minTermLength"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|minTermLength
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"field"
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
literal|"numTerms"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|numTerms
operator|*
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QueryRequest
name|request
init|=
operator|new
name|QueryRequest
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|QueryResponse
name|response
init|=
name|request
operator|.
name|process
argument_list|(
name|solrClient
argument_list|)
decl_stmt|;
name|NamedList
name|res
init|=
name|response
operator|.
name|getResponse
argument_list|()
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
block|}
end_class

end_unit

