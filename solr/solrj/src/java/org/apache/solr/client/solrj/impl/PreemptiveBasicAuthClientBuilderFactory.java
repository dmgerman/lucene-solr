begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.client.solrj.impl
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|AuthScope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|auth
operator|.
name|UsernamePasswordCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|CredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|auth
operator|.
name|BasicScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|impl
operator|.
name|client
operator|.
name|BasicCredentialsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|SolrHttpClientBuilder
operator|.
name|CredentialsProviderProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|MapSolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|SolrParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_comment
comment|/**  * HttpClientConfigurer implementation providing support for preemptive Http Basic authentication  * scheme.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"rawtypes"
block|,
literal|"unchecked"
block|}
argument_list|)
DECL|class|PreemptiveBasicAuthClientBuilderFactory
specifier|public
class|class
name|PreemptiveBasicAuthClientBuilderFactory
implements|implements
name|HttpClientBuilderFactory
block|{
comment|/**    * A system property used to specify a properties file containing default parameters used for    * creating a HTTP client. This is specifically useful for configuring the HTTP basic auth    * credentials (i.e. username/password). The name of the property must match the relevant    * Solr config property name.    */
DECL|field|SYS_PROP_HTTP_CLIENT_CONFIG
specifier|public
specifier|static
specifier|final
name|String
name|SYS_PROP_HTTP_CLIENT_CONFIG
init|=
literal|"solr.httpclient.config"
decl_stmt|;
comment|/**    * A system property to configure the Basic auth credentials via a java system property.    * Since this will expose the password on the command-line, it is not very secure. But    * this mechanism is added for backwards compatibility.    */
DECL|field|SYS_PROP_BASIC_AUTH_CREDENTIALS
specifier|public
specifier|static
specifier|final
name|String
name|SYS_PROP_BASIC_AUTH_CREDENTIALS
init|=
literal|"basicauth"
decl_stmt|;
DECL|field|defaultParams
specifier|private
specifier|static
name|SolrParams
name|defaultParams
decl_stmt|;
DECL|field|requestInterceptor
specifier|private
specifier|static
name|PreemptiveAuth
name|requestInterceptor
init|=
operator|new
name|PreemptiveAuth
argument_list|(
operator|new
name|BasicScheme
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
name|String
name|credentials
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_BASIC_AUTH_CREDENTIALS
argument_list|)
decl_stmt|;
name|String
name|configFile
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|SYS_PROP_HTTP_CLIENT_CONFIG
argument_list|)
decl_stmt|;
if|if
condition|(
name|credentials
operator|!=
literal|null
operator|&&
name|configFile
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Basic authentication credentials passed via a configuration file"
operator|+
literal|" as well as java system property. Please choose one mechanism!"
argument_list|)
throw|;
block|}
if|if
condition|(
name|credentials
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|ss
init|=
name|StrUtils
operator|.
name|splitSmart
argument_list|(
name|credentials
argument_list|,
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ss
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Please provide 'basicauth' in the 'user:password' format"
argument_list|)
throw|;
block|}
name|Properties
name|defaultProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|,
name|ss
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|,
name|ss
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|defaultParams
operator|=
operator|new
name|MapSolrParams
argument_list|(
operator|new
name|HashMap
argument_list|(
name|defaultProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|configFile
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Properties
name|defaultProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|defaultProps
operator|.
name|load
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|configFile
argument_list|)
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
name|defaultParams
operator|=
operator|new
name|MapSolrParams
argument_list|(
operator|new
name|HashMap
argument_list|(
name|defaultProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unable to read the Http client config file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**    * This method enables configuring system wide defaults (apart from using a config file based approach).    */
DECL|method|setDefaultSolrParams
specifier|public
specifier|static
name|void
name|setDefaultSolrParams
parameter_list|(
name|SolrParams
name|params
parameter_list|)
block|{
name|defaultParams
operator|=
name|params
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|HttpClientUtil
operator|.
name|removeRequestInterceptor
argument_list|(
name|requestInterceptor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getHttpClientBuilder
specifier|public
name|SolrHttpClientBuilder
name|getHttpClientBuilder
parameter_list|(
name|Optional
argument_list|<
name|SolrHttpClientBuilder
argument_list|>
name|builder
parameter_list|)
block|{
return|return
name|builder
operator|.
name|isPresent
argument_list|()
condition|?
name|initHttpClientBuilder
argument_list|(
name|builder
operator|.
name|get
argument_list|()
argument_list|)
else|:
name|initHttpClientBuilder
argument_list|(
name|SolrHttpClientBuilder
operator|.
name|create
argument_list|()
argument_list|)
return|;
block|}
DECL|method|initHttpClientBuilder
specifier|private
name|SolrHttpClientBuilder
name|initHttpClientBuilder
parameter_list|(
name|SolrHttpClientBuilder
name|builder
parameter_list|)
block|{
specifier|final
name|String
name|basicAuthUser
init|=
name|defaultParams
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_USER
argument_list|)
decl_stmt|;
specifier|final
name|String
name|basicAuthPass
init|=
name|defaultParams
operator|.
name|get
argument_list|(
name|HttpClientUtil
operator|.
name|PROP_BASIC_AUTH_PASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|basicAuthUser
operator|==
literal|null
operator|||
name|basicAuthPass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"username& password must be specified with "
operator|+
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|builder
operator|.
name|setDefaultCredentialsProvider
argument_list|(
operator|new
name|CredentialsProviderProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|CredentialsProvider
name|getCredentialsProvider
parameter_list|()
block|{
name|CredentialsProvider
name|credsProvider
init|=
operator|new
name|BasicCredentialsProvider
argument_list|()
decl_stmt|;
name|credsProvider
operator|.
name|setCredentials
argument_list|(
name|AuthScope
operator|.
name|ANY
argument_list|,
operator|new
name|UsernamePasswordCredentials
argument_list|(
name|basicAuthUser
argument_list|,
name|basicAuthPass
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|credsProvider
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HttpClientUtil
operator|.
name|addRequestInterceptor
argument_list|(
name|requestInterceptor
argument_list|)
expr_stmt|;
return|return
name|builder
return|;
block|}
block|}
end_class

end_unit

