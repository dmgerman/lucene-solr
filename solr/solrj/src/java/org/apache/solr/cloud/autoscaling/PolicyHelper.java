begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.autoscaling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|SolrException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CoreAdminParams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
operator|.
name|Policy
operator|.
name|Suggester
operator|.
name|Hint
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
operator|.
name|ADDREPLICA
import|;
end_import

begin_class
DECL|class|PolicyHelper
specifier|public
class|class
name|PolicyHelper
block|{
DECL|method|getReplicaLocations
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getReplicaLocations
parameter_list|(
name|String
name|collName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|autoScalingJson
parameter_list|,
name|ClusterDataProvider
name|cdp
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|optionalPolicyMapping
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|shardNames
parameter_list|,
name|int
name|repFactor
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|positionMapping
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|shardName
range|:
name|shardNames
control|)
name|positionMapping
operator|.
name|put
argument_list|(
name|shardName
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|repFactor
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|optionalPolicyMapping
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ClusterDataProvider
name|delegate
init|=
name|cdp
decl_stmt|;
name|cdp
operator|=
operator|new
name|ClusterDataProvider
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|getNodeValues
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|tags
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getNodeValues
argument_list|(
name|node
argument_list|,
name|tags
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|getReplicaInfo
parameter_list|(
name|String
name|node
parameter_list|,
name|Collection
argument_list|<
name|String
argument_list|>
name|keys
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|getReplicaInfo
argument_list|(
name|node
argument_list|,
name|keys
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|String
argument_list|>
name|getNodes
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getNodes
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPolicyNameByCollection
parameter_list|(
name|String
name|coll
parameter_list|)
block|{
return|return
name|optionalPolicyMapping
operator|.
name|containsKey
argument_list|(
name|coll
argument_list|)
condition|?
name|optionalPolicyMapping
operator|.
name|get
argument_list|(
name|coll
argument_list|)
else|:
name|delegate
operator|.
name|getPolicyNameByCollection
argument_list|(
name|coll
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
name|Policy
name|policy
init|=
operator|new
name|Policy
argument_list|(
name|autoScalingJson
argument_list|)
decl_stmt|;
name|Policy
operator|.
name|Session
name|session
init|=
name|policy
operator|.
name|createSession
argument_list|(
name|cdp
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|shardName
range|:
name|shardNames
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repFactor
condition|;
name|i
operator|++
control|)
block|{
name|Policy
operator|.
name|Suggester
name|suggester
init|=
name|session
operator|.
name|getSuggester
argument_list|(
name|ADDREPLICA
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|,
name|collName
argument_list|)
operator|.
name|hint
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|,
name|shardName
argument_list|)
decl_stmt|;
name|SolrRequest
name|op
init|=
name|suggester
operator|.
name|getOperation
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SolrException
argument_list|(
name|SolrException
operator|.
name|ErrorCode
operator|.
name|BAD_REQUEST
argument_list|,
literal|"No node can satisfy the rules "
operator|+
name|Utils
operator|.
name|toJSONString
argument_list|(
name|Utils
operator|.
name|getDeepCopy
argument_list|(
name|session
operator|.
name|expandedClauses
argument_list|,
literal|4
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
name|session
operator|=
name|suggester
operator|.
name|getSession
argument_list|()
expr_stmt|;
name|positionMapping
operator|.
name|get
argument_list|(
name|shardName
argument_list|)
operator|.
name|add
argument_list|(
name|op
operator|.
name|getParams
argument_list|()
operator|.
name|get
argument_list|(
name|CoreAdminParams
operator|.
name|NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|positionMapping
return|;
block|}
block|}
end_class

end_unit

