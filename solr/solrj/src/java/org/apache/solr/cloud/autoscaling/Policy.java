begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.autoscaling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
operator|.
name|Clause
operator|.
name|Violation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|IteratorWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|MapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|params
operator|.
name|CollectionParams
operator|.
name|CollectionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
operator|.
name|toList
import|;
end_import

begin_comment
comment|/*The class that reads, parses and applies policies specified in  * autoscaling.json  *  * Create one instance of this class per unique autoscaling.json.  * This is immutable and is thread-safe  *  * Create a fresh new session for each use  *  */
end_comment

begin_class
DECL|class|Policy
specifier|public
class|class
name|Policy
implements|implements
name|MapWriter
block|{
DECL|field|POLICY
specifier|public
specifier|static
specifier|final
name|String
name|POLICY
init|=
literal|"policy"
decl_stmt|;
DECL|field|EACH
specifier|public
specifier|static
specifier|final
name|String
name|EACH
init|=
literal|"#EACH"
decl_stmt|;
DECL|field|ANY
specifier|public
specifier|static
specifier|final
name|String
name|ANY
init|=
literal|"#ANY"
decl_stmt|;
DECL|field|CLUSTER_POLICY
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_POLICY
init|=
literal|"cluster-policy"
decl_stmt|;
DECL|field|CLUSTER_PREFERENCE
specifier|public
specifier|static
specifier|final
name|String
name|CLUSTER_PREFERENCE
init|=
literal|"cluster-preferences"
decl_stmt|;
DECL|field|GLOBAL_ONLY_TAGS
specifier|public
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|GLOBAL_ONLY_TAGS
init|=
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cores"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|policies
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Clause
argument_list|>
argument_list|>
name|policies
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|clusterPolicy
specifier|final
name|List
argument_list|<
name|Clause
argument_list|>
name|clusterPolicy
decl_stmt|;
DECL|field|clusterPreferences
specifier|final
name|List
argument_list|<
name|Preference
argument_list|>
name|clusterPreferences
decl_stmt|;
DECL|field|params
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|Policy
specifier|public
name|Policy
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|jsonMap
parameter_list|)
block|{
name|clusterPreferences
operator|=
operator|(
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|jsonMap
operator|.
name|getOrDefault
argument_list|(
name|CLUSTER_PREFERENCE
argument_list|,
name|emptyList
argument_list|()
argument_list|)
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Preference
operator|::
operator|new
argument_list|)
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|clusterPreferences
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Preference
name|preference
init|=
name|clusterPreferences
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|preference
operator|.
name|next
operator|=
name|clusterPreferences
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|clusterPreferences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clusterPreferences
operator|.
name|add
argument_list|(
operator|new
name|Preference
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|Utils
operator|.
name|fromJSONString
argument_list|(
literal|"{minimize : cores, precision:1}"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Preference
name|preference
range|:
name|clusterPreferences
control|)
block|{
if|if
condition|(
name|params
operator|.
name|contains
argument_list|(
name|preference
operator|.
name|name
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|preference
operator|.
name|name
operator|+
literal|" is repeated"
argument_list|)
throw|;
block|}
name|params
operator|.
name|add
argument_list|(
name|preference
operator|.
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|preference
operator|.
name|idx
operator|=
name|params
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|clusterPolicy
operator|=
operator|(
operator|(
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
operator|)
name|jsonMap
operator|.
name|getOrDefault
argument_list|(
name|CLUSTER_POLICY
argument_list|,
name|emptyList
argument_list|()
argument_list|)
operator|)
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Clause
operator|::
operator|new
argument_list|)
operator|.
name|filter
argument_list|(
name|clause
lambda|->
block|{
name|clause
operator|.
name|addTags
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|jsonMap
operator|.
name|getOrDefault
argument_list|(
literal|"policies"
argument_list|,
name|emptyMap
argument_list|()
argument_list|)
operator|)
operator|.
name|forEach
argument_list|(
parameter_list|(
name|s
parameter_list|,
name|l1
parameter_list|)
lambda|->
name|this
operator|.
name|policies
operator|.
name|put
argument_list|(
name|s
argument_list|,
name|l1
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Clause
operator|::
operator|new
argument_list|)
operator|.
name|filter
argument_list|(
name|clause
lambda|->
block|{
block|if (!clause.isPerCollectiontag(
argument_list|)
block|)
throw|throw
argument_list|new
name|RuntimeException
argument_list|(
name|clause
operator|.
name|globalTag
operator|.
name|name
operator|+
literal|" is only allowed in 'cluster-policy'"
argument_list|)
empty_stmt|;
name|clause
operator|.
name|addTags
parameter_list|(
name|params
parameter_list|)
constructor_decl|;
return|return
literal|true
return|;
block|}
end_class

begin_expr_stmt
unit|)
operator|.
name|sorted
argument_list|()
operator|.
name|collect
argument_list|(
name|toList
argument_list|()
argument_list|)
end_expr_stmt

begin_empty_stmt
unit|))
empty_stmt|;
end_empty_stmt

begin_function
unit|}    public
DECL|method|getClusterPolicy
name|List
argument_list|<
name|Clause
argument_list|>
name|getClusterPolicy
parameter_list|()
block|{
return|return
name|clusterPolicy
return|;
block|}
end_function

begin_function
DECL|method|getClusterPreferences
specifier|public
name|List
argument_list|<
name|Preference
argument_list|>
name|getClusterPreferences
parameter_list|()
block|{
return|return
name|clusterPreferences
return|;
block|}
end_function

begin_function
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|EntryWriter
name|ew
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|policies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ew
operator|.
name|put
argument_list|(
literal|"policies"
argument_list|,
operator|(
name|MapWriter
operator|)
name|ew1
lambda|->
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Clause
argument_list|>
argument_list|>
name|e
range|:
name|policies
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|ew1
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|clusterPreferences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ew
operator|.
name|put
argument_list|(
literal|"preferences"
argument_list|,
operator|(
name|IteratorWriter
operator|)
name|iw
lambda|->
block|{
for|for
control|(
name|Preference
name|p
range|:
name|clusterPreferences
control|)
name|iw
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/*This stores the logical state of the system, given a policy and    * a cluster state.    *    */
end_comment

begin_class
DECL|class|Session
specifier|public
class|class
name|Session
implements|implements
name|MapWriter
block|{
DECL|field|nodes
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|nodes
decl_stmt|;
DECL|field|dataProvider
specifier|final
name|ClusterDataProvider
name|dataProvider
decl_stmt|;
DECL|field|matrix
specifier|final
name|List
argument_list|<
name|Row
argument_list|>
name|matrix
decl_stmt|;
DECL|field|collections
name|Set
argument_list|<
name|String
argument_list|>
name|collections
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|expandedClauses
name|List
argument_list|<
name|Clause
argument_list|>
name|expandedClauses
decl_stmt|;
DECL|field|violations
name|List
argument_list|<
name|Violation
argument_list|>
name|violations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|paramsOfInterest
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|paramsOfInterest
decl_stmt|;
DECL|method|Session
specifier|private
name|Session
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|nodes
parameter_list|,
name|ClusterDataProvider
name|dataProvider
parameter_list|,
name|List
argument_list|<
name|Row
argument_list|>
name|matrix
parameter_list|,
name|List
argument_list|<
name|Clause
argument_list|>
name|expandedClauses
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paramsOfInterest
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|dataProvider
operator|=
name|dataProvider
expr_stmt|;
name|this
operator|.
name|matrix
operator|=
name|matrix
expr_stmt|;
name|this
operator|.
name|expandedClauses
operator|=
name|expandedClauses
expr_stmt|;
name|this
operator|.
name|paramsOfInterest
operator|=
name|paramsOfInterest
expr_stmt|;
block|}
DECL|method|Session
name|Session
parameter_list|(
name|ClusterDataProvider
name|dataProvider
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|dataProvider
operator|.
name|getNodes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataProvider
operator|=
name|dataProvider
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
block|{
name|collections
operator|.
name|addAll
argument_list|(
name|dataProvider
operator|.
name|getReplicaInfo
argument_list|(
name|node
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|expandedClauses
operator|=
name|clusterPolicy
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|clause
lambda|->
operator|!
name|clause
operator|.
name|isPerCollectiontag
argument_list|()
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|c
range|:
name|collections
control|)
block|{
name|addClausesForCollection
argument_list|(
name|dataProvider
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|expandedClauses
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|p
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|params
argument_list|)
decl_stmt|;
name|p
operator|.
name|addAll
argument_list|(
name|expandedClauses
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|clause
lambda|->
name|clause
operator|.
name|tag
operator|.
name|name
argument_list|)
operator|.
name|distinct
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|paramsOfInterest
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|matrix
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|nodes
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|node
range|:
name|nodes
control|)
name|matrix
operator|.
name|add
argument_list|(
operator|new
name|Row
argument_list|(
name|node
argument_list|,
name|paramsOfInterest
argument_list|,
name|dataProvider
argument_list|)
argument_list|)
expr_stmt|;
name|applyRules
argument_list|()
expr_stmt|;
block|}
DECL|method|addClausesForCollection
specifier|private
name|void
name|addClausesForCollection
parameter_list|(
name|ClusterDataProvider
name|dataProvider
parameter_list|,
name|String
name|c
parameter_list|)
block|{
name|String
name|p
init|=
name|dataProvider
operator|.
name|getPolicyNameByCollection
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Clause
argument_list|>
name|perCollPolicy
init|=
name|policies
operator|.
name|get
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|perCollPolicy
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|StrUtils
operator|.
name|formatString
argument_list|(
literal|"Policy for collection {0} is {1} . It does not exist"
argument_list|,
name|c
argument_list|,
name|p
argument_list|)
argument_list|)
throw|;
block|}
name|expandedClauses
operator|.
name|addAll
argument_list|(
name|mergePolicies
argument_list|(
name|c
argument_list|,
name|policies
operator|.
name|getOrDefault
argument_list|(
name|p
argument_list|,
name|emptyList
argument_list|()
argument_list|)
argument_list|,
name|clusterPolicy
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|copy
name|Session
name|copy
parameter_list|()
block|{
return|return
operator|new
name|Session
argument_list|(
name|nodes
argument_list|,
name|dataProvider
argument_list|,
name|getMatrixCopy
argument_list|()
argument_list|,
name|expandedClauses
argument_list|,
name|paramsOfInterest
argument_list|)
return|;
block|}
DECL|method|getMatrixCopy
name|List
argument_list|<
name|Row
argument_list|>
name|getMatrixCopy
parameter_list|()
block|{
return|return
name|matrix
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|Row
operator|::
name|copy
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
DECL|method|getPolicy
name|Policy
name|getPolicy
parameter_list|()
block|{
return|return
name|Policy
operator|.
name|this
return|;
block|}
comment|/**      * Apply the preferences and conditions      */
DECL|method|applyRules
specifier|private
name|void
name|applyRules
parameter_list|()
block|{
if|if
condition|(
operator|!
name|clusterPreferences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//this is to set the approximate value according to the precision
name|ArrayList
argument_list|<
name|Row
argument_list|>
name|tmpMatrix
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
for|for
control|(
name|Preference
name|p
range|:
name|clusterPreferences
control|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|tmpMatrix
argument_list|,
parameter_list|(
name|r1
parameter_list|,
name|r2
parameter_list|)
lambda|->
name|p
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setApproxVal
argument_list|(
name|tmpMatrix
argument_list|)
expr_stmt|;
block|}
comment|//approximate values are set now. Let's do recursive sorting
name|Collections
operator|.
name|sort
argument_list|(
name|matrix
argument_list|,
parameter_list|(
name|r1
parameter_list|,
name|r2
parameter_list|)
lambda|->
block|{
name|int
name|result
init|=
name|clusterPreferences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
name|result
operator|=
name|clusterPreferences
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Clause
name|clause
range|:
name|expandedClauses
control|)
block|{
name|List
argument_list|<
name|Violation
argument_list|>
name|errs
init|=
name|clause
operator|.
name|test
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
name|violations
operator|.
name|addAll
argument_list|(
name|errs
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|getViolations
specifier|public
name|List
argument_list|<
name|Violation
argument_list|>
name|getViolations
parameter_list|()
block|{
return|return
name|violations
return|;
block|}
DECL|method|getSuggester
specifier|public
name|Suggester
name|getSuggester
parameter_list|(
name|CollectionAction
name|action
parameter_list|)
block|{
name|Suggester
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|action
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|op
operator|==
literal|null
condition|)
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
name|action
operator|.
name|toString
argument_list|()
operator|+
literal|"is not supported"
argument_list|)
throw|;
name|op
operator|.
name|_init
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|op
return|;
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|EntryWriter
name|ew
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|matrix
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Row
name|row
init|=
name|matrix
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ew
operator|.
name|put
argument_list|(
name|row
operator|.
name|node
argument_list|,
name|row
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Utils
operator|.
name|toJSONString
argument_list|(
name|toMap
argument_list|(
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|method|getSorted
specifier|public
name|List
argument_list|<
name|Row
argument_list|>
name|getSorted
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|matrix
argument_list|)
return|;
block|}
block|}
end_class

begin_function
DECL|method|createSession
specifier|public
name|Session
name|createSession
parameter_list|(
name|ClusterDataProvider
name|dataProvider
parameter_list|)
block|{
return|return
operator|new
name|Session
argument_list|(
name|dataProvider
argument_list|)
return|;
block|}
end_function

begin_enum
DECL|enum|SortParam
enum|enum
name|SortParam
block|{
DECL|enum constant|freedisk
DECL|enum constant|cores
DECL|enum constant|heapUsage
DECL|enum constant|sysLoadAvg
name|freedisk
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|cores
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|heapUsage
argument_list|(
literal|0
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
block|,
name|sysLoadAvg
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
block|;
DECL|field|min
DECL|field|max
specifier|public
specifier|final
name|int
name|min
block|,
name|max
block|;
DECL|method|SortParam
name|SortParam
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|this
operator|.
name|min
operator|=
name|min
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
DECL|method|get
specifier|static
name|SortParam
name|get
parameter_list|(
name|String
name|m
parameter_list|)
block|{
for|for
control|(
name|SortParam
name|p
range|:
name|values
argument_list|()
control|)
if|if
condition|(
name|p
operator|.
name|name
argument_list|()
operator|.
name|equals
argument_list|(
name|m
argument_list|)
condition|)
return|return
name|p
return|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|StrUtils
operator|.
name|formatString
argument_list|(
literal|"Invalid sort {0} Sort must be on one of these {1}"
argument_list|,
name|m
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|values
argument_list|()
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
block|}
end_enum

begin_enum
DECL|enum|Sort
enum|enum
name|Sort
block|{
DECL|enum constant|maximize
DECL|enum constant|minimize
name|maximize
argument_list|(
literal|1
argument_list|)
block|,
name|minimize
argument_list|(
operator|-
literal|1
argument_list|)
block|;
DECL|field|sortval
specifier|final
name|int
name|sortval
decl_stmt|;
DECL|method|Sort
name|Sort
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|sortval
operator|=
name|i
expr_stmt|;
block|}
DECL|method|get
specifier|static
name|Sort
name|get
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|maximize
operator|.
name|name
argument_list|()
argument_list|)
operator|&&
name|m
operator|.
name|containsKey
argument_list|(
name|minimize
operator|.
name|name
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot have both 'maximize' and 'minimize'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|maximize
operator|.
name|name
argument_list|()
argument_list|)
condition|)
return|return
name|maximize
return|;
if|if
condition|(
name|m
operator|.
name|containsKey
argument_list|(
name|minimize
operator|.
name|name
argument_list|()
argument_list|)
condition|)
return|return
name|minimize
return|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"must have either 'maximize' or 'minimize'"
argument_list|)
throw|;
block|}
block|}
end_enum

begin_class
DECL|class|ReplicaInfo
specifier|public
specifier|static
class|class
name|ReplicaInfo
implements|implements
name|MapWriter
block|{
DECL|field|name
specifier|final
name|String
name|name
decl_stmt|;
DECL|field|core
DECL|field|collection
DECL|field|shard
name|String
name|core
decl_stmt|,
name|collection
decl_stmt|,
name|shard
decl_stmt|;
DECL|field|variables
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|variables
decl_stmt|;
DECL|method|ReplicaInfo
specifier|public
name|ReplicaInfo
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|coll
parameter_list|,
name|String
name|shard
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|vals
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|variables
operator|=
name|vals
expr_stmt|;
name|this
operator|.
name|collection
operator|=
name|coll
expr_stmt|;
name|this
operator|.
name|shard
operator|=
name|shard
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|EntryWriter
name|ew
parameter_list|)
throws|throws
name|IOException
block|{
name|ew
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|variables
argument_list|)
expr_stmt|;
block|}
DECL|method|getCore
specifier|public
name|String
name|getCore
parameter_list|()
block|{
return|return
name|core
return|;
block|}
DECL|method|getCollection
specifier|public
name|String
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
DECL|method|getShard
specifier|public
name|String
name|getShard
parameter_list|()
block|{
return|return
name|shard
return|;
block|}
block|}
end_class

begin_comment
comment|/* A suggester is capable of suggesting a collection operation    * given a particular session. Before it suggests a new operation,    * it ensures that ,    *  a) load is reduced on the most loaded node    *  b) it causes no new violations    *    */
end_comment

begin_class
DECL|class|Suggester
specifier|public
specifier|static
specifier|abstract
class|class
name|Suggester
block|{
DECL|field|hints
specifier|protected
specifier|final
name|EnumMap
argument_list|<
name|Hint
argument_list|,
name|Object
argument_list|>
name|hints
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Hint
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|session
name|Policy
operator|.
name|Session
name|session
decl_stmt|;
DECL|field|operation
name|SolrRequest
name|operation
decl_stmt|;
DECL|field|originalViolations
specifier|protected
name|List
argument_list|<
name|Violation
argument_list|>
name|originalViolations
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|isInitialized
specifier|private
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
DECL|method|_init
specifier|private
name|void
name|_init
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
DECL|method|hint
specifier|public
name|Suggester
name|hint
parameter_list|(
name|Hint
name|hint
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|hints
operator|.
name|put
argument_list|(
name|hint
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
DECL|method|init
specifier|abstract
name|SolrRequest
name|init
parameter_list|()
function_decl|;
DECL|method|getOperation
specifier|public
name|SolrRequest
name|getOperation
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isInitialized
condition|)
block|{
name|String
name|coll
init|=
operator|(
name|String
operator|)
name|hints
operator|.
name|get
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
operator|(
name|String
operator|)
name|hints
operator|.
name|get
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|)
decl_stmt|;
comment|// if this is not a known collection from the existing clusterstate,
comment|// then add it
if|if
condition|(
name|session
operator|.
name|matrix
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|row
lambda|->
name|row
operator|.
name|collectionVsShardVsReplicas
operator|.
name|containsKey
argument_list|(
name|coll
argument_list|)
argument_list|)
condition|)
block|{
name|session
operator|.
name|addClausesForCollection
argument_list|(
name|session
operator|.
name|dataProvider
argument_list|,
name|coll
argument_list|)
block|;
name|Collections
operator|.
name|sort
argument_list|(
name|session
operator|.
name|expandedClauses
argument_list|)
empty_stmt|;
block|}
if|if
condition|(
name|coll
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Row
name|row
range|:
name|session
operator|.
name|matrix
control|)
block|{
if|if
condition|(
operator|!
name|row
operator|.
name|collectionVsShardVsReplicas
operator|.
name|containsKey
argument_list|(
name|coll
argument_list|)
condition|)
name|row
operator|.
name|collectionVsShardVsReplicas
operator|.
name|put
argument_list|(
name|coll
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shard
operator|!=
literal|null
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ReplicaInfo
argument_list|>
argument_list|>
name|shardInfo
init|=
name|row
operator|.
name|collectionVsShardVsReplicas
operator|.
name|get
argument_list|(
name|coll
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shardInfo
operator|.
name|containsKey
argument_list|(
name|shard
argument_list|)
condition|)
name|shardInfo
operator|.
name|put
argument_list|(
name|shard
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|session
operator|.
name|applyRules
argument_list|()
expr_stmt|;
name|originalViolations
operator|.
name|addAll
argument_list|(
name|session
operator|.
name|getViolations
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|operation
operator|=
name|init
argument_list|()
expr_stmt|;
name|isInitialized
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
end_class

begin_function
DECL|method|getSession
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
end_function

begin_function
DECL|method|getMatrix
name|List
argument_list|<
name|Row
argument_list|>
name|getMatrix
parameter_list|()
block|{
return|return
name|session
operator|.
name|matrix
return|;
block|}
end_function

begin_comment
comment|//check if the fresh set of violations is less serious than the last set of violations
end_comment

begin_function
DECL|method|isLessSerious
name|boolean
name|isLessSerious
parameter_list|(
name|List
argument_list|<
name|Violation
argument_list|>
name|fresh
parameter_list|,
name|List
argument_list|<
name|Violation
argument_list|>
name|old
parameter_list|)
block|{
if|if
condition|(
name|old
operator|==
literal|null
operator|||
name|fresh
operator|.
name|size
argument_list|()
operator|<
name|old
operator|.
name|size
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|fresh
operator|.
name|size
argument_list|()
operator|==
name|old
operator|.
name|size
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fresh
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Violation
name|freshViolation
init|=
name|fresh
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Violation
name|oldViolation
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Violation
name|v
range|:
name|old
control|)
block|{
if|if
condition|(
name|v
operator|.
name|equals
argument_list|(
name|freshViolation
argument_list|)
condition|)
name|oldViolation
operator|=
name|v
expr_stmt|;
block|}
if|if
condition|(
name|oldViolation
operator|!=
literal|null
operator|&&
name|freshViolation
operator|.
name|isLessSerious
argument_list|(
name|oldViolation
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|containsNewErrors
name|boolean
name|containsNewErrors
parameter_list|(
name|List
argument_list|<
name|Violation
argument_list|>
name|violations
parameter_list|)
block|{
for|for
control|(
name|Violation
name|v
range|:
name|violations
control|)
block|{
name|int
name|idx
init|=
name|originalViolations
operator|.
name|indexOf
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
operator|||
name|originalViolations
operator|.
name|get
argument_list|(
name|idx
argument_list|)
operator|.
name|isLessSerious
argument_list|(
name|v
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function

begin_function
DECL|method|getValidReplicas
name|List
argument_list|<
name|Pair
argument_list|<
name|ReplicaInfo
argument_list|,
name|Row
argument_list|>
argument_list|>
name|getValidReplicas
parameter_list|(
name|boolean
name|sortDesc
parameter_list|,
name|boolean
name|isSource
parameter_list|,
name|int
name|until
parameter_list|)
block|{
name|List
argument_list|<
name|Pair
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|,
name|Row
argument_list|>
argument_list|>
name|allPossibleReplicas
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|sortDesc
condition|)
block|{
if|if
condition|(
name|until
operator|==
operator|-
literal|1
condition|)
name|until
operator|=
name|getMatrix
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|until
condition|;
name|i
operator|++
control|)
name|addReplicaToList
argument_list|(
name|getMatrix
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|isSource
argument_list|,
name|allPossibleReplicas
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|until
operator|==
operator|-
literal|1
condition|)
name|until
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|getMatrix
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
name|until
condition|;
name|i
operator|--
control|)
name|addReplicaToList
argument_list|(
name|getMatrix
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|isSource
argument_list|,
name|allPossibleReplicas
argument_list|)
expr_stmt|;
block|}
return|return
name|allPossibleReplicas
return|;
block|}
end_function

begin_function
DECL|method|addReplicaToList
name|void
name|addReplicaToList
parameter_list|(
name|Row
name|r
parameter_list|,
name|boolean
name|isSource
parameter_list|,
name|List
argument_list|<
name|Pair
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|,
name|Row
argument_list|>
argument_list|>
name|replicaList
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isAllowed
argument_list|(
name|r
operator|.
name|node
argument_list|,
name|isSource
condition|?
name|Hint
operator|.
name|SRC_NODE
else|:
name|Hint
operator|.
name|TARGET_NODE
argument_list|)
condition|)
return|return;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
argument_list|>
name|e
range|:
name|r
operator|.
name|collectionVsShardVsReplicas
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAllowed
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Hint
operator|.
name|COLL
argument_list|)
condition|)
continue|continue;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Policy
operator|.
name|ReplicaInfo
argument_list|>
argument_list|>
name|shard
range|:
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|isAllowed
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|Hint
operator|.
name|SHARD
argument_list|)
condition|)
continue|continue;
name|replicaList
operator|.
name|add
argument_list|(
operator|new
name|Pair
argument_list|<>
argument_list|(
name|shard
operator|.
name|getValue
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
DECL|method|testChangedMatrix
specifier|protected
name|List
argument_list|<
name|Violation
argument_list|>
name|testChangedMatrix
parameter_list|(
name|boolean
name|strict
parameter_list|,
name|List
argument_list|<
name|Row
argument_list|>
name|rows
parameter_list|)
block|{
name|List
argument_list|<
name|Violation
argument_list|>
name|errors
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Clause
name|clause
range|:
name|session
operator|.
name|expandedClauses
control|)
block|{
if|if
condition|(
name|strict
operator|||
name|clause
operator|.
name|strict
condition|)
block|{
name|List
argument_list|<
name|Violation
argument_list|>
name|errs
init|=
name|clause
operator|.
name|test
argument_list|(
name|rows
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|errs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|errors
operator|.
name|addAll
argument_list|(
name|errs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|errors
return|;
block|}
end_function

begin_function
DECL|method|getModifiedMatrix
name|ArrayList
argument_list|<
name|Row
argument_list|>
name|getModifiedMatrix
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|matrix
parameter_list|,
name|Row
name|tmpRow
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Row
argument_list|>
name|copy
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|matrix
argument_list|)
decl_stmt|;
name|copy
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|tmpRow
argument_list|)
expr_stmt|;
return|return
name|copy
return|;
block|}
end_function

begin_function
DECL|method|isAllowed
specifier|protected
name|boolean
name|isAllowed
parameter_list|(
name|Object
name|v
parameter_list|,
name|Hint
name|hint
parameter_list|)
block|{
name|Object
name|hintVal
init|=
name|hints
operator|.
name|get
argument_list|(
name|hint
argument_list|)
decl_stmt|;
return|return
name|hintVal
operator|==
literal|null
operator|||
name|Objects
operator|.
name|equals
argument_list|(
name|v
argument_list|,
name|hintVal
argument_list|)
return|;
block|}
end_function

begin_enum
DECL|enum|Hint
specifier|public
enum|enum
name|Hint
block|{
DECL|enum constant|COLL
DECL|enum constant|SHARD
DECL|enum constant|SRC_NODE
DECL|enum constant|TARGET_NODE
name|COLL
block|,
name|SHARD
block|,
name|SRC_NODE
block|,
name|TARGET_NODE
block|}
end_enum

begin_function
unit|}    static
DECL|method|mergePolicies
name|List
argument_list|<
name|Clause
argument_list|>
name|mergePolicies
parameter_list|(
name|String
name|coll
parameter_list|,
name|List
argument_list|<
name|Clause
argument_list|>
name|collPolicy
parameter_list|,
name|List
argument_list|<
name|Clause
argument_list|>
name|globalPolicy
parameter_list|)
block|{
name|List
argument_list|<
name|Clause
argument_list|>
name|merged
init|=
name|insertColl
argument_list|(
name|coll
argument_list|,
name|collPolicy
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Clause
argument_list|>
name|global
init|=
name|insertColl
argument_list|(
name|coll
argument_list|,
name|globalPolicy
argument_list|)
decl_stmt|;
name|merged
operator|.
name|addAll
argument_list|(
name|global
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|clusterPolicyClause
lambda|->
name|merged
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|perCollPolicy
lambda|->
name|perCollPolicy
operator|.
name|doesOverride
argument_list|(
name|clusterPolicyClause
argument_list|)
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|merged
return|;
block|}
end_function

begin_comment
comment|/**    * Insert the collection name into the clauses where collection is not specified    */
end_comment

begin_function
DECL|method|insertColl
specifier|static
name|List
argument_list|<
name|Clause
argument_list|>
name|insertColl
parameter_list|(
name|String
name|coll
parameter_list|,
name|Collection
argument_list|<
name|Clause
argument_list|>
name|conditions
parameter_list|)
block|{
return|return
name|conditions
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|Clause
operator|::
name|isPerCollectiontag
argument_list|)
operator|.
name|map
argument_list|(
name|clause
lambda|->
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|copy
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|(
name|clause
operator|.
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|copy
operator|.
name|containsKey
argument_list|(
literal|"collection"
argument_list|)
condition|)
name|copy
operator|.
name|put
argument_list|(
literal|"collection"
argument_list|,
name|coll
argument_list|)
expr_stmt|;
return|return
operator|new
name|Clause
argument_list|(
name|copy
argument_list|)
return|;
block|}
argument_list|)
operator|.
name|filter
argument_list|(
name|it
lambda|->
operator|(
name|it
operator|.
name|collection
operator|.
name|isPass
argument_list|(
name|coll
argument_list|)
operator|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
DECL|field|ops
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|CollectionAction
argument_list|,
name|Supplier
argument_list|<
name|Suggester
argument_list|>
argument_list|>
name|ops
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_static
static|static
block|{
name|ops
operator|.
name|put
argument_list|(
name|CollectionAction
operator|.
name|ADDREPLICA
argument_list|,
parameter_list|()
lambda|->
operator|new
name|AddReplicaSuggester
argument_list|()
argument_list|)
expr_stmt|;
name|ops
operator|.
name|put
argument_list|(
name|CollectionAction
operator|.
name|MOVEREPLICA
argument_list|,
parameter_list|()
lambda|->
operator|new
name|MoveReplicaSuggester
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_static

unit|}
end_unit

