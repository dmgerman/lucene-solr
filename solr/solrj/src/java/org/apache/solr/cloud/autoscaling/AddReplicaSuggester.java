begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.autoscaling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|request
operator|.
name|CollectionAdminRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
operator|.
name|Policy
operator|.
name|Suggester
import|;
end_import

begin_class
DECL|class|AddReplicaSuggester
class|class
name|AddReplicaSuggester
extends|extends
name|Suggester
block|{
DECL|method|init
name|SolrRequest
name|init
parameter_list|()
block|{
name|SolrRequest
name|operation
init|=
name|tryEachNode
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
name|operation
operator|=
name|tryEachNode
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|operation
return|;
block|}
DECL|method|tryEachNode
name|SolrRequest
name|tryEachNode
parameter_list|(
name|boolean
name|strict
parameter_list|)
block|{
name|String
name|coll
init|=
operator|(
name|String
operator|)
name|hints
operator|.
name|get
argument_list|(
name|Hint
operator|.
name|COLL
argument_list|)
decl_stmt|;
name|String
name|shard
init|=
operator|(
name|String
operator|)
name|hints
operator|.
name|get
argument_list|(
name|Hint
operator|.
name|SHARD
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
operator|||
name|shard
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"add-replica requires 'collection' and 'shard'"
argument_list|)
throw|;
comment|//iterate through elements and identify the least loaded
name|List
argument_list|<
name|Clause
operator|.
name|Violation
argument_list|>
name|leastSeriousViolation
init|=
literal|null
decl_stmt|;
name|Integer
name|targetNodeIndex
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|getMatrix
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|Row
name|row
init|=
name|getMatrix
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAllowed
argument_list|(
name|row
operator|.
name|node
argument_list|,
name|Hint
operator|.
name|TARGET_NODE
argument_list|)
condition|)
continue|continue;
name|Row
name|tmpRow
init|=
name|row
operator|.
name|addReplica
argument_list|(
name|coll
argument_list|,
name|shard
argument_list|)
decl_stmt|;
name|tmpRow
operator|.
name|violations
operator|.
name|clear
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|Clause
operator|.
name|Violation
argument_list|>
name|errs
init|=
name|testChangedMatrix
argument_list|(
name|strict
argument_list|,
name|getModifiedMatrix
argument_list|(
name|getMatrix
argument_list|()
argument_list|,
name|tmpRow
argument_list|,
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|containsNewErrors
argument_list|(
name|errs
argument_list|)
condition|)
block|{
if|if
condition|(
name|isLessSerious
argument_list|(
name|errs
argument_list|,
name|leastSeriousViolation
argument_list|)
condition|)
block|{
name|leastSeriousViolation
operator|=
name|errs
expr_stmt|;
name|targetNodeIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|targetNodeIndex
operator|!=
literal|null
condition|)
block|{
comment|// there are no rule violations
name|getMatrix
argument_list|()
operator|.
name|set
argument_list|(
name|targetNodeIndex
argument_list|,
name|getMatrix
argument_list|()
operator|.
name|get
argument_list|(
name|targetNodeIndex
argument_list|)
operator|.
name|addReplica
argument_list|(
name|coll
argument_list|,
name|shard
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|CollectionAdminRequest
operator|.
name|addReplicaToShard
argument_list|(
name|coll
argument_list|,
name|shard
argument_list|)
operator|.
name|setNode
argument_list|(
name|getMatrix
argument_list|()
operator|.
name|get
argument_list|(
name|targetNodeIndex
argument_list|)
operator|.
name|node
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

