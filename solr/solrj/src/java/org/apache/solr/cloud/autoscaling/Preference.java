begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.solr.cloud.autoscaling
package|package
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|cloud
operator|.
name|autoscaling
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|MapWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|StrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|common
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_class
DECL|class|Preference
class|class
name|Preference
implements|implements
name|MapWriter
block|{
DECL|field|name
specifier|final
name|Policy
operator|.
name|SortParam
name|name
decl_stmt|;
DECL|field|precision
name|Integer
name|precision
decl_stmt|;
DECL|field|sort
specifier|final
name|Policy
operator|.
name|Sort
name|sort
decl_stmt|;
DECL|field|next
name|Preference
name|next
decl_stmt|;
DECL|field|idx
specifier|public
name|int
name|idx
decl_stmt|;
DECL|field|original
specifier|private
specifier|final
name|Map
name|original
decl_stmt|;
DECL|method|Preference
name|Preference
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|m
parameter_list|)
block|{
name|this
operator|.
name|original
operator|=
name|Utils
operator|.
name|getDeepCopy
argument_list|(
name|m
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|sort
operator|=
name|Policy
operator|.
name|Sort
operator|.
name|get
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|name
operator|=
name|Policy
operator|.
name|SortParam
operator|.
name|get
argument_list|(
name|m
operator|.
name|get
argument_list|(
name|sort
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|p
init|=
name|m
operator|.
name|getOrDefault
argument_list|(
literal|"precision"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|precision
operator|=
name|p
operator|instanceof
name|Number
condition|?
operator|(
operator|(
name|Number
operator|)
name|p
operator|)
operator|.
name|intValue
argument_list|()
else|:
name|Integer
operator|.
name|parseInt
argument_list|(
name|p
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|precision
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"precision must be a positive value "
argument_list|)
throw|;
block|}
if|if
condition|(
name|precision
argument_list|<
name|name
operator|.
name|min
operator|||
name|precision
argument_list|>
name|name
operator|.
name|max
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|StrUtils
operator|.
name|formatString
argument_list|(
literal|"invalid precision value {0} must lie between {1} and {1}"
argument_list|,
name|precision
argument_list|,
name|name
operator|.
name|min
argument_list|,
name|name
operator|.
name|max
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|// there are 2 modes of compare.
comment|// recursive, it uses the precision to tie& when there is a tie use the next preference to compare
comment|// in non-recursive mode, precision is not taken into consideration and sort is done on actual value
DECL|method|compare
name|int
name|compare
parameter_list|(
name|Row
name|r1
parameter_list|,
name|Row
name|r2
parameter_list|,
name|boolean
name|useApprox
parameter_list|)
block|{
name|Object
name|o1
init|=
name|useApprox
condition|?
name|r1
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|approxVal
else|:
name|r1
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|val
decl_stmt|;
name|Object
name|o2
init|=
name|useApprox
condition|?
name|r2
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|approxVal
else|:
name|r2
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|val
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Integer
operator|&&
name|o2
operator|instanceof
name|Integer
condition|)
name|result
operator|=
operator|(
operator|(
name|Integer
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Integer
operator|)
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Long
operator|&&
name|o2
operator|instanceof
name|Long
condition|)
name|result
operator|=
operator|(
operator|(
name|Long
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Long
operator|)
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Float
operator|&&
name|o2
operator|instanceof
name|Float
condition|)
name|result
operator|=
operator|(
operator|(
name|Float
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Float
operator|)
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Double
operator|&&
name|o2
operator|instanceof
name|Double
condition|)
name|result
operator|=
operator|(
operator|(
name|Double
operator|)
name|o1
operator|)
operator|.
name|compareTo
argument_list|(
operator|(
name|Double
operator|)
name|o2
argument_list|)
expr_stmt|;
return|return
name|result
operator|==
literal|0
condition|?
name|next
operator|==
literal|null
condition|?
literal|0
else|:
name|next
operator|.
name|compare
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|,
name|useApprox
argument_list|)
else|:
name|sort
operator|.
name|sortval
operator|*
name|result
return|;
block|}
comment|//sets the new value according to precision in val_
DECL|method|setApproxVal
name|void
name|setApproxVal
parameter_list|(
name|List
argument_list|<
name|Row
argument_list|>
name|tmpMatrix
parameter_list|)
block|{
name|Object
name|prevVal
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Row
name|row
range|:
name|tmpMatrix
control|)
block|{
name|prevVal
operator|=
name|row
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|approxVal
operator|=
name|prevVal
operator|==
literal|null
operator|||
name|Math
operator|.
name|abs
argument_list|(
operator|(
operator|(
name|Number
operator|)
name|prevVal
operator|)
operator|.
name|longValue
argument_list|()
operator|-
operator|(
operator|(
name|Number
operator|)
name|row
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|val
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
operator|>
name|precision
condition|?
name|row
operator|.
name|cells
index|[
name|idx
index|]
operator|.
name|val
else|:
name|prevVal
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|writeMap
specifier|public
name|void
name|writeMap
parameter_list|(
name|EntryWriter
name|ew
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Object
name|o
range|:
name|original
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Map
operator|.
name|Entry
name|e
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|o
decl_stmt|;
name|ew
operator|.
name|put
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

