begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.classification
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|classification
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiFields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|BM25Similarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * A classifier approximating naive bayes classifier by using pure queries on BM25.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|BM25NBClassifier
specifier|public
class|class
name|BM25NBClassifier
implements|implements
name|Classifier
argument_list|<
name|BytesRef
argument_list|>
block|{
comment|/**    * {@link IndexReader} used to access the {@link Classifier}'s    * index    */
DECL|field|indexReader
specifier|private
specifier|final
name|IndexReader
name|indexReader
decl_stmt|;
comment|/**    * names of the fields to be used as input text    */
DECL|field|textFieldNames
specifier|private
specifier|final
name|String
index|[]
name|textFieldNames
decl_stmt|;
comment|/**    * name of the field to be used as a class / category output    */
DECL|field|classFieldName
specifier|private
specifier|final
name|String
name|classFieldName
decl_stmt|;
comment|/**    * {@link Analyzer} to be used for tokenizing unseen input text    */
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
decl_stmt|;
comment|/**    * {@link IndexSearcher} to run searches on the index for retrieving frequencies    */
DECL|field|indexSearcher
specifier|private
specifier|final
name|IndexSearcher
name|indexSearcher
decl_stmt|;
comment|/**    * {@link Query} used to eventually filter the document set to be used to classify    */
DECL|field|query
specifier|private
specifier|final
name|Query
name|query
decl_stmt|;
comment|/**    * Creates a new NaiveBayes classifier.    *    * @param indexReader    the reader on the index to be used for classification    * @param analyzer       an {@link Analyzer} used to analyze unseen text    * @param query          a {@link Query} to eventually filter the docs used for training the classifier, or {@code null}    *                       if all the indexed docs should be used    * @param classFieldName the name of the field used as the output for the classifier NOTE: must not be havely analyzed    *                       as the returned class will be a token indexed for this field    * @param textFieldNames the name of the fields used as the inputs for the classifier, NO boosting supported per field    */
DECL|method|BM25NBClassifier
specifier|public
name|BM25NBClassifier
parameter_list|(
name|IndexReader
name|indexReader
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|Query
name|query
parameter_list|,
name|String
name|classFieldName
parameter_list|,
name|String
modifier|...
name|textFieldNames
parameter_list|)
block|{
name|this
operator|.
name|indexReader
operator|=
name|indexReader
expr_stmt|;
name|this
operator|.
name|indexSearcher
operator|=
operator|new
name|IndexSearcher
argument_list|(
name|this
operator|.
name|indexReader
argument_list|)
expr_stmt|;
name|this
operator|.
name|indexSearcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|BM25Similarity
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|textFieldNames
operator|=
name|textFieldNames
expr_stmt|;
name|this
operator|.
name|classFieldName
operator|=
name|classFieldName
expr_stmt|;
name|this
operator|.
name|analyzer
operator|=
name|analyzer
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|assignClass
specifier|public
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
name|assignClass
parameter_list|(
name|String
name|inputDocument
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|assignClassNormalizedList
argument_list|(
name|inputDocument
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getClasses
specifier|public
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|getClasses
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|assignedClasses
init|=
name|assignClassNormalizedList
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|assignedClasses
argument_list|)
expr_stmt|;
return|return
name|assignedClasses
return|;
block|}
comment|/**    * {@inheritDoc}    */
annotation|@
name|Override
DECL|method|getClasses
specifier|public
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|getClasses
parameter_list|(
name|String
name|text
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|assignedClasses
init|=
name|assignClassNormalizedList
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|assignedClasses
argument_list|)
expr_stmt|;
return|return
name|assignedClasses
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * Calculate probabilities for all classes for a given input text    *    * @param inputDocument the input text as a {@code String}    * @return a {@code List} of {@code ClassificationResult}, one for each existing class    * @throws IOException if assigning probabilities fails    */
DECL|method|assignClassNormalizedList
specifier|private
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|assignClassNormalizedList
parameter_list|(
name|String
name|inputDocument
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|assignedClasses
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Terms
name|classes
init|=
name|MultiFields
operator|.
name|getTerms
argument_list|(
name|indexReader
argument_list|,
name|classFieldName
argument_list|)
decl_stmt|;
name|TermsEnum
name|classesEnum
init|=
name|classes
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|next
decl_stmt|;
name|String
index|[]
name|tokenizedText
init|=
name|tokenize
argument_list|(
name|inputDocument
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|next
operator|=
name|classesEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|this
operator|.
name|classFieldName
argument_list|,
name|next
argument_list|)
decl_stmt|;
name|assignedClasses
operator|.
name|add
argument_list|(
operator|new
name|ClassificationResult
argument_list|<>
argument_list|(
name|term
operator|.
name|bytes
argument_list|()
argument_list|,
name|calculateLogPrior
argument_list|(
name|term
argument_list|)
operator|+
name|calculateLogLikelihood
argument_list|(
name|tokenizedText
argument_list|,
name|term
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|normClassificationResults
argument_list|(
name|assignedClasses
argument_list|)
return|;
block|}
comment|/**    * Normalize the classification results based on the max score available    *    * @param assignedClasses the list of assigned classes    * @return the normalized results    */
DECL|method|normClassificationResults
specifier|private
name|ArrayList
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|normClassificationResults
parameter_list|(
name|List
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|assignedClasses
parameter_list|)
block|{
comment|// normalization; the values transforms to a 0-1 range
name|ArrayList
argument_list|<
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|returnList
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|assignedClasses
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|assignedClasses
argument_list|)
expr_stmt|;
comment|// this is a negative number closest to 0 = a
name|double
name|smax
init|=
name|assignedClasses
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getScore
argument_list|()
decl_stmt|;
name|double
name|sumLog
init|=
literal|0
decl_stmt|;
comment|// log(sum(exp(x_n-a)))
for|for
control|(
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
name|cr
range|:
name|assignedClasses
control|)
block|{
comment|// getScore-smax<=0 (both negative, smax is the smallest abs()
name|sumLog
operator|+=
name|Math
operator|.
name|exp
argument_list|(
name|cr
operator|.
name|getScore
argument_list|()
operator|-
name|smax
argument_list|)
expr_stmt|;
block|}
comment|// loga=a+log(sum(exp(x_n-a))) = log(sum(exp(x_n)))
name|double
name|loga
init|=
name|smax
decl_stmt|;
name|loga
operator|+=
name|Math
operator|.
name|log
argument_list|(
name|sumLog
argument_list|)
expr_stmt|;
comment|// 1/sum*x = exp(log(x))*1/sum = exp(log(x)-log(sum))
for|for
control|(
name|ClassificationResult
argument_list|<
name|BytesRef
argument_list|>
name|cr
range|:
name|assignedClasses
control|)
block|{
name|double
name|scoreDiff
init|=
name|cr
operator|.
name|getScore
argument_list|()
operator|-
name|loga
decl_stmt|;
name|returnList
operator|.
name|add
argument_list|(
operator|new
name|ClassificationResult
argument_list|<>
argument_list|(
name|cr
operator|.
name|getAssignedClass
argument_list|()
argument_list|,
name|Math
operator|.
name|exp
argument_list|(
name|scoreDiff
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|returnList
return|;
block|}
comment|/**    * tokenize a<code>String</code> on this classifier's text fields and analyzer    *    * @param text the<code>String</code> representing an input text (to be classified)    * @return a<code>String</code> array of the resulting tokens    * @throws IOException if tokenization fails    */
DECL|method|tokenize
specifier|private
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|Collection
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|textFieldName
range|:
name|textFieldNames
control|)
block|{
try|try
init|(
name|TokenStream
name|tokenStream
init|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|textFieldName
argument_list|,
name|text
argument_list|)
init|)
block|{
name|CharTermAttribute
name|charTermAttribute
init|=
name|tokenStream
operator|.
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|tokenStream
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|tokenStream
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|charTermAttribute
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tokenStream
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|result
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
DECL|method|calculateLogLikelihood
specifier|private
name|double
name|calculateLogLikelihood
parameter_list|(
name|String
index|[]
name|tokens
parameter_list|,
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|result
init|=
literal|0d
decl_stmt|;
for|for
control|(
name|String
name|word
range|:
name|tokens
control|)
block|{
name|result
operator|+=
name|Math
operator|.
name|log
argument_list|(
name|getTermProbForClass
argument_list|(
name|term
argument_list|,
name|word
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
DECL|method|getTermProbForClass
specifier|private
name|double
name|getTermProbForClass
parameter_list|(
name|Term
name|classTerm
parameter_list|,
name|String
modifier|...
name|words
parameter_list|)
throws|throws
name|IOException
block|{
name|BooleanQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
name|classTerm
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|textFieldName
range|:
name|textFieldNames
control|)
block|{
for|for
control|(
name|String
name|word
range|:
name|words
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
operator|new
name|BooleanClause
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|textFieldName
argument_list|,
name|word
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|search
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|search
operator|.
name|totalHits
operator|>
literal|0
condition|?
name|search
operator|.
name|getMaxScore
argument_list|()
else|:
literal|1
return|;
block|}
DECL|method|calculateLogPrior
specifier|private
name|double
name|calculateLogPrior
parameter_list|(
name|Term
name|term
parameter_list|)
throws|throws
name|IOException
block|{
name|TermQuery
name|termQuery
init|=
operator|new
name|TermQuery
argument_list|(
name|term
argument_list|)
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|bq
operator|.
name|add
argument_list|(
name|termQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
name|bq
operator|.
name|add
argument_list|(
name|query
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|TopDocs
name|topDocs
init|=
name|indexSearcher
operator|.
name|search
argument_list|(
name|bq
operator|.
name|build
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|topDocs
operator|.
name|totalHits
operator|>
literal|0
condition|?
name|Math
operator|.
name|log
argument_list|(
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
else|:
literal|0
return|;
block|}
block|}
end_class

end_unit

