begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.benchmark.byTask.tasks
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|tasks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|benchmark
operator|.
name|byTask
operator|.
name|PerfRunData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Fields
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexableField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ScoreDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|DefaultEncoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Encoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|Highlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|QueryScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|SimpleHTMLFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|highlight
operator|.
name|TokenSources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
operator|.
name|UnifiedHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|BoundaryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|BreakIteratorBoundaryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FastVectorHighlighter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|FieldQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|ScoreOrderFragmentsBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|vectorhighlight
operator|.
name|WeightedFragListBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_comment
comment|/**  * Search and Traverse and Retrieve docs task.  Highlight the fields in the retrieved documents.  *  *<p>Note: This task reuses the reader if it is already open.  * Otherwise a reader is opened at start and closed at the end.  *</p>  *  *<p>Takes optional multivalued, comma separated param string as: type[&lt;enum&gt;],maxFrags[&lt;int&gt;],fields[name1;name2;...]</p>  *<ul>  *<li>type - the highlighter implementation, e.g. "UH"</li>  *<li>maxFrags - The maximum number of fragments to score by the highlighter</li>  *<li>fields - The fields to highlight.  If not specified all fields will be highlighted (or at least attempted)</li>  *</ul>  * Example:  *<pre>"SearchHlgtSameRdr" SearchTravRetHighlight(type[UH],maxFrags[3],fields[body])&gt; : 1000  *</pre>  *  * Documents must be stored in order for this task to work.  Additionally, term vector positions can be used as well,  * and offsets in postings is another option.  *  *<p>Other side effects: counts additional 1 (record) for each traversed hit,  * and 1 more for each retrieved (non null) document and 1 for each fragment returned.</p>  */
end_comment

begin_class
DECL|class|SearchTravRetHighlightTask
specifier|public
class|class
name|SearchTravRetHighlightTask
extends|extends
name|SearchTravTask
block|{
DECL|field|maxDocCharsToAnalyze
specifier|private
name|int
name|maxDocCharsToAnalyze
decl_stmt|;
comment|// max leading content chars to highlight
DECL|field|maxFrags
specifier|private
name|int
name|maxFrags
init|=
literal|1
decl_stmt|;
comment|// aka passages
DECL|field|hlFields
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|hlFields
init|=
name|Collections
operator|.
name|singleton
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
DECL|field|type
specifier|private
name|String
name|type
decl_stmt|;
DECL|field|hlImpl
specifier|private
name|HLImpl
name|hlImpl
decl_stmt|;
DECL|field|analyzer
specifier|private
name|Analyzer
name|analyzer
decl_stmt|;
DECL|method|SearchTravRetHighlightTask
specifier|public
name|SearchTravRetHighlightTask
parameter_list|(
name|PerfRunData
name|runData
parameter_list|)
block|{
name|super
argument_list|(
name|runData
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setParams
specifier|public
name|void
name|setParams
parameter_list|(
name|String
name|params
parameter_list|)
block|{
comment|// can't call super because super doesn't understand our params syntax
name|this
operator|.
name|params
operator|=
name|params
expr_stmt|;
comment|// TODO consider instead using data.getConfig().get("highlighter.*")?
name|String
index|[]
name|splits
init|=
name|params
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|split
range|:
name|splits
control|)
block|{
if|if
condition|(
name|split
operator|.
name|startsWith
argument_list|(
literal|"type["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|type
operator|=
name|split
operator|.
name|substring
argument_list|(
literal|"type["
operator|.
name|length
argument_list|()
argument_list|,
name|split
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|split
operator|.
name|startsWith
argument_list|(
literal|"maxFrags["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|maxFrags
operator|=
operator|(
name|int
operator|)
name|Float
operator|.
name|parseFloat
argument_list|(
name|split
operator|.
name|substring
argument_list|(
literal|"maxFrags["
operator|.
name|length
argument_list|()
argument_list|,
name|split
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|split
operator|.
name|startsWith
argument_list|(
literal|"fields["
argument_list|)
operator|==
literal|true
condition|)
block|{
name|String
name|fieldNames
init|=
name|split
operator|.
name|substring
argument_list|(
literal|"fields["
operator|.
name|length
argument_list|()
argument_list|,
name|split
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|String
index|[]
name|fieldSplits
init|=
name|fieldNames
operator|.
name|split
argument_list|(
literal|";"
argument_list|)
decl_stmt|;
name|hlFields
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|fieldSplits
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|setup
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setup
argument_list|()
expr_stmt|;
comment|//check to make sure either the doc is being stored
name|PerfRunData
name|data
init|=
name|getRunData
argument_list|()
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"doc.stored"
argument_list|,
literal|false
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"doc.stored must be set to true"
argument_list|)
throw|;
block|}
name|maxDocCharsToAnalyze
operator|=
name|data
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"highlighter.maxDocCharsToAnalyze"
argument_list|,
name|Highlighter
operator|.
name|DEFAULT_MAX_CHARS_TO_ANALYZE
argument_list|)
expr_stmt|;
name|analyzer
operator|=
name|data
operator|.
name|getAnalyzer
argument_list|()
expr_stmt|;
name|String
name|type
init|=
name|this
operator|.
name|type
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|type
operator|=
name|data
operator|.
name|getConfig
argument_list|()
operator|.
name|get
argument_list|(
literal|"highlighter"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
literal|"NONE"
case|:
name|hlImpl
operator|=
operator|new
name|NoHLImpl
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"SH_A"
case|:
name|hlImpl
operator|=
operator|new
name|StandardHLImpl
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"SH_V"
case|:
name|hlImpl
operator|=
operator|new
name|StandardHLImpl
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"FVH_V"
case|:
name|hlImpl
operator|=
operator|new
name|FastVectorHLImpl
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"UH"
case|:
name|hlImpl
operator|=
operator|new
name|UnifiedHLImpl
argument_list|(
literal|null
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"UH_A"
case|:
name|hlImpl
operator|=
operator|new
name|UnifiedHLImpl
argument_list|(
name|UnifiedHighlighter
operator|.
name|OffsetSource
operator|.
name|ANALYSIS
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"UH_V"
case|:
name|hlImpl
operator|=
operator|new
name|UnifiedHLImpl
argument_list|(
name|UnifiedHighlighter
operator|.
name|OffsetSource
operator|.
name|TERM_VECTORS
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"UH_P"
case|:
name|hlImpl
operator|=
operator|new
name|UnifiedHLImpl
argument_list|(
name|UnifiedHighlighter
operator|.
name|OffsetSource
operator|.
name|POSTINGS
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"UH_PV"
case|:
name|hlImpl
operator|=
operator|new
name|UnifiedHLImpl
argument_list|(
name|UnifiedHighlighter
operator|.
name|OffsetSource
operator|.
name|POSTINGS_WITH_TERM_VECTORS
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Exception
argument_list|(
literal|"unrecognized highlighter type: "
operator|+
name|type
operator|+
literal|" (try 'UH')"
argument_list|)
throw|;
block|}
block|}
comment|// here is where we intercept ReadTask's logic to do the highlighting, and nothing else (no retrieval of all field vals)
annotation|@
name|Override
DECL|method|withTopDocs
specifier|protected
name|int
name|withTopDocs
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|Exception
block|{
name|hlImpl
operator|.
name|withTopDocs
argument_list|(
name|searcher
argument_list|,
name|q
argument_list|,
name|hits
argument_list|)
expr_stmt|;
comment|// note: it'd be nice if we knew the sum kilobytes of text across these hits so we could return that. It'd be a more
comment|//  useful number to gauge the amount of work. But given "average" document sizes and lots of queries, returning the
comment|//  number of docs is reasonable.
return|return
name|hits
operator|.
name|scoreDocs
operator|.
name|length
return|;
comment|// always return # scored docs.
block|}
DECL|interface|HLImpl
specifier|private
interface|interface
name|HLImpl
block|{
DECL|method|withTopDocs
name|void
name|withTopDocs
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
DECL|field|preventOptimizeAway
specifier|private
specifier|volatile
name|int
name|preventOptimizeAway
init|=
literal|0
decl_stmt|;
DECL|class|StandardHLImpl
specifier|private
class|class
name|StandardHLImpl
implements|implements
name|HLImpl
block|{
DECL|field|formatter
name|SimpleHTMLFormatter
name|formatter
init|=
operator|new
name|SimpleHTMLFormatter
argument_list|(
literal|"<em>"
argument_list|,
literal|"</em>"
argument_list|)
decl_stmt|;
DECL|field|encoder
name|DefaultEncoder
name|encoder
init|=
operator|new
name|DefaultEncoder
argument_list|()
decl_stmt|;
DECL|field|highlighter
name|Highlighter
name|highlighter
init|=
operator|new
name|Highlighter
argument_list|(
name|formatter
argument_list|,
name|encoder
argument_list|,
literal|null
argument_list|)
decl_stmt|;
DECL|field|termVecs
name|boolean
name|termVecs
decl_stmt|;
DECL|method|StandardHLImpl
name|StandardHLImpl
parameter_list|(
name|boolean
name|termVecs
parameter_list|)
block|{
name|highlighter
operator|.
name|setEncoder
argument_list|(
operator|new
name|DefaultEncoder
argument_list|()
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setMaxDocCharsToAnalyze
argument_list|(
name|maxDocCharsToAnalyze
argument_list|)
expr_stmt|;
name|this
operator|.
name|termVecs
operator|=
name|termVecs
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|withTopDocs
specifier|public
name|void
name|withTopDocs
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
name|highlighter
operator|.
name|setFragmentScorer
argument_list|(
operator|new
name|QueryScorer
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
comment|// highlighter.setTextFragmenter();  unfortunately no sentence mechanism, not even regex. Default here is trivial
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|docIdOrder
argument_list|(
name|hits
operator|.
name|scoreDocs
argument_list|)
control|)
block|{
name|Document
name|document
init|=
name|reader
operator|.
name|document
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|hlFields
argument_list|)
decl_stmt|;
name|Fields
name|tvFields
init|=
name|termVecs
condition|?
name|reader
operator|.
name|getTermVectors
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|)
else|:
literal|null
decl_stmt|;
for|for
control|(
name|IndexableField
name|indexableField
range|:
name|document
control|)
block|{
name|TokenStream
name|tokenStream
decl_stmt|;
if|if
condition|(
name|termVecs
condition|)
block|{
name|tokenStream
operator|=
name|TokenSources
operator|.
name|getTokenStream
argument_list|(
name|indexableField
operator|.
name|name
argument_list|()
argument_list|,
name|tvFields
argument_list|,
name|indexableField
operator|.
name|stringValue
argument_list|()
argument_list|,
name|analyzer
argument_list|,
name|maxDocCharsToAnalyze
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tokenStream
operator|=
name|analyzer
operator|.
name|tokenStream
argument_list|(
name|indexableField
operator|.
name|name
argument_list|()
argument_list|,
name|indexableField
operator|.
name|stringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// will close TokenStream:
name|String
index|[]
name|fragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|tokenStream
argument_list|,
name|indexableField
operator|.
name|stringValue
argument_list|()
argument_list|,
name|maxFrags
argument_list|)
decl_stmt|;
name|preventOptimizeAway
operator|=
name|fragments
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|class|FastVectorHLImpl
specifier|private
class|class
name|FastVectorHLImpl
implements|implements
name|HLImpl
block|{
DECL|field|fragSize
name|int
name|fragSize
init|=
literal|100
decl_stmt|;
DECL|field|fragListBuilder
name|WeightedFragListBuilder
name|fragListBuilder
init|=
operator|new
name|WeightedFragListBuilder
argument_list|()
decl_stmt|;
DECL|field|bs
name|BoundaryScanner
name|bs
init|=
operator|new
name|BreakIteratorBoundaryScanner
argument_list|(
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
decl_stmt|;
DECL|field|fragmentsBuilder
name|ScoreOrderFragmentsBuilder
name|fragmentsBuilder
init|=
operator|new
name|ScoreOrderFragmentsBuilder
argument_list|(
name|bs
argument_list|)
decl_stmt|;
DECL|field|preTags
name|String
index|[]
name|preTags
init|=
block|{
literal|"<em>"
block|}
decl_stmt|;
DECL|field|postTags
name|String
index|[]
name|postTags
init|=
block|{
literal|"</em>"
block|}
decl_stmt|;
DECL|field|encoder
name|Encoder
name|encoder
init|=
operator|new
name|DefaultEncoder
argument_list|()
decl_stmt|;
comment|// new SimpleHTMLEncoder();
DECL|field|highlighter
name|FastVectorHighlighter
name|highlighter
init|=
operator|new
name|FastVectorHighlighter
argument_list|(
literal|true
argument_list|,
comment|// phraseHighlight
literal|false
argument_list|)
decl_stmt|;
comment|// requireFieldMatch -- not pertinent to our benchmark
annotation|@
name|Override
DECL|method|withTopDocs
specifier|public
name|void
name|withTopDocs
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|Exception
block|{
name|IndexReader
name|reader
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
decl_stmt|;
specifier|final
name|FieldQuery
name|fq
init|=
name|highlighter
operator|.
name|getFieldQuery
argument_list|(
name|q
argument_list|,
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|docIdOrder
argument_list|(
name|hits
operator|.
name|scoreDocs
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|hlField
range|:
name|hlFields
control|)
block|{
name|String
index|[]
name|fragments
init|=
name|highlighter
operator|.
name|getBestFragments
argument_list|(
name|fq
argument_list|,
name|reader
argument_list|,
name|scoreDoc
operator|.
name|doc
argument_list|,
name|hlField
argument_list|,
name|fragSize
argument_list|,
name|maxFrags
argument_list|,
name|fragListBuilder
argument_list|,
name|fragmentsBuilder
argument_list|,
name|preTags
argument_list|,
name|postTags
argument_list|,
name|encoder
argument_list|)
decl_stmt|;
name|preventOptimizeAway
operator|=
name|fragments
operator|.
name|length
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|docIdOrder
specifier|private
name|ScoreDoc
index|[]
name|docIdOrder
parameter_list|(
name|ScoreDoc
index|[]
name|scoreDocs
parameter_list|)
block|{
name|ScoreDoc
index|[]
name|clone
init|=
operator|new
name|ScoreDoc
index|[
name|scoreDocs
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scoreDocs
argument_list|,
literal|0
argument_list|,
name|clone
argument_list|,
literal|0
argument_list|,
name|scoreDocs
operator|.
name|length
argument_list|)
expr_stmt|;
name|ArrayUtil
operator|.
name|introSort
argument_list|(
name|clone
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|Integer
operator|.
name|compare
argument_list|(
name|a
operator|.
name|doc
argument_list|,
name|b
operator|.
name|doc
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|clone
return|;
block|}
DECL|class|UnifiedHLImpl
specifier|private
class|class
name|UnifiedHLImpl
implements|implements
name|HLImpl
block|{
DECL|field|highlighter
name|UnifiedHighlighter
name|highlighter
decl_stmt|;
DECL|field|lastSearcher
name|IndexSearcher
name|lastSearcher
decl_stmt|;
DECL|field|offsetSource
name|UnifiedHighlighter
operator|.
name|OffsetSource
name|offsetSource
decl_stmt|;
comment|// null means auto select
DECL|field|fields
name|String
index|[]
name|fields
init|=
name|hlFields
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|hlFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
DECL|field|maxPassages
name|int
index|[]
name|maxPassages
decl_stmt|;
DECL|method|UnifiedHLImpl
name|UnifiedHLImpl
parameter_list|(
specifier|final
name|UnifiedHighlighter
operator|.
name|OffsetSource
name|offsetSource
parameter_list|)
block|{
name|this
operator|.
name|offsetSource
operator|=
name|offsetSource
expr_stmt|;
name|maxPassages
operator|=
operator|new
name|int
index|[
name|hlFields
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|maxPassages
argument_list|,
name|maxFrags
argument_list|)
expr_stmt|;
block|}
DECL|method|reset
specifier|private
name|void
name|reset
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|)
block|{
if|if
condition|(
name|lastSearcher
operator|==
name|searcher
condition|)
block|{
return|return;
block|}
name|lastSearcher
operator|=
name|searcher
expr_stmt|;
name|highlighter
operator|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|analyzer
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|OffsetSource
name|getOffsetSource
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|offsetSource
operator|!=
literal|null
condition|?
name|offsetSource
else|:
name|super
operator|.
name|getOffsetSource
argument_list|(
name|field
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|highlighter
operator|.
name|setBreakIterator
argument_list|(
parameter_list|()
lambda|->
name|BreakIterator
operator|.
name|getSentenceInstance
argument_list|(
name|Locale
operator|.
name|ENGLISH
argument_list|)
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setMaxLength
argument_list|(
name|maxDocCharsToAnalyze
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setHighlightPhrasesStrictly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|withTopDocs
specifier|public
name|void
name|withTopDocs
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|Exception
block|{
name|reset
argument_list|(
name|searcher
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|result
init|=
name|highlighter
operator|.
name|highlightFields
argument_list|(
name|fields
argument_list|,
name|q
argument_list|,
name|hits
argument_list|,
name|maxPassages
argument_list|)
decl_stmt|;
name|preventOptimizeAway
operator|=
name|result
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
DECL|class|NoHLImpl
specifier|private
class|class
name|NoHLImpl
implements|implements
name|HLImpl
block|{
annotation|@
name|Override
DECL|method|withTopDocs
specifier|public
name|void
name|withTopDocs
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q
parameter_list|,
name|TopDocs
name|hits
parameter_list|)
throws|throws
name|Exception
block|{
comment|//just retrieve the HL fields
for|for
control|(
name|ScoreDoc
name|scoreDoc
range|:
name|docIdOrder
argument_list|(
name|hits
operator|.
name|scoreDocs
argument_list|)
control|)
block|{
name|preventOptimizeAway
operator|+=
name|searcher
operator|.
name|doc
argument_list|(
name|scoreDoc
operator|.
name|doc
argument_list|,
name|hlFields
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|?
literal|2
else|:
literal|1
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

