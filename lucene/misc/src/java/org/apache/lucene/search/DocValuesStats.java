begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/** Holds statistics for a DocValues field. */
end_comment

begin_class
DECL|class|DocValuesStats
specifier|public
specifier|abstract
class|class
name|DocValuesStats
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|missing
specifier|private
name|int
name|missing
init|=
literal|0
decl_stmt|;
DECL|field|count
specifier|private
name|int
name|count
init|=
literal|0
decl_stmt|;
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|min
specifier|protected
name|T
name|min
decl_stmt|;
DECL|field|max
specifier|protected
name|T
name|max
decl_stmt|;
DECL|method|DocValuesStats
specifier|protected
name|DocValuesStats
parameter_list|(
name|String
name|field
parameter_list|,
name|T
name|initialMin
parameter_list|,
name|T
name|initialMax
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|min
operator|=
name|initialMin
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|initialMax
expr_stmt|;
block|}
comment|/**    * Called after #{@link DocValuesStats#accumulate(int)} was processed and verified that the document has a value for    * the field. Implementations should update the statistics based on the value of the current document.    *    * @param count    *          the updated number of documents with value for this field.    */
DECL|method|doAccumulate
specifier|protected
specifier|abstract
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Initializes this object with the given reader context. Returns whether stats can be computed for this segment (i.e.    * it does have the requested DocValues field).    */
DECL|method|init
specifier|protected
specifier|abstract
name|boolean
name|init
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Returns whether the given document has a value for the requested DocValues field. */
DECL|method|hasValue
specifier|protected
specifier|abstract
name|boolean
name|hasValue
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|accumulate
specifier|final
name|void
name|accumulate
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasValue
argument_list|(
name|doc
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|doAccumulate
argument_list|(
name|count
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|missing
expr_stmt|;
block|}
block|}
DECL|method|addMissing
specifier|final
name|void
name|addMissing
parameter_list|()
block|{
operator|++
name|missing
expr_stmt|;
block|}
comment|/** The field for which these stats were computed. */
DECL|method|field
specifier|public
specifier|final
name|String
name|field
parameter_list|()
block|{
return|return
name|field
return|;
block|}
comment|/** The number of documents which have a value of the field. */
DECL|method|count
specifier|public
specifier|final
name|int
name|count
parameter_list|()
block|{
return|return
name|count
return|;
block|}
comment|/** The number of documents which do not have a value of the field. */
DECL|method|missing
specifier|public
specifier|final
name|int
name|missing
parameter_list|()
block|{
return|return
name|missing
return|;
block|}
comment|/** The minimum value of the field. Undefined when {@link #count} is zero. */
DECL|method|min
specifier|public
specifier|final
name|T
name|min
parameter_list|()
block|{
return|return
name|min
return|;
block|}
comment|/** The maximum value of the field. Undefined when {@link #count} is zero. */
DECL|method|max
specifier|public
specifier|final
name|T
name|max
parameter_list|()
block|{
return|return
name|max
return|;
block|}
comment|/** Holds statistics for a numeric DocValues field. */
DECL|class|NumericDocValuesStats
specifier|static
specifier|abstract
class|class
name|NumericDocValuesStats
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
extends|extends
name|DocValuesStats
argument_list|<
name|T
argument_list|>
block|{
DECL|field|mean
specifier|protected
name|double
name|mean
init|=
literal|0.0
decl_stmt|;
DECL|field|variance
specifier|protected
name|double
name|variance
init|=
literal|0.0
decl_stmt|;
DECL|field|ndv
specifier|protected
name|NumericDocValues
name|ndv
decl_stmt|;
DECL|method|NumericDocValuesStats
specifier|protected
name|NumericDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|,
name|T
name|initialMin
parameter_list|,
name|T
name|initialMax
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|initialMin
argument_list|,
name|initialMax
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|protected
specifier|final
name|boolean
name|init
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ndv
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getNumericDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|ndv
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|protected
specifier|final
name|boolean
name|hasValue
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ndv
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
comment|/** The mean of all values of the field. */
DECL|method|mean
specifier|public
specifier|final
name|double
name|mean
parameter_list|()
block|{
return|return
name|mean
return|;
block|}
comment|/** Returns the variance of all values of the field. */
DECL|method|variance
specifier|public
specifier|final
name|double
name|variance
parameter_list|()
block|{
name|int
name|count
init|=
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|variance
operator|/
name|count
else|:
literal|0
return|;
block|}
comment|/** Returns the stdev of all values of the field. */
DECL|method|stdev
specifier|public
specifier|final
name|double
name|stdev
parameter_list|()
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the sum of values of the field. Note that if the values are large, the {@code sum} might overflow. */
DECL|method|sum
specifier|public
specifier|abstract
name|T
name|sum
parameter_list|()
function_decl|;
block|}
comment|/** Holds DocValues statistics for a numeric field storing {@code long} values. */
DECL|class|LongDocValuesStats
specifier|public
specifier|static
specifier|final
class|class
name|LongDocValuesStats
extends|extends
name|NumericDocValuesStats
argument_list|<
name|Long
argument_list|>
block|{
comment|// To avoid boxing 'long' to 'Long' while the sum is computed, declare it as private variable.
DECL|field|sum
specifier|private
name|long
name|sum
init|=
literal|0
decl_stmt|;
DECL|method|LongDocValuesStats
specifier|public
name|LongDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAccumulate
specifier|protected
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|val
init|=
name|ndv
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|val
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|val
expr_stmt|;
block|}
name|sum
operator|+=
name|val
expr_stmt|;
name|double
name|oldMean
init|=
name|mean
decl_stmt|;
name|mean
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|/
name|count
expr_stmt|;
name|variance
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|*
operator|(
name|val
operator|-
name|oldMean
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sum
specifier|public
name|Long
name|sum
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
block|}
comment|/** Holds DocValues statistics for a numeric field storing {@code double} values. */
DECL|class|DoubleDocValuesStats
specifier|public
specifier|static
specifier|final
class|class
name|DoubleDocValuesStats
extends|extends
name|NumericDocValuesStats
argument_list|<
name|Double
argument_list|>
block|{
comment|// To avoid boxing 'double' to 'Double' while the sum is computed, declare it as private variable.
DECL|field|sum
specifier|private
name|double
name|sum
init|=
literal|0
decl_stmt|;
DECL|method|DoubleDocValuesStats
specifier|public
name|DoubleDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAccumulate
specifier|protected
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|double
name|val
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|ndv
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|val
argument_list|,
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|val
expr_stmt|;
block|}
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|val
argument_list|,
name|min
argument_list|)
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|val
expr_stmt|;
block|}
name|sum
operator|+=
name|val
expr_stmt|;
name|double
name|oldMean
init|=
name|mean
decl_stmt|;
name|mean
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|/
name|count
expr_stmt|;
name|variance
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|*
operator|(
name|val
operator|-
name|oldMean
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|sum
specifier|public
name|Double
name|sum
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
block|}
comment|/** Holds statistics for a sorted-numeric DocValues field. */
DECL|class|SortedNumericDocValuesStats
specifier|static
specifier|abstract
class|class
name|SortedNumericDocValuesStats
parameter_list|<
name|T
extends|extends
name|Number
parameter_list|>
extends|extends
name|DocValuesStats
argument_list|<
name|T
argument_list|>
block|{
DECL|field|valuesCount
specifier|protected
name|long
name|valuesCount
init|=
literal|0
decl_stmt|;
DECL|field|mean
specifier|protected
name|double
name|mean
init|=
literal|0.0
decl_stmt|;
DECL|field|variance
specifier|protected
name|double
name|variance
init|=
literal|0.0
decl_stmt|;
DECL|field|sndv
specifier|protected
name|SortedNumericDocValues
name|sndv
decl_stmt|;
DECL|method|SortedNumericDocValuesStats
specifier|protected
name|SortedNumericDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|,
name|T
name|initialMin
parameter_list|,
name|T
name|initialMax
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|initialMin
argument_list|,
name|initialMax
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|protected
specifier|final
name|boolean
name|init
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|sndv
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedNumericDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|sndv
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|protected
specifier|final
name|boolean
name|hasValue
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sndv
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
comment|/** The mean of all values of the field. */
DECL|method|mean
specifier|public
specifier|final
name|double
name|mean
parameter_list|()
block|{
return|return
name|mean
return|;
block|}
comment|/** Returns the variance of all values of the field. */
DECL|method|variance
specifier|public
specifier|final
name|double
name|variance
parameter_list|()
block|{
name|int
name|count
init|=
name|count
argument_list|()
decl_stmt|;
return|return
name|count
operator|>
literal|0
condition|?
name|variance
operator|/
name|count
else|:
literal|0
return|;
block|}
comment|/** Returns the stdev of all values of the field. */
DECL|method|stdev
specifier|public
specifier|final
name|double
name|stdev
parameter_list|()
block|{
return|return
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|()
argument_list|)
return|;
block|}
comment|/** Returns the total number of values for this field. */
DECL|method|valuesCount
specifier|public
specifier|final
name|long
name|valuesCount
parameter_list|()
block|{
return|return
name|valuesCount
return|;
block|}
comment|/** Returns the sum of values of the field. Note that if the values are large, the {@code sum} might overflow. */
DECL|method|sum
specifier|public
specifier|abstract
name|T
name|sum
parameter_list|()
function_decl|;
block|}
comment|/** Holds DocValues statistics for a sorted-numeric field storing {@code long} values. */
DECL|class|SortedLongDocValuesStats
specifier|public
specifier|static
specifier|final
class|class
name|SortedLongDocValuesStats
extends|extends
name|SortedNumericDocValuesStats
argument_list|<
name|Long
argument_list|>
block|{
comment|// To avoid boxing 'long' to 'Long' while the sum is computed, declare it as private variable.
DECL|field|sum
specifier|private
name|long
name|sum
init|=
literal|0
decl_stmt|;
DECL|method|SortedLongDocValuesStats
specifier|public
name|SortedLongDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAccumulate
specifier|protected
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numValues
init|=
name|sndv
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|numValues
operator|--
operator|>
literal|0
condition|)
block|{
name|long
name|val
init|=
name|sndv
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|val
operator|>
name|max
condition|)
block|{
name|max
operator|=
name|val
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|<
name|min
condition|)
block|{
name|min
operator|=
name|val
expr_stmt|;
block|}
name|sum
operator|+=
name|val
expr_stmt|;
name|double
name|oldMean
init|=
name|mean
decl_stmt|;
comment|// for correct "running average computation", increase valuesCount with each value, rather than once before the
comment|// loop stats.
operator|++
name|valuesCount
expr_stmt|;
name|mean
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|/
name|valuesCount
expr_stmt|;
name|variance
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|*
operator|(
name|val
operator|-
name|oldMean
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|sum
specifier|public
name|Long
name|sum
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
block|}
comment|/** Holds DocValues statistics for a sorted-numeric field storing {@code double} values. */
DECL|class|SortedDoubleDocValuesStats
specifier|public
specifier|static
specifier|final
class|class
name|SortedDoubleDocValuesStats
extends|extends
name|SortedNumericDocValuesStats
argument_list|<
name|Double
argument_list|>
block|{
comment|// To avoid boxing 'double' to 'Double' while the sum is computed, declare it as private variable.
DECL|field|sum
specifier|private
name|double
name|sum
init|=
literal|0
decl_stmt|;
DECL|method|SortedDoubleDocValuesStats
specifier|public
name|SortedDoubleDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|Double
operator|.
name|MAX_VALUE
argument_list|,
name|Double
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doAccumulate
specifier|protected
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|numValues
init|=
name|sndv
operator|.
name|docValueCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|numValues
operator|--
operator|>
literal|0
condition|)
block|{
name|double
name|val
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|sndv
operator|.
name|nextValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|val
argument_list|,
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|val
expr_stmt|;
block|}
if|if
condition|(
name|Double
operator|.
name|compare
argument_list|(
name|val
argument_list|,
name|min
argument_list|)
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|val
expr_stmt|;
block|}
name|sum
operator|+=
name|val
expr_stmt|;
name|double
name|oldMean
init|=
name|mean
decl_stmt|;
comment|// for correct "running average computation", increase valuesCount with each value, rather than once before the
comment|// loop stats.
operator|++
name|valuesCount
expr_stmt|;
name|mean
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|/
name|valuesCount
expr_stmt|;
name|variance
operator|+=
operator|(
name|val
operator|-
name|mean
operator|)
operator|*
operator|(
name|val
operator|-
name|oldMean
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|sum
specifier|public
name|Double
name|sum
parameter_list|()
block|{
return|return
name|sum
return|;
block|}
block|}
DECL|method|copyFrom
specifier|private
specifier|static
name|BytesRef
name|copyFrom
parameter_list|(
name|BytesRef
name|src
parameter_list|,
name|BytesRef
name|dest
parameter_list|)
block|{
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|src
argument_list|)
return|;
block|}
name|dest
operator|.
name|bytes
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|dest
operator|.
name|bytes
argument_list|,
name|src
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|src
operator|.
name|bytes
argument_list|,
name|src
operator|.
name|offset
argument_list|,
name|dest
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|src
operator|.
name|length
argument_list|)
expr_stmt|;
name|dest
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|dest
operator|.
name|length
operator|=
name|src
operator|.
name|length
expr_stmt|;
return|return
name|dest
return|;
block|}
comment|/** Holds statistics for a sorted DocValues field. */
DECL|class|SortedDocValuesStats
specifier|public
specifier|static
class|class
name|SortedDocValuesStats
extends|extends
name|DocValuesStats
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|sdv
specifier|protected
name|SortedDocValues
name|sdv
decl_stmt|;
DECL|method|SortedDocValuesStats
specifier|protected
name|SortedDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|protected
specifier|final
name|boolean
name|init
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|sdv
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|sdv
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|protected
specifier|final
name|boolean
name|hasValue
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|sdv
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doAccumulate
specifier|protected
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRef
name|val
init|=
name|sdv
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|val
operator|.
name|compareTo
argument_list|(
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|copyFrom
argument_list|(
name|val
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|val
operator|.
name|compareTo
argument_list|(
name|min
argument_list|)
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|copyFrom
argument_list|(
name|val
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** Holds statistics for a sorted-set DocValues field. */
DECL|class|SortedSetDocValuesStats
specifier|public
specifier|static
class|class
name|SortedSetDocValuesStats
extends|extends
name|DocValuesStats
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|ssdv
specifier|protected
name|SortedSetDocValues
name|ssdv
decl_stmt|;
DECL|method|SortedSetDocValuesStats
specifier|protected
name|SortedSetDocValuesStats
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|init
specifier|protected
specifier|final
name|boolean
name|init
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|ssdv
operator|=
name|context
operator|.
name|reader
argument_list|()
operator|.
name|getSortedSetDocValues
argument_list|(
name|field
argument_list|)
expr_stmt|;
return|return
name|ssdv
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|hasValue
specifier|protected
specifier|final
name|boolean
name|hasValue
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|ssdv
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doAccumulate
specifier|protected
name|void
name|doAccumulate
parameter_list|(
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|ord
decl_stmt|;
while|while
condition|(
operator|(
name|ord
operator|=
name|ssdv
operator|.
name|nextOrd
argument_list|()
operator|)
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
name|BytesRef
name|val
init|=
name|ssdv
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
decl_stmt|;
if|if
condition|(
name|max
operator|==
literal|null
operator|||
name|val
operator|.
name|compareTo
argument_list|(
name|max
argument_list|)
operator|>
literal|0
condition|)
block|{
name|max
operator|=
name|copyFrom
argument_list|(
name|val
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|val
operator|.
name|compareTo
argument_list|(
name|min
argument_list|)
operator|<
literal|0
condition|)
block|{
name|min
operator|=
name|copyFrom
argument_list|(
name|val
argument_list|,
name|min
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

