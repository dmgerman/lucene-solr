begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|RangeFieldQuery
operator|.
name|QueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/**  * An indexed InetAddress Range Field  *<p>  * This field indexes an {@code InetAddress} range defined as a min/max pairs. It is single  * dimension only (indexed as two 16 byte paired values).  *<p>  * Multiple values are supported.  *  *<p>  * This field defines the following static factory methods for common search operations over Ip Ranges  *<ul>  *<li>{@link #newIntersectsQuery newIntersectsQuery()} matches ip ranges that intersect the defined search range.  *<li>{@link #newWithinQuery newWithinQuery()} matches ip ranges that are within the defined search range.  *<li>{@link #newContainsQuery newContainsQuery()} matches ip ranges that contain the defined search range.  *<li>{@link #newCrossesQuery newCrossesQuery()} matches ip ranges that cross the defined search range  *</ul>  */
end_comment

begin_class
DECL|class|InetAddressRange
specifier|public
class|class
name|InetAddressRange
extends|extends
name|Field
block|{
comment|/** The number of bytes per dimension : sync w/ {@code InetAddressPoint} */
DECL|field|BYTES
specifier|public
specifier|static
specifier|final
name|int
name|BYTES
init|=
name|InetAddressPoint
operator|.
name|BYTES
decl_stmt|;
DECL|field|TYPE
specifier|private
specifier|static
specifier|final
name|FieldType
name|TYPE
decl_stmt|;
static|static
block|{
name|TYPE
operator|=
operator|new
name|FieldType
argument_list|()
expr_stmt|;
name|TYPE
operator|.
name|setDimensions
argument_list|(
literal|2
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
name|TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
comment|/**    * Create a new InetAddressRange from min/max value    * @param name field name. must not be null.    * @param min range min value; defined as an {@code InetAddress}    * @param max range max value; defined as an {@code InetAddress}    */
DECL|method|InetAddressRange
specifier|public
name|InetAddressRange
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
name|setRangeValues
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/**    * Change (or set) the min/max values of the field.    * @param min range min value; defined as an {@code InetAddress}    * @param max range max value; defined as an {@code InetAddress}    */
DECL|method|setRangeValues
specifier|public
name|void
name|setRangeValues
parameter_list|(
name|InetAddress
name|min
parameter_list|,
name|InetAddress
name|max
parameter_list|)
block|{
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
if|if
condition|(
name|fieldsData
operator|==
literal|null
condition|)
block|{
name|bytes
operator|=
operator|new
name|byte
index|[
name|BYTES
operator|*
literal|2
index|]
expr_stmt|;
name|fieldsData
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|fieldsData
operator|)
operator|.
name|bytes
expr_stmt|;
block|}
name|encode
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/** encode the min/max range into the provided byte array */
DECL|method|encode
specifier|private
specifier|static
name|void
name|encode
parameter_list|(
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|,
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
comment|// encode min and max value (consistent w/ InetAddressPoint encoding)
specifier|final
name|byte
index|[]
name|minEncoded
init|=
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|min
argument_list|)
decl_stmt|;
specifier|final
name|byte
index|[]
name|maxEncoded
init|=
name|InetAddressPoint
operator|.
name|encode
argument_list|(
name|max
argument_list|)
decl_stmt|;
comment|// ensure min is lt max
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|BYTES
argument_list|,
name|minEncoded
argument_list|,
literal|0
argument_list|,
name|maxEncoded
argument_list|,
literal|0
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"min value cannot be greater than max value for InetAddressRange field"
argument_list|)
throw|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|minEncoded
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
literal|0
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|maxEncoded
argument_list|,
literal|0
argument_list|,
name|bytes
argument_list|,
name|BYTES
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
block|}
comment|/** encode the min/max range and return the byte array */
DECL|method|encode
specifier|private
specifier|static
name|byte
index|[]
name|encode
parameter_list|(
name|InetAddress
name|min
parameter_list|,
name|InetAddress
name|max
parameter_list|)
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|BYTES
operator|*
literal|2
index|]
decl_stmt|;
name|encode
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Create a query for matching indexed ip ranges that {@code INTERSECT} the defined range.    * @param field field name. must not be null.    * @param min range min value; provided as an {@code InetAddress}    * @param max range max value; provided as an {@code InetAddress}    * @return query for matching intersecting ranges (overlap, within, crosses, or contains)    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newIntersectsQuery
specifier|public
specifier|static
name|Query
name|newIntersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|INTERSECTS
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ip ranges that {@code CONTAINS} the defined range.    * @param field field name. must not be null.    * @param min range min value; provided as an {@code InetAddress}    * @param max range max value; provided as an {@code InetAddress}    * @return query for matching intersecting ranges (overlap, within, crosses, or contains)    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newContainsQuery
specifier|public
specifier|static
name|Query
name|newContainsQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|CONTAINS
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ip ranges that are {@code WITHIN} the defined range.    * @param field field name. must not be null.    * @param min range min value; provided as an {@code InetAddress}    * @param max range max value; provided as an {@code InetAddress}    * @return query for matching intersecting ranges (overlap, within, crosses, or contains)    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newWithinQuery
specifier|public
specifier|static
name|Query
name|newWithinQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|WITHIN
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ip ranges that {@code CROSS} the defined range.    * @param field field name. must not be null.    * @param min range min value; provided as an {@code InetAddress}    * @param max range max value; provided as an {@code InetAddress}    * @return query for matching intersecting ranges (overlap, within, crosses, or contains)    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newCrossesQuery
specifier|public
specifier|static
name|Query
name|newCrossesQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|CROSSES
argument_list|)
return|;
block|}
comment|/** helper method for creating the desired relational query */
DECL|method|newRelationQuery
specifier|private
specifier|static
name|Query
name|newRelationQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|InetAddress
name|min
parameter_list|,
specifier|final
name|InetAddress
name|max
parameter_list|,
name|QueryType
name|relation
parameter_list|)
block|{
return|return
operator|new
name|RangeFieldQuery
argument_list|(
name|field
argument_list|,
name|encode
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
argument_list|,
literal|1
argument_list|,
name|relation
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|ranges
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
return|return
name|InetAddressRange
operator|.
name|toString
argument_list|(
name|ranges
argument_list|,
name|dimension
argument_list|)
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns the String representation for the range at the given dimension    * @param ranges the encoded ranges, never null    * @param dimension the dimension of interest (not used for this field)    * @return The string representation for the range at the provided dimension    */
DECL|method|toString
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|ranges
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
name|byte
index|[]
name|min
init|=
operator|new
name|byte
index|[
name|BYTES
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ranges
argument_list|,
literal|0
argument_list|,
name|min
argument_list|,
literal|0
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
name|byte
index|[]
name|max
init|=
operator|new
name|byte
index|[
name|BYTES
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ranges
argument_list|,
name|BYTES
argument_list|,
name|max
argument_list|,
literal|0
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
return|return
literal|"["
operator|+
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|min
argument_list|)
operator|+
literal|" : "
operator|+
name|InetAddressPoint
operator|.
name|decode
argument_list|(
name|max
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

