begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|DoubleSummaryStatistics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LongSummaryStatistics
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|DoubleStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DoubleDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
operator|.
name|Store
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesStats
operator|.
name|DoubleDocValuesStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesStats
operator|.
name|LongDocValuesStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesStats
operator|.
name|SortedDocValuesStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesStats
operator|.
name|SortedDoubleDocValuesStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesStats
operator|.
name|SortedLongDocValuesStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocValuesStats
operator|.
name|SortedSetDocValuesStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_comment
comment|/** Unit tests for {@link DocValuesStatsCollector}. */
end_comment

begin_class
DECL|class|TestDocValuesStatsCollector
specifier|public
class|class
name|TestDocValuesStatsCollector
extends|extends
name|LuceneTestCase
block|{
DECL|method|testNoDocsWithField
specifier|public
name|void
name|testNoDocsWithField
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|LongDocValuesStats
name|stats
init|=
operator|new
name|LongDocValuesStats
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|numDocs
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testOneDoc
specifier|public
name|void
name|testOneDoc
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"numeric"
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
name|field
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc1"
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|LongDocValuesStats
name|stats
init|=
operator|new
name|LongDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|max
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|min
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|sum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|mean
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|variance
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|stats
operator|.
name|stdev
argument_list|()
argument_list|,
literal|0.0001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testDocsWithLongValues
specifier|public
name|void
name|testDocsWithLongValues
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"numeric"
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
index|[]
name|docValues
init|=
operator|new
name|long
index|[
name|numDocs
index|]
decl_stmt|;
name|int
name|nextVal
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// not all documents have a value
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
name|field
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
name|nextVal
expr_stmt|;
operator|++
name|nextVal
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// 20% of cases delete some docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|LongDocValuesStats
name|stats
init|=
operator|new
name|LongDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expCount
init|=
operator|(
name|int
operator|)
name|Arrays
operator|.
name|stream
argument_list|(
name|docValues
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|>
literal|0
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expCount
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocsWithoutField
init|=
operator|(
name|int
operator|)
name|getZeroValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|computeExpMissing
argument_list|(
name|numDocsWithoutField
argument_list|,
name|numDocs
argument_list|,
name|reader
argument_list|)
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LongSummaryStatistics
name|sumStats
init|=
name|getPositiveValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|summaryStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMax
argument_list|()
argument_list|,
name|stats
operator|.
name|max
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMin
argument_list|()
argument_list|,
name|stats
operator|.
name|min
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getAverage
argument_list|()
argument_list|,
name|stats
operator|.
name|mean
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getSum
argument_list|()
argument_list|,
name|stats
operator|.
name|sum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|variance
init|=
name|computeVariance
argument_list|(
name|docValues
argument_list|,
name|stats
operator|.
name|mean
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|variance
argument_list|,
name|stats
operator|.
name|variance
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|)
argument_list|,
name|stats
operator|.
name|stdev
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDocsWithDoubleValues
specifier|public
name|void
name|testDocsWithDoubleValues
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"numeric"
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|double
index|[]
name|docValues
init|=
operator|new
name|double
index|[
name|numDocs
index|]
decl_stmt|;
name|double
name|nextVal
init|=
literal|1.0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// not all documents have a value
name|doc
operator|.
name|add
argument_list|(
operator|new
name|DoubleDocValuesField
argument_list|(
name|field
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
name|nextVal
expr_stmt|;
operator|++
name|nextVal
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// 20% of cases delete some docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|DoubleDocValuesStats
name|stats
init|=
operator|new
name|DoubleDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expCount
init|=
operator|(
name|int
operator|)
name|Arrays
operator|.
name|stream
argument_list|(
name|docValues
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|>
literal|0
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expCount
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocsWithoutField
init|=
operator|(
name|int
operator|)
name|getZeroValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|computeExpMissing
argument_list|(
name|numDocsWithoutField
argument_list|,
name|numDocs
argument_list|,
name|reader
argument_list|)
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DoubleSummaryStatistics
name|sumStats
init|=
name|getPositiveValues
argument_list|(
name|docValues
argument_list|)
operator|.
name|summaryStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMax
argument_list|()
argument_list|,
name|stats
operator|.
name|max
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMin
argument_list|()
argument_list|,
name|stats
operator|.
name|min
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getAverage
argument_list|()
argument_list|,
name|stats
operator|.
name|mean
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getSum
argument_list|()
argument_list|,
name|stats
operator|.
name|sum
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|double
name|variance
init|=
name|computeVariance
argument_list|(
name|docValues
argument_list|,
name|stats
operator|.
name|mean
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|variance
argument_list|,
name|stats
operator|.
name|variance
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|)
argument_list|,
name|stats
operator|.
name|stdev
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDocsWithMultipleLongValues
specifier|public
name|void
name|testDocsWithMultipleLongValues
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"numeric"
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|long
index|[]
index|[]
name|docValues
init|=
operator|new
name|long
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
name|long
name|nextVal
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// not all documents have a value
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
operator|new
name|long
index|[
name|numValues
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|field
argument_list|,
name|nextVal
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|nextVal
expr_stmt|;
operator|++
name|nextVal
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// 20% of cases delete some docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|SortedLongDocValuesStats
name|stats
init|=
operator|new
name|SortedLongDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocsWithoutField
init|=
operator|(
name|int
operator|)
name|isNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|computeExpMissing
argument_list|(
name|numDocsWithoutField
argument_list|,
name|numDocs
argument_list|,
name|reader
argument_list|)
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LongSummaryStatistics
name|sumStats
init|=
name|filterAndFlatValues
argument_list|(
name|docValues
argument_list|,
parameter_list|(
name|v
parameter_list|)
lambda|->
name|v
operator|!=
literal|null
argument_list|)
operator|.
name|summaryStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMax
argument_list|()
argument_list|,
name|stats
operator|.
name|max
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMin
argument_list|()
argument_list|,
name|stats
operator|.
name|min
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getAverage
argument_list|()
argument_list|,
name|stats
operator|.
name|mean
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getSum
argument_list|()
argument_list|,
name|stats
operator|.
name|sum
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|valuesCount
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|variance
init|=
name|computeVariance
argument_list|(
name|filterAndFlatValues
argument_list|(
name|docValues
argument_list|,
parameter_list|(
name|v
parameter_list|)
lambda|->
name|v
operator|!=
literal|null
argument_list|)
argument_list|,
name|stats
operator|.
name|mean
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|variance
argument_list|,
name|stats
operator|.
name|variance
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|)
argument_list|,
name|stats
operator|.
name|stdev
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDocsWithMultipleDoubleValues
specifier|public
name|void
name|testDocsWithMultipleDoubleValues
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"numeric"
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|double
index|[]
index|[]
name|docValues
init|=
operator|new
name|double
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
name|double
name|nextVal
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// not all documents have a value
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
operator|new
name|double
index|[
name|numValues
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
name|field
argument_list|,
name|Double
operator|.
name|doubleToRawLongBits
argument_list|(
name|nextVal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|nextVal
expr_stmt|;
operator|++
name|nextVal
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// 20% of cases delete some docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|SortedDoubleDocValuesStats
name|stats
init|=
operator|new
name|SortedDoubleDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocsWithoutField
init|=
operator|(
name|int
operator|)
name|isNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|computeExpMissing
argument_list|(
name|numDocsWithoutField
argument_list|,
name|numDocs
argument_list|,
name|reader
argument_list|)
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DoubleSummaryStatistics
name|sumStats
init|=
name|filterAndFlatValues
argument_list|(
name|docValues
argument_list|,
parameter_list|(
name|v
parameter_list|)
lambda|->
name|v
operator|!=
literal|null
argument_list|)
operator|.
name|summaryStatistics
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMax
argument_list|()
argument_list|,
name|stats
operator|.
name|max
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getMin
argument_list|()
argument_list|,
name|stats
operator|.
name|min
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getAverage
argument_list|()
argument_list|,
name|stats
operator|.
name|mean
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getSum
argument_list|()
argument_list|,
name|stats
operator|.
name|sum
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sumStats
operator|.
name|getCount
argument_list|()
argument_list|,
name|stats
operator|.
name|valuesCount
argument_list|()
argument_list|)
expr_stmt|;
name|double
name|variance
init|=
name|computeVariance
argument_list|(
name|filterAndFlatValues
argument_list|(
name|docValues
argument_list|,
parameter_list|(
name|v
parameter_list|)
lambda|->
name|v
operator|!=
literal|null
argument_list|)
argument_list|,
name|stats
operator|.
name|mean
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|variance
argument_list|,
name|stats
operator|.
name|variance
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Math
operator|.
name|sqrt
argument_list|(
name|variance
argument_list|)
argument_list|,
name|stats
operator|.
name|stdev
argument_list|()
argument_list|,
literal|0.00001
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDocsWithSortedValues
specifier|public
name|void
name|testDocsWithSortedValues
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"sorted"
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
name|docValues
init|=
operator|new
name|BytesRef
index|[
name|numDocs
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// not all documents have a value
name|BytesRef
name|val
init|=
name|TestUtil
operator|.
name|randomBinaryTerm
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
name|field
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
name|val
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// 20% of cases delete some docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|SortedDocValuesStats
name|stats
init|=
operator|new
name|SortedDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expCount
init|=
operator|(
name|int
operator|)
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expCount
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocsWithoutField
init|=
operator|(
name|int
operator|)
name|isNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|computeExpMissing
argument_list|(
name|numDocsWithoutField
argument_list|,
name|numDocs
argument_list|,
name|reader
argument_list|)
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|min
argument_list|(
name|BytesRef
operator|::
name|compareTo
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|max
argument_list|(
name|BytesRef
operator|::
name|compareTo
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|testDocsWithSortedSetValues
specifier|public
name|void
name|testDocsWithSortedSetValues
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|;
name|IndexWriter
name|indexWriter
operator|=
operator|new
name|IndexWriter
argument_list|(
name|dir
argument_list|,
name|newIndexWriterConfig
argument_list|()
argument_list|)
init|)
block|{
name|String
name|field
init|=
literal|"sorted"
decl_stmt|;
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|BytesRef
index|[]
index|[]
name|docValues
init|=
operator|new
name|BytesRef
index|[
name|numDocs
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// not all documents have a value
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
operator|new
name|BytesRef
index|[
name|numValues
index|]
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
name|j
operator|++
control|)
block|{
name|BytesRef
name|val
init|=
name|TestUtil
operator|.
name|randomBinaryTerm
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
name|field
argument_list|,
name|val
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|val
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|,
name|Store
operator|.
name|NO
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|// 20% of cases delete some docs
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextDouble
argument_list|()
operator|<
literal|0.2
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|indexWriter
operator|.
name|deleteDocuments
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"doc"
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|docValues
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
try|try
init|(
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|indexWriter
argument_list|)
init|)
block|{
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|SortedSetDocValuesStats
name|stats
init|=
operator|new
name|SortedSetDocValuesStats
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|TotalHitCountCollector
name|totalHitCount
init|=
operator|new
name|TotalHitCountCollector
argument_list|()
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|totalHitCount
argument_list|,
operator|new
name|DocValuesStatsCollector
argument_list|(
name|stats
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|expCount
init|=
operator|(
name|int
operator|)
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expCount
argument_list|,
name|stats
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|numDocsWithoutField
init|=
operator|(
name|int
operator|)
name|isNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|count
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|computeExpMissing
argument_list|(
name|numDocsWithoutField
argument_list|,
name|numDocs
argument_list|,
name|reader
argument_list|)
argument_list|,
name|stats
operator|.
name|missing
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Arrays
operator|::
name|stream
argument_list|)
operator|.
name|min
argument_list|(
name|BytesRef
operator|::
name|compareTo
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|min
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|nonNull
argument_list|(
name|docValues
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Arrays
operator|::
name|stream
argument_list|)
operator|.
name|max
argument_list|(
name|BytesRef
operator|::
name|compareTo
argument_list|)
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|max
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
DECL|method|getPositiveValues
specifier|private
specifier|static
name|LongStream
name|getPositiveValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|>
literal|0
argument_list|)
return|;
block|}
DECL|method|getPositiveValues
specifier|private
specifier|static
name|DoubleStream
name|getPositiveValues
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|>
literal|0
argument_list|)
return|;
block|}
DECL|method|getZeroValues
specifier|private
specifier|static
name|LongStream
name|getZeroValues
parameter_list|(
name|long
index|[]
name|values
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|==
literal|0
argument_list|)
return|;
block|}
DECL|method|getZeroValues
specifier|private
specifier|static
name|DoubleStream
name|getZeroValues
parameter_list|(
name|double
index|[]
name|values
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|filter
argument_list|(
name|v
lambda|->
name|v
operator|==
literal|0
argument_list|)
return|;
block|}
DECL|method|computeVariance
specifier|private
specifier|static
name|double
name|computeVariance
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|double
name|mean
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|getPositiveValues
argument_list|(
name|values
argument_list|)
operator|.
name|mapToDouble
argument_list|(
name|v
lambda|->
operator|(
name|v
operator|-
name|mean
operator|)
operator|*
operator|(
name|v
operator|-
name|mean
operator|)
argument_list|)
operator|.
name|sum
argument_list|()
operator|/
name|count
return|;
block|}
DECL|method|computeVariance
specifier|private
specifier|static
name|double
name|computeVariance
parameter_list|(
name|double
index|[]
name|values
parameter_list|,
name|double
name|mean
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|getPositiveValues
argument_list|(
name|values
argument_list|)
operator|.
name|map
argument_list|(
name|v
lambda|->
operator|(
name|v
operator|-
name|mean
operator|)
operator|*
operator|(
name|v
operator|-
name|mean
operator|)
argument_list|)
operator|.
name|sum
argument_list|()
operator|/
name|count
return|;
block|}
DECL|method|filterAndFlatValues
specifier|private
specifier|static
name|LongStream
name|filterAndFlatValues
argument_list|(
name|long
index|[]
index|[]
name|values
argument_list|,
name|Predicate
operator|<
condition|?
name|super
name|long
index|[]
operator|>
name|p
argument_list|)
block|{
return|return
name|nonNull
argument_list|(
name|values
argument_list|)
operator|.
name|flatMapToLong
argument_list|(
name|Arrays
operator|::
name|stream
argument_list|)
return|;
block|}
DECL|method|filterAndFlatValues
specifier|private
specifier|static
name|DoubleStream
name|filterAndFlatValues
argument_list|(
name|double
index|[]
index|[]
name|values
argument_list|,
name|Predicate
operator|<
condition|?
name|super
name|double
index|[]
operator|>
name|p
argument_list|)
block|{
return|return
name|nonNull
argument_list|(
name|values
argument_list|)
operator|.
name|flatMapToDouble
argument_list|(
name|Arrays
operator|::
name|stream
argument_list|)
return|;
block|}
DECL|method|computeVariance
specifier|private
specifier|static
name|double
name|computeVariance
parameter_list|(
name|LongStream
name|values
parameter_list|,
name|double
name|mean
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|values
operator|.
name|mapToDouble
argument_list|(
name|v
lambda|->
operator|(
name|v
operator|-
name|mean
operator|)
operator|*
operator|(
name|v
operator|-
name|mean
operator|)
argument_list|)
operator|.
name|sum
argument_list|()
operator|/
name|count
return|;
block|}
DECL|method|computeVariance
specifier|private
specifier|static
name|double
name|computeVariance
parameter_list|(
name|DoubleStream
name|values
parameter_list|,
name|double
name|mean
parameter_list|,
name|int
name|count
parameter_list|)
block|{
return|return
name|values
operator|.
name|map
argument_list|(
name|v
lambda|->
operator|(
name|v
operator|-
name|mean
operator|)
operator|*
operator|(
name|v
operator|-
name|mean
operator|)
argument_list|)
operator|.
name|sum
argument_list|()
operator|/
name|count
return|;
block|}
DECL|method|nonNull
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Stream
argument_list|<
name|T
argument_list|>
name|nonNull
parameter_list|(
name|T
index|[]
name|values
parameter_list|)
block|{
return|return
name|filterValues
argument_list|(
name|values
argument_list|,
name|Objects
operator|::
name|nonNull
argument_list|)
return|;
block|}
DECL|method|isNull
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Stream
argument_list|<
name|T
argument_list|>
name|isNull
parameter_list|(
name|T
index|[]
name|values
parameter_list|)
block|{
return|return
name|filterValues
argument_list|(
name|values
argument_list|,
name|Objects
operator|::
name|isNull
argument_list|)
return|;
block|}
DECL|method|filterValues
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Stream
argument_list|<
name|T
argument_list|>
name|filterValues
parameter_list|(
name|T
index|[]
name|values
parameter_list|,
name|Predicate
argument_list|<
name|?
super|super
name|T
argument_list|>
name|p
parameter_list|)
block|{
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|values
argument_list|)
operator|.
name|filter
argument_list|(
name|p
argument_list|)
return|;
block|}
DECL|method|computeExpMissing
specifier|private
specifier|static
name|int
name|computeExpMissing
parameter_list|(
name|int
name|numDocsWithoutField
parameter_list|,
name|int
name|numIndexedDocs
parameter_list|,
name|IndexReader
name|reader
parameter_list|)
block|{
comment|// The number of missing documents equals the number of docs without the field (not indexed with it, or were
comment|// deleted). However, in case we deleted all documents in a segment before the reader was opened, there will be
comment|// a mismatch between numDocs (how many we indexed) to reader.maxDoc(), so compensate for that.
return|return
name|numDocsWithoutField
operator|-
name|reader
operator|.
name|numDeletedDocs
argument_list|()
operator|-
operator|(
name|numIndexedDocs
operator|-
name|reader
operator|.
name|maxDoc
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

