begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.facet
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|facet
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectorManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A {@link CollectorManager} implementation which produce FacetsCollector and product a merged FacetsCollector.  * This is used for concurrent FacetsCollection.  */
end_comment

begin_class
DECL|class|FacetsCollectorManager
class|class
name|FacetsCollectorManager
implements|implements
name|CollectorManager
argument_list|<
name|FacetsCollector
argument_list|,
name|FacetsCollector
argument_list|>
block|{
DECL|field|EMPTY
specifier|public
specifier|final
specifier|static
name|FacetsCollector
name|EMPTY
init|=
operator|new
name|FacetsCollector
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|newCollector
specifier|public
name|FacetsCollector
name|newCollector
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FacetsCollector
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reduce
specifier|public
name|FacetsCollector
name|reduce
parameter_list|(
name|Collection
argument_list|<
name|FacetsCollector
argument_list|>
name|collectors
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|collectors
operator|==
literal|null
operator|||
name|collectors
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|EMPTY
return|;
if|if
condition|(
name|collectors
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
return|return
name|collectors
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
return|return
operator|new
name|ReducedFacetsCollector
argument_list|(
name|collectors
argument_list|)
return|;
block|}
DECL|class|ReducedFacetsCollector
specifier|private
specifier|static
class|class
name|ReducedFacetsCollector
extends|extends
name|FacetsCollector
block|{
DECL|method|ReducedFacetsCollector
specifier|public
name|ReducedFacetsCollector
parameter_list|(
specifier|final
name|Collection
argument_list|<
name|FacetsCollector
argument_list|>
name|facetsCollectors
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|MatchingDocs
argument_list|>
name|matchingDocs
init|=
name|this
operator|.
name|getMatchingDocs
argument_list|()
decl_stmt|;
name|facetsCollectors
operator|.
name|forEach
argument_list|(
name|facetsCollector
lambda|->
name|matchingDocs
operator|.
name|addAll
argument_list|(
name|facetsCollector
operator|.
name|getMatchingDocs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

