begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping.function
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|AllGroupHeadsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|AllGroupsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|FirstPassGroupingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|SecondPassGroupingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|Grouper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
operator|.
name|SearchGroup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValue
import|;
end_import

begin_comment
comment|/**  * Collector factory for grouping by ValueSource  */
end_comment

begin_class
DECL|class|FunctionGrouper
specifier|public
class|class
name|FunctionGrouper
extends|extends
name|Grouper
argument_list|<
name|MutableValue
argument_list|>
block|{
DECL|field|valueSource
specifier|private
specifier|final
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|context
decl_stmt|;
comment|/**    * Create a Grouper for the provided ValueSource and context    */
DECL|method|FunctionGrouper
specifier|public
name|FunctionGrouper
parameter_list|(
name|ValueSource
name|valueSource
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|context
parameter_list|)
block|{
name|this
operator|.
name|valueSource
operator|=
name|valueSource
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFirstPassCollector
specifier|public
name|FirstPassGroupingCollector
argument_list|<
name|MutableValue
argument_list|>
name|getFirstPassCollector
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FunctionFirstPassGroupingCollector
argument_list|(
name|valueSource
argument_list|,
name|context
argument_list|,
name|sort
argument_list|,
name|count
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getGroupHeadsCollector
specifier|public
name|AllGroupHeadsCollector
argument_list|<
name|MutableValue
argument_list|>
name|getGroupHeadsCollector
parameter_list|(
name|Sort
name|sort
parameter_list|)
block|{
return|return
operator|new
name|FunctionAllGroupHeadsCollector
argument_list|(
name|valueSource
argument_list|,
name|context
argument_list|,
name|sort
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getAllGroupsCollector
specifier|public
name|AllGroupsCollector
argument_list|<
name|MutableValue
argument_list|>
name|getAllGroupsCollector
parameter_list|()
block|{
return|return
operator|new
name|FunctionAllGroupsCollector
argument_list|(
name|valueSource
argument_list|,
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSecondPassCollector
specifier|public
name|SecondPassGroupingCollector
argument_list|<
name|MutableValue
argument_list|>
name|getSecondPassCollector
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|>
name|searchGroups
parameter_list|,
name|Sort
name|groupSort
parameter_list|,
name|Sort
name|withinGroupSort
parameter_list|,
name|int
name|maxDocsPerGroup
parameter_list|,
name|boolean
name|getScores
parameter_list|,
name|boolean
name|getMaxScores
parameter_list|,
name|boolean
name|fillSortFields
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|FunctionSecondPassGroupingCollector
argument_list|(
name|searchGroups
argument_list|,
name|groupSort
argument_list|,
name|withinGroupSort
argument_list|,
name|maxDocsPerGroup
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|,
name|fillSortFields
argument_list|,
name|valueSource
argument_list|,
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

