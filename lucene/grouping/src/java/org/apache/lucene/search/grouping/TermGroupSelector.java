begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefHash
import|;
end_import

begin_comment
comment|/**  * A GroupSelector implementation that groups via SortedDocValues  */
end_comment

begin_class
DECL|class|TermGroupSelector
specifier|public
class|class
name|TermGroupSelector
extends|extends
name|GroupSelector
argument_list|<
name|BytesRef
argument_list|>
block|{
DECL|field|field
specifier|private
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|values
specifier|private
specifier|final
name|BytesRefHash
name|values
init|=
operator|new
name|BytesRefHash
argument_list|()
decl_stmt|;
DECL|field|ordsToGroupIds
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|ordsToGroupIds
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|docValues
specifier|private
name|SortedDocValues
name|docValues
decl_stmt|;
DECL|field|groupId
specifier|private
name|int
name|groupId
decl_stmt|;
DECL|field|secondPass
specifier|private
name|boolean
name|secondPass
decl_stmt|;
DECL|field|includeEmpty
specifier|private
name|boolean
name|includeEmpty
decl_stmt|;
comment|/**    * Create a new TermGroupSelector    * @param field the SortedDocValues field to use for grouping    */
DECL|method|TermGroupSelector
specifier|public
name|TermGroupSelector
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docValues
operator|=
name|DocValues
operator|.
name|getSorted
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordsToGroupIds
operator|.
name|clear
argument_list|()
expr_stmt|;
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|int
name|ord
init|=
name|this
operator|.
name|docValues
operator|.
name|lookupTerm
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
if|if
condition|(
name|ord
operator|>=
literal|0
condition|)
name|ordsToGroupIds
operator|.
name|put
argument_list|(
name|ord
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|advanceTo
specifier|public
name|State
name|advanceTo
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|docValues
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
condition|)
block|{
name|groupId
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|includeEmpty
condition|?
name|State
operator|.
name|ACCEPT
else|:
name|State
operator|.
name|SKIP
return|;
block|}
name|int
name|ord
init|=
name|docValues
operator|.
name|ordValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|ordsToGroupIds
operator|.
name|containsKey
argument_list|(
name|ord
argument_list|)
condition|)
block|{
name|groupId
operator|=
name|ordsToGroupIds
operator|.
name|get
argument_list|(
name|ord
argument_list|)
expr_stmt|;
return|return
name|State
operator|.
name|ACCEPT
return|;
block|}
if|if
condition|(
name|secondPass
condition|)
return|return
name|State
operator|.
name|SKIP
return|;
name|groupId
operator|=
name|values
operator|.
name|add
argument_list|(
name|docValues
operator|.
name|binaryValue
argument_list|()
argument_list|)
expr_stmt|;
name|ordsToGroupIds
operator|.
name|put
argument_list|(
name|ord
argument_list|,
name|groupId
argument_list|)
expr_stmt|;
return|return
name|State
operator|.
name|ACCEPT
return|;
block|}
DECL|field|scratch
specifier|private
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
annotation|@
name|Override
DECL|method|currentValue
specifier|public
name|BytesRef
name|currentValue
parameter_list|()
block|{
if|if
condition|(
name|groupId
operator|==
operator|-
literal|1
condition|)
return|return
literal|null
return|;
name|values
operator|.
name|get
argument_list|(
name|groupId
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
return|return
name|scratch
return|;
block|}
annotation|@
name|Override
DECL|method|copyValue
specifier|public
name|BytesRef
name|copyValue
parameter_list|()
block|{
if|if
condition|(
name|groupId
operator|==
operator|-
literal|1
condition|)
return|return
literal|null
return|;
return|return
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|currentValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|setGroups
specifier|public
name|void
name|setGroups
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
argument_list|>
name|searchGroups
parameter_list|)
block|{
name|this
operator|.
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|values
operator|.
name|reinit
argument_list|()
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|BytesRef
argument_list|>
name|sg
range|:
name|searchGroups
control|)
block|{
if|if
condition|(
name|sg
operator|.
name|groupValue
operator|==
literal|null
condition|)
name|includeEmpty
operator|=
literal|true
expr_stmt|;
else|else
name|this
operator|.
name|values
operator|.
name|add
argument_list|(
name|sg
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|secondPass
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

