begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_comment
comment|/**  * A factory object to create first and second-pass collectors, run by a {@link GroupingSearch}  * @param<T> the type the group value  */
end_comment

begin_class
DECL|class|Grouper
specifier|public
specifier|abstract
class|class
name|Grouper
parameter_list|<
name|T
parameter_list|>
block|{
comment|/**    * Create a first-pass collector    * @param sort  the order in which groups should be returned    * @param count how many groups to return    */
DECL|method|getFirstPassCollector
specifier|public
specifier|abstract
name|FirstPassGroupingCollector
argument_list|<
name|T
argument_list|>
name|getFirstPassCollector
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Create an {@link AllGroupsCollector}    */
DECL|method|getAllGroupsCollector
specifier|public
specifier|abstract
name|AllGroupsCollector
argument_list|<
name|T
argument_list|>
name|getAllGroupsCollector
parameter_list|()
function_decl|;
comment|/**    * Create an {@link AllGroupHeadsCollector}    * @param sort a within-group sort order to determine which doc is the group head    */
DECL|method|getGroupHeadsCollector
specifier|public
specifier|abstract
name|AllGroupHeadsCollector
argument_list|<
name|T
argument_list|>
name|getGroupHeadsCollector
parameter_list|(
name|Sort
name|sort
parameter_list|)
function_decl|;
comment|/**    * Create a second-pass collector    */
DECL|method|getSecondPassCollector
specifier|public
specifier|abstract
name|SecondPassGroupingCollector
argument_list|<
name|T
argument_list|>
name|getSecondPassCollector
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|Sort
name|groupSort
parameter_list|,
name|Sort
name|withinGroupSort
parameter_list|,
name|int
name|maxDocsPerGroup
parameter_list|,
name|boolean
name|getScores
parameter_list|,
name|boolean
name|getMaxScores
parameter_list|,
name|boolean
name|fillSortFields
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_class

end_unit

