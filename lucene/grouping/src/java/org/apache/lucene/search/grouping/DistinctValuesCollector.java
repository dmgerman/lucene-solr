begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import

begin_comment
comment|/**  * A second pass grouping collector that keeps track of distinct values for a specified field for the top N group.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|DistinctValuesCollector
specifier|public
class|class
name|DistinctValuesCollector
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
extends|extends
name|SecondPassGroupingCollector
argument_list|<
name|T
argument_list|>
block|{
comment|/**    * Create a DistinctValuesCollector    * @param groupSelector the group selector to determine the top-level groups    * @param groups        the top-level groups to collect for    * @param valueSelector a group selector to determine which values to collect per-group    */
DECL|method|DistinctValuesCollector
specifier|public
name|DistinctValuesCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|groupSelector
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|GroupSelector
argument_list|<
name|R
argument_list|>
name|valueSelector
parameter_list|)
block|{
name|super
argument_list|(
name|groupSelector
argument_list|,
name|groups
argument_list|,
operator|new
name|DistinctValuesReducer
argument_list|<>
argument_list|(
name|valueSelector
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|ValuesCollector
specifier|private
specifier|static
class|class
name|ValuesCollector
parameter_list|<
name|R
parameter_list|>
extends|extends
name|SimpleCollector
block|{
DECL|field|valueSelector
specifier|final
name|GroupSelector
argument_list|<
name|R
argument_list|>
name|valueSelector
decl_stmt|;
DECL|field|values
specifier|final
name|Set
argument_list|<
name|R
argument_list|>
name|values
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|method|ValuesCollector
specifier|private
name|ValuesCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|R
argument_list|>
name|valueSelector
parameter_list|)
block|{
name|this
operator|.
name|valueSelector
operator|=
name|valueSelector
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueSelector
operator|.
name|advanceTo
argument_list|(
name|doc
argument_list|)
operator|==
name|GroupSelector
operator|.
name|State
operator|.
name|ACCEPT
condition|)
block|{
name|R
name|value
init|=
name|valueSelector
operator|.
name|currentValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|contains
argument_list|(
name|value
argument_list|)
operator|==
literal|false
condition|)
name|values
operator|.
name|add
argument_list|(
name|valueSelector
operator|.
name|copyValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|values
operator|.
name|contains
argument_list|(
literal|null
argument_list|)
operator|==
literal|false
condition|)
name|values
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|valueSelector
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
DECL|class|DistinctValuesReducer
specifier|private
specifier|static
class|class
name|DistinctValuesReducer
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
extends|extends
name|GroupReducer
argument_list|<
name|T
argument_list|,
name|ValuesCollector
argument_list|<
name|R
argument_list|>
argument_list|>
block|{
DECL|field|valueSelector
specifier|final
name|GroupSelector
argument_list|<
name|R
argument_list|>
name|valueSelector
decl_stmt|;
DECL|method|DistinctValuesReducer
specifier|private
name|DistinctValuesReducer
parameter_list|(
name|GroupSelector
argument_list|<
name|R
argument_list|>
name|valueSelector
parameter_list|)
block|{
name|this
operator|.
name|valueSelector
operator|=
name|valueSelector
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
DECL|method|newCollector
specifier|protected
name|ValuesCollector
argument_list|<
name|R
argument_list|>
name|newCollector
parameter_list|()
block|{
return|return
operator|new
name|ValuesCollector
argument_list|<>
argument_list|(
name|valueSelector
argument_list|)
return|;
block|}
block|}
comment|/**    * Returns all unique values for each top N group.    *    * @return all unique values for each top N group    */
DECL|method|getGroups
specifier|public
name|List
argument_list|<
name|GroupCount
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
argument_list|>
name|getGroups
parameter_list|()
block|{
name|List
argument_list|<
name|GroupCount
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
argument_list|>
name|counts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|T
argument_list|>
name|group
range|:
name|groups
control|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ValuesCollector
argument_list|<
name|R
argument_list|>
name|vc
init|=
operator|(
name|ValuesCollector
argument_list|<
name|R
argument_list|>
operator|)
name|groupReducer
operator|.
name|getCollector
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
decl_stmt|;
name|counts
operator|.
name|add
argument_list|(
operator|new
name|GroupCount
argument_list|<>
argument_list|(
name|group
operator|.
name|groupValue
argument_list|,
name|vc
operator|.
name|values
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
comment|/**    * Returned by {@link DistinctValuesCollector#getGroups()},    * representing the value and set of distinct values for the group.    */
DECL|class|GroupCount
specifier|public
specifier|static
class|class
name|GroupCount
parameter_list|<
name|T
parameter_list|,
name|R
parameter_list|>
block|{
DECL|field|groupValue
specifier|public
specifier|final
name|T
name|groupValue
decl_stmt|;
DECL|field|uniqueValues
specifier|public
specifier|final
name|Set
argument_list|<
name|R
argument_list|>
name|uniqueValues
decl_stmt|;
DECL|method|GroupCount
specifier|public
name|GroupCount
parameter_list|(
name|T
name|groupValue
parameter_list|,
name|Set
argument_list|<
name|R
argument_list|>
name|values
parameter_list|)
block|{
name|this
operator|.
name|groupValue
operator|=
name|groupValue
expr_stmt|;
name|this
operator|.
name|uniqueValues
operator|=
name|values
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

