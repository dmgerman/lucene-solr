begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|FunctionValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValue
import|;
end_import

begin_comment
comment|/**  * A GroupSelector that groups via a ValueSource  */
end_comment

begin_class
DECL|class|ValueSourceGroupSelector
specifier|public
class|class
name|ValueSourceGroupSelector
extends|extends
name|GroupSelector
argument_list|<
name|MutableValue
argument_list|>
block|{
DECL|field|valueSource
specifier|private
specifier|final
name|ValueSource
name|valueSource
decl_stmt|;
DECL|field|context
specifier|private
specifier|final
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|context
decl_stmt|;
DECL|field|secondPassGroups
specifier|private
name|Set
argument_list|<
name|MutableValue
argument_list|>
name|secondPassGroups
decl_stmt|;
comment|/**    * Create a new ValueSourceGroupSelector    * @param valueSource the ValueSource to group by    * @param context     a context map for the ValueSource    */
DECL|method|ValueSourceGroupSelector
specifier|public
name|ValueSourceGroupSelector
parameter_list|(
name|ValueSource
name|valueSource
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|context
parameter_list|)
block|{
name|this
operator|.
name|valueSource
operator|=
name|valueSource
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
DECL|field|filler
specifier|private
name|FunctionValues
operator|.
name|ValueFiller
name|filler
decl_stmt|;
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|FunctionValues
name|values
init|=
name|valueSource
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|readerContext
argument_list|)
decl_stmt|;
name|this
operator|.
name|filler
operator|=
name|values
operator|.
name|getValueFiller
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advanceTo
specifier|public
name|State
name|advanceTo
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|filler
operator|.
name|fillValue
argument_list|(
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|secondPassGroups
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|secondPassGroups
operator|.
name|contains
argument_list|(
name|filler
operator|.
name|getValue
argument_list|()
argument_list|)
operator|==
literal|false
condition|)
return|return
name|State
operator|.
name|SKIP
return|;
block|}
return|return
name|State
operator|.
name|ACCEPT
return|;
block|}
annotation|@
name|Override
DECL|method|currentValue
specifier|public
name|MutableValue
name|currentValue
parameter_list|()
block|{
return|return
name|filler
operator|.
name|getValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|copyValue
specifier|public
name|MutableValue
name|copyValue
parameter_list|()
block|{
return|return
name|filler
operator|.
name|getValue
argument_list|()
operator|.
name|duplicate
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|setGroups
specifier|public
name|void
name|setGroups
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
argument_list|>
name|searchGroups
parameter_list|)
block|{
name|secondPassGroups
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|MutableValue
argument_list|>
name|group
range|:
name|searchGroups
control|)
block|{
name|secondPassGroups
operator|.
name|add
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

