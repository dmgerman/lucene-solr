begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopFieldCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopScoreDocCollector
import|;
end_import

begin_comment
comment|/**  * A second-pass collector that collects the TopDocs for each group, and  * returns them as a {@link TopGroups} object  *  * @param<T> the type of the group value  */
end_comment

begin_class
DECL|class|TopGroupsCollector
specifier|public
class|class
name|TopGroupsCollector
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SecondPassGroupingCollector
argument_list|<
name|T
argument_list|>
block|{
DECL|field|groupSort
specifier|private
specifier|final
name|Sort
name|groupSort
decl_stmt|;
DECL|field|withinGroupSort
specifier|private
specifier|final
name|Sort
name|withinGroupSort
decl_stmt|;
DECL|field|maxDocsPerGroup
specifier|private
specifier|final
name|int
name|maxDocsPerGroup
decl_stmt|;
comment|/**    * Create a new TopGroupsCollector    * @param groupSelector     the group selector used to define groups    * @param groups            the groups to collect TopDocs for    * @param groupSort         the order in which groups are returned    * @param withinGroupSort   the order in which documents are sorted in each group    * @param maxDocsPerGroup   the maximum number of docs to collect for each group    * @param getScores         if true, record the scores of all docs in each group    * @param getMaxScores      if true, record the maximum score for each group    * @param fillSortFields    if true, record the sort field values for all docs    */
DECL|method|TopGroupsCollector
specifier|public
name|TopGroupsCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|groupSelector
parameter_list|,
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
parameter_list|,
name|Sort
name|groupSort
parameter_list|,
name|Sort
name|withinGroupSort
parameter_list|,
name|int
name|maxDocsPerGroup
parameter_list|,
name|boolean
name|getScores
parameter_list|,
name|boolean
name|getMaxScores
parameter_list|,
name|boolean
name|fillSortFields
parameter_list|)
block|{
name|super
argument_list|(
name|groupSelector
argument_list|,
name|groups
argument_list|,
operator|new
name|TopDocsReducer
argument_list|<>
argument_list|(
name|withinGroupSort
argument_list|,
name|maxDocsPerGroup
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|,
name|fillSortFields
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupSort
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|groupSort
argument_list|)
expr_stmt|;
name|this
operator|.
name|withinGroupSort
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|withinGroupSort
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxDocsPerGroup
operator|=
name|maxDocsPerGroup
expr_stmt|;
block|}
DECL|class|TopDocsReducer
specifier|private
specifier|static
class|class
name|TopDocsReducer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GroupReducer
argument_list|<
name|T
argument_list|,
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
argument_list|>
block|{
DECL|field|supplier
specifier|private
specifier|final
name|Supplier
argument_list|<
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
argument_list|>
name|supplier
decl_stmt|;
DECL|field|needsScores
specifier|private
specifier|final
name|boolean
name|needsScores
decl_stmt|;
DECL|method|TopDocsReducer
name|TopDocsReducer
parameter_list|(
name|Sort
name|withinGroupSort
parameter_list|,
name|int
name|maxDocsPerGroup
parameter_list|,
name|boolean
name|getScores
parameter_list|,
name|boolean
name|getMaxScores
parameter_list|,
name|boolean
name|fillSortFields
parameter_list|)
block|{
name|this
operator|.
name|needsScores
operator|=
name|getScores
operator|||
name|getMaxScores
operator|||
name|withinGroupSort
operator|.
name|needsScores
argument_list|()
expr_stmt|;
name|this
operator|.
name|supplier
operator|=
name|withinGroupSort
operator|==
name|Sort
operator|.
name|RELEVANCE
condition|?
parameter_list|()
lambda|->
name|TopScoreDocCollector
operator|.
name|create
argument_list|(
name|maxDocsPerGroup
argument_list|)
else|:
parameter_list|()
lambda|->
name|TopFieldCollector
operator|.
name|create
argument_list|(
name|withinGroupSort
argument_list|,
name|maxDocsPerGroup
argument_list|,
name|fillSortFields
argument_list|,
name|getScores
argument_list|,
name|getMaxScores
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|needsScores
return|;
block|}
annotation|@
name|Override
DECL|method|newCollector
specifier|protected
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
name|newCollector
parameter_list|()
block|{
return|return
name|supplier
operator|.
name|get
argument_list|()
return|;
block|}
block|}
comment|/**    * Get the TopGroups recorded by this collector    * @param withinGroupOffset the offset within each group to start collecting documents    */
DECL|method|getTopGroups
specifier|public
name|TopGroups
argument_list|<
name|T
argument_list|>
name|getTopGroups
parameter_list|(
name|int
name|withinGroupOffset
parameter_list|)
block|{
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
specifier|final
name|GroupDocs
argument_list|<
name|T
argument_list|>
index|[]
name|groupDocsResult
init|=
operator|(
name|GroupDocs
argument_list|<
name|T
argument_list|>
index|[]
operator|)
operator|new
name|GroupDocs
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|groupIDX
init|=
literal|0
decl_stmt|;
name|float
name|maxScore
init|=
name|Float
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|SearchGroup
argument_list|<
name|T
argument_list|>
name|group
range|:
name|groups
control|)
block|{
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
name|collector
init|=
operator|(
name|TopDocsCollector
argument_list|<
name|?
argument_list|>
operator|)
name|groupReducer
operator|.
name|getCollector
argument_list|(
name|group
operator|.
name|groupValue
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|topDocs
init|=
name|collector
operator|.
name|topDocs
argument_list|(
name|withinGroupOffset
argument_list|,
name|maxDocsPerGroup
argument_list|)
decl_stmt|;
name|groupDocsResult
index|[
name|groupIDX
operator|++
index|]
operator|=
operator|new
name|GroupDocs
argument_list|<>
argument_list|(
name|Float
operator|.
name|NaN
argument_list|,
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|,
name|topDocs
operator|.
name|scoreDocs
argument_list|,
name|group
operator|.
name|groupValue
argument_list|,
name|group
operator|.
name|sortValues
argument_list|)
expr_stmt|;
name|maxScore
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxScore
argument_list|,
name|topDocs
operator|.
name|getMaxScore
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|TopGroups
argument_list|<>
argument_list|(
name|groupSort
operator|.
name|getSort
argument_list|()
argument_list|,
name|withinGroupSort
operator|.
name|getSort
argument_list|()
argument_list|,
name|totalHitCount
argument_list|,
name|totalGroupedHitCount
argument_list|,
name|groupDocsResult
argument_list|,
name|maxScore
argument_list|)
return|;
block|}
block|}
end_class

end_unit

