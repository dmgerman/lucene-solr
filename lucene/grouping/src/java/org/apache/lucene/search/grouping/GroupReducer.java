begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_comment
comment|/**  * Concrete implementations of this class define what to collect for individual  * groups during the second-pass of a grouping search.  *  * Each group is assigned a Collector returned by {@link #newCollector()}, and  * {@link LeafCollector#collect(int)} is called for each document that is in  * a group  *  * @see SecondPassGroupingCollector  *  * @param<T> the type of the value used for grouping  * @param<C> the type of {@link Collector} used to reduce each group  */
end_comment

begin_class
DECL|class|GroupReducer
specifier|public
specifier|abstract
class|class
name|GroupReducer
parameter_list|<
name|T
parameter_list|,
name|C
extends|extends
name|Collector
parameter_list|>
block|{
DECL|field|groups
specifier|private
specifier|final
name|Map
argument_list|<
name|T
argument_list|,
name|GroupCollector
argument_list|<
name|C
argument_list|>
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**    * Define which groups should be reduced.    *    * Called by {@link SecondPassGroupingCollector}    */
DECL|method|setGroups
specifier|public
name|void
name|setGroups
parameter_list|(
name|Collection
argument_list|<
name|SearchGroup
argument_list|<
name|T
argument_list|>
argument_list|>
name|groups
parameter_list|)
block|{
for|for
control|(
name|SearchGroup
argument_list|<
name|T
argument_list|>
name|group
range|:
name|groups
control|)
block|{
name|this
operator|.
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|groupValue
argument_list|,
operator|new
name|GroupCollector
argument_list|<>
argument_list|(
name|newCollector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Whether or not this reducer requires collected documents to be scored    */
DECL|method|needsScores
specifier|public
specifier|abstract
name|boolean
name|needsScores
parameter_list|()
function_decl|;
comment|/**    * Creates a new Collector for each group    */
DECL|method|newCollector
specifier|protected
specifier|abstract
name|C
name|newCollector
parameter_list|()
function_decl|;
comment|/**    * Get the Collector for a given group    */
DECL|method|getCollector
specifier|public
specifier|final
name|C
name|getCollector
parameter_list|(
name|T
name|value
parameter_list|)
block|{
return|return
name|groups
operator|.
name|get
argument_list|(
name|value
argument_list|)
operator|.
name|collector
return|;
block|}
comment|/**    * Collect a given document into a given group    * @throws IOException on error    */
DECL|method|collect
specifier|public
specifier|final
name|void
name|collect
parameter_list|(
name|T
name|value
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|GroupCollector
argument_list|<
name|C
argument_list|>
name|collector
init|=
name|groups
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|collector
operator|.
name|leafCollector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the Scorer on all group collectors    */
DECL|method|setScorer
specifier|public
specifier|final
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|GroupCollector
argument_list|<
name|C
argument_list|>
name|collector
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
block|{
name|collector
operator|.
name|leafCollector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Called when the parent {@link SecondPassGroupingCollector} moves to a new segment    */
DECL|method|setNextReader
specifier|public
specifier|final
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|GroupCollector
argument_list|<
name|C
argument_list|>
name|collector
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
block|{
name|collector
operator|.
name|leafCollector
operator|=
name|collector
operator|.
name|collector
operator|.
name|getLeafCollector
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
DECL|class|GroupCollector
specifier|private
specifier|static
specifier|final
class|class
name|GroupCollector
parameter_list|<
name|C
extends|extends
name|Collector
parameter_list|>
block|{
DECL|field|collector
specifier|final
name|C
name|collector
decl_stmt|;
DECL|field|leafCollector
name|LeafCollector
name|leafCollector
decl_stmt|;
DECL|method|GroupCollector
specifier|private
name|GroupCollector
parameter_list|(
name|C
name|collector
parameter_list|)
block|{
name|this
operator|.
name|collector
operator|=
name|collector
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

