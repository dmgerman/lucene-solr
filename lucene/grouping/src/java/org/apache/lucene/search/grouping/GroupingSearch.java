begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|ValueSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CachingCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Collector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|mutable
operator|.
name|MutableValue
import|;
end_import

begin_comment
comment|/**  * Convenience class to perform grouping in a non distributed environment.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|GroupingSearch
specifier|public
class|class
name|GroupingSearch
block|{
DECL|field|grouper
specifier|private
specifier|final
name|GroupSelector
name|grouper
decl_stmt|;
DECL|field|groupEndDocs
specifier|private
specifier|final
name|Query
name|groupEndDocs
decl_stmt|;
DECL|field|groupSort
specifier|private
name|Sort
name|groupSort
init|=
name|Sort
operator|.
name|RELEVANCE
decl_stmt|;
DECL|field|sortWithinGroup
specifier|private
name|Sort
name|sortWithinGroup
init|=
name|Sort
operator|.
name|RELEVANCE
decl_stmt|;
DECL|field|groupDocsOffset
specifier|private
name|int
name|groupDocsOffset
decl_stmt|;
DECL|field|groupDocsLimit
specifier|private
name|int
name|groupDocsLimit
init|=
literal|1
decl_stmt|;
DECL|field|fillSortFields
specifier|private
name|boolean
name|fillSortFields
decl_stmt|;
DECL|field|includeScores
specifier|private
name|boolean
name|includeScores
init|=
literal|true
decl_stmt|;
DECL|field|includeMaxScore
specifier|private
name|boolean
name|includeMaxScore
init|=
literal|true
decl_stmt|;
DECL|field|maxCacheRAMMB
specifier|private
name|Double
name|maxCacheRAMMB
decl_stmt|;
DECL|field|maxDocsToCache
specifier|private
name|Integer
name|maxDocsToCache
decl_stmt|;
DECL|field|cacheScores
specifier|private
name|boolean
name|cacheScores
decl_stmt|;
DECL|field|allGroups
specifier|private
name|boolean
name|allGroups
decl_stmt|;
DECL|field|allGroupHeads
specifier|private
name|boolean
name|allGroupHeads
decl_stmt|;
DECL|field|matchingGroups
specifier|private
name|Collection
argument_list|<
name|?
argument_list|>
name|matchingGroups
decl_stmt|;
DECL|field|matchingGroupHeads
specifier|private
name|Bits
name|matchingGroupHeads
decl_stmt|;
comment|/**    * Constructs a<code>GroupingSearch</code> instance that groups documents by index terms using DocValues.    * The group field can only have one token per document. This means that the field must not be analysed.    *    * @param groupField The name of the field to group by.    */
DECL|method|GroupingSearch
specifier|public
name|GroupingSearch
parameter_list|(
name|String
name|groupField
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|TermGroupSelector
argument_list|(
name|groupField
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructs a<code>GroupingSearch</code> instance that groups documents by function using a {@link ValueSource}    * instance.    *    * @param groupFunction      The function to group by specified as {@link ValueSource}    * @param valueSourceContext The context of the specified groupFunction    */
DECL|method|GroupingSearch
specifier|public
name|GroupingSearch
parameter_list|(
name|ValueSource
name|groupFunction
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|valueSourceContext
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ValueSourceGroupSelector
argument_list|(
name|groupFunction
argument_list|,
name|valueSourceContext
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor for grouping documents by doc block.    * This constructor can only be used when documents belonging in a group are indexed in one block.    *    * @param groupEndDocs The query that marks the last document in all doc blocks    */
DECL|method|GroupingSearch
specifier|public
name|GroupingSearch
parameter_list|(
name|Query
name|groupEndDocs
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|groupEndDocs
argument_list|)
expr_stmt|;
block|}
DECL|method|GroupingSearch
specifier|private
name|GroupingSearch
parameter_list|(
name|GroupSelector
name|grouper
parameter_list|,
name|Query
name|groupEndDocs
parameter_list|)
block|{
name|this
operator|.
name|grouper
operator|=
name|grouper
expr_stmt|;
name|this
operator|.
name|groupEndDocs
operator|=
name|groupEndDocs
expr_stmt|;
block|}
comment|/**    * Executes a grouped search. Both the first pass and second pass are executed on the specified searcher.    *    * @param searcher    The {@link org.apache.lucene.search.IndexSearcher} instance to execute the grouped search on.    * @param query       The query to execute with the grouping    * @param groupOffset The group offset    * @param groupLimit  The number of groups to return from the specified group offset    * @return the grouped result as a {@link TopGroups} instance    * @throws IOException If any I/O related errors occur    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
DECL|method|search
specifier|public
parameter_list|<
name|T
parameter_list|>
name|TopGroups
argument_list|<
name|T
argument_list|>
name|search
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|groupOffset
parameter_list|,
name|int
name|groupLimit
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|grouper
operator|!=
literal|null
condition|)
block|{
return|return
name|groupByFieldOrFunction
argument_list|(
name|searcher
argument_list|,
name|query
argument_list|,
name|groupOffset
argument_list|,
name|groupLimit
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|groupEndDocs
operator|!=
literal|null
condition|)
block|{
return|return
operator|(
name|TopGroups
argument_list|<
name|T
argument_list|>
operator|)
name|groupByDocBlock
argument_list|(
name|searcher
argument_list|,
name|query
argument_list|,
name|groupOffset
argument_list|,
name|groupLimit
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Either groupField, groupFunction or groupEndDocs must be set."
argument_list|)
throw|;
comment|// This can't happen...
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|groupByFieldOrFunction
specifier|protected
name|TopGroups
name|groupByFieldOrFunction
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|groupOffset
parameter_list|,
name|int
name|groupLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|topN
init|=
name|groupOffset
operator|+
name|groupLimit
decl_stmt|;
specifier|final
name|FirstPassGroupingCollector
name|firstPassCollector
init|=
operator|new
name|FirstPassGroupingCollector
argument_list|(
name|grouper
argument_list|,
name|groupSort
argument_list|,
name|topN
argument_list|)
decl_stmt|;
specifier|final
name|AllGroupsCollector
name|allGroupsCollector
init|=
name|allGroups
condition|?
operator|new
name|AllGroupsCollector
argument_list|(
name|grouper
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|AllGroupHeadsCollector
name|allGroupHeadsCollector
init|=
name|allGroupHeads
condition|?
name|AllGroupHeadsCollector
operator|.
name|newCollector
argument_list|(
name|grouper
argument_list|,
name|sortWithinGroup
argument_list|)
else|:
literal|null
decl_stmt|;
specifier|final
name|Collector
name|firstRound
init|=
name|MultiCollector
operator|.
name|wrap
argument_list|(
name|firstPassCollector
argument_list|,
name|allGroupsCollector
argument_list|,
name|allGroupHeadsCollector
argument_list|)
decl_stmt|;
name|CachingCollector
name|cachedCollector
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|maxCacheRAMMB
operator|!=
literal|null
operator|||
name|maxDocsToCache
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|maxCacheRAMMB
operator|!=
literal|null
condition|)
block|{
name|cachedCollector
operator|=
name|CachingCollector
operator|.
name|create
argument_list|(
name|firstRound
argument_list|,
name|cacheScores
argument_list|,
name|maxCacheRAMMB
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cachedCollector
operator|=
name|CachingCollector
operator|.
name|create
argument_list|(
name|firstRound
argument_list|,
name|cacheScores
argument_list|,
name|maxDocsToCache
argument_list|)
expr_stmt|;
block|}
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|cachedCollector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|firstRound
argument_list|)
expr_stmt|;
block|}
name|matchingGroups
operator|=
name|allGroups
condition|?
name|allGroupsCollector
operator|.
name|getGroups
argument_list|()
else|:
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
name|matchingGroupHeads
operator|=
name|allGroupHeads
condition|?
name|allGroupHeadsCollector
operator|.
name|retrieveGroupHeads
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
else|:
operator|new
name|Bits
operator|.
name|MatchNoBits
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|SearchGroup
argument_list|>
name|topSearchGroups
init|=
name|firstPassCollector
operator|.
name|getTopGroups
argument_list|(
name|groupOffset
argument_list|,
name|fillSortFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|topSearchGroups
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|TopGroups
argument_list|(
operator|new
name|SortField
index|[
literal|0
index|]
argument_list|,
operator|new
name|SortField
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|GroupDocs
index|[
literal|0
index|]
argument_list|,
name|Float
operator|.
name|NaN
argument_list|)
return|;
block|}
name|int
name|topNInsideGroup
init|=
name|groupDocsOffset
operator|+
name|groupDocsLimit
decl_stmt|;
name|TopGroupsCollector
name|secondPassCollector
init|=
operator|new
name|TopGroupsCollector
argument_list|(
name|grouper
argument_list|,
name|topSearchGroups
argument_list|,
name|groupSort
argument_list|,
name|sortWithinGroup
argument_list|,
name|topNInsideGroup
argument_list|,
name|includeScores
argument_list|,
name|includeMaxScore
argument_list|,
name|fillSortFields
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedCollector
operator|!=
literal|null
operator|&&
name|cachedCollector
operator|.
name|isCached
argument_list|()
condition|)
block|{
name|cachedCollector
operator|.
name|replay
argument_list|(
name|secondPassCollector
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|secondPassCollector
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|allGroups
condition|)
block|{
return|return
operator|new
name|TopGroups
argument_list|(
name|secondPassCollector
operator|.
name|getTopGroups
argument_list|(
name|groupDocsOffset
argument_list|)
argument_list|,
name|matchingGroups
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|secondPassCollector
operator|.
name|getTopGroups
argument_list|(
name|groupDocsOffset
argument_list|)
return|;
block|}
block|}
DECL|method|groupByDocBlock
specifier|protected
name|TopGroups
argument_list|<
name|?
argument_list|>
name|groupByDocBlock
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|groupOffset
parameter_list|,
name|int
name|groupLimit
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|topN
init|=
name|groupOffset
operator|+
name|groupLimit
decl_stmt|;
specifier|final
name|Weight
name|groupEndDocs
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|this
operator|.
name|groupEndDocs
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BlockGroupingCollector
name|c
init|=
operator|new
name|BlockGroupingCollector
argument_list|(
name|groupSort
argument_list|,
name|topN
argument_list|,
name|includeScores
argument_list|,
name|groupEndDocs
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|c
argument_list|)
expr_stmt|;
name|int
name|topNInsideGroup
init|=
name|groupDocsOffset
operator|+
name|groupDocsLimit
decl_stmt|;
return|return
name|c
operator|.
name|getTopGroups
argument_list|(
name|sortWithinGroup
argument_list|,
name|groupOffset
argument_list|,
name|groupDocsOffset
argument_list|,
name|topNInsideGroup
argument_list|,
name|fillSortFields
argument_list|)
return|;
block|}
comment|/**    * Enables caching for the second pass search. The cache will not grow over a specified limit in MB.    * The cache is filled during the first pass searched and then replayed during the second pass searched.    * If the cache grows beyond the specified limit, then the cache is purged and not used in the second pass search.    *    * @param maxCacheRAMMB The maximum amount in MB the cache is allowed to hold    * @param cacheScores   Whether to cache the scores    * @return<code>this</code>    */
DECL|method|setCachingInMB
specifier|public
name|GroupingSearch
name|setCachingInMB
parameter_list|(
name|double
name|maxCacheRAMMB
parameter_list|,
name|boolean
name|cacheScores
parameter_list|)
block|{
name|this
operator|.
name|maxCacheRAMMB
operator|=
name|maxCacheRAMMB
expr_stmt|;
name|this
operator|.
name|maxDocsToCache
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cacheScores
operator|=
name|cacheScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Enables caching for the second pass search. The cache will not contain more than the maximum specified documents.    * The cache is filled during the first pass searched and then replayed during the second pass searched.    * If the cache grows beyond the specified limit, then the cache is purged and not used in the second pass search.    *    * @param maxDocsToCache The maximum number of documents the cache is allowed to hold    * @param cacheScores    Whether to cache the scores    * @return<code>this</code>    */
DECL|method|setCaching
specifier|public
name|GroupingSearch
name|setCaching
parameter_list|(
name|int
name|maxDocsToCache
parameter_list|,
name|boolean
name|cacheScores
parameter_list|)
block|{
name|this
operator|.
name|maxDocsToCache
operator|=
name|maxDocsToCache
expr_stmt|;
name|this
operator|.
name|maxCacheRAMMB
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|cacheScores
operator|=
name|cacheScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Disables any enabled cache.    *    * @return<code>this</code>    */
DECL|method|disableCaching
specifier|public
name|GroupingSearch
name|disableCaching
parameter_list|()
block|{
name|this
operator|.
name|maxCacheRAMMB
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|maxDocsToCache
operator|=
literal|null
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Specifies how groups are sorted.    * Defaults to {@link Sort#RELEVANCE}.    *    * @param groupSort The sort for the groups.    * @return<code>this</code>    */
DECL|method|setGroupSort
specifier|public
name|GroupingSearch
name|setGroupSort
parameter_list|(
name|Sort
name|groupSort
parameter_list|)
block|{
name|this
operator|.
name|groupSort
operator|=
name|groupSort
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Specified how documents inside a group are sorted.    * Defaults to {@link Sort#RELEVANCE}.    *    * @param sortWithinGroup The sort for documents inside a group    * @return<code>this</code>    */
DECL|method|setSortWithinGroup
specifier|public
name|GroupingSearch
name|setSortWithinGroup
parameter_list|(
name|Sort
name|sortWithinGroup
parameter_list|)
block|{
name|this
operator|.
name|sortWithinGroup
operator|=
name|sortWithinGroup
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Specifies the offset for documents inside a group.    *    * @param groupDocsOffset The offset for documents inside a    * @return<code>this</code>    */
DECL|method|setGroupDocsOffset
specifier|public
name|GroupingSearch
name|setGroupDocsOffset
parameter_list|(
name|int
name|groupDocsOffset
parameter_list|)
block|{
name|this
operator|.
name|groupDocsOffset
operator|=
name|groupDocsOffset
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Specifies the number of documents to return inside a group from the specified groupDocsOffset.    *    * @param groupDocsLimit The number of documents to return inside a group    * @return<code>this</code>    */
DECL|method|setGroupDocsLimit
specifier|public
name|GroupingSearch
name|setGroupDocsLimit
parameter_list|(
name|int
name|groupDocsLimit
parameter_list|)
block|{
name|this
operator|.
name|groupDocsLimit
operator|=
name|groupDocsLimit
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Whether to also fill the sort fields per returned group and groups docs.    *    * @param fillSortFields Whether to also fill the sort fields per returned group and groups docs    * @return<code>this</code>    */
DECL|method|setFillSortFields
specifier|public
name|GroupingSearch
name|setFillSortFields
parameter_list|(
name|boolean
name|fillSortFields
parameter_list|)
block|{
name|this
operator|.
name|fillSortFields
operator|=
name|fillSortFields
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Whether to include the scores per doc inside a group.    *    * @param includeScores Whether to include the scores per doc inside a group    * @return<code>this</code>    */
DECL|method|setIncludeScores
specifier|public
name|GroupingSearch
name|setIncludeScores
parameter_list|(
name|boolean
name|includeScores
parameter_list|)
block|{
name|this
operator|.
name|includeScores
operator|=
name|includeScores
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Whether to include the score of the most relevant document per group.    *    * @param includeMaxScore Whether to include the score of the most relevant document per group    * @return<code>this</code>    */
DECL|method|setIncludeMaxScore
specifier|public
name|GroupingSearch
name|setIncludeMaxScore
parameter_list|(
name|boolean
name|includeMaxScore
parameter_list|)
block|{
name|this
operator|.
name|includeMaxScore
operator|=
name|includeMaxScore
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Whether to also compute all groups matching the query.    * This can be used to determine the number of groups, which can be used for accurate pagination.    *<p>    * When grouping by doc block the number of groups are automatically included in the {@link TopGroups} and this    * option doesn't have any influence.    *    * @param allGroups to also compute all groups matching the query    * @return<code>this</code>    */
DECL|method|setAllGroups
specifier|public
name|GroupingSearch
name|setAllGroups
parameter_list|(
name|boolean
name|allGroups
parameter_list|)
block|{
name|this
operator|.
name|allGroups
operator|=
name|allGroups
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * If {@link #setAllGroups(boolean)} was set to<code>true</code> then all matching groups are returned, otherwise    * an empty collection is returned.    *    * @param<T> The group value type. This can be a {@link BytesRef} or a {@link MutableValue} instance. If grouping    *            by doc block this the group value is always<code>null</code>.    * @return all matching groups are returned, or an empty collection    */
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|getAllMatchingGroups
specifier|public
parameter_list|<
name|T
parameter_list|>
name|Collection
argument_list|<
name|T
argument_list|>
name|getAllMatchingGroups
parameter_list|()
block|{
return|return
operator|(
name|Collection
argument_list|<
name|T
argument_list|>
operator|)
name|matchingGroups
return|;
block|}
comment|/**    * Whether to compute all group heads (most relevant document per group) matching the query.    *<p>    * This feature isn't enabled when grouping by doc block.    *    * @param allGroupHeads Whether to compute all group heads (most relevant document per group) matching the query    * @return<code>this</code>    */
DECL|method|setAllGroupHeads
specifier|public
name|GroupingSearch
name|setAllGroupHeads
parameter_list|(
name|boolean
name|allGroupHeads
parameter_list|)
block|{
name|this
operator|.
name|allGroupHeads
operator|=
name|allGroupHeads
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**    * Returns the matching group heads if {@link #setAllGroupHeads(boolean)} was set to true or an empty bit set.    *    * @return The matching group heads if {@link #setAllGroupHeads(boolean)} was set to true or an empty bit set    */
DECL|method|getAllGroupHeads
specifier|public
name|Bits
name|getAllGroupHeads
parameter_list|()
block|{
return|return
name|matchingGroupHeads
return|;
block|}
block|}
end_class

end_unit

