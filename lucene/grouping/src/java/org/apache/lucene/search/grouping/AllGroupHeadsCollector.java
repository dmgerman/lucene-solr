begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.grouping
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|grouping
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|LeafFieldComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SimpleCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_comment
comment|/**  * This collector specializes in collecting the most relevant document (group head) for each  * group that matches the query.  *  * Clients should create new collectors by calling {@link #newCollector(GroupSelector, Sort)}  *  * @lucene.experimental  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|class|AllGroupHeadsCollector
specifier|public
specifier|abstract
class|class
name|AllGroupHeadsCollector
parameter_list|<
name|T
parameter_list|>
extends|extends
name|SimpleCollector
block|{
DECL|field|groupSelector
specifier|private
specifier|final
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|groupSelector
decl_stmt|;
DECL|field|sort
specifier|protected
specifier|final
name|Sort
name|sort
decl_stmt|;
DECL|field|reversed
specifier|protected
specifier|final
name|int
index|[]
name|reversed
decl_stmt|;
DECL|field|compIDXEnd
specifier|protected
specifier|final
name|int
name|compIDXEnd
decl_stmt|;
DECL|field|heads
specifier|protected
name|Map
argument_list|<
name|T
argument_list|,
name|GroupHead
argument_list|<
name|T
argument_list|>
argument_list|>
name|heads
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|context
specifier|protected
name|LeafReaderContext
name|context
decl_stmt|;
DECL|field|scorer
specifier|protected
name|Scorer
name|scorer
decl_stmt|;
comment|/**    * Create a new AllGroupHeadsCollector based on the type of within-group Sort required    * @param selector a GroupSelector to define the groups    * @param sort     the within-group sort to use to choose the group head document    * @param<T>      the group value type    */
DECL|method|newCollector
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|AllGroupHeadsCollector
argument_list|<
name|T
argument_list|>
name|newCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|selector
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
if|if
condition|(
name|sort
operator|.
name|equals
argument_list|(
name|Sort
operator|.
name|RELEVANCE
argument_list|)
condition|)
return|return
operator|new
name|ScoringGroupHeadsCollector
argument_list|<>
argument_list|(
name|selector
argument_list|,
name|sort
argument_list|)
return|;
return|return
operator|new
name|SortingGroupHeadsCollector
argument_list|<>
argument_list|(
name|selector
argument_list|,
name|sort
argument_list|)
return|;
block|}
DECL|method|AllGroupHeadsCollector
specifier|private
name|AllGroupHeadsCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|selector
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
name|this
operator|.
name|groupSelector
operator|=
name|selector
expr_stmt|;
name|this
operator|.
name|sort
operator|=
name|sort
expr_stmt|;
name|this
operator|.
name|reversed
operator|=
operator|new
name|int
index|[
name|sort
operator|.
name|getSort
argument_list|()
operator|.
name|length
index|]
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|reversed
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getReverse
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
expr_stmt|;
block|}
name|this
operator|.
name|compIDXEnd
operator|=
name|this
operator|.
name|reversed
operator|.
name|length
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    * @param maxDoc The maxDoc of the top level {@link IndexReader}.    * @return a {@link FixedBitSet} containing all group heads.    */
DECL|method|retrieveGroupHeads
specifier|public
name|FixedBitSet
name|retrieveGroupHeads
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|FixedBitSet
name|bitSet
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|?
extends|extends
name|GroupHead
argument_list|<
name|T
argument_list|>
argument_list|>
name|groupHeads
init|=
name|getCollectedGroupHeads
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupHead
name|groupHead
range|:
name|groupHeads
control|)
block|{
name|bitSet
operator|.
name|set
argument_list|(
name|groupHead
operator|.
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|bitSet
return|;
block|}
comment|/**    * @return an int array containing all group heads. The size of the array is equal to number of collected unique groups.    */
DECL|method|retrieveGroupHeads
specifier|public
name|int
index|[]
name|retrieveGroupHeads
parameter_list|()
block|{
name|Collection
argument_list|<
name|?
extends|extends
name|GroupHead
argument_list|<
name|T
argument_list|>
argument_list|>
name|groupHeads
init|=
name|getCollectedGroupHeads
argument_list|()
decl_stmt|;
name|int
index|[]
name|docHeads
init|=
operator|new
name|int
index|[
name|groupHeads
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|GroupHead
name|groupHead
range|:
name|groupHeads
control|)
block|{
name|docHeads
index|[
name|i
operator|++
index|]
operator|=
name|groupHead
operator|.
name|doc
expr_stmt|;
block|}
return|return
name|docHeads
return|;
block|}
comment|/**    * @return the number of group heads found for a query.    */
DECL|method|groupHeadsSize
specifier|public
name|int
name|groupHeadsSize
parameter_list|()
block|{
return|return
name|getCollectedGroupHeads
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**    * Returns the collected group heads.    * Subsequent calls should return the same group heads.    *    * @return the collected group heads    */
DECL|method|getCollectedGroupHeads
specifier|protected
name|Collection
argument_list|<
name|?
extends|extends
name|GroupHead
argument_list|<
name|T
argument_list|>
argument_list|>
name|getCollectedGroupHeads
parameter_list|()
block|{
return|return
name|heads
operator|.
name|values
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|groupSelector
operator|.
name|advanceTo
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|T
name|groupValue
init|=
name|groupSelector
operator|.
name|currentValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|heads
operator|.
name|containsKey
argument_list|(
name|groupValue
argument_list|)
operator|==
literal|false
condition|)
block|{
name|groupValue
operator|=
name|groupSelector
operator|.
name|copyValue
argument_list|()
expr_stmt|;
name|heads
operator|.
name|put
argument_list|(
name|groupValue
argument_list|,
name|newGroupHead
argument_list|(
name|doc
argument_list|,
name|groupValue
argument_list|,
name|context
argument_list|,
name|scorer
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|GroupHead
argument_list|<
name|T
argument_list|>
name|groupHead
init|=
name|heads
operator|.
name|get
argument_list|(
name|groupValue
argument_list|)
decl_stmt|;
comment|// Ok now we need to check if the current doc is more relevant than top doc for this group
for|for
control|(
name|int
name|compIDX
init|=
literal|0
init|;
condition|;
name|compIDX
operator|++
control|)
block|{
specifier|final
name|int
name|c
init|=
name|reversed
index|[
name|compIDX
index|]
operator|*
name|groupHead
operator|.
name|compare
argument_list|(
name|compIDX
argument_list|,
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|<
literal|0
condition|)
block|{
comment|// Definitely not competitive. So don't even bother to continue
return|return;
block|}
elseif|else
if|if
condition|(
name|c
operator|>
literal|0
condition|)
block|{
comment|// Definitely competitive.
break|break;
block|}
elseif|else
if|if
condition|(
name|compIDX
operator|==
name|compIDXEnd
condition|)
block|{
comment|// Here c=0. If we're at the last comparator, this doc is not
comment|// competitive, since docs are visited in doc Id order, which means
comment|// this doc cannot compete with any other document in the queue.
return|return;
block|}
block|}
name|groupHead
operator|.
name|updateDocHead
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
return|return
name|sort
operator|.
name|needsScores
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|doSetNextReader
specifier|protected
name|void
name|doSetNextReader
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|groupSelector
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
for|for
control|(
name|GroupHead
argument_list|<
name|T
argument_list|>
name|head
range|:
name|heads
operator|.
name|values
argument_list|()
control|)
block|{
name|head
operator|.
name|setNextReader
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|public
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
for|for
control|(
name|GroupHead
argument_list|<
name|T
argument_list|>
name|head
range|:
name|heads
operator|.
name|values
argument_list|()
control|)
block|{
name|head
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Create a new GroupHead for the given group value, initialized with a doc, context and scorer    */
DECL|method|newGroupHead
specifier|protected
specifier|abstract
name|GroupHead
argument_list|<
name|T
argument_list|>
name|newGroupHead
parameter_list|(
name|int
name|doc
parameter_list|,
name|T
name|value
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|,
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**    * Represents a group head. A group head is the most relevant document for a particular group.    * The relevancy is based is usually based on the sort.    *    * The group head contains a group value with its associated most relevant document id.    */
DECL|class|GroupHead
specifier|public
specifier|static
specifier|abstract
class|class
name|GroupHead
parameter_list|<
name|T
parameter_list|>
block|{
DECL|field|groupValue
specifier|public
specifier|final
name|T
name|groupValue
decl_stmt|;
DECL|field|doc
specifier|public
name|int
name|doc
decl_stmt|;
DECL|field|docBase
specifier|protected
name|int
name|docBase
decl_stmt|;
comment|/**      * Create a new GroupHead for the given value      */
DECL|method|GroupHead
specifier|protected
name|GroupHead
parameter_list|(
name|T
name|groupValue
parameter_list|,
name|int
name|doc
parameter_list|,
name|int
name|docBase
parameter_list|)
block|{
name|this
operator|.
name|groupValue
operator|=
name|groupValue
expr_stmt|;
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|docBase
expr_stmt|;
name|this
operator|.
name|docBase
operator|=
name|docBase
expr_stmt|;
block|}
comment|/**      * Called for each segment      */
DECL|method|setNextReader
specifier|protected
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|docBase
operator|=
name|ctx
operator|.
name|docBase
expr_stmt|;
block|}
comment|/**      * Called for each segment      */
DECL|method|setScorer
specifier|protected
specifier|abstract
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Compares the specified document for a specified comparator against the current most relevant document.      *      * @param compIDX The comparator index of the specified comparator.      * @param doc The specified document.      * @return -1 if the specified document wasn't competitive against the current most relevant document, 1 if the      *         specified document was competitive against the current most relevant document. Otherwise 0.      * @throws IOException If I/O related errors occur      */
DECL|method|compare
specifier|protected
specifier|abstract
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/**      * Updates the current most relevant document with the specified document.      *      * @param doc The specified document      * @throws IOException If I/O related errors occur      */
DECL|method|updateDocHead
specifier|protected
specifier|abstract
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
comment|/**    * General implementation using a {@link FieldComparator} to select the group head    */
DECL|class|SortingGroupHeadsCollector
specifier|private
specifier|static
class|class
name|SortingGroupHeadsCollector
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AllGroupHeadsCollector
argument_list|<
name|T
argument_list|>
block|{
DECL|method|SortingGroupHeadsCollector
specifier|protected
name|SortingGroupHeadsCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|selector
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
name|super
argument_list|(
name|selector
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newGroupHead
specifier|protected
name|GroupHead
argument_list|<
name|T
argument_list|>
name|newGroupHead
parameter_list|(
name|int
name|doc
parameter_list|,
name|T
name|value
parameter_list|,
name|LeafReaderContext
name|ctx
parameter_list|,
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SortingGroupHead
argument_list|<>
argument_list|(
name|sort
argument_list|,
name|value
argument_list|,
name|doc
argument_list|,
name|ctx
argument_list|,
name|scorer
argument_list|)
return|;
block|}
block|}
DECL|class|SortingGroupHead
specifier|private
specifier|static
class|class
name|SortingGroupHead
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GroupHead
argument_list|<
name|T
argument_list|>
block|{
DECL|field|comparators
specifier|final
name|FieldComparator
index|[]
name|comparators
decl_stmt|;
DECL|field|leafComparators
specifier|final
name|LeafFieldComparator
index|[]
name|leafComparators
decl_stmt|;
DECL|method|SortingGroupHead
specifier|protected
name|SortingGroupHead
parameter_list|(
name|Sort
name|sort
parameter_list|,
name|T
name|groupValue
parameter_list|,
name|int
name|doc
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|,
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupValue
argument_list|,
name|doc
argument_list|,
name|context
operator|.
name|docBase
argument_list|)
expr_stmt|;
specifier|final
name|SortField
index|[]
name|sortFields
init|=
name|sort
operator|.
name|getSort
argument_list|()
decl_stmt|;
name|comparators
operator|=
operator|new
name|FieldComparator
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
name|leafComparators
operator|=
operator|new
name|LeafFieldComparator
index|[
name|sortFields
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortFields
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|comparators
index|[
name|i
index|]
operator|=
name|sortFields
index|[
name|i
index|]
operator|.
name|getComparator
argument_list|(
literal|1
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|leafComparators
index|[
name|i
index|]
operator|=
name|comparators
index|[
name|i
index|]
operator|.
name|getLeafComparator
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|leafComparators
index|[
name|i
index|]
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
name|leafComparators
index|[
name|i
index|]
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|leafComparators
index|[
name|i
index|]
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setNextReader
specifier|public
name|void
name|setNextReader
parameter_list|(
name|LeafReaderContext
name|ctx
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|setNextReader
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comparators
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|leafComparators
index|[
name|i
index|]
operator|=
name|comparators
index|[
name|i
index|]
operator|.
name|getLeafComparator
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|protected
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafFieldComparator
name|c
range|:
name|leafComparators
control|)
block|{
name|c
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|compare
specifier|public
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|leafComparators
index|[
name|compIDX
index|]
operator|.
name|compareBottom
argument_list|(
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|updateDocHead
specifier|public
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafFieldComparator
name|comparator
range|:
name|leafComparators
control|)
block|{
name|comparator
operator|.
name|copy
argument_list|(
literal|0
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|comparator
operator|.
name|setBottom
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|docBase
expr_stmt|;
block|}
block|}
comment|/**    * Specialized implementation for sorting by score    */
DECL|class|ScoringGroupHeadsCollector
specifier|private
specifier|static
class|class
name|ScoringGroupHeadsCollector
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AllGroupHeadsCollector
argument_list|<
name|T
argument_list|>
block|{
DECL|method|ScoringGroupHeadsCollector
specifier|protected
name|ScoringGroupHeadsCollector
parameter_list|(
name|GroupSelector
argument_list|<
name|T
argument_list|>
name|selector
parameter_list|,
name|Sort
name|sort
parameter_list|)
block|{
name|super
argument_list|(
name|selector
argument_list|,
name|sort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newGroupHead
specifier|protected
name|GroupHead
argument_list|<
name|T
argument_list|>
name|newGroupHead
parameter_list|(
name|int
name|doc
parameter_list|,
name|T
name|value
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|,
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ScoringGroupHead
argument_list|<>
argument_list|(
name|scorer
argument_list|,
name|value
argument_list|,
name|doc
argument_list|,
name|context
operator|.
name|docBase
argument_list|)
return|;
block|}
block|}
DECL|class|ScoringGroupHead
specifier|private
specifier|static
class|class
name|ScoringGroupHead
parameter_list|<
name|T
parameter_list|>
extends|extends
name|GroupHead
argument_list|<
name|T
argument_list|>
block|{
DECL|field|scorer
specifier|private
name|Scorer
name|scorer
decl_stmt|;
DECL|field|topScore
specifier|private
name|float
name|topScore
decl_stmt|;
DECL|method|ScoringGroupHead
specifier|protected
name|ScoringGroupHead
parameter_list|(
name|Scorer
name|scorer
parameter_list|,
name|T
name|groupValue
parameter_list|,
name|int
name|doc
parameter_list|,
name|int
name|docBase
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|groupValue
argument_list|,
name|doc
argument_list|,
name|docBase
argument_list|)
expr_stmt|;
assert|assert
name|scorer
operator|.
name|docID
argument_list|()
operator|==
name|doc
assert|;
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
name|this
operator|.
name|topScore
operator|=
name|scorer
operator|.
name|score
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|protected
name|void
name|setScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|)
block|{
name|this
operator|.
name|scorer
operator|=
name|scorer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|compIDX
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|scorer
operator|.
name|docID
argument_list|()
operator|==
name|doc
assert|;
assert|assert
name|compIDX
operator|==
literal|0
assert|;
name|float
name|score
init|=
name|scorer
operator|.
name|score
argument_list|()
decl_stmt|;
name|int
name|c
init|=
name|Float
operator|.
name|compare
argument_list|(
name|score
argument_list|,
name|topScore
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|>
literal|0
condition|)
name|topScore
operator|=
name|score
expr_stmt|;
return|return
name|c
return|;
block|}
annotation|@
name|Override
DECL|method|updateDocHead
specifier|protected
name|void
name|updateDocHead
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|doc
operator|=
name|doc
operator|+
name|docBase
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

