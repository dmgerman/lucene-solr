begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|LongStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
DECL|class|LongHashSetTests
specifier|public
class|class
name|LongHashSetTests
extends|extends
name|LuceneTestCase
block|{
DECL|method|assertEquals
specifier|private
name|void
name|assertEquals
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|set1
parameter_list|,
name|LongHashSet
name|set2
parameter_list|)
block|{
name|LuceneTestCase
operator|.
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
name|LuceneTestCase
operator|.
name|assertEquals
argument_list|(
name|set2
argument_list|,
name|set1
argument_list|)
expr_stmt|;
name|LuceneTestCase
operator|.
name|assertEquals
argument_list|(
name|set2
argument_list|,
name|set2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|set2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|set1
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set3
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|set1
argument_list|)
decl_stmt|;
name|long
name|removed
init|=
name|set3
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|long
name|next
init|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|!=
name|removed
operator|&&
name|set3
operator|.
name|add
argument_list|(
name|next
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
name|assertNotEquals
argument_list|(
name|set3
argument_list|,
name|set2
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|assertNotEquals
specifier|private
name|void
name|assertNotEquals
parameter_list|(
name|Set
argument_list|<
name|Long
argument_list|>
name|set1
parameter_list|,
name|LongHashSet
name|set2
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|set1
operator|.
name|equals
argument_list|(
name|set2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|set2
operator|.
name|equals
argument_list|(
name|set1
argument_list|)
argument_list|)
expr_stmt|;
name|LongHashSet
name|set3
init|=
operator|new
name|LongHashSet
argument_list|(
name|set1
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|Long
operator|::
name|longValue
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|set2
operator|.
name|equals
argument_list|(
name|set3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|LongHashSet
name|set2
init|=
operator|new
name|LongHashSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
block|}
DECL|method|testOneValue
specifier|public
name|void
name|testOneValue
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|42L
argument_list|)
argument_list|)
decl_stmt|;
name|LongHashSet
name|set2
init|=
operator|new
name|LongHashSet
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
name|set1
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|set2
operator|=
operator|new
name|LongHashSet
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
block|}
DECL|method|testTwoValues
specifier|public
name|void
name|testTwoValues
parameter_list|()
block|{
name|Set
argument_list|<
name|Long
argument_list|>
name|set1
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|42L
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
decl_stmt|;
name|LongHashSet
name|set2
init|=
operator|new
name|LongHashSet
argument_list|(
literal|42
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
name|set1
operator|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|42L
argument_list|)
argument_list|)
expr_stmt|;
name|set2
operator|=
operator|new
name|LongHashSet
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|long
index|[]
name|values
init|=
operator|new
name|long
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|1
operator|<<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|16
argument_list|)
argument_list|)
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
operator|<
literal|9
condition|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|random
argument_list|()
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|values
index|[
name|i
index|]
operator|=
name|values
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|i
argument_list|)
index|]
expr_stmt|;
block|}
block|}
if|if
condition|(
name|values
operator|.
name|length
operator|>
literal|0
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|values
index|[
name|values
operator|.
name|length
operator|/
literal|2
index|]
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
block|}
name|Set
argument_list|<
name|Long
argument_list|>
name|set1
init|=
name|LongStream
operator|.
name|of
argument_list|(
name|values
argument_list|)
operator|.
name|mapToObj
argument_list|(
name|Long
operator|::
name|valueOf
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toCollection
argument_list|(
name|HashSet
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
name|LongHashSet
name|set2
init|=
operator|new
name|LongHashSet
argument_list|(
name|values
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|set1
argument_list|,
name|set2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

