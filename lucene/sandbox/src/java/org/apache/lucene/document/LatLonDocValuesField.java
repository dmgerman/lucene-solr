begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|decodeLatitude
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|decodeLongitude
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLatitude
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
operator|.
name|GeoEncodingUtils
operator|.
name|encodeLongitude
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValuesType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FieldDoc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexOrDocValuesQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_comment
comment|/**   * An per-document location field.  *<p>  * Sorting by distance is efficient. Multiple values for the same field in one document  * is allowed.   *<p>  * This field defines static factory methods for common operations:  *<ul>  *<li>{@link #newDistanceSort newDistanceSort()} for ordering documents by distance from a specified location.   *</ul>  *<p>  * If you also need query operations, you should add a separate {@link LatLonPoint} instance.  * If you also need to store the value, you should add a separate {@link StoredField} instance.  *<p>  *<b>WARNING</b>: Values are indexed with some loss of precision from the  * original {@code double} values (4.190951585769653E-8 for the latitude component  * and 8.381903171539307E-8 for longitude).  * @see LatLonPoint  */
end_comment

begin_class
DECL|class|LatLonDocValuesField
specifier|public
class|class
name|LatLonDocValuesField
extends|extends
name|Field
block|{
comment|/**    * Type for a LatLonDocValuesField    *<p>    * Each value stores a 64-bit long where the upper 32 bits are the encoded latitude,    * and the lower 32 bits are the encoded longitude.    * @see org.apache.lucene.geo.GeoEncodingUtils#decodeLatitude(int)    * @see org.apache.lucene.geo.GeoEncodingUtils#decodeLongitude(int)    */
DECL|field|TYPE
specifier|public
specifier|static
specifier|final
name|FieldType
name|TYPE
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
static|static
block|{
name|TYPE
operator|.
name|setDocValuesType
argument_list|(
name|DocValuesType
operator|.
name|SORTED_NUMERIC
argument_list|)
expr_stmt|;
name|TYPE
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
comment|/**     * Creates a new LatLonDocValuesField with the specified latitude and longitude    * @param name field name    * @param latitude latitude value: must be within standard +/-90 coordinate bounds.    * @param longitude longitude value: must be within standard +/-180 coordinate bounds.    * @throws IllegalArgumentException if the field name is null or latitude or longitude are out of bounds    */
DECL|method|LatLonDocValuesField
specifier|public
name|LatLonDocValuesField
parameter_list|(
name|String
name|name
parameter_list|,
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|TYPE
argument_list|)
expr_stmt|;
name|setLocationValue
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|)
expr_stmt|;
block|}
comment|/**    * Change the values of this field    * @param latitude latitude value: must be within standard +/-90 coordinate bounds.    * @param longitude longitude value: must be within standard +/-180 coordinate bounds.    * @throws IllegalArgumentException if latitude or longitude are out of bounds    */
DECL|method|setLocationValue
specifier|public
name|void
name|setLocationValue
parameter_list|(
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
name|int
name|latitudeEncoded
init|=
name|encodeLatitude
argument_list|(
name|latitude
argument_list|)
decl_stmt|;
name|int
name|longitudeEncoded
init|=
name|encodeLongitude
argument_list|(
name|longitude
argument_list|)
decl_stmt|;
name|fieldsData
operator|=
name|Long
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|long
operator|)
name|latitudeEncoded
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
name|longitudeEncoded
operator|&
literal|0xFFFFFFFFL
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** helper: checks a fieldinfo and throws exception if its definitely not a LatLonDocValuesField */
DECL|method|checkCompatible
specifier|static
name|void
name|checkCompatible
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
comment|// dv properties could be "unset", if you e.g. used only StoredField with this same name in the segment.
if|if
condition|(
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|DocValuesType
operator|.
name|NONE
operator|&&
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|TYPE
operator|.
name|docValuesType
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field=\""
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|"\" was indexed with docValuesType="
operator|+
name|fieldInfo
operator|.
name|getDocValuesType
argument_list|()
operator|+
literal|" but this type has docValuesType="
operator|+
name|TYPE
operator|.
name|docValuesType
argument_list|()
operator|+
literal|", is the field really a LatLonDocValuesField?"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|long
name|currentValue
init|=
operator|(
name|Long
operator|)
name|fieldsData
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|decodeLatitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|currentValue
operator|>>
literal|32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|decodeLongitude
argument_list|(
call|(
name|int
call|)
argument_list|(
name|currentValue
operator|&
literal|0xFFFFFFFF
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Creates a SortField for sorting by distance from a location.    *<p>    * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for    * the hits contains a Double instance with the distance in meters.    *<p>    * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance    * (missing values sort last).    *<p>    * If a document contains multiple values for the field, the<i>closest</i> distance to the location is used.    *     * @param field field name. must not be null.    * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.    * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.    * @return SortField ordering documents by distance    * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.    */
DECL|method|newDistanceSort
specifier|public
specifier|static
name|SortField
name|newDistanceSort
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|)
block|{
return|return
operator|new
name|LatLonPointSortField
argument_list|(
name|field
argument_list|,
name|latitude
argument_list|,
name|longitude
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching a bounding box using doc values.    * This query is usually slow as it does not use an index structure and needs    * to verify documents one-by-one in order to know whether they match. It is    * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a    * {@link LatLonPoint#newBoxQuery}.    */
DECL|method|newBoxQuery
specifier|public
specifier|static
name|Query
name|newBoxQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|minLatitude
parameter_list|,
name|double
name|maxLatitude
parameter_list|,
name|double
name|minLongitude
parameter_list|,
name|double
name|maxLongitude
parameter_list|)
block|{
comment|// exact double values of lat=90.0D and lon=180.0D must be treated special as they are not represented in the encoding
comment|// and should not drag in extra bogus junk! TODO: should encodeCeil just throw ArithmeticException to be less trappy here?
if|if
condition|(
name|minLatitude
operator|==
literal|90.0
condition|)
block|{
comment|// range cannot match as 90.0 can never exist
return|return
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"LatLonDocValuesField.newBoxQuery with minLatitude=90.0"
argument_list|)
return|;
block|}
if|if
condition|(
name|minLongitude
operator|==
literal|180.0
condition|)
block|{
if|if
condition|(
name|maxLongitude
operator|==
literal|180.0
condition|)
block|{
comment|// range cannot match as 180.0 can never exist
return|return
operator|new
name|MatchNoDocsQuery
argument_list|(
literal|"LatLonDocValuesField.newBoxQuery with minLongitude=maxLongitude=180.0"
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|maxLongitude
operator|<
name|minLongitude
condition|)
block|{
comment|// encodeCeil() with dateline wrapping!
name|minLongitude
operator|=
operator|-
literal|180.0
expr_stmt|;
block|}
block|}
return|return
operator|new
name|LatLonDocValuesBoxQuery
argument_list|(
name|field
argument_list|,
name|minLatitude
argument_list|,
name|maxLatitude
argument_list|,
name|minLongitude
argument_list|,
name|maxLongitude
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching points within the specified distance of the supplied location.    * This query is usually slow as it does not use an index structure and needs    * to verify documents one-by-one in order to know whether they match. It is    * best used wrapped in an {@link IndexOrDocValuesQuery} alongside a    * {@link LatLonPoint#newDistanceQuery}.    * @param field field name. must not be null.    * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.    * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.    * @param radiusMeters maximum distance from the center in meters: must be non-negative and finite.    * @return query matching points within this distance    * @throws IllegalArgumentException if {@code field} is null, location has invalid coordinates, or radius is invalid.    */
DECL|method|newDistanceQuery
specifier|public
specifier|static
name|Query
name|newDistanceQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|double
name|latitude
parameter_list|,
name|double
name|longitude
parameter_list|,
name|double
name|radiusMeters
parameter_list|)
block|{
return|return
operator|new
name|LatLonDocValuesDistanceQuery
argument_list|(
name|field
argument_list|,
name|latitude
argument_list|,
name|longitude
argument_list|,
name|radiusMeters
argument_list|)
return|;
block|}
block|}
end_class

end_unit

