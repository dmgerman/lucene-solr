begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_class
DECL|class|LongHashSet
specifier|final
class|class
name|LongHashSet
extends|extends
name|AbstractSet
argument_list|<
name|Long
argument_list|>
block|{
DECL|field|MISSING
specifier|private
specifier|static
specifier|final
name|long
name|MISSING
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|field|table
specifier|final
name|long
index|[]
name|table
decl_stmt|;
DECL|field|mask
specifier|final
name|int
name|mask
decl_stmt|;
DECL|field|hasMissingValue
specifier|final
name|boolean
name|hasMissingValue
decl_stmt|;
DECL|field|size
specifier|final
name|int
name|size
decl_stmt|;
DECL|field|hashCode
specifier|final
name|int
name|hashCode
decl_stmt|;
DECL|method|LongHashSet
name|LongHashSet
parameter_list|(
name|long
modifier|...
name|values
parameter_list|)
block|{
name|int
name|tableSize
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|values
operator|.
name|length
operator|*
literal|3L
operator|/
literal|2
argument_list|)
decl_stmt|;
name|tableSize
operator|=
literal|1
operator|<<
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|tableSize
argument_list|)
expr_stmt|;
comment|// make it a power of 2
assert|assert
name|tableSize
operator|>=
name|values
operator|.
name|length
operator|*
literal|3L
operator|/
literal|2
assert|;
name|table
operator|=
operator|new
name|long
index|[
name|tableSize
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|table
argument_list|,
name|MISSING
argument_list|)
expr_stmt|;
name|mask
operator|=
name|tableSize
operator|-
literal|1
expr_stmt|;
name|boolean
name|hasMissingValue
init|=
literal|false
decl_stmt|;
name|int
name|size
init|=
literal|0
decl_stmt|;
name|int
name|hashCode
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|value
operator|==
name|MISSING
operator|||
name|add
argument_list|(
name|value
argument_list|)
condition|)
block|{
if|if
condition|(
name|value
operator|==
name|MISSING
condition|)
block|{
name|hasMissingValue
operator|=
literal|true
expr_stmt|;
block|}
operator|++
name|size
expr_stmt|;
name|hashCode
operator|+=
name|Long
operator|.
name|hashCode
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|hasMissingValue
operator|=
name|hasMissingValue
expr_stmt|;
name|this
operator|.
name|size
operator|=
name|size
expr_stmt|;
name|this
operator|.
name|hashCode
operator|=
name|hashCode
expr_stmt|;
block|}
DECL|method|add
specifier|private
name|boolean
name|add
parameter_list|(
name|long
name|l
parameter_list|)
block|{
assert|assert
name|l
operator|!=
name|MISSING
assert|;
specifier|final
name|int
name|slot
init|=
name|Long
operator|.
name|hashCode
argument_list|(
name|l
argument_list|)
operator|&
name|mask
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|slot
init|;
condition|;
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|&
name|mask
control|)
block|{
if|if
condition|(
name|table
index|[
name|i
index|]
operator|==
name|MISSING
condition|)
block|{
name|table
index|[
name|i
index|]
operator|=
name|l
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|table
index|[
name|i
index|]
operator|==
name|l
condition|)
block|{
comment|// already added
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|method|contains
name|boolean
name|contains
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|==
name|MISSING
condition|)
block|{
return|return
name|hasMissingValue
return|;
block|}
specifier|final
name|int
name|slot
init|=
name|Long
operator|.
name|hashCode
argument_list|(
name|l
argument_list|)
operator|&
name|mask
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|slot
init|;
condition|;
name|i
operator|=
operator|(
name|i
operator|+
literal|1
operator|)
operator|&
name|mask
control|)
block|{
if|if
condition|(
name|table
index|[
name|i
index|]
operator|==
name|MISSING
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|table
index|[
name|i
index|]
operator|==
name|l
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|size
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|.
name|getClass
argument_list|()
operator|==
name|LongHashSet
operator|.
name|class
condition|)
block|{
name|LongHashSet
name|that
init|=
operator|(
name|LongHashSet
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|hashCode
operator|!=
name|that
operator|.
name|hashCode
operator|||
name|size
operator|!=
name|that
operator|.
name|size
operator|||
name|hasMissingValue
operator|!=
name|that
operator|.
name|hasMissingValue
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|long
name|v
range|:
name|table
control|)
block|{
if|if
condition|(
name|v
operator|!=
name|MISSING
operator|&&
name|that
operator|.
name|contains
argument_list|(
name|v
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
name|super
operator|.
name|equals
argument_list|(
name|obj
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|contains
specifier|public
name|boolean
name|contains
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|instanceof
name|Long
operator|&&
name|contains
argument_list|(
operator|(
operator|(
name|Long
operator|)
name|o
operator|)
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|Iterator
argument_list|<
name|Long
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Long
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|hasNext
init|=
name|hasMissingValue
decl_stmt|;
specifier|private
name|int
name|i
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|long
name|value
init|=
name|MISSING
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|hasNext
condition|)
block|{
return|return
literal|true
return|;
block|}
while|while
condition|(
operator|++
name|i
operator|<
name|table
operator|.
name|length
condition|)
block|{
name|value
operator|=
name|table
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|value
operator|!=
name|MISSING
condition|)
block|{
return|return
name|hasNext
operator|=
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Long
name|next
parameter_list|()
block|{
if|if
condition|(
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|value
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

