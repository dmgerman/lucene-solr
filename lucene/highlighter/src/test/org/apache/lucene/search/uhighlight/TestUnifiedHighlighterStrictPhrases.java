begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ParametersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchNoDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|QueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"MockFixedIntBlock"
block|,
literal|"MockVariableIntBlock"
block|,
literal|"MockSep"
block|,
literal|"MockRandom"
block|,
literal|"Lucene3x"
block|}
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|""
argument_list|)
comment|//Gradle interferes with this Lucene test rule
DECL|class|TestUnifiedHighlighterStrictPhrases
specifier|public
class|class
name|TestUnifiedHighlighterStrictPhrases
extends|extends
name|LuceneTestCase
block|{
DECL|field|fieldType
specifier|final
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|dir
name|Directory
name|dir
decl_stmt|;
DECL|field|indexAnalyzer
name|MockAnalyzer
name|indexAnalyzer
decl_stmt|;
DECL|field|indexWriter
name|RandomIndexWriter
name|indexWriter
decl_stmt|;
DECL|field|searcher
name|IndexSearcher
name|searcher
decl_stmt|;
DECL|field|highlighter
name|UnifiedHighlighter
name|highlighter
decl_stmt|;
DECL|field|indexReader
name|IndexReader
name|indexReader
decl_stmt|;
annotation|@
name|ParametersFactory
DECL|method|parameters
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|UHTestHelper
operator|.
name|parametersFactoryList
argument_list|()
return|;
block|}
DECL|method|TestUnifiedHighlighterStrictPhrases
specifier|public
name|TestUnifiedHighlighterStrictPhrases
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|doBefore
specifier|public
name|void
name|doBefore
parameter_list|()
throws|throws
name|IOException
block|{
name|indexAnalyzer
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//whitespace, punctuation, lowercase
name|indexAnalyzer
operator|.
name|setPositionIncrementGap
argument_list|(
literal|3
argument_list|)
expr_stmt|;
comment|// more than default
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|indexWriter
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
DECL|method|doAfter
specifier|public
name|void
name|doAfter
parameter_list|()
throws|throws
name|IOException
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|indexReader
argument_list|,
name|indexWriter
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|newDoc
specifier|private
name|Document
name|newDoc
parameter_list|(
name|String
modifier|...
name|bodyVals
parameter_list|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|bodyVal
range|:
name|bodyVals
control|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
name|bodyVal
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
DECL|method|initReaderSearcherHighlighter
specifier|private
name|void
name|initReaderSearcherHighlighter
parameter_list|()
throws|throws
name|IOException
block|{
name|indexReader
operator|=
name|indexWriter
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|searcher
operator|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
expr_stmt|;
name|highlighter
operator|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setHighlightPhrasesStrictly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|newPhraseQuery
specifier|private
name|PhraseQuery
name|newPhraseQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|phrase
parameter_list|)
block|{
return|return
operator|(
name|PhraseQuery
operator|)
operator|new
name|QueryBuilder
argument_list|(
name|indexAnalyzer
argument_list|)
operator|.
name|createPhraseQuery
argument_list|(
name|field
argument_list|,
name|phrase
argument_list|)
return|;
block|}
DECL|method|setSlop
specifier|private
name|PhraseQuery
name|setSlop
parameter_list|(
name|PhraseQuery
name|query
parameter_list|,
name|int
name|slop
parameter_list|)
block|{
name|PhraseQuery
operator|.
name|Builder
name|builder
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|Term
index|[]
name|terms
init|=
name|query
operator|.
name|getTerms
argument_list|()
decl_stmt|;
name|int
index|[]
name|positions
init|=
name|query
operator|.
name|getPositions
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|add
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|,
name|positions
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSlop
argument_list|(
name|slop
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"Yin yang, filter"
argument_list|)
argument_list|)
expr_stmt|;
comment|// filter out. test getTermToSpanLists reader 1-doc filter
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"yin alone, Yin yang, yin gap yang"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
comment|//query:  -filter +"yin yang"
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"filter"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"yin yang"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"yin alone,<b>Yin</b><b>yang</b>, yin gap yang"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithSameTermQuery
specifier|public
name|void
name|testWithSameTermQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"Yin yang, yin gap yang"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"yin"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"yin yang"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// add queries for other fields; we shouldn't highlight these because of that.
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"title"
argument_list|,
literal|"yang"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>Yin</b><b>yang</b>,<b>yin</b> gap yang"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseNotInDoc
specifier|public
name|void
name|testPhraseNotInDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"Whatever yin"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query matches this; highlight it
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"nextdoc yin"
argument_list|)
argument_list|)
expr_stmt|;
comment|// query does NOT match this, only the SHOULD clause does
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
comment|//MUST:
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"whatever"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|//SHOULD: (yet won't)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"nextdoc yin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"nonexistent yin"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>Whatever</b> yin"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|method|testSubPhrases
specifier|public
name|void
name|testSubPhrases
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"alpha bravo charlie - charlie bravo alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"alpha bravo charlie"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"alpha bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b><b>charlie</b> - charlie bravo alpha"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|method|testSynonyms
specifier|public
name|void
name|testSynonyms
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"mother father w mom father w dad"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|MultiPhraseQuery
name|query
init|=
operator|new
name|MultiPhraseQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"mom"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"mother"
argument_list|)
block|}
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"dad"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"father"
argument_list|)
block|}
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>mother</b><b>father</b> w<b>mom</b><b>father</b> w dad"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test it does *not* highlight the same term's not next to the span-near.  "charlie" in this case.    * This particular example exercises "Rewrite" plus "MTQ" in the same query.    */
DECL|method|testRewriteAndMtq
specifier|public
name|void
name|testRewriteAndMtq
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"alpha bravo charlie - charlie bravo alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bravo"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"ch"
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|,
comment|// REWRITES
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|snq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"al"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// MTQ
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"alpha bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// add queries for other fields; we shouldn't highlight these because of that.
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bravo alpha"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b><b>charlie</b> - charlie bravo<b>alpha</b>"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
comment|// do again, this time with MTQ disabled.  We should only find "alpha bravo".
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//disable but leave phrase processing enabled
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b> charlie - charlie bravo alpha"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
comment|/**    * Like {@link #testRewriteAndMtq} but no freestanding MTQ    */
DECL|method|testRewrite
specifier|public
name|void
name|testRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"alpha bravo charlie - charlie bravo alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bravo"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"ch"
argument_list|)
argument_list|)
argument_list|)
block|}
argument_list|,
comment|// REWRITES
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|snq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|//          .add(new PrefixQuery(new Term("body", "al")), BooleanClause.Occur.MUST) // MTQ
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"alpha bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// add queries for other fields; we shouldn't highlight these because of that.
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bravo alpha"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b><b>charlie</b> - charlie bravo alpha"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
comment|// do again, this time with MTQ disabled.  We should only find "alpha bravo".
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//disable but leave phrase processing enabled
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b> charlie - charlie bravo alpha"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
comment|/**    * Like {@link #testRewriteAndMtq} but no rewrite.    */
DECL|method|testMtq
specifier|public
name|void
name|testMtq
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"alpha bravo charlie - charlie bravo alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|SpanNearQuery
name|snq
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bravo"
argument_list|)
argument_list|)
block|,
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"charlie"
argument_list|)
argument_list|)
block|}
argument_list|,
comment|// does NOT rewrite
literal|0
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|snq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"al"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// MTQ
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"alpha bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// add queries for other fields; we shouldn't highlight these because of that.
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"title"
argument_list|,
literal|"bravo alpha"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b><b>charlie</b> - charlie bravo<b>alpha</b>"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
comment|// do again, this time with MTQ disabled.
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|//disable but leave phrase processing enabled
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b><b>charlie</b> - charlie bravo alpha"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiValued
specifier|public
name|void
name|testMultiValued
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"one bravo three"
argument_list|,
literal|"four bravo six"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"one bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"four bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"br"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>one</b><b>bravo</b> three...<b>four</b><b>bravo</b> six"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
comment|// now test phraseQuery won't span across values
assert|assert
name|indexAnalyzer
operator|.
name|getPositionIncrementGap
argument_list|(
literal|"body"
argument_list|)
operator|>
literal|0
assert|;
name|PhraseQuery
name|phraseQuery
init|=
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"three four"
argument_list|)
decl_stmt|;
comment|// 1 too little; won't span
name|phraseQuery
operator|=
name|setSlop
argument_list|(
name|phraseQuery
argument_list|,
name|indexAnalyzer
operator|.
name|getPositionIncrementGap
argument_list|(
literal|"body"
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bravo"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one<b>bravo</b> three... four<b>bravo</b> six"
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// and add just enough slop to cross the values:
name|phraseQuery
operator|=
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"three four"
argument_list|)
expr_stmt|;
name|phraseQuery
operator|=
name|setSlop
argument_list|(
name|phraseQuery
argument_list|,
name|indexAnalyzer
operator|.
name|getPositionIncrementGap
argument_list|(
literal|"body"
argument_list|)
argument_list|)
expr_stmt|;
comment|// just enough to span
name|query
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bravo"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
comment|// must match and it will
operator|.
name|build
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"one<b>bravo</b><b>three</b>...<b>four</b><b>bravo</b> six"
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|testMaxLen
specifier|public
name|void
name|testMaxLen
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"alpha bravo charlie - gap alpha bravo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// hyphen is at char 21
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|highlighter
operator|.
name|setMaxLength
argument_list|(
literal|21
argument_list|)
expr_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"alpha bravo"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"gap alpha"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|newPhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"charlie gap"
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
if|if
condition|(
name|fieldType
operator|==
name|UHTestHelper
operator|.
name|reanalysisType
condition|)
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b> charlie -"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>alpha</b><b>bravo</b><b>charlie</b> -"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFilteredOutSpan
specifier|public
name|void
name|testFilteredOutSpan
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"freezing cold stuff like stuff freedom of speech"
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|WildcardQuery
name|wildcardQuery
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"free*"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanMultiTermQueryWrapper
argument_list|<
name|WildcardQuery
argument_list|>
name|wildcardSpanQuery
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
name|wildcardQuery
argument_list|)
decl_stmt|;
name|SpanTermQuery
name|termQuery
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"speech"
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
name|spanQuery
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|wildcardSpanQuery
block|,
name|termQuery
block|}
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|spanQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"freezing cold stuff like stuff<b>freedom</b> of<b>speech</b>"
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|method|testMatchNoDocsQuery
specifier|public
name|void
name|testMatchNoDocsQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|highlighter
operator|=
operator|new
name|UnifiedHighlighter
argument_list|(
literal|null
argument_list|,
name|indexAnalyzer
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setHighlightPhrasesStrictly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|String
name|content
init|=
literal|"whatever"
decl_stmt|;
name|Object
name|o
init|=
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
literal|"body"
argument_list|,
operator|new
name|MatchNoDocsQuery
argument_list|()
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|content
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
DECL|method|testPreSpanQueryRewrite
specifier|public
name|void
name|testPreSpanQueryRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|indexWriter
operator|.
name|addDocument
argument_list|(
name|newDoc
argument_list|(
literal|"There is no accord and satisfaction with this - Consideration of the accord is arbitrary."
argument_list|)
argument_list|)
expr_stmt|;
name|initReaderSearcherHighlighter
argument_list|()
expr_stmt|;
name|highlighter
operator|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Collection
argument_list|<
name|Query
argument_list|>
name|preSpanQueryRewrite
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|MyQuery
condition|)
block|{
return|return
name|Collections
operator|.
name|singletonList
argument_list|(
operator|(
operator|(
name|MyQuery
operator|)
name|query
operator|)
operator|.
name|wrapped
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
expr_stmt|;
name|highlighter
operator|.
name|setHighlightPhrasesStrictly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|bqBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|Query
name|phraseQuery
init|=
operator|new
name|BoostQuery
argument_list|(
operator|new
name|PhraseQuery
argument_list|(
literal|"body"
argument_list|,
literal|"accord"
argument_list|,
literal|"and"
argument_list|,
literal|"satisfaction"
argument_list|)
argument_list|,
literal|2.0f
argument_list|)
decl_stmt|;
name|Query
name|oredTerms
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|setMinimumNumberShouldMatch
argument_list|(
literal|2
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"accord"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"satisfaction"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"consideration"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|Query
name|proximityBoostingQuery
init|=
operator|new
name|MyQuery
argument_list|(
name|oredTerms
argument_list|)
decl_stmt|;
name|Query
name|totalQuery
init|=
name|bqBuilder
operator|.
name|add
argument_list|(
name|phraseQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
name|proximityBoostingQuery
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|totalQuery
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
index|[]
name|snippets
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|totalQuery
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"There is no<b>accord</b><b>and</b><b>satisfaction</b> with this -<b>Consideration</b> of the<b>accord</b> is arbitrary."
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
block|}
DECL|class|MyQuery
specifier|private
specifier|static
class|class
name|MyQuery
extends|extends
name|Query
block|{
DECL|field|wrapped
specifier|private
specifier|final
name|Query
name|wrapped
decl_stmt|;
DECL|method|MyQuery
name|MyQuery
parameter_list|(
name|Query
name|wrapped
parameter_list|)
block|{
name|this
operator|.
name|wrapped
operator|=
name|wrapped
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapped
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|,
name|boost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|newWrapped
init|=
name|wrapped
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|newWrapped
operator|!=
name|wrapped
condition|)
block|{
return|return
operator|new
name|MyQuery
argument_list|(
name|newWrapped
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"[[["
operator|+
name|wrapped
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
literal|"]]]"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|obj
operator|!=
literal|null
operator|&&
name|obj
operator|.
name|getClass
argument_list|()
operator|==
name|getClass
argument_list|()
operator|&&
name|wrapped
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|MyQuery
operator|)
name|wrapped
operator|)
operator|.
name|wrapped
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|wrapped
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

