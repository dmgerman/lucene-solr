begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressCodecs
argument_list|(
block|{
literal|"MockFixedIntBlock"
block|,
literal|"MockVariableIntBlock"
block|,
literal|"MockSep"
block|,
literal|"MockRandom"
block|,
literal|"Lucene3x"
block|}
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|""
argument_list|)
comment|//Gradle interferes with this Lucene test rule
DECL|class|TestUnifiedHighlighterReanalysis
specifier|public
class|class
name|TestUnifiedHighlighterReanalysis
extends|extends
name|LuceneTestCase
block|{
DECL|field|indexAnalyzer
specifier|private
name|MockAnalyzer
name|indexAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//whitespace, punctuation, lowercase;
annotation|@
name|Test
DECL|method|testWithoutIndexSearcher
specifier|public
name|void
name|testWithoutIndexSearcher
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|text
init|=
literal|"This is a test. Just a test highlighting without a searcher. Feel free to ignore."
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"title"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
literal|null
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|String
name|snippet
init|=
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|text
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Just a test<b>highlighting</b> without a searcher. "
argument_list|,
name|snippet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test single space"
argument_list|,
literal|" "
argument_list|,
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
literal|" "
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Hello"
argument_list|,
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
literal|"nonexistent"
argument_list|,
name|query
argument_list|,
literal|"Hello"
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
DECL|method|testIndexSearcherNullness
specifier|public
name|void
name|testIndexSearcherNullness
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|text
init|=
literal|"This is a test. Just a test highlighting without a searcher. Feel free to ignore."
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"highlighting"
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
init|;
name|RandomIndexWriter
name|indexWriter
operator|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
init|;
name|IndexReader
name|indexReader
operator|=
name|indexWriter
operator|.
name|getReader
argument_list|()
init|)
block|{
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|indexReader
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|text
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//should throw
block|}
block|}
block|}
end_class

end_unit

