begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|TextField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_comment
comment|/**  * Helper for {@link UnifiedHighlighter} tests.  */
end_comment

begin_class
DECL|class|UHTestHelper
class|class
name|UHTestHelper
block|{
DECL|field|postingsType
specifier|static
specifier|final
name|FieldType
name|postingsType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
DECL|field|tvType
specifier|static
specifier|final
name|FieldType
name|tvType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
DECL|field|postingsWithTvType
specifier|static
specifier|final
name|FieldType
name|postingsWithTvType
init|=
operator|new
name|FieldType
argument_list|(
name|TextField
operator|.
name|TYPE_STORED
argument_list|)
decl_stmt|;
DECL|field|reanalysisType
specifier|static
specifier|final
name|FieldType
name|reanalysisType
init|=
name|TextField
operator|.
name|TYPE_STORED
decl_stmt|;
static|static
block|{
name|postingsType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|postingsType
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|tvType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tvType
operator|.
name|setStoreTermVectorPositions
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tvType
operator|.
name|setStoreTermVectorOffsets
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tvType
operator|.
name|freeze
argument_list|()
expr_stmt|;
name|postingsWithTvType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS
argument_list|)
expr_stmt|;
name|postingsWithTvType
operator|.
name|setStoreTermVectors
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|postingsWithTvType
operator|.
name|freeze
argument_list|()
expr_stmt|;
comment|//re-analysis type needs no further changes.
block|}
DECL|method|randomFieldType
specifier|public
specifier|static
name|FieldType
name|randomFieldType
parameter_list|(
name|Random
name|random
parameter_list|,
name|FieldType
modifier|...
name|typePossibilities
parameter_list|)
block|{
if|if
condition|(
name|typePossibilities
operator|==
literal|null
operator|||
name|typePossibilities
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|typePossibilities
operator|=
operator|new
name|FieldType
index|[]
block|{
name|postingsType
block|,
name|tvType
block|,
name|postingsWithTvType
block|,
name|reanalysisType
block|}
expr_stmt|;
block|}
return|return
name|typePossibilities
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|typePossibilities
operator|.
name|length
argument_list|)
index|]
return|;
block|}
comment|/**    * for {@link com.carrotsearch.randomizedtesting.annotations.ParametersFactory}    */
comment|// https://github.com/carrotsearch/randomizedtesting/blob/master/examples/maven/src/main/java/com/carrotsearch/examples/randomizedrunner/Test007ParameterizedTests.java
DECL|method|parametersFactoryList
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parametersFactoryList
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|postingsType
block|}
block|,
block|{
name|tvType
block|}
block|,
block|{
name|postingsWithTvType
block|}
block|,
block|{
name|reanalysisType
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

