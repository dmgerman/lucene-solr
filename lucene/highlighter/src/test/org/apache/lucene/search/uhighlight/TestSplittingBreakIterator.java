begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|""
argument_list|)
comment|//Gradle interferes with this Lucene test rule
DECL|class|TestSplittingBreakIterator
specifier|public
class|class
name|TestSplittingBreakIterator
extends|extends
name|LuceneTestCase
block|{
DECL|field|LINE_BI
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|LINE_BI
init|=
name|BreakIterator
operator|.
name|getLineInstance
argument_list|(
name|Locale
operator|.
name|ROOT
argument_list|)
decl_stmt|;
DECL|field|SPLIT_BI
specifier|private
specifier|static
specifier|final
name|BreakIterator
name|SPLIT_BI
init|=
operator|new
name|SplittingBreakIterator
argument_list|(
name|LINE_BI
argument_list|,
literal|'|'
argument_list|)
decl_stmt|;
DECL|method|testLineBreakIterator
specifier|public
name|void
name|testLineBreakIterator
parameter_list|()
block|{
name|testWithoutSplits
argument_list|(
name|LINE_BI
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithoutSplits
specifier|private
name|void
name|testWithoutSplits
parameter_list|(
name|BreakIterator
name|bi
parameter_list|)
block|{
comment|// these tests have no '|'
name|testBreakIterator
argument_list|(
name|bi
argument_list|,
literal|" a"
argument_list|,
literal|"^^^"
argument_list|)
expr_stmt|;
name|testBreakIterator
argument_list|(
name|bi
argument_list|,
literal|"aa"
argument_list|,
literal|"^ ^"
argument_list|)
expr_stmt|;
name|testBreakIterator
argument_list|(
name|bi
argument_list|,
literal|"aa a"
argument_list|,
literal|"^  ^^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testWithoutSplits
specifier|public
name|void
name|testWithoutSplits
parameter_list|()
block|{
name|testWithoutSplits
argument_list|(
name|SPLIT_BI
argument_list|)
expr_stmt|;
block|}
DECL|method|testOnlySingleSplitChar
specifier|public
name|void
name|testOnlySingleSplitChar
parameter_list|()
block|{
name|testBreakIterator
argument_list|(
name|SPLIT_BI
argument_list|,
literal|"|"
argument_list|,
literal|"^^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testSplitThenValue
specifier|public
name|void
name|testSplitThenValue
parameter_list|()
block|{
name|testBreakIterator
argument_list|(
name|SPLIT_BI
argument_list|,
literal|"|a"
argument_list|,
literal|"^^^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueThenSplit
specifier|public
name|void
name|testValueThenSplit
parameter_list|()
block|{
name|testBreakIterator
argument_list|(
name|SPLIT_BI
argument_list|,
literal|"a|"
argument_list|,
literal|"^^^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueThenSplitThenValue
specifier|public
name|void
name|testValueThenSplitThenValue
parameter_list|()
block|{
name|testBreakIterator
argument_list|(
name|SPLIT_BI
argument_list|,
literal|"aa|aa"
argument_list|,
literal|"^ ^^ ^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueThenDoubleSplitThenValue
specifier|public
name|void
name|testValueThenDoubleSplitThenValue
parameter_list|()
block|{
name|testBreakIterator
argument_list|(
name|SPLIT_BI
argument_list|,
literal|"aa||aa"
argument_list|,
literal|"^ ^^^ ^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testValueThenSplitThenDoubleValueThenSplitThenValue
specifier|public
name|void
name|testValueThenSplitThenDoubleValueThenSplitThenValue
parameter_list|()
block|{
name|testBreakIterator
argument_list|(
name|SPLIT_BI
argument_list|,
literal|"a|bb cc|d"
argument_list|,
literal|"^^^  ^ ^^^"
argument_list|)
expr_stmt|;
block|}
DECL|method|testBreakIterator
specifier|private
name|void
name|testBreakIterator
parameter_list|(
name|BreakIterator
name|bi
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boundaries
parameter_list|)
block|{
name|bi
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
comment|//Test first& last
name|testFirstAndLast
argument_list|(
name|bi
argument_list|,
name|text
argument_list|,
name|boundaries
argument_list|)
expr_stmt|;
comment|//Test if expected boundaries are consistent with reading them from next() in a loop:
name|assertEquals
argument_list|(
name|boundaries
argument_list|,
name|readBoundariesToString
argument_list|(
name|bi
argument_list|,
name|text
argument_list|)
argument_list|)
expr_stmt|;
comment|//Test following() and preceding():
comment|// get each index, randomized in case their is a sequencing bug:
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
name|randomIntsBetweenInclusive
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|testFollowing
argument_list|(
name|bi
argument_list|,
name|text
argument_list|,
name|boundaries
argument_list|,
name|indexes
argument_list|)
expr_stmt|;
name|testPreceding
argument_list|(
name|bi
argument_list|,
name|text
argument_list|,
name|boundaries
argument_list|,
name|indexes
argument_list|)
expr_stmt|;
comment|//Test previous():
name|testPrevious
argument_list|(
name|bi
argument_list|,
name|text
argument_list|,
name|boundaries
argument_list|)
expr_stmt|;
block|}
DECL|method|testFirstAndLast
specifier|private
name|void
name|testFirstAndLast
parameter_list|(
name|BreakIterator
name|bi
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boundaries
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Text: "
operator|+
name|text
decl_stmt|;
name|int
name|current
init|=
name|bi
operator|.
name|current
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|boundaries
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|)
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|current
argument_list|,
name|bi
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|current
argument_list|,
name|bi
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|=
name|bi
operator|.
name|last
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|boundaries
operator|.
name|lastIndexOf
argument_list|(
literal|'^'
argument_list|)
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|message
argument_list|,
name|current
argument_list|,
name|bi
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testFollowing
specifier|private
name|void
name|testFollowing
parameter_list|(
name|BreakIterator
name|bi
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boundaries
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Text: "
operator|+
name|text
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indexes
control|)
block|{
name|int
name|got
init|=
name|bi
operator|.
name|following
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|boundaries
operator|.
name|length
argument_list|()
condition|)
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|BreakIterator
operator|.
name|DONE
argument_list|,
name|got
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|boundaries
operator|.
name|lastIndexOf
argument_list|(
literal|'^'
argument_list|)
argument_list|,
name|bi
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|assertEquals
argument_list|(
name|message
operator|+
literal|" index:"
operator|+
name|index
argument_list|,
name|boundaries
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|,
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testPreceding
specifier|private
name|void
name|testPreceding
parameter_list|(
name|BreakIterator
name|bi
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boundaries
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Text: "
operator|+
name|text
decl_stmt|;
for|for
control|(
name|Integer
name|index
range|:
name|indexes
control|)
block|{
name|int
name|got
init|=
name|bi
operator|.
name|preceding
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|0
condition|)
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|BreakIterator
operator|.
name|DONE
argument_list|,
name|got
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|boundaries
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|)
argument_list|,
name|bi
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|//            if (index == text.length()&& got == BreakIterator.DONE) {
comment|//                continue;//hack to accept faulty default impl of BreakIterator.preceding()
comment|//            }
name|assertEquals
argument_list|(
name|message
operator|+
literal|" index:"
operator|+
name|index
argument_list|,
name|boundaries
operator|.
name|lastIndexOf
argument_list|(
literal|'^'
argument_list|,
name|index
operator|-
literal|1
argument_list|)
argument_list|,
name|got
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|randomIntsBetweenInclusive
specifier|private
name|List
argument_list|<
name|Integer
argument_list|>
name|randomIntsBetweenInclusive
parameter_list|(
name|int
name|end
parameter_list|)
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|indexes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|end
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|indexes
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|shuffle
argument_list|(
name|indexes
argument_list|,
name|random
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|indexes
return|;
block|}
DECL|method|testPrevious
specifier|private
name|void
name|testPrevious
parameter_list|(
name|BreakIterator
name|bi
parameter_list|,
name|String
name|text
parameter_list|,
name|String
name|boundaries
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Text: "
operator|+
name|text
decl_stmt|;
name|bi
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|bi
operator|.
name|last
argument_list|()
decl_stmt|;
comment|//position at the end
while|while
condition|(
literal|true
condition|)
block|{
name|idx
operator|=
name|boundaries
operator|.
name|lastIndexOf
argument_list|(
literal|'^'
argument_list|,
name|idx
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
name|message
argument_list|,
name|BreakIterator
operator|.
name|DONE
argument_list|,
name|bi
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|assertEquals
argument_list|(
name|message
argument_list|,
name|idx
argument_list|,
name|bi
operator|.
name|previous
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|message
argument_list|,
name|boundaries
operator|.
name|indexOf
argument_list|(
literal|'^'
argument_list|)
argument_list|,
name|bi
operator|.
name|current
argument_list|()
argument_list|)
expr_stmt|;
comment|//finishes at first
block|}
comment|/**    * Returns a string comprised of spaces and '^' only at the boundaries.    */
DECL|method|readBoundariesToString
specifier|private
name|String
name|readBoundariesToString
parameter_list|(
name|BreakIterator
name|bi
parameter_list|,
name|String
name|text
parameter_list|)
block|{
comment|// init markers to spaces
name|StringBuilder
name|markers
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|markers
operator|.
name|setLength
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|markers
operator|.
name|length
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|markers
operator|.
name|setCharAt
argument_list|(
name|k
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
block|}
name|bi
operator|.
name|setText
argument_list|(
name|text
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|boundary
init|=
name|bi
operator|.
name|current
argument_list|()
init|;
name|boundary
operator|!=
name|BreakIterator
operator|.
name|DONE
condition|;
name|boundary
operator|=
name|bi
operator|.
name|next
argument_list|()
control|)
block|{
name|markers
operator|.
name|setCharAt
argument_list|(
name|boundary
argument_list|,
literal|'^'
argument_list|)
expr_stmt|;
block|}
return|return
name|markers
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

