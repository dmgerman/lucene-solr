begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|annotations
operator|.
name|ParametersFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|ConstantScoreQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DisjunctionMaxQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FuzzyQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PrefixQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|RegexpQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Sort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermRangeQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TopDocs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|WildcardQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanFirstQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanMultiTermQueryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNearQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanNotQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanOrQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|SpanTermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|BaseDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
operator|.
name|SuppressCodecs
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * Some tests that highlight wildcard, fuzzy, etc queries.  */
end_comment

begin_class
annotation|@
name|SuppressCodecs
argument_list|(
block|{
literal|"MockFixedIntBlock"
block|,
literal|"MockVariableIntBlock"
block|,
literal|"MockSep"
block|,
literal|"MockRandom"
block|,
literal|"Lucene3x"
block|}
argument_list|)
annotation|@
name|LuceneTestCase
operator|.
name|SuppressSysoutChecks
argument_list|(
name|bugUrl
operator|=
literal|""
argument_list|)
comment|//Gradle interferes with this Lucene test rule
DECL|class|TestUnifiedHighlighterMTQ
specifier|public
class|class
name|TestUnifiedHighlighterMTQ
extends|extends
name|LuceneTestCase
block|{
DECL|field|fieldType
specifier|final
name|FieldType
name|fieldType
decl_stmt|;
DECL|field|dir
name|BaseDirectoryWrapper
name|dir
decl_stmt|;
DECL|field|indexAnalyzer
name|Analyzer
name|indexAnalyzer
decl_stmt|;
annotation|@
name|ParametersFactory
DECL|method|parameters
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
parameter_list|()
block|{
return|return
name|UHTestHelper
operator|.
name|parametersFactoryList
argument_list|()
return|;
block|}
DECL|method|TestUnifiedHighlighterMTQ
specifier|public
name|TestUnifiedHighlighterMTQ
parameter_list|(
name|FieldType
name|fieldType
parameter_list|)
block|{
name|this
operator|.
name|fieldType
operator|=
name|fieldType
expr_stmt|;
block|}
annotation|@
name|Before
DECL|method|doBefore
specifier|public
name|void
name|doBefore
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|=
name|newDirectory
argument_list|()
expr_stmt|;
name|indexAnalyzer
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//whitespace, punctuation, lowercase
block|}
annotation|@
name|After
DECL|method|doAfter
specifier|public
name|void
name|doAfter
parameter_list|()
throws|throws
name|IOException
block|{
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testWildcards
specifier|public
name|void
name|testWildcards
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// disable MTQ; won't highlight
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//reset
comment|// wrong field
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bogus"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOnePrefix
specifier|public
name|void
name|testOnePrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// wrong field
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bogus"
argument_list|,
literal|"te"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOneRegexp
specifier|public
name|void
name|testOneRegexp
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te.*"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// wrong field
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|RegexpQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bogus"
argument_list|,
literal|"te.*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testOneFuzzy
specifier|public
name|void
name|testOneFuzzy
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"tets"
argument_list|)
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"tets"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// wrong field
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bogus"
argument_list|,
literal|"tets"
argument_list|)
argument_list|,
literal|1
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testRanges
specifier|public
name|void
name|testRanges
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|"ta"
argument_list|,
literal|"tf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// null start
name|query
operator|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|null
argument_list|,
literal|"tf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This<b>is</b><b>a</b><b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b><b>a</b><b>one</b><b>sentence</b><b>document</b>."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// null end
name|query
operator|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|"ta"
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>This</b> is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// exact start inclusive
name|query
operator|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|"test"
argument_list|,
literal|"tf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// exact end inclusive
name|query
operator|=
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|"ta"
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// exact start exclusive
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|"test"
argument_list|,
literal|"tf"
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// exact end exclusive
name|bq
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"body"
argument_list|,
literal|"ta"
argument_list|,
literal|"test"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// wrong field
name|bq
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
name|TermRangeQuery
operator|.
name|newStringRange
argument_list|(
literal|"bogus"
argument_list|,
literal|"ta"
argument_list|,
literal|"tf"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|bq
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|bq
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testWildcardInBoolean
specifier|public
name|void
name|testWildcardInBoolean
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// must not
name|query
operator|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"bogus"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST_NOT
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|topDocs
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a test."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Test a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testWildcardInFiltered
specifier|public
name|void
name|testWildcardInFiltered
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"test"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|FILTER
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testWildcardInConstantScore
specifier|public
name|void
name|testWildcardInConstantScore
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|ConstantScoreQuery
name|query
init|=
operator|new
name|ConstantScoreQuery
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testWildcardInDisjunctionMax
specifier|public
name|void
name|testWildcardInDisjunctionMax
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|DisjunctionMaxQuery
name|query
init|=
operator|new
name|DisjunctionMaxQuery
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanWildcard
specifier|public
name|void
name|testSpanWildcard
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanOr
specifier|public
name|void
name|testSpanOr
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|SpanQuery
name|childQuery
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|SpanOrQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|childQuery
block|}
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanNear
specifier|public
name|void
name|testSpanNear
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|SpanQuery
name|childQuery
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|SpanNearQuery
argument_list|(
operator|new
name|SpanQuery
index|[]
block|{
name|childQuery
block|,
name|childQuery
block|}
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanNot
specifier|public
name|void
name|testSpanNot
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|SpanQuery
name|include
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|SpanQuery
name|exclude
init|=
operator|new
name|SpanTermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bogus"
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|SpanNotQuery
argument_list|(
name|include
argument_list|,
name|exclude
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpanPositionCheck
specifier|public
name|void
name|testSpanPositionCheck
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"This is a test."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|SpanQuery
name|childQuery
init|=
operator|new
name|SpanMultiTermQueryWrapper
argument_list|<>
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|SpanFirstQuery
argument_list|(
name|childQuery
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"This is a<b>test</b>."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<b>Test</b> a one sentence document."
argument_list|,
name|snippets
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Runs a query with two MTQs and confirms the formatter    * can tell which query matched which hit.    */
DECL|method|testWhichMTQMatched
specifier|public
name|void
name|testWhichMTQMatched
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Test a one sentence document."
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"te*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"one"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"se*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Default formatter just bolds each hit:
name|assertEquals
argument_list|(
literal|"<b>Test</b> a<b>one</b><b>sentence</b> document."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Now use our own formatter, that also stuffs the
comment|// matching term's text into the result:
name|highlighter
operator|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|PassageFormatter
name|getFormatter
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
operator|new
name|PassageFormatter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|format
parameter_list|(
name|Passage
name|passages
index|[]
parameter_list|,
name|String
name|content
parameter_list|)
block|{
comment|// Copied from DefaultPassageFormatter, but
comment|// tweaked to include the matched term:
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Passage
name|passage
range|:
name|passages
control|)
block|{
comment|// don't add ellipsis if its the first one, or if its connected.
if|if
condition|(
name|passage
operator|.
name|startOffset
operator|>
name|pos
operator|&&
name|pos
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"... "
argument_list|)
expr_stmt|;
block|}
name|pos
operator|=
name|passage
operator|.
name|startOffset
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|passage
operator|.
name|numMatches
condition|;
name|i
operator|++
control|)
block|{
name|int
name|start
init|=
name|passage
operator|.
name|matchStarts
index|[
name|i
index|]
decl_stmt|;
name|int
name|end
init|=
name|passage
operator|.
name|matchEnds
index|[
name|i
index|]
decl_stmt|;
comment|// its possible to have overlapping terms
if|if
condition|(
name|start
operator|>
name|pos
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|content
argument_list|,
name|pos
argument_list|,
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|end
operator|>
name|pos
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"<b>"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|content
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|pos
argument_list|,
name|start
argument_list|)
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|passage
operator|.
name|getMatchTerms
argument_list|()
index|[
name|i
index|]
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"</b>"
argument_list|)
expr_stmt|;
name|pos
operator|=
name|end
expr_stmt|;
block|}
block|}
comment|// its possible a "term" from the analyzer could span a sentence boundary.
name|sb
operator|.
name|append
argument_list|(
name|content
argument_list|,
name|pos
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|pos
argument_list|,
name|passage
operator|.
name|endOffset
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|=
name|passage
operator|.
name|endOffset
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|;
block|}
block|}
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|topDocs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
name|snippets
operator|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Default formatter bolds each hit:
name|assertEquals
argument_list|(
literal|"<b>Test(body:te*)</b> a<b>one(body:one)</b><b>sentence(body:se*)</b> document."
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//
comment|//  All tests below were *not* ported from the PostingsHighlighter; they are new to the U.H.
comment|//
DECL|method|testWithMaxLen
specifier|public
name|void
name|testWithMaxLen
parameter_list|()
throws|throws
name|IOException
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Alpha Bravo foo foo foo. Foo foo Alpha Bravo"
argument_list|)
expr_stmt|;
comment|//44 char long, 2 sentences
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setMaxLength
argument_list|(
literal|25
argument_list|)
expr_stmt|;
comment|//a little past first sentence
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"alpha"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bra"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|//ask for 2 but we'll only get 1
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b>Alpha</b><b>Bravo</b> foo foo foo. "
block|}
argument_list|,
name|snippets
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testTokenStreamIsClosed
specifier|public
name|void
name|testTokenStreamIsClosed
parameter_list|()
throws|throws
name|IOException
block|{
comment|// note: test is a derivative of testWithMaxLen()
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Field
name|body
init|=
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|""
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|body
operator|.
name|setStringValue
argument_list|(
literal|"Alpha Bravo foo foo foo. Foo foo Alpha Bravo"
argument_list|)
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
comment|// sometimes add a 2nd value (maybe matters?)
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"2nd value Alpha Bravo"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// use this buggy Analyzer at highlight time
name|Analyzer
name|buggyAnalyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|buggyTokenizer
init|=
operator|new
name|Tokenizer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"EXPECTED"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|buggyTokenizer
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|buggyAnalyzer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setHandleMultiTermQuery
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|rarely
argument_list|()
condition|)
block|{
name|highlighter
operator|.
name|setMaxLength
argument_list|(
literal|25
argument_list|)
expr_stmt|;
comment|//a little past first sentence
block|}
name|boolean
name|hasClauses
init|=
literal|false
decl_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|queryBuilder
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|hasClauses
operator|=
literal|true
expr_stmt|;
name|queryBuilder
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"alpha"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasClauses
operator|||
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|queryBuilder
operator|.
name|add
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"bra"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
block|}
name|BooleanQuery
name|query
init|=
name|queryBuilder
operator|.
name|build
argument_list|()
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlight
argument_list|(
literal|"body"
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|,
literal|2
argument_list|)
decl_stmt|;
comment|// don't even care what the results are; just want to test exception behavior
if|if
condition|(
name|fieldType
operator|==
name|UHTestHelper
operator|.
name|reanalysisType
condition|)
block|{
name|fail
argument_list|(
literal|"Expecting EXPECTED IOException"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|equals
argument_list|(
literal|"EXPECTED"
argument_list|)
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now test we can get the tokenStream without it puking due to IllegalStateException for not calling close()
try|try
init|(
name|TokenStream
name|ts
init|=
name|buggyAnalyzer
operator|.
name|tokenStream
argument_list|(
literal|"body"
argument_list|,
literal|"anything"
argument_list|)
init|)
block|{
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// hopefully doesn't throw
comment|// don't call incrementToken; we know it's buggy ;-)
block|}
block|}
comment|/**    * Not empty but nothing analyzes. Ensures we address null term-vectors.    */
DECL|method|testNothingAnalyzes
specifier|public
name|void
name|testNothingAnalyzes
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|" "
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
comment|// just a space! (thus not empty)
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"something"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|int
name|docID
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"nonexistent"
argument_list|)
argument_list|)
decl_stmt|;
name|int
index|[]
name|docIDs
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|docIDs
index|[
literal|0
index|]
operator|=
name|docID
expr_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlightFields
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"body"
block|}
argument_list|,
name|query
argument_list|,
name|docIDs
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|)
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|" "
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultiSegment
specifier|public
name|void
name|testMultiSegment
parameter_list|()
throws|throws
name|Exception
block|{
comment|// If we incorrectly got the term vector from mis-matched global/leaf doc ID, this test may fail
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"word aberration"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// make segment
name|doc
operator|=
operator|new
name|Document
argument_list|()
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"word absolve"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"ab"
argument_list|)
argument_list|)
decl_stmt|;
name|TopDocs
name|topDocs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlightFields
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"body"
block|}
argument_list|,
name|query
argument_list|,
name|topDocs
argument_list|)
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|snippets
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[word<b>aberration</b>, word<b>absolve</b>]"
argument_list|,
name|Arrays
operator|.
name|toString
argument_list|(
name|snippets
argument_list|)
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testPositionSensitiveWithWildcardDoesNotHighlight
specifier|public
name|void
name|testPositionSensitiveWithWildcardDoesNotHighlight
parameter_list|()
throws|throws
name|Exception
block|{
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|Field
argument_list|(
literal|"body"
argument_list|,
literal|"iterate insect ipswitch illinois indirect"
argument_list|,
name|fieldType
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|IndexReader
name|ir
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
name|searcher
argument_list|,
name|indexAnalyzer
argument_list|)
decl_stmt|;
name|int
name|docID
init|=
name|searcher
operator|.
name|search
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"id"
argument_list|,
literal|"id"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
operator|.
name|scoreDocs
index|[
literal|0
index|]
operator|.
name|doc
decl_stmt|;
name|PhraseQuery
name|pq
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"consent"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"order"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|BooleanQuery
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|WildcardQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"body"
argument_list|,
literal|"enforc*"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
name|pq
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|int
index|[]
name|docIds
init|=
operator|new
name|int
index|[]
block|{
name|docID
block|}
decl_stmt|;
name|String
name|snippets
index|[]
init|=
name|highlighter
operator|.
name|highlightFields
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"body"
block|}
argument_list|,
name|query
argument_list|,
name|docIds
argument_list|,
operator|new
name|int
index|[]
block|{
literal|2
block|}
argument_list|)
operator|.
name|get
argument_list|(
literal|"body"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|snippets
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"iterate insect ipswitch illinois indirect"
argument_list|,
name|snippets
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

