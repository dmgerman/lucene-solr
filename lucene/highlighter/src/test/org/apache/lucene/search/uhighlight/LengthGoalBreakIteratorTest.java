begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|postingshighlight
operator|.
name|CustomSeparatorBreakIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|QueryBuilder
import|;
end_import

begin_class
DECL|class|LengthGoalBreakIteratorTest
specifier|public
class|class
name|LengthGoalBreakIteratorTest
extends|extends
name|LuceneTestCase
block|{
DECL|field|FIELD
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"body"
decl_stmt|;
comment|// We test LengthGoalBreakIterator as it is used by the UnifiedHighlighter instead of directly, because it is
comment|//  not a general purpose BreakIterator.  A unit test of it directly wouldn't give as much confidence.
DECL|field|analyzer
specifier|private
specifier|final
name|Analyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//whitespace, punctuation, lowercase
comment|// We do a '.' BreakIterator and test varying the length goal.
comment|//                      0         1
comment|//                      01234567890123456789
DECL|field|content
specifier|final
name|String
name|content
init|=
literal|"Aa bb. Cc dd. Ee ff"
decl_stmt|;
DECL|method|testTargetLen
specifier|public
name|void
name|testTargetLen
parameter_list|()
throws|throws
name|IOException
block|{
comment|// "goal" means target length goal to find closest break
comment|// at first word:
name|Query
name|query
init|=
name|query
argument_list|(
literal|"aa"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"almost two sent"
argument_list|,
literal|"<b>Aa</b> bb."
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barely two sent"
argument_list|,
literal|"<b>Aa</b> bb. Cc dd."
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"long goal"
argument_list|,
literal|"<b>Aa</b> bb. Cc dd. Ee ff"
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|17
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// at some word not at start of passage
name|query
operator|=
name|query
argument_list|(
literal|"dd"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"short goal"
argument_list|,
literal|" Cc<b>dd</b>."
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"almost two sent"
argument_list|,
literal|" Cc<b>dd</b>."
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barely two sent"
argument_list|,
literal|" Cc<b>dd</b>. Ee ff"
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|11
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"long goal"
argument_list|,
literal|" Cc<b>dd</b>. Ee ff"
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|12
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMinLen
specifier|public
name|void
name|testMinLen
parameter_list|()
throws|throws
name|IOException
block|{
comment|// minLen mode is simpler than targetLen... just test a few cases
name|Query
name|query
init|=
name|query
argument_list|(
literal|"dd"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"almost two sent"
argument_list|,
literal|" Cc<b>dd</b>."
argument_list|,
name|highlightMinLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"barely two sent"
argument_list|,
literal|" Cc<b>dd</b>. Ee ff"
argument_list|,
name|highlightMinLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|7
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDefaultSummaryTargetLen
specifier|public
name|void
name|testDefaultSummaryTargetLen
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|query
init|=
name|query
argument_list|(
literal|"zz"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Aa bb."
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//< 10
name|assertEquals
argument_list|(
literal|"Aa bb. Cc dd."
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|10
operator|+
literal|6
argument_list|)
argument_list|)
expr_stmt|;
comment|// cusp of adding 3rd sentence
name|assertEquals
argument_list|(
literal|"Aa bb. Cc dd. Ee ff"
argument_list|,
name|highlightClosestToLen
argument_list|(
name|content
argument_list|,
name|query
argument_list|,
literal|17
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//>= 14
block|}
DECL|method|query
specifier|private
name|Query
name|query
parameter_list|(
name|String
name|qStr
parameter_list|)
block|{
return|return
operator|new
name|QueryBuilder
argument_list|(
name|analyzer
argument_list|)
operator|.
name|createBooleanQuery
argument_list|(
name|FIELD
argument_list|,
name|qStr
argument_list|)
return|;
block|}
DECL|method|highlightClosestToLen
specifier|private
name|String
name|highlightClosestToLen
parameter_list|(
name|String
name|content
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|lengthGoal
parameter_list|)
throws|throws
name|IOException
block|{
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
literal|null
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setBreakIterator
argument_list|(
parameter_list|()
lambda|->
name|LengthGoalBreakIterator
operator|.
name|createClosestToLength
argument_list|(
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|lengthGoal
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
name|FIELD
argument_list|,
name|query
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
DECL|method|highlightMinLen
specifier|private
name|String
name|highlightMinLen
parameter_list|(
name|String
name|content
parameter_list|,
name|Query
name|query
parameter_list|,
name|int
name|lengthGoal
parameter_list|)
throws|throws
name|IOException
block|{
comment|// differs from above only by "createMinLength"
name|UnifiedHighlighter
name|highlighter
init|=
operator|new
name|UnifiedHighlighter
argument_list|(
literal|null
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|highlighter
operator|.
name|setBreakIterator
argument_list|(
parameter_list|()
lambda|->
name|LengthGoalBreakIterator
operator|.
name|createMinLength
argument_list|(
operator|new
name|CustomSeparatorBreakIterator
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|lengthGoal
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|highlighter
operator|.
name|highlightWithoutSearcher
argument_list|(
name|FIELD
argument_list|,
name|query
argument_list|,
name|content
argument_list|,
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

