begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * Holds the term&amp; PostingsEnum, and info for tracking the occurrences of a term within the text.  * It is advanced with the underlying postings and is placed in a priority queue by highlightOffsetsEnums  * based on the start offset.  *  * @lucene.internal  */
end_comment

begin_class
DECL|class|OffsetsEnum
specifier|public
class|class
name|OffsetsEnum
implements|implements
name|Comparable
argument_list|<
name|OffsetsEnum
argument_list|>
implements|,
name|Closeable
block|{
DECL|field|term
specifier|private
specifier|final
name|BytesRef
name|term
decl_stmt|;
DECL|field|postingsEnum
specifier|final
name|PostingsEnum
name|postingsEnum
decl_stmt|;
comment|// with offsets
DECL|field|weight
name|float
name|weight
decl_stmt|;
comment|// set once in highlightOffsetsEnums
DECL|field|pos
specifier|private
name|int
name|pos
init|=
literal|0
decl_stmt|;
comment|// the occurrence counter of this term within the text being highlighted.
DECL|method|OffsetsEnum
specifier|public
name|OffsetsEnum
parameter_list|(
name|BytesRef
name|term
parameter_list|,
name|PostingsEnum
name|postingsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|term
operator|=
name|term
expr_stmt|;
comment|// can be null
name|this
operator|.
name|postingsEnum
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|postingsEnum
argument_list|)
expr_stmt|;
block|}
comment|// note: the ordering clearly changes as the postings enum advances
annotation|@
name|Override
DECL|method|compareTo
specifier|public
name|int
name|compareTo
parameter_list|(
name|OffsetsEnum
name|other
parameter_list|)
block|{
try|try
block|{
name|int
name|cmp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|startOffset
argument_list|()
argument_list|,
name|other
operator|.
name|startOffset
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
comment|// vast majority of the time we return here.
block|}
if|if
condition|(
name|this
operator|.
name|term
operator|==
literal|null
operator|||
name|other
operator|.
name|term
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|term
operator|==
literal|null
operator|&&
name|other
operator|.
name|term
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|term
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
comment|// put "this" (wildcard mtq enum) last
block|}
else|else
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
return|return
name|term
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|term
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
DECL|method|getTerm
name|BytesRef
name|getTerm
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO TokenStreamOffsetStrategy could override OffsetsEnum; then remove this hack here
return|return
name|term
operator|!=
literal|null
condition|?
name|term
else|:
name|postingsEnum
operator|.
name|getPayload
argument_list|()
return|;
comment|// abusing payload like this is a total hack!
block|}
DECL|method|hasMorePositions
name|boolean
name|hasMorePositions
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|pos
operator|<
name|postingsEnum
operator|.
name|freq
argument_list|()
return|;
block|}
DECL|method|nextPosition
name|void
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
assert|assert
name|hasMorePositions
argument_list|()
assert|;
name|pos
operator|++
expr_stmt|;
name|postingsEnum
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
block|}
DECL|method|startOffset
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|postingsEnum
operator|.
name|startOffset
argument_list|()
return|;
block|}
DECL|method|endOffset
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|postingsEnum
operator|.
name|endOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
comment|// TODO TokenStreamOffsetStrategy could override OffsetsEnum; then this base impl would be no-op.
if|if
condition|(
name|postingsEnum
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|postingsEnum
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

