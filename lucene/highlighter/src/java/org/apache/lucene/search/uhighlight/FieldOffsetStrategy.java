begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Terms
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|Spans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CharsRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import

begin_comment
comment|/**  * Ultimately returns a list of {@link OffsetsEnum} yielding potentially highlightable words in the text.  Needs  * information about the query up front.  *  * @lucene.internal  */
end_comment

begin_class
DECL|class|FieldOffsetStrategy
specifier|public
specifier|abstract
class|class
name|FieldOffsetStrategy
block|{
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|phraseHelper
specifier|protected
specifier|final
name|PhraseHelper
name|phraseHelper
decl_stmt|;
comment|// Query: position-sensitive information TODO: rename
DECL|field|terms
specifier|protected
specifier|final
name|BytesRef
index|[]
name|terms
decl_stmt|;
comment|// Query: free-standing terms
DECL|field|automata
specifier|protected
specifier|final
name|CharacterRunAutomaton
index|[]
name|automata
decl_stmt|;
comment|// Query: free-standing wildcards (multi-term query)
DECL|method|FieldOffsetStrategy
specifier|public
name|FieldOffsetStrategy
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
index|[]
name|queryTerms
parameter_list|,
name|PhraseHelper
name|phraseHelper
parameter_list|,
name|CharacterRunAutomaton
index|[]
name|automata
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|terms
operator|=
name|queryTerms
expr_stmt|;
name|this
operator|.
name|phraseHelper
operator|=
name|phraseHelper
expr_stmt|;
name|this
operator|.
name|automata
operator|=
name|automata
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getOffsetSource
specifier|public
specifier|abstract
name|UnifiedHighlighter
operator|.
name|OffsetSource
name|getOffsetSource
parameter_list|()
function_decl|;
comment|/**    * The primary method -- return offsets for highlightable words in the specified document.    * IMPORTANT: remember to close them all.    */
DECL|method|getOffsetsEnums
specifier|public
specifier|abstract
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|getOffsetsEnums
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
function_decl|;
DECL|method|createOffsetsEnumsFromReader
specifier|protected
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|createOffsetsEnumsFromReader
parameter_list|(
name|LeafReader
name|leafReader
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Terms
name|termsIndex
init|=
name|leafReader
operator|.
name|terms
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|termsIndex
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
comment|// For strict positions, get a Map of term to Spans:
comment|//    note: ScriptPhraseHelper.NONE does the right thing for these method calls
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Spans
argument_list|>
name|strictPhrasesTermToSpans
init|=
name|phraseHelper
operator|.
name|getTermToSpans
argument_list|(
name|leafReader
argument_list|,
name|doc
argument_list|)
decl_stmt|;
comment|// Usually simply wraps terms in a List; but if willRewrite() then can be expanded
specifier|final
name|List
argument_list|<
name|BytesRef
argument_list|>
name|sourceTerms
init|=
name|phraseHelper
operator|.
name|expandTermsIfRewrite
argument_list|(
name|terms
argument_list|,
name|strictPhrasesTermToSpans
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|offsetsEnums
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|sourceTerms
operator|.
name|size
argument_list|()
operator|+
name|automata
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// Handle sourceTerms:
if|if
condition|(
operator|!
name|sourceTerms
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TermsEnum
name|termsEnum
init|=
name|termsIndex
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|//does not return null
for|for
control|(
name|BytesRef
name|term
range|:
name|sourceTerms
control|)
block|{
if|if
condition|(
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|PostingsEnum
name|postingsEnum
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
decl_stmt|;
if|if
condition|(
name|postingsEnum
operator|==
literal|null
condition|)
block|{
comment|// no offsets or positions available
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field '"
operator|+
name|field
operator|+
literal|"' was indexed without offsets, cannot highlight"
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|==
name|postingsEnum
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
condition|)
block|{
comment|// now it's positioned, although may be exhausted
name|postingsEnum
operator|=
name|phraseHelper
operator|.
name|filterPostings
argument_list|(
name|term
argument_list|,
name|postingsEnum
argument_list|,
name|strictPhrasesTermToSpans
operator|.
name|get
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|postingsEnum
operator|!=
literal|null
condition|)
block|{
name|offsetsEnums
operator|.
name|add
argument_list|(
operator|new
name|OffsetsEnum
argument_list|(
name|term
argument_list|,
name|postingsEnum
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Handle automata
if|if
condition|(
name|automata
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|offsetsEnums
operator|.
name|addAll
argument_list|(
name|createAutomataOffsetsFromTerms
argument_list|(
name|termsIndex
argument_list|,
name|doc
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|offsetsEnums
return|;
block|}
DECL|method|createAutomataOffsetsFromTerms
specifier|protected
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|createAutomataOffsetsFromTerms
parameter_list|(
name|Terms
name|termsIndex
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|PostingsEnum
argument_list|>
argument_list|>
name|automataPostings
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|automata
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|automata
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|automataPostings
operator|.
name|add
argument_list|(
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|TermsEnum
name|termsEnum
init|=
name|termsIndex
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|BytesRef
name|term
decl_stmt|;
name|CharsRefBuilder
name|refBuilder
init|=
operator|new
name|CharsRefBuilder
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|term
operator|=
name|termsEnum
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|automata
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CharacterRunAutomaton
name|automaton
init|=
name|automata
index|[
name|i
index|]
decl_stmt|;
name|refBuilder
operator|.
name|copyUTF8Bytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|automaton
operator|.
name|run
argument_list|(
name|refBuilder
operator|.
name|chars
argument_list|()
argument_list|,
literal|0
argument_list|,
name|refBuilder
operator|.
name|length
argument_list|()
argument_list|)
condition|)
block|{
name|PostingsEnum
name|postings
init|=
name|termsEnum
operator|.
name|postings
argument_list|(
literal|null
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
name|postings
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
condition|)
block|{
name|automataPostings
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|add
argument_list|(
name|postings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|offsetsEnums
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|automata
operator|.
name|length
argument_list|)
decl_stmt|;
comment|//will be at most this long
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|automata
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|CharacterRunAutomaton
name|automaton
init|=
name|automata
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|PostingsEnum
argument_list|>
name|postingsEnums
init|=
name|automataPostings
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|int
name|size
init|=
name|postingsEnums
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
comment|//only add if we have offsets
name|BytesRef
name|wildcardTerm
init|=
operator|new
name|BytesRef
argument_list|(
name|automaton
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|size
operator|==
literal|1
condition|)
block|{
comment|//don't wrap in a composite if there's only one OffsetsEnum
name|offsetsEnums
operator|.
name|add
argument_list|(
operator|new
name|OffsetsEnum
argument_list|(
name|wildcardTerm
argument_list|,
name|postingsEnums
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|offsetsEnums
operator|.
name|add
argument_list|(
operator|new
name|OffsetsEnum
argument_list|(
name|wildcardTerm
argument_list|,
operator|new
name|CompositeOffsetsPostingsEnum
argument_list|(
name|postingsEnums
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|offsetsEnums
return|;
block|}
block|}
end_class

end_unit

