begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|CharacterIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|StringCharacterIterator
import|;
end_import

begin_comment
comment|/**  * Virtually slices the text on both sides of every occurrence of the specified character. If the slice is 0-length  * which happens for adjacent slice characters or when they are at the beginning or end, that character is reported  * as a boundary.  * For every slice between the specified characters, it is further processed with a specified  * BreakIterator. A consequence is that the enclosed BreakIterator will never "see" the splitting character.  *<br>  *<em>Note: {@link #setText(CharacterIterator)} is unsupported. Use the string version.</em>  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|SplittingBreakIterator
specifier|public
class|class
name|SplittingBreakIterator
extends|extends
name|BreakIterator
block|{
DECL|field|baseIter
specifier|private
specifier|final
name|BreakIterator
name|baseIter
decl_stmt|;
DECL|field|sliceChar
specifier|private
specifier|final
name|char
name|sliceChar
decl_stmt|;
DECL|field|text
specifier|private
name|String
name|text
decl_stmt|;
DECL|field|sliceStartIdx
specifier|private
name|int
name|sliceStartIdx
decl_stmt|;
DECL|field|sliceEndIdx
specifier|private
name|int
name|sliceEndIdx
decl_stmt|;
DECL|field|current
specifier|private
name|int
name|current
decl_stmt|;
DECL|method|SplittingBreakIterator
specifier|public
name|SplittingBreakIterator
parameter_list|(
name|BreakIterator
name|baseIter
parameter_list|,
name|char
name|sliceChar
parameter_list|)
block|{
name|this
operator|.
name|baseIter
operator|=
name|baseIter
expr_stmt|;
name|this
operator|.
name|sliceChar
operator|=
name|sliceChar
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|CharacterIterator
name|newText
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"unexpected"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|setText
specifier|public
name|void
name|setText
parameter_list|(
name|String
name|newText
parameter_list|)
block|{
name|this
operator|.
name|text
operator|=
name|newText
expr_stmt|;
name|first
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getText
specifier|public
name|CharacterIterator
name|getText
parameter_list|()
block|{
name|StringCharacterIterator
name|charIter
init|=
operator|new
name|StringCharacterIterator
argument_list|(
name|text
argument_list|)
decl_stmt|;
comment|// API doesn't say what the state should be but it should probably be at the current index.
name|charIter
operator|.
name|setIndex
argument_list|(
name|current
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|charIter
return|;
block|}
annotation|@
name|Override
DECL|method|current
specifier|public
name|int
name|current
parameter_list|()
block|{
assert|assert
name|current
operator|!=
name|DONE
assert|;
return|return
name|current
return|;
comment|// MUST be updated by the other methods when result isn't DONE.
block|}
annotation|@
name|Override
DECL|method|first
specifier|public
name|int
name|first
parameter_list|()
block|{
name|sliceStartIdx
operator|=
literal|0
expr_stmt|;
name|sliceEndIdx
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|sliceChar
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceEndIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceEndIdx
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|)
block|{
return|return
name|current
operator|=
name|sliceStartIdx
return|;
block|}
name|baseIter
operator|.
name|setText
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sliceStartIdx
argument_list|,
name|sliceEndIdx
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|current
argument_list|()
return|;
comment|// since setText() sets to first(), just grab current()
block|}
annotation|@
name|Override
DECL|method|last
specifier|public
name|int
name|last
parameter_list|()
block|{
name|sliceEndIdx
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|sliceStartIdx
operator|=
name|text
operator|.
name|lastIndexOf
argument_list|(
name|sliceChar
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceStartIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceStartIdx
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|sliceStartIdx
operator|++
expr_stmt|;
comment|//past sliceChar
block|}
if|if
condition|(
name|sliceEndIdx
operator|==
name|sliceStartIdx
condition|)
block|{
return|return
name|current
operator|=
name|sliceEndIdx
return|;
block|}
name|baseIter
operator|.
name|setText
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sliceStartIdx
argument_list|,
name|sliceEndIdx
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|last
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|()
block|{
name|int
name|prevCurrent
init|=
name|current
decl_stmt|;
name|current
operator|=
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|?
name|DONE
else|:
name|baseIter
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|!=
name|DONE
condition|)
block|{
return|return
name|current
operator|=
name|current
operator|+
name|sliceStartIdx
return|;
block|}
if|if
condition|(
name|sliceEndIdx
operator|>=
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
name|current
operator|=
name|prevCurrent
expr_stmt|;
comment|//keep current where it is
return|return
name|DONE
return|;
block|}
name|sliceStartIdx
operator|=
name|sliceEndIdx
operator|+
literal|1
expr_stmt|;
name|sliceEndIdx
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|sliceChar
argument_list|,
name|sliceStartIdx
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceEndIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceEndIdx
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|)
block|{
return|return
name|current
operator|=
name|sliceStartIdx
return|;
block|}
name|baseIter
operator|.
name|setText
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sliceStartIdx
argument_list|,
name|sliceEndIdx
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|current
argument_list|()
return|;
comment|//use current() since at first() already
block|}
annotation|@
name|Override
DECL|method|previous
specifier|public
name|int
name|previous
parameter_list|()
block|{
comment|// note: closely follows next() but reversed
name|int
name|prevCurrent
init|=
name|current
decl_stmt|;
name|current
operator|=
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|?
name|DONE
else|:
name|baseIter
operator|.
name|previous
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|!=
name|DONE
condition|)
block|{
return|return
name|current
operator|=
name|current
operator|+
name|sliceStartIdx
return|;
block|}
if|if
condition|(
name|sliceStartIdx
operator|==
literal|0
condition|)
block|{
name|current
operator|=
name|prevCurrent
expr_stmt|;
comment|//keep current where it is
return|return
name|DONE
return|;
block|}
name|sliceEndIdx
operator|=
name|sliceStartIdx
operator|-
literal|1
expr_stmt|;
name|sliceStartIdx
operator|=
name|text
operator|.
name|lastIndexOf
argument_list|(
name|sliceChar
argument_list|,
name|sliceEndIdx
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceStartIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceStartIdx
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|sliceStartIdx
operator|++
expr_stmt|;
comment|//past sliceChar
block|}
if|if
condition|(
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|)
block|{
return|return
name|current
operator|=
name|sliceStartIdx
return|;
block|}
name|baseIter
operator|.
name|setText
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sliceStartIdx
argument_list|,
name|sliceEndIdx
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|last
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|following
specifier|public
name|int
name|following
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
comment|// if the offset is not in this slice, update the slice
if|if
condition|(
name|offset
operator|+
literal|1
operator|<
name|sliceStartIdx
operator|||
name|offset
operator|+
literal|1
operator|>
name|sliceEndIdx
condition|)
block|{
if|if
condition|(
name|offset
operator|==
name|text
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// DONE condition
name|last
argument_list|()
expr_stmt|;
comment|// because https://bugs.openjdk.java.net/browse/JDK-8015110
return|return
name|DONE
return|;
block|}
name|sliceStartIdx
operator|=
name|text
operator|.
name|lastIndexOf
argument_list|(
name|sliceChar
argument_list|,
name|offset
argument_list|)
expr_stmt|;
comment|//no +1
if|if
condition|(
name|sliceStartIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceStartIdx
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|sliceStartIdx
operator|++
expr_stmt|;
comment|//move past separator
block|}
name|sliceEndIdx
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|sliceChar
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|offset
operator|+
literal|1
argument_list|,
name|sliceStartIdx
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceEndIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceEndIdx
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|sliceStartIdx
operator|!=
name|sliceEndIdx
condition|)
block|{
comment|//otherwise, adjacent separator or separator at end
name|baseIter
operator|.
name|setText
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sliceStartIdx
argument_list|,
name|sliceEndIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// lookup following() in this slice:
if|if
condition|(
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|)
block|{
return|return
name|current
operator|=
name|offset
operator|+
literal|1
return|;
block|}
else|else
block|{
comment|// note: following() can never be first() if the first character is a boundary (it usually is).
comment|//   So we have to check if we should call first() instead of following():
if|if
condition|(
name|offset
operator|==
name|sliceStartIdx
operator|-
literal|1
condition|)
block|{
comment|// the first boundary following this offset is the very first boundary in this slice
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|first
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|following
argument_list|(
name|offset
operator|-
name|sliceStartIdx
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|preceding
specifier|public
name|int
name|preceding
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
comment|// note: closely follows following() but reversed
if|if
condition|(
name|offset
operator|-
literal|1
operator|<
name|sliceStartIdx
operator|||
name|offset
operator|-
literal|1
operator|>
name|sliceEndIdx
condition|)
block|{
if|if
condition|(
name|offset
operator|==
literal|0
condition|)
block|{
comment|// DONE condition
name|first
argument_list|()
expr_stmt|;
comment|// because https://bugs.openjdk.java.net/browse/JDK-8015110
return|return
name|DONE
return|;
block|}
name|sliceEndIdx
operator|=
name|text
operator|.
name|indexOf
argument_list|(
name|sliceChar
argument_list|,
name|offset
argument_list|)
expr_stmt|;
comment|//no -1
if|if
condition|(
name|sliceEndIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceEndIdx
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|sliceStartIdx
operator|=
name|text
operator|.
name|lastIndexOf
argument_list|(
name|sliceChar
argument_list|,
name|offset
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|sliceStartIdx
operator|==
operator|-
literal|1
condition|)
block|{
name|sliceStartIdx
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|sliceStartIdx
operator|=
name|Math
operator|.
name|min
argument_list|(
name|sliceStartIdx
operator|+
literal|1
argument_list|,
name|sliceEndIdx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sliceStartIdx
operator|!=
name|sliceEndIdx
condition|)
block|{
comment|//otherwise, adjacent separator or separator at end
name|baseIter
operator|.
name|setText
argument_list|(
name|text
operator|.
name|substring
argument_list|(
name|sliceStartIdx
argument_list|,
name|sliceEndIdx
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// lookup preceding() in this slice:
if|if
condition|(
name|sliceStartIdx
operator|==
name|sliceEndIdx
condition|)
block|{
return|return
name|current
operator|=
name|offset
operator|-
literal|1
return|;
block|}
else|else
block|{
comment|// note: preceding() can never be last() if the last character is a boundary (it usually is).
comment|//   So we have to check if we should call last() instead of preceding():
if|if
condition|(
name|offset
operator|==
name|sliceEndIdx
operator|+
literal|1
condition|)
block|{
comment|// the last boundary preceding this offset is the very last boundary in this slice
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|last
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|current
operator|=
name|sliceStartIdx
operator|+
name|baseIter
operator|.
name|preceding
argument_list|(
name|offset
operator|-
name|sliceStartIdx
argument_list|)
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|int
name|next
parameter_list|(
name|int
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|<
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|-
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|previous
argument_list|()
operator|==
name|DONE
condition|)
block|{
return|return
name|DONE
return|;
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|next
argument_list|()
operator|==
name|DONE
condition|)
block|{
return|return
name|DONE
return|;
block|}
block|}
block|}
return|return
name|current
argument_list|()
return|;
block|}
block|}
end_class

end_unit

