begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|BreakIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Internal highlighter abstraction that operates on a per field basis.  *  * @lucene.internal  */
end_comment

begin_class
DECL|class|FieldHighlighter
specifier|public
class|class
name|FieldHighlighter
block|{
DECL|field|field
specifier|protected
specifier|final
name|String
name|field
decl_stmt|;
DECL|field|fieldOffsetStrategy
specifier|protected
specifier|final
name|FieldOffsetStrategy
name|fieldOffsetStrategy
decl_stmt|;
DECL|field|breakIterator
specifier|protected
specifier|final
name|BreakIterator
name|breakIterator
decl_stmt|;
comment|// note: stateful!
DECL|field|passageScorer
specifier|protected
specifier|final
name|PassageScorer
name|passageScorer
decl_stmt|;
DECL|field|maxPassages
specifier|protected
specifier|final
name|int
name|maxPassages
decl_stmt|;
DECL|field|maxNoHighlightPassages
specifier|protected
specifier|final
name|int
name|maxNoHighlightPassages
decl_stmt|;
DECL|field|passageFormatter
specifier|protected
specifier|final
name|PassageFormatter
name|passageFormatter
decl_stmt|;
DECL|method|FieldHighlighter
specifier|public
name|FieldHighlighter
parameter_list|(
name|String
name|field
parameter_list|,
name|FieldOffsetStrategy
name|fieldOffsetStrategy
parameter_list|,
name|BreakIterator
name|breakIterator
parameter_list|,
name|PassageScorer
name|passageScorer
parameter_list|,
name|int
name|maxPassages
parameter_list|,
name|int
name|maxNoHighlightPassages
parameter_list|,
name|PassageFormatter
name|passageFormatter
parameter_list|)
block|{
name|this
operator|.
name|field
operator|=
name|field
expr_stmt|;
name|this
operator|.
name|fieldOffsetStrategy
operator|=
name|fieldOffsetStrategy
expr_stmt|;
name|this
operator|.
name|breakIterator
operator|=
name|breakIterator
expr_stmt|;
name|this
operator|.
name|passageScorer
operator|=
name|passageScorer
expr_stmt|;
name|this
operator|.
name|maxPassages
operator|=
name|maxPassages
expr_stmt|;
name|this
operator|.
name|maxNoHighlightPassages
operator|=
name|maxNoHighlightPassages
expr_stmt|;
name|this
operator|.
name|passageFormatter
operator|=
name|passageFormatter
expr_stmt|;
block|}
DECL|method|getField
specifier|public
name|String
name|getField
parameter_list|()
block|{
return|return
name|field
return|;
block|}
DECL|method|getOffsetSource
specifier|public
name|UnifiedHighlighter
operator|.
name|OffsetSource
name|getOffsetSource
parameter_list|()
block|{
return|return
name|fieldOffsetStrategy
operator|.
name|getOffsetSource
argument_list|()
return|;
block|}
comment|/**    * The primary method -- highlight this doc, assuming a specific field and given this content.    */
DECL|method|highlightFieldForDoc
specifier|public
name|Object
name|highlightFieldForDoc
parameter_list|(
name|IndexReader
name|reader
parameter_list|,
name|int
name|docId
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO accept LeafReader instead?
comment|// note: it'd be nice to accept a CharSequence for content, but we need a CharacterIterator impl for it.
if|if
condition|(
name|content
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
comment|// nothing to do
block|}
name|breakIterator
operator|.
name|setText
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|offsetsEnums
init|=
name|fieldOffsetStrategy
operator|.
name|getOffsetsEnums
argument_list|(
name|reader
argument_list|,
name|docId
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|Passage
index|[]
name|passages
decl_stmt|;
try|try
block|{
comment|// Highlight the offsetsEnum list against the content to produce Passages.
name|passages
operator|=
name|highlightOffsetsEnums
argument_list|(
name|offsetsEnums
argument_list|)
expr_stmt|;
comment|// and breakIterator& scorer
block|}
finally|finally
block|{
comment|// Ensure closeable resources get closed
name|IOUtils
operator|.
name|close
argument_list|(
name|offsetsEnums
argument_list|)
expr_stmt|;
block|}
comment|// Format the resulting Passages.
if|if
condition|(
name|passages
operator|.
name|length
operator|==
literal|0
condition|)
block|{
comment|// no passages were returned, so ask for a default summary
name|passages
operator|=
name|getSummaryPassagesNoHighlight
argument_list|(
name|maxNoHighlightPassages
operator|==
operator|-
literal|1
condition|?
name|maxPassages
else|:
name|maxNoHighlightPassages
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|passages
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|passageFormatter
operator|.
name|format
argument_list|(
name|passages
argument_list|,
name|content
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**    * Called to summarize a document when no highlights were found.    * By default this just returns the first    * {@link #maxPassages} sentences; subclasses can override to customize.    * The state of {@link #breakIterator} should be at the beginning.    */
DECL|method|getSummaryPassagesNoHighlight
specifier|protected
name|Passage
index|[]
name|getSummaryPassagesNoHighlight
parameter_list|(
name|int
name|maxPassages
parameter_list|)
block|{
assert|assert
name|breakIterator
operator|.
name|current
argument_list|()
operator|==
name|breakIterator
operator|.
name|first
argument_list|()
assert|;
name|List
argument_list|<
name|Passage
argument_list|>
name|passages
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|maxPassages
argument_list|,
literal|10
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|breakIterator
operator|.
name|current
argument_list|()
decl_stmt|;
assert|assert
name|pos
operator|==
literal|0
assert|;
while|while
condition|(
name|passages
operator|.
name|size
argument_list|()
operator|<
name|maxPassages
condition|)
block|{
name|int
name|next
init|=
name|breakIterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|==
name|BreakIterator
operator|.
name|DONE
condition|)
block|{
break|break;
block|}
name|Passage
name|passage
init|=
operator|new
name|Passage
argument_list|()
decl_stmt|;
name|passage
operator|.
name|setScore
argument_list|(
name|Float
operator|.
name|NaN
argument_list|)
expr_stmt|;
name|passage
operator|.
name|setStartOffset
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|passage
operator|.
name|setEndOffset
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|passages
operator|.
name|add
argument_list|(
name|passage
argument_list|)
expr_stmt|;
name|pos
operator|=
name|next
expr_stmt|;
block|}
return|return
name|passages
operator|.
name|toArray
argument_list|(
operator|new
name|Passage
index|[
name|passages
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|// algorithm: treat sentence snippets as miniature documents
comment|// we can intersect these with the postings lists via BreakIterator.preceding(offset),s
comment|// score each sentence as norm(sentenceStartOffset) * sum(weight * tf(freq))
DECL|method|highlightOffsetsEnums
specifier|protected
name|Passage
index|[]
name|highlightOffsetsEnums
parameter_list|(
name|List
argument_list|<
name|OffsetsEnum
argument_list|>
name|offsetsEnums
parameter_list|)
throws|throws
name|IOException
block|{
name|PassageScorer
name|scorer
init|=
name|passageScorer
decl_stmt|;
name|BreakIterator
name|breakIterator
init|=
name|this
operator|.
name|breakIterator
decl_stmt|;
specifier|final
name|int
name|contentLength
init|=
name|breakIterator
operator|.
name|getText
argument_list|()
operator|.
name|getEndIndex
argument_list|()
decl_stmt|;
name|PriorityQueue
argument_list|<
name|OffsetsEnum
argument_list|>
name|offsetsEnumQueue
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
name|offsetsEnums
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|OffsetsEnum
name|off
range|:
name|offsetsEnums
control|)
block|{
name|off
operator|.
name|weight
operator|=
name|scorer
operator|.
name|weight
argument_list|(
name|contentLength
argument_list|,
name|off
operator|.
name|postingsEnum
operator|.
name|freq
argument_list|()
argument_list|)
expr_stmt|;
name|off
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
comment|// go to first position
name|offsetsEnumQueue
operator|.
name|add
argument_list|(
name|off
argument_list|)
expr_stmt|;
block|}
name|offsetsEnumQueue
operator|.
name|add
argument_list|(
operator|new
name|OffsetsEnum
argument_list|(
literal|null
argument_list|,
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// a sentinel for termination
name|PriorityQueue
argument_list|<
name|Passage
argument_list|>
name|passageQueue
init|=
operator|new
name|PriorityQueue
argument_list|<>
argument_list|(
name|Math
operator|.
name|min
argument_list|(
literal|64
argument_list|,
name|maxPassages
operator|+
literal|1
argument_list|)
argument_list|,
parameter_list|(
name|left
parameter_list|,
name|right
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|left
operator|.
name|getScore
argument_list|()
operator|<
name|right
operator|.
name|getScore
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|left
operator|.
name|getScore
argument_list|()
operator|>
name|right
operator|.
name|getScore
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|left
operator|.
name|getStartOffset
argument_list|()
operator|-
name|right
operator|.
name|getStartOffset
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|Passage
name|passage
init|=
operator|new
name|Passage
argument_list|()
decl_stmt|;
comment|// the current passage in-progress.  Will either get reset or added to queue.
name|OffsetsEnum
name|off
decl_stmt|;
while|while
condition|(
operator|(
name|off
operator|=
name|offsetsEnumQueue
operator|.
name|poll
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|int
name|start
init|=
name|off
operator|.
name|startOffset
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field '"
operator|+
name|field
operator|+
literal|"' was indexed without offsets, cannot highlight"
argument_list|)
throw|;
block|}
name|int
name|end
init|=
name|off
operator|.
name|endOffset
argument_list|()
decl_stmt|;
comment|// LUCENE-5166: this hit would span the content limit... however more valid
comment|// hits may exist (they are sorted by start). so we pretend like we never
comment|// saw this term, it won't cause a passage to be added to passageQueue or anything.
assert|assert
name|EMPTY
operator|.
name|startOffset
argument_list|()
operator|==
name|Integer
operator|.
name|MAX_VALUE
assert|;
if|if
condition|(
name|start
argument_list|<
name|contentLength
operator|&&
name|end
argument_list|>
name|contentLength
condition|)
block|{
continue|continue;
block|}
comment|// See if this term should be part of a new passage.
if|if
condition|(
name|start
operator|>=
name|passage
operator|.
name|getEndOffset
argument_list|()
condition|)
block|{
if|if
condition|(
name|passage
operator|.
name|getStartOffset
argument_list|()
operator|>=
literal|0
condition|)
block|{
comment|// true if this passage has terms; otherwise couldn't find any (yet)
comment|// finalize passage
name|passage
operator|.
name|setScore
argument_list|(
name|passage
operator|.
name|getScore
argument_list|()
operator|*
name|scorer
operator|.
name|norm
argument_list|(
name|passage
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// new sentence: first add 'passage' to queue
if|if
condition|(
name|passageQueue
operator|.
name|size
argument_list|()
operator|==
name|maxPassages
operator|&&
name|passage
operator|.
name|getScore
argument_list|()
operator|<
name|passageQueue
operator|.
name|peek
argument_list|()
operator|.
name|getScore
argument_list|()
condition|)
block|{
name|passage
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// can't compete, just reset it
block|}
else|else
block|{
name|passageQueue
operator|.
name|offer
argument_list|(
name|passage
argument_list|)
expr_stmt|;
if|if
condition|(
name|passageQueue
operator|.
name|size
argument_list|()
operator|>
name|maxPassages
condition|)
block|{
name|passage
operator|=
name|passageQueue
operator|.
name|poll
argument_list|()
expr_stmt|;
name|passage
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|passage
operator|=
operator|new
name|Passage
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// if we exceed limit, we are done
if|if
condition|(
name|start
operator|>=
name|contentLength
condition|)
block|{
break|break;
block|}
comment|// advance breakIterator
name|passage
operator|.
name|setStartOffset
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|breakIterator
operator|.
name|preceding
argument_list|(
name|start
operator|+
literal|1
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|passage
operator|.
name|setEndOffset
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|breakIterator
operator|.
name|following
argument_list|(
name|start
argument_list|)
argument_list|,
name|contentLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Add this term to the passage.
name|int
name|tf
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|tf
operator|++
expr_stmt|;
name|BytesRef
name|term
init|=
name|off
operator|.
name|getTerm
argument_list|()
decl_stmt|;
comment|// a reference; safe to refer to
assert|assert
name|term
operator|!=
literal|null
assert|;
name|passage
operator|.
name|addMatch
argument_list|(
name|start
argument_list|,
name|end
argument_list|,
name|term
argument_list|)
expr_stmt|;
comment|// see if there are multiple occurrences of this term in this passage. If so, add them.
if|if
condition|(
operator|!
name|off
operator|.
name|hasMorePositions
argument_list|()
condition|)
block|{
break|break;
comment|// No more in the entire text. Already removed from pq; move on
block|}
name|off
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
name|start
operator|=
name|off
operator|.
name|startOffset
argument_list|()
expr_stmt|;
name|end
operator|=
name|off
operator|.
name|endOffset
argument_list|()
expr_stmt|;
if|if
condition|(
name|start
operator|>=
name|passage
operator|.
name|getEndOffset
argument_list|()
operator|||
name|end
operator|>
name|contentLength
condition|)
block|{
comment|// it's beyond this passage
name|offsetsEnumQueue
operator|.
name|offer
argument_list|(
name|off
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|passage
operator|.
name|setScore
argument_list|(
name|passage
operator|.
name|getScore
argument_list|()
operator|+
name|off
operator|.
name|weight
operator|*
name|scorer
operator|.
name|tf
argument_list|(
name|tf
argument_list|,
name|passage
operator|.
name|getEndOffset
argument_list|()
operator|-
name|passage
operator|.
name|getStartOffset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Passage
index|[]
name|passages
init|=
name|passageQueue
operator|.
name|toArray
argument_list|(
operator|new
name|Passage
index|[
name|passageQueue
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|Passage
name|p
range|:
name|passages
control|)
block|{
name|p
operator|.
name|sort
argument_list|()
expr_stmt|;
block|}
comment|// sort in ascending order
name|Arrays
operator|.
name|sort
argument_list|(
name|passages
argument_list|,
parameter_list|(
name|left
parameter_list|,
name|right
parameter_list|)
lambda|->
name|left
operator|.
name|getStartOffset
argument_list|()
operator|-
name|right
operator|.
name|getStartOffset
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|passages
return|;
block|}
DECL|field|EMPTY
specifier|protected
specifier|static
specifier|final
name|PostingsEnum
name|EMPTY
init|=
operator|new
name|PostingsEnum
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
decl_stmt|;
block|}
end_class

end_unit

