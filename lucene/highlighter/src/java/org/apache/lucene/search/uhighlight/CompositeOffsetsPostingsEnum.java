begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.uhighlight
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|uhighlight
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * Provides a view over several underlying PostingsEnums for the iteration of offsets on the current document only.  * It's not general purpose; the position returned is always -1 and it doesn't iterate the documents.  */
end_comment

begin_class
DECL|class|CompositeOffsetsPostingsEnum
specifier|final
class|class
name|CompositeOffsetsPostingsEnum
extends|extends
name|PostingsEnum
block|{
DECL|field|docId
specifier|private
specifier|final
name|int
name|docId
decl_stmt|;
DECL|field|freq
specifier|private
specifier|final
name|int
name|freq
decl_stmt|;
DECL|field|queue
specifier|private
specifier|final
name|PriorityQueue
argument_list|<
name|BoundsCheckingPostingsEnum
argument_list|>
name|queue
decl_stmt|;
DECL|field|firstPositionConsumed
specifier|private
name|boolean
name|firstPositionConsumed
init|=
literal|false
decl_stmt|;
comment|/**    * This class is used to ensure we don't over iterate the underlying    * postings enum by keeping track of the position relative to the    * frequency.    * Ideally this would've been an implementation of a PostingsEnum    * but it would have to delegate most methods and it seemed easier    * to just wrap the tweaked method.    */
DECL|class|BoundsCheckingPostingsEnum
specifier|private
specifier|static
specifier|final
class|class
name|BoundsCheckingPostingsEnum
block|{
DECL|field|postingsEnum
specifier|private
specifier|final
name|PostingsEnum
name|postingsEnum
decl_stmt|;
DECL|field|remainingPositions
specifier|private
name|int
name|remainingPositions
decl_stmt|;
DECL|method|BoundsCheckingPostingsEnum
name|BoundsCheckingPostingsEnum
parameter_list|(
name|PostingsEnum
name|postingsEnum
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|postingsEnum
operator|=
name|postingsEnum
expr_stmt|;
name|this
operator|.
name|remainingPositions
operator|=
name|postingsEnum
operator|.
name|freq
argument_list|()
expr_stmt|;
name|nextPosition
argument_list|()
expr_stmt|;
block|}
comment|/** Advances to the next position and returns true, or returns false if it can't. */
DECL|method|nextPosition
specifier|private
name|boolean
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|remainingPositions
operator|--
operator|>
literal|0
condition|)
block|{
name|postingsEnum
operator|.
name|nextPosition
argument_list|()
expr_stmt|;
comment|// ignore the actual position; we don't care.
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
comment|/** The provided {@link PostingsEnum}s must all be positioned to the same document, and must have offsets. */
DECL|method|CompositeOffsetsPostingsEnum
name|CompositeOffsetsPostingsEnum
parameter_list|(
name|List
argument_list|<
name|PostingsEnum
argument_list|>
name|postingsEnums
parameter_list|)
throws|throws
name|IOException
block|{
name|queue
operator|=
operator|new
name|PriorityQueue
argument_list|<
name|BoundsCheckingPostingsEnum
argument_list|>
argument_list|(
name|postingsEnums
operator|.
name|size
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|boolean
name|lessThan
parameter_list|(
name|BoundsCheckingPostingsEnum
name|a
parameter_list|,
name|BoundsCheckingPostingsEnum
name|b
parameter_list|)
block|{
try|try
block|{
return|return
name|a
operator|.
name|postingsEnum
operator|.
name|startOffset
argument_list|()
operator|<
name|b
operator|.
name|postingsEnum
operator|.
name|startOffset
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
expr_stmt|;
name|int
name|freqAdd
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PostingsEnum
name|postingsEnum
range|:
name|postingsEnums
control|)
block|{
name|queue
operator|.
name|add
argument_list|(
operator|new
name|BoundsCheckingPostingsEnum
argument_list|(
name|postingsEnum
argument_list|)
argument_list|)
expr_stmt|;
name|freqAdd
operator|+=
name|postingsEnum
operator|.
name|freq
argument_list|()
expr_stmt|;
block|}
name|freq
operator|=
name|freqAdd
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|queue
operator|.
name|top
argument_list|()
operator|.
name|postingsEnum
operator|.
name|docID
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|freq
return|;
block|}
comment|/** Advances to the next position. Always returns -1; the caller is assumed not to care for the highlighter.  */
annotation|@
name|Override
DECL|method|nextPosition
specifier|public
name|int
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|firstPositionConsumed
condition|)
block|{
name|firstPositionConsumed
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|queue
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"nextPosition called too many times"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|queue
operator|.
name|top
argument_list|()
operator|.
name|nextPosition
argument_list|()
condition|)
block|{
comment|// advance head
name|queue
operator|.
name|updateTop
argument_list|()
expr_stmt|;
comment|//the new position may be behind another postingsEnum in the queue
block|}
else|else
block|{
name|queue
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|//this postingsEnum is consumed; get rid of it. Another will take it's place.
block|}
assert|assert
name|queue
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|startOffset
specifier|public
name|int
name|startOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|queue
operator|.
name|top
argument_list|()
operator|.
name|postingsEnum
operator|.
name|startOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endOffset
specifier|public
name|int
name|endOffset
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|queue
operator|.
name|top
argument_list|()
operator|.
name|postingsEnum
operator|.
name|endOffset
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getPayload
specifier|public
name|BytesRef
name|getPayload
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|queue
operator|.
name|top
argument_list|()
operator|.
name|postingsEnum
operator|.
name|getPayload
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|1L
return|;
comment|//at most 1 doc is returned
block|}
block|}
end_class

end_unit

