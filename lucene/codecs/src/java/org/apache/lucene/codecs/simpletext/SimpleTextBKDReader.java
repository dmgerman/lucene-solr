begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.simpletext
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
operator|.
name|BKDReader
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextPointsWriter
operator|.
name|BLOCK_COUNT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextPointsWriter
operator|.
name|BLOCK_DOC_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|simpletext
operator|.
name|SimpleTextPointsWriter
operator|.
name|BLOCK_VALUE
import|;
end_import

begin_comment
comment|/** Forked from {@link BKDReader} and simplified/specialized for SimpleText's usage */
end_comment

begin_class
DECL|class|SimpleTextBKDReader
specifier|final
class|class
name|SimpleTextBKDReader
extends|extends
name|PointValues
implements|implements
name|Accountable
block|{
comment|// Packed array of byte[] holding all split values in the full binary tree:
DECL|field|splitPackedValues
specifier|final
specifier|private
name|byte
index|[]
name|splitPackedValues
decl_stmt|;
DECL|field|leafBlockFPs
specifier|final
name|long
index|[]
name|leafBlockFPs
decl_stmt|;
DECL|field|leafNodeOffset
specifier|final
specifier|private
name|int
name|leafNodeOffset
decl_stmt|;
DECL|field|numDims
specifier|final
name|int
name|numDims
decl_stmt|;
DECL|field|bytesPerDim
specifier|final
name|int
name|bytesPerDim
decl_stmt|;
DECL|field|bytesPerIndexEntry
specifier|final
name|int
name|bytesPerIndexEntry
decl_stmt|;
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|maxPointsInLeafNode
specifier|final
name|int
name|maxPointsInLeafNode
decl_stmt|;
DECL|field|minPackedValue
specifier|final
name|byte
index|[]
name|minPackedValue
decl_stmt|;
DECL|field|maxPackedValue
specifier|final
name|byte
index|[]
name|maxPackedValue
decl_stmt|;
DECL|field|pointCount
specifier|final
name|long
name|pointCount
decl_stmt|;
DECL|field|docCount
specifier|final
name|int
name|docCount
decl_stmt|;
DECL|field|version
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|packedBytesLength
specifier|protected
specifier|final
name|int
name|packedBytesLength
decl_stmt|;
DECL|method|SimpleTextBKDReader
specifier|public
name|SimpleTextBKDReader
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|int
name|bytesPerDim
parameter_list|,
name|long
index|[]
name|leafBlockFPs
parameter_list|,
name|byte
index|[]
name|splitPackedValues
parameter_list|,
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|,
name|long
name|pointCount
parameter_list|,
name|int
name|docCount
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|numDims
operator|=
name|numDims
expr_stmt|;
name|this
operator|.
name|maxPointsInLeafNode
operator|=
name|maxPointsInLeafNode
expr_stmt|;
name|this
operator|.
name|bytesPerDim
operator|=
name|bytesPerDim
expr_stmt|;
comment|// no version check here because callers of this API (SimpleText) have no back compat:
name|bytesPerIndexEntry
operator|=
name|numDims
operator|==
literal|1
condition|?
name|bytesPerDim
else|:
name|bytesPerDim
operator|+
literal|1
expr_stmt|;
name|packedBytesLength
operator|=
name|numDims
operator|*
name|bytesPerDim
expr_stmt|;
name|this
operator|.
name|leafNodeOffset
operator|=
name|leafBlockFPs
operator|.
name|length
expr_stmt|;
name|this
operator|.
name|leafBlockFPs
operator|=
name|leafBlockFPs
expr_stmt|;
name|this
operator|.
name|splitPackedValues
operator|=
name|splitPackedValues
expr_stmt|;
name|this
operator|.
name|minPackedValue
operator|=
name|minPackedValue
expr_stmt|;
name|this
operator|.
name|maxPackedValue
operator|=
name|maxPackedValue
expr_stmt|;
name|this
operator|.
name|pointCount
operator|=
name|pointCount
expr_stmt|;
name|this
operator|.
name|docCount
operator|=
name|docCount
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|SimpleTextBKDWriter
operator|.
name|VERSION_CURRENT
expr_stmt|;
assert|assert
name|minPackedValue
operator|.
name|length
operator|==
name|packedBytesLength
assert|;
assert|assert
name|maxPackedValue
operator|.
name|length
operator|==
name|packedBytesLength
assert|;
block|}
comment|/** Used to track all state for a single call to {@link #intersect}. */
DECL|class|IntersectState
specifier|public
specifier|static
specifier|final
class|class
name|IntersectState
block|{
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|scratchDocIDs
specifier|final
name|int
index|[]
name|scratchDocIDs
decl_stmt|;
DECL|field|scratchPackedValue
specifier|final
name|byte
index|[]
name|scratchPackedValue
decl_stmt|;
DECL|field|commonPrefixLengths
specifier|final
name|int
index|[]
name|commonPrefixLengths
decl_stmt|;
DECL|field|visitor
specifier|final
name|IntersectVisitor
name|visitor
decl_stmt|;
DECL|method|IntersectState
specifier|public
name|IntersectState
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|packedBytesLength
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
name|this
operator|.
name|commonPrefixLengths
operator|=
operator|new
name|int
index|[
name|numDims
index|]
expr_stmt|;
name|this
operator|.
name|scratchDocIDs
operator|=
operator|new
name|int
index|[
name|maxPointsInLeafNode
index|]
expr_stmt|;
name|this
operator|.
name|scratchPackedValue
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
block|}
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|intersect
argument_list|(
name|getIntersectState
argument_list|(
name|visitor
argument_list|)
argument_list|,
literal|1
argument_list|,
name|minPackedValue
argument_list|,
name|maxPackedValue
argument_list|)
expr_stmt|;
block|}
comment|/** Fast path: this is called when the query box fully encompasses all cells under this node. */
DECL|method|addAll
specifier|private
name|void
name|addAll
parameter_list|(
name|IntersectState
name|state
parameter_list|,
name|int
name|nodeID
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("R: addAll nodeID=" + nodeID);
if|if
condition|(
name|nodeID
operator|>=
name|leafNodeOffset
condition|)
block|{
comment|//System.out.println("ADDALL");
name|visitDocIDs
argument_list|(
name|state
operator|.
name|in
argument_list|,
name|leafBlockFPs
index|[
name|nodeID
operator|-
name|leafNodeOffset
index|]
argument_list|,
name|state
operator|.
name|visitor
argument_list|)
expr_stmt|;
comment|// TODO: we can assert that the first value here in fact matches what the index claimed?
block|}
else|else
block|{
name|addAll
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Create a new {@link IntersectState} */
DECL|method|getIntersectState
specifier|public
name|IntersectState
name|getIntersectState
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
return|return
operator|new
name|IntersectState
argument_list|(
name|in
operator|.
name|clone
argument_list|()
argument_list|,
name|numDims
argument_list|,
name|packedBytesLength
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|visitor
argument_list|)
return|;
block|}
comment|/** Visits all docIDs and packed values in a single leaf block */
DECL|method|visitLeafBlockValues
specifier|public
name|void
name|visitLeafBlockValues
parameter_list|(
name|int
name|nodeID
parameter_list|,
name|IntersectState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|leafID
init|=
name|nodeID
operator|-
name|leafNodeOffset
decl_stmt|;
comment|// Leaf node; scan and filter all points in this block:
name|int
name|count
init|=
name|readDocIDs
argument_list|(
name|state
operator|.
name|in
argument_list|,
name|leafBlockFPs
index|[
name|leafID
index|]
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|)
decl_stmt|;
comment|// Again, this time reading values and checking with the visitor
name|visitDocValues
argument_list|(
name|state
operator|.
name|commonPrefixLengths
argument_list|,
name|state
operator|.
name|scratchPackedValue
argument_list|,
name|state
operator|.
name|in
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|,
name|count
argument_list|,
name|state
operator|.
name|visitor
argument_list|)
expr_stmt|;
block|}
DECL|method|visitDocIDs
name|void
name|visitDocIDs
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|long
name|blockFP
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|blockFP
argument_list|)
expr_stmt|;
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|parseInt
argument_list|(
name|scratch
argument_list|,
name|BLOCK_COUNT
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|grow
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|parseInt
argument_list|(
name|scratch
argument_list|,
name|BLOCK_DOC_ID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readDocIDs
name|int
name|readDocIDs
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|long
name|blockFP
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|)
throws|throws
name|IOException
block|{
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|in
operator|.
name|seek
argument_list|(
name|blockFP
argument_list|)
expr_stmt|;
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|int
name|count
init|=
name|parseInt
argument_list|(
name|scratch
argument_list|,
name|BLOCK_COUNT
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|docIDs
index|[
name|i
index|]
operator|=
name|parseInt
argument_list|(
name|scratch
argument_list|,
name|BLOCK_DOC_ID
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
DECL|method|visitDocValues
name|void
name|visitDocValues
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|count
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|visitor
operator|.
name|grow
argument_list|(
name|count
argument_list|)
expr_stmt|;
comment|// NOTE: we don't do prefix coding, so we ignore commonPrefixLengths
assert|assert
name|scratchPackedValue
operator|.
name|length
operator|==
name|packedBytesLength
assert|;
name|BytesRefBuilder
name|scratch
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|BLOCK_VALUE
argument_list|)
assert|;
name|BytesRef
name|br
init|=
name|SimpleTextUtil
operator|.
name|fromBytesRefString
argument_list|(
name|stripPrefix
argument_list|(
name|scratch
argument_list|,
name|BLOCK_VALUE
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|br
operator|.
name|length
operator|==
name|packedBytesLength
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|br
operator|.
name|bytes
argument_list|,
name|br
operator|.
name|offset
argument_list|,
name|scratchPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|docIDs
index|[
name|i
index|]
argument_list|,
name|scratchPackedValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|visitCompressedDocValues
specifier|private
name|void
name|visitCompressedDocValues
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|count
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|,
name|int
name|compressedDim
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the byte at `compressedByteOffset` is compressed using run-length compression,
comment|// other suffix bytes are stored verbatim
specifier|final
name|int
name|compressedByteOffset
init|=
name|compressedDim
operator|*
name|bytesPerDim
operator|+
name|commonPrefixLengths
index|[
name|compressedDim
index|]
decl_stmt|;
name|commonPrefixLengths
index|[
name|compressedDim
index|]
operator|++
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
control|)
block|{
name|scratchPackedValue
index|[
name|compressedByteOffset
index|]
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
specifier|final
name|int
name|runLen
init|=
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|runLen
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|prefix
init|=
name|commonPrefixLengths
index|[
name|dim
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|scratchPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
operator|+
name|prefix
argument_list|,
name|bytesPerDim
operator|-
name|prefix
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|docIDs
index|[
name|i
operator|+
name|j
index|]
argument_list|,
name|scratchPackedValue
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|runLen
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|count
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Sub blocks do not add up to the expected count: "
operator|+
name|count
operator|+
literal|" != "
operator|+
name|i
argument_list|,
name|in
argument_list|)
throw|;
block|}
block|}
DECL|method|readCompressedDim
specifier|private
name|int
name|readCompressedDim
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|compressedDim
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressedDim
operator|<
operator|-
literal|1
operator|||
name|compressedDim
operator|>=
name|numDims
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Got compressedDim="
operator|+
name|compressedDim
argument_list|,
name|in
argument_list|)
throw|;
block|}
return|return
name|compressedDim
return|;
block|}
DECL|method|readCommonPrefixes
specifier|private
name|void
name|readCommonPrefixes
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|prefix
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|commonPrefixLengths
index|[
name|dim
index|]
operator|=
name|prefix
expr_stmt|;
if|if
condition|(
name|prefix
operator|>
literal|0
condition|)
block|{
name|in
operator|.
name|readBytes
argument_list|(
name|scratchPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("R: " + dim + " of " + numDims + " prefix=" + prefix);
block|}
block|}
DECL|method|intersect
specifier|private
name|void
name|intersect
parameter_list|(
name|IntersectState
name|state
parameter_list|,
name|int
name|nodeID
parameter_list|,
name|byte
index|[]
name|cellMinPacked
parameter_list|,
name|byte
index|[]
name|cellMaxPacked
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     System.out.println("\nR: intersect nodeID=" + nodeID);     for(int dim=0;dim<numDims;dim++) {       System.out.println("  dim=" + dim + "\n    cellMin=" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + "\n    cellMax=" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));     }     */
name|Relation
name|r
init|=
name|state
operator|.
name|visitor
operator|.
name|compare
argument_list|(
name|cellMinPacked
argument_list|,
name|cellMaxPacked
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
comment|// This cell is fully outside of the query shape: stop recursing
return|return;
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
comment|// This cell is fully inside of the query shape: recursively add all points in this cell without filtering
name|addAll
argument_list|(
name|state
argument_list|,
name|nodeID
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
comment|// The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering
block|}
if|if
condition|(
name|nodeID
operator|>=
name|leafNodeOffset
condition|)
block|{
comment|// TODO: we can assert that the first value here in fact matches what the index claimed?
name|int
name|leafID
init|=
name|nodeID
operator|-
name|leafNodeOffset
decl_stmt|;
comment|// In the unbalanced case it's possible the left most node only has one child:
if|if
condition|(
name|leafID
operator|<
name|leafBlockFPs
operator|.
name|length
condition|)
block|{
comment|// Leaf node; scan and filter all points in this block:
name|int
name|count
init|=
name|readDocIDs
argument_list|(
name|state
operator|.
name|in
argument_list|,
name|leafBlockFPs
index|[
name|leafID
index|]
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|)
decl_stmt|;
comment|// Again, this time reading values and checking with the visitor
name|visitDocValues
argument_list|(
name|state
operator|.
name|commonPrefixLengths
argument_list|,
name|state
operator|.
name|scratchPackedValue
argument_list|,
name|state
operator|.
name|in
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|,
name|count
argument_list|,
name|state
operator|.
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-leaf node: recurse on the split left and right nodes
name|int
name|address
init|=
name|nodeID
operator|*
name|bytesPerIndexEntry
decl_stmt|;
name|int
name|splitDim
decl_stmt|;
if|if
condition|(
name|numDims
operator|==
literal|1
condition|)
block|{
name|splitDim
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|splitDim
operator|=
name|splitPackedValues
index|[
name|address
operator|++
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
assert|assert
name|splitDim
operator|<
name|numDims
assert|;
comment|// TODO: can we alloc& reuse this up front?
name|byte
index|[]
name|splitPackedValue
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
comment|// Recurse on left sub-tree:
name|System
operator|.
name|arraycopy
argument_list|(
name|cellMaxPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValues
argument_list|,
name|address
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
argument_list|,
name|cellMinPacked
argument_list|,
name|splitPackedValue
argument_list|)
expr_stmt|;
comment|// Recurse on right sub-tree:
name|System
operator|.
name|arraycopy
argument_list|(
name|cellMinPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValues
argument_list|,
name|address
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
literal|2
operator|*
name|nodeID
operator|+
literal|1
argument_list|,
name|splitPackedValue
argument_list|,
name|cellMaxPacked
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Copies the split value for this node into the provided byte array */
DECL|method|copySplitValue
specifier|public
name|void
name|copySplitValue
parameter_list|(
name|int
name|nodeID
parameter_list|,
name|byte
index|[]
name|splitPackedValue
parameter_list|)
block|{
name|int
name|address
init|=
name|nodeID
operator|*
name|bytesPerIndexEntry
decl_stmt|;
name|int
name|splitDim
decl_stmt|;
if|if
condition|(
name|numDims
operator|==
literal|1
condition|)
block|{
name|splitDim
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|splitDim
operator|=
name|splitPackedValues
index|[
name|address
operator|++
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
assert|assert
name|splitDim
operator|<
name|numDims
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValues
argument_list|,
name|address
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|splitPackedValues
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|leafBlockFPs
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinPackedValue
specifier|public
name|byte
index|[]
name|getMinPackedValue
parameter_list|()
block|{
return|return
name|minPackedValue
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxPackedValue
specifier|public
name|byte
index|[]
name|getMaxPackedValue
parameter_list|()
block|{
return|return
name|maxPackedValue
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDimensions
specifier|public
name|int
name|getNumDimensions
parameter_list|()
block|{
return|return
name|numDims
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesPerDimension
specifier|public
name|int
name|getBytesPerDimension
parameter_list|()
block|{
return|return
name|bytesPerDim
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|pointCount
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
DECL|method|isLeafNode
specifier|public
name|boolean
name|isLeafNode
parameter_list|(
name|int
name|nodeID
parameter_list|)
block|{
return|return
name|nodeID
operator|>=
name|leafNodeOffset
return|;
block|}
DECL|method|parseInt
specifier|private
name|int
name|parseInt
parameter_list|(
name|BytesRefBuilder
name|scratch
parameter_list|,
name|BytesRef
name|prefix
parameter_list|)
block|{
assert|assert
name|startsWith
argument_list|(
name|scratch
argument_list|,
name|prefix
argument_list|)
assert|;
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|stripPrefix
argument_list|(
name|scratch
argument_list|,
name|prefix
argument_list|)
argument_list|)
return|;
block|}
DECL|method|stripPrefix
specifier|private
name|String
name|stripPrefix
parameter_list|(
name|BytesRefBuilder
name|scratch
parameter_list|,
name|BytesRef
name|prefix
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|()
argument_list|,
name|prefix
operator|.
name|length
argument_list|,
name|scratch
operator|.
name|length
argument_list|()
operator|-
name|prefix
operator|.
name|length
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
DECL|method|startsWith
specifier|private
name|boolean
name|startsWith
parameter_list|(
name|BytesRefBuilder
name|scratch
parameter_list|,
name|BytesRef
name|prefix
parameter_list|)
block|{
return|return
name|StringHelper
operator|.
name|startsWith
argument_list|(
name|scratch
operator|.
name|get
argument_list|()
argument_list|,
name|prefix
argument_list|)
return|;
block|}
DECL|method|readLine
specifier|private
name|void
name|readLine
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|BytesRefBuilder
name|scratch
parameter_list|)
throws|throws
name|IOException
block|{
name|SimpleTextUtil
operator|.
name|readLine
argument_list|(
name|in
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

