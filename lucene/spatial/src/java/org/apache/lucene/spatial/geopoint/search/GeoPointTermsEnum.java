begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.spatial.geopoint.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FilteredTermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|decodeLatitude
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|decodeLongitude
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|geoCodedToPrefixCoded
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|prefixCodedToGeoCoded
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|spatial
operator|.
name|geopoint
operator|.
name|document
operator|.
name|GeoPointField
operator|.
name|getPrefixCodedShift
import|;
end_import

begin_comment
comment|/**  * Decomposes a given {@link GeoPointMultiTermQuery} into a set of terms that represent the query criteria. The terms  * are then enumerated by the {@link GeoPointTermQueryConstantScoreWrapper} and all docs whose GeoPoint fields match  * the prefix terms or pass the {@link GeoPointMultiTermQuery.CellComparator#postFilter} criteria are returned in the  * resulting DocIdSet.  *  *  @lucene.experimental  */
end_comment

begin_class
DECL|class|GeoPointTermsEnum
specifier|final
class|class
name|GeoPointTermsEnum
extends|extends
name|FilteredTermsEnum
block|{
DECL|field|maxShift
specifier|private
specifier|final
name|short
name|maxShift
decl_stmt|;
DECL|field|relationImpl
specifier|private
specifier|final
name|GeoPointMultiTermQuery
operator|.
name|CellComparator
name|relationImpl
decl_stmt|;
DECL|field|currentCellBRB
specifier|private
specifier|final
name|BytesRefBuilder
name|currentCellBRB
decl_stmt|;
DECL|field|range
specifier|private
specifier|final
name|Range
name|range
decl_stmt|;
DECL|field|shift
specifier|private
name|short
name|shift
decl_stmt|;
comment|// shift mask
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
comment|// range start as encoded long
DECL|field|end
specifier|private
name|long
name|end
decl_stmt|;
comment|// range end as encoded long
DECL|field|hasNext
specifier|private
name|boolean
name|hasNext
init|=
literal|false
decl_stmt|;
DECL|method|GeoPointTermsEnum
specifier|public
name|GeoPointTermsEnum
parameter_list|(
specifier|final
name|TermsEnum
name|tenum
parameter_list|,
specifier|final
name|GeoPointMultiTermQuery
name|query
parameter_list|)
block|{
name|super
argument_list|(
name|tenum
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxShift
operator|=
name|query
operator|.
name|maxShift
expr_stmt|;
name|this
operator|.
name|relationImpl
operator|=
name|query
operator|.
name|cellComparator
expr_stmt|;
comment|// start shift at maxShift value (from computeMaxShift)
name|this
operator|.
name|shift
operator|=
name|maxShift
expr_stmt|;
specifier|final
name|long
name|mask
init|=
operator|(
literal|1L
operator|<<
name|shift
operator|)
operator|-
literal|1
decl_stmt|;
name|this
operator|.
name|start
operator|=
name|query
operator|.
name|minEncoded
operator|&
operator|~
name|mask
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|start
operator||
name|mask
expr_stmt|;
name|this
operator|.
name|currentCellBRB
operator|=
operator|new
name|BytesRefBuilder
argument_list|()
expr_stmt|;
name|this
operator|.
name|range
operator|=
operator|new
name|Range
argument_list|(
operator|-
literal|1
argument_list|,
name|shift
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|nextRelation
specifier|private
name|boolean
name|nextRelation
parameter_list|()
block|{
name|Relation
name|relation
decl_stmt|;
do|do
block|{
comment|// within or a boundary
if|if
condition|(
operator|(
name|shift
operator|%
name|GeoPointField
operator|.
name|PRECISION_STEP
operator|)
operator|==
literal|0
operator|&&
operator|(
name|relation
operator|=
name|relationImpl
operator|.
name|relate
argument_list|(
name|decodeLatitude
argument_list|(
name|start
argument_list|)
argument_list|,
name|decodeLatitude
argument_list|(
name|end
argument_list|)
argument_list|,
name|decodeLongitude
argument_list|(
name|start
argument_list|)
argument_list|,
name|decodeLongitude
argument_list|(
name|end
argument_list|)
argument_list|)
operator|)
operator|!=
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
comment|// if at max depth or cell completely within
if|if
condition|(
name|shift
operator|==
name|maxShift
operator|||
name|relation
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
name|setRange
argument_list|(
name|relation
operator|==
name|Relation
operator|.
name|CELL_CROSSES_QUERY
argument_list|)
expr_stmt|;
name|advanceVariables
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|// within cell but not at a depth factor of PRECISION_STEP
if|if
condition|(
name|shift
operator|!=
name|maxShift
operator|&&
name|relationImpl
operator|.
name|cellIntersectsMBR
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
operator|==
literal|true
condition|)
block|{
comment|// descend: start need not change since shift handles end of range
name|end
operator|=
name|start
operator||
operator|(
literal|1L
operator|<<
operator|--
name|shift
operator|)
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|advanceVariables
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|shift
operator|<
literal|62
condition|)
do|;
return|return
literal|false
return|;
block|}
DECL|method|setRange
specifier|private
name|void
name|setRange
parameter_list|(
specifier|final
name|boolean
name|boundary
parameter_list|)
block|{
name|range
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|range
operator|.
name|shift
operator|=
name|shift
expr_stmt|;
name|range
operator|.
name|boundary
operator|=
name|boundary
expr_stmt|;
name|hasNext
operator|=
literal|true
expr_stmt|;
block|}
DECL|method|advanceVariables
specifier|private
name|void
name|advanceVariables
parameter_list|()
block|{
comment|/** set next variables */
name|long
name|shiftMask
init|=
literal|1L
operator|<<
name|shift
decl_stmt|;
comment|// pop-up if shift bit is set
while|while
condition|(
operator|(
name|start
operator|&
name|shiftMask
operator|)
operator|!=
literal|0
condition|)
block|{
name|shiftMask
operator|=
literal|1L
operator|<<
operator|++
name|shift
expr_stmt|;
block|}
specifier|final
name|long
name|shiftMOne
init|=
name|shiftMask
operator|-
literal|1
decl_stmt|;
name|start
operator|=
name|start
operator|&
operator|~
name|shiftMOne
operator||
name|shiftMask
expr_stmt|;
name|end
operator|=
name|start
operator||
name|shiftMOne
expr_stmt|;
block|}
DECL|method|seek
specifier|private
name|void
name|seek
parameter_list|(
name|long
name|term
parameter_list|,
name|short
name|res
parameter_list|)
block|{
if|if
condition|(
name|term
operator|<
name|start
operator|&&
name|res
operator|<
name|maxShift
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"trying to seek backwards"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|term
operator|==
name|start
operator|&&
name|res
operator|==
name|shift
condition|)
block|{
return|return;
block|}
name|shift
operator|=
name|res
expr_stmt|;
name|start
operator|=
name|term
expr_stmt|;
name|end
operator|=
name|start
operator||
operator|(
operator|(
literal|1L
operator|<<
name|shift
operator|)
operator|-
literal|1
operator|)
expr_stmt|;
block|}
DECL|method|hasNext
specifier|private
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|hasNext
operator|==
literal|false
condition|)
block|{
return|return
name|nextRelation
argument_list|()
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|nextSeekTerm
specifier|protected
specifier|final
name|BytesRef
name|nextSeekTerm
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
if|if
condition|(
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|null
return|;
block|}
name|geoCodedToPrefixCoded
argument_list|(
name|range
operator|.
name|start
argument_list|,
name|range
operator|.
name|shift
argument_list|,
name|currentCellBRB
argument_list|)
expr_stmt|;
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|currentCellBRB
operator|.
name|get
argument_list|()
return|;
block|}
comment|/**    * The two-phase query approach. {@link #nextSeekTerm} is called to obtain the next term that matches a numeric    * range of the bounding box. Those terms that pass the initial range filter are then compared against the    * decoded min/max latitude and longitude values of the bounding box only if the range is not a "boundary" range    * (e.g., a range that straddles the boundary of the bbox).    * @param term term for candidate document    * @return match status    */
annotation|@
name|Override
DECL|method|accept
specifier|protected
name|AcceptStatus
name|accept
parameter_list|(
name|BytesRef
name|term
parameter_list|)
block|{
specifier|final
name|long
name|encodedTerm
init|=
name|prefixCodedToGeoCoded
argument_list|(
name|term
argument_list|)
decl_stmt|;
specifier|final
name|short
name|termShift
init|=
call|(
name|short
call|)
argument_list|(
literal|64
operator|-
name|getPrefixCodedShift
argument_list|(
name|term
argument_list|)
argument_list|)
decl_stmt|;
comment|// range< term
while|while
condition|(
name|range
operator|.
name|compare
argument_list|(
name|encodedTerm
argument_list|,
name|termShift
argument_list|)
operator|<
literal|0
condition|)
block|{
comment|// no more ranges, be gone
if|if
condition|(
name|hasNext
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
name|AcceptStatus
operator|.
name|END
return|;
block|}
comment|// peek next range, if the range> term then seek
specifier|final
name|int
name|peekCompare
init|=
name|range
operator|.
name|compare
argument_list|(
name|encodedTerm
argument_list|,
name|termShift
argument_list|)
decl_stmt|;
if|if
condition|(
name|peekCompare
operator|>
literal|0
condition|)
block|{
return|return
name|AcceptStatus
operator|.
name|NO_AND_SEEK
return|;
block|}
elseif|else
if|if
condition|(
name|peekCompare
operator|<
literal|0
condition|)
block|{
name|seek
argument_list|(
name|encodedTerm
argument_list|,
name|termShift
argument_list|)
expr_stmt|;
block|}
name|hasNext
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|AcceptStatus
operator|.
name|YES
return|;
block|}
comment|/** Returns true if the current range term is a boundary of the query shape */
DECL|method|boundaryTerm
specifier|protected
name|boolean
name|boundaryTerm
parameter_list|()
block|{
if|if
condition|(
name|range
operator|.
name|start
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"GeoPointTermsEnum empty or not initialized"
argument_list|)
throw|;
block|}
return|return
name|range
operator|.
name|boundary
return|;
block|}
DECL|method|postFilter
specifier|protected
name|boolean
name|postFilter
parameter_list|(
specifier|final
name|double
name|lat
parameter_list|,
specifier|final
name|double
name|lon
parameter_list|)
block|{
return|return
name|relationImpl
operator|.
name|postFilter
argument_list|(
name|lat
argument_list|,
name|lon
argument_list|)
return|;
block|}
DECL|class|Range
specifier|protected
specifier|final
class|class
name|Range
block|{
DECL|field|shift
specifier|private
name|short
name|shift
decl_stmt|;
DECL|field|start
specifier|private
name|long
name|start
decl_stmt|;
DECL|field|boundary
specifier|private
name|boolean
name|boundary
decl_stmt|;
DECL|method|Range
specifier|public
name|Range
parameter_list|(
specifier|final
name|long
name|start
parameter_list|,
specifier|final
name|short
name|shift
parameter_list|,
specifier|final
name|boolean
name|boundary
parameter_list|)
block|{
name|this
operator|.
name|boundary
operator|=
name|boundary
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|shift
operator|=
name|shift
expr_stmt|;
block|}
DECL|method|compare
specifier|private
name|int
name|compare
parameter_list|(
name|long
name|encoded
parameter_list|,
name|short
name|shift
parameter_list|)
block|{
specifier|final
name|int
name|result
init|=
name|Long
operator|.
name|compare
argument_list|(
name|this
operator|.
name|start
argument_list|,
name|encoded
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|0
condition|)
block|{
return|return
name|Short
operator|.
name|compare
argument_list|(
name|shift
argument_list|,
name|this
operator|.
name|shift
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

