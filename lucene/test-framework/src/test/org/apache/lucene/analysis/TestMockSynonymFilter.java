begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/** test the mock synonym filter */
end_comment

begin_class
DECL|class|TestMockSynonymFilter
specifier|public
class|class
name|TestMockSynonymFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|/** test the mock synonym filter */
DECL|method|test
specifier|public
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|MockSynonymFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"dogs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dogs"
block|,
literal|"dog"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"small dogs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"small"
block|,
literal|"dogs"
block|,
literal|"dog"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|6
block|,
literal|6
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|10
block|,
literal|10
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"dogs running"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dogs"
block|,
literal|"dog"
block|,
literal|"running"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|5
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|12
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"small dogs running"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"small"
block|,
literal|"dogs"
block|,
literal|"dog"
block|,
literal|"running"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|6
block|,
literal|6
block|,
literal|11
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|10
block|,
literal|10
block|,
literal|18
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"guinea"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"guinea"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|6
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"pig"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"pig"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|3
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"guinea pig"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"guinea"
block|,
literal|"cavy"
block|,
literal|"pig"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|7
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|10
block|,
literal|10
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"guinea dogs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"guinea"
block|,
literal|"dogs"
block|,
literal|"dog"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|7
block|,
literal|7
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"dogs guinea"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dogs"
block|,
literal|"dog"
block|,
literal|"guinea"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|5
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|11
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"dogs guinea pig"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"dogs"
block|,
literal|"dog"
block|,
literal|"guinea"
block|,
literal|"cavy"
block|,
literal|"pig"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|5
block|,
literal|5
block|,
literal|12
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|4
block|,
literal|4
block|,
literal|11
block|,
literal|15
block|,
literal|15
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"guinea pig dogs"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"guinea"
block|,
literal|"cavy"
block|,
literal|"pig"
block|,
literal|"dogs"
block|,
literal|"dog"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|7
block|,
literal|11
block|,
literal|11
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|6
block|,
literal|10
block|,
literal|10
block|,
literal|15
block|,
literal|15
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"small dogs and guinea pig running"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"small"
block|,
literal|"dogs"
block|,
literal|"dog"
block|,
literal|"and"
block|,
literal|"guinea"
block|,
literal|"cavy"
block|,
literal|"pig"
block|,
literal|"running"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|6
block|,
literal|6
block|,
literal|11
block|,
literal|15
block|,
literal|15
block|,
literal|22
block|,
literal|26
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|10
block|,
literal|10
block|,
literal|14
block|,
literal|21
block|,
literal|25
block|,
literal|25
block|,
literal|33
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
name|assertAnalyzesTo
argument_list|(
name|analyzer
argument_list|,
literal|"small guinea pig and dogs running"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"small"
block|,
literal|"guinea"
block|,
literal|"cavy"
block|,
literal|"pig"
block|,
literal|"and"
block|,
literal|"dogs"
block|,
literal|"dog"
block|,
literal|"running"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|6
block|,
literal|6
block|,
literal|13
block|,
literal|17
block|,
literal|21
block|,
literal|21
block|,
literal|26
block|}
argument_list|,
comment|// start offset
operator|new
name|int
index|[]
block|{
literal|5
block|,
literal|12
block|,
literal|16
block|,
literal|16
block|,
literal|20
block|,
literal|25
block|,
literal|25
block|,
literal|33
block|}
argument_list|,
comment|// end offset
literal|null
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|}
argument_list|,
comment|// position increment
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|,
comment|// position length
literal|true
argument_list|)
expr_stmt|;
comment|// check that offsets are correct
block|}
block|}
end_class

end_unit

