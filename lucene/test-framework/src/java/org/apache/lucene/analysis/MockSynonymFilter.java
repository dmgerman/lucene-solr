begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeSource
import|;
end_import

begin_comment
comment|/** adds synonym of "dog" for "dogs", and synonym of "cavy" for "guinea pig". */
end_comment

begin_class
DECL|class|MockSynonymFilter
specifier|public
class|class
name|MockSynonymFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|offsetAtt
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posLenAtt
name|PositionLengthAttribute
name|posLenAtt
init|=
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tokenQueue
name|List
argument_list|<
name|AttributeSource
argument_list|>
name|tokenQueue
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|endOfInput
name|boolean
name|endOfInput
init|=
literal|false
decl_stmt|;
DECL|method|MockSynonymFilter
specifier|public
name|MockSynonymFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|reset
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
name|tokenQueue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|endOfInput
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|tokenQueue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|tokenQueue
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
operator|.
name|copyTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|endOfInput
operator|==
literal|false
operator|&&
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dogs"
argument_list|)
condition|)
block|{
name|addSynonymAndRestoreOrigToken
argument_list|(
literal|"dog"
argument_list|,
literal|1
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"guinea"
argument_list|)
condition|)
block|{
name|AttributeSource
name|firstSavedToken
init|=
name|cloneAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"pig"
argument_list|)
condition|)
block|{
name|AttributeSource
name|secondSavedToken
init|=
name|cloneAttributes
argument_list|()
decl_stmt|;
name|int
name|secondEndOffset
init|=
name|offsetAtt
operator|.
name|endOffset
argument_list|()
decl_stmt|;
name|firstSavedToken
operator|.
name|copyTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|addSynonym
argument_list|(
literal|"cavy"
argument_list|,
literal|2
argument_list|,
name|secondEndOffset
argument_list|)
expr_stmt|;
name|tokenQueue
operator|.
name|add
argument_list|(
name|secondSavedToken
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"dogs"
argument_list|)
condition|)
block|{
name|tokenQueue
operator|.
name|add
argument_list|(
name|cloneAttributes
argument_list|()
argument_list|)
expr_stmt|;
name|addSynonym
argument_list|(
literal|"dog"
argument_list|,
literal|1
argument_list|,
name|offsetAtt
operator|.
name|endOffset
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|endOfInput
operator|=
literal|true
expr_stmt|;
block|}
name|firstSavedToken
operator|.
name|copyTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
name|endOfInput
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
DECL|method|addSynonym
specifier|private
name|void
name|addSynonym
parameter_list|(
name|String
name|synonymText
parameter_list|,
name|int
name|posLen
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
name|synonymText
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|posLenAtt
operator|.
name|setPositionLength
argument_list|(
name|posLen
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|offsetAtt
operator|.
name|startOffset
argument_list|()
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|tokenQueue
operator|.
name|add
argument_list|(
name|cloneAttributes
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|addSynonymAndRestoreOrigToken
specifier|private
name|void
name|addSynonymAndRestoreOrigToken
parameter_list|(
name|String
name|synonymText
parameter_list|,
name|int
name|posLen
parameter_list|,
name|int
name|endOffset
parameter_list|)
block|{
name|AttributeSource
name|origToken
init|=
name|cloneAttributes
argument_list|()
decl_stmt|;
name|addSynonym
argument_list|(
name|synonymText
argument_list|,
name|posLen
argument_list|,
name|endOffset
argument_list|)
expr_stmt|;
name|origToken
operator|.
name|copyTo
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

