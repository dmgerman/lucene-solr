begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|OffsetAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_comment
comment|/**  * TokenStream from a canned list of Tokens.  */
end_comment

begin_class
DECL|class|CannedTokenStream
specifier|public
specifier|final
class|class
name|CannedTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|tokens
specifier|private
specifier|final
name|Token
index|[]
name|tokens
decl_stmt|;
DECL|field|upto
specifier|private
name|int
name|upto
init|=
literal|0
decl_stmt|;
DECL|field|offsetAtt
specifier|private
specifier|final
name|OffsetAttribute
name|offsetAtt
init|=
name|addAttribute
argument_list|(
name|OffsetAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncrAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncrAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|finalOffset
specifier|private
specifier|final
name|int
name|finalOffset
decl_stmt|;
DECL|field|finalPosInc
specifier|private
specifier|final
name|int
name|finalPosInc
decl_stmt|;
DECL|method|CannedTokenStream
specifier|public
name|CannedTokenStream
parameter_list|(
name|Token
modifier|...
name|tokens
parameter_list|)
block|{
name|this
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|tokens
argument_list|)
expr_stmt|;
block|}
comment|/** If you want trailing holes, pass a non-zero    *  finalPosInc. */
DECL|method|CannedTokenStream
specifier|public
name|CannedTokenStream
parameter_list|(
name|int
name|finalPosInc
parameter_list|,
name|int
name|finalOffset
parameter_list|,
name|Token
modifier|...
name|tokens
parameter_list|)
block|{
name|super
argument_list|(
name|Token
operator|.
name|TOKEN_ATTRIBUTE_FACTORY
argument_list|)
expr_stmt|;
name|this
operator|.
name|tokens
operator|=
name|tokens
expr_stmt|;
name|this
operator|.
name|finalOffset
operator|=
name|finalOffset
expr_stmt|;
name|this
operator|.
name|finalPosInc
operator|=
name|finalPosInc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|end
specifier|public
name|void
name|end
parameter_list|()
throws|throws
name|IOException
block|{
name|super
operator|.
name|end
argument_list|()
expr_stmt|;
name|posIncrAtt
operator|.
name|setPositionIncrement
argument_list|(
name|finalPosInc
argument_list|)
expr_stmt|;
name|offsetAtt
operator|.
name|setOffset
argument_list|(
name|finalOffset
argument_list|,
name|finalOffset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
block|{
if|if
condition|(
name|upto
operator|<
name|tokens
operator|.
name|length
condition|)
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
comment|// NOTE: this looks weird, casting offsetAtt to Token, but because we are using the Token class's AttributeFactory, all attributes are
comment|// in fact backed by the Token class, so we just copy the current token into our Token:
name|tokens
index|[
name|upto
operator|++
index|]
operator|.
name|copyTo
argument_list|(
operator|(
name|Token
operator|)
name|offsetAtt
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

