begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|AccessController
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|IdentityHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|ToLongFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|StreamSupport
import|;
end_import

begin_comment
comment|/** Crawls object graph to collect RAM usage for testing */
end_comment

begin_class
DECL|class|RamUsageTester
specifier|public
specifier|final
class|class
name|RamUsageTester
block|{
comment|/** An accumulator of object references. This class allows for customizing RAM usage estimation. */
DECL|class|Accumulator
specifier|public
specifier|static
class|class
name|Accumulator
block|{
comment|/** Accumulate transitive references for the provided fields of the given      *  object into<code>queue</code> and return the shallow size of this object. */
DECL|method|accumulateObject
specifier|public
name|long
name|accumulateObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|Map
argument_list|<
name|Field
argument_list|,
name|Object
argument_list|>
name|fieldValues
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|fieldValues
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|shallowSize
return|;
block|}
comment|/** Accumulate transitive references for the provided values of the given      *  array into<code>queue</code> and return the shallow size of this array. */
DECL|method|accumulateArray
specifier|public
name|long
name|accumulateArray
parameter_list|(
name|Object
name|array
parameter_list|,
name|long
name|shallowSize
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|,
name|Collection
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|values
argument_list|)
expr_stmt|;
return|return
name|shallowSize
return|;
block|}
block|}
comment|/**    * Estimates the RAM usage by the given object. It will    * walk the object tree and sum up all referenced objects.    *    *<p><b>Resource Usage:</b> This method internally uses a set of    * every object seen during traversals so it does allocate memory    * (it isn't side-effect free). After the method exits, this memory    * should be GCed.</p>    */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|Object
name|obj
parameter_list|,
name|Accumulator
name|accumulator
parameter_list|)
block|{
return|return
name|measureObjectSize
argument_list|(
name|obj
argument_list|,
name|accumulator
argument_list|)
return|;
block|}
comment|/** Same as calling<code>sizeOf(obj, DEFAULT_FILTER)</code>. */
DECL|method|sizeOf
specifier|public
specifier|static
name|long
name|sizeOf
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|sizeOf
argument_list|(
name|obj
argument_list|,
operator|new
name|Accumulator
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Return a human-readable size of a given object.    * @see #sizeOf(Object)    * @see RamUsageEstimator#humanReadableUnits(long)    */
DECL|method|humanSizeOf
specifier|public
specifier|static
name|String
name|humanSizeOf
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
return|return
name|RamUsageEstimator
operator|.
name|humanReadableUnits
argument_list|(
name|sizeOf
argument_list|(
name|object
argument_list|)
argument_list|)
return|;
block|}
comment|/*    * Non-recursive version of object descend. This consumes more memory than recursive in-depth    * traversal but prevents stack overflows on long chains of objects    * or complex graphs (a max. recursion depth on my machine was ~5000 objects linked in a chain    * so not too much).    */
DECL|method|measureObjectSize
specifier|private
specifier|static
name|long
name|measureObjectSize
parameter_list|(
name|Object
name|root
parameter_list|,
name|Accumulator
name|accumulator
parameter_list|)
block|{
comment|// Objects seen so far.
specifier|final
name|Set
argument_list|<
name|Object
argument_list|>
name|seen
init|=
name|Collections
operator|.
name|newSetFromMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|Object
argument_list|,
name|Boolean
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
comment|// Class cache with reference Field and precalculated shallow size.
specifier|final
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ClassCache
argument_list|>
name|classCache
init|=
operator|new
name|IdentityHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Stack of objects pending traversal. Recursion caused stack overflows.
specifier|final
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|stack
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|long
name|totalSize
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|Object
name|ob
init|=
name|stack
operator|.
name|remove
argument_list|(
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ob
operator|==
literal|null
operator|||
name|seen
operator|.
name|contains
argument_list|(
name|ob
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|seen
operator|.
name|add
argument_list|(
name|ob
argument_list|)
expr_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|obClazz
init|=
name|ob
operator|.
name|getClass
argument_list|()
decl_stmt|;
assert|assert
name|obClazz
operator|!=
literal|null
operator|:
literal|"jvm bug detected (Object.getClass() == null). please report this to your vendor"
assert|;
if|if
condition|(
name|obClazz
operator|.
name|isArray
argument_list|()
condition|)
block|{
comment|/*          * Consider an array, possibly of primitive types. Push any of its references to          * the processing stack and accumulate this array's shallow size.           */
specifier|final
name|long
name|shallowSize
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOf
argument_list|(
name|ob
argument_list|)
decl_stmt|;
specifier|final
name|int
name|len
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|ob
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|values
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|componentClazz
init|=
name|obClazz
operator|.
name|getComponentType
argument_list|()
decl_stmt|;
if|if
condition|(
name|componentClazz
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
name|values
operator|=
name|Collections
operator|.
name|emptyList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|AbstractList
argument_list|<
name|Object
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|Array
operator|.
name|get
argument_list|(
name|ob
argument_list|,
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|len
return|;
block|}
block|}
expr_stmt|;
block|}
name|totalSize
operator|+=
name|accumulator
operator|.
name|accumulateArray
argument_list|(
name|ob
argument_list|,
name|shallowSize
argument_list|,
name|values
argument_list|,
name|stack
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|/*          * Consider an object. Push any references it has to the processing stack          * and accumulate this object's shallow size.           */
try|try
block|{
name|ClassCache
name|cachedInfo
init|=
name|classCache
operator|.
name|get
argument_list|(
name|obClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedInfo
operator|==
literal|null
condition|)
block|{
name|classCache
operator|.
name|put
argument_list|(
name|obClazz
argument_list|,
name|cachedInfo
operator|=
name|createCacheEntry
argument_list|(
name|obClazz
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|needsReflection
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|Constants
operator|.
name|JRE_IS_MINIMUM_JAVA9
operator|&&
name|obClazz
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"java."
argument_list|)
condition|)
block|{
comment|// Java 9: Best guess for some known types, as we cannot precisely look into runtime classes:
specifier|final
name|ToLongFunction
argument_list|<
name|Object
argument_list|>
name|func
init|=
name|SIMPLE_TYPES
operator|.
name|get
argument_list|(
name|obClazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
comment|// some simple type like String where the size is easy to get from public properties
name|totalSize
operator|+=
name|accumulator
operator|.
name|accumulateObject
argument_list|(
name|ob
argument_list|,
name|cachedInfo
operator|.
name|alignedShallowInstanceSize
operator|+
name|func
operator|.
name|applyAsLong
argument_list|(
name|ob
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|stack
argument_list|)
expr_stmt|;
name|needsReflection
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ob
operator|instanceof
name|Iterable
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
name|StreamSupport
operator|.
name|stream
argument_list|(
operator|(
operator|(
name|Iterable
argument_list|<
name|?
argument_list|>
operator|)
name|ob
operator|)
operator|.
name|spliterator
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|totalSize
operator|+=
name|accumulator
operator|.
name|accumulateArray
argument_list|(
name|ob
argument_list|,
name|cachedInfo
operator|.
name|alignedShallowInstanceSize
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
argument_list|,
name|values
argument_list|,
name|stack
argument_list|)
expr_stmt|;
name|needsReflection
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ob
operator|instanceof
name|Map
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|values
init|=
operator|(
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|ob
operator|)
operator|.
name|entrySet
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|flatMap
argument_list|(
name|e
lambda|->
name|Stream
operator|.
name|of
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|totalSize
operator|+=
name|accumulator
operator|.
name|accumulateArray
argument_list|(
name|ob
argument_list|,
name|cachedInfo
operator|.
name|alignedShallowInstanceSize
operator|+
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
argument_list|,
name|values
argument_list|,
name|stack
argument_list|)
expr_stmt|;
name|totalSize
operator|+=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
expr_stmt|;
name|needsReflection
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needsReflection
condition|)
block|{
specifier|final
name|Map
argument_list|<
name|Field
argument_list|,
name|Object
argument_list|>
name|fieldValues
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Field
name|f
range|:
name|cachedInfo
operator|.
name|referenceFields
control|)
block|{
name|fieldValues
operator|.
name|put
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|ob
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|totalSize
operator|+=
name|accumulator
operator|.
name|accumulateObject
argument_list|(
name|ob
argument_list|,
name|cachedInfo
operator|.
name|alignedShallowInstanceSize
argument_list|,
name|fieldValues
argument_list|,
name|stack
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
comment|// this should never happen as we enabled setAccessible().
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Reflective field access failed?"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|// Help the GC (?).
name|seen
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|classCache
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return
name|totalSize
return|;
block|}
comment|/**    * This map contains a function to calculate sizes of some "simple types" like String just from their public properties.    * This is needed for Java 9, which does not allow to look into runtime class fields.    */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"serial"
argument_list|)
DECL|field|SIMPLE_TYPES
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ToLongFunction
argument_list|<
name|Object
argument_list|>
argument_list|>
name|SIMPLE_TYPES
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|IdentityHashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|ToLongFunction
argument_list|<
name|Object
argument_list|>
argument_list|>
argument_list|()
block|{
block|{
name|init
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"We measure some forbidden classes"
argument_list|)
specifier|private
name|void
name|init
parameter_list|()
block|{
comment|// String types:
name|a
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|v
lambda|->
name|charArraySize
argument_list|(
name|v
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// may not be correct with Java 9's compact strings!
name|a
argument_list|(
name|StringBuilder
operator|.
name|class
argument_list|,
name|v
lambda|->
name|charArraySize
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
argument_list|(
name|StringBuffer
operator|.
name|class
argument_list|,
name|v
lambda|->
name|charArraySize
argument_list|(
name|v
operator|.
name|capacity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Types with large buffers:
name|a
argument_list|(
name|ByteArrayOutputStream
operator|.
name|class
argument_list|,
name|v
lambda|->
name|byteArraySize
argument_list|(
name|v
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// For File and Path, we just take the length of String representation as approximation:
name|a
argument_list|(
name|File
operator|.
name|class
argument_list|,
name|v
lambda|->
name|charArraySize
argument_list|(
name|v
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
argument_list|(
name|Path
operator|.
name|class
argument_list|,
name|v
lambda|->
name|charArraySize
argument_list|(
name|v
operator|.
name|toString
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
parameter_list|<
name|T
parameter_list|>
name|void
name|a
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|,
name|ToLongFunction
argument_list|<
name|T
argument_list|>
name|func
parameter_list|)
block|{
name|put
argument_list|(
name|clazz
argument_list|,
operator|(
name|ToLongFunction
argument_list|<
name|Object
argument_list|>
operator|)
name|func
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|charArraySize
parameter_list|(
name|int
name|len
parameter_list|)
block|{
return|return
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
operator|(
name|long
operator|)
name|Character
operator|.
name|BYTES
operator|*
name|len
argument_list|)
return|;
block|}
specifier|private
name|long
name|byteArraySize
parameter_list|(
name|int
name|len
parameter_list|)
block|{
return|return
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
operator|(
name|long
operator|)
name|RamUsageEstimator
operator|.
name|NUM_BYTES_ARRAY_HEADER
operator|+
name|len
argument_list|)
return|;
block|}
block|}
block|)
class|;
end_class

begin_comment
comment|/**    * Cached information about a given class.       */
end_comment

begin_class
DECL|class|ClassCache
specifier|private
specifier|static
specifier|final
class|class
name|ClassCache
block|{
DECL|field|alignedShallowInstanceSize
specifier|public
specifier|final
name|long
name|alignedShallowInstanceSize
decl_stmt|;
DECL|field|referenceFields
specifier|public
specifier|final
name|Field
index|[]
name|referenceFields
decl_stmt|;
DECL|method|ClassCache
specifier|public
name|ClassCache
parameter_list|(
name|long
name|alignedShallowInstanceSize
parameter_list|,
name|Field
index|[]
name|referenceFields
parameter_list|)
block|{
name|this
operator|.
name|alignedShallowInstanceSize
operator|=
name|alignedShallowInstanceSize
expr_stmt|;
name|this
operator|.
name|referenceFields
operator|=
name|referenceFields
expr_stmt|;
block|}
block|}
end_class

begin_comment
comment|/**    * Create a cached information about shallow size and reference fields for     * a given class.    */
end_comment

begin_function
annotation|@
name|SuppressForbidden
argument_list|(
name|reason
operator|=
literal|"We need to access private fields of measured objects."
argument_list|)
DECL|method|createCacheEntry
specifier|private
specifier|static
name|ClassCache
name|createCacheEntry
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|AccessController
operator|.
name|doPrivileged
argument_list|(
call|(
name|PrivilegedAction
argument_list|<
name|ClassCache
argument_list|>
call|)
argument_list|()
operator|->
block|{
name|ClassCache
name|cachedInfo
block|;
name|long
name|shallowInstanceSize
operator|=
name|RamUsageEstimator
operator|.
name|NUM_BYTES_OBJECT_HEADER
block|;
name|final
name|ArrayList
argument_list|<
name|Field
argument_list|>
name|referenceFields
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|32
argument_list|)
block|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|clazz
init|;
name|c
operator|!=
literal|null
condition|;
name|c
operator|=
name|c
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|==
name|Class
operator|.
name|class
condition|)
block|{
comment|// prevent inspection of Class' fields, throws SecurityException in Java 9!
continue|continue;
block|}
name|final
name|Field
index|[]
name|fields
operator|=
name|c
operator|.
name|getDeclaredFields
argument_list|()
argument_list|;         for
operator|(
name|final
name|Field
name|f
operator|:
name|fields
operator|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|shallowInstanceSize
operator|=
name|RamUsageEstimator
operator|.
name|adjustForField
argument_list|(
name|shallowInstanceSize
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|getType
argument_list|()
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
try|try
block|{
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|referenceFields
operator|.
name|add
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|re
parameter_list|)
block|{
if|if
condition|(
literal|"java.lang.reflect.InaccessibleObjectException"
operator|.
name|equals
argument_list|(
name|re
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// LUCENE-7595: this is Java 9, which prevents access to fields in foreign modules
block|}
else|else
block|{
throw|throw
name|re
throw|;
block|}
block|}
block|}
end_function

begin_expr_stmt
unit|}         }       }          cachedInfo
operator|=
operator|new
name|ClassCache
argument_list|(
name|RamUsageEstimator
operator|.
name|alignObjectSize
argument_list|(
name|shallowInstanceSize
argument_list|)
argument_list|,
name|referenceFields
operator|.
name|toArray
argument_list|(
operator|new
name|Field
index|[
name|referenceFields
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_return
return|return
name|cachedInfo
return|;
end_return

begin_empty_stmt
unit|})
empty_stmt|;
end_empty_stmt

unit|}  }
end_unit

