begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * A {@link MultiReader} that has its own cache key, occasionally useful for  * testing purposes.  */
end_comment

begin_class
DECL|class|OwnCacheKeyMultiReader
specifier|public
specifier|final
class|class
name|OwnCacheKeyMultiReader
extends|extends
name|MultiReader
block|{
DECL|field|readerClosedListeners
specifier|private
specifier|final
name|Set
argument_list|<
name|ClosedListener
argument_list|>
name|readerClosedListeners
init|=
operator|new
name|CopyOnWriteArraySet
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|cacheHelper
specifier|private
specifier|final
name|CacheHelper
name|cacheHelper
init|=
operator|new
name|CacheHelper
argument_list|()
block|{
specifier|private
specifier|final
name|CacheKey
name|cacheKey
init|=
operator|new
name|CacheKey
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|CacheKey
name|getKey
parameter_list|()
block|{
return|return
name|cacheKey
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addClosedListener
parameter_list|(
name|ClosedListener
name|listener
parameter_list|)
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|readerClosedListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|OwnCacheKeyMultiReader
specifier|public
name|OwnCacheKeyMultiReader
parameter_list|(
name|IndexReader
modifier|...
name|subReaders
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|subReaders
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getReaderCacheHelper
specifier|public
name|CacheHelper
name|getReaderCacheHelper
parameter_list|()
block|{
return|return
name|cacheHelper
return|;
block|}
annotation|@
name|Override
DECL|method|notifyReaderClosedListeners
name|void
name|notifyReaderClosedListeners
parameter_list|(
name|Throwable
name|th
parameter_list|)
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|readerClosedListeners
init|)
block|{
for|for
control|(
name|ClosedListener
name|listener
range|:
name|readerClosedListeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|onClose
argument_list|(
name|cacheHelper
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
if|if
condition|(
name|th
operator|==
literal|null
condition|)
block|{
name|th
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|th
operator|.
name|addSuppressed
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|th
operator|!=
literal|null
condition|)
block|{
throw|throw
name|IOUtils
operator|.
name|rethrowAlways
argument_list|(
name|th
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

