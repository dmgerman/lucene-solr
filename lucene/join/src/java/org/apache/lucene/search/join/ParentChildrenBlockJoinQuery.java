begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.join
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|join
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|ReaderUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_comment
comment|/**  * A query that returns all the matching child documents for a specific parent document  * indexed together in the same block. The provided child query determines which matching  * child doc is being returned.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|ParentChildrenBlockJoinQuery
specifier|public
class|class
name|ParentChildrenBlockJoinQuery
extends|extends
name|Query
block|{
DECL|field|parentFilter
specifier|private
specifier|final
name|BitSetProducer
name|parentFilter
decl_stmt|;
DECL|field|childQuery
specifier|private
specifier|final
name|Query
name|childQuery
decl_stmt|;
DECL|field|parentDocId
specifier|private
specifier|final
name|int
name|parentDocId
decl_stmt|;
comment|/**    * Creates a<code>ParentChildrenBlockJoinQuery</code> instance    *    * @param parentFilter  A filter identifying parent documents.    * @param childQuery    A child query that determines which child docs are matching    * @param parentDocId   The top level doc id of that parent to return children documents for    */
DECL|method|ParentChildrenBlockJoinQuery
specifier|public
name|ParentChildrenBlockJoinQuery
parameter_list|(
name|BitSetProducer
name|parentFilter
parameter_list|,
name|Query
name|childQuery
parameter_list|,
name|int
name|parentDocId
parameter_list|)
block|{
name|this
operator|.
name|parentFilter
operator|=
name|parentFilter
expr_stmt|;
name|this
operator|.
name|childQuery
operator|=
name|childQuery
expr_stmt|;
name|this
operator|.
name|parentDocId
operator|=
name|parentDocId
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|sameClassAs
argument_list|(
name|obj
argument_list|)
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
name|ParentChildrenBlockJoinQuery
name|other
init|=
operator|(
name|ParentChildrenBlockJoinQuery
operator|)
name|obj
decl_stmt|;
return|return
name|parentFilter
operator|.
name|equals
argument_list|(
name|other
operator|.
name|parentFilter
argument_list|)
operator|&&
name|childQuery
operator|.
name|equals
argument_list|(
name|other
operator|.
name|childQuery
argument_list|)
operator|&&
name|parentDocId
operator|==
name|other
operator|.
name|parentDocId
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|hash
init|=
name|classHash
argument_list|()
decl_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|parentFilter
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|childQuery
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|hash
operator|=
literal|31
operator|*
name|hash
operator|+
name|parentDocId
expr_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"ParentChildrenBlockJoinQuery ("
operator|+
name|childQuery
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Query
name|childRewrite
init|=
name|childQuery
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|childRewrite
operator|!=
name|childQuery
condition|)
block|{
return|return
operator|new
name|ParentChildrenBlockJoinQuery
argument_list|(
name|parentFilter
argument_list|,
name|childRewrite
argument_list|,
name|parentDocId
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Weight
name|childWeight
init|=
name|childQuery
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
argument_list|,
name|boost
argument_list|)
decl_stmt|;
specifier|final
name|int
name|readerIndex
init|=
name|ReaderUtil
operator|.
name|subIndex
argument_list|(
name|parentDocId
argument_list|,
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Weight
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|childWeight
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
literal|"Not implemented, use ToParentBlockJoinQuery explain why a document matched"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Childs docs only reside in a single segment, so no need to evaluate all segments
if|if
condition|(
name|context
operator|.
name|ord
operator|!=
name|readerIndex
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|int
name|localParentDocId
init|=
name|parentDocId
operator|-
name|context
operator|.
name|docBase
decl_stmt|;
comment|// If parentDocId == 0 then a parent doc doesn't have child docs, because child docs are stored
comment|// before the parent doc and because parent doc is 0 we can safely assume that there are no child docs.
if|if
condition|(
name|localParentDocId
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|BitSet
name|parents
init|=
name|parentFilter
operator|.
name|getBitSet
argument_list|(
name|context
argument_list|)
decl_stmt|;
specifier|final
name|int
name|firstChildDocId
init|=
name|parents
operator|.
name|prevSetBit
argument_list|(
name|localParentDocId
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// A parent doc doesn't have child docs, so we can early exit here:
if|if
condition|(
name|firstChildDocId
operator|==
name|localParentDocId
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Scorer
name|childrenScorer
init|=
name|childWeight
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|childrenScorer
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DocIdSetIterator
name|childrenIterator
init|=
name|childrenScorer
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|final
name|DocIdSetIterator
name|it
init|=
operator|new
name|DocIdSetIterator
argument_list|()
block|{
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|target
operator|=
name|Math
operator|.
name|max
argument_list|(
name|firstChildDocId
argument_list|,
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
name|target
operator|>=
name|localParentDocId
condition|)
block|{
comment|// We're outside the child nested scope, so it is done
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
name|int
name|advanced
init|=
name|childrenIterator
operator|.
name|advance
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|advanced
operator|>=
name|localParentDocId
condition|)
block|{
comment|// We're outside the child nested scope, so it is done
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
else|else
block|{
return|return
name|doc
operator|=
name|advanced
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|Math
operator|.
name|min
argument_list|(
name|childrenIterator
operator|.
name|cost
argument_list|()
argument_list|,
name|localParentDocId
operator|-
name|firstChildDocId
argument_list|)
return|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|Scorer
argument_list|(
name|this
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|it
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|childrenScorer
operator|.
name|score
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|childrenScorer
operator|.
name|freq
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|it
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

