begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FSDirectory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|MockDirectoryWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_class
DECL|class|TestFixBrokenOffsets
specifier|public
class|class
name|TestFixBrokenOffsets
extends|extends
name|LuceneTestCase
block|{
comment|// Run this in Lucene 6.x:
comment|//
comment|//     ant test -Dtestcase=TestFixBrokenOffsets -Dtestmethod=testCreateBrokenOffsetsIndex -Dtests.codec=default -Dtests.useSecurityManager=false
comment|/*   public void testCreateBrokenOffsetsIndex() throws IOException {      Path indexDir = Paths.get("/tmp/brokenoffsets");     Files.deleteIfExists(indexDir);     Directory dir = newFSDirectory(indexDir);     IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());      Document doc = new Document();     FieldType fieldType = new FieldType(TextField.TYPE_STORED);     fieldType.setStoreTermVectors(true);     fieldType.setStoreTermVectorPositions(true);     fieldType.setStoreTermVectorOffsets(true);     Field field = new Field("foo", "bar", fieldType);     field.setTokenStream(new CannedTokenStream(new Token("foo", 10, 13), new Token("foo", 7, 9)));     doc.add(field);     writer.addDocument(doc);     writer.commit();      // 2nd segment     doc = new Document();     field = new Field("foo", "bar", fieldType);     field.setTokenStream(new CannedTokenStream(new Token("bar", 15, 17), new Token("bar", 1, 5)));     doc.add(field);     writer.addDocument(doc);          writer.close();      dir.close();   }   */
DECL|method|testFixBrokenOffsetsIndex
specifier|public
name|void
name|testFixBrokenOffsetsIndex
parameter_list|()
throws|throws
name|IOException
block|{
name|InputStream
name|resource
init|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"index.630.brokenoffsets.zip"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Broken offsets index not found"
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|Path
name|path
init|=
name|createTempDir
argument_list|(
literal|"brokenoffsets"
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|unzip
argument_list|(
name|resource
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|Directory
name|dir
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// OK: index is 6.3.0 so offsets not checked:
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|MockDirectoryWrapper
name|tmpDir
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|tmpDir
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|IndexWriter
name|w
init|=
operator|new
name|IndexWriter
argument_list|(
name|tmpDir
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|()
argument_list|)
decl_stmt|;
name|w
operator|.
name|addIndexes
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// OK: addIndexes(Directory...) also keeps version as 6.3.0, so offsets not checked:
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|tmpDir
argument_list|)
expr_stmt|;
name|tmpDir
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|MockDirectoryWrapper
name|tmpDir2
init|=
name|newMockDirectory
argument_list|()
decl_stmt|;
name|tmpDir2
operator|.
name|setCheckIndexOnClose
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|w
operator|=
operator|new
name|IndexWriter
argument_list|(
name|tmpDir2
argument_list|,
operator|new
name|IndexWriterConfig
argument_list|()
argument_list|)
expr_stmt|;
name|DirectoryReader
name|reader
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LeafReaderContext
argument_list|>
name|leaves
init|=
name|reader
operator|.
name|leaves
argument_list|()
decl_stmt|;
name|CodecReader
index|[]
name|codecReaders
init|=
operator|new
name|CodecReader
index|[
name|leaves
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leaves
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|codecReaders
index|[
name|i
index|]
operator|=
operator|(
name|CodecReader
operator|)
name|leaves
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|reader
argument_list|()
expr_stmt|;
block|}
name|w
operator|.
name|addIndexes
argument_list|(
name|codecReaders
argument_list|)
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// NOT OK: broken offsets were copied into a 7.0 segment:
name|ByteArrayOutputStream
name|output
init|=
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|RuntimeException
name|re
init|=
name|expectThrows
argument_list|(
name|RuntimeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|tmpDir2
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"term [66 6f 6f]: doc 0: pos 1: startOffset 7< lastStartOffset 10; consider using the FixBrokenOffsets tool in Lucene's backward-codecs module to correct your index"
argument_list|,
name|re
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|tmpDir2
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Now run the tool and confirm the broken offsets are fixed:
name|Path
name|path2
init|=
name|createTempDir
argument_list|(
literal|"fixedbrokenoffsets"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"subdir"
argument_list|)
decl_stmt|;
name|FixBrokenOffsets
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|path
operator|.
name|toString
argument_list|()
block|,
name|path2
operator|.
name|toString
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|Directory
name|tmpDir3
init|=
name|FSDirectory
operator|.
name|open
argument_list|(
name|path2
argument_list|)
decl_stmt|;
name|TestUtil
operator|.
name|checkIndex
argument_list|(
name|tmpDir3
argument_list|)
expr_stmt|;
name|tmpDir3
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

