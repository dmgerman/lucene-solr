begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.pattern
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|pattern
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|util
operator|.
name|TokenizerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_comment
comment|/**  * Factory for {@link SimplePatternSplitTokenizer}, for producing tokens by splitting according to the provided regexp.  *  *<p>This tokenizer uses Lucene {@link RegExp} pattern matching to construct distinct tokens  * for the input stream.  The syntax is more limited than {@link PatternTokenizer}, but the  * tokenization is quite a bit faster.  It takes two arguments:  *<br>  *<ul>  *<li>"pattern" (required) is the regular expression, according to the syntax described at {@link RegExp}</li>  *<li>"maxDeterminizedStates" (optional, default 10000) the limit on total state count for the determined automaton computed from the regexp</li>  *</ul>  *<p>  * The pattern matches the characters that should split tokens, like {@code String.split}, and the  * matching is greedy such that the longest token separator matching at a given point is matched.  Empty  * tokens are never created.  *  *<p>For example, to match tokens delimited by simple whitespace characters:  *  *<pre class="prettyprint">  *&lt;fieldType name="text_ptn" class="solr.TextField" positionIncrementGap="100"&gt;  *&lt;analyzer&gt;  *&lt;tokenizer class="solr.SimplePatternSplitTokenizerFactory" pattern="[ \t\r\n]+"/&gt;  *&lt;/analyzer&gt;  *&lt;/fieldType&gt;</pre>   *   * @lucene.experimental  *  * @see SimplePatternSplitTokenizer  */
end_comment

begin_class
DECL|class|SimplePatternSplitTokenizerFactory
specifier|public
class|class
name|SimplePatternSplitTokenizerFactory
extends|extends
name|TokenizerFactory
block|{
DECL|field|PATTERN
specifier|public
specifier|static
specifier|final
name|String
name|PATTERN
init|=
literal|"pattern"
decl_stmt|;
DECL|field|dfa
specifier|private
specifier|final
name|Automaton
name|dfa
decl_stmt|;
DECL|field|maxDeterminizedStates
specifier|private
specifier|final
name|int
name|maxDeterminizedStates
decl_stmt|;
comment|/** Creates a new SimpleSplitPatternTokenizerFactory */
DECL|method|SimplePatternSplitTokenizerFactory
specifier|public
name|SimplePatternSplitTokenizerFactory
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
parameter_list|)
block|{
name|super
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|maxDeterminizedStates
operator|=
name|getInt
argument_list|(
name|args
argument_list|,
literal|"maxDeterminizedStates"
argument_list|,
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
name|dfa
operator|=
name|Operations
operator|.
name|determinize
argument_list|(
operator|new
name|RegExp
argument_list|(
name|require
argument_list|(
name|args
argument_list|,
name|PATTERN
argument_list|)
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|,
name|maxDeterminizedStates
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown parameters: "
operator|+
name|args
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|create
specifier|public
name|SimplePatternSplitTokenizer
name|create
parameter_list|(
specifier|final
name|AttributeFactory
name|factory
parameter_list|)
block|{
return|return
operator|new
name|SimplePatternSplitTokenizer
argument_list|(
name|factory
argument_list|,
name|dfa
argument_list|)
return|;
block|}
block|}
end_class

end_unit

