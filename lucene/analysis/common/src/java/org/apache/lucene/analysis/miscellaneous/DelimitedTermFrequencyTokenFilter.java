begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.miscellaneous
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermFrequencyAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_comment
comment|/**  * Characters before the delimiter are the "token", the textual integer after is the term frequency.  * To use this {@code TokenFilter} the field must be indexed with  * {@link IndexOptions#DOCS_AND_FREQS} but no positions or offsets.  *<p>  * For example, if the delimiter is '|', then for the string "foo|5", "foo" is the token  * and "5" is a term frequency. If there is no delimiter, the TokenFilter does not modify  * the term frequency.  *<p>  * Note make sure your Tokenizer doesn't split on the delimiter, or this won't work  */
end_comment

begin_class
DECL|class|DelimitedTermFrequencyTokenFilter
specifier|public
specifier|final
class|class
name|DelimitedTermFrequencyTokenFilter
extends|extends
name|TokenFilter
block|{
DECL|field|DEFAULT_DELIMITER
specifier|public
specifier|static
specifier|final
name|char
name|DEFAULT_DELIMITER
init|=
literal|'|'
decl_stmt|;
DECL|field|delimiter
specifier|private
specifier|final
name|char
name|delimiter
decl_stmt|;
DECL|field|termAtt
specifier|private
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|tfAtt
specifier|private
specifier|final
name|TermFrequencyAttribute
name|tfAtt
init|=
name|addAttribute
argument_list|(
name|TermFrequencyAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|DelimitedTermFrequencyTokenFilter
specifier|public
name|DelimitedTermFrequencyTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|this
argument_list|(
name|input
argument_list|,
name|DEFAULT_DELIMITER
argument_list|)
expr_stmt|;
block|}
DECL|method|DelimitedTermFrequencyTokenFilter
specifier|public
name|DelimitedTermFrequencyTokenFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|,
name|char
name|delimiter
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|delimiter
operator|=
name|delimiter
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
specifier|final
name|char
index|[]
name|buffer
init|=
name|termAtt
operator|.
name|buffer
argument_list|()
decl_stmt|;
specifier|final
name|int
name|length
init|=
name|termAtt
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|i
index|]
operator|==
name|delimiter
condition|)
block|{
name|termAtt
operator|.
name|setLength
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|// simply set a new length
name|i
operator|++
expr_stmt|;
name|tfAtt
operator|.
name|setTermFrequency
argument_list|(
name|ArrayUtil
operator|.
name|parseInt
argument_list|(
name|buffer
argument_list|,
name|i
argument_list|,
name|length
operator|-
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

