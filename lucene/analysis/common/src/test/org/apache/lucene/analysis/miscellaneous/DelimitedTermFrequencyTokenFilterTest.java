begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.miscellaneous
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|miscellaneous
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermFrequencyAttribute
import|;
end_import

begin_class
DECL|class|DelimitedTermFrequencyTokenFilterTest
specifier|public
class|class
name|DelimitedTermFrequencyTokenFilterTest
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testTermFrequency
specifier|public
name|void
name|testTermFrequency
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"The quick|40 red|4 fox|06 jumped|1 over the lazy|2 brown|123 dogs|1024"
decl_stmt|;
name|DelimitedTermFrequencyTokenFilter
name|filter
init|=
operator|new
name|DelimitedTermFrequencyTokenFilter
argument_list|(
name|whitespaceMockTokenizer
argument_list|(
name|test
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TermFrequencyAttribute
name|tfAtt
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|TermFrequencyAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"The"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"quick"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"red"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"fox"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"jumped"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"over"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"the"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"lazy"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"brown"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|123
argument_list|)
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"dogs"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1024
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|filter
operator|.
name|end
argument_list|()
expr_stmt|;
name|filter
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testInvalidNegativeTf
specifier|public
name|void
name|testInvalidNegativeTf
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"foo bar|-20"
decl_stmt|;
name|DelimitedTermFrequencyTokenFilter
name|filter
init|=
operator|new
name|DelimitedTermFrequencyTokenFilter
argument_list|(
name|whitespaceMockTokenizer
argument_list|(
name|test
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TermFrequencyAttribute
name|tfAtt
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|TermFrequencyAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"foo"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
name|filter
operator|::
name|incrementToken
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Term frequency must be 1 or greater; got -20"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testInvalidFloatTf
specifier|public
name|void
name|testInvalidFloatTf
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|test
init|=
literal|"foo bar|1.2"
decl_stmt|;
name|DelimitedTermFrequencyTokenFilter
name|filter
init|=
operator|new
name|DelimitedTermFrequencyTokenFilter
argument_list|(
name|whitespaceMockTokenizer
argument_list|(
name|test
argument_list|)
argument_list|)
decl_stmt|;
name|CharTermAttribute
name|termAtt
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|TermFrequencyAttribute
name|tfAtt
init|=
name|filter
operator|.
name|getAttribute
argument_list|(
name|TermFrequencyAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|filter
operator|.
name|reset
argument_list|()
expr_stmt|;
name|assertTermEquals
argument_list|(
literal|"foo"
argument_list|,
name|filter
argument_list|,
name|termAtt
argument_list|,
name|tfAtt
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|NumberFormatException
operator|.
name|class
argument_list|,
name|filter
operator|::
name|incrementToken
argument_list|)
expr_stmt|;
block|}
DECL|method|assertTermEquals
name|void
name|assertTermEquals
parameter_list|(
name|String
name|expected
parameter_list|,
name|TokenStream
name|stream
parameter_list|,
name|CharTermAttribute
name|termAtt
parameter_list|,
name|TermFrequencyAttribute
name|tfAtt
parameter_list|,
name|int
name|expectedTf
parameter_list|)
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|stream
operator|.
name|incrementToken
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|termAtt
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedTf
argument_list|,
name|tfAtt
operator|.
name|getTermFrequency
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

