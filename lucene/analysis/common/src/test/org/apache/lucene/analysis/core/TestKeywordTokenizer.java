begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|AttributeFactory
import|;
end_import

begin_class
DECL|class|TestKeywordTokenizer
specifier|public
class|class
name|TestKeywordTokenizer
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|IOException
block|{
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"Tokenizer \ud801\udc1ctest"
argument_list|)
decl_stmt|;
name|KeywordTokenizer
name|tokenizer
init|=
operator|new
name|KeywordTokenizer
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Tokenizer \ud801\udc1ctest"
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testFactory
specifier|public
name|void
name|testFactory
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|args
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|KeywordTokenizerFactory
name|factory
init|=
operator|new
name|KeywordTokenizerFactory
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|AttributeFactory
name|attributeFactory
init|=
name|newAttributeFactory
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|factory
operator|.
name|create
argument_list|(
name|attributeFactory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|KeywordTokenizer
operator|.
name|class
argument_list|,
name|tokenizer
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|makeArgs
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|makeArgs
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|args
operator|.
name|length
condition|;
name|idx
operator|+=
literal|2
control|)
block|{
name|ret
operator|.
name|put
argument_list|(
name|args
index|[
name|idx
index|]
argument_list|,
name|args
index|[
name|idx
operator|+
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
DECL|method|testParamsFactory
specifier|public
name|void
name|testParamsFactory
parameter_list|()
throws|throws
name|IOException
block|{
comment|// negative maxTokenLen
name|IllegalArgumentException
name|iae
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|KeywordTokenizerFactory
argument_list|(
name|makeArgs
argument_list|(
literal|"maxTokenLen"
argument_list|,
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"maxTokenLen must be greater than 0 and less than 1048576 passed: -1"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// zero maxTokenLen
name|iae
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|KeywordTokenizerFactory
argument_list|(
name|makeArgs
argument_list|(
literal|"maxTokenLen"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"maxTokenLen must be greater than 0 and less than 1048576 passed: 0"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// Added random param, should throw illegal error
name|iae
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
operator|new
name|KeywordTokenizerFactory
argument_list|(
name|makeArgs
argument_list|(
literal|"maxTokenLen"
argument_list|,
literal|"255"
argument_list|,
literal|"randomParam"
argument_list|,
literal|"rValue"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Unknown parameters: {randomParam=rValue}"
argument_list|,
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// tokeniser will never split, no matter what is passed,
comment|// but the buffer will not be more than length of the token
name|KeywordTokenizerFactory
name|factory
init|=
operator|new
name|KeywordTokenizerFactory
argument_list|(
name|makeArgs
argument_list|(
literal|"maxTokenLen"
argument_list|,
literal|"5"
argument_list|)
argument_list|)
decl_stmt|;
name|AttributeFactory
name|attributeFactory
init|=
name|newAttributeFactory
argument_list|()
decl_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|factory
operator|.
name|create
argument_list|(
name|attributeFactory
argument_list|)
decl_stmt|;
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"Tokenizertest"
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Tokenizertest"
block|}
argument_list|)
expr_stmt|;
comment|// tokeniser will never split, no matter what is passed,
comment|// but the buffer will not be more than length of the token
name|factory
operator|=
operator|new
name|KeywordTokenizerFactory
argument_list|(
name|makeArgs
argument_list|(
literal|"maxTokenLen"
argument_list|,
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|attributeFactory
operator|=
name|newAttributeFactory
argument_list|()
expr_stmt|;
name|tokenizer
operator|=
name|factory
operator|.
name|create
argument_list|(
name|attributeFactory
argument_list|)
expr_stmt|;
name|reader
operator|=
operator|new
name|StringReader
argument_list|(
literal|"Tokenizer\u00A0test"
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Tokenizer\u00A0test"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

