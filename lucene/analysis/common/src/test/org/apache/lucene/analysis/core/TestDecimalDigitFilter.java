begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.core
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|core
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Bits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|SparseFixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_comment
comment|/**  * Tests for {@link DecimalDigitFilter}  */
end_comment

begin_class
DECL|class|TestDecimalDigitFilter
specifier|public
class|class
name|TestDecimalDigitFilter
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|tokenized
specifier|private
name|Analyzer
name|tokenized
decl_stmt|;
DECL|field|keyword
specifier|private
name|Analyzer
name|keyword
decl_stmt|;
DECL|field|DECIMAL_DIGIT_CODEPOINTS
specifier|private
specifier|static
name|SparseFixedBitSet
name|DECIMAL_DIGIT_CODEPOINTS
decl_stmt|;
annotation|@
name|BeforeClass
DECL|method|init_DECIMAL_DIGIT_CODEPOINTS
specifier|public
specifier|static
name|void
name|init_DECIMAL_DIGIT_CODEPOINTS
parameter_list|()
block|{
name|DECIMAL_DIGIT_CODEPOINTS
operator|=
operator|new
name|SparseFixedBitSet
argument_list|(
name|Character
operator|.
name|MAX_CODE_POINT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|codepoint
init|=
name|Character
operator|.
name|MIN_CODE_POINT
init|;
name|codepoint
operator|<
name|Character
operator|.
name|MAX_CODE_POINT
condition|;
name|codepoint
operator|++
control|)
block|{
if|if
condition|(
name|Character
operator|.
name|isDigit
argument_list|(
name|codepoint
argument_list|)
condition|)
block|{
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|set
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
block|}
block|}
assert|assert
literal|0
operator|<
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|cardinality
argument_list|()
assert|;
block|}
annotation|@
name|AfterClass
DECL|method|destroy_DECIMAL_DIGIT_CODEPOINTS
specifier|public
specifier|static
name|void
name|destroy_DECIMAL_DIGIT_CODEPOINTS
parameter_list|()
block|{
name|DECIMAL_DIGIT_CODEPOINTS
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|tokenized
operator|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|DecimalDigitFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
expr_stmt|;
name|keyword
operator|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|KeywordTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|DecimalDigitFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|tokenized
operator|.
name|close
argument_list|()
expr_stmt|;
name|keyword
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/**    * test that digits are normalized    */
DECL|method|testSimple
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|Exception
block|{
name|checkOneTerm
argument_list|(
name|tokenized
argument_list|,
literal|"Ù¡Ù¢Ù£Ù¤"
argument_list|,
literal|"1234"
argument_list|)
expr_stmt|;
block|}
comment|/**    * test that double struck digits are normalized    */
DECL|method|testDoubleStruck
specifier|public
name|void
name|testDoubleStruck
parameter_list|()
throws|throws
name|Exception
block|{
comment|// MATHEMATICAL DOUBLE-STRUCK DIGIT ... 1, 9, 8, 4
specifier|final
name|String
name|input
init|=
literal|"ð ð¡ ð  ð"
decl_stmt|;
specifier|final
name|String
name|expected
init|=
literal|"1 9 8 4"
decl_stmt|;
name|checkOneTerm
argument_list|(
name|keyword
argument_list|,
name|input
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|checkOneTerm
argument_list|(
name|keyword
argument_list|,
name|input
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|,
name|expected
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * test sequences of digits mixed with other random simple string data    */
DECL|method|testRandomSequences
specifier|public
name|void
name|testRandomSequences
parameter_list|()
throws|throws
name|Exception
block|{
comment|// test numIters random strings containing a sequence of numDigits codepoints
specifier|final
name|int
name|numIters
init|=
name|atLeast
argument_list|(
literal|5
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|numIters
condition|;
name|iter
operator|++
control|)
block|{
specifier|final
name|int
name|numDigits
init|=
name|atLeast
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|expected
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|actual
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|digitCounter
init|=
literal|0
init|;
name|digitCounter
operator|<
name|numDigits
condition|;
name|digitCounter
operator|++
control|)
block|{
comment|// increased odds of 0 length random string prefix
specifier|final
name|String
name|prefix
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|actual
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|int
name|codepoint
init|=
name|getRandomDecimalDigit
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|value
init|=
name|Character
operator|.
name|getNumericValue
argument_list|(
name|codepoint
argument_list|)
decl_stmt|;
assert|assert
name|value
operator|>=
literal|0
operator|&&
name|value
operator|<=
literal|9
assert|;
name|expected
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|.
name|appendCodePoint
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
block|}
comment|// occasional suffix, increased odds of 0 length random string
specifier|final
name|String
name|suffix
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|""
else|:
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|actual
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|checkOneTerm
argument_list|(
name|keyword
argument_list|,
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * test each individual digit in different locations of strings.    */
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numCodePointsChecked
init|=
literal|0
decl_stmt|;
comment|// sanity check
for|for
control|(
name|int
name|codepoint
init|=
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|nextSetBit
argument_list|(
literal|0
argument_list|)
init|;
name|codepoint
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|codepoint
operator|=
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|nextSetBit
argument_list|(
name|codepoint
operator|+
literal|1
argument_list|)
control|)
block|{
assert|assert
name|Character
operator|.
name|isDigit
argument_list|(
name|codepoint
argument_list|)
assert|;
comment|// add some a-z before/after the string
name|String
name|prefix
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|suffix
init|=
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|expected
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|int
name|value
init|=
name|Character
operator|.
name|getNumericValue
argument_list|(
name|codepoint
argument_list|)
decl_stmt|;
assert|assert
name|value
operator|>=
literal|0
operator|&&
name|value
operator|<=
literal|9
assert|;
name|expected
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|StringBuilder
name|actual
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|actual
operator|.
name|append
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|actual
operator|.
name|appendCodePoint
argument_list|(
name|codepoint
argument_list|)
expr_stmt|;
name|actual
operator|.
name|append
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|checkOneTerm
argument_list|(
name|keyword
argument_list|,
name|actual
operator|.
name|toString
argument_list|()
argument_list|,
name|expected
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|numCodePointsChecked
operator|++
expr_stmt|;
block|}
assert|assert
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|cardinality
argument_list|()
operator|==
name|numCodePointsChecked
assert|;
block|}
comment|/**    * check the filter is a no-op for the empty string term    */
DECL|method|testEmptyTerm
specifier|public
name|void
name|testEmptyTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|checkOneTerm
argument_list|(
name|keyword
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|/**     * blast some random strings through the filter    */
DECL|method|testRandomStrings
specifier|public
name|void
name|testRandomStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|checkRandomData
argument_list|(
name|random
argument_list|()
argument_list|,
name|tokenized
argument_list|,
literal|1000
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
expr_stmt|;
block|}
comment|/** returns a psuedo-random codepoint which is a Decimal Digit */
DECL|method|getRandomDecimalDigit
specifier|public
specifier|static
name|int
name|getRandomDecimalDigit
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
specifier|final
name|int
name|aprox
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|r
argument_list|,
literal|0
argument_list|,
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|get
argument_list|(
name|aprox
argument_list|)
condition|)
block|{
comment|// lucky guess
assert|assert
name|Character
operator|.
name|isDigit
argument_list|(
name|aprox
argument_list|)
assert|;
return|return
name|aprox
return|;
block|}
comment|// seek up and down for closest set bit
specifier|final
name|int
name|lower
init|=
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|prevSetBit
argument_list|(
name|aprox
argument_list|)
decl_stmt|;
specifier|final
name|int
name|higher
init|=
name|DECIMAL_DIGIT_CODEPOINTS
operator|.
name|nextSetBit
argument_list|(
name|aprox
argument_list|)
decl_stmt|;
comment|// sanity check edge cases
if|if
condition|(
name|lower
operator|<
literal|0
condition|)
block|{
assert|assert
name|higher
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
assert|;
assert|assert
name|Character
operator|.
name|isDigit
argument_list|(
name|higher
argument_list|)
assert|;
return|return
name|higher
return|;
block|}
if|if
condition|(
name|higher
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
assert|assert
literal|0
operator|<=
name|lower
assert|;
assert|assert
name|Character
operator|.
name|isDigit
argument_list|(
name|lower
argument_list|)
assert|;
return|return
name|lower
return|;
block|}
comment|// which is closer?
specifier|final
name|int
name|cmp
init|=
name|Integer
operator|.
name|compare
argument_list|(
name|aprox
operator|-
name|lower
argument_list|,
name|higher
operator|-
name|aprox
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|cmp
condition|)
block|{
comment|// dead even, flip a coin
specifier|final
name|int
name|result
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|lower
else|:
name|higher
decl_stmt|;
assert|assert
name|Character
operator|.
name|isDigit
argument_list|(
name|result
argument_list|)
assert|;
return|return
name|result
return|;
block|}
specifier|final
name|int
name|result
init|=
operator|(
name|cmp
operator|<
literal|0
operator|)
condition|?
name|lower
else|:
name|higher
decl_stmt|;
assert|assert
name|Character
operator|.
name|isDigit
argument_list|(
name|result
argument_list|)
assert|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

