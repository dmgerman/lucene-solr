begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.minhash
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|minhash
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|minhash
operator|.
name|MinHashFilter
operator|.
name|FixedSizeTreeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|minhash
operator|.
name|MinHashFilter
operator|.
name|LongPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|CharacterRunAutomaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|RegExp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for {@link MinHashFilter}  */
end_comment

begin_class
DECL|class|MinHashFilterTest
specifier|public
class|class
name|MinHashFilterTest
extends|extends
name|BaseTokenStreamTestCase
block|{
annotation|@
name|Test
DECL|method|testIntHash
specifier|public
name|void
name|testIntHash
parameter_list|()
block|{
name|LongPair
name|hash
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|MinHashFilter
operator|.
name|murmurhash3_x64_128
argument_list|(
name|MinHashFilter
operator|.
name|getBytes
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|3485513579396041028L
argument_list|,
name|hash
operator|.
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6383328099726337777L
argument_list|,
name|hash
operator|.
name|val2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testStringHash
specifier|public
name|void
name|testStringHash
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|LongPair
name|hash
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"woof woof woof woof woof"
operator|.
name|getBytes
argument_list|(
literal|"UTF-16LE"
argument_list|)
decl_stmt|;
name|MinHashFilter
operator|.
name|murmurhash3_x64_128
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|,
literal|0
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|7638079586852243959L
argument_list|,
name|hash
operator|.
name|val1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4378804943379391304L
argument_list|,
name|hash
operator|.
name|val2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testSimpleOrder
specifier|public
name|void
name|testSimpleOrder
parameter_list|()
throws|throws
name|UnsupportedEncodingException
block|{
name|LongPair
name|hash1
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|hash1
operator|.
name|val1
operator|=
literal|1
expr_stmt|;
name|hash1
operator|.
name|val2
operator|=
literal|2
expr_stmt|;
name|LongPair
name|hash2
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|hash2
operator|.
name|val1
operator|=
literal|2
expr_stmt|;
name|hash2
operator|.
name|val2
operator|=
literal|1
expr_stmt|;
assert|assert
operator|(
name|hash1
operator|.
name|compareTo
argument_list|(
name|hash2
argument_list|)
operator|>
literal|0
operator|)
assert|;
block|}
annotation|@
name|Test
DECL|method|testHashOrder
specifier|public
name|void
name|testHashOrder
parameter_list|()
block|{
name|assertTrue
argument_list|(
operator|!
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
literal|0L
argument_list|,
literal|0L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
literal|0L
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
literal|1L
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
operator|-
literal|2L
argument_list|,
operator|-
literal|1L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|,
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|FixedSizeTreeSet
argument_list|<
name|LongPair
argument_list|>
name|minSet
init|=
operator|new
name|FixedSizeTreeSet
argument_list|<
name|LongPair
argument_list|>
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|LongPair
argument_list|>
name|unadded
init|=
operator|new
name|HashSet
argument_list|<
name|LongPair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|LongPair
name|hash
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|MinHashFilter
operator|.
name|murmurhash3_x64_128
argument_list|(
name|MinHashFilter
operator|.
name|getBytes
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|LongPair
name|peek
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|minSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|peek
operator|=
name|minSet
operator|.
name|last
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|minSet
operator|.
name|add
argument_list|(
name|hash
argument_list|)
condition|)
block|{
name|unadded
operator|.
name|add
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|peek
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|minSet
operator|.
name|size
argument_list|()
operator|==
literal|500
operator|)
operator|&&
operator|!
name|peek
operator|.
name|equals
argument_list|(
name|minSet
operator|.
name|last
argument_list|()
argument_list|)
condition|)
block|{
name|unadded
operator|.
name|add
argument_list|(
name|peek
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|minSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|unadded
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|LongPair
argument_list|>
name|collisionDetection
init|=
operator|new
name|HashSet
argument_list|<
name|LongPair
argument_list|>
argument_list|()
decl_stmt|;
name|unadded
operator|=
operator|new
name|HashSet
argument_list|<
name|LongPair
argument_list|>
argument_list|()
expr_stmt|;
name|minSet
operator|=
operator|new
name|FixedSizeTreeSet
argument_list|<
name|LongPair
argument_list|>
argument_list|(
literal|500
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
name|i
operator|++
control|)
block|{
name|LongPair
name|hash
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|MinHashFilter
operator|.
name|murmurhash3_x64_128
argument_list|(
name|MinHashFilter
operator|.
name|getBytes
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|collisionDetection
operator|.
name|add
argument_list|(
name|hash
argument_list|)
expr_stmt|;
name|LongPair
name|peek
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|minSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|peek
operator|=
name|minSet
operator|.
name|last
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|minSet
operator|.
name|add
argument_list|(
name|hash
argument_list|)
condition|)
block|{
name|unadded
operator|.
name|add
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|peek
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|minSet
operator|.
name|size
argument_list|()
operator|==
literal|500
operator|)
operator|&&
operator|!
name|peek
operator|.
name|equals
argument_list|(
name|minSet
operator|.
name|last
argument_list|()
argument_list|)
condition|)
block|{
name|unadded
operator|.
name|add
argument_list|(
name|peek
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|1000000
argument_list|,
name|collisionDetection
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|minSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|999500
argument_list|,
name|unadded
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LongPair
name|last
init|=
literal|null
decl_stmt|;
name|LongPair
name|current
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|current
operator|=
name|minSet
operator|.
name|pollLast
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|isLessThan
argument_list|(
name|current
argument_list|,
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|current
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testHashNotRepeated
specifier|public
name|void
name|testHashNotRepeated
parameter_list|()
block|{
name|FixedSizeTreeSet
argument_list|<
name|LongPair
argument_list|>
name|minSet
init|=
operator|new
name|FixedSizeTreeSet
argument_list|<
name|LongPair
argument_list|>
argument_list|(
literal|500
argument_list|)
decl_stmt|;
name|HashSet
argument_list|<
name|LongPair
argument_list|>
name|unadded
init|=
operator|new
name|HashSet
argument_list|<
name|LongPair
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|LongPair
name|hash
init|=
operator|new
name|LongPair
argument_list|()
decl_stmt|;
name|MinHashFilter
operator|.
name|murmurhash3_x64_128
argument_list|(
name|MinHashFilter
operator|.
name|getBytes
argument_list|(
name|i
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
name|hash
argument_list|)
expr_stmt|;
name|LongPair
name|peek
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|minSet
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|peek
operator|=
name|minSet
operator|.
name|last
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|minSet
operator|.
name|add
argument_list|(
name|hash
argument_list|)
condition|)
block|{
name|unadded
operator|.
name|add
argument_list|(
name|hash
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|peek
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|(
name|minSet
operator|.
name|size
argument_list|()
operator|==
literal|500
operator|)
operator|&&
operator|!
name|peek
operator|.
name|equals
argument_list|(
name|minSet
operator|.
name|last
argument_list|()
argument_list|)
condition|)
block|{
name|unadded
operator|.
name|add
argument_list|(
name|peek
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|assertEquals
argument_list|(
literal|500
argument_list|,
name|minSet
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|LongPair
name|last
init|=
literal|null
decl_stmt|;
name|LongPair
name|current
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|current
operator|=
name|minSet
operator|.
name|pollLast
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
name|assertTrue
argument_list|(
name|isLessThan
argument_list|(
name|current
argument_list|,
name|last
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|current
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testMockShingleTokenizer
specifier|public
name|void
name|testMockShingleTokenizer
parameter_list|()
throws|throws
name|IOException
block|{
name|Tokenizer
name|mockShingleTokenizer
init|=
name|createMockShingleTokenizer
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|mockShingleTokenizer
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"woof woof woof woof woof"
block|,
literal|"woof woof woof woof puff"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenStreamSingleInput
specifier|public
name|void
name|testTokenStreamSingleInput
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|hashes
init|=
operator|new
name|String
index|[]
block|{
literal|"âí½ïªèâêí±æ¯"
block|}
decl_stmt|;
name|TokenStream
name|ts
init|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|hashes
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|24
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|MinHashFilter
operator|.
name|MIN_HASH_TYPE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|}
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|ts
operator|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
operator|new
name|String
index|[]
block|{
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
literal|0
block|,
literal|0
block|,
literal|8449
block|,
literal|54077
block|,
literal|64133
block|,
literal|32857
block|,
literal|8605
block|,
literal|41409
block|}
argument_list|)
block|,
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|16887
block|,
literal|58164
block|,
literal|39536
block|,
literal|14926
block|,
literal|6529
block|,
literal|17276
block|}
argument_list|)
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|24
block|,
literal|24
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|MinHashFilter
operator|.
name|MIN_HASH_TYPE
block|,
name|MinHashFilter
operator|.
name|MIN_HASH_TYPE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|24
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenStream1
specifier|public
name|void
name|testTokenStream1
parameter_list|()
throws|throws
name|IOException
block|{
name|String
index|[]
name|hashes
init|=
operator|new
name|String
index|[]
block|{
literal|"âí½ïªèâêí±æ¯"
block|,
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
literal|36347
block|,
literal|63457
block|,
literal|43013
block|,
literal|56843
block|,
literal|52284
block|,
literal|34231
block|,
literal|57934
block|,
literal|42302
block|}
argument_list|)
block|}
decl_stmt|;
comment|// String is degenerate as
comment|// characters!
name|TokenStream
name|ts
init|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|assertTokenStreamContents
argument_list|(
name|ts
argument_list|,
name|hashes
argument_list|,
operator|new
name|int
index|[]
block|{
literal|0
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|49
block|,
literal|49
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|MinHashFilter
operator|.
name|MIN_HASH_TYPE
block|,
name|MinHashFilter
operator|.
name|MIN_HASH_TYPE
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|}
argument_list|,
literal|49
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|method|getTokens
specifier|private
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getTokens
parameter_list|(
name|TokenStream
name|ts
parameter_list|)
throws|throws
name|IOException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|ts
operator|.
name|reset
argument_list|()
expr_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|CharTermAttribute
name|termAttribute
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|token
init|=
operator|new
name|String
argument_list|(
name|termAttribute
operator|.
name|buffer
argument_list|()
argument_list|,
literal|0
argument_list|,
name|termAttribute
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|token
argument_list|)
expr_stmt|;
block|}
name|ts
operator|.
name|end
argument_list|()
expr_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|tokens
return|;
block|}
annotation|@
name|Test
DECL|method|testTokenStream2
specifier|public
name|void
name|testTokenStream2
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenStream
name|ts
init|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenStream3
specifier|public
name|void
name|testTokenStream3
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenStream
name|ts
init|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenStream4
specifier|public
name|void
name|testTokenStream4
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenStream
name|ts
init|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|getTokens
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testTokenStream5
specifier|public
name|void
name|testTokenStream5
parameter_list|()
throws|throws
name|IOException
block|{
name|TokenStream
name|ts
init|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|tokens
init|=
name|getTokens
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ts
operator|=
name|createTokenStream
argument_list|(
literal|5
argument_list|,
literal|"woof woof woof woof woof"
operator|+
literal|" "
operator|+
literal|"woof woof woof woof puff"
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|tokens
operator|=
name|getTokens
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|ts
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|100
argument_list|,
name|tokens
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|HashSet
argument_list|<
name|String
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|tokens
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|set
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|rolled
init|=
literal|false
decl_stmt|;
name|String
name|first
init|=
literal|null
decl_stmt|;
name|String
name|last
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|current
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|current
expr_stmt|;
block|}
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|rolled
condition|)
block|{
if|if
condition|(
name|current
operator|.
name|compareTo
argument_list|(
name|last
argument_list|)
operator|>=
literal|0
condition|)
block|{
comment|// fine
block|}
elseif|else
if|if
condition|(
name|current
operator|.
name|equals
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|rolled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Incorrect hash order"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|current
operator|.
name|equals
argument_list|(
name|first
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"Incorrect hash order"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|last
operator|=
name|current
expr_stmt|;
block|}
block|}
DECL|method|createTokenStream
specifier|public
specifier|static
name|TokenStream
name|createTokenStream
parameter_list|(
name|int
name|shingleSize
parameter_list|,
name|String
name|shingles
parameter_list|,
name|int
name|hashCount
parameter_list|,
name|int
name|bucketCount
parameter_list|,
name|int
name|hashSetSize
parameter_list|,
name|boolean
name|withRotation
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
name|createMockShingleTokenizer
argument_list|(
name|shingleSize
argument_list|,
name|shingles
argument_list|)
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|lshffargs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|lshffargs
operator|.
name|put
argument_list|(
literal|"hashCount"
argument_list|,
literal|""
operator|+
name|hashCount
argument_list|)
expr_stmt|;
name|lshffargs
operator|.
name|put
argument_list|(
literal|"bucketCount"
argument_list|,
literal|""
operator|+
name|bucketCount
argument_list|)
expr_stmt|;
name|lshffargs
operator|.
name|put
argument_list|(
literal|"hashSetSize"
argument_list|,
literal|""
operator|+
name|hashSetSize
argument_list|)
expr_stmt|;
name|lshffargs
operator|.
name|put
argument_list|(
literal|"withRotation"
argument_list|,
literal|""
operator|+
name|withRotation
argument_list|)
expr_stmt|;
name|MinHashFilterFactory
name|lshff
init|=
operator|new
name|MinHashFilterFactory
argument_list|(
name|lshffargs
argument_list|)
decl_stmt|;
return|return
name|lshff
operator|.
name|create
argument_list|(
name|tokenizer
argument_list|)
return|;
block|}
DECL|method|createMockShingleTokenizer
specifier|private
specifier|static
name|Tokenizer
name|createMockShingleTokenizer
parameter_list|(
name|int
name|shingleSize
parameter_list|,
name|String
name|shingles
parameter_list|)
block|{
name|MockTokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
operator|new
name|CharacterRunAutomaton
argument_list|(
operator|new
name|RegExp
argument_list|(
literal|"[^ \t\r\n]+([ \t\r\n]+[^ \t\r\n]+){"
operator|+
operator|(
name|shingleSize
operator|-
literal|1
operator|)
operator|+
literal|"}"
argument_list|)
operator|.
name|toAutomaton
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|tokenizer
operator|.
name|setEnableChecks
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|shingles
operator|!=
literal|null
condition|)
block|{
name|tokenizer
operator|.
name|setReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|shingles
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenizer
return|;
block|}
DECL|method|isLessThan
specifier|private
name|boolean
name|isLessThan
parameter_list|(
name|LongPair
name|hash1
parameter_list|,
name|LongPair
name|hash2
parameter_list|)
block|{
return|return
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
name|hash1
operator|.
name|val2
argument_list|,
name|hash2
operator|.
name|val2
argument_list|)
operator|||
name|hash1
operator|.
name|val2
operator|==
name|hash2
operator|.
name|val2
operator|&&
operator|(
name|MinHashFilter
operator|.
name|isLessThanUnsigned
argument_list|(
name|hash1
operator|.
name|val1
argument_list|,
name|hash2
operator|.
name|val1
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

