begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.uk
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|uk
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_comment
comment|/**  * Test case for UkrainianAnalyzer.  */
end_comment

begin_class
DECL|class|TestUkrainianAnalyzer
specifier|public
class|class
name|TestUkrainianAnalyzer
extends|extends
name|BaseTokenStreamTestCase
block|{
comment|/** Check that UkrainianAnalyzer doesn't discard any numbers */
DECL|method|testDigitsInUkrainianCharset
specifier|public
name|void
name|testDigitsInUkrainianCharset
parameter_list|()
throws|throws
name|IOException
block|{
name|UkrainianMorfologikAnalyzer
name|ra
init|=
operator|new
name|UkrainianMorfologikAnalyzer
argument_list|()
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|ra
argument_list|,
literal|"text 1000"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"text"
block|,
literal|"1000"
block|}
argument_list|)
expr_stmt|;
name|ra
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testReusableTokenStream
specifier|public
name|void
name|testReusableTokenStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|UkrainianMorfologikAnalyzer
argument_list|()
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"Ð¦Ñ Ð¿'ÑÑÐ°, Ñ ÑÐ²Ð¾Ñ ÑÐµÑÐ³Ñ, ÑÑÑÐ°ÑÑÑÑÑ Ð¿Ð¾ ÐµÐ¼Ð¾ÑÑÐ¹Ð½Ð¾-Ð½Ð°Ð¿ÑÑÐ¶ÐµÐ½Ð¾Ð¼Ñ ÐºÐ¾Ð»Ñ Ð·Ð° ÑÐ¸ÑÐ¼-ÐµÐ½Ð´-Ð±Ð»ÑÐ·Ð¾Ð¼."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Ð¿'ÑÑÐ°"
block|,
literal|"ÑÐµÑÐ³Ð°"
block|,
literal|"ÑÑÑÐ°ÑÐ¸ÑÑ"
block|,
literal|"ÐµÐ¼Ð¾ÑÑÐ¹Ð½Ð¾"
block|,
literal|"Ð½Ð°Ð¿ÑÑÐ¶ÐµÐ½Ð¸Ð¹"
block|,
literal|"ÐºÐ¾Ð»Ð°"
block|,
literal|"ÐºÐ¾Ð»Ð¾"
block|,
literal|"ÐºÑÐ»"
block|,
literal|"ÑÐ¸ÑÐ¼"
block|,
literal|"ÐµÐ½Ð´"
block|,
literal|"Ð±Ð»ÑÐ·"
block|}
argument_list|)
expr_stmt|;
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSpecialCharsTokenStream
specifier|public
name|void
name|testSpecialCharsTokenStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|UkrainianMorfologikAnalyzer
argument_list|()
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"Ð¦Ñ Ð¿Ê¼ÑÑÐ°, Ñ ÑÐ²Ð¾ÌÑ ÑÐµÑÐ³Ñ ÑÑÑÐ°ÑÑÑÑÑ."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Ð¿'ÑÑÐ°"
block|,
literal|"ÑÐµÑÐ³Ð°"
block|,
literal|"ÑÑÑÐ°ÑÐ¸ÑÑ"
block|}
argument_list|)
expr_stmt|;
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testCapsTokenStream
specifier|public
name|void
name|testCapsTokenStream
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|UkrainianMorfologikAnalyzer
argument_list|()
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"Ð¦ÐµÐ¹ Ð§Ð°Ð¹ÐºÐ¾Ð²ÑÑÐºÐ¸Ð¹ Ñ ÒÐµÑÐµ."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"ÑÐ°Ð¹ÐºÐ¾Ð²ÑÑÐºÐ¸Ð¹"
block|,
literal|"ÒÐµÑÐµ"
block|}
argument_list|)
expr_stmt|;
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSampleSentence
specifier|public
name|void
name|testSampleSentence
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|UkrainianMorfologikAnalyzer
argument_list|()
decl_stmt|;
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"Ð¦Ðµ â Ð¿ÑÐ¾ÐµÐºÑ Ð³ÐµÐ½ÐµÑÑÐ²Ð°Ð½Ð½Ñ ÑÐ»Ð¾Ð²Ð½Ð¸ÐºÐ° Ð· ÑÐµÐ³Ð°Ð¼Ð¸ ÑÐ°ÑÑÐ¸Ð½ Ð¼Ð¾Ð²Ð¸ Ð´Ð»Ñ ÑÐºÑÐ°ÑÐ½ÑÑÐºÐ¾Ñ Ð¼Ð¾Ð²Ð¸."
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Ð¿ÑÐ¾ÐµÐºÑ"
block|,
literal|"Ð³ÐµÐ½ÐµÑÑÐ²Ð°Ð½Ð½Ñ"
block|,
literal|"ÑÐ»Ð¾Ð²Ð½Ð¸Ðº"
block|,
literal|"ÑÐµÐ³"
block|,
literal|"ÑÐ°ÑÑÐ¸Ð½Ð°"
block|,
literal|"Ð¼Ð¾Ð²Ð°"
block|,
literal|"ÑÐºÑÐ°ÑÐ½ÑÑÐºÐ°"
block|,
literal|"ÑÐºÑÐ°ÑÐ½ÑÑÐºÐ¸Ð¹"
block|,
literal|"Ð¼Ð¾Ð²Ð°"
block|}
argument_list|)
expr_stmt|;
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** blast some random strings through the analyzer */
DECL|method|testRandomStrings
specifier|public
name|void
name|testRandomStrings
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer
init|=
operator|new
name|UkrainianMorfologikAnalyzer
argument_list|()
decl_stmt|;
name|checkRandomData
argument_list|(
name|random
argument_list|()
argument_list|,
name|analyzer
argument_list|,
literal|1000
operator|*
name|RANDOM_MULTIPLIER
argument_list|)
expr_stmt|;
name|analyzer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

