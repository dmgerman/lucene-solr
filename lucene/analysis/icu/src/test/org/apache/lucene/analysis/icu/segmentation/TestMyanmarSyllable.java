begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.icu.segmentation
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|icu
operator|.
name|segmentation
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|BaseTokenStreamTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_comment
comment|/** Test tokenizing Myanmar text into syllables */
end_comment

begin_class
DECL|class|TestMyanmarSyllable
specifier|public
class|class
name|TestMyanmarSyllable
extends|extends
name|BaseTokenStreamTestCase
block|{
DECL|field|a
name|Analyzer
name|a
decl_stmt|;
annotation|@
name|Override
DECL|method|setUp
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|a
operator|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|ICUTokenizer
argument_list|(
name|newAttributeFactory
argument_list|()
argument_list|,
operator|new
name|DefaultICUTokenizerConfig
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|tearDown
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|a
operator|.
name|close
argument_list|()
expr_stmt|;
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
comment|/** as opposed to dictionary break of áááºáááº|áá¾á¯ááºáá¾á¬á¸|áá±|áá¼á®á¸ */
DECL|method|testBasics
specifier|public
name|void
name|testBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áááºáááºáá¾á¯ááºáá¾á¬á¸áá±áá¼á®á¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áááº"
block|,
literal|"áááº"
block|,
literal|"áá¾á¯ááº"
block|,
literal|"áá¾á¬á¸"
block|,
literal|"áá±"
block|,
literal|"áá¼á®á¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|// simple tests from "A Rule-based Syllable Segmentation of Myanmar Text"
comment|// * http://www.aclweb.org/anthology/I08-3010
comment|// (see also the presentation: http://gii2.nagaokaut.ac.jp/gii/media/share/20080901-ZMM%20Presentation.pdf)
comment|// The words are fake, we just test the categories.
comment|// note that currently our algorithm is not sophisticated enough to handle some of the special cases!
comment|/** constant */
DECL|method|testC
specifier|public
name|void
name|testC
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"á"
block|,
literal|"á"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + sign */
DECL|method|testCF
specifier|public
name|void
name|testCF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá¶áá¶"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá¶"
block|,
literal|"áá¶"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + consonant + asat */
DECL|method|testCCA
specifier|public
name|void
name|testCCA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áááºáááº"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áááº"
block|,
literal|"áááº"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + consonant + asat + sign */
DECL|method|testCCAF
specifier|public
name|void
name|testCCAF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áááºá¸áááºá¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áááºá¸"
block|,
literal|"áááºá¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + vowel */
DECL|method|testCV
specifier|public
name|void
name|testCV
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá¬áá¬"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá¬"
block|,
literal|"áá¬"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + vowel + sign */
DECL|method|testCVF
specifier|public
name|void
name|testCVF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá¬á¸áá¬á¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá¬á¸"
block|,
literal|"áá¬á¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + vowel + vowel + asat */
DECL|method|testCVVA
specifier|public
name|void
name|testCVVA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá±á¬áºáá±á¬áº"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá±á¬áº"
block|,
literal|"áá±á¬áº"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + vowel + vowel + consonant + asat */
DECL|method|testCVVCA
specifier|public
name|void
name|testCVVCA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá±á¬ááºáá±á¬ááº"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá±á¬ááº"
block|,
literal|"áá±á¬ááº"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + vowel + vowel + consonant + asat + sign */
DECL|method|testCVVCAF
specifier|public
name|void
name|testCVVCAF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá±á¬ááºá¸áá±á¬ááºá¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá±á¬ááºá¸"
block|,
literal|"áá±á¬ááºá¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial */
DECL|method|testCM
specifier|public
name|void
name|testCM
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»áá»"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»"
block|,
literal|"áá»"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + sign */
DECL|method|testCMF
specifier|public
name|void
name|testCMF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»á¶áá»á¶"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»á¶"
block|,
literal|"áá»á¶"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + consonant + asat */
DECL|method|testCMCA
specifier|public
name|void
name|testCMCA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»ááºáá»ááº"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»ááº"
block|,
literal|"áá»ááº"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + consonant + asat + sign */
DECL|method|testCMCAF
specifier|public
name|void
name|testCMCAF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»ááºá¸áá»ááºá¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»ááºá¸"
block|,
literal|"áá»ááºá¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + vowel */
DECL|method|testCMV
specifier|public
name|void
name|testCMV
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»á¬áá»á¬"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»á¬"
block|,
literal|"áá»á¬"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + vowel + sign */
DECL|method|testCMVF
specifier|public
name|void
name|testCMVF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»á¬á¸áá»á¬á¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»á¬á¸"
block|,
literal|"áá»á¬á¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + vowel + vowel + asat */
DECL|method|testCMVVA
specifier|public
name|void
name|testCMVVA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá»á±á¬áºáá»á±á¬áº"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá»á±á¬áº"
block|,
literal|"áá»á±á¬áº"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + vowel + vowel + consonant + asat */
DECL|method|testCMVVCA
specifier|public
name|void
name|testCMVVCA
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá¼á±á¬ááºáá¼á±á¬ááº"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá¼á±á¬ááº"
block|,
literal|"áá¼á±á¬ááº"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** consonant + medial + vowel + vowel + consonant + asat + sign */
DECL|method|testCMVVCAF
specifier|public
name|void
name|testCMVVCAF
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áá¼á±á¬ááºá¸áá¼á±á¬ááºá¸"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áá¼á±á¬ááºá¸"
block|,
literal|"áá¼á±á¬ááºá¸"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** independent vowel */
DECL|method|testI
specifier|public
name|void
name|testI
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"áªáª"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"áª"
block|,
literal|"áª"
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** independent vowel */
DECL|method|testE
specifier|public
name|void
name|testE
parameter_list|()
throws|throws
name|Exception
block|{
name|assertAnalyzesTo
argument_list|(
name|a
argument_list|,
literal|"á£á£"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"á£"
block|,
literal|"á£"
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

