begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StringField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MultiReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
operator|.
name|ClassicSimilarity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|LevenshteinAutomata
import|;
end_import

begin_comment
comment|/**  * Tests {@link FuzzyQuery}.  *  */
end_comment

begin_class
DECL|class|TestFuzzyQuery
specifier|public
class|class
name|TestFuzzyQuery
extends|extends
name|LuceneTestCase
block|{
DECL|method|testBasicPrefix
specifier|public
name|void
name|testBasicPrefix
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"abc"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"abc"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testFuzziness
specifier|public
name|void
name|testFuzziness
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"aaaaa"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"aaaab"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"aaabb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"aabbb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"abbbb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"bbbbb"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"ddddd"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// same with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// test scoring
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bbbbb"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3 documents should match"
argument_list|,
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|order
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bbbbb"
argument_list|,
literal|"abbbb"
argument_list|,
literal|"aabbb"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|term
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
comment|//System.out.println(hits[i].score);
name|assertEquals
argument_list|(
name|order
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
comment|// test pq size by supplying maxExpansions=2
comment|// This query would normally return 3 documents, because 3 terms match (see above):
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"bbbbb"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|"only 2 documents should match"
argument_list|,
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|order
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bbbbb"
argument_list|,
literal|"abbbb"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|term
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
comment|//System.out.println(hits[i].score);
name|assertEquals
argument_list|(
name|order
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
comment|// not similar enough:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"xxxxx"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaccc"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// edit distance to "aaaaa" = 3
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// query identical to a word in the index:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaaa"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
comment|// default allows for up to two edits:
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
comment|// query similar to a word in the index:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
comment|// now with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaabb"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaaa"
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"aaaab"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"aaaac"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
comment|// now with prefix
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|,
operator|(
literal|"ddddd"
operator|)
argument_list|)
expr_stmt|;
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// different field = no match:
name|query
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"anotherfield"
argument_list|,
literal|"ddddX"
argument_list|)
argument_list|,
name|FuzzyQuery
operator|.
name|defaultMaxEdits
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|test2
specifier|public
name|void
name|test2
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|KEYWORD
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"LANGE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"LUETH"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"PIRSING"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"RIEGEL"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"TRZECZIAK"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WALKER"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WBR"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEB"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBER"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBERE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBREE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WEBEREI"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WBRE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WITTKOPF"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WOJNAROWSKI"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"WRICKE"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"WEBER"
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
comment|//query.setRewriteMethod(FuzzyQuery.SCORING_BOOLEAN_QUERY_REWRITE);
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|8
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSingleQueryExactMatchScoresHighest
specifier|public
name|void
name|testSingleQueryExactMatchScoresHighest
parameter_list|()
throws|throws
name|Exception
block|{
comment|//See issue LUCENE-329 - IDF shouldn't wreck similarity ranking
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smythe"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"smdssasd"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|ClassicSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|//avoid randomisation of similarity algo by test framework
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|searchTerms
index|[]
init|=
block|{
literal|"smith"
block|,
literal|"smythe"
block|,
literal|"smdssasd"
block|}
decl_stmt|;
for|for
control|(
name|String
name|searchTerm
range|:
name|searchTerms
control|)
block|{
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|searchTerm
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|Document
name|bestDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hits
operator|.
name|length
operator|>
literal|0
argument_list|)
expr_stmt|;
name|String
name|topMatch
init|=
name|bestDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|searchTerm
argument_list|,
name|topMatch
argument_list|)
expr_stmt|;
if|if
condition|(
name|hits
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|Document
name|worstDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|worstMatch
init|=
name|worstDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|searchTerm
argument_list|,
name|worstMatch
argument_list|)
expr_stmt|;
block|}
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testMultipleQueriesIdfWorks
specifier|public
name|void
name|testMultipleQueriesIdfWorks
parameter_list|()
throws|throws
name|Exception
block|{
comment|// With issue LUCENE-329 - it could be argued a MultiTermQuery.TopTermsBoostOnlyBooleanQueryRewrite
comment|// is the solution as it disables IDF.
comment|// However - IDF is still useful as in this case where there are multiple FuzzyQueries.
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"michael smith"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"michael lucero"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"doug cutting"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"doug cuttin"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"michael wardle"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"micheal vegas"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"michael lydon"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setSimilarity
argument_list|(
operator|new
name|ClassicSimilarity
argument_list|()
argument_list|)
expr_stmt|;
comment|//avoid randomisation of similarity algo by test framework
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|BooleanQuery
operator|.
name|Builder
name|query
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|String
name|commonSearchTerm
init|=
literal|"michael"
decl_stmt|;
name|FuzzyQuery
name|commonQuery
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|commonSearchTerm
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|commonQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|String
name|rareSearchTerm
init|=
literal|"cutting"
decl_stmt|;
name|FuzzyQuery
name|rareQuery
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|rareSearchTerm
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|query
operator|.
name|add
argument_list|(
name|rareQuery
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
operator|.
name|build
argument_list|()
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
comment|// Matches on the rare surname should be worth more than matches on the common forename
name|assertEquals
argument_list|(
literal|7
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|Document
name|bestDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|topMatch
init|=
name|bestDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|topMatch
operator|.
name|contains
argument_list|(
name|rareSearchTerm
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|runnerUpDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|runnerUpMatch
init|=
name|runnerUpDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|runnerUpMatch
operator|.
name|contains
argument_list|(
literal|"cuttin"
argument_list|)
argument_list|)
expr_stmt|;
name|Document
name|worstDoc
init|=
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
name|hits
operator|.
name|length
operator|-
literal|1
index|]
operator|.
name|doc
argument_list|)
decl_stmt|;
name|String
name|worstMatch
init|=
name|worstDoc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|worstMatch
operator|.
name|contains
argument_list|(
literal|"micheal"
argument_list|)
argument_list|)
expr_stmt|;
comment|//misspelling of common name
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**     * MultiTermQuery provides (via attribute) information about which values    * must be competitive to enter the priority queue.     *     * FuzzyQuery optimizes itself around this information, if the attribute    * is not implemented correctly, there will be problems!    */
DECL|method|testTieBreaker
specifier|public
name|void
name|testTieBreaker
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"a123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"c123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"d123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"e123456"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|Directory
name|directory2
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer2
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory2
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"a123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"b123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"b123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"b123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"c123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"f123456"
argument_list|,
name|writer2
argument_list|)
expr_stmt|;
name|IndexReader
name|ir1
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexReader
name|ir2
init|=
name|writer2
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|MultiReader
name|mr
init|=
operator|new
name|MultiReader
argument_list|(
name|ir1
argument_list|,
name|ir2
argument_list|)
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|mr
argument_list|)
decl_stmt|;
name|FuzzyQuery
name|fq
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"z123456"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|TopDocs
name|docs
init|=
name|searcher
operator|.
name|search
argument_list|(
name|fq
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|docs
operator|.
name|totalHits
argument_list|)
expr_stmt|;
comment|// 5 docs, from the a and b's
name|mr
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir1
operator|.
name|close
argument_list|()
expr_stmt|;
name|ir2
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|writer2
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/** Test the TopTermsBoostOnlyBooleanQueryRewrite rewrite method. */
DECL|method|testBoostOnlyRewrite
specifier|public
name|void
name|testBoostOnlyRewrite
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|directory
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"Lucene"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Lucene"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Lucenne"
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|writer
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"lucene"
argument_list|)
argument_list|)
decl_stmt|;
name|query
operator|.
name|setRewriteMethod
argument_list|(
operator|new
name|MultiTermQuery
operator|.
name|TopTermsBoostOnlyBooleanQueryRewrite
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
literal|1000
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// normally, 'Lucenne' would be the first result as IDF will skew the score.
name|assertEquals
argument_list|(
literal|"Lucene"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lucene"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
literal|1
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Lucenne"
argument_list|,
name|reader
operator|.
name|document
argument_list|(
name|hits
index|[
literal|2
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testGiga
specifier|public
name|void
name|testGiga
parameter_list|()
throws|throws
name|Exception
block|{
name|MockAnalyzer
name|analyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|Directory
name|index
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"Lucene in Action"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Lucene for Dummies"
argument_list|,
name|w
argument_list|)
expr_stmt|;
comment|//addDoc("Giga", w);
name|addDoc
argument_list|(
literal|"Giga byte"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"ManagingGigabytesManagingGigabyte"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"ManagingGigabytesManagingGigabytes"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"The Art of Computer Science"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"J. K. Rowling"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"JK Rowling"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Joanne K Roling"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Bruce Willis"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Willis bruce"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"Brute willis"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"B. willis"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|IndexReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|Query
name|q
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"giga"
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// 3. search
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Giga byte"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testDistanceAsEditsSearching
specifier|public
name|void
name|testDistanceAsEditsSearching
parameter_list|()
throws|throws
name|Exception
block|{
name|Directory
name|index
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|addDoc
argument_list|(
literal|"foobar"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"test"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|addDoc
argument_list|(
literal|"working"
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|FuzzyQuery
name|q
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"fouba"
argument_list|)
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|ScoreDoc
index|[]
name|hits
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|q
operator|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foubara"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hits
operator|=
name|searcher
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|scoreDocs
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hits
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foobar"
argument_list|,
name|searcher
operator|.
name|doc
argument_list|(
name|hits
index|[
literal|0
index|]
operator|.
name|doc
argument_list|)
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"t"
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|index
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testValidation
specifier|public
name|void
name|testValidation
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxEdits"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
name|LevenshteinAutomata
operator|.
name|MAXIMUM_SUPPORTED_DISTANCE
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxEdits must be between"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"prefixLength cannot be negative"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxExpansions must be positive"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"foo"
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"maxExpansions must be positive"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addDoc
specifier|private
name|void
name|addDoc
parameter_list|(
name|String
name|text
parameter_list|,
name|RandomIndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|newTextField
argument_list|(
literal|"field"
argument_list|,
name|text
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
DECL|method|randomSimpleString
specifier|private
name|String
name|randomSimpleString
parameter_list|(
name|int
name|digits
parameter_list|)
block|{
name|int
name|termLength
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
name|termLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|termLength
condition|;
name|i
operator|++
control|)
block|{
name|chars
index|[
name|i
index|]
operator|=
call|(
name|char
call|)
argument_list|(
literal|'a'
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|digits
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
argument_list|(
name|chars
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"unchecked"
block|,
literal|"rawtypes"
block|}
argument_list|)
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|numTerms
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|int
name|digits
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|terms
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
name|terms
operator|.
name|size
argument_list|()
operator|<
name|numTerms
condition|)
block|{
name|terms
operator|.
name|add
argument_list|(
name|randomSimpleString
argument_list|(
name|digits
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|StringField
argument_list|(
literal|"field"
argument_list|,
name|term
argument_list|,
name|Field
operator|.
name|Store
operator|.
name|YES
argument_list|)
argument_list|)
expr_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|DirectoryReader
name|r
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|IndexSearcher
name|s
init|=
name|newSearcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
name|iter
operator|++
control|)
block|{
name|String
name|queryTerm
init|=
name|randomSimpleString
argument_list|(
name|digits
argument_list|)
decl_stmt|;
name|int
name|prefixLength
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|queryTerm
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|queryPrefix
init|=
name|queryTerm
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|prefixLength
argument_list|)
decl_stmt|;
comment|// we don't look at scores here:
name|Set
argument_list|<
name|String
argument_list|>
index|[]
name|expected
init|=
operator|new
name|Set
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|ed
init|=
literal|0
init|;
name|ed
operator|<
literal|3
condition|;
name|ed
operator|++
control|)
block|{
name|expected
index|[
name|ed
index|]
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|term
range|:
name|terms
control|)
block|{
if|if
condition|(
name|term
operator|.
name|startsWith
argument_list|(
name|queryPrefix
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue;
block|}
name|int
name|ed
init|=
name|getDistance
argument_list|(
name|term
argument_list|,
name|queryTerm
argument_list|)
decl_stmt|;
if|if
condition|(
name|Math
operator|.
name|min
argument_list|(
name|queryTerm
operator|.
name|length
argument_list|()
argument_list|,
name|term
operator|.
name|length
argument_list|()
argument_list|)
operator|>
name|ed
condition|)
block|{
while|while
condition|(
name|ed
operator|<
literal|3
condition|)
block|{
name|expected
index|[
name|ed
index|]
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|ed
operator|++
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|int
name|ed
init|=
literal|0
init|;
name|ed
operator|<
literal|3
condition|;
name|ed
operator|++
control|)
block|{
name|FuzzyQuery
name|query
init|=
operator|new
name|FuzzyQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
name|queryTerm
argument_list|)
argument_list|,
name|ed
argument_list|,
name|prefixLength
argument_list|,
name|terms
operator|.
name|size
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|TopDocs
name|hits
init|=
name|s
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|terms
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|actual
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScoreDoc
name|hit
range|:
name|hits
operator|.
name|scoreDocs
control|)
block|{
name|Document
name|doc
init|=
name|s
operator|.
name|doc
argument_list|(
name|hit
operator|.
name|doc
argument_list|)
decl_stmt|;
name|actual
operator|.
name|add
argument_list|(
name|doc
operator|.
name|get
argument_list|(
literal|"field"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|actual
operator|.
name|equals
argument_list|(
name|expected
index|[
name|ed
index|]
argument_list|)
operator|==
literal|false
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"FAILED: query="
operator|+
name|queryTerm
operator|+
literal|" ed="
operator|+
name|ed
operator|+
literal|" prefixLength="
operator|+
name|prefixLength
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|term
range|:
name|actual
control|)
block|{
if|if
condition|(
name|expected
index|[
name|ed
index|]
operator|.
name|contains
argument_list|(
name|term
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"  these matched but shouldn't:\n"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    "
operator|+
name|term
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|first
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|String
name|term
range|:
name|expected
index|[
name|ed
index|]
control|)
block|{
if|if
condition|(
name|actual
operator|.
name|contains
argument_list|(
name|term
argument_list|)
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"  these did not match but should:\n"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"    "
operator|+
name|term
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|IOUtils
operator|.
name|close
argument_list|(
name|r
argument_list|,
name|w
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
comment|// Poached from LuceneLevenshteinDistance.java (from suggest module): it supports transpositions (treats them as ed=1, not ed=2)
DECL|method|getDistance
specifier|private
specifier|static
name|int
name|getDistance
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|other
parameter_list|)
block|{
name|IntsRef
name|targetPoints
decl_stmt|;
name|IntsRef
name|otherPoints
decl_stmt|;
name|int
name|n
decl_stmt|;
name|int
name|d
index|[]
index|[]
decl_stmt|;
comment|// cost array
comment|// NOTE: if we cared, we could 3*m space instead of m*n space, similar to
comment|// what LevenshteinDistance does, except cycling thru a ring of three
comment|// horizontal cost arrays... but this comparator is never actually used by
comment|// DirectSpellChecker, it's only used for merging results from multiple shards
comment|// in "distributed spellcheck", and it's inefficient in other ways too...
comment|// cheaper to do this up front once
name|targetPoints
operator|=
name|toIntsRef
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|otherPoints
operator|=
name|toIntsRef
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|n
operator|=
name|targetPoints
operator|.
name|length
expr_stmt|;
specifier|final
name|int
name|m
init|=
name|otherPoints
operator|.
name|length
decl_stmt|;
name|d
operator|=
operator|new
name|int
index|[
name|n
operator|+
literal|1
index|]
index|[
name|m
operator|+
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|0
operator|||
name|m
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|n
operator|==
name|m
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
name|n
argument_list|,
name|m
argument_list|)
return|;
block|}
block|}
comment|// indexes into strings s and t
name|int
name|i
decl_stmt|;
comment|// iterates through s
name|int
name|j
decl_stmt|;
comment|// iterates through t
name|int
name|t_j
decl_stmt|;
comment|// jth character of t
name|int
name|cost
decl_stmt|;
comment|// cost
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|d
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
block|}
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<=
name|m
condition|;
name|j
operator|++
control|)
block|{
name|d
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
name|j
expr_stmt|;
block|}
for|for
control|(
name|j
operator|=
literal|1
init|;
name|j
operator|<=
name|m
condition|;
name|j
operator|++
control|)
block|{
name|t_j
operator|=
name|otherPoints
operator|.
name|ints
index|[
name|j
operator|-
literal|1
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|cost
operator|=
name|targetPoints
operator|.
name|ints
index|[
name|i
operator|-
literal|1
index|]
operator|==
name|t_j
condition|?
literal|0
else|:
literal|1
expr_stmt|;
comment|// minimum of cell to the left+1, to the top+1, diagonally left and up +cost
name|d
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
index|]
operator|+
literal|1
argument_list|,
name|d
index|[
name|i
index|]
index|[
name|j
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|)
argument_list|,
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
operator|-
literal|1
index|]
operator|+
name|cost
argument_list|)
expr_stmt|;
comment|// transposition
if|if
condition|(
name|i
operator|>
literal|1
operator|&&
name|j
operator|>
literal|1
operator|&&
name|targetPoints
operator|.
name|ints
index|[
name|i
operator|-
literal|1
index|]
operator|==
name|otherPoints
operator|.
name|ints
index|[
name|j
operator|-
literal|2
index|]
operator|&&
name|targetPoints
operator|.
name|ints
index|[
name|i
operator|-
literal|2
index|]
operator|==
name|otherPoints
operator|.
name|ints
index|[
name|j
operator|-
literal|1
index|]
condition|)
block|{
name|d
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|d
index|[
name|i
index|]
index|[
name|j
index|]
argument_list|,
name|d
index|[
name|i
operator|-
literal|2
index|]
index|[
name|j
operator|-
literal|2
index|]
operator|+
name|cost
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|d
index|[
name|n
index|]
index|[
name|m
index|]
return|;
block|}
DECL|method|toIntsRef
specifier|private
specifier|static
name|IntsRef
name|toIntsRef
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|IntsRef
name|ref
init|=
operator|new
name|IntsRef
argument_list|(
name|s
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
comment|// worst case
name|int
name|utf16Len
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|cp
init|=
literal|0
init|;
name|i
operator|<
name|utf16Len
condition|;
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|cp
argument_list|)
control|)
block|{
name|cp
operator|=
name|ref
operator|.
name|ints
index|[
name|ref
operator|.
name|length
operator|++
index|]
operator|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|ref
return|;
block|}
block|}
end_class

end_unit

