begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|LongPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|NumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedNumericDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|SortedSetDocValuesField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_class
DECL|class|TestDocValuesQueries
specifier|public
class|class
name|TestDocValuesQueries
extends|extends
name|LuceneTestCase
block|{
DECL|method|testDuelPointRangeSortedNumericRangeQuery
specifier|public
name|void
name|testDuelPointRangeSortedNumericRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestDuelPointRangeNumericRangeQuery
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelPointRangeMultivaluedSortedNumericRangeQuery
specifier|public
name|void
name|testDuelPointRangeMultivaluedSortedNumericRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestDuelPointRangeNumericRangeQuery
argument_list|(
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelPointRangeNumericRangeQuery
specifier|public
name|void
name|testDuelPointRangeNumericRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestDuelPointRangeNumericRangeQuery
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|doTestDuelPointRangeNumericRangeQuery
specifier|private
name|void
name|doTestDuelPointRangeNumericRangeQuery
parameter_list|(
name|boolean
name|sortedNumeric
parameter_list|,
name|int
name|maxValuesPerDoc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxValuesPerDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|long
name|value
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
if|if
condition|(
name|sortedNumeric
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"dv"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|NumericDocValuesField
argument_list|(
literal|"dv"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"idx"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|iw
operator|.
name|deleteDocuments
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"idx"
argument_list|,
literal|0L
argument_list|,
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|min
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|long
name|max
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|q1
init|=
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"idx"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|q2
decl_stmt|;
if|if
condition|(
name|sortedNumeric
condition|)
block|{
name|q2
operator|=
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"dv"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q2
operator|=
name|NumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"dv"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
name|assertSameMatches
argument_list|(
name|searcher
argument_list|,
name|q1
argument_list|,
name|q2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|doTestDuelPointRangeSortedRangeQuery
specifier|private
name|void
name|doTestDuelPointRangeSortedRangeQuery
parameter_list|(
name|boolean
name|sortedSet
parameter_list|,
name|int
name|maxValuesPerDoc
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|atLeast
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
specifier|final
name|int
name|numValues
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|maxValuesPerDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numValues
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|long
name|value
init|=
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encoded
init|=
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
decl_stmt|;
name|LongPoint
operator|.
name|encodeDimension
argument_list|(
name|value
argument_list|,
name|encoded
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortedSet
condition|)
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedSetDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|encoded
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedDocValuesField
argument_list|(
literal|"dv"
argument_list|,
operator|new
name|BytesRef
argument_list|(
name|encoded
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|add
argument_list|(
operator|new
name|LongPoint
argument_list|(
literal|"idx"
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|iw
operator|.
name|deleteDocuments
argument_list|(
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"idx"
argument_list|,
literal|0L
argument_list|,
literal|10L
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IndexReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|long
name|min
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Long
operator|.
name|MIN_VALUE
else|:
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|long
name|max
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
name|Long
operator|.
name|MAX_VALUE
else|:
name|TestUtil
operator|.
name|nextLong
argument_list|(
name|random
argument_list|()
argument_list|,
operator|-
literal|100
argument_list|,
literal|10000
argument_list|)
decl_stmt|;
name|byte
index|[]
name|encodedMin
init|=
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
decl_stmt|;
name|byte
index|[]
name|encodedMax
init|=
operator|new
name|byte
index|[
name|Long
operator|.
name|BYTES
index|]
decl_stmt|;
name|LongPoint
operator|.
name|encodeDimension
argument_list|(
name|min
argument_list|,
name|encodedMin
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|LongPoint
operator|.
name|encodeDimension
argument_list|(
name|max
argument_list|,
name|encodedMax
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|boolean
name|includeMin
init|=
literal|true
decl_stmt|;
name|boolean
name|includeMax
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|includeMin
operator|=
literal|false
expr_stmt|;
name|min
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|includeMax
operator|=
literal|false
expr_stmt|;
name|max
operator|--
expr_stmt|;
block|}
specifier|final
name|Query
name|q1
init|=
name|LongPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"idx"
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
specifier|final
name|Query
name|q2
decl_stmt|;
if|if
condition|(
name|sortedSet
condition|)
block|{
name|q2
operator|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"dv"
argument_list|,
name|min
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|encodedMin
argument_list|)
argument_list|,
name|max
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|encodedMax
argument_list|)
argument_list|,
name|includeMin
argument_list|,
name|includeMax
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|q2
operator|=
name|SortedDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"dv"
argument_list|,
name|min
operator|==
name|Long
operator|.
name|MIN_VALUE
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|encodedMin
argument_list|)
argument_list|,
name|max
operator|==
name|Long
operator|.
name|MAX_VALUE
operator|&&
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|?
literal|null
else|:
operator|new
name|BytesRef
argument_list|(
name|encodedMax
argument_list|)
argument_list|,
name|includeMin
argument_list|,
name|includeMax
argument_list|)
expr_stmt|;
block|}
name|assertSameMatches
argument_list|(
name|searcher
argument_list|,
name|q1
argument_list|,
name|q2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|testDuelPointRangeSortedSetRangeQuery
specifier|public
name|void
name|testDuelPointRangeSortedSetRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestDuelPointRangeSortedRangeQuery
argument_list|(
literal|true
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelPointRangeMultivaluedSortedSetRangeQuery
specifier|public
name|void
name|testDuelPointRangeMultivaluedSortedSetRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestDuelPointRangeSortedRangeQuery
argument_list|(
literal|true
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelPointRangeSortedRangeQuery
specifier|public
name|void
name|testDuelPointRangeSortedRangeQuery
parameter_list|()
throws|throws
name|IOException
block|{
name|doTestDuelPointRangeSortedRangeQuery
argument_list|(
literal|false
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|method|assertSameMatches
specifier|private
name|void
name|assertSameMatches
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|Query
name|q1
parameter_list|,
name|Query
name|q2
parameter_list|,
name|boolean
name|scores
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|maxDoc
init|=
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|maxDoc
argument_list|()
decl_stmt|;
specifier|final
name|TopDocs
name|td1
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q1
argument_list|,
name|maxDoc
argument_list|,
name|scores
condition|?
name|Sort
operator|.
name|RELEVANCE
else|:
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
specifier|final
name|TopDocs
name|td2
init|=
name|searcher
operator|.
name|search
argument_list|(
name|q2
argument_list|,
name|maxDoc
argument_list|,
name|scores
condition|?
name|Sort
operator|.
name|RELEVANCE
else|:
name|Sort
operator|.
name|INDEXORDER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|td1
operator|.
name|totalHits
argument_list|,
name|td2
operator|.
name|totalHits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|td1
operator|.
name|scoreDocs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|assertEquals
argument_list|(
name|td1
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|,
name|td2
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|doc
argument_list|)
expr_stmt|;
if|if
condition|(
name|scores
condition|)
block|{
name|assertEquals
argument_list|(
name|td1
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
name|td2
operator|.
name|scoreDocs
index|[
name|i
index|]
operator|.
name|score
argument_list|,
literal|10e-7
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|Query
name|q1
init|=
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
name|q1
argument_list|,
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|q1
argument_list|,
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|q1
argument_list|,
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|4
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|q1
argument_list|,
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"bar"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|q2
init|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
name|q2
argument_list|,
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|q2
argument_list|,
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|q2
argument_list|,
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkUnequal
argument_list|(
name|q2
argument_list|,
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"quux"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|Query
name|q1
init|=
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|3
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo:[3 TO 5]"
argument_list|,
name|q1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"[3 TO 5]"
argument_list|,
name|q1
operator|.
name|toString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:[3 TO 5]"
argument_list|,
name|q1
operator|.
name|toString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|q2
init|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo:[[62 61 72] TO [62 61 7a]]"
argument_list|,
name|q2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q2
operator|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:{[62 61 72] TO [62 61 7a]]"
argument_list|,
name|q2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q2
operator|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:{[62 61 72] TO [62 61 7a]}"
argument_list|,
name|q2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q2
operator|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:[[62 61 72] TO *}"
argument_list|,
name|q2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|q2
operator|=
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|null
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:{* TO [62 61 7a]]"
argument_list|,
name|q2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{* TO [62 61 7a]]"
argument_list|,
name|q2
operator|.
name|toString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo:{* TO [62 61 7a]]"
argument_list|,
name|q2
operator|.
name|toString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testMissingField
specifier|public
name|void
name|testMissingField
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
for|for
control|(
name|Query
name|query
range|:
name|Arrays
operator|.
name|asList
argument_list|(
name|NumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
literal|2
argument_list|,
literal|4
argument_list|)
argument_list|,
name|SortedDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bcd"
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|,
name|SortedSetDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"foo"
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|new
name|BytesRef
argument_list|(
literal|"bcd"
argument_list|)
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
argument_list|)
control|)
block|{
name|Weight
name|w
init|=
name|searcher
operator|.
name|createNormalizedWeight
argument_list|(
name|query
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|w
operator|.
name|scorer
argument_list|(
name|searcher
operator|.
name|getIndexReader
argument_list|()
operator|.
name|leaves
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|method|testSortedNumericNPE
specifier|public
name|void
name|testSortedNumericNPE
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|iw
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|double
index|[]
name|nums
init|=
block|{
operator|-
literal|1.7147449030215377E
operator|-
literal|208
block|,
operator|-
literal|1.6887024655302576E
operator|-
literal|11
block|,
literal|1.534911516604164E113
block|,
literal|0.0
block|,
literal|2.6947996404505155E
operator|-
literal|166
block|,
operator|-
literal|2.649722021970773E306
block|,
literal|6.138239235731689E
operator|-
literal|198
block|,
literal|2.3967090122610808E111
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nums
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
operator|new
name|SortedNumericDocValuesField
argument_list|(
literal|"dv"
argument_list|,
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
name|nums
index|[
name|i
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|iw
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|iw
operator|.
name|commit
argument_list|()
expr_stmt|;
specifier|final
name|IndexReader
name|reader
init|=
name|iw
operator|.
name|getReader
argument_list|()
decl_stmt|;
specifier|final
name|IndexSearcher
name|searcher
init|=
name|newSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|iw
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|long
name|lo
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
literal|8.701032080293731E
operator|-
literal|226
argument_list|)
decl_stmt|;
specifier|final
name|long
name|hi
init|=
name|NumericUtils
operator|.
name|doubleToSortableLong
argument_list|(
literal|2.0801416404385346E
operator|-
literal|41
argument_list|)
decl_stmt|;
name|Query
name|query
init|=
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"dv"
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
decl_stmt|;
comment|// TODO: assert expected matches
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|searcher
operator|.
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
comment|// swap order, should still work
name|query
operator|=
name|SortedNumericDocValuesField
operator|.
name|newRangeQuery
argument_list|(
literal|"dv"
argument_list|,
name|hi
argument_list|,
name|lo
argument_list|)
expr_stmt|;
comment|// TODO: assert expected matches
name|searcher
operator|.
name|search
argument_list|(
name|query
argument_list|,
name|searcher
operator|.
name|reader
operator|.
name|maxDoc
argument_list|()
argument_list|,
name|Sort
operator|.
name|INDEXORDER
argument_list|)
expr_stmt|;
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

