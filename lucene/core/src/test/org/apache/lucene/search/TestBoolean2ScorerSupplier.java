begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|carrotsearch
operator|.
name|randomizedtesting
operator|.
name|generators
operator|.
name|RandomPicks
import|;
end_import

begin_class
DECL|class|TestBoolean2ScorerSupplier
specifier|public
class|class
name|TestBoolean2ScorerSupplier
extends|extends
name|LuceneTestCase
block|{
DECL|class|FakeScorer
specifier|private
specifier|static
class|class
name|FakeScorer
extends|extends
name|Scorer
block|{
DECL|field|it
specifier|private
specifier|final
name|DocIdSetIterator
name|it
decl_stmt|;
DECL|method|FakeScorer
name|FakeScorer
parameter_list|(
name|long
name|cost
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|it
operator|=
name|DocIdSetIterator
operator|.
name|all
argument_list|(
name|Math
operator|.
name|toIntExact
argument_list|(
name|cost
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|it
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|freq
specifier|public
name|int
name|freq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|it
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FakeScorer(cost="
operator|+
name|it
operator|.
name|cost
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
DECL|class|FakeScorerSupplier
specifier|private
specifier|static
class|class
name|FakeScorerSupplier
extends|extends
name|ScorerSupplier
block|{
DECL|field|cost
specifier|private
specifier|final
name|long
name|cost
decl_stmt|;
DECL|field|randomAccess
specifier|private
specifier|final
name|Boolean
name|randomAccess
decl_stmt|;
DECL|method|FakeScorerSupplier
name|FakeScorerSupplier
parameter_list|(
name|long
name|cost
parameter_list|)
block|{
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
name|this
operator|.
name|randomAccess
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|FakeScorerSupplier
name|FakeScorerSupplier
parameter_list|(
name|long
name|cost
parameter_list|,
name|boolean
name|randomAccess
parameter_list|)
block|{
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
name|this
operator|.
name|randomAccess
operator|=
name|randomAccess
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|get
specifier|public
name|Scorer
name|get
parameter_list|(
name|boolean
name|randomAccess
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|this
operator|.
name|randomAccess
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|this
operator|.
name|toString
argument_list|()
argument_list|,
name|this
operator|.
name|randomAccess
argument_list|,
name|randomAccess
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FakeScorer
argument_list|(
name|cost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"FakeLazyScorer(cost="
operator|+
name|cost
operator|+
literal|",randomAccess="
operator|+
name|randomAccess
operator|+
literal|")"
return|;
block|}
block|}
DECL|method|testConjunctionCost
specifier|public
name|void
name|testConjunctionCost
parameter_list|()
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
argument_list|,
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunctionCost
specifier|public
name|void
name|testDisjunctionCost
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|ScorerSupplier
name|s
init|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDisjunctionWithMinShouldMatchCost
specifier|public
name|void
name|testDisjunctionWithMinShouldMatchCost
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|)
argument_list|)
expr_stmt|;
name|ScorerSupplier
name|s
init|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
operator|+
literal|20
operator|+
literal|30
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
operator|+
literal|12
operator|+
literal|20
operator|+
literal|30
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|+
literal|20
operator|+
literal|30
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|+
literal|20
operator|+
literal|30
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|s
operator|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|12
operator|+
literal|20
argument_list|,
name|s
operator|.
name|get
argument_list|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testDuelCost
specifier|public
name|void
name|testDuelCost
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
name|iters
init|=
name|atLeast
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
name|iters
condition|;
operator|++
name|iter
control|)
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|numClauses
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|int
name|numShoulds
init|=
literal|0
decl_stmt|;
name|int
name|numRequired
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numClauses
condition|;
operator|++
name|j
control|)
block|{
name|Occur
name|occur
init|=
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Occur
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|occur
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|occur
operator|==
name|Occur
operator|.
name|SHOULD
condition|)
block|{
operator|++
name|numShoulds
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|occur
operator|==
name|Occur
operator|.
name|FILTER
operator|||
name|occur
operator|==
name|Occur
operator|.
name|MUST
condition|)
block|{
name|numRequired
operator|++
expr_stmt|;
block|}
block|}
name|boolean
name|needsScores
init|=
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
decl_stmt|;
if|if
condition|(
name|needsScores
operator|==
literal|false
operator|&&
name|numRequired
operator|>
literal|0
condition|)
block|{
name|numClauses
operator|-=
name|numShoulds
expr_stmt|;
name|numShoulds
operator|=
literal|0
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|numShoulds
operator|+
name|numRequired
operator|==
literal|0
condition|)
block|{
comment|// only negative clauses, invalid
continue|continue;
block|}
name|int
name|minShouldMatch
init|=
name|numShoulds
operator|==
literal|0
condition|?
literal|0
else|:
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|numShoulds
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Boolean2ScorerSupplier
name|supplier
init|=
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|needsScores
argument_list|,
name|minShouldMatch
argument_list|)
decl_stmt|;
name|long
name|cost1
init|=
name|supplier
operator|.
name|cost
argument_list|()
decl_stmt|;
name|long
name|cost2
init|=
name|supplier
operator|.
name|get
argument_list|(
literal|false
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|cost
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"clauses="
operator|+
name|subs
operator|+
literal|", minShouldMatch="
operator|+
name|minShouldMatch
argument_list|,
name|cost1
argument_list|,
name|cost2
argument_list|)
expr_stmt|;
block|}
block|}
comment|// test the tester...
DECL|method|testFakeScorerSupplier
specifier|public
name|void
name|testFakeScorerSupplier
parameter_list|()
block|{
name|FakeScorerSupplier
name|randomAccessSupplier
init|=
operator|new
name|FakeScorerSupplier
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|randomAccessSupplier
operator|.
name|get
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|FakeScorerSupplier
name|sequentialSupplier
init|=
operator|new
name|FakeScorerSupplier
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|AssertionError
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|sequentialSupplier
operator|.
name|get
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testConjunctionRandomAccess
specifier|public
name|void
name|testConjunctionRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If sequential access is required, only the least costly clause does not use random-access
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
name|subs
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// If random access is required, then we propagate to sub clauses
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|RandomPicks
operator|.
name|randomFrom
argument_list|(
name|random
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Occur
operator|.
name|FILTER
argument_list|,
name|Occur
operator|.
name|MUST
argument_list|)
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
block|}
DECL|method|testDisjunctionRandomAccess
specifier|public
name|void
name|testDisjunctionRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
comment|// disjunctions propagate
for|for
control|(
name|boolean
name|randomAccess
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
name|randomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
name|randomAccess
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|randomAccess
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
block|}
block|}
DECL|method|testDisjunctionWithMinShouldMatchRandomAccess
specifier|public
name|void
name|testDisjunctionWithMinShouldMatchRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Only the most costly clause uses random-access in that case:
comment|// most of time, we will find agreement between the 2 least costly
comment|// clauses and only then check whether the 3rd one matches too
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|30
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
name|subs
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// When random-access is true, just propagate
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|30
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
name|subs
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|30
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|2
argument_list|)
operator|.
name|get
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
name|subs
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
expr_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|12
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|30
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|20
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|3
argument_list|)
operator|.
name|get
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
block|}
DECL|method|testProhibitedRandomAccess
specifier|public
name|void
name|testProhibitedRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|boolean
name|randomAccess
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The MUST_NOT clause always uses random-access
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
name|randomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|MUST_NOT
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|randomAccess
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
block|}
block|}
DECL|method|testMixedRandomAccess
specifier|public
name|void
name|testMixedRandomAccess
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|boolean
name|randomAccess
range|:
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|true
block|}
control|)
block|{
name|Map
argument_list|<
name|Occur
argument_list|,
name|Collection
argument_list|<
name|ScorerSupplier
argument_list|>
argument_list|>
name|subs
init|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|Occur
operator|.
name|class
argument_list|)
decl_stmt|;
for|for
control|(
name|Occur
name|occur
range|:
name|Occur
operator|.
name|values
argument_list|()
control|)
block|{
name|subs
operator|.
name|put
argument_list|(
name|occur
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The SHOULD clause always uses random-access if there is a MUST clause
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|MUST
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
literal|42
argument_list|,
name|randomAccess
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|get
argument_list|(
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|FakeScorerSupplier
argument_list|(
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
operator|new
name|Boolean2ScorerSupplier
argument_list|(
literal|null
argument_list|,
name|subs
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
operator|.
name|get
argument_list|(
name|randomAccess
argument_list|)
expr_stmt|;
comment|// triggers assertions as a side-effect
block|}
block|}
block|}
end_class

end_unit

