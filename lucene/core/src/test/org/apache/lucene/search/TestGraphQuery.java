begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
DECL|class|TestGraphQuery
specifier|public
class|class
name|TestGraphQuery
extends|extends
name|LuceneTestCase
block|{
DECL|method|testEquals
specifier|public
name|void
name|testEquals
parameter_list|()
block|{
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|GraphQuery
argument_list|()
argument_list|,
operator|new
name|GraphQuery
argument_list|()
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
argument_list|,
operator|new
name|GraphQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|,
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanDetection
specifier|public
name|void
name|testBooleanDetection
parameter_list|()
block|{
name|assertFalse
argument_list|(
operator|new
name|GraphQuery
argument_list|()
operator|.
name|hasBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|hasBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|hasBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testPhraseDetection
specifier|public
name|void
name|testPhraseDetection
parameter_list|()
block|{
name|assertFalse
argument_list|(
operator|new
name|GraphQuery
argument_list|()
operator|.
name|hasPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|hasPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|hasPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|hasPhrase
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testToString
specifier|public
name|void
name|testToString
parameter_list|()
block|{
name|assertEquals
argument_list|(
literal|"Graph(hasBoolean=false, hasPhrase=false)"
argument_list|,
operator|new
name|GraphQuery
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Graph(a:a, a:b, hasBoolean=true, hasPhrase=false)"
argument_list|,
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Graph(a:\"a b\", a:b, hasBoolean=true, hasPhrase=true)"
argument_list|,
operator|new
name|GraphQuery
argument_list|(
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|method|testRewrite
specifier|public
name|void
name|testRewrite
parameter_list|()
throws|throws
name|IOException
block|{
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|GraphQuery
argument_list|()
operator|.
name|rewrite
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|rewrite
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|QueryUtils
operator|.
name|checkEqual
argument_list|(
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
argument_list|,
operator|new
name|GraphQuery
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"a"
argument_list|,
literal|"a"
argument_list|)
argument_list|)
argument_list|,
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"b"
argument_list|,
literal|"b"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|rewrite
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

