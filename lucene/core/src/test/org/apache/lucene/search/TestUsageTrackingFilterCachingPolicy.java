begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|IntPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
operator|.
name|Occur
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
DECL|class|TestUsageTrackingFilterCachingPolicy
specifier|public
class|class
name|TestUsageTrackingFilterCachingPolicy
extends|extends
name|LuceneTestCase
block|{
DECL|method|testCostlyFilter
specifier|public
name|void
name|testCostlyFilter
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|UsageTrackingQueryCachingPolicy
operator|.
name|isCostly
argument_list|(
operator|new
name|PrefixQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"prefix"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|UsageTrackingQueryCachingPolicy
operator|.
name|isCostly
argument_list|(
name|IntPoint
operator|.
name|newRangeQuery
argument_list|(
literal|"intField"
argument_list|,
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|UsageTrackingQueryCachingPolicy
operator|.
name|isCostly
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"value"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNeverCacheMatchAll
specifier|public
name|void
name|testNeverCacheMatchAll
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|q
init|=
operator|new
name|MatchAllDocsQuery
argument_list|()
decl_stmt|;
name|UsageTrackingQueryCachingPolicy
name|policy
init|=
operator|new
name|UsageTrackingQueryCachingPolicy
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|policy
operator|.
name|onUse
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|policy
operator|.
name|shouldCache
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testNeverCacheTermFilter
specifier|public
name|void
name|testNeverCacheTermFilter
parameter_list|()
throws|throws
name|IOException
block|{
name|Query
name|q
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
argument_list|)
decl_stmt|;
name|UsageTrackingQueryCachingPolicy
name|policy
init|=
operator|new
name|UsageTrackingQueryCachingPolicy
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|policy
operator|.
name|onUse
argument_list|(
name|q
argument_list|)
expr_stmt|;
block|}
name|assertFalse
argument_list|(
name|policy
operator|.
name|shouldCache
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testBooleanQueries
specifier|public
name|void
name|testBooleanQueries
parameter_list|()
throws|throws
name|IOException
block|{
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|w
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|w
operator|.
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
name|IndexReader
name|reader
init|=
name|w
operator|.
name|getReader
argument_list|()
decl_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|IndexSearcher
name|searcher
init|=
operator|new
name|IndexSearcher
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|UsageTrackingQueryCachingPolicy
name|policy
init|=
operator|new
name|UsageTrackingQueryCachingPolicy
argument_list|()
decl_stmt|;
name|LRUQueryCache
name|cache
init|=
operator|new
name|LRUQueryCache
argument_list|(
literal|10
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
operator|new
name|LRUQueryCache
operator|.
name|MinSegmentSizePredicate
argument_list|(
literal|1
argument_list|,
literal|0f
argument_list|)
argument_list|)
decl_stmt|;
name|searcher
operator|.
name|setQueryCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|searcher
operator|.
name|setQueryCachingPolicy
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|DummyQuery
name|q1
init|=
operator|new
name|DummyQuery
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|DummyQuery
name|q2
init|=
operator|new
name|DummyQuery
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|BooleanQuery
name|bq
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|add
argument_list|(
name|q1
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|add
argument_list|(
name|q2
argument_list|,
name|Occur
operator|.
name|SHOULD
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|searcher
operator|.
name|count
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// nothing cached yet, too early
name|searcher
operator|.
name|count
argument_list|(
name|bq
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// the bq got cached, but not q1 and q2
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|searcher
operator|.
name|count
argument_list|(
name|bq
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|cache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// q1 and q2 still not cached since we do not pull scorers on them
name|searcher
operator|.
name|count
argument_list|(
name|q1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cache
operator|.
name|getCacheSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// q1 used on its own -> cached
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
name|dir
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|DummyQuery
specifier|private
specifier|static
class|class
name|DummyQuery
extends|extends
name|Query
block|{
DECL|field|id
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
DECL|method|DummyQuery
name|DummyQuery
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"dummy"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|obj
argument_list|)
operator|&&
operator|(
operator|(
name|DummyQuery
operator|)
name|obj
operator|)
operator|.
name|id
operator|==
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ConstantScoreWeight
argument_list|(
name|DummyQuery
operator|.
name|this
argument_list|,
name|boost
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|ConstantScoreScorer
argument_list|(
name|this
argument_list|,
name|score
argument_list|()
argument_list|,
name|DocIdSetIterator
operator|.
name|all
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

