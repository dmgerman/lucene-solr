begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
DECL|class|TestOneMergeWrappingMergePolicy
specifier|public
class|class
name|TestOneMergeWrappingMergePolicy
extends|extends
name|LuceneTestCase
block|{
DECL|class|PredeterminedMergePolicy
specifier|private
specifier|static
class|class
name|PredeterminedMergePolicy
extends|extends
name|MergePolicy
block|{
DECL|field|merges
specifier|final
specifier|private
name|MergePolicy
operator|.
name|MergeSpecification
name|merges
decl_stmt|;
DECL|field|forcedMerges
specifier|final
specifier|private
name|MergePolicy
operator|.
name|MergeSpecification
name|forcedMerges
decl_stmt|;
DECL|field|forcedDeletesMerges
specifier|final
specifier|private
name|MergePolicy
operator|.
name|MergeSpecification
name|forcedDeletesMerges
decl_stmt|;
DECL|method|PredeterminedMergePolicy
specifier|public
name|PredeterminedMergePolicy
parameter_list|(
name|MergePolicy
operator|.
name|MergeSpecification
name|merges
parameter_list|,
name|MergePolicy
operator|.
name|MergeSpecification
name|forcedMerges
parameter_list|,
name|MergePolicy
operator|.
name|MergeSpecification
name|forcedDeletesMerges
parameter_list|)
block|{
name|this
operator|.
name|merges
operator|=
name|merges
expr_stmt|;
name|this
operator|.
name|forcedMerges
operator|=
name|forcedMerges
expr_stmt|;
name|this
operator|.
name|forcedDeletesMerges
operator|=
name|forcedDeletesMerges
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findMerges
specifier|public
name|MergePolicy
operator|.
name|MergeSpecification
name|findMerges
parameter_list|(
name|MergeTrigger
name|mergeTrigger
parameter_list|,
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|merges
return|;
block|}
annotation|@
name|Override
DECL|method|findForcedMerges
specifier|public
name|MergePolicy
operator|.
name|MergeSpecification
name|findForcedMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|int
name|maxSegmentCount
parameter_list|,
name|Map
argument_list|<
name|SegmentCommitInfo
argument_list|,
name|Boolean
argument_list|>
name|segmentsToMerge
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|forcedMerges
return|;
block|}
annotation|@
name|Override
DECL|method|findForcedDeletesMerges
specifier|public
name|MergePolicy
operator|.
name|MergeSpecification
name|findForcedDeletesMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|forcedDeletesMerges
return|;
block|}
block|}
DECL|class|WrappedOneMerge
specifier|private
specifier|static
class|class
name|WrappedOneMerge
extends|extends
name|MergePolicy
operator|.
name|OneMerge
block|{
DECL|field|original
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|original
decl_stmt|;
DECL|method|WrappedOneMerge
specifier|public
name|WrappedOneMerge
parameter_list|(
name|MergePolicy
operator|.
name|OneMerge
name|original
parameter_list|)
block|{
name|super
argument_list|(
name|original
operator|.
name|segments
argument_list|)
expr_stmt|;
name|this
operator|.
name|original
operator|=
name|original
expr_stmt|;
block|}
block|}
annotation|@
name|Test
DECL|method|testSegmentsAreWrapped
specifier|public
name|void
name|testSegmentsAreWrapped
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
comment|// first create random merge specs
specifier|final
name|MergePolicy
operator|.
name|MergeSpecification
name|msM
init|=
name|createRandomMergeSpecification
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|MergePolicy
operator|.
name|MergeSpecification
name|msF
init|=
name|createRandomMergeSpecification
argument_list|(
name|dir
argument_list|)
decl_stmt|;
specifier|final
name|MergePolicy
operator|.
name|MergeSpecification
name|msD
init|=
name|createRandomMergeSpecification
argument_list|(
name|dir
argument_list|)
decl_stmt|;
comment|// secondly, pass them to the predetermined merge policy constructor
specifier|final
name|MergePolicy
name|originalMP
init|=
operator|new
name|PredeterminedMergePolicy
argument_list|(
name|msM
argument_list|,
name|msF
argument_list|,
name|msD
argument_list|)
decl_stmt|;
comment|// thirdly wrap the predetermined merge policy
specifier|final
name|MergePolicy
name|oneMergeWrappingMP
init|=
operator|new
name|OneMergeWrappingMergePolicy
argument_list|(
name|originalMP
argument_list|,
name|merge
lambda|->
operator|new
name|WrappedOneMerge
argument_list|(
name|merge
argument_list|)
argument_list|)
decl_stmt|;
comment|// finally, ask for merges and check what we got
name|implTestSegmentsAreWrapped
argument_list|(
name|msM
argument_list|,
name|oneMergeWrappingMP
operator|.
name|findMerges
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|implTestSegmentsAreWrapped
argument_list|(
name|msF
argument_list|,
name|oneMergeWrappingMP
operator|.
name|findForcedMerges
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|implTestSegmentsAreWrapped
argument_list|(
name|msD
argument_list|,
name|oneMergeWrappingMP
operator|.
name|findForcedDeletesMerges
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|implTestSegmentsAreWrapped
specifier|private
specifier|static
name|void
name|implTestSegmentsAreWrapped
parameter_list|(
name|MergePolicy
operator|.
name|MergeSpecification
name|originalMS
parameter_list|,
name|MergePolicy
operator|.
name|MergeSpecification
name|testMS
parameter_list|)
block|{
comment|// wrapping does not add or remove merge specs
name|assertEquals
argument_list|(
operator|(
name|originalMS
operator|==
literal|null
operator|)
argument_list|,
operator|(
name|testMS
operator|==
literal|null
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|originalMS
operator|==
literal|null
condition|)
return|return;
name|assertEquals
argument_list|(
name|originalMS
operator|.
name|merges
operator|.
name|size
argument_list|()
argument_list|,
name|testMS
operator|.
name|merges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// wrapping does not re-order merge specs
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|originalMS
operator|.
name|merges
operator|.
name|size
argument_list|()
condition|;
operator|++
name|ii
control|)
block|{
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|originalOM
init|=
name|originalMS
operator|.
name|merges
operator|.
name|get
argument_list|(
name|ii
argument_list|)
decl_stmt|;
specifier|final
name|MergePolicy
operator|.
name|OneMerge
name|testOM
init|=
name|testMS
operator|.
name|merges
operator|.
name|get
argument_list|(
name|ii
argument_list|)
decl_stmt|;
comment|// wrapping wraps
name|assertTrue
argument_list|(
name|testOM
operator|instanceof
name|WrappedOneMerge
argument_list|)
expr_stmt|;
specifier|final
name|WrappedOneMerge
name|wrappedOM
init|=
operator|(
name|WrappedOneMerge
operator|)
name|testOM
decl_stmt|;
comment|// and what is wrapped is what was originally passed in
name|assertEquals
argument_list|(
name|originalOM
argument_list|,
name|wrappedOM
operator|.
name|original
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createRandomMergeSpecification
specifier|private
specifier|static
name|MergePolicy
operator|.
name|MergeSpecification
name|createRandomMergeSpecification
parameter_list|(
name|Directory
name|dir
parameter_list|)
block|{
name|MergePolicy
operator|.
name|MergeSpecification
name|ms
decl_stmt|;
if|if
condition|(
literal|0
operator|<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|)
block|{
comment|// ~ 1 in 10 times return null
name|ms
operator|=
operator|new
name|MergePolicy
operator|.
name|MergeSpecification
argument_list|()
expr_stmt|;
comment|// append up to 10 (random non-sensical) one merge objects
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
condition|;
operator|++
name|ii
control|)
block|{
specifier|final
name|SegmentInfo
name|si
init|=
operator|new
name|SegmentInfo
argument_list|(
name|dir
argument_list|,
comment|// dir
name|Version
operator|.
name|LATEST
argument_list|,
comment|// version
name|Version
operator|.
name|LATEST
argument_list|,
comment|// min version
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|,
comment|// name
name|random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|,
comment|// maxDoc
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
argument_list|,
comment|// isCompoundFile
literal|null
argument_list|,
comment|// codec
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
comment|// diagnostics
name|TestUtil
operator|.
name|randomSimpleString
argument_list|(
comment|// id
name|random
argument_list|()
argument_list|,
name|StringHelper
operator|.
name|ID_LENGTH
argument_list|,
name|StringHelper
operator|.
name|ID_LENGTH
argument_list|)
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
comment|// attributes
literal|null
comment|/* indexSort */
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|SegmentCommitInfo
argument_list|>
name|segments
init|=
operator|new
name|LinkedList
argument_list|<
name|SegmentCommitInfo
argument_list|>
argument_list|()
decl_stmt|;
name|segments
operator|.
name|add
argument_list|(
operator|new
name|SegmentCommitInfo
argument_list|(
name|si
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|add
argument_list|(
operator|new
name|MergePolicy
operator|.
name|OneMerge
argument_list|(
name|segments
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

