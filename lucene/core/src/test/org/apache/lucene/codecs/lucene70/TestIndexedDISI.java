begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.lucene70
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_class
DECL|class|TestIndexedDISI
specifier|public
class|class
name|TestIndexedDISI
extends|extends
name|LuceneTestCase
block|{
DECL|method|testEmpty
specifier|public
name|void
name|testEmpty
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOneDoc
specifier|public
name|void
name|testOneDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testTwoDocs
specifier|public
name|void
name|testTwoDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
name|set
operator|.
name|set
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testAllDocs
specifier|public
name|void
name|testAllDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
literal|1
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testHalfFull
specifier|public
name|void
name|testHalfFull
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
init|;
name|i
operator|<
name|maxDoc
condition|;
name|i
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
control|)
block|{
name|set
operator|.
name|set
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testDocRange
specifier|public
name|void
name|testDocRange
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|10
condition|;
operator|++
name|iter
control|)
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
specifier|final
name|int
name|start
init|=
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
name|start
operator|+
literal|1
argument_list|,
name|maxDoc
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSparseDenseBoundary
specifier|public
name|void
name|testSparseDenseBoundary
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
literal|200000
argument_list|)
decl_stmt|;
name|int
name|start
init|=
literal|65536
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
decl_stmt|;
comment|// we set MAX_ARRAY_LENGTH bits so the encoding will be sparse
name|set
operator|.
name|set
argument_list|(
name|start
argument_list|,
name|start
operator|+
name|IndexedDISI
operator|.
name|MAX_ARRAY_LENGTH
argument_list|)
expr_stmt|;
name|long
name|length
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"sparse"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
operator|new
name|BitSetIterator
argument_list|(
name|set
argument_list|,
name|IndexedDISI
operator|.
name|MAX_ARRAY_LENGTH
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|length
operator|=
name|out
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"sparse"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|in
argument_list|,
literal|0L
argument_list|,
name|length
argument_list|,
name|IndexedDISI
operator|.
name|MAX_ARRAY_LENGTH
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|start
argument_list|,
name|disi
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexedDISI
operator|.
name|Method
operator|.
name|SPARSE
argument_list|,
name|disi
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// now we set one more bit so the encoding will be dense
name|set
operator|.
name|set
argument_list|(
name|start
operator|+
name|IndexedDISI
operator|.
name|MAX_ARRAY_LENGTH
operator|+
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
operator|new
name|BitSetIterator
argument_list|(
name|set
argument_list|,
name|IndexedDISI
operator|.
name|MAX_ARRAY_LENGTH
operator|+
literal|1
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|length
operator|=
name|out
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"bar"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|in
argument_list|,
literal|0L
argument_list|,
name|length
argument_list|,
name|IndexedDISI
operator|.
name|MAX_ARRAY_LENGTH
operator|+
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|start
argument_list|,
name|disi
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|IndexedDISI
operator|.
name|Method
operator|.
name|DENSE
argument_list|,
name|disi
operator|.
name|method
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testOneDocMissing
specifier|public
name|void
name|testOneDocMissing
parameter_list|()
throws|throws
name|IOException
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1000000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
name|set
operator|.
name|clear
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|testFewMissingDocs
specifier|public
name|void
name|testFewMissingDocs
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|100
condition|;
operator|++
name|iter
control|)
block|{
name|int
name|maxDoc
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100000
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
name|set
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|maxDoc
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numMissingDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|1000
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numMissingDocs
condition|;
operator|++
name|i
control|)
block|{
name|set
operator|.
name|clear
argument_list|(
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
name|maxDoc
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
name|doTestRandom
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|doTestRandom
specifier|private
name|void
name|doTestRandom
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|docs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|int
name|maxStep
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
operator|<<
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|20
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numDocs
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|100000
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
operator|/
name|maxStep
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
operator|-
literal|1
init|,
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numDocs
condition|;
operator|++
name|i
control|)
block|{
name|doc
operator|+=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
name|maxStep
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|maxDoc
init|=
name|docs
operator|.
name|get
argument_list|(
name|docs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|+
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|FixedBitSet
name|set
init|=
operator|new
name|FixedBitSet
argument_list|(
name|maxDoc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
range|:
name|docs
control|)
block|{
name|set
operator|.
name|set
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|doTest
argument_list|(
name|set
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
DECL|method|doTest
specifier|private
name|void
name|doTest
parameter_list|(
name|FixedBitSet
name|set
parameter_list|,
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|cardinality
init|=
name|set
operator|.
name|cardinality
argument_list|()
decl_stmt|;
name|long
name|length
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
operator|new
name|BitSetIterator
argument_list|(
name|set
argument_list|,
name|cardinality
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|length
operator|=
name|out
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|in
argument_list|,
literal|0L
argument_list|,
name|length
argument_list|,
name|cardinality
argument_list|)
decl_stmt|;
name|BitSetIterator
name|disi2
init|=
operator|new
name|BitSetIterator
argument_list|(
name|set
argument_list|,
name|cardinality
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|disi2
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|disi2
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|disi
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|i
operator|++
argument_list|,
name|disi
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
argument_list|,
name|disi
operator|.
name|nextDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|step
range|:
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|10
block|,
literal|100
block|,
literal|1000
block|,
literal|10000
block|,
literal|100000
block|}
control|)
block|{
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"foo"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|in
argument_list|,
literal|0L
argument_list|,
name|length
argument_list|,
name|cardinality
argument_list|)
decl_stmt|;
name|BitSetIterator
name|disi2
init|=
operator|new
name|BitSetIterator
argument_list|(
name|set
argument_list|,
name|cardinality
argument_list|)
decl_stmt|;
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|target
init|=
name|disi2
operator|.
name|docID
argument_list|()
operator|+
name|step
decl_stmt|;
name|int
name|doc
decl_stmt|;
do|do
block|{
name|doc
operator|=
name|disi2
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|doc
operator|<
name|target
condition|)
do|;
name|assertEquals
argument_list|(
name|doc
argument_list|,
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|)
block|{
break|break;
block|}
name|assertEquals
argument_list|(
name|index
argument_list|,
name|disi
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|dir
operator|.
name|deleteFile
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

