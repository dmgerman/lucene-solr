begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharacterUtils
operator|.
name|CharacterBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestCase for the {@link CharacterUtils} class.  */
end_comment

begin_class
DECL|class|TestCharacterUtils
specifier|public
class|class
name|TestCharacterUtils
extends|extends
name|LuceneTestCase
block|{
DECL|method|testConversions
specifier|public
name|void
name|testConversions
parameter_list|()
block|{
specifier|final
name|char
index|[]
name|orig
init|=
name|TestUtil
operator|.
name|randomUnicodeString
argument_list|(
name|random
argument_list|()
argument_list|,
literal|100
argument_list|)
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
specifier|final
name|int
index|[]
name|buf
init|=
operator|new
name|int
index|[
name|orig
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|char
index|[]
name|restored
init|=
operator|new
name|char
index|[
name|buf
operator|.
name|length
index|]
decl_stmt|;
specifier|final
name|int
name|o1
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|Math
operator|.
name|min
argument_list|(
literal|5
argument_list|,
name|orig
operator|.
name|length
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|o2
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|o1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|o3
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
name|o1
argument_list|)
decl_stmt|;
specifier|final
name|int
name|codePointCount
init|=
name|CharacterUtils
operator|.
name|toCodePoints
argument_list|(
name|orig
argument_list|,
name|o1
argument_list|,
name|orig
operator|.
name|length
operator|-
name|o1
argument_list|,
name|buf
argument_list|,
name|o2
argument_list|)
decl_stmt|;
specifier|final
name|int
name|charCount
init|=
name|CharacterUtils
operator|.
name|toChars
argument_list|(
name|buf
argument_list|,
name|o2
argument_list|,
name|codePointCount
argument_list|,
name|restored
argument_list|,
name|o3
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|orig
operator|.
name|length
operator|-
name|o1
argument_list|,
name|charCount
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|orig
argument_list|,
name|o1
argument_list|,
name|o1
operator|+
name|charCount
argument_list|)
argument_list|,
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|restored
argument_list|,
name|o3
argument_list|,
name|o3
operator|+
name|charCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testNewCharacterBuffer
specifier|public
name|void
name|testNewCharacterBuffer
parameter_list|()
block|{
name|CharacterBuffer
name|newCharacterBuffer
init|=
name|CharacterUtils
operator|.
name|newCharacterBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1024
argument_list|,
name|newCharacterBuffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCharacterBuffer
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCharacterBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|newCharacterBuffer
operator|=
name|CharacterUtils
operator|.
name|newCharacterBuffer
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|newCharacterBuffer
operator|.
name|getBuffer
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCharacterBuffer
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|newCharacterBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// length must be>= 2
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|CharacterUtils
operator|.
name|newCharacterBuffer
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFillNoHighSurrogate
specifier|public
name|void
name|testFillNoHighSurrogate
parameter_list|()
throws|throws
name|IOException
block|{
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
literal|"helloworld"
argument_list|)
decl_stmt|;
name|CharacterBuffer
name|buffer
init|=
name|CharacterUtils
operator|.
name|newCharacterBuffer
argument_list|(
literal|6
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hellow"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getOffset
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"orld"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|buffer
operator|.
name|getOffset
argument_list|()
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
DECL|method|testFill
specifier|public
name|void
name|testFill
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|input
init|=
literal|"1234\ud801\udc1c789123\ud801\ud801\udc1c\ud801"
decl_stmt|;
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|CharacterBuffer
name|buffer
init|=
name|CharacterUtils
operator|.
name|newCharacterBuffer
argument_list|(
literal|5
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1234"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|buffer
operator|.
name|getOffset
argument_list|()
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\ud801\udc1c789"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"123\ud801"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|buffer
operator|.
name|getOffset
argument_list|()
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"\ud801\udc1c\ud801"
argument_list|,
operator|new
name|String
argument_list|(
name|buffer
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|buffer
operator|.
name|getOffset
argument_list|()
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|CharacterUtils
operator|.
name|fill
argument_list|(
name|buffer
argument_list|,
name|reader
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

