begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
DECL|class|TestDelegatingAnalyzerWrapper
specifier|public
class|class
name|TestDelegatingAnalyzerWrapper
extends|extends
name|LuceneTestCase
block|{
DECL|method|testDelegatesNormalization
specifier|public
name|void
name|testDelegatesNormalization
parameter_list|()
block|{
name|Analyzer
name|analyzer1
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|DelegatingAnalyzerWrapper
name|w1
init|=
operator|new
name|DelegatingAnalyzerWrapper
argument_list|(
name|Analyzer
operator|.
name|GLOBAL_REUSE_STRATEGY
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|analyzer1
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"Ab C"
argument_list|)
argument_list|,
name|w1
operator|.
name|normalize
argument_list|(
literal|"foo"
argument_list|,
literal|"Ab C"
argument_list|)
argument_list|)
expr_stmt|;
name|Analyzer
name|analyzer2
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|DelegatingAnalyzerWrapper
name|w2
init|=
operator|new
name|DelegatingAnalyzerWrapper
argument_list|(
name|Analyzer
operator|.
name|GLOBAL_REUSE_STRATEGY
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|analyzer2
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"ab c"
argument_list|)
argument_list|,
name|w2
operator|.
name|normalize
argument_list|(
literal|"foo"
argument_list|,
literal|"Ab C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegatesAttributeFactory
specifier|public
name|void
name|testDelegatesAttributeFactory
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer1
init|=
operator|new
name|MockBytesAnalyzer
argument_list|()
decl_stmt|;
name|DelegatingAnalyzerWrapper
name|w1
init|=
operator|new
name|DelegatingAnalyzerWrapper
argument_list|(
name|Analyzer
operator|.
name|GLOBAL_REUSE_STRATEGY
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|analyzer1
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"Ab C"
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_16LE
argument_list|)
argument_list|)
argument_list|,
name|w1
operator|.
name|normalize
argument_list|(
literal|"foo"
argument_list|,
literal|"Ab C"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testDelegatesCharFilter
specifier|public
name|void
name|testDelegatesCharFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|analyzer1
init|=
operator|new
name|Analyzer
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Reader
name|initReaderForNormalization
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Reader
name|reader
parameter_list|)
block|{
return|return
operator|new
name|DummyCharFilter
argument_list|(
name|reader
argument_list|,
literal|'b'
argument_list|,
literal|'z'
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|MockTokenizer
argument_list|(
name|attributeFactory
argument_list|(
name|fieldName
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|DelegatingAnalyzerWrapper
name|w1
init|=
operator|new
name|DelegatingAnalyzerWrapper
argument_list|(
name|Analyzer
operator|.
name|GLOBAL_REUSE_STRATEGY
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Analyzer
name|getWrappedAnalyzer
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|analyzer1
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesRef
argument_list|(
literal|"az c"
argument_list|)
argument_list|,
name|w1
operator|.
name|normalize
argument_list|(
literal|"foo"
argument_list|,
literal|"ab c"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|DummyCharFilter
specifier|private
specifier|static
class|class
name|DummyCharFilter
extends|extends
name|CharFilter
block|{
DECL|field|match
DECL|field|repl
specifier|private
specifier|final
name|char
name|match
decl_stmt|,
name|repl
decl_stmt|;
DECL|method|DummyCharFilter
specifier|public
name|DummyCharFilter
parameter_list|(
name|Reader
name|input
parameter_list|,
name|char
name|match
parameter_list|,
name|char
name|repl
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
name|this
operator|.
name|repl
operator|=
name|repl
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|correct
specifier|protected
name|int
name|correct
parameter_list|(
name|int
name|currentOff
parameter_list|)
block|{
return|return
name|currentOff
return|;
block|}
annotation|@
name|Override
DECL|method|read
specifier|public
name|int
name|read
parameter_list|(
name|char
index|[]
name|cbuf
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|read
init|=
name|input
operator|.
name|read
argument_list|(
name|cbuf
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|read
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|cbuf
index|[
name|off
operator|+
name|i
index|]
operator|==
name|match
condition|)
block|{
name|cbuf
index|[
name|off
operator|+
name|i
index|]
operator|=
name|repl
expr_stmt|;
block|}
block|}
return|return
name|read
return|;
block|}
block|}
block|}
end_class

end_unit

