begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util.graph
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CannedTokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|BytesTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_comment
comment|/**  * {@link GraphTokenStreamFiniteStrings} tests.  */
end_comment

begin_class
DECL|class|TestGraphTokenStreamFiniteStrings
specifier|public
class|class
name|TestGraphTokenStreamFiniteStrings
extends|extends
name|LuceneTestCase
block|{
DECL|method|token
specifier|private
specifier|static
name|Token
name|token
parameter_list|(
name|String
name|term
parameter_list|,
name|int
name|posInc
parameter_list|,
name|int
name|posLength
parameter_list|)
block|{
specifier|final
name|Token
name|t
init|=
operator|new
name|Token
argument_list|(
name|term
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|setPositionIncrement
argument_list|(
name|posInc
argument_list|)
expr_stmt|;
name|t
operator|.
name|setPositionLength
argument_list|(
name|posLength
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
DECL|method|assertTokenStream
specifier|private
name|void
name|assertTokenStream
parameter_list|(
name|TokenStream
name|ts
parameter_list|,
name|String
index|[]
name|terms
parameter_list|,
name|int
index|[]
name|increments
parameter_list|)
throws|throws
name|Exception
block|{
comment|// verify no nulls and arrays same length
name|assertNotNull
argument_list|(
name|ts
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|terms
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|increments
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|terms
operator|.
name|length
argument_list|,
name|increments
operator|.
name|length
argument_list|)
expr_stmt|;
name|BytesTermAttribute
name|termAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|BytesTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|PositionIncrementAttribute
name|incrAtt
init|=
name|ts
operator|.
name|getAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|ts
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
comment|// verify term and increment
assert|assert
name|offset
operator|<
name|terms
operator|.
name|length
assert|;
name|assertEquals
argument_list|(
name|terms
index|[
name|offset
index|]
argument_list|,
name|termAtt
operator|.
name|getBytesRef
argument_list|()
operator|.
name|utf8ToString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|increments
index|[
name|offset
index|]
argument_list|,
name|incrAtt
operator|.
name|getPositionIncrement
argument_list|()
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
comment|// make sure we processed all items
name|assertEquals
argument_list|(
name|offset
argument_list|,
name|terms
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|testIllegalState
specifier|public
name|void
name|testIllegalState
parameter_list|()
throws|throws
name|Exception
block|{
name|expectThrows
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleGraph
specifier|public
name|void
name|testSingleGraph
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testSingleGraphWithGap
specifier|public
name|void
name|testSingleGraphWithGap
parameter_list|()
throws|throws
name|Exception
block|{
comment|// "hey the fast wifi network", where "the" removed
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"hey"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hey"
block|,
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"hey"
block|,
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGraphAndGapSameToken
specifier|public
name|void
name|testGraphAndGapSameToken
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGraphAndGapSameTokenTerm
specifier|public
name|void
name|testGraphAndGapSameTokenTerm
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"b"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"c"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"d"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"a"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testStackedGraph
specifier|public
name|void
name|testStackedGraph
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wireless"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wireless"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testStackedGraphWithGap
specifier|public
name|void
name|testStackedGraphWithGap
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wireless"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wireless"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testGraphWithRegularSynonym
specifier|public
name|void
name|testGraphWithRegularSynonym
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"speedy"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"speedy"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"speedy"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|testMultiGraph
specifier|public
name|void
name|testMultiGraph
parameter_list|()
throws|throws
name|Exception
block|{
name|TokenStream
name|ts
init|=
operator|new
name|CannedTokenStream
argument_list|(
name|token
argument_list|(
literal|"turbo"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fast"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"charged"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"wifi"
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"fi"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|token
argument_list|(
literal|"network"
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|finiteTokenStreams
init|=
name|GraphTokenStreamFiniteStrings
operator|.
name|getTokenStreams
argument_list|(
name|ts
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|finiteTokenStreams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"turbo"
block|,
literal|"charged"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"turbo"
block|,
literal|"charged"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wi"
block|,
literal|"fi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
name|assertTokenStream
argument_list|(
name|finiteTokenStreams
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"fast"
block|,
literal|"wifi"
block|,
literal|"network"
block|}
argument_list|,
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|1
block|,
literal|1
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

