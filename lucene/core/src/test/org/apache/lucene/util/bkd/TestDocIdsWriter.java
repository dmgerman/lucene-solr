begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|IntersectVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
operator|.
name|Relation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|TestUtil
import|;
end_import

begin_class
DECL|class|TestDocIdsWriter
specifier|public
class|class
name|TestDocIdsWriter
extends|extends
name|LuceneTestCase
block|{
DECL|method|testRandom
specifier|public
name|void
name|testRandom
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|1000
condition|;
operator|++
name|iter
control|)
block|{
name|int
index|[]
name|docIDs
init|=
operator|new
name|int
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5000
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|bpv
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docIDs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|docIDs
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
literal|1
operator|<<
name|bpv
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|test
argument_list|(
name|dir
argument_list|,
name|docIDs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|testSorted
specifier|public
name|void
name|testSorted
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|Directory
name|dir
init|=
name|newDirectory
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|iter
init|=
literal|0
init|;
name|iter
operator|<
literal|1000
condition|;
operator|++
name|iter
control|)
block|{
name|int
index|[]
name|docIDs
init|=
operator|new
name|int
index|[
name|random
argument_list|()
operator|.
name|nextInt
argument_list|(
literal|5000
argument_list|)
index|]
decl_stmt|;
specifier|final
name|int
name|bpv
init|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|32
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|docIDs
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|docIDs
index|[
name|i
index|]
operator|=
name|TestUtil
operator|.
name|nextInt
argument_list|(
name|random
argument_list|()
argument_list|,
literal|0
argument_list|,
operator|(
literal|1
operator|<<
name|bpv
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|docIDs
argument_list|)
expr_stmt|;
name|test
argument_list|(
name|dir
argument_list|,
name|docIDs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|test
specifier|private
name|void
name|test
parameter_list|(
name|Directory
name|dir
parameter_list|,
name|int
index|[]
name|ints
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|long
name|len
decl_stmt|;
try|try
init|(
name|IndexOutput
name|out
init|=
name|dir
operator|.
name|createOutput
argument_list|(
literal|"tmp"
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
init|)
block|{
name|DocIdsWriter
operator|.
name|writeDocIds
argument_list|(
name|ints
argument_list|,
literal|0
argument_list|,
name|ints
operator|.
name|length
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|len
operator|=
name|out
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
if|if
condition|(
name|random
argument_list|()
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// garbage
block|}
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"tmp"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|int
index|[]
name|read
init|=
operator|new
name|int
index|[
name|ints
operator|.
name|length
index|]
decl_stmt|;
name|DocIdsWriter
operator|.
name|readInts
argument_list|(
name|in
argument_list|,
name|ints
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ints
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|IndexInput
name|in
init|=
name|dir
operator|.
name|openInput
argument_list|(
literal|"tmp"
argument_list|,
name|IOContext
operator|.
name|READONCE
argument_list|)
init|)
block|{
name|int
index|[]
name|read
init|=
operator|new
name|int
index|[
name|ints
operator|.
name|length
index|]
decl_stmt|;
name|DocIdsWriter
operator|.
name|readInts
argument_list|(
name|in
argument_list|,
name|ints
operator|.
name|length
argument_list|,
operator|new
name|IntersectVisitor
argument_list|()
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|read
index|[
name|i
operator|++
index|]
operator|=
name|docID
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|ints
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|len
argument_list|,
name|in
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dir
operator|.
name|deleteFile
argument_list|(
literal|"tmp"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

