begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.geo
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|geo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneTestCase
import|;
end_import

begin_class
DECL|class|TestPolygon
specifier|public
class|class
name|TestPolygon
extends|extends
name|LuceneTestCase
block|{
comment|/** null polyLats not allowed */
DECL|method|testPolygonNullPolyLats
specifier|public
name|void
name|testPolygonNullPolyLats
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
literal|null
argument_list|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
block|}
block|)
class|;
end_class

begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"polyLats must not be null"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/** null polyLons not allowed */
end_comment

begin_function
DECL|method|testPolygonNullPolyLons
unit|public
name|void
name|testPolygonNullPolyLons
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
operator|,
literal|18
block|}
operator|,
literal|null
argument_list|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"polyLons must not be null"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/** polygon needs at least 3 vertices */
end_comment

begin_function
DECL|method|testPolygonLine
unit|public
name|void
name|testPolygonLine
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|18
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"at least 4 polygon points required"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/** polygon needs same number of latitudes as longitudes */
end_comment

begin_function
DECL|method|testPolygonBogus
unit|public
name|void
name|testPolygonBogus
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|66
block|}
argument_list|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"must be equal length"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_comment
unit|}
comment|/** polygon must be closed */
end_comment

begin_function
DECL|method|testPolygonNotClosed
unit|public
name|void
name|testPolygonNotClosed
parameter_list|()
block|{
name|IllegalArgumentException
name|expected
init|=
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|18
operator|,
literal|18
operator|,
literal|19
operator|,
literal|19
operator|,
literal|19
block|}
operator|,
operator|new
name|double
index|[]
block|{
operator|-
literal|66
operator|,
operator|-
literal|65
operator|,
operator|-
literal|65
operator|,
operator|-
literal|66
operator|,
operator|-
literal|67
block|}
argument_list|)
decl_stmt|;
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|assertTrue
argument_list|(
name|expected
operator|.
name|getMessage
argument_list|()
argument_list|,
name|expected
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"it must close itself"
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}    public
DECL|method|testGeoJSONPolygon
name|void
name|testGeoJSONPolygon
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Polygon
index|[]
name|polygons
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|polygons
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testGeoJSONPolygonWithHole
specifier|public
name|void
name|testGeoJSONPolygonWithHole
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [100.0, 1.0], [100.0, 0.0] ],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [ [100.5, 0.5], [100.5, 0.75], [100.75, 0.75], [100.75, 0.5], [100.5, 0.5]]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Polygon
name|hole
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.5
block|,
literal|0.75
block|,
literal|0.75
block|,
literal|0.5
block|,
literal|0.5
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.5
block|,
literal|100.5
block|,
literal|100.75
block|,
literal|100.75
block|,
literal|100.5
block|}
argument_list|)
decl_stmt|;
name|Polygon
name|expected
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|,
name|hole
argument_list|)
decl_stmt|;
name|Polygon
index|[]
name|polygons
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|polygons
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|polygons
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// a MultiPolygon returns multiple Polygons
end_comment

begin_function
DECL|method|testGeoJSONMultiPolygon
specifier|public
name|void
name|testGeoJSONMultiPolygon
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"type\": \"MultiPolygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    ],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [ [10.0, 2.0], [11.0, 2.0], [11.0, 3.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        [10.0, 3.0], [10.0, 2.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Polygon
index|[]
name|polygons
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|polygons
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|2.0
block|,
literal|2.0
block|,
literal|3.0
block|,
literal|3.0
block|,
literal|2.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|10.0
block|,
literal|11.0
block|,
literal|11.0
block|,
literal|10.0
block|,
literal|10.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// make sure type can appear last (JSON allows arbitrary key/value order for objects)
end_comment

begin_function
DECL|method|testGeoJSONTypeComesLast
specifier|public
name|void
name|testGeoJSONTypeComesLast
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Polygon
index|[]
name|polygons
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|polygons
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// make sure Polygon inside a type: Feature also works
end_comment

begin_function
DECL|method|testGeoJSONPolygonFeature
specifier|public
name|void
name|testGeoJSONPolygonFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{ \"type\": \"Feature\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"geometry\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"properties\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"prop0\": \"value0\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"prop1\": {\"this\": \"that\"}\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Polygon
index|[]
name|polygons
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|polygons
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// make sure MultiPolygon inside a type: Feature also works
end_comment

begin_function
DECL|method|testGeoJSONMultiPolygonFeature
specifier|public
name|void
name|testGeoJSONMultiPolygonFeature
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{ \"type\": \"Feature\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"geometry\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"type\": \"MultiPolygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"          [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"            [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        ],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"          [ [10.0, 2.0], [11.0, 2.0], [11.0, 3.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"            [10.0, 3.0], [10.0, 2.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"properties\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"prop0\": \"value0\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"prop1\": {\"this\": \"that\"}\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Polygon
index|[]
name|polygons
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|polygons
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|2.0
block|,
literal|2.0
block|,
literal|3.0
block|,
literal|3.0
block|,
literal|2.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|10.0
block|,
literal|11.0
block|,
literal|11.0
block|,
literal|10.0
block|,
literal|10.0
block|}
argument_list|)
argument_list|,
name|polygons
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// FeatureCollection with one geometry is allowed:
end_comment

begin_function
DECL|method|testGeoJSONFeatureCollectionWithSinglePolygon
specifier|public
name|void
name|testGeoJSONFeatureCollectionWithSinglePolygon
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{ \"type\": \"FeatureCollection\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"features\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    { \"type\": \"Feature\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"geometry\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"          [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"            [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"          ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"properties\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"prop0\": \"value0\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"prop1\": {\"this\": \"that\"}\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}    \n"
argument_list|)
expr_stmt|;
name|Polygon
name|expected
init|=
operator|new
name|Polygon
argument_list|(
operator|new
name|double
index|[]
block|{
literal|0.0
block|,
literal|0.0
block|,
literal|1.0
block|,
literal|1.0
block|,
literal|0.0
block|}
argument_list|,
operator|new
name|double
index|[]
block|{
literal|100.0
block|,
literal|101.0
block|,
literal|101.0
block|,
literal|100.0
block|,
literal|100.0
block|}
argument_list|)
decl_stmt|;
name|Polygon
index|[]
name|actual
init|=
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|actual
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|actual
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// stuff after the object is not allowed
end_comment

begin_function
DECL|method|testIllegalGeoJSONExtraCrapAtEnd
specifier|public
name|void
name|testIllegalGeoJSONExtraCrapAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"foo\n"
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"unexpected character 'f' after end of GeoJSON object"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
DECL|method|testIllegalGeoJSONLinkedCRS
specifier|public
name|void
name|testIllegalGeoJSONLinkedCRS
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"crs\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"type\": \"link\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    \"properties\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"href\": \"http://example.com/crs/42\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"type\": \"proj4\"\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  }    \n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"cannot handle linked crs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|// FeatureCollection with more than one geometry is not supported:
end_comment

begin_function
DECL|method|testIllegalGeoJSONMultipleFeatures
specifier|public
name|void
name|testIllegalGeoJSONMultipleFeatures
parameter_list|()
throws|throws
name|Exception
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"{ \"type\": \"FeatureCollection\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  \"features\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    { \"type\": \"Feature\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"geometry\": {\"type\": \"Point\", \"coordinates\": [102.0, 0.5]},\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"properties\": {\"prop0\": \"value0\"}\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    { \"type\": \"Feature\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"geometry\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"type\": \"LineString\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        [102.0, 0.0], [103.0, 1.0], [104.0, 0.0], [105.0, 1.0]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"properties\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"prop0\": \"value0\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"prop1\": 0.0\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    { \"type\": \"Feature\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"geometry\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"type\": \"Polygon\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"coordinates\": [\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"          [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"            [100.0, 1.0], [100.0, 0.0] ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"          ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      },\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      \"properties\": {\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"prop0\": \"value0\",\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"        \"prop1\": {\"this\": \"that\"}\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"      }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"    }\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"  ]\n"
argument_list|)
expr_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"}    \n"
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|expectThrows
argument_list|(
name|ParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
name|Polygon
operator|.
name|fromGeoJSON
argument_list|(
name|b
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"can only handle type FeatureCollection (if it has a single polygon geometry), Feature, Polygon or MutiPolygon, but got Point"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

unit|}
end_unit

