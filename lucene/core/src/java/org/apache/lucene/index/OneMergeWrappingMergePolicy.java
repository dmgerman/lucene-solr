begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|UnaryOperator
import|;
end_import

begin_comment
comment|/**  * A wrapping merge policy that wraps the {@link org.apache.lucene.index.MergePolicy.OneMerge}  * objects returned by the wrapped merge policy.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|OneMergeWrappingMergePolicy
specifier|public
class|class
name|OneMergeWrappingMergePolicy
extends|extends
name|MergePolicyWrapper
block|{
DECL|field|wrapOneMerge
specifier|private
specifier|final
name|UnaryOperator
argument_list|<
name|OneMerge
argument_list|>
name|wrapOneMerge
decl_stmt|;
comment|/**    * Constructor    *    * @param in - the wrapped merge policy    * @param wrapOneMerge - operator for wrapping OneMerge objects    */
DECL|method|OneMergeWrappingMergePolicy
specifier|public
name|OneMergeWrappingMergePolicy
parameter_list|(
name|MergePolicy
name|in
parameter_list|,
name|UnaryOperator
argument_list|<
name|OneMerge
argument_list|>
name|wrapOneMerge
parameter_list|)
block|{
name|super
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|wrapOneMerge
operator|=
name|wrapOneMerge
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|findMerges
specifier|public
name|MergeSpecification
name|findMerges
parameter_list|(
name|MergeTrigger
name|mergeTrigger
parameter_list|,
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapSpec
argument_list|(
name|in
operator|.
name|findMerges
argument_list|(
name|mergeTrigger
argument_list|,
name|segmentInfos
argument_list|,
name|writer
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findForcedMerges
specifier|public
name|MergeSpecification
name|findForcedMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|int
name|maxSegmentCount
parameter_list|,
name|Map
argument_list|<
name|SegmentCommitInfo
argument_list|,
name|Boolean
argument_list|>
name|segmentsToMerge
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapSpec
argument_list|(
name|in
operator|.
name|findForcedMerges
argument_list|(
name|segmentInfos
argument_list|,
name|maxSegmentCount
argument_list|,
name|segmentsToMerge
argument_list|,
name|writer
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|findForcedDeletesMerges
specifier|public
name|MergeSpecification
name|findForcedDeletesMerges
parameter_list|(
name|SegmentInfos
name|segmentInfos
parameter_list|,
name|IndexWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|wrapSpec
argument_list|(
name|in
operator|.
name|findForcedDeletesMerges
argument_list|(
name|segmentInfos
argument_list|,
name|writer
argument_list|)
argument_list|)
return|;
block|}
DECL|method|wrapSpec
specifier|private
name|MergeSpecification
name|wrapSpec
parameter_list|(
name|MergeSpecification
name|spec
parameter_list|)
block|{
name|MergeSpecification
name|wrapped
init|=
name|spec
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|MergeSpecification
argument_list|()
decl_stmt|;
if|if
condition|(
name|wrapped
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OneMerge
name|merge
range|:
name|spec
operator|.
name|merges
control|)
block|{
name|wrapped
operator|.
name|add
argument_list|(
name|wrapOneMerge
operator|.
name|apply
argument_list|(
name|merge
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|wrapped
return|;
block|}
block|}
end_class

end_unit

