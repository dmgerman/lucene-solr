begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedLongValues
import|;
end_import

begin_comment
comment|/** Buffers up pending long[] per doc, sorts, then flushes when segment flushes. */
end_comment

begin_class
DECL|class|SortedNumericDocValuesWriter
class|class
name|SortedNumericDocValuesWriter
extends|extends
name|DocValuesWriter
block|{
DECL|field|pending
specifier|private
name|PackedLongValues
operator|.
name|Builder
name|pending
decl_stmt|;
comment|// stream of all values
DECL|field|pendingCounts
specifier|private
name|PackedLongValues
operator|.
name|Builder
name|pendingCounts
decl_stmt|;
comment|// count of values per doc
DECL|field|docsWithField
specifier|private
name|DocsWithFieldSet
name|docsWithField
decl_stmt|;
DECL|field|iwBytesUsed
specifier|private
specifier|final
name|Counter
name|iwBytesUsed
decl_stmt|;
DECL|field|bytesUsed
specifier|private
name|long
name|bytesUsed
decl_stmt|;
comment|// this only tracks differences in 'pending' and 'pendingCounts'
DECL|field|fieldInfo
specifier|private
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|currentDoc
specifier|private
name|int
name|currentDoc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|currentValues
specifier|private
name|long
name|currentValues
index|[]
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
DECL|field|currentUpto
specifier|private
name|int
name|currentUpto
init|=
literal|0
decl_stmt|;
DECL|method|SortedNumericDocValuesWriter
specifier|public
name|SortedNumericDocValuesWriter
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|Counter
name|iwBytesUsed
parameter_list|)
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|this
operator|.
name|iwBytesUsed
operator|=
name|iwBytesUsed
expr_stmt|;
name|pending
operator|=
name|PackedLongValues
operator|.
name|deltaPackedBuilder
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
name|pendingCounts
operator|=
name|PackedLongValues
operator|.
name|deltaPackedBuilder
argument_list|(
name|PackedInts
operator|.
name|COMPACT
argument_list|)
expr_stmt|;
name|docsWithField
operator|=
operator|new
name|DocsWithFieldSet
argument_list|()
expr_stmt|;
name|bytesUsed
operator|=
name|pending
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|pendingCounts
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|docsWithField
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|currentValues
argument_list|)
expr_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
name|bytesUsed
argument_list|)
expr_stmt|;
block|}
DECL|method|addValue
specifier|public
name|void
name|addValue
parameter_list|(
name|int
name|docID
parameter_list|,
name|long
name|value
parameter_list|)
block|{
assert|assert
name|docID
operator|>=
name|currentDoc
assert|;
if|if
condition|(
name|docID
operator|!=
name|currentDoc
condition|)
block|{
name|finishCurrentDoc
argument_list|()
expr_stmt|;
name|currentDoc
operator|=
name|docID
expr_stmt|;
block|}
name|addOneValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|updateBytesUsed
argument_list|()
expr_stmt|;
block|}
comment|// finalize currentDoc: this sorts the values in the current doc
DECL|method|finishCurrentDoc
specifier|private
name|void
name|finishCurrentDoc
parameter_list|()
block|{
if|if
condition|(
name|currentDoc
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
name|Arrays
operator|.
name|sort
argument_list|(
name|currentValues
argument_list|,
literal|0
argument_list|,
name|currentUpto
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentUpto
condition|;
name|i
operator|++
control|)
block|{
name|pending
operator|.
name|add
argument_list|(
name|currentValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// record the number of values for this doc
name|pendingCounts
operator|.
name|add
argument_list|(
name|currentUpto
argument_list|)
expr_stmt|;
name|currentUpto
operator|=
literal|0
expr_stmt|;
name|docsWithField
operator|.
name|add
argument_list|(
name|currentDoc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|finish
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|finishCurrentDoc
argument_list|()
expr_stmt|;
block|}
DECL|method|addOneValue
specifier|private
name|void
name|addOneValue
parameter_list|(
name|long
name|value
parameter_list|)
block|{
if|if
condition|(
name|currentUpto
operator|==
name|currentValues
operator|.
name|length
condition|)
block|{
name|currentValues
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|currentValues
argument_list|,
name|currentValues
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|currentValues
index|[
name|currentUpto
index|]
operator|=
name|value
expr_stmt|;
name|currentUpto
operator|++
expr_stmt|;
block|}
DECL|method|updateBytesUsed
specifier|private
name|void
name|updateBytesUsed
parameter_list|()
block|{
specifier|final
name|long
name|newBytesUsed
init|=
name|pending
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|pendingCounts
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|docsWithField
operator|.
name|ramBytesUsed
argument_list|()
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|currentValues
argument_list|)
decl_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
name|newBytesUsed
operator|-
name|bytesUsed
argument_list|)
expr_stmt|;
name|bytesUsed
operator|=
name|newBytesUsed
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|DocValuesConsumer
name|dvConsumer
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PackedLongValues
name|values
init|=
name|pending
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|PackedLongValues
name|valueCounts
init|=
name|pendingCounts
operator|.
name|build
argument_list|()
decl_stmt|;
name|dvConsumer
operator|.
name|addSortedNumericField
argument_list|(
name|fieldInfo
argument_list|,
operator|new
name|EmptyDocValuesProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|fieldInfoIn
parameter_list|)
block|{
if|if
condition|(
name|fieldInfoIn
operator|!=
name|fieldInfo
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"wrong fieldInfo"
argument_list|)
throw|;
block|}
return|return
operator|new
name|BufferedSortedNumericDocValues
argument_list|(
name|values
argument_list|,
name|valueCounts
argument_list|,
name|docsWithField
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|BufferedSortedNumericDocValues
specifier|private
specifier|static
class|class
name|BufferedSortedNumericDocValues
extends|extends
name|SortedNumericDocValues
block|{
DECL|field|valuesIter
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|valuesIter
decl_stmt|;
DECL|field|valueCountsIter
specifier|final
name|PackedLongValues
operator|.
name|Iterator
name|valueCountsIter
decl_stmt|;
DECL|field|docsWithField
specifier|final
name|DocIdSetIterator
name|docsWithField
decl_stmt|;
DECL|field|valueCount
specifier|private
name|int
name|valueCount
decl_stmt|;
DECL|field|valueUpto
specifier|private
name|int
name|valueUpto
decl_stmt|;
DECL|method|BufferedSortedNumericDocValues
specifier|public
name|BufferedSortedNumericDocValues
parameter_list|(
name|PackedLongValues
name|values
parameter_list|,
name|PackedLongValues
name|valueCounts
parameter_list|,
name|DocIdSetIterator
name|docsWithField
parameter_list|)
block|{
name|valuesIter
operator|=
name|values
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|valueCountsIter
operator|=
name|valueCounts
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|this
operator|.
name|docsWithField
operator|=
name|docsWithField
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docsWithField
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
name|valueUpto
init|;
name|i
operator|<
name|valueCount
condition|;
operator|++
name|i
control|)
block|{
name|valuesIter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|int
name|docID
init|=
name|docsWithField
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
if|if
condition|(
name|docID
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|valueCount
operator|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|valueCountsIter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|valueUpto
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docValueCount
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|valueCount
return|;
block|}
annotation|@
name|Override
DECL|method|nextValue
specifier|public
name|long
name|nextValue
parameter_list|()
block|{
if|if
condition|(
name|valueUpto
operator|==
name|valueCount
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
name|valueUpto
operator|++
expr_stmt|;
return|return
name|valuesIter
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|docsWithField
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

