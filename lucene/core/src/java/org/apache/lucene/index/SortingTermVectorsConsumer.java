begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|FlushInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_class
DECL|class|SortingTermVectorsConsumer
specifier|final
class|class
name|SortingTermVectorsConsumer
extends|extends
name|TermVectorsConsumer
block|{
DECL|field|tmpDirectory
name|TrackingTmpOutputDirectoryWrapper
name|tmpDirectory
decl_stmt|;
DECL|method|SortingTermVectorsConsumer
specifier|public
name|SortingTermVectorsConsumer
parameter_list|(
name|DocumentsWriterPerThread
name|docWriter
parameter_list|)
block|{
name|super
argument_list|(
name|docWriter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|flush
name|void
name|flush
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|TermsHashPerField
argument_list|>
name|fieldsToFlush
parameter_list|,
specifier|final
name|SegmentWriteState
name|state
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|sortMap
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|flush
argument_list|(
name|fieldsToFlush
argument_list|,
name|state
argument_list|,
name|sortMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmpDirectory
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sortMap
operator|==
literal|null
condition|)
block|{
comment|// we're lucky the index is already sorted, just rename the temporary file and return
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|tmpDirectory
operator|.
name|getTemporaryFiles
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tmpDirectory
operator|.
name|rename
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|TermVectorsReader
name|reader
init|=
name|docWriter
operator|.
name|codec
operator|.
name|termVectorsFormat
argument_list|()
operator|.
name|vectorsReader
argument_list|(
name|tmpDirectory
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|TermVectorsReader
name|mergeReader
init|=
name|reader
operator|.
name|getMergeInstance
argument_list|()
decl_stmt|;
name|TermVectorsWriter
name|writer
init|=
name|docWriter
operator|.
name|codec
operator|.
name|termVectorsFormat
argument_list|()
operator|.
name|vectorsWriter
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|Fields
name|vectors
init|=
name|mergeReader
operator|.
name|get
argument_list|(
name|sortMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|)
decl_stmt|;
name|writeTermVectors
argument_list|(
name|writer
argument_list|,
name|vectors
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|(
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|writer
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFiles
argument_list|(
name|tmpDirectory
argument_list|,
name|tmpDirectory
operator|.
name|getTemporaryFiles
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|initTermVectorsWriter
name|void
name|initTermVectorsWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|IOContext
name|context
init|=
operator|new
name|IOContext
argument_list|(
operator|new
name|FlushInfo
argument_list|(
name|docWriter
operator|.
name|getNumDocsInRAM
argument_list|()
argument_list|,
name|docWriter
operator|.
name|bytesUsed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|tmpDirectory
operator|=
operator|new
name|TrackingTmpOutputDirectoryWrapper
argument_list|(
name|docWriter
operator|.
name|directory
argument_list|)
expr_stmt|;
name|writer
operator|=
name|docWriter
operator|.
name|codec
operator|.
name|termVectorsFormat
argument_list|()
operator|.
name|vectorsWriter
argument_list|(
name|tmpDirectory
argument_list|,
name|docWriter
operator|.
name|getSegmentInfo
argument_list|()
argument_list|,
name|context
argument_list|)
expr_stmt|;
name|lastDocID
operator|=
literal|0
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort
specifier|public
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|tmpDirectory
argument_list|,
name|tmpDirectory
operator|.
name|getTemporaryFiles
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Safe (but, slowish) default method to copy every vector field in the provided {@link TermVectorsWriter}. */
DECL|method|writeTermVectors
specifier|private
specifier|static
name|void
name|writeTermVectors
parameter_list|(
name|TermVectorsWriter
name|writer
parameter_list|,
name|Fields
name|vectors
parameter_list|,
name|FieldInfos
name|fieldInfos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|vectors
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|startDocument
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|writer
operator|.
name|finishDocument
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|numFields
init|=
name|vectors
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numFields
operator|==
operator|-
literal|1
condition|)
block|{
comment|// count manually! TODO: Maybe enforce that Fields.size() returns something valid?
name|numFields
operator|=
literal|0
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|it
init|=
name|vectors
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|numFields
operator|++
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|startDocument
argument_list|(
name|numFields
argument_list|)
expr_stmt|;
name|String
name|lastFieldName
init|=
literal|null
decl_stmt|;
name|TermsEnum
name|termsEnum
init|=
literal|null
decl_stmt|;
name|PostingsEnum
name|docsAndPositionsEnum
init|=
literal|null
decl_stmt|;
name|int
name|fieldCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|fieldName
range|:
name|vectors
control|)
block|{
name|fieldCount
operator|++
expr_stmt|;
specifier|final
name|FieldInfo
name|fieldInfo
init|=
name|fieldInfos
operator|.
name|fieldInfo
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
assert|assert
name|lastFieldName
operator|==
literal|null
operator|||
name|fieldName
operator|.
name|compareTo
argument_list|(
name|lastFieldName
argument_list|)
operator|>
literal|0
operator|:
literal|"lastFieldName="
operator|+
name|lastFieldName
operator|+
literal|" fieldName="
operator|+
name|fieldName
assert|;
name|lastFieldName
operator|=
name|fieldName
expr_stmt|;
specifier|final
name|Terms
name|terms
init|=
name|vectors
operator|.
name|terms
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|terms
operator|==
literal|null
condition|)
block|{
comment|// FieldsEnum shouldn't lie...
continue|continue;
block|}
specifier|final
name|boolean
name|hasPositions
init|=
name|terms
operator|.
name|hasPositions
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasOffsets
init|=
name|terms
operator|.
name|hasOffsets
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|hasPayloads
init|=
name|terms
operator|.
name|hasPayloads
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|hasPayloads
operator|||
name|hasPositions
assert|;
name|int
name|numTerms
init|=
operator|(
name|int
operator|)
name|terms
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|numTerms
operator|==
operator|-
literal|1
condition|)
block|{
comment|// count manually. It is stupid, but needed, as Terms.size() is not a mandatory statistics function
name|numTerms
operator|=
literal|0
expr_stmt|;
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|numTerms
operator|++
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|startField
argument_list|(
name|fieldInfo
argument_list|,
name|numTerms
argument_list|,
name|hasPositions
argument_list|,
name|hasOffsets
argument_list|,
name|hasPayloads
argument_list|)
expr_stmt|;
name|termsEnum
operator|=
name|terms
operator|.
name|iterator
argument_list|()
expr_stmt|;
name|int
name|termCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|termsEnum
operator|.
name|next
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|termCount
operator|++
expr_stmt|;
specifier|final
name|int
name|freq
init|=
operator|(
name|int
operator|)
name|termsEnum
operator|.
name|totalTermFreq
argument_list|()
decl_stmt|;
name|writer
operator|.
name|startTerm
argument_list|(
name|termsEnum
operator|.
name|term
argument_list|()
argument_list|,
name|freq
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasPositions
operator|||
name|hasOffsets
condition|)
block|{
name|docsAndPositionsEnum
operator|=
name|termsEnum
operator|.
name|postings
argument_list|(
name|docsAndPositionsEnum
argument_list|,
name|PostingsEnum
operator|.
name|OFFSETS
operator||
name|PostingsEnum
operator|.
name|PAYLOADS
argument_list|)
expr_stmt|;
assert|assert
name|docsAndPositionsEnum
operator|!=
literal|null
assert|;
specifier|final
name|int
name|docID
init|=
name|docsAndPositionsEnum
operator|.
name|nextDoc
argument_list|()
decl_stmt|;
assert|assert
name|docID
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
assert|;
assert|assert
name|docsAndPositionsEnum
operator|.
name|freq
argument_list|()
operator|==
name|freq
assert|;
for|for
control|(
name|int
name|posUpto
init|=
literal|0
init|;
name|posUpto
operator|<
name|freq
condition|;
name|posUpto
operator|++
control|)
block|{
specifier|final
name|int
name|pos
init|=
name|docsAndPositionsEnum
operator|.
name|nextPosition
argument_list|()
decl_stmt|;
specifier|final
name|int
name|startOffset
init|=
name|docsAndPositionsEnum
operator|.
name|startOffset
argument_list|()
decl_stmt|;
specifier|final
name|int
name|endOffset
init|=
name|docsAndPositionsEnum
operator|.
name|endOffset
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|payload
init|=
name|docsAndPositionsEnum
operator|.
name|getPayload
argument_list|()
decl_stmt|;
assert|assert
operator|!
name|hasPositions
operator|||
name|pos
operator|>=
literal|0
assert|;
name|writer
operator|.
name|addPosition
argument_list|(
name|pos
argument_list|,
name|startOffset
argument_list|,
name|endOffset
argument_list|,
name|payload
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|finishTerm
argument_list|()
expr_stmt|;
block|}
assert|assert
name|termCount
operator|==
name|numTerms
assert|;
name|writer
operator|.
name|finishField
argument_list|()
expr_stmt|;
block|}
assert|assert
name|fieldCount
operator|==
name|numFields
assert|;
name|writer
operator|.
name|finishDocument
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

