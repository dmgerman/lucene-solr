begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|MutablePointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ByteBlockPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Counter
import|;
end_import

begin_comment
comment|/** Buffers up pending byte[][] value(s) per doc, then flushes when segment flushes. */
end_comment

begin_class
DECL|class|PointValuesWriter
class|class
name|PointValuesWriter
block|{
DECL|field|fieldInfo
specifier|private
specifier|final
name|FieldInfo
name|fieldInfo
decl_stmt|;
DECL|field|bytes
specifier|private
specifier|final
name|ByteBlockPool
name|bytes
decl_stmt|;
DECL|field|iwBytesUsed
specifier|private
specifier|final
name|Counter
name|iwBytesUsed
decl_stmt|;
DECL|field|docIDs
specifier|private
name|int
index|[]
name|docIDs
decl_stmt|;
DECL|field|numPoints
specifier|private
name|int
name|numPoints
decl_stmt|;
DECL|field|numDocs
specifier|private
name|int
name|numDocs
decl_stmt|;
DECL|field|lastDocID
specifier|private
name|int
name|lastDocID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|packedBytesLength
specifier|private
specifier|final
name|int
name|packedBytesLength
decl_stmt|;
DECL|method|PointValuesWriter
specifier|public
name|PointValuesWriter
parameter_list|(
name|DocumentsWriterPerThread
name|docWriter
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
name|this
operator|.
name|fieldInfo
operator|=
name|fieldInfo
expr_stmt|;
name|this
operator|.
name|iwBytesUsed
operator|=
name|docWriter
operator|.
name|bytesUsed
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
operator|new
name|ByteBlockPool
argument_list|(
name|docWriter
operator|.
name|byteBlockAllocator
argument_list|)
expr_stmt|;
name|docIDs
operator|=
operator|new
name|int
index|[
literal|16
index|]
expr_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
literal|16
operator|*
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
name|packedBytesLength
operator|=
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
operator|*
name|fieldInfo
operator|.
name|getPointNumBytes
argument_list|()
expr_stmt|;
block|}
comment|// TODO: if exactly the same value is added to exactly the same doc, should we dedup?
DECL|method|addPackedValue
specifier|public
name|void
name|addPackedValue
parameter_list|(
name|int
name|docID
parameter_list|,
name|BytesRef
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field="
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|": point value must not be null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|value
operator|.
name|length
operator|!=
name|packedBytesLength
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field="
operator|+
name|fieldInfo
operator|.
name|name
operator|+
literal|": this field's value has length="
operator|+
name|value
operator|.
name|length
operator|+
literal|" but should be "
operator|+
operator|(
name|fieldInfo
operator|.
name|getPointDimensionCount
argument_list|()
operator|*
name|fieldInfo
operator|.
name|getPointNumBytes
argument_list|()
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|docIDs
operator|.
name|length
operator|==
name|numPoints
condition|)
block|{
name|docIDs
operator|=
name|ArrayUtil
operator|.
name|grow
argument_list|(
name|docIDs
argument_list|,
name|numPoints
operator|+
literal|1
argument_list|)
expr_stmt|;
name|iwBytesUsed
operator|.
name|addAndGet
argument_list|(
operator|(
name|docIDs
operator|.
name|length
operator|-
name|numPoints
operator|)
operator|*
name|Integer
operator|.
name|BYTES
argument_list|)
expr_stmt|;
block|}
name|bytes
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|docIDs
index|[
name|numPoints
index|]
operator|=
name|docID
expr_stmt|;
if|if
condition|(
name|docID
operator|!=
name|lastDocID
condition|)
block|{
name|numDocs
operator|++
expr_stmt|;
name|lastDocID
operator|=
name|docID
expr_stmt|;
block|}
name|numPoints
operator|++
expr_stmt|;
block|}
DECL|method|flush
specifier|public
name|void
name|flush
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|sortMap
parameter_list|,
name|PointsWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
name|PointValues
name|points
init|=
operator|new
name|MutablePointValues
argument_list|()
block|{
specifier|final
name|int
index|[]
name|ords
init|=
operator|new
name|int
index|[
name|numPoints
index|]
decl_stmt|;
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPoints
condition|;
operator|++
name|i
control|)
block|{
name|ords
index|[
name|i
index|]
operator|=
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|intersect
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|packedValue
init|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numPoints
condition|;
name|i
operator|++
control|)
block|{
name|getValue
argument_list|(
name|i
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
assert|assert
name|scratch
operator|.
name|length
operator|==
name|packedValue
operator|.
name|length
assert|;
name|System
operator|.
name|arraycopy
argument_list|(
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
argument_list|,
name|packedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|visitor
operator|.
name|visit
argument_list|(
name|getDocID
argument_list|(
name|i
argument_list|)
argument_list|,
name|packedValue
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|estimatePointCount
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getMinPackedValue
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getMaxPackedValue
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumDimensions
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getBytesPerDimension
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|numPoints
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocCount
parameter_list|()
block|{
return|return
name|numDocs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|int
name|tmp
init|=
name|ords
index|[
name|i
index|]
decl_stmt|;
name|ords
index|[
name|i
index|]
operator|=
name|ords
index|[
name|j
index|]
expr_stmt|;
name|ords
index|[
name|j
index|]
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocID
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|docIDs
index|[
name|ords
index|[
name|i
index|]
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getValue
parameter_list|(
name|int
name|i
parameter_list|,
name|BytesRef
name|packedValue
parameter_list|)
block|{
specifier|final
name|long
name|offset
init|=
operator|(
name|long
operator|)
name|packedBytesLength
operator|*
name|ords
index|[
name|i
index|]
decl_stmt|;
name|packedValue
operator|.
name|length
operator|=
name|packedBytesLength
expr_stmt|;
name|bytes
operator|.
name|setRawBytesRef
argument_list|(
name|packedValue
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getByteAt
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
block|{
specifier|final
name|long
name|offset
init|=
operator|(
name|long
operator|)
name|packedBytesLength
operator|*
name|ords
index|[
name|i
index|]
operator|+
name|k
decl_stmt|;
return|return
name|bytes
operator|.
name|readByte
argument_list|(
name|offset
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|PointValues
name|values
decl_stmt|;
if|if
condition|(
name|sortMap
operator|==
literal|null
condition|)
block|{
name|values
operator|=
name|points
expr_stmt|;
block|}
else|else
block|{
name|values
operator|=
operator|new
name|MutableSortingPointValues
argument_list|(
operator|(
name|MutablePointValues
operator|)
name|points
argument_list|,
name|sortMap
argument_list|)
expr_stmt|;
block|}
name|PointsReader
name|reader
init|=
operator|new
name|PointsReader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|PointValues
name|getValues
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
if|if
condition|(
name|fieldName
operator|.
name|equals
argument_list|(
name|fieldInfo
operator|.
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"fieldName must be the same"
argument_list|)
throw|;
block|}
return|return
name|values
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkIntegrity
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
literal|0L
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{       }
block|}
decl_stmt|;
name|writer
operator|.
name|writeField
argument_list|(
name|fieldInfo
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
DECL|class|MutableSortingPointValues
specifier|static
specifier|final
class|class
name|MutableSortingPointValues
extends|extends
name|MutablePointValues
block|{
DECL|field|in
specifier|private
specifier|final
name|MutablePointValues
name|in
decl_stmt|;
DECL|field|docMap
specifier|private
specifier|final
name|Sorter
operator|.
name|DocMap
name|docMap
decl_stmt|;
DECL|method|MutableSortingPointValues
specifier|public
name|MutableSortingPointValues
parameter_list|(
specifier|final
name|MutablePointValues
name|in
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|docMap
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|docMap
operator|=
name|docMap
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|intersect
argument_list|(
operator|new
name|IntersectVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|docMap
operator|.
name|oldToNew
argument_list|(
name|docID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|int
name|docID
parameter_list|,
name|byte
index|[]
name|packedValue
parameter_list|)
throws|throws
name|IOException
block|{
name|visitor
operator|.
name|visit
argument_list|(
name|docMap
operator|.
name|oldToNew
argument_list|(
name|docID
argument_list|)
argument_list|,
name|packedValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Relation
name|compare
parameter_list|(
name|byte
index|[]
name|minPackedValue
parameter_list|,
name|byte
index|[]
name|maxPackedValue
parameter_list|)
block|{
return|return
name|visitor
operator|.
name|compare
argument_list|(
name|minPackedValue
argument_list|,
name|maxPackedValue
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimatePointCount
specifier|public
name|long
name|estimatePointCount
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
return|return
name|in
operator|.
name|estimatePointCount
argument_list|(
name|visitor
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getMinPackedValue
specifier|public
name|byte
index|[]
name|getMinPackedValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getMinPackedValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxPackedValue
specifier|public
name|byte
index|[]
name|getMaxPackedValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getMaxPackedValue
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDimensions
specifier|public
name|int
name|getNumDimensions
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getNumDimensions
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesPerDimension
specifier|public
name|int
name|getBytesPerDimension
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|getBytesPerDimension
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|in
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
block|{
return|return
name|in
operator|.
name|getDocCount
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getValue
specifier|public
name|void
name|getValue
parameter_list|(
name|int
name|i
parameter_list|,
name|BytesRef
name|packedValue
parameter_list|)
block|{
name|in
operator|.
name|getValue
argument_list|(
name|i
argument_list|,
name|packedValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getByteAt
specifier|public
name|byte
name|getByteAt
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
block|{
return|return
name|in
operator|.
name|getByteAt
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getDocID
specifier|public
name|int
name|getDocID
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|docMap
operator|.
name|oldToNew
argument_list|(
name|in
operator|.
name|getDocID
argument_list|(
name|i
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|swap
specifier|public
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|in
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

