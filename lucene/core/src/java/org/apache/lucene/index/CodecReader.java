begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|FieldsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NormsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|PointsReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|TermVectorsReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountables
import|;
end_import

begin_comment
comment|/**  * LeafReader implemented by codec APIs.  */
end_comment

begin_class
DECL|class|CodecReader
specifier|public
specifier|abstract
class|class
name|CodecReader
extends|extends
name|LeafReader
implements|implements
name|Accountable
block|{
comment|/** Sole constructor. (For invocation by subclass     * constructors, typically implicit.) */
DECL|method|CodecReader
specifier|protected
name|CodecReader
parameter_list|()
block|{}
comment|/**     * Expert: retrieve thread-private StoredFieldsReader    * @lucene.internal     */
DECL|method|getFieldsReader
specifier|public
specifier|abstract
name|StoredFieldsReader
name|getFieldsReader
parameter_list|()
function_decl|;
comment|/**     * Expert: retrieve thread-private TermVectorsReader    * @lucene.internal     */
DECL|method|getTermVectorsReader
specifier|public
specifier|abstract
name|TermVectorsReader
name|getTermVectorsReader
parameter_list|()
function_decl|;
comment|/**     * Expert: retrieve underlying NormsProducer    * @lucene.internal     */
DECL|method|getNormsReader
specifier|public
specifier|abstract
name|NormsProducer
name|getNormsReader
parameter_list|()
function_decl|;
comment|/**     * Expert: retrieve underlying DocValuesProducer    * @lucene.internal     */
DECL|method|getDocValuesReader
specifier|public
specifier|abstract
name|DocValuesProducer
name|getDocValuesReader
parameter_list|()
function_decl|;
comment|/**    * Expert: retrieve underlying FieldsProducer    * @lucene.internal    */
DECL|method|getPostingsReader
specifier|public
specifier|abstract
name|FieldsProducer
name|getPostingsReader
parameter_list|()
function_decl|;
comment|/**    * Expert: retrieve underlying PointsReader    * @lucene.internal    */
DECL|method|getPointsReader
specifier|public
specifier|abstract
name|PointsReader
name|getPointsReader
parameter_list|()
function_decl|;
annotation|@
name|Override
DECL|method|document
specifier|public
specifier|final
name|void
name|document
parameter_list|(
name|int
name|docID
parameter_list|,
name|StoredFieldVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|checkBounds
argument_list|(
name|docID
argument_list|)
expr_stmt|;
name|getFieldsReader
argument_list|()
operator|.
name|visitDocument
argument_list|(
name|docID
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getTermVectors
specifier|public
specifier|final
name|Fields
name|getTermVectors
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
name|TermVectorsReader
name|termVectorsReader
init|=
name|getTermVectorsReader
argument_list|()
decl_stmt|;
if|if
condition|(
name|termVectorsReader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|checkBounds
argument_list|(
name|docID
argument_list|)
expr_stmt|;
return|return
name|termVectorsReader
operator|.
name|get
argument_list|(
name|docID
argument_list|)
return|;
block|}
DECL|method|checkBounds
specifier|private
name|void
name|checkBounds
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|<
literal|0
operator|||
name|docID
operator|>=
name|maxDoc
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
literal|"docID must be>= 0 and< maxDoc="
operator|+
name|maxDoc
argument_list|()
operator|+
literal|" (got docID="
operator|+
name|docID
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|terms
specifier|public
specifier|final
name|Terms
name|terms
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
comment|//ensureOpen(); no; getPostingsReader calls this
comment|// We could check the FieldInfo IndexOptions but there's no point since
comment|//   PostingsReader will simply return null for fields that don't exist or that have no terms index.
return|return
name|getPostingsReader
argument_list|()
operator|.
name|terms
argument_list|(
name|field
argument_list|)
return|;
block|}
comment|// returns the FieldInfo that corresponds to the given field and type, or
comment|// null if the field does not exist, or not indexed as the requested
comment|// DovDocValuesType.
DECL|method|getDVField
specifier|private
name|FieldInfo
name|getDVField
parameter_list|(
name|String
name|field
parameter_list|,
name|DocValuesType
name|type
parameter_list|)
block|{
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
comment|// Field does not exist
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|==
name|DocValuesType
operator|.
name|NONE
condition|)
block|{
comment|// Field was not indexed with doc values
return|return
literal|null
return|;
block|}
if|if
condition|(
name|fi
operator|.
name|getDocValuesType
argument_list|()
operator|!=
name|type
condition|)
block|{
comment|// Field DocValues are different than requested type
return|return
literal|null
return|;
block|}
return|return
name|fi
return|;
block|}
annotation|@
name|Override
DECL|method|getNumericDocValues
specifier|public
specifier|final
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getDVField
argument_list|(
name|field
argument_list|,
name|DocValuesType
operator|.
name|NUMERIC
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDocValuesReader
argument_list|()
operator|.
name|getNumeric
argument_list|(
name|fi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getBinaryDocValues
specifier|public
specifier|final
name|BinaryDocValues
name|getBinaryDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getDVField
argument_list|(
name|field
argument_list|,
name|DocValuesType
operator|.
name|BINARY
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDocValuesReader
argument_list|()
operator|.
name|getBinary
argument_list|(
name|fi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedDocValues
specifier|public
specifier|final
name|SortedDocValues
name|getSortedDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getDVField
argument_list|(
name|field
argument_list|,
name|DocValuesType
operator|.
name|SORTED
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDocValuesReader
argument_list|()
operator|.
name|getSorted
argument_list|(
name|fi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedNumericDocValues
specifier|public
specifier|final
name|SortedNumericDocValues
name|getSortedNumericDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getDVField
argument_list|(
name|field
argument_list|,
name|DocValuesType
operator|.
name|SORTED_NUMERIC
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDocValuesReader
argument_list|()
operator|.
name|getSortedNumeric
argument_list|(
name|fi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getSortedSetDocValues
specifier|public
specifier|final
name|SortedSetDocValues
name|getSortedSetDocValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getDVField
argument_list|(
name|field
argument_list|,
name|DocValuesType
operator|.
name|SORTED_SET
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDocValuesReader
argument_list|()
operator|.
name|getSortedSet
argument_list|(
name|fi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getNormValues
specifier|public
specifier|final
name|NumericDocValues
name|getNormValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|hasNorms
argument_list|()
operator|==
literal|false
condition|)
block|{
comment|// Field does not exist or does not index norms
return|return
literal|null
return|;
block|}
return|return
name|getNormsReader
argument_list|()
operator|.
name|getNorms
argument_list|(
name|fi
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getPointValues
specifier|public
specifier|final
name|PointValues
name|getPointValues
parameter_list|(
name|String
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
name|FieldInfo
name|fi
init|=
name|getFieldInfos
argument_list|()
operator|.
name|fieldInfo
argument_list|(
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|==
literal|null
operator|||
name|fi
operator|.
name|getPointDimensionCount
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// Field does not exist or does not index points
return|return
literal|null
return|;
block|}
return|return
name|getPointsReader
argument_list|()
operator|.
name|getValues
argument_list|(
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|doClose
specifier|protected
name|void
name|doClose
parameter_list|()
throws|throws
name|IOException
block|{   }
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// terms/postings
name|long
name|ramBytesUsed
init|=
name|getPostingsReader
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
decl_stmt|;
comment|// norms
if|if
condition|(
name|getNormsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ramBytesUsed
operator|+=
name|getNormsReader
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
comment|// docvalues
if|if
condition|(
name|getDocValuesReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ramBytesUsed
operator|+=
name|getDocValuesReader
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
comment|// stored fields
if|if
condition|(
name|getFieldsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ramBytesUsed
operator|+=
name|getFieldsReader
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
comment|// term vectors
if|if
condition|(
name|getTermVectorsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ramBytesUsed
operator|+=
name|getTermVectorsReader
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
comment|// points
if|if
condition|(
name|getPointsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|ramBytesUsed
operator|+=
name|getPointsReader
argument_list|()
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
block|}
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getChildResources
specifier|public
name|Collection
argument_list|<
name|Accountable
argument_list|>
name|getChildResources
parameter_list|()
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Accountable
argument_list|>
name|resources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
decl_stmt|;
comment|// terms/postings
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"postings"
argument_list|,
name|getPostingsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// norms
if|if
condition|(
name|getNormsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"norms"
argument_list|,
name|getNormsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// docvalues
if|if
condition|(
name|getDocValuesReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"docvalues"
argument_list|,
name|getDocValuesReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// stored fields
if|if
condition|(
name|getFieldsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"stored fields"
argument_list|,
name|getFieldsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// term vectors
if|if
condition|(
name|getTermVectorsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"term vectors"
argument_list|,
name|getTermVectorsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// points
if|if
condition|(
name|getPointsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|resources
operator|.
name|add
argument_list|(
name|Accountables
operator|.
name|namedAccountable
argument_list|(
literal|"points"
argument_list|,
name|getPointsReader
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|resources
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|ensureOpen
argument_list|()
expr_stmt|;
comment|// terms/postings
name|getPostingsReader
argument_list|()
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
comment|// norms
if|if
condition|(
name|getNormsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getNormsReader
argument_list|()
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
comment|// docvalues
if|if
condition|(
name|getDocValuesReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getDocValuesReader
argument_list|()
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
comment|// stored fields
if|if
condition|(
name|getFieldsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getFieldsReader
argument_list|()
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
comment|// term vectors
if|if
condition|(
name|getTermVectorsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getTermVectorsReader
argument_list|()
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
comment|// points
if|if
condition|(
name|getPointsReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getPointsReader
argument_list|()
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

