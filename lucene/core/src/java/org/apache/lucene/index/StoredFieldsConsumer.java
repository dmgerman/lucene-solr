begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_class
DECL|class|StoredFieldsConsumer
class|class
name|StoredFieldsConsumer
block|{
DECL|field|docWriter
specifier|final
name|DocumentsWriterPerThread
name|docWriter
decl_stmt|;
DECL|field|writer
name|StoredFieldsWriter
name|writer
decl_stmt|;
DECL|field|lastDoc
name|int
name|lastDoc
decl_stmt|;
DECL|method|StoredFieldsConsumer
name|StoredFieldsConsumer
parameter_list|(
name|DocumentsWriterPerThread
name|docWriter
parameter_list|)
block|{
name|this
operator|.
name|docWriter
operator|=
name|docWriter
expr_stmt|;
name|this
operator|.
name|lastDoc
operator|=
operator|-
literal|1
expr_stmt|;
block|}
DECL|method|initStoredFieldsWriter
specifier|protected
name|void
name|initStoredFieldsWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|writer
operator|=
name|docWriter
operator|.
name|codec
operator|.
name|storedFieldsFormat
argument_list|()
operator|.
name|fieldsWriter
argument_list|(
name|docWriter
operator|.
name|directory
argument_list|,
name|docWriter
operator|.
name|getSegmentInfo
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|startDocument
name|void
name|startDocument
parameter_list|(
name|int
name|docID
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|lastDoc
operator|<
name|docID
assert|;
name|initStoredFieldsWriter
argument_list|()
expr_stmt|;
while|while
condition|(
operator|++
name|lastDoc
operator|<
name|docID
condition|)
block|{
name|writer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|finishDocument
argument_list|()
expr_stmt|;
block|}
name|writer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
DECL|method|writeField
name|void
name|writeField
parameter_list|(
name|FieldInfo
name|info
parameter_list|,
name|IndexableField
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeField
argument_list|(
name|info
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
DECL|method|finishDocument
name|void
name|finishDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|finishDocument
argument_list|()
expr_stmt|;
block|}
DECL|method|finish
name|void
name|finish
parameter_list|(
name|int
name|maxDoc
parameter_list|)
throws|throws
name|IOException
block|{
while|while
condition|(
name|lastDoc
operator|<
name|maxDoc
operator|-
literal|1
condition|)
block|{
name|startDocument
argument_list|(
name|lastDoc
argument_list|)
expr_stmt|;
name|finishDocument
argument_list|()
expr_stmt|;
operator|++
name|lastDoc
expr_stmt|;
block|}
block|}
DECL|method|flush
name|void
name|flush
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|sortMap
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|writer
operator|.
name|finish
argument_list|(
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
DECL|method|abort
name|void
name|abort
parameter_list|()
block|{
if|if
condition|(
name|writer
operator|!=
literal|null
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

