begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|StoredFieldsWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|StoredField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IOContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_class
DECL|class|SortingStoredFieldsConsumer
specifier|final
class|class
name|SortingStoredFieldsConsumer
extends|extends
name|StoredFieldsConsumer
block|{
DECL|field|tmpDirectory
name|TrackingTmpOutputDirectoryWrapper
name|tmpDirectory
decl_stmt|;
DECL|method|SortingStoredFieldsConsumer
name|SortingStoredFieldsConsumer
parameter_list|(
name|DocumentsWriterPerThread
name|docWriter
parameter_list|)
block|{
name|super
argument_list|(
name|docWriter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|initStoredFieldsWriter
specifier|protected
name|void
name|initStoredFieldsWriter
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|writer
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|tmpDirectory
operator|=
operator|new
name|TrackingTmpOutputDirectoryWrapper
argument_list|(
name|docWriter
operator|.
name|directory
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|docWriter
operator|.
name|codec
operator|.
name|storedFieldsFormat
argument_list|()
operator|.
name|fieldsWriter
argument_list|(
name|tmpDirectory
argument_list|,
name|docWriter
operator|.
name|getSegmentInfo
argument_list|()
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|flush
name|void
name|flush
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|Sorter
operator|.
name|DocMap
name|sortMap
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|flush
argument_list|(
name|state
argument_list|,
name|sortMap
argument_list|)
expr_stmt|;
if|if
condition|(
name|sortMap
operator|==
literal|null
condition|)
block|{
comment|// we're lucky the index is already sorted, just rename the temporary file and return
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|tmpDirectory
operator|.
name|getTemporaryFiles
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|tmpDirectory
operator|.
name|rename
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|StoredFieldsReader
name|reader
init|=
name|docWriter
operator|.
name|codec
operator|.
name|storedFieldsFormat
argument_list|()
operator|.
name|fieldsReader
argument_list|(
name|tmpDirectory
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
name|StoredFieldsReader
name|mergeReader
init|=
name|reader
operator|.
name|getMergeInstance
argument_list|()
decl_stmt|;
name|StoredFieldsWriter
name|sortWriter
init|=
name|docWriter
operator|.
name|codec
operator|.
name|storedFieldsFormat
argument_list|()
operator|.
name|fieldsWriter
argument_list|(
name|state
operator|.
name|directory
argument_list|,
name|state
operator|.
name|segmentInfo
argument_list|,
name|IOContext
operator|.
name|DEFAULT
argument_list|)
decl_stmt|;
try|try
block|{
name|reader
operator|.
name|checkIntegrity
argument_list|()
expr_stmt|;
name|CopyVisitor
name|visitor
init|=
operator|new
name|CopyVisitor
argument_list|(
name|sortWriter
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|docID
init|=
literal|0
init|;
name|docID
operator|<
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
condition|;
name|docID
operator|++
control|)
block|{
name|sortWriter
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|mergeReader
operator|.
name|visitDocument
argument_list|(
name|sortMap
operator|.
name|newToOld
argument_list|(
name|docID
argument_list|)
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
name|sortWriter
operator|.
name|finishDocument
argument_list|()
expr_stmt|;
block|}
name|sortWriter
operator|.
name|finish
argument_list|(
name|state
operator|.
name|fieldInfos
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|reader
argument_list|,
name|sortWriter
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|deleteFiles
argument_list|(
name|tmpDirectory
argument_list|,
name|tmpDirectory
operator|.
name|getTemporaryFiles
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|abort
name|void
name|abort
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|abort
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|deleteFilesIgnoringExceptions
argument_list|(
name|tmpDirectory
argument_list|,
name|tmpDirectory
operator|.
name|getTemporaryFiles
argument_list|()
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * A visitor that copies every field it sees in the provided {@link StoredFieldsWriter}.    */
DECL|class|CopyVisitor
specifier|private
specifier|static
class|class
name|CopyVisitor
extends|extends
name|StoredFieldVisitor
implements|implements
name|IndexableField
block|{
DECL|field|writer
specifier|final
name|StoredFieldsWriter
name|writer
decl_stmt|;
DECL|field|binaryValue
name|BytesRef
name|binaryValue
decl_stmt|;
DECL|field|stringValue
name|String
name|stringValue
decl_stmt|;
DECL|field|numericValue
name|Number
name|numericValue
decl_stmt|;
DECL|field|currentField
name|FieldInfo
name|currentField
decl_stmt|;
DECL|method|CopyVisitor
name|CopyVisitor
parameter_list|(
name|StoredFieldsWriter
name|writer
parameter_list|)
block|{
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|binaryField
specifier|public
name|void
name|binaryField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
comment|// TODO: can we avoid new BR here?
name|binaryValue
operator|=
operator|new
name|BytesRef
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|stringField
specifier|public
name|void
name|stringField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
comment|// TODO: can we avoid new String here?
name|stringValue
operator|=
operator|new
name|String
argument_list|(
name|value
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|intField
specifier|public
name|void
name|intField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|int
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
name|numericValue
operator|=
name|value
expr_stmt|;
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|longField
specifier|public
name|void
name|longField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|long
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
name|numericValue
operator|=
name|value
expr_stmt|;
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|floatField
specifier|public
name|void
name|floatField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|float
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
name|numericValue
operator|=
name|value
expr_stmt|;
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|doubleField
specifier|public
name|void
name|doubleField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|,
name|double
name|value
parameter_list|)
throws|throws
name|IOException
block|{
name|reset
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
name|numericValue
operator|=
name|value
expr_stmt|;
name|write
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|needsField
specifier|public
name|Status
name|needsField
parameter_list|(
name|FieldInfo
name|fieldInfo
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|Status
operator|.
name|YES
return|;
block|}
annotation|@
name|Override
DECL|method|name
specifier|public
name|String
name|name
parameter_list|()
block|{
return|return
name|currentField
operator|.
name|name
return|;
block|}
annotation|@
name|Override
DECL|method|fieldType
specifier|public
name|IndexableFieldType
name|fieldType
parameter_list|()
block|{
return|return
name|StoredField
operator|.
name|TYPE
return|;
block|}
annotation|@
name|Override
DECL|method|binaryValue
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
block|{
return|return
name|binaryValue
return|;
block|}
annotation|@
name|Override
DECL|method|stringValue
specifier|public
name|String
name|stringValue
parameter_list|()
block|{
return|return
name|stringValue
return|;
block|}
annotation|@
name|Override
DECL|method|numericValue
specifier|public
name|Number
name|numericValue
parameter_list|()
block|{
return|return
name|numericValue
return|;
block|}
annotation|@
name|Override
DECL|method|readerValue
specifier|public
name|Reader
name|readerValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
DECL|method|tokenStream
specifier|public
name|TokenStream
name|tokenStream
parameter_list|(
name|Analyzer
name|analyzer
parameter_list|,
name|TokenStream
name|reuse
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
DECL|method|reset
name|void
name|reset
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
block|{
name|currentField
operator|=
name|field
expr_stmt|;
name|binaryValue
operator|=
literal|null
expr_stmt|;
name|stringValue
operator|=
literal|null
expr_stmt|;
name|numericValue
operator|=
literal|null
expr_stmt|;
block|}
DECL|method|write
name|void
name|write
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|writeField
argument_list|(
name|currentField
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

