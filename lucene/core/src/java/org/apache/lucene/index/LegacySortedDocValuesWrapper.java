begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * Wraps a {@link LegacySortedDocValues} into a {@link SortedDocValues}.  *  * @deprecated Implement {@link SortedDocValues} directly.  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|LegacySortedDocValuesWrapper
specifier|public
specifier|final
class|class
name|LegacySortedDocValuesWrapper
extends|extends
name|SortedDocValues
block|{
DECL|field|values
specifier|private
specifier|final
name|LegacySortedDocValues
name|values
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|docID
specifier|private
name|int
name|docID
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|ord
specifier|private
name|int
name|ord
decl_stmt|;
DECL|method|LegacySortedDocValuesWrapper
specifier|public
name|LegacySortedDocValuesWrapper
parameter_list|(
name|LegacySortedDocValues
name|values
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
block|{
assert|assert
name|docID
operator|!=
name|NO_MORE_DOCS
assert|;
name|docID
operator|++
expr_stmt|;
while|while
condition|(
name|docID
operator|<
name|maxDoc
condition|)
block|{
name|ord
operator|=
name|values
operator|.
name|getOrd
argument_list|(
name|docID
argument_list|)
expr_stmt|;
if|if
condition|(
name|ord
operator|!=
operator|-
literal|1
condition|)
block|{
return|return
name|docID
return|;
block|}
name|docID
operator|++
expr_stmt|;
block|}
name|docID
operator|=
name|NO_MORE_DOCS
expr_stmt|;
return|return
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
block|{
if|if
condition|(
name|target
operator|<
name|docID
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot advance backwards: docID="
operator|+
name|docID
operator|+
literal|" target="
operator|+
name|target
argument_list|)
throw|;
block|}
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
name|this
operator|.
name|docID
operator|=
name|NO_MORE_DOCS
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|docID
operator|=
name|target
operator|-
literal|1
expr_stmt|;
name|nextDoc
argument_list|()
expr_stmt|;
block|}
return|return
name|docID
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
DECL|method|ordValue
specifier|public
name|int
name|ordValue
parameter_list|()
block|{
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|ord
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
block|}
end_class

end_unit

