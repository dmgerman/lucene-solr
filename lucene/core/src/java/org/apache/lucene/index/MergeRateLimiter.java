begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RateLimiter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ThreadInterruptedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
operator|.
name|OneMergeProgress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|MergePolicy
operator|.
name|OneMergeProgress
operator|.
name|PauseReason
import|;
end_import

begin_comment
comment|/** This is the {@link RateLimiter} that {@link IndexWriter} assigns to each running merge, to   *  give {@link MergeScheduler}s ionice like control.  *  *  @lucene.internal */
end_comment

begin_class
DECL|class|MergeRateLimiter
specifier|public
class|class
name|MergeRateLimiter
extends|extends
name|RateLimiter
block|{
DECL|field|MIN_PAUSE_CHECK_MSEC
specifier|private
specifier|final
specifier|static
name|int
name|MIN_PAUSE_CHECK_MSEC
init|=
literal|25
decl_stmt|;
DECL|field|MIN_PAUSE_NS
specifier|private
specifier|final
specifier|static
name|long
name|MIN_PAUSE_NS
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|2
argument_list|)
decl_stmt|;
DECL|field|MAX_PAUSE_NS
specifier|private
specifier|final
specifier|static
name|long
name|MAX_PAUSE_NS
init|=
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toNanos
argument_list|(
literal|250
argument_list|)
decl_stmt|;
DECL|field|mbPerSec
specifier|private
specifier|volatile
name|double
name|mbPerSec
decl_stmt|;
DECL|field|minPauseCheckBytes
specifier|private
specifier|volatile
name|long
name|minPauseCheckBytes
decl_stmt|;
DECL|field|lastNS
specifier|private
name|long
name|lastNS
decl_stmt|;
DECL|field|totalBytesWritten
specifier|private
name|AtomicLong
name|totalBytesWritten
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
DECL|field|mergeProgress
specifier|private
specifier|final
name|OneMergeProgress
name|mergeProgress
decl_stmt|;
comment|/** Sole constructor. */
DECL|method|MergeRateLimiter
specifier|public
name|MergeRateLimiter
parameter_list|(
name|OneMergeProgress
name|mergeProgress
parameter_list|)
block|{
comment|// Initially no IO limit; use setter here so minPauseCheckBytes is set:
name|this
operator|.
name|mergeProgress
operator|=
name|mergeProgress
expr_stmt|;
name|setMBPerSec
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setMBPerSec
specifier|public
name|void
name|setMBPerSec
parameter_list|(
name|double
name|mbPerSec
parameter_list|)
block|{
comment|// Synchronized to make updates to mbPerSec and minPauseCheckBytes atomic.
synchronized|synchronized
init|(
name|this
init|)
block|{
comment|// 0.0 is allowed: it means the merge is paused
if|if
condition|(
name|mbPerSec
operator|<
literal|0.0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"mbPerSec must be positive; got: "
operator|+
name|mbPerSec
argument_list|)
throw|;
block|}
name|this
operator|.
name|mbPerSec
operator|=
name|mbPerSec
expr_stmt|;
comment|// NOTE: Double.POSITIVE_INFINITY casts to Long.MAX_VALUE
name|this
operator|.
name|minPauseCheckBytes
operator|=
name|Math
operator|.
name|min
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
call|(
name|long
call|)
argument_list|(
operator|(
name|MIN_PAUSE_CHECK_MSEC
operator|/
literal|1000.0
operator|)
operator|*
name|mbPerSec
operator|*
literal|1024
operator|*
literal|1024
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|minPauseCheckBytes
operator|>=
literal|0
assert|;
block|}
name|mergeProgress
operator|.
name|wakeup
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getMBPerSec
specifier|public
name|double
name|getMBPerSec
parameter_list|()
block|{
return|return
name|mbPerSec
return|;
block|}
comment|/** Returns total bytes written by this merge. */
DECL|method|getTotalBytesWritten
specifier|public
name|long
name|getTotalBytesWritten
parameter_list|()
block|{
return|return
name|totalBytesWritten
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|pause
specifier|public
name|long
name|pause
parameter_list|(
name|long
name|bytes
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
name|totalBytesWritten
operator|.
name|addAndGet
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
comment|// While loop because we may wake up and check again when our rate limit
comment|// is changed while we were pausing:
name|long
name|paused
init|=
literal|0
decl_stmt|;
name|long
name|delta
decl_stmt|;
while|while
condition|(
operator|(
name|delta
operator|=
name|maybePause
argument_list|(
name|bytes
argument_list|,
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
operator|)
operator|>=
literal|0
condition|)
block|{
comment|// Keep waiting.
name|paused
operator|+=
name|delta
expr_stmt|;
block|}
return|return
name|paused
return|;
block|}
comment|/** Total NS merge was stopped. */
DECL|method|getTotalStoppedNS
specifier|public
name|long
name|getTotalStoppedNS
parameter_list|()
block|{
return|return
name|mergeProgress
operator|.
name|getPauseTimes
argument_list|()
operator|.
name|get
argument_list|(
name|PauseReason
operator|.
name|STOPPED
argument_list|)
return|;
block|}
comment|/** Total NS merge was paused to rate limit IO. */
DECL|method|getTotalPausedNS
specifier|public
name|long
name|getTotalPausedNS
parameter_list|()
block|{
return|return
name|mergeProgress
operator|.
name|getPauseTimes
argument_list|()
operator|.
name|get
argument_list|(
name|PauseReason
operator|.
name|PAUSED
argument_list|)
return|;
block|}
comment|/**     * Returns the number of nanoseconds spent in a paused state or<code>-1</code>    * if no pause was applied. If the thread needs pausing, this method delegates     * to the linked {@link OneMergeProgress}.     */
DECL|method|maybePause
specifier|private
name|long
name|maybePause
parameter_list|(
name|long
name|bytes
parameter_list|,
name|long
name|curNS
parameter_list|)
throws|throws
name|MergePolicy
operator|.
name|MergeAbortedException
block|{
comment|// Now is a good time to abort the merge:
if|if
condition|(
name|mergeProgress
operator|.
name|isAborted
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MergePolicy
operator|.
name|MergeAbortedException
argument_list|(
literal|"Merge aborted."
argument_list|)
throw|;
block|}
name|double
name|rate
init|=
name|mbPerSec
decl_stmt|;
comment|// read from volatile rate once.
name|double
name|secondsToPause
init|=
operator|(
name|bytes
operator|/
literal|1024.
operator|/
literal|1024.
operator|)
operator|/
name|rate
decl_stmt|;
comment|// Time we should sleep until; this is purely instantaneous
comment|// rate (just adds seconds onto the last time we had paused to);
comment|// maybe we should also offer decayed recent history one?
name|long
name|targetNS
init|=
name|lastNS
operator|+
call|(
name|long
call|)
argument_list|(
literal|1000000000
operator|*
name|secondsToPause
argument_list|)
decl_stmt|;
name|long
name|curPauseNS
init|=
name|targetNS
operator|-
name|curNS
decl_stmt|;
comment|// We don't bother with thread pausing if the pause is smaller than 2 msec.
if|if
condition|(
name|curPauseNS
operator|<=
name|MIN_PAUSE_NS
condition|)
block|{
comment|// Set to curNS, not targetNS, to enforce the instant rate, not
comment|// the "averaged over all history" rate:
name|lastNS
operator|=
name|curNS
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
comment|// Defensive: don't sleep for too long; the loop above will call us again if
comment|// we should keep sleeping and the rate may be adjusted in between.
if|if
condition|(
name|curPauseNS
operator|>
name|MAX_PAUSE_NS
condition|)
block|{
name|curPauseNS
operator|=
name|MAX_PAUSE_NS
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
try|try
block|{
name|mergeProgress
operator|.
name|pauseNanos
argument_list|(
name|curPauseNS
argument_list|,
name|rate
operator|==
literal|0.0
condition|?
name|PauseReason
operator|.
name|STOPPED
else|:
name|PauseReason
operator|.
name|PAUSED
argument_list|,
parameter_list|()
lambda|->
name|rate
operator|==
name|mbPerSec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|ThreadInterruptedException
argument_list|(
name|ie
argument_list|)
throw|;
block|}
return|return
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
return|;
block|}
annotation|@
name|Override
DECL|method|getMinPauseCheckBytes
specifier|public
name|long
name|getMinPauseCheckBytes
parameter_list|()
block|{
return|return
name|minPauseCheckBytes
return|;
block|}
block|}
end_class

end_unit

