begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.index
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_comment
comment|/** Accumulator for documents that have a value for a field. This is optimized  *  for the case that all documents have a value. */
end_comment

begin_class
DECL|class|DocsWithFieldSet
specifier|final
class|class
name|DocsWithFieldSet
extends|extends
name|DocIdSet
block|{
DECL|field|BASE_RAM_BYTES_USED
specifier|private
specifier|static
name|long
name|BASE_RAM_BYTES_USED
init|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|DocsWithFieldSet
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|set
specifier|private
name|FixedBitSet
name|set
decl_stmt|;
DECL|field|cost
specifier|private
name|int
name|cost
init|=
literal|0
decl_stmt|;
DECL|field|lastDocId
specifier|private
name|int
name|lastDocId
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|add
name|void
name|add
parameter_list|(
name|int
name|docID
parameter_list|)
block|{
if|if
condition|(
name|docID
operator|<=
name|lastDocId
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Out of order doc ids: last="
operator|+
name|lastDocId
operator|+
literal|", next="
operator|+
name|docID
argument_list|)
throw|;
block|}
if|if
condition|(
name|set
operator|!=
literal|null
condition|)
block|{
name|set
operator|=
name|FixedBitSet
operator|.
name|ensureCapacity
argument_list|(
name|set
argument_list|,
name|docID
argument_list|)
expr_stmt|;
name|set
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|docID
operator|!=
name|cost
condition|)
block|{
comment|// migrate to a sparse encoding using a bit set
name|set
operator|=
operator|new
name|FixedBitSet
argument_list|(
name|docID
operator|+
literal|1
argument_list|)
expr_stmt|;
name|set
operator|.
name|set
argument_list|(
literal|0
argument_list|,
name|cost
argument_list|)
expr_stmt|;
name|set
operator|.
name|set
argument_list|(
name|docID
argument_list|)
expr_stmt|;
block|}
name|lastDocId
operator|=
name|docID
expr_stmt|;
name|cost
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|BASE_RAM_BYTES_USED
operator|+
operator|(
name|set
operator|==
literal|null
condition|?
literal|0
else|:
name|set
operator|.
name|ramBytesUsed
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|iterator
specifier|public
name|DocIdSetIterator
name|iterator
parameter_list|()
block|{
return|return
name|set
operator|!=
literal|null
condition|?
operator|new
name|BitSetIterator
argument_list|(
name|set
argument_list|,
name|cost
argument_list|)
else|:
name|DocIdSetIterator
operator|.
name|all
argument_list|(
name|cost
argument_list|)
return|;
block|}
block|}
end_class

end_unit

