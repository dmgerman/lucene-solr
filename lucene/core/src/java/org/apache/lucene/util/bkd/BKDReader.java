begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ByteArrayDataInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Accountable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_comment
comment|/** Handles intersection of an multi-dimensional shape in byte[] space with a block KD-tree previously written with {@link BKDWriter}.  *  * @lucene.experimental */
end_comment

begin_class
DECL|class|BKDReader
specifier|public
specifier|final
class|class
name|BKDReader
extends|extends
name|PointValues
implements|implements
name|Accountable
block|{
comment|// Packed array of byte[] holding all split values in the full binary tree:
DECL|field|leafNodeOffset
specifier|final
name|int
name|leafNodeOffset
decl_stmt|;
DECL|field|numDims
specifier|final
name|int
name|numDims
decl_stmt|;
DECL|field|bytesPerDim
specifier|final
name|int
name|bytesPerDim
decl_stmt|;
DECL|field|numLeaves
specifier|final
name|int
name|numLeaves
decl_stmt|;
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|maxPointsInLeafNode
specifier|final
name|int
name|maxPointsInLeafNode
decl_stmt|;
DECL|field|minPackedValue
specifier|final
name|byte
index|[]
name|minPackedValue
decl_stmt|;
DECL|field|maxPackedValue
specifier|final
name|byte
index|[]
name|maxPackedValue
decl_stmt|;
DECL|field|pointCount
specifier|final
name|long
name|pointCount
decl_stmt|;
DECL|field|docCount
specifier|final
name|int
name|docCount
decl_stmt|;
DECL|field|version
specifier|final
name|int
name|version
decl_stmt|;
DECL|field|packedBytesLength
specifier|protected
specifier|final
name|int
name|packedBytesLength
decl_stmt|;
comment|// Used for 6.4.0+ index format:
DECL|field|packedIndex
specifier|final
name|byte
index|[]
name|packedIndex
decl_stmt|;
comment|// Used for Legacy (pre-6.4.0) index format, to hold a compact form of the index:
DECL|field|splitPackedValues
specifier|final
specifier|private
name|byte
index|[]
name|splitPackedValues
decl_stmt|;
DECL|field|bytesPerIndexEntry
specifier|final
name|int
name|bytesPerIndexEntry
decl_stmt|;
DECL|field|leafBlockFPs
specifier|final
name|long
index|[]
name|leafBlockFPs
decl_stmt|;
comment|/** Caller must pre-seek the provided {@link IndexInput} to the index location that {@link BKDWriter#finish} returned */
DECL|method|BKDReader
specifier|public
name|BKDReader
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|version
operator|=
name|CodecUtil
operator|.
name|checkHeader
argument_list|(
name|in
argument_list|,
name|BKDWriter
operator|.
name|CODEC_NAME
argument_list|,
name|BKDWriter
operator|.
name|VERSION_START
argument_list|,
name|BKDWriter
operator|.
name|VERSION_CURRENT
argument_list|)
expr_stmt|;
name|numDims
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|maxPointsInLeafNode
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|bytesPerDim
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|bytesPerIndexEntry
operator|=
name|numDims
operator|==
literal|1
operator|&&
name|version
operator|>=
name|BKDWriter
operator|.
name|VERSION_IMPLICIT_SPLIT_DIM_1D
condition|?
name|bytesPerDim
else|:
name|bytesPerDim
operator|+
literal|1
expr_stmt|;
name|packedBytesLength
operator|=
name|numDims
operator|*
name|bytesPerDim
expr_stmt|;
comment|// Read index:
name|numLeaves
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
assert|assert
name|numLeaves
operator|>
literal|0
assert|;
name|leafNodeOffset
operator|=
name|numLeaves
expr_stmt|;
name|minPackedValue
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
name|maxPackedValue
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|minPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|maxPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
if|if
condition|(
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|minPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
argument_list|,
name|maxPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
argument_list|)
operator|>
literal|0
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"minPackedValue "
operator|+
operator|new
name|BytesRef
argument_list|(
name|minPackedValue
argument_list|)
operator|+
literal|" is> maxPackedValue "
operator|+
operator|new
name|BytesRef
argument_list|(
name|maxPackedValue
argument_list|)
operator|+
literal|" for dim="
operator|+
name|dim
argument_list|,
name|in
argument_list|)
throw|;
block|}
block|}
name|pointCount
operator|=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|docCount
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|version
operator|>=
name|BKDWriter
operator|.
name|VERSION_PACKED_INDEX
condition|)
block|{
name|int
name|numBytes
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|packedIndex
operator|=
operator|new
name|byte
index|[
name|numBytes
index|]
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|packedIndex
argument_list|,
literal|0
argument_list|,
name|numBytes
argument_list|)
expr_stmt|;
name|leafBlockFPs
operator|=
literal|null
expr_stmt|;
name|splitPackedValues
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// legacy un-packed index
name|splitPackedValues
operator|=
operator|new
name|byte
index|[
name|bytesPerIndexEntry
operator|*
name|numLeaves
index|]
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|splitPackedValues
argument_list|,
literal|0
argument_list|,
name|splitPackedValues
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// Read the file pointers to the start of each leaf block:
name|long
index|[]
name|leafBlockFPs
init|=
operator|new
name|long
index|[
name|numLeaves
index|]
decl_stmt|;
name|long
name|lastFP
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numLeaves
condition|;
name|i
operator|++
control|)
block|{
name|long
name|delta
init|=
name|in
operator|.
name|readVLong
argument_list|()
decl_stmt|;
name|leafBlockFPs
index|[
name|i
index|]
operator|=
name|lastFP
operator|+
name|delta
expr_stmt|;
name|lastFP
operator|+=
name|delta
expr_stmt|;
block|}
comment|// Possibly rotate the leaf block FPs, if the index not fully balanced binary tree (only happens
comment|// if it was created by BKDWriter.merge or OneDimWriter).  In this case the leaf nodes may straddle the two bottom
comment|// levels of the binary tree:
if|if
condition|(
name|numDims
operator|==
literal|1
operator|&&
name|numLeaves
operator|>
literal|1
condition|)
block|{
name|int
name|levelCount
init|=
literal|2
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|numLeaves
operator|>=
name|levelCount
operator|&&
name|numLeaves
operator|<=
literal|2
operator|*
name|levelCount
condition|)
block|{
name|int
name|lastLevel
init|=
literal|2
operator|*
operator|(
name|numLeaves
operator|-
name|levelCount
operator|)
decl_stmt|;
assert|assert
name|lastLevel
operator|>=
literal|0
assert|;
if|if
condition|(
name|lastLevel
operator|!=
literal|0
condition|)
block|{
comment|// Last level is partially filled, so we must rotate the leaf FPs to match.  We do this here, after loading
comment|// at read-time, so that we can still delta code them on disk at write:
name|long
index|[]
name|newLeafBlockFPs
init|=
operator|new
name|long
index|[
name|numLeaves
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|leafBlockFPs
argument_list|,
name|lastLevel
argument_list|,
name|newLeafBlockFPs
argument_list|,
literal|0
argument_list|,
name|leafBlockFPs
operator|.
name|length
operator|-
name|lastLevel
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|leafBlockFPs
argument_list|,
literal|0
argument_list|,
name|newLeafBlockFPs
argument_list|,
name|leafBlockFPs
operator|.
name|length
operator|-
name|lastLevel
argument_list|,
name|lastLevel
argument_list|)
expr_stmt|;
name|leafBlockFPs
operator|=
name|newLeafBlockFPs
expr_stmt|;
block|}
break|break;
block|}
name|levelCount
operator|*=
literal|2
expr_stmt|;
block|}
block|}
name|this
operator|.
name|leafBlockFPs
operator|=
name|leafBlockFPs
expr_stmt|;
name|packedIndex
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
block|}
DECL|method|getMinLeafBlockFP
name|long
name|getMinLeafBlockFP
parameter_list|()
block|{
if|if
condition|(
name|packedIndex
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ByteArrayDataInput
argument_list|(
name|packedIndex
argument_list|)
operator|.
name|readVLong
argument_list|()
return|;
block|}
else|else
block|{
name|long
name|minFP
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|long
name|fp
range|:
name|leafBlockFPs
control|)
block|{
name|minFP
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minFP
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
return|return
name|minFP
return|;
block|}
block|}
comment|/** Used to walk the in-heap index    *    * @lucene.internal */
DECL|class|IndexTree
specifier|public
specifier|abstract
class|class
name|IndexTree
implements|implements
name|Cloneable
block|{
DECL|field|nodeID
specifier|protected
name|int
name|nodeID
decl_stmt|;
comment|// level is 1-based so that we can do level-1 w/o checking each time:
DECL|field|level
specifier|protected
name|int
name|level
decl_stmt|;
DECL|field|splitDim
specifier|protected
name|int
name|splitDim
decl_stmt|;
DECL|field|splitPackedValueStack
specifier|protected
specifier|final
name|byte
index|[]
index|[]
name|splitPackedValueStack
decl_stmt|;
DECL|method|IndexTree
specifier|protected
name|IndexTree
parameter_list|()
block|{
name|int
name|treeDepth
init|=
name|getTreeDepth
argument_list|()
decl_stmt|;
name|splitPackedValueStack
operator|=
operator|new
name|byte
index|[
name|treeDepth
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|nodeID
operator|=
literal|1
expr_stmt|;
name|level
operator|=
literal|1
expr_stmt|;
name|splitPackedValueStack
index|[
name|level
index|]
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
DECL|method|pushLeft
specifier|public
name|void
name|pushLeft
parameter_list|()
block|{
name|nodeID
operator|*=
literal|2
expr_stmt|;
name|level
operator|++
expr_stmt|;
if|if
condition|(
name|splitPackedValueStack
index|[
name|level
index|]
operator|==
literal|null
condition|)
block|{
name|splitPackedValueStack
index|[
name|level
index|]
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
block|}
comment|/** Clone, but you are not allowed to pop up past the point where the clone happened. */
DECL|method|clone
specifier|public
specifier|abstract
name|IndexTree
name|clone
parameter_list|()
function_decl|;
DECL|method|pushRight
specifier|public
name|void
name|pushRight
parameter_list|()
block|{
name|nodeID
operator|=
name|nodeID
operator|*
literal|2
operator|+
literal|1
expr_stmt|;
name|level
operator|++
expr_stmt|;
if|if
condition|(
name|splitPackedValueStack
index|[
name|level
index|]
operator|==
literal|null
condition|)
block|{
name|splitPackedValueStack
index|[
name|level
index|]
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
block|}
DECL|method|pop
specifier|public
name|void
name|pop
parameter_list|()
block|{
name|nodeID
operator|/=
literal|2
expr_stmt|;
name|level
operator|--
expr_stmt|;
name|splitDim
operator|=
operator|-
literal|1
expr_stmt|;
comment|//System.out.println("  pop nodeID=" + nodeID);
block|}
DECL|method|isLeafNode
specifier|public
name|boolean
name|isLeafNode
parameter_list|()
block|{
return|return
name|nodeID
operator|>=
name|leafNodeOffset
return|;
block|}
DECL|method|nodeExists
specifier|public
name|boolean
name|nodeExists
parameter_list|()
block|{
return|return
name|nodeID
operator|-
name|leafNodeOffset
operator|<
name|leafNodeOffset
return|;
block|}
DECL|method|getNodeID
specifier|public
name|int
name|getNodeID
parameter_list|()
block|{
return|return
name|nodeID
return|;
block|}
DECL|method|getSplitPackedValue
specifier|public
name|byte
index|[]
name|getSplitPackedValue
parameter_list|()
block|{
assert|assert
name|isLeafNode
argument_list|()
operator|==
literal|false
assert|;
assert|assert
name|splitPackedValueStack
index|[
name|level
index|]
operator|!=
literal|null
operator|:
literal|"level="
operator|+
name|level
assert|;
return|return
name|splitPackedValueStack
index|[
name|level
index|]
return|;
block|}
comment|/** Only valid after pushLeft or pushRight, not pop! */
DECL|method|getSplitDim
specifier|public
name|int
name|getSplitDim
parameter_list|()
block|{
assert|assert
name|isLeafNode
argument_list|()
operator|==
literal|false
assert|;
return|return
name|splitDim
return|;
block|}
comment|/** Only valid after pushLeft or pushRight, not pop! */
DECL|method|getSplitDimValue
specifier|public
specifier|abstract
name|BytesRef
name|getSplitDimValue
parameter_list|()
function_decl|;
comment|/** Only valid after pushLeft or pushRight, not pop! */
DECL|method|getLeafBlockFP
specifier|public
specifier|abstract
name|long
name|getLeafBlockFP
parameter_list|()
function_decl|;
block|}
comment|/** Reads the original simple yet heap-heavy index format */
DECL|class|LegacyIndexTree
specifier|private
specifier|final
class|class
name|LegacyIndexTree
extends|extends
name|IndexTree
block|{
DECL|field|leafBlockFP
specifier|private
name|long
name|leafBlockFP
decl_stmt|;
DECL|field|splitDimValue
specifier|private
specifier|final
name|byte
index|[]
name|splitDimValue
init|=
operator|new
name|byte
index|[
name|bytesPerDim
index|]
decl_stmt|;
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
DECL|method|LegacyIndexTree
specifier|public
name|LegacyIndexTree
parameter_list|()
block|{
name|setNodeData
argument_list|()
expr_stmt|;
name|scratch
operator|.
name|bytes
operator|=
name|splitDimValue
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|bytesPerDim
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|LegacyIndexTree
name|clone
parameter_list|()
block|{
name|LegacyIndexTree
name|index
init|=
operator|new
name|LegacyIndexTree
argument_list|()
decl_stmt|;
name|index
operator|.
name|nodeID
operator|=
name|nodeID
expr_stmt|;
name|index
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|index
operator|.
name|splitDim
operator|=
name|splitDim
expr_stmt|;
name|index
operator|.
name|leafBlockFP
operator|=
name|leafBlockFP
expr_stmt|;
name|index
operator|.
name|splitPackedValueStack
index|[
name|index
operator|.
name|level
index|]
operator|=
name|splitPackedValueStack
index|[
name|index
operator|.
name|level
index|]
operator|.
name|clone
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|pushLeft
specifier|public
name|void
name|pushLeft
parameter_list|()
block|{
name|super
operator|.
name|pushLeft
argument_list|()
expr_stmt|;
name|setNodeData
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|pushRight
specifier|public
name|void
name|pushRight
parameter_list|()
block|{
name|super
operator|.
name|pushRight
argument_list|()
expr_stmt|;
name|setNodeData
argument_list|()
expr_stmt|;
block|}
DECL|method|setNodeData
specifier|private
name|void
name|setNodeData
parameter_list|()
block|{
if|if
condition|(
name|isLeafNode
argument_list|()
condition|)
block|{
name|leafBlockFP
operator|=
name|leafBlockFPs
index|[
name|nodeID
operator|-
name|leafNodeOffset
index|]
expr_stmt|;
name|splitDim
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|leafBlockFP
operator|=
operator|-
literal|1
expr_stmt|;
name|int
name|address
init|=
name|nodeID
operator|*
name|bytesPerIndexEntry
decl_stmt|;
if|if
condition|(
name|numDims
operator|==
literal|1
condition|)
block|{
name|splitDim
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|version
operator|<
name|BKDWriter
operator|.
name|VERSION_IMPLICIT_SPLIT_DIM_1D
condition|)
block|{
comment|// skip over wastefully encoded 0 splitDim:
assert|assert
name|splitPackedValues
index|[
name|address
index|]
operator|==
literal|0
assert|;
name|address
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
name|splitDim
operator|=
name|splitPackedValues
index|[
name|address
operator|++
index|]
operator|&
literal|0xff
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValues
argument_list|,
name|address
argument_list|,
name|splitDimValue
argument_list|,
literal|0
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|getLeafBlockFP
specifier|public
name|long
name|getLeafBlockFP
parameter_list|()
block|{
assert|assert
name|isLeafNode
argument_list|()
assert|;
return|return
name|leafBlockFP
return|;
block|}
annotation|@
name|Override
DECL|method|getSplitDimValue
specifier|public
name|BytesRef
name|getSplitDimValue
parameter_list|()
block|{
assert|assert
name|isLeafNode
argument_list|()
operator|==
literal|false
assert|;
return|return
name|scratch
return|;
block|}
annotation|@
name|Override
DECL|method|pop
specifier|public
name|void
name|pop
parameter_list|()
block|{
name|super
operator|.
name|pop
argument_list|()
expr_stmt|;
name|leafBlockFP
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/** Reads the new packed byte[] index format which can be up to ~63% smaller than the legacy index format on 20M NYC taxis tests.  This    *  format takes advantage of the limited access pattern to the BKD tree at search time, i.e. starting at the root node and recursing    *  downwards one child at a time. */
DECL|class|PackedIndexTree
specifier|private
specifier|final
class|class
name|PackedIndexTree
extends|extends
name|IndexTree
block|{
comment|// used to read the packed byte[]
DECL|field|in
specifier|private
specifier|final
name|ByteArrayDataInput
name|in
decl_stmt|;
comment|// holds the minimum (left most) leaf block file pointer for each level we've recursed to:
DECL|field|leafBlockFPStack
specifier|private
specifier|final
name|long
index|[]
name|leafBlockFPStack
decl_stmt|;
comment|// holds the address, in the packed byte[] index, of the left-node of each level:
DECL|field|leftNodePositions
specifier|private
specifier|final
name|int
index|[]
name|leftNodePositions
decl_stmt|;
comment|// holds the address, in the packed byte[] index, of the right-node of each level:
DECL|field|rightNodePositions
specifier|private
specifier|final
name|int
index|[]
name|rightNodePositions
decl_stmt|;
comment|// holds the splitDim for each level:
DECL|field|splitDims
specifier|private
specifier|final
name|int
index|[]
name|splitDims
decl_stmt|;
comment|// true if the per-dim delta we read for the node at this level is a negative offset vs. the last split on this dim; this is a packed
comment|// 2D array, i.e. to access array[level][dim] you read from negativeDeltas[level*numDims+dim].  this will be true if the last time we
comment|// split on this dimension, we next pushed to the left sub-tree:
DECL|field|negativeDeltas
specifier|private
specifier|final
name|boolean
index|[]
name|negativeDeltas
decl_stmt|;
comment|// holds the packed per-level split values; the intersect method uses this to save the cell min/max as it recurses:
DECL|field|splitValuesStack
specifier|private
specifier|final
name|byte
index|[]
index|[]
name|splitValuesStack
decl_stmt|;
comment|// scratch value to return from getPackedValue:
DECL|field|scratch
specifier|private
specifier|final
name|BytesRef
name|scratch
decl_stmt|;
DECL|method|PackedIndexTree
specifier|public
name|PackedIndexTree
parameter_list|()
block|{
name|int
name|treeDepth
init|=
name|getTreeDepth
argument_list|()
decl_stmt|;
name|leafBlockFPStack
operator|=
operator|new
name|long
index|[
name|treeDepth
operator|+
literal|1
index|]
expr_stmt|;
name|leftNodePositions
operator|=
operator|new
name|int
index|[
name|treeDepth
operator|+
literal|1
index|]
expr_stmt|;
name|rightNodePositions
operator|=
operator|new
name|int
index|[
name|treeDepth
operator|+
literal|1
index|]
expr_stmt|;
name|splitValuesStack
operator|=
operator|new
name|byte
index|[
name|treeDepth
operator|+
literal|1
index|]
index|[]
expr_stmt|;
name|splitDims
operator|=
operator|new
name|int
index|[
name|treeDepth
operator|+
literal|1
index|]
expr_stmt|;
name|negativeDeltas
operator|=
operator|new
name|boolean
index|[
name|numDims
operator|*
operator|(
name|treeDepth
operator|+
literal|1
operator|)
index|]
expr_stmt|;
name|in
operator|=
operator|new
name|ByteArrayDataInput
argument_list|(
name|packedIndex
argument_list|)
expr_stmt|;
name|splitValuesStack
index|[
literal|0
index|]
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
name|readNodeData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|scratch
operator|=
operator|new
name|BytesRef
argument_list|()
expr_stmt|;
name|scratch
operator|.
name|length
operator|=
name|bytesPerDim
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|clone
specifier|public
name|PackedIndexTree
name|clone
parameter_list|()
block|{
name|PackedIndexTree
name|index
init|=
operator|new
name|PackedIndexTree
argument_list|()
decl_stmt|;
name|index
operator|.
name|nodeID
operator|=
name|nodeID
expr_stmt|;
name|index
operator|.
name|level
operator|=
name|level
expr_stmt|;
name|index
operator|.
name|splitDim
operator|=
name|splitDim
expr_stmt|;
name|index
operator|.
name|leafBlockFPStack
index|[
name|level
index|]
operator|=
name|leafBlockFPStack
index|[
name|level
index|]
expr_stmt|;
name|index
operator|.
name|leftNodePositions
index|[
name|level
index|]
operator|=
name|leftNodePositions
index|[
name|level
index|]
expr_stmt|;
name|index
operator|.
name|rightNodePositions
index|[
name|level
index|]
operator|=
name|rightNodePositions
index|[
name|level
index|]
expr_stmt|;
name|index
operator|.
name|splitValuesStack
index|[
name|index
operator|.
name|level
index|]
operator|=
name|splitValuesStack
index|[
name|index
operator|.
name|level
index|]
operator|.
name|clone
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|negativeDeltas
argument_list|,
name|level
operator|*
name|numDims
argument_list|,
name|index
operator|.
name|negativeDeltas
argument_list|,
name|level
operator|*
name|numDims
argument_list|,
name|numDims
argument_list|)
expr_stmt|;
name|index
operator|.
name|splitDims
index|[
name|level
index|]
operator|=
name|splitDims
index|[
name|level
index|]
expr_stmt|;
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|pushLeft
specifier|public
name|void
name|pushLeft
parameter_list|()
block|{
name|int
name|nodePosition
init|=
name|leftNodePositions
index|[
name|level
index|]
decl_stmt|;
name|super
operator|.
name|pushLeft
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|negativeDeltas
argument_list|,
operator|(
name|level
operator|-
literal|1
operator|)
operator|*
name|numDims
argument_list|,
name|negativeDeltas
argument_list|,
name|level
operator|*
name|numDims
argument_list|,
name|numDims
argument_list|)
expr_stmt|;
assert|assert
name|splitDim
operator|!=
operator|-
literal|1
assert|;
name|negativeDeltas
index|[
name|level
operator|*
name|numDims
operator|+
name|splitDim
index|]
operator|=
literal|true
expr_stmt|;
name|in
operator|.
name|setPosition
argument_list|(
name|nodePosition
argument_list|)
expr_stmt|;
name|readNodeData
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|pushRight
specifier|public
name|void
name|pushRight
parameter_list|()
block|{
name|int
name|nodePosition
init|=
name|rightNodePositions
index|[
name|level
index|]
decl_stmt|;
name|super
operator|.
name|pushRight
argument_list|()
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|negativeDeltas
argument_list|,
operator|(
name|level
operator|-
literal|1
operator|)
operator|*
name|numDims
argument_list|,
name|negativeDeltas
argument_list|,
name|level
operator|*
name|numDims
argument_list|,
name|numDims
argument_list|)
expr_stmt|;
assert|assert
name|splitDim
operator|!=
operator|-
literal|1
assert|;
name|negativeDeltas
index|[
name|level
operator|*
name|numDims
operator|+
name|splitDim
index|]
operator|=
literal|false
expr_stmt|;
name|in
operator|.
name|setPosition
argument_list|(
name|nodePosition
argument_list|)
expr_stmt|;
name|readNodeData
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|pop
specifier|public
name|void
name|pop
parameter_list|()
block|{
name|super
operator|.
name|pop
argument_list|()
expr_stmt|;
name|splitDim
operator|=
name|splitDims
index|[
name|level
index|]
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafBlockFP
specifier|public
name|long
name|getLeafBlockFP
parameter_list|()
block|{
assert|assert
name|isLeafNode
argument_list|()
operator|:
literal|"nodeID="
operator|+
name|nodeID
operator|+
literal|" is not a leaf"
assert|;
return|return
name|leafBlockFPStack
index|[
name|level
index|]
return|;
block|}
annotation|@
name|Override
DECL|method|getSplitDimValue
specifier|public
name|BytesRef
name|getSplitDimValue
parameter_list|()
block|{
assert|assert
name|isLeafNode
argument_list|()
operator|==
literal|false
assert|;
name|scratch
operator|.
name|bytes
operator|=
name|splitValuesStack
index|[
name|level
index|]
expr_stmt|;
name|scratch
operator|.
name|offset
operator|=
name|splitDim
operator|*
name|bytesPerDim
expr_stmt|;
return|return
name|scratch
return|;
block|}
DECL|method|readNodeData
specifier|private
name|void
name|readNodeData
parameter_list|(
name|boolean
name|isLeft
parameter_list|)
block|{
name|leafBlockFPStack
index|[
name|level
index|]
operator|=
name|leafBlockFPStack
index|[
name|level
operator|-
literal|1
index|]
expr_stmt|;
comment|// read leaf block FP delta
if|if
condition|(
name|isLeft
operator|==
literal|false
condition|)
block|{
name|leafBlockFPStack
index|[
name|level
index|]
operator|+=
name|in
operator|.
name|readVLong
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isLeafNode
argument_list|()
condition|)
block|{
name|splitDim
operator|=
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// read split dim, prefix, firstDiffByteDelta encoded as int:
name|int
name|code
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|splitDim
operator|=
name|code
operator|%
name|numDims
expr_stmt|;
name|splitDims
index|[
name|level
index|]
operator|=
name|splitDim
expr_stmt|;
name|code
operator|/=
name|numDims
expr_stmt|;
name|int
name|prefix
init|=
name|code
operator|%
operator|(
literal|1
operator|+
name|bytesPerDim
operator|)
decl_stmt|;
name|int
name|suffix
init|=
name|bytesPerDim
operator|-
name|prefix
decl_stmt|;
if|if
condition|(
name|splitValuesStack
index|[
name|level
index|]
operator|==
literal|null
condition|)
block|{
name|splitValuesStack
index|[
name|level
index|]
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
block|}
name|System
operator|.
name|arraycopy
argument_list|(
name|splitValuesStack
index|[
name|level
operator|-
literal|1
index|]
argument_list|,
literal|0
argument_list|,
name|splitValuesStack
index|[
name|level
index|]
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|suffix
operator|>
literal|0
condition|)
block|{
name|int
name|firstDiffByteDelta
init|=
name|code
operator|/
operator|(
literal|1
operator|+
name|bytesPerDim
operator|)
decl_stmt|;
if|if
condition|(
name|negativeDeltas
index|[
name|level
operator|*
name|numDims
operator|+
name|splitDim
index|]
condition|)
block|{
name|firstDiffByteDelta
operator|=
operator|-
name|firstDiffByteDelta
expr_stmt|;
block|}
name|int
name|oldByte
init|=
name|splitValuesStack
index|[
name|level
index|]
index|[
name|splitDim
operator|*
name|bytesPerDim
operator|+
name|prefix
index|]
operator|&
literal|0xFF
decl_stmt|;
name|splitValuesStack
index|[
name|level
index|]
index|[
name|splitDim
operator|*
name|bytesPerDim
operator|+
name|prefix
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|oldByte
operator|+
name|firstDiffByteDelta
argument_list|)
expr_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|splitValuesStack
index|[
name|level
index|]
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
operator|+
name|prefix
operator|+
literal|1
argument_list|,
name|suffix
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// our split value is == last split value in this dim, which can happen when there are many duplicate values
block|}
name|int
name|leftNumBytes
decl_stmt|;
if|if
condition|(
name|nodeID
operator|*
literal|2
operator|<
name|leafNodeOffset
condition|)
block|{
name|leftNumBytes
operator|=
name|in
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|leftNumBytes
operator|=
literal|0
expr_stmt|;
block|}
name|leftNodePositions
index|[
name|level
index|]
operator|=
name|in
operator|.
name|getPosition
argument_list|()
expr_stmt|;
name|rightNodePositions
index|[
name|level
index|]
operator|=
name|leftNodePositions
index|[
name|level
index|]
operator|+
name|leftNumBytes
expr_stmt|;
block|}
block|}
block|}
DECL|method|getTreeDepth
specifier|private
name|int
name|getTreeDepth
parameter_list|()
block|{
comment|// First +1 because all the non-leave nodes makes another power
comment|// of 2; e.g. to have a fully balanced tree with 4 leaves you
comment|// need a depth=3 tree:
comment|// Second +1 because MathUtil.log computes floor of the logarithm; e.g.
comment|// with 5 leaves you need a depth=4 tree:
return|return
name|MathUtil
operator|.
name|log
argument_list|(
name|numLeaves
argument_list|,
literal|2
argument_list|)
operator|+
literal|2
return|;
block|}
comment|/** Used to track all state for a single call to {@link #intersect}. */
DECL|class|IntersectState
specifier|public
specifier|static
specifier|final
class|class
name|IntersectState
block|{
DECL|field|in
specifier|final
name|IndexInput
name|in
decl_stmt|;
DECL|field|scratchDocIDs
specifier|final
name|int
index|[]
name|scratchDocIDs
decl_stmt|;
DECL|field|scratchPackedValue
specifier|final
name|byte
index|[]
name|scratchPackedValue
decl_stmt|;
DECL|field|commonPrefixLengths
specifier|final
name|int
index|[]
name|commonPrefixLengths
decl_stmt|;
DECL|field|visitor
specifier|final
name|IntersectVisitor
name|visitor
decl_stmt|;
DECL|field|index
specifier|public
specifier|final
name|IndexTree
name|index
decl_stmt|;
DECL|method|IntersectState
specifier|public
name|IntersectState
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|int
name|numDims
parameter_list|,
name|int
name|packedBytesLength
parameter_list|,
name|int
name|maxPointsInLeafNode
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|,
name|IndexTree
name|indexVisitor
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|visitor
operator|=
name|visitor
expr_stmt|;
name|this
operator|.
name|commonPrefixLengths
operator|=
operator|new
name|int
index|[
name|numDims
index|]
expr_stmt|;
name|this
operator|.
name|scratchDocIDs
operator|=
operator|new
name|int
index|[
name|maxPointsInLeafNode
index|]
expr_stmt|;
name|this
operator|.
name|scratchPackedValue
operator|=
operator|new
name|byte
index|[
name|packedBytesLength
index|]
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|indexVisitor
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|intersect
specifier|public
name|void
name|intersect
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|intersect
argument_list|(
name|getIntersectState
argument_list|(
name|visitor
argument_list|)
argument_list|,
name|minPackedValue
argument_list|,
name|maxPackedValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|estimatePointCount
specifier|public
name|long
name|estimatePointCount
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
return|return
name|estimatePointCount
argument_list|(
name|getIntersectState
argument_list|(
name|visitor
argument_list|)
argument_list|,
name|minPackedValue
argument_list|,
name|maxPackedValue
argument_list|)
return|;
block|}
comment|/** Fast path: this is called when the query box fully encompasses all cells under this node. */
DECL|method|addAll
specifier|private
name|void
name|addAll
parameter_list|(
name|IntersectState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
comment|//System.out.println("R: addAll nodeID=" + nodeID);
if|if
condition|(
name|state
operator|.
name|index
operator|.
name|isLeafNode
argument_list|()
condition|)
block|{
comment|//System.out.println("ADDALL");
if|if
condition|(
name|state
operator|.
name|index
operator|.
name|nodeExists
argument_list|()
condition|)
block|{
name|visitDocIDs
argument_list|(
name|state
operator|.
name|in
argument_list|,
name|state
operator|.
name|index
operator|.
name|getLeafBlockFP
argument_list|()
argument_list|,
name|state
operator|.
name|visitor
argument_list|)
expr_stmt|;
block|}
comment|// TODO: we can assert that the first value here in fact matches what the index claimed?
block|}
else|else
block|{
name|state
operator|.
name|index
operator|.
name|pushLeft
argument_list|()
expr_stmt|;
name|addAll
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pop
argument_list|()
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pushRight
argument_list|()
expr_stmt|;
name|addAll
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Create a new {@link IntersectState} */
DECL|method|getIntersectState
specifier|public
name|IntersectState
name|getIntersectState
parameter_list|(
name|IntersectVisitor
name|visitor
parameter_list|)
block|{
name|IndexTree
name|index
decl_stmt|;
if|if
condition|(
name|packedIndex
operator|!=
literal|null
condition|)
block|{
name|index
operator|=
operator|new
name|PackedIndexTree
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|index
operator|=
operator|new
name|LegacyIndexTree
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|IntersectState
argument_list|(
name|in
operator|.
name|clone
argument_list|()
argument_list|,
name|numDims
argument_list|,
name|packedBytesLength
argument_list|,
name|maxPointsInLeafNode
argument_list|,
name|visitor
argument_list|,
name|index
argument_list|)
return|;
block|}
comment|/** Visits all docIDs and packed values in a single leaf block */
DECL|method|visitLeafBlockValues
specifier|public
name|void
name|visitLeafBlockValues
parameter_list|(
name|IndexTree
name|index
parameter_list|,
name|IntersectState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Leaf node; scan and filter all points in this block:
name|int
name|count
init|=
name|readDocIDs
argument_list|(
name|state
operator|.
name|in
argument_list|,
name|index
operator|.
name|getLeafBlockFP
argument_list|()
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|)
decl_stmt|;
comment|// Again, this time reading values and checking with the visitor
name|visitDocValues
argument_list|(
name|state
operator|.
name|commonPrefixLengths
argument_list|,
name|state
operator|.
name|scratchPackedValue
argument_list|,
name|state
operator|.
name|in
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|,
name|count
argument_list|,
name|state
operator|.
name|visitor
argument_list|)
expr_stmt|;
block|}
DECL|method|visitDocIDs
specifier|private
name|void
name|visitDocIDs
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|long
name|blockFP
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Leaf node
name|in
operator|.
name|seek
argument_list|(
name|blockFP
argument_list|)
expr_stmt|;
comment|// How many points are stored in this leaf cell:
name|int
name|count
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|visitor
operator|.
name|grow
argument_list|(
name|count
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|<
name|BKDWriter
operator|.
name|VERSION_COMPRESSED_DOC_IDS
condition|)
block|{
name|DocIdsWriter
operator|.
name|readInts32
argument_list|(
name|in
argument_list|,
name|count
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocIdsWriter
operator|.
name|readInts
argument_list|(
name|in
argument_list|,
name|count
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|readDocIDs
name|int
name|readDocIDs
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|long
name|blockFP
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|seek
argument_list|(
name|blockFP
argument_list|)
expr_stmt|;
comment|// How many points are stored in this leaf cell:
name|int
name|count
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|version
operator|<
name|BKDWriter
operator|.
name|VERSION_COMPRESSED_DOC_IDS
condition|)
block|{
name|DocIdsWriter
operator|.
name|readInts32
argument_list|(
name|in
argument_list|,
name|count
argument_list|,
name|docIDs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|DocIdsWriter
operator|.
name|readInts
argument_list|(
name|in
argument_list|,
name|count
argument_list|,
name|docIDs
argument_list|)
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
DECL|method|visitDocValues
name|void
name|visitDocValues
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|count
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
name|visitor
operator|.
name|grow
argument_list|(
name|count
argument_list|)
expr_stmt|;
name|readCommonPrefixes
argument_list|(
name|commonPrefixLengths
argument_list|,
name|scratchPackedValue
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|int
name|compressedDim
init|=
name|version
operator|<
name|BKDWriter
operator|.
name|VERSION_COMPRESSED_VALUES
condition|?
operator|-
literal|1
else|:
name|readCompressedDim
argument_list|(
name|in
argument_list|)
decl_stmt|;
if|if
condition|(
name|compressedDim
operator|==
operator|-
literal|1
condition|)
block|{
name|visitRawDocValues
argument_list|(
name|commonPrefixLengths
argument_list|,
name|scratchPackedValue
argument_list|,
name|in
argument_list|,
name|docIDs
argument_list|,
name|count
argument_list|,
name|visitor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|visitCompressedDocValues
argument_list|(
name|commonPrefixLengths
argument_list|,
name|scratchPackedValue
argument_list|,
name|in
argument_list|,
name|docIDs
argument_list|,
name|count
argument_list|,
name|visitor
argument_list|,
name|compressedDim
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Just read suffixes for every dimension
DECL|method|visitRawDocValues
specifier|private
name|void
name|visitRawDocValues
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|count
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|prefix
init|=
name|commonPrefixLengths
index|[
name|dim
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|scratchPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
operator|+
name|prefix
argument_list|,
name|bytesPerDim
operator|-
name|prefix
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|docIDs
index|[
name|i
index|]
argument_list|,
name|scratchPackedValue
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|visitCompressedDocValues
specifier|private
name|void
name|visitCompressedDocValues
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|int
index|[]
name|docIDs
parameter_list|,
name|int
name|count
parameter_list|,
name|IntersectVisitor
name|visitor
parameter_list|,
name|int
name|compressedDim
parameter_list|)
throws|throws
name|IOException
block|{
comment|// the byte at `compressedByteOffset` is compressed using run-length compression,
comment|// other suffix bytes are stored verbatim
specifier|final
name|int
name|compressedByteOffset
init|=
name|compressedDim
operator|*
name|bytesPerDim
operator|+
name|commonPrefixLengths
index|[
name|compressedDim
index|]
decl_stmt|;
name|commonPrefixLengths
index|[
name|compressedDim
index|]
operator|++
expr_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
control|)
block|{
name|scratchPackedValue
index|[
name|compressedByteOffset
index|]
operator|=
name|in
operator|.
name|readByte
argument_list|()
expr_stmt|;
specifier|final
name|int
name|runLen
init|=
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|in
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|runLen
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|prefix
init|=
name|commonPrefixLengths
index|[
name|dim
index|]
decl_stmt|;
name|in
operator|.
name|readBytes
argument_list|(
name|scratchPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
operator|+
name|prefix
argument_list|,
name|bytesPerDim
operator|-
name|prefix
argument_list|)
expr_stmt|;
block|}
name|visitor
operator|.
name|visit
argument_list|(
name|docIDs
index|[
name|i
operator|+
name|j
index|]
argument_list|,
name|scratchPackedValue
argument_list|)
expr_stmt|;
block|}
name|i
operator|+=
name|runLen
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
name|count
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Sub blocks do not add up to the expected count: "
operator|+
name|count
operator|+
literal|" != "
operator|+
name|i
argument_list|,
name|in
argument_list|)
throw|;
block|}
block|}
DECL|method|readCompressedDim
specifier|private
name|int
name|readCompressedDim
parameter_list|(
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|compressedDim
init|=
name|in
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|compressedDim
operator|<
operator|-
literal|1
operator|||
name|compressedDim
operator|>=
name|numDims
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Got compressedDim="
operator|+
name|compressedDim
argument_list|,
name|in
argument_list|)
throw|;
block|}
return|return
name|compressedDim
return|;
block|}
DECL|method|readCommonPrefixes
specifier|private
name|void
name|readCommonPrefixes
parameter_list|(
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|byte
index|[]
name|scratchPackedValue
parameter_list|,
name|IndexInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|dim
init|=
literal|0
init|;
name|dim
operator|<
name|numDims
condition|;
name|dim
operator|++
control|)
block|{
name|int
name|prefix
init|=
name|in
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|commonPrefixLengths
index|[
name|dim
index|]
operator|=
name|prefix
expr_stmt|;
if|if
condition|(
name|prefix
operator|>
literal|0
condition|)
block|{
name|in
operator|.
name|readBytes
argument_list|(
name|scratchPackedValue
argument_list|,
name|dim
operator|*
name|bytesPerDim
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|//System.out.println("R: " + dim + " of " + numDims + " prefix=" + prefix);
block|}
block|}
DECL|method|intersect
specifier|private
name|void
name|intersect
parameter_list|(
name|IntersectState
name|state
parameter_list|,
name|byte
index|[]
name|cellMinPacked
parameter_list|,
name|byte
index|[]
name|cellMaxPacked
parameter_list|)
throws|throws
name|IOException
block|{
comment|/*     System.out.println("\nR: intersect nodeID=" + state.index.getNodeID());     for(int dim=0;dim<numDims;dim++) {       System.out.println("  dim=" + dim + "\n    cellMin=" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + "\n    cellMax=" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));     }     */
name|Relation
name|r
init|=
name|state
operator|.
name|visitor
operator|.
name|compare
argument_list|(
name|cellMinPacked
argument_list|,
name|cellMaxPacked
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
comment|// This cell is fully outside of the query shape: stop recursing
block|}
elseif|else
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
comment|// This cell is fully inside of the query shape: recursively add all points in this cell without filtering
name|addAll
argument_list|(
name|state
argument_list|)
expr_stmt|;
comment|// The cell crosses the shape boundary, or the cell fully contains the query, so we fall through and do full filtering:
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|index
operator|.
name|isLeafNode
argument_list|()
condition|)
block|{
comment|// TODO: we can assert that the first value here in fact matches what the index claimed?
comment|// In the unbalanced case it's possible the left most node only has one child:
if|if
condition|(
name|state
operator|.
name|index
operator|.
name|nodeExists
argument_list|()
condition|)
block|{
comment|// Leaf node; scan and filter all points in this block:
name|int
name|count
init|=
name|readDocIDs
argument_list|(
name|state
operator|.
name|in
argument_list|,
name|state
operator|.
name|index
operator|.
name|getLeafBlockFP
argument_list|()
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|)
decl_stmt|;
comment|// Again, this time reading values and checking with the visitor
name|visitDocValues
argument_list|(
name|state
operator|.
name|commonPrefixLengths
argument_list|,
name|state
operator|.
name|scratchPackedValue
argument_list|,
name|state
operator|.
name|in
argument_list|,
name|state
operator|.
name|scratchDocIDs
argument_list|,
name|count
argument_list|,
name|state
operator|.
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Non-leaf node: recurse on the split left and right nodes
name|int
name|splitDim
init|=
name|state
operator|.
name|index
operator|.
name|getSplitDim
argument_list|()
decl_stmt|;
assert|assert
name|splitDim
operator|>=
literal|0
operator|:
literal|"splitDim="
operator|+
name|splitDim
assert|;
assert|assert
name|splitDim
operator|<
name|numDims
assert|;
name|byte
index|[]
name|splitPackedValue
init|=
name|state
operator|.
name|index
operator|.
name|getSplitPackedValue
argument_list|()
decl_stmt|;
name|BytesRef
name|splitDimValue
init|=
name|state
operator|.
name|index
operator|.
name|getSplitDimValue
argument_list|()
decl_stmt|;
assert|assert
name|splitDimValue
operator|.
name|length
operator|==
name|bytesPerDim
assert|;
comment|//System.out.println("  splitDimValue=" + splitDimValue + " splitDim=" + splitDim);
comment|// make sure cellMin<= splitValue<= cellMax:
assert|assert
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|cellMinPacked
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|)
operator|<=
literal|0
operator|:
literal|"bytesPerDim="
operator|+
name|bytesPerDim
operator|+
literal|" splitDim="
operator|+
name|splitDim
operator|+
literal|" numDims="
operator|+
name|numDims
assert|;
assert|assert
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|cellMaxPacked
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|)
operator|>=
literal|0
operator|:
literal|"bytesPerDim="
operator|+
name|bytesPerDim
operator|+
literal|" splitDim="
operator|+
name|splitDim
operator|+
literal|" numDims="
operator|+
name|numDims
assert|;
comment|// Recurse on left sub-tree:
name|System
operator|.
name|arraycopy
argument_list|(
name|cellMaxPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pushLeft
argument_list|()
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
name|cellMinPacked
argument_list|,
name|splitPackedValue
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// Restore the split dim value since it may have been overwritten while recursing:
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
comment|// Recurse on right sub-tree:
name|System
operator|.
name|arraycopy
argument_list|(
name|cellMinPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pushRight
argument_list|()
expr_stmt|;
name|intersect
argument_list|(
name|state
argument_list|,
name|splitPackedValue
argument_list|,
name|cellMaxPacked
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|estimatePointCount
specifier|private
name|long
name|estimatePointCount
parameter_list|(
name|IntersectState
name|state
parameter_list|,
name|byte
index|[]
name|cellMinPacked
parameter_list|,
name|byte
index|[]
name|cellMaxPacked
parameter_list|)
block|{
comment|/*     System.out.println("\nR: intersect nodeID=" + state.index.getNodeID());     for(int dim=0;dim<numDims;dim++) {       System.out.println("  dim=" + dim + "\n    cellMin=" + new BytesRef(cellMinPacked, dim*bytesPerDim, bytesPerDim) + "\n    cellMax=" + new BytesRef(cellMaxPacked, dim*bytesPerDim, bytesPerDim));     }     */
name|Relation
name|r
init|=
name|state
operator|.
name|visitor
operator|.
name|compare
argument_list|(
name|cellMinPacked
argument_list|,
name|cellMaxPacked
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_OUTSIDE_QUERY
condition|)
block|{
comment|// This cell is fully outside of the query shape: stop recursing
return|return
literal|0L
return|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|index
operator|.
name|isLeafNode
argument_list|()
condition|)
block|{
if|if
condition|(
name|r
operator|==
name|Relation
operator|.
name|CELL_INSIDE_QUERY
condition|)
block|{
return|return
name|maxPointsInLeafNode
return|;
block|}
else|else
block|{
comment|// Assume half the points matched
return|return
operator|(
name|maxPointsInLeafNode
operator|+
literal|1
operator|)
operator|/
literal|2
return|;
block|}
block|}
else|else
block|{
comment|// Non-leaf node: recurse on the split left and right nodes
name|int
name|splitDim
init|=
name|state
operator|.
name|index
operator|.
name|getSplitDim
argument_list|()
decl_stmt|;
assert|assert
name|splitDim
operator|>=
literal|0
operator|:
literal|"splitDim="
operator|+
name|splitDim
assert|;
assert|assert
name|splitDim
operator|<
name|numDims
assert|;
name|byte
index|[]
name|splitPackedValue
init|=
name|state
operator|.
name|index
operator|.
name|getSplitPackedValue
argument_list|()
decl_stmt|;
name|BytesRef
name|splitDimValue
init|=
name|state
operator|.
name|index
operator|.
name|getSplitDimValue
argument_list|()
decl_stmt|;
assert|assert
name|splitDimValue
operator|.
name|length
operator|==
name|bytesPerDim
assert|;
comment|//System.out.println("  splitDimValue=" + splitDimValue + " splitDim=" + splitDim);
comment|// make sure cellMin<= splitValue<= cellMax:
assert|assert
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|cellMinPacked
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|)
operator|<=
literal|0
operator|:
literal|"bytesPerDim="
operator|+
name|bytesPerDim
operator|+
literal|" splitDim="
operator|+
name|splitDim
operator|+
literal|" numDims="
operator|+
name|numDims
assert|;
assert|assert
name|StringHelper
operator|.
name|compare
argument_list|(
name|bytesPerDim
argument_list|,
name|cellMaxPacked
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|)
operator|>=
literal|0
operator|:
literal|"bytesPerDim="
operator|+
name|bytesPerDim
operator|+
literal|" splitDim="
operator|+
name|splitDim
operator|+
literal|" numDims="
operator|+
name|numDims
assert|;
comment|// Recurse on left sub-tree:
name|System
operator|.
name|arraycopy
argument_list|(
name|cellMaxPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pushLeft
argument_list|()
expr_stmt|;
specifier|final
name|long
name|leftCost
init|=
name|estimatePointCount
argument_list|(
name|state
argument_list|,
name|cellMinPacked
argument_list|,
name|splitPackedValue
argument_list|)
decl_stmt|;
name|state
operator|.
name|index
operator|.
name|pop
argument_list|()
expr_stmt|;
comment|// Restore the split dim value since it may have been overwritten while recursing:
name|System
operator|.
name|arraycopy
argument_list|(
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
comment|// Recurse on right sub-tree:
name|System
operator|.
name|arraycopy
argument_list|(
name|cellMinPacked
argument_list|,
literal|0
argument_list|,
name|splitPackedValue
argument_list|,
literal|0
argument_list|,
name|packedBytesLength
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|splitDimValue
operator|.
name|bytes
argument_list|,
name|splitDimValue
operator|.
name|offset
argument_list|,
name|splitPackedValue
argument_list|,
name|splitDim
operator|*
name|bytesPerDim
argument_list|,
name|bytesPerDim
argument_list|)
expr_stmt|;
name|state
operator|.
name|index
operator|.
name|pushRight
argument_list|()
expr_stmt|;
specifier|final
name|long
name|rightCost
init|=
name|estimatePointCount
argument_list|(
name|state
argument_list|,
name|splitPackedValue
argument_list|,
name|cellMaxPacked
argument_list|)
decl_stmt|;
name|state
operator|.
name|index
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return
name|leftCost
operator|+
name|rightCost
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
if|if
condition|(
name|packedIndex
operator|!=
literal|null
condition|)
block|{
return|return
name|packedIndex
operator|.
name|length
return|;
block|}
else|else
block|{
return|return
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|splitPackedValues
argument_list|)
operator|+
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|leafBlockFPs
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getMinPackedValue
specifier|public
name|byte
index|[]
name|getMinPackedValue
parameter_list|()
block|{
return|return
name|minPackedValue
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getMaxPackedValue
specifier|public
name|byte
index|[]
name|getMaxPackedValue
parameter_list|()
block|{
return|return
name|maxPackedValue
operator|.
name|clone
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|getNumDimensions
specifier|public
name|int
name|getNumDimensions
parameter_list|()
block|{
return|return
name|numDims
return|;
block|}
annotation|@
name|Override
DECL|method|getBytesPerDimension
specifier|public
name|int
name|getBytesPerDimension
parameter_list|()
block|{
return|return
name|bytesPerDim
return|;
block|}
annotation|@
name|Override
DECL|method|size
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|pointCount
return|;
block|}
annotation|@
name|Override
DECL|method|getDocCount
specifier|public
name|int
name|getDocCount
parameter_list|()
block|{
return|return
name|docCount
return|;
block|}
DECL|method|isLeafNode
specifier|public
name|boolean
name|isLeafNode
parameter_list|(
name|int
name|nodeID
parameter_list|)
block|{
return|return
name|nodeID
operator|>=
name|leafNodeOffset
return|;
block|}
block|}
end_class

end_unit

