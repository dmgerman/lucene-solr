begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/** Implementation of the quick select algorithm.  *<p>It uses the median of the first, middle and last values as a pivot and  *  falls back to a heap sort when the number of recursion levels exceeds  *  {@code 2 lg(n)}, as a consequence it runs in linear time on average and in  *  {@code n log(n)} time in the worst case.</p>  *  @lucene.internal */
end_comment

begin_class
DECL|class|IntroSelector
specifier|public
specifier|abstract
class|class
name|IntroSelector
extends|extends
name|Selector
block|{
annotation|@
name|Override
DECL|method|select
specifier|public
specifier|final
name|void
name|select
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|checkArgs
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxDepth
init|=
literal|2
operator|*
name|MathUtil
operator|.
name|log
argument_list|(
name|to
operator|-
name|from
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|quickSelect
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
block|}
comment|// heap sort
comment|// TODO: use median of median instead to have linear worst-case rather than
comment|// n*log(n)
DECL|method|slowSelect
name|void
name|slowSelect
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|)
block|{
operator|new
name|Sorter
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|IntroSelector
operator|.
name|this
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
return|return
name|IntroSelector
operator|.
name|this
operator|.
name|compare
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
return|;
block|}
specifier|public
name|void
name|sort
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
name|heapSort
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
block|}
operator|.
name|sort
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
DECL|method|quickSelect
specifier|private
name|void
name|quickSelect
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|,
name|int
name|maxDepth
parameter_list|)
block|{
assert|assert
name|from
operator|<=
name|k
assert|;
assert|assert
name|k
operator|<
name|to
assert|;
if|if
condition|(
name|to
operator|-
name|from
operator|==
literal|1
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|--
name|maxDepth
operator|<
literal|0
condition|)
block|{
name|slowSelect
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|int
name|mid
init|=
operator|(
name|from
operator|+
name|to
operator|)
operator|>>>
literal|1
decl_stmt|;
comment|// heuristic: we use the median of the values at from, to-1 and mid as a pivot
if|if
condition|(
name|compare
argument_list|(
name|from
argument_list|,
name|to
operator|-
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{
name|swap
argument_list|(
name|from
argument_list|,
name|to
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compare
argument_list|(
name|to
operator|-
literal|1
argument_list|,
name|mid
argument_list|)
operator|>
literal|0
condition|)
block|{
name|swap
argument_list|(
name|to
operator|-
literal|1
argument_list|,
name|mid
argument_list|)
expr_stmt|;
if|if
condition|(
name|compare
argument_list|(
name|from
argument_list|,
name|to
operator|-
literal|1
argument_list|)
operator|>
literal|0
condition|)
block|{
name|swap
argument_list|(
name|from
argument_list|,
name|to
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|setPivot
argument_list|(
name|to
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|left
init|=
name|from
operator|+
literal|1
decl_stmt|;
name|int
name|right
init|=
name|to
operator|-
literal|2
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
while|while
condition|(
name|comparePivot
argument_list|(
name|left
argument_list|)
operator|>
literal|0
condition|)
block|{
operator|++
name|left
expr_stmt|;
block|}
while|while
condition|(
name|left
operator|<
name|right
operator|&&
name|comparePivot
argument_list|(
name|right
argument_list|)
operator|<=
literal|0
condition|)
block|{
operator|--
name|right
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|<
name|right
condition|)
block|{
name|swap
argument_list|(
name|left
argument_list|,
name|right
argument_list|)
expr_stmt|;
operator|--
name|right
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
name|swap
argument_list|(
name|left
argument_list|,
name|to
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|==
name|k
condition|)
block|{
return|return;
block|}
elseif|else
if|if
condition|(
name|left
operator|<
name|k
condition|)
block|{
name|quickSelect
argument_list|(
name|left
operator|+
literal|1
argument_list|,
name|to
argument_list|,
name|k
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|quickSelect
argument_list|(
name|from
argument_list|,
name|left
argument_list|,
name|k
argument_list|,
name|maxDepth
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Compare entries found in slots<code>i</code> and<code>j</code>.    *  The contract for the returned value is the same as    *  {@link Comparator#compare(Object, Object)}. */
DECL|method|compare
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|setPivot
argument_list|(
name|i
argument_list|)
expr_stmt|;
return|return
name|comparePivot
argument_list|(
name|j
argument_list|)
return|;
block|}
comment|/** Save the value at slot<code>i</code> so that it can later be used as a    * pivot, see {@link #comparePivot(int)}. */
DECL|method|setPivot
specifier|protected
specifier|abstract
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
function_decl|;
comment|/** Compare the pivot with the slot at<code>j</code>, similarly to    *  {@link #compare(int, int) compare(i, j)}. */
DECL|method|comparePivot
specifier|protected
specifier|abstract
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
function_decl|;
block|}
end_class

end_unit

