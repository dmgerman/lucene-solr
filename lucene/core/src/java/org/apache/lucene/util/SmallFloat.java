begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_comment
comment|/** Floating point numbers smaller than 32 bits.  *  * @lucene.internal  */
end_comment

begin_class
DECL|class|SmallFloat
specifier|public
class|class
name|SmallFloat
block|{
comment|/** No instance */
DECL|method|SmallFloat
specifier|private
name|SmallFloat
parameter_list|()
block|{}
comment|/** Converts a 32 bit float to an 8 bit float.    *<br>Values less than zero are all mapped to zero.    *<br>Values are truncated (rounded down) to the nearest 8 bit value.    *<br>Values between zero and the smallest representable value    *  are rounded up.    *    * @param f the 32 bit float to be converted to an 8 bit float (byte)    * @param numMantissaBits the number of mantissa bits to use in the byte, with the remainder to be used in the exponent    * @param zeroExp the zero-point in the range of exponent values    * @return the 8 bit float representation    */
DECL|method|floatToByte
specifier|public
specifier|static
name|byte
name|floatToByte
parameter_list|(
name|float
name|f
parameter_list|,
name|int
name|numMantissaBits
parameter_list|,
name|int
name|zeroExp
parameter_list|)
block|{
comment|// Adjustment from a float zero exponent to our zero exponent,
comment|// shifted over to our exponent position.
name|int
name|fzero
init|=
operator|(
literal|63
operator|-
name|zeroExp
operator|)
operator|<<
name|numMantissaBits
decl_stmt|;
name|int
name|bits
init|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|int
name|smallfloat
init|=
name|bits
operator|>>
operator|(
literal|24
operator|-
name|numMantissaBits
operator|)
decl_stmt|;
if|if
condition|(
name|smallfloat
operator|<=
name|fzero
condition|)
block|{
return|return
operator|(
name|bits
operator|<=
literal|0
operator|)
condition|?
operator|(
name|byte
operator|)
literal|0
comment|// negative numbers and zero both map to 0 byte
else|:
operator|(
name|byte
operator|)
literal|1
return|;
comment|// underflow is mapped to smallest non-zero number.
block|}
elseif|else
if|if
condition|(
name|smallfloat
operator|>=
name|fzero
operator|+
literal|0x100
condition|)
block|{
return|return
operator|-
literal|1
return|;
comment|// overflow maps to largest number
block|}
else|else
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|smallfloat
operator|-
name|fzero
argument_list|)
return|;
block|}
block|}
comment|/** Converts an 8 bit float to a 32 bit float. */
DECL|method|byteToFloat
specifier|public
specifier|static
name|float
name|byteToFloat
parameter_list|(
name|byte
name|b
parameter_list|,
name|int
name|numMantissaBits
parameter_list|,
name|int
name|zeroExp
parameter_list|)
block|{
comment|// on Java1.5& 1.6 JVMs, prebuilding a decoding array and doing a lookup
comment|// is only a little bit faster (anywhere from 0% to 7%)
if|if
condition|(
name|b
operator|==
literal|0
condition|)
return|return
literal|0.0f
return|;
name|int
name|bits
init|=
operator|(
name|b
operator|&
literal|0xff
operator|)
operator|<<
operator|(
literal|24
operator|-
name|numMantissaBits
operator|)
decl_stmt|;
name|bits
operator|+=
operator|(
literal|63
operator|-
name|zeroExp
operator|)
operator|<<
literal|24
expr_stmt|;
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bits
argument_list|)
return|;
block|}
comment|//
comment|// Some specializations of the generic functions follow.
comment|// The generic functions are just as fast with current (1.5)
comment|// -server JVMs, but still slower with client JVMs.
comment|//
comment|/** floatToByte(b, mantissaBits=3, zeroExponent=15)    *<br>smallest non-zero value = 5.820766E-10    *<br>largest value = 7.5161928E9    *<br>epsilon = 0.125    */
DECL|method|floatToByte315
specifier|public
specifier|static
name|byte
name|floatToByte315
parameter_list|(
name|float
name|f
parameter_list|)
block|{
name|int
name|bits
init|=
name|Float
operator|.
name|floatToRawIntBits
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|int
name|smallfloat
init|=
name|bits
operator|>>
operator|(
literal|24
operator|-
literal|3
operator|)
decl_stmt|;
if|if
condition|(
name|smallfloat
operator|<=
operator|(
operator|(
literal|63
operator|-
literal|15
operator|)
operator|<<
literal|3
operator|)
condition|)
block|{
return|return
operator|(
name|bits
operator|<=
literal|0
operator|)
condition|?
operator|(
name|byte
operator|)
literal|0
else|:
operator|(
name|byte
operator|)
literal|1
return|;
block|}
if|if
condition|(
name|smallfloat
operator|>=
operator|(
operator|(
literal|63
operator|-
literal|15
operator|)
operator|<<
literal|3
operator|)
operator|+
literal|0x100
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
call|(
name|byte
call|)
argument_list|(
name|smallfloat
operator|-
operator|(
operator|(
literal|63
operator|-
literal|15
operator|)
operator|<<
literal|3
operator|)
argument_list|)
return|;
block|}
comment|/** byteToFloat(b, mantissaBits=3, zeroExponent=15) */
DECL|method|byte315ToFloat
specifier|public
specifier|static
name|float
name|byte315ToFloat
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
comment|// on Java1.5& 1.6 JVMs, prebuilding a decoding array and doing a lookup
comment|// is only a little bit faster (anywhere from 0% to 7%)
if|if
condition|(
name|b
operator|==
literal|0
condition|)
return|return
literal|0.0f
return|;
name|int
name|bits
init|=
operator|(
name|b
operator|&
literal|0xff
operator|)
operator|<<
operator|(
literal|24
operator|-
literal|3
operator|)
decl_stmt|;
name|bits
operator|+=
operator|(
literal|63
operator|-
literal|15
operator|)
operator|<<
literal|24
expr_stmt|;
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|bits
argument_list|)
return|;
block|}
comment|/** Float-like encoding for positive longs that preserves ordering and 4 significant bits. */
DECL|method|longToInt4
specifier|public
specifier|static
name|int
name|longToInt4
parameter_list|(
name|long
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only supports positive values, got "
operator|+
name|i
argument_list|)
throw|;
block|}
name|int
name|numBits
init|=
literal|64
operator|-
name|Long
operator|.
name|numberOfLeadingZeros
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|numBits
operator|<
literal|4
condition|)
block|{
comment|// subnormal value
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|i
argument_list|)
return|;
block|}
else|else
block|{
comment|// normal value
name|int
name|shift
init|=
name|numBits
operator|-
literal|4
decl_stmt|;
comment|// only keep the 5 most significant bits
name|int
name|encoded
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|i
operator|>>>
name|shift
argument_list|)
decl_stmt|;
comment|// clear the most significant bit, which is implicit
name|encoded
operator|&=
literal|0x07
expr_stmt|;
comment|// encode the shift, adding 1 because 0 is reserved for subnormal values
name|encoded
operator||=
operator|(
name|shift
operator|+
literal|1
operator|)
operator|<<
literal|3
expr_stmt|;
return|return
name|encoded
return|;
block|}
block|}
comment|/**    * Decode values encoded with {@link #longToInt4(long)}.    */
DECL|method|int4ToLong
specifier|public
specifier|static
specifier|final
name|long
name|int4ToLong
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|long
name|bits
init|=
name|i
operator|&
literal|0x07
decl_stmt|;
name|int
name|shift
init|=
operator|(
name|i
operator|>>>
literal|3
operator|)
operator|-
literal|1
decl_stmt|;
name|long
name|decoded
decl_stmt|;
if|if
condition|(
name|shift
operator|==
operator|-
literal|1
condition|)
block|{
comment|// subnormal value
name|decoded
operator|=
name|bits
expr_stmt|;
block|}
else|else
block|{
comment|// normal value
name|decoded
operator|=
operator|(
name|bits
operator||
literal|0x08
operator|)
operator|<<
name|shift
expr_stmt|;
block|}
return|return
name|decoded
return|;
block|}
DECL|field|MAX_INT4
specifier|private
specifier|static
specifier|final
name|int
name|MAX_INT4
init|=
name|longToInt4
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
DECL|field|NUM_FREE_VALUES
specifier|private
specifier|static
specifier|final
name|int
name|NUM_FREE_VALUES
init|=
literal|255
operator|-
name|MAX_INT4
decl_stmt|;
comment|/**    * Encode an integer to a byte. It is built upon {@link #longToInt4(long)}    * and leverages the fact that {@code longToInt4(Integer.MAX_VALUE)} is    * less than 255 to encode low values more accurately.    */
DECL|method|intToByte4
specifier|public
specifier|static
name|byte
name|intToByte4
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Only supports positive values, got "
operator|+
name|i
argument_list|)
throw|;
block|}
if|if
condition|(
name|i
operator|<
name|NUM_FREE_VALUES
condition|)
block|{
return|return
operator|(
name|byte
operator|)
name|i
return|;
block|}
else|else
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|NUM_FREE_VALUES
operator|+
name|longToInt4
argument_list|(
name|i
operator|-
name|NUM_FREE_VALUES
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**    * Decode values that have been encoded with {@link #intToByte4(int)}.    */
DECL|method|byte4ToInt
specifier|public
specifier|static
name|int
name|byte4ToInt
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|int
name|i
init|=
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|b
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|NUM_FREE_VALUES
condition|)
block|{
return|return
name|i
return|;
block|}
else|else
block|{
name|long
name|decoded
init|=
name|NUM_FREE_VALUES
operator|+
name|int4ToLong
argument_list|(
name|i
operator|-
name|NUM_FREE_VALUES
argument_list|)
decl_stmt|;
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|decoded
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

