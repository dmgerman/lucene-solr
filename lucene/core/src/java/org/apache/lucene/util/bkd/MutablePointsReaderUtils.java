begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util.bkd
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|bkd
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|MutablePointValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntroSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntroSorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MSBRadixSorter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RadixSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Selector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|PackedInts
import|;
end_import

begin_class
DECL|class|MutablePointsReaderUtils
specifier|final
class|class
name|MutablePointsReaderUtils
block|{
DECL|method|MutablePointsReaderUtils
name|MutablePointsReaderUtils
parameter_list|()
block|{}
comment|/** Sort the given {@link MutablePointValues} based on its packed value then doc ID. */
DECL|method|sort
specifier|static
name|void
name|sort
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|packedBytesLength
parameter_list|,
name|MutablePointValues
name|reader
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|)
block|{
specifier|final
name|int
name|bitsPerDocId
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|new
name|MSBRadixSorter
argument_list|(
name|packedBytesLength
operator|+
operator|(
name|bitsPerDocId
operator|+
literal|7
operator|)
operator|/
literal|8
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|reader
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|byteAt
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
block|{
if|if
condition|(
name|k
operator|<
name|packedBytesLength
condition|)
block|{
return|return
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|reader
operator|.
name|getByteAt
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|int
name|shift
init|=
name|bitsPerDocId
operator|-
operator|(
operator|(
name|k
operator|-
name|packedBytesLength
operator|+
literal|1
operator|)
operator|<<
literal|3
operator|)
decl_stmt|;
return|return
operator|(
name|reader
operator|.
name|getDocID
argument_list|(
name|i
argument_list|)
operator|>>>
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|shift
argument_list|)
operator|)
operator|&
literal|0xff
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|Sorter
name|getFallbackSorter
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
operator|new
name|IntroSorter
argument_list|()
block|{
specifier|final
name|BytesRef
name|pivot
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
specifier|final
name|BytesRef
name|scratch
init|=
operator|new
name|BytesRef
argument_list|()
decl_stmt|;
name|int
name|pivotDoc
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|reader
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|reader
operator|.
name|getValue
argument_list|(
name|i
argument_list|,
name|pivot
argument_list|)
expr_stmt|;
name|pivotDoc
operator|=
name|reader
operator|.
name|getDocID
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
if|if
condition|(
name|k
operator|<
name|packedBytesLength
condition|)
block|{
name|reader
operator|.
name|getValue
argument_list|(
name|j
argument_list|,
name|scratch
argument_list|)
expr_stmt|;
name|int
name|cmp
init|=
name|StringHelper
operator|.
name|compare
argument_list|(
name|packedBytesLength
operator|-
name|k
argument_list|,
name|pivot
operator|.
name|bytes
argument_list|,
name|pivot
operator|.
name|offset
operator|+
name|k
argument_list|,
name|scratch
operator|.
name|bytes
argument_list|,
name|scratch
operator|.
name|offset
operator|+
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
block|}
return|return
name|pivotDoc
operator|-
name|reader
operator|.
name|getDocID
argument_list|(
name|j
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
operator|.
name|sort
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
comment|/** Sort points on the given dimension. */
DECL|method|sortByDim
specifier|static
name|void
name|sortByDim
parameter_list|(
name|int
name|sortedDim
parameter_list|,
name|int
name|bytesPerDim
parameter_list|,
name|int
index|[]
name|commonPrefixLengths
parameter_list|,
name|MutablePointValues
name|reader
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|BytesRef
name|scratch1
parameter_list|,
name|BytesRef
name|scratch2
parameter_list|)
block|{
comment|// No need for a fancy radix sort here, this is called on the leaves only so
comment|// there are not many values to sort
specifier|final
name|int
name|offset
init|=
name|sortedDim
operator|*
name|bytesPerDim
operator|+
name|commonPrefixLengths
index|[
name|sortedDim
index|]
decl_stmt|;
specifier|final
name|int
name|numBytesToCompare
init|=
name|bytesPerDim
operator|-
name|commonPrefixLengths
index|[
name|sortedDim
index|]
decl_stmt|;
operator|new
name|IntroSorter
argument_list|()
block|{
specifier|final
name|BytesRef
name|pivot
init|=
name|scratch1
decl_stmt|;
name|int
name|pivotDoc
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|reader
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|reader
operator|.
name|getValue
argument_list|(
name|i
argument_list|,
name|pivot
argument_list|)
expr_stmt|;
name|pivotDoc
operator|=
name|reader
operator|.
name|getDocID
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
name|reader
operator|.
name|getValue
argument_list|(
name|j
argument_list|,
name|scratch2
argument_list|)
expr_stmt|;
name|int
name|cmp
init|=
name|StringHelper
operator|.
name|compare
argument_list|(
name|numBytesToCompare
argument_list|,
name|pivot
operator|.
name|bytes
argument_list|,
name|pivot
operator|.
name|offset
operator|+
name|offset
argument_list|,
name|scratch2
operator|.
name|bytes
argument_list|,
name|scratch2
operator|.
name|offset
operator|+
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
name|cmp
operator|=
name|pivotDoc
operator|-
name|reader
operator|.
name|getDocID
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
block|}
operator|.
name|sort
argument_list|(
name|from
argument_list|,
name|to
argument_list|)
expr_stmt|;
block|}
comment|/** Partition points around {@code mid}. All values on the left must be less    *  than or equal to it and all values on the right must be greater than or    *  equal to it. */
DECL|method|partition
specifier|static
name|void
name|partition
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|int
name|splitDim
parameter_list|,
name|int
name|bytesPerDim
parameter_list|,
name|int
name|commonPrefixLen
parameter_list|,
name|MutablePointValues
name|reader
parameter_list|,
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|mid
parameter_list|,
name|BytesRef
name|scratch1
parameter_list|,
name|BytesRef
name|scratch2
parameter_list|)
block|{
specifier|final
name|int
name|offset
init|=
name|splitDim
operator|*
name|bytesPerDim
operator|+
name|commonPrefixLen
decl_stmt|;
specifier|final
name|int
name|cmpBytes
init|=
name|bytesPerDim
operator|-
name|commonPrefixLen
decl_stmt|;
specifier|final
name|int
name|bitsPerDocId
init|=
name|PackedInts
operator|.
name|bitsRequired
argument_list|(
name|maxDoc
operator|-
literal|1
argument_list|)
decl_stmt|;
operator|new
name|RadixSelector
argument_list|(
name|cmpBytes
operator|+
operator|(
name|bitsPerDocId
operator|+
literal|7
operator|)
operator|/
literal|8
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Selector
name|getFallbackSelector
parameter_list|(
name|int
name|k
parameter_list|)
block|{
return|return
operator|new
name|IntroSelector
argument_list|()
block|{
specifier|final
name|BytesRef
name|pivot
init|=
name|scratch1
decl_stmt|;
name|int
name|pivotDoc
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|reader
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|reader
operator|.
name|getValue
argument_list|(
name|i
argument_list|,
name|pivot
argument_list|)
expr_stmt|;
name|pivotDoc
operator|=
name|reader
operator|.
name|getDocID
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
if|if
condition|(
name|k
operator|<
name|cmpBytes
condition|)
block|{
name|reader
operator|.
name|getValue
argument_list|(
name|j
argument_list|,
name|scratch2
argument_list|)
expr_stmt|;
name|int
name|cmp
init|=
name|StringHelper
operator|.
name|compare
argument_list|(
name|cmpBytes
operator|-
name|k
argument_list|,
name|pivot
operator|.
name|bytes
argument_list|,
name|pivot
operator|.
name|offset
operator|+
name|offset
operator|+
name|k
argument_list|,
name|scratch2
operator|.
name|bytes
argument_list|,
name|scratch2
operator|.
name|offset
operator|+
name|offset
operator|+
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
name|cmp
return|;
block|}
block|}
return|return
name|pivotDoc
operator|-
name|reader
operator|.
name|getDocID
argument_list|(
name|j
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|reader
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|byteAt
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
block|{
if|if
condition|(
name|k
operator|<
name|cmpBytes
condition|)
block|{
return|return
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|reader
operator|.
name|getByteAt
argument_list|(
name|i
argument_list|,
name|offset
operator|+
name|k
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|int
name|shift
init|=
name|bitsPerDocId
operator|-
operator|(
operator|(
name|k
operator|-
name|cmpBytes
operator|+
literal|1
operator|)
operator|<<
literal|3
operator|)
decl_stmt|;
return|return
operator|(
name|reader
operator|.
name|getDocID
argument_list|(
name|i
argument_list|)
operator|>>>
name|Math
operator|.
name|max
argument_list|(
literal|0
argument_list|,
name|shift
argument_list|)
operator|)
operator|&
literal|0xff
return|;
block|}
block|}
block|}
operator|.
name|select
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|mid
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

