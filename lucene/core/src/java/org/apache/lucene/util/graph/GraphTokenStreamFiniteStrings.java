begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util.graph
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|BytesTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|FiniteStringsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
import|;
end_import

begin_comment
comment|/**  * Creates a list of {@link TokenStream} where each stream is the tokens that make up a finite string in graph token stream.  To do this,  * the graph token stream is converted to an {@link Automaton} and from there we use a {@link FiniteStringsIterator} to collect the various  * token streams for each finite string.  */
end_comment

begin_class
DECL|class|GraphTokenStreamFiniteStrings
specifier|public
specifier|final
class|class
name|GraphTokenStreamFiniteStrings
block|{
DECL|field|builder
specifier|private
specifier|final
name|Automaton
operator|.
name|Builder
name|builder
init|=
operator|new
name|Automaton
operator|.
name|Builder
argument_list|()
decl_stmt|;
DECL|field|termToID
specifier|private
specifier|final
name|Map
argument_list|<
name|BytesRef
argument_list|,
name|Integer
argument_list|>
name|termToID
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|idToTerm
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|BytesRef
argument_list|>
name|idToTerm
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|idToInc
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|idToInc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|det
specifier|private
name|Automaton
name|det
decl_stmt|;
DECL|class|FiniteStringsTokenStream
specifier|private
class|class
name|FiniteStringsTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|BytesTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|BytesTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ids
specifier|private
specifier|final
name|IntsRef
name|ids
decl_stmt|;
DECL|field|end
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|FiniteStringsTokenStream
name|FiniteStringsTokenStream
parameter_list|(
specifier|final
name|IntsRef
name|ids
parameter_list|)
block|{
assert|assert
name|ids
operator|!=
literal|null
assert|;
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|ids
operator|.
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|ids
operator|.
name|offset
operator|+
name|ids
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
name|end
condition|)
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
name|int
name|id
init|=
name|ids
operator|.
name|ints
index|[
name|offset
index|]
decl_stmt|;
name|termAtt
operator|.
name|setBytesRef
argument_list|(
name|idToTerm
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|incr
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|idToInc
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|incr
operator|=
name|idToInc
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
name|incr
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|GraphTokenStreamFiniteStrings
specifier|private
name|GraphTokenStreamFiniteStrings
parameter_list|()
block|{   }
comment|/**    * Gets the list of finite string token streams from the given input graph token stream.    */
DECL|method|getTokenStreams
specifier|public
specifier|static
name|List
argument_list|<
name|TokenStream
argument_list|>
name|getTokenStreams
parameter_list|(
specifier|final
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|GraphTokenStreamFiniteStrings
name|gfs
init|=
operator|new
name|GraphTokenStreamFiniteStrings
argument_list|()
decl_stmt|;
return|return
name|gfs
operator|.
name|process
argument_list|(
name|in
argument_list|)
return|;
block|}
comment|/**    * Builds automaton and builds the finite string token streams.    */
DECL|method|process
specifier|private
name|List
argument_list|<
name|TokenStream
argument_list|>
name|process
parameter_list|(
specifier|final
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|build
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TokenStream
argument_list|>
name|tokenStreams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|FiniteStringsIterator
name|finiteStrings
init|=
operator|new
name|FiniteStringsIterator
argument_list|(
name|det
argument_list|)
decl_stmt|;
for|for
control|(
name|IntsRef
name|ids
init|;
operator|(
name|ids
operator|=
name|finiteStrings
operator|.
name|next
argument_list|()
operator|)
operator|!=
literal|null
condition|;
control|)
block|{
name|tokenStreams
operator|.
name|add
argument_list|(
operator|new
name|FiniteStringsTokenStream
argument_list|(
name|IntsRef
operator|.
name|deepCopyOf
argument_list|(
name|ids
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tokenStreams
return|;
block|}
DECL|method|build
specifier|private
name|void
name|build
parameter_list|(
specifier|final
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|det
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Automation already built"
argument_list|)
throw|;
block|}
specifier|final
name|TermToBytesRefAttribute
name|termBytesAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionLengthAttribute
name|posLengthAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|prevIncr
init|=
literal|1
decl_stmt|;
name|int
name|state
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|currentIncr
init|=
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
operator|&&
name|currentIncr
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Malformed TokenStream, start token can't have increment less than 1"
argument_list|)
throw|;
block|}
comment|// always use inc 1 while building, but save original increment
name|int
name|incr
init|=
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|currentIncr
argument_list|)
decl_stmt|;
if|if
condition|(
name|incr
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|incr
expr_stmt|;
block|}
name|int
name|endPos
init|=
name|pos
operator|+
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|state
operator|<
name|endPos
condition|)
block|{
name|state
operator|=
name|createState
argument_list|()
expr_stmt|;
block|}
name|BytesRef
name|term
init|=
name|termBytesAtt
operator|.
name|getBytesRef
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|getTermID
argument_list|(
name|currentIncr
argument_list|,
name|prevIncr
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|addTransition
argument_list|(
name|pos
argument_list|,
name|endPos
argument_list|,
name|currentIncr
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// only save last increment on non-zero increment in case we have multiple stacked tokens
if|if
condition|(
name|currentIncr
operator|>
literal|0
condition|)
block|{
name|prevIncr
operator|=
name|currentIncr
expr_stmt|;
block|}
block|}
name|in
operator|.
name|end
argument_list|()
expr_stmt|;
name|setAccept
argument_list|(
name|state
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|finish
argument_list|()
expr_stmt|;
block|}
comment|/**    * Returns a new state; state 0 is always the initial state.    */
DECL|method|createState
specifier|private
name|int
name|createState
parameter_list|()
block|{
return|return
name|builder
operator|.
name|createState
argument_list|()
return|;
block|}
comment|/**    * Marks the specified state as accept or not.    */
DECL|method|setAccept
specifier|private
name|void
name|setAccept
parameter_list|(
name|int
name|state
parameter_list|,
name|boolean
name|accept
parameter_list|)
block|{
name|builder
operator|.
name|setAccept
argument_list|(
name|state
argument_list|,
name|accept
argument_list|)
expr_stmt|;
block|}
comment|/**    * Adds a transition to the automaton.    */
DECL|method|addTransition
specifier|private
name|void
name|addTransition
parameter_list|(
name|int
name|source
parameter_list|,
name|int
name|dest
parameter_list|,
name|int
name|incr
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|builder
operator|.
name|addTransition
argument_list|(
name|source
argument_list|,
name|dest
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call this once you are done adding states/transitions.    */
DECL|method|finish
specifier|private
name|void
name|finish
parameter_list|()
block|{
name|finish
argument_list|(
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
expr_stmt|;
block|}
comment|/**    * Call this once you are done adding states/transitions.    *    * @param maxDeterminizedStates Maximum number of states created when determinizing the automaton.  Higher numbers allow this operation    *                              to consume more memory but allow more complex automatons.    */
DECL|method|finish
specifier|private
name|void
name|finish
parameter_list|(
name|int
name|maxDeterminizedStates
parameter_list|)
block|{
name|Automaton
name|automaton
init|=
name|builder
operator|.
name|finish
argument_list|()
decl_stmt|;
name|det
operator|=
name|Operations
operator|.
name|removeDeadStates
argument_list|(
name|Operations
operator|.
name|determinize
argument_list|(
name|automaton
argument_list|,
name|maxDeterminizedStates
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Gets an integer id for a given term.    *    * If there is no position gaps for this token then we can reuse the id for the same term if it appeared at another    * position without a gap.  If we have a position gap generate a new id so we can keep track of the position    * increment.    */
DECL|method|getTermID
specifier|private
name|int
name|getTermID
parameter_list|(
name|int
name|incr
parameter_list|,
name|int
name|prevIncr
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
assert|assert
name|term
operator|!=
literal|null
assert|;
name|boolean
name|isStackedGap
init|=
name|incr
operator|==
literal|0
operator|&&
name|prevIncr
operator|>
literal|1
decl_stmt|;
name|boolean
name|hasGap
init|=
name|incr
operator|>
literal|1
decl_stmt|;
name|Integer
name|id
decl_stmt|;
if|if
condition|(
name|hasGap
operator|||
name|isStackedGap
condition|)
block|{
name|id
operator|=
name|idToTerm
operator|.
name|size
argument_list|()
expr_stmt|;
name|idToTerm
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
comment|// stacked token should have the same increment as original token at this position
if|if
condition|(
name|isStackedGap
condition|)
block|{
name|idToInc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|prevIncr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|idToInc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|incr
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|id
operator|=
name|termToID
operator|.
name|get
argument_list|(
name|term
argument_list|)
expr_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|term
operator|=
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
expr_stmt|;
name|id
operator|=
name|idToTerm
operator|.
name|size
argument_list|()
expr_stmt|;
name|termToID
operator|.
name|put
argument_list|(
name|term
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|idToTerm
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|term
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

