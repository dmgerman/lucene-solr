begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util.graph
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|graph
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|BytesTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionLengthAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|TermToBytesRefAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IntsRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Automaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|FiniteStringsIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Transition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|Operations
operator|.
name|DEFAULT_MAX_DETERMINIZED_STATES
import|;
end_import

begin_comment
comment|/**  * Consumes a TokenStream and creates an {@link Automaton} where the transition labels are terms from  * the {@link TermToBytesRefAttribute}.  * This class also provides helpers to explore the different paths of the {@link Automaton}.  */
end_comment

begin_class
DECL|class|GraphTokenStreamFiniteStrings
specifier|public
specifier|final
class|class
name|GraphTokenStreamFiniteStrings
block|{
DECL|field|idToTerm
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|BytesRef
argument_list|>
name|idToTerm
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|idToInc
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|idToInc
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|det
specifier|private
specifier|final
name|Automaton
name|det
decl_stmt|;
DECL|field|transition
specifier|private
specifier|final
name|Transition
name|transition
init|=
operator|new
name|Transition
argument_list|()
decl_stmt|;
DECL|class|FiniteStringsTokenStream
specifier|private
class|class
name|FiniteStringsTokenStream
extends|extends
name|TokenStream
block|{
DECL|field|termAtt
specifier|private
specifier|final
name|BytesTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|BytesTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
specifier|private
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|ids
specifier|private
specifier|final
name|IntsRef
name|ids
decl_stmt|;
DECL|field|end
specifier|private
specifier|final
name|int
name|end
decl_stmt|;
DECL|field|offset
specifier|private
name|int
name|offset
decl_stmt|;
DECL|method|FiniteStringsTokenStream
name|FiniteStringsTokenStream
parameter_list|(
specifier|final
name|IntsRef
name|ids
parameter_list|)
block|{
assert|assert
name|ids
operator|!=
literal|null
assert|;
name|this
operator|.
name|ids
operator|=
name|ids
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|ids
operator|.
name|offset
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|ids
operator|.
name|offset
operator|+
name|ids
operator|.
name|length
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|offset
operator|<
name|end
condition|)
block|{
name|clearAttributes
argument_list|()
expr_stmt|;
name|int
name|id
init|=
name|ids
operator|.
name|ints
index|[
name|offset
index|]
decl_stmt|;
name|termAtt
operator|.
name|setBytesRef
argument_list|(
name|idToTerm
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|incr
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|idToInc
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|incr
operator|=
name|idToInc
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
name|incr
argument_list|)
expr_stmt|;
name|offset
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
DECL|method|GraphTokenStreamFiniteStrings
specifier|public
name|GraphTokenStreamFiniteStrings
parameter_list|(
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Automaton
name|aut
init|=
name|build
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|this
operator|.
name|det
operator|=
name|Operations
operator|.
name|removeDeadStates
argument_list|(
name|Operations
operator|.
name|determinize
argument_list|(
name|aut
argument_list|,
name|DEFAULT_MAX_DETERMINIZED_STATES
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Returns whether the provided state is the start of multiple side paths of different length (eg: new york, ny)    */
DECL|method|hasSidePath
specifier|public
name|boolean
name|hasSidePath
parameter_list|(
name|int
name|state
parameter_list|)
block|{
name|int
name|numT
init|=
name|det
operator|.
name|initTransition
argument_list|(
name|state
argument_list|,
name|transition
argument_list|)
decl_stmt|;
if|if
condition|(
name|numT
operator|<=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
name|det
operator|.
name|getNextTransition
argument_list|(
name|transition
argument_list|)
expr_stmt|;
name|int
name|dest
init|=
name|transition
operator|.
name|dest
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|numT
condition|;
name|i
operator|++
control|)
block|{
name|det
operator|.
name|getNextTransition
argument_list|(
name|transition
argument_list|)
expr_stmt|;
if|if
condition|(
name|dest
operator|!=
name|transition
operator|.
name|dest
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Returns the list of terms that start at the provided state    */
DECL|method|getTerms
specifier|public
name|Term
index|[]
name|getTerms
parameter_list|(
name|String
name|field
parameter_list|,
name|int
name|state
parameter_list|)
block|{
name|int
name|numT
init|=
name|det
operator|.
name|initTransition
argument_list|(
name|state
argument_list|,
name|transition
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Term
argument_list|>
name|terms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numT
condition|;
name|i
operator|++
control|)
block|{
name|det
operator|.
name|getNextTransition
argument_list|(
name|transition
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|id
init|=
name|transition
operator|.
name|min
init|;
name|id
operator|<=
name|transition
operator|.
name|max
condition|;
name|id
operator|++
control|)
block|{
name|Term
name|term
init|=
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|idToTerm
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
decl_stmt|;
name|terms
operator|.
name|add
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|terms
operator|.
name|toArray
argument_list|(
operator|new
name|Term
index|[
name|terms
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**    * Get all finite strings from the automaton.    */
DECL|method|getFiniteStrings
specifier|public
name|Iterator
argument_list|<
name|TokenStream
argument_list|>
name|getFiniteStrings
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getFiniteStrings
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
comment|/**    * Get all finite strings that start at {@code startState} and end at {@code endState}.    */
DECL|method|getFiniteStrings
specifier|public
name|Iterator
argument_list|<
name|TokenStream
argument_list|>
name|getFiniteStrings
parameter_list|(
name|int
name|startState
parameter_list|,
name|int
name|endState
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|FiniteStringsIterator
name|it
init|=
operator|new
name|FiniteStringsIterator
argument_list|(
name|det
argument_list|,
name|startState
argument_list|,
name|endState
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|TokenStream
argument_list|>
argument_list|()
block|{
name|IntsRef
name|current
decl_stmt|;
name|boolean
name|finished
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|finished
operator|==
literal|false
operator|&&
name|current
operator|==
literal|null
condition|)
block|{
name|current
operator|=
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|finished
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|current
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|TokenStream
name|next
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
name|hasNext
argument_list|()
expr_stmt|;
block|}
name|TokenStream
name|next
init|=
operator|new
name|FiniteStringsTokenStream
argument_list|(
name|current
argument_list|)
decl_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
return|return
name|next
return|;
block|}
block|}
return|;
block|}
comment|/**    * Returns the articulation points (or cut vertices) of the graph:    * https://en.wikipedia.org/wiki/Biconnected_component    */
DECL|method|articulationPoints
specifier|public
name|int
index|[]
name|articulationPoints
parameter_list|()
block|{
if|if
condition|(
name|det
operator|.
name|getNumStates
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|int
index|[
literal|0
index|]
return|;
block|}
comment|//
name|Automaton
operator|.
name|Builder
name|undirect
init|=
operator|new
name|Automaton
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|undirect
operator|.
name|copy
argument_list|(
name|det
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|det
operator|.
name|getNumStates
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|int
name|numT
init|=
name|det
operator|.
name|initTransition
argument_list|(
name|i
argument_list|,
name|transition
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numT
condition|;
name|j
operator|++
control|)
block|{
name|det
operator|.
name|getNextTransition
argument_list|(
name|transition
argument_list|)
expr_stmt|;
name|undirect
operator|.
name|addTransition
argument_list|(
name|transition
operator|.
name|dest
argument_list|,
name|i
argument_list|,
name|transition
operator|.
name|min
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|numStates
init|=
name|det
operator|.
name|getNumStates
argument_list|()
decl_stmt|;
name|BitSet
name|visited
init|=
operator|new
name|BitSet
argument_list|(
name|numStates
argument_list|)
decl_stmt|;
name|int
index|[]
name|depth
init|=
operator|new
name|int
index|[
name|det
operator|.
name|getNumStates
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|low
init|=
operator|new
name|int
index|[
name|det
operator|.
name|getNumStates
argument_list|()
index|]
decl_stmt|;
name|int
index|[]
name|parent
init|=
operator|new
name|int
index|[
name|det
operator|.
name|getNumStates
argument_list|()
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|parent
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|points
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|articulationPointsRecurse
argument_list|(
name|undirect
operator|.
name|finish
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|depth
argument_list|,
name|low
argument_list|,
name|parent
argument_list|,
name|visited
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|reverse
argument_list|(
name|points
argument_list|)
expr_stmt|;
return|return
name|points
operator|.
name|stream
argument_list|()
operator|.
name|mapToInt
argument_list|(
name|p
lambda|->
name|p
argument_list|)
operator|.
name|toArray
argument_list|()
return|;
block|}
comment|/**    * Build an automaton from the provided {@link TokenStream}.    */
DECL|method|build
specifier|private
name|Automaton
name|build
parameter_list|(
specifier|final
name|TokenStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Automaton
operator|.
name|Builder
name|builder
init|=
operator|new
name|Automaton
operator|.
name|Builder
argument_list|()
decl_stmt|;
specifier|final
name|TermToBytesRefAttribute
name|termBytesAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|TermToBytesRefAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|PositionLengthAttribute
name|posLengthAtt
init|=
name|in
operator|.
name|addAttribute
argument_list|(
name|PositionLengthAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
name|in
operator|.
name|reset
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|prevIncr
init|=
literal|1
decl_stmt|;
name|int
name|state
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|int
name|currentIncr
init|=
name|posIncAtt
operator|.
name|getPositionIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
operator|&&
name|currentIncr
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Malformed TokenStream, start token can't have increment less than 1"
argument_list|)
throw|;
block|}
comment|// always use inc 1 while building, but save original increment
name|int
name|incr
init|=
name|Math
operator|.
name|min
argument_list|(
literal|1
argument_list|,
name|currentIncr
argument_list|)
decl_stmt|;
if|if
condition|(
name|incr
operator|>
literal|0
condition|)
block|{
name|pos
operator|+=
name|incr
expr_stmt|;
block|}
name|int
name|endPos
init|=
name|pos
operator|+
name|posLengthAtt
operator|.
name|getPositionLength
argument_list|()
decl_stmt|;
while|while
condition|(
name|state
operator|<
name|endPos
condition|)
block|{
name|state
operator|=
name|builder
operator|.
name|createState
argument_list|()
expr_stmt|;
block|}
name|BytesRef
name|term
init|=
name|termBytesAtt
operator|.
name|getBytesRef
argument_list|()
decl_stmt|;
name|int
name|id
init|=
name|getTermID
argument_list|(
name|currentIncr
argument_list|,
name|prevIncr
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addTransition
argument_list|(
name|pos
argument_list|,
name|endPos
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// only save last increment on non-zero increment in case we have multiple stacked tokens
if|if
condition|(
name|currentIncr
operator|>
literal|0
condition|)
block|{
name|prevIncr
operator|=
name|currentIncr
expr_stmt|;
block|}
block|}
name|in
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|state
operator|!=
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|setAccept
argument_list|(
name|state
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|finish
argument_list|()
return|;
block|}
comment|/**    * Gets an integer id for a given term and saves the position increment if needed.    */
DECL|method|getTermID
specifier|private
name|int
name|getTermID
parameter_list|(
name|int
name|incr
parameter_list|,
name|int
name|prevIncr
parameter_list|,
name|BytesRef
name|term
parameter_list|)
block|{
assert|assert
name|term
operator|!=
literal|null
assert|;
name|boolean
name|isStackedGap
init|=
name|incr
operator|==
literal|0
operator|&&
name|prevIncr
operator|>
literal|1
decl_stmt|;
name|int
name|id
init|=
name|idToTerm
operator|.
name|size
argument_list|()
decl_stmt|;
name|idToTerm
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|BytesRef
operator|.
name|deepCopyOf
argument_list|(
name|term
argument_list|)
argument_list|)
expr_stmt|;
comment|// stacked token should have the same increment as original token at this position
if|if
condition|(
name|isStackedGap
condition|)
block|{
name|idToInc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|prevIncr
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|incr
operator|>
literal|1
condition|)
block|{
name|idToInc
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|incr
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
DECL|method|articulationPointsRecurse
specifier|private
specifier|static
name|void
name|articulationPointsRecurse
parameter_list|(
name|Automaton
name|a
parameter_list|,
name|int
name|state
parameter_list|,
name|int
name|d
parameter_list|,
name|int
index|[]
name|depth
parameter_list|,
name|int
index|[]
name|low
parameter_list|,
name|int
index|[]
name|parent
parameter_list|,
name|BitSet
name|visited
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|points
parameter_list|)
block|{
name|visited
operator|.
name|set
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|depth
index|[
name|state
index|]
operator|=
name|d
expr_stmt|;
name|low
index|[
name|state
index|]
operator|=
name|d
expr_stmt|;
name|int
name|childCount
init|=
literal|0
decl_stmt|;
name|boolean
name|isArticulation
init|=
literal|false
decl_stmt|;
name|Transition
name|t
init|=
operator|new
name|Transition
argument_list|()
decl_stmt|;
name|int
name|numT
init|=
name|a
operator|.
name|initTransition
argument_list|(
name|state
argument_list|,
name|t
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numT
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|getNextTransition
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|visited
operator|.
name|get
argument_list|(
name|t
operator|.
name|dest
argument_list|)
operator|==
literal|false
condition|)
block|{
name|parent
index|[
name|t
operator|.
name|dest
index|]
operator|=
name|state
expr_stmt|;
name|articulationPointsRecurse
argument_list|(
name|a
argument_list|,
name|t
operator|.
name|dest
argument_list|,
name|d
operator|+
literal|1
argument_list|,
name|depth
argument_list|,
name|low
argument_list|,
name|parent
argument_list|,
name|visited
argument_list|,
name|points
argument_list|)
expr_stmt|;
name|childCount
operator|++
expr_stmt|;
if|if
condition|(
name|low
index|[
name|t
operator|.
name|dest
index|]
operator|>=
name|depth
index|[
name|state
index|]
condition|)
block|{
name|isArticulation
operator|=
literal|true
expr_stmt|;
block|}
name|low
index|[
name|state
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|low
index|[
name|state
index|]
argument_list|,
name|low
index|[
name|t
operator|.
name|dest
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|t
operator|.
name|dest
operator|!=
name|parent
index|[
name|state
index|]
condition|)
block|{
name|low
index|[
name|state
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|low
index|[
name|state
index|]
argument_list|,
name|depth
index|[
name|t
operator|.
name|dest
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|parent
index|[
name|state
index|]
operator|!=
operator|-
literal|1
operator|&&
name|isArticulation
operator|)
operator|||
operator|(
name|parent
index|[
name|state
index|]
operator|==
operator|-
literal|1
operator|&&
name|childCount
operator|>
literal|1
operator|)
condition|)
block|{
name|points
operator|.
name|add
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

