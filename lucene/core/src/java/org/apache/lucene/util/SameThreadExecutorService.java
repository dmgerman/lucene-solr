begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|AbstractExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|RejectedExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/** An {@code ExecutorService} that executes tasks immediately in the calling thread during submit.  *  *  @lucene.internal */
end_comment

begin_class
DECL|class|SameThreadExecutorService
specifier|public
specifier|final
class|class
name|SameThreadExecutorService
extends|extends
name|AbstractExecutorService
block|{
DECL|field|shutdown
specifier|private
specifier|volatile
name|boolean
name|shutdown
decl_stmt|;
annotation|@
name|Override
DECL|method|execute
specifier|public
name|void
name|execute
parameter_list|(
name|Runnable
name|command
parameter_list|)
block|{
name|checkShutdown
argument_list|()
expr_stmt|;
name|command
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|shutdownNow
specifier|public
name|List
argument_list|<
name|Runnable
argument_list|>
name|shutdownNow
parameter_list|()
block|{
name|shutdown
argument_list|()
expr_stmt|;
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|shutdown
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|this
operator|.
name|shutdown
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|isTerminated
specifier|public
name|boolean
name|isTerminated
parameter_list|()
block|{
comment|// Simplified: we don't check for any threads hanging in execute (we could
comment|// introduce an atomic counter, but there seems to be no point).
return|return
name|shutdown
operator|==
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|isShutdown
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
return|return
name|shutdown
operator|==
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|awaitTermination
specifier|public
name|boolean
name|awaitTermination
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// See comment in isTerminated();
return|return
literal|true
return|;
block|}
DECL|method|checkShutdown
specifier|private
name|void
name|checkShutdown
parameter_list|()
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
throw|throw
operator|new
name|RejectedExecutionException
argument_list|(
literal|"Executor is shut down."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

