begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.util
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/** Radix selector.  *<p>This implementation works similarly to a MSB radix sort except that it  *  only recurses into the sub partition that contains the desired value.  *  @lucene.internal */
end_comment

begin_class
DECL|class|RadixSelector
specifier|public
specifier|abstract
class|class
name|RadixSelector
extends|extends
name|Selector
block|{
comment|// after that many levels of recursion we fall back to introselect anyway
comment|// this is used as a protection against the fact that radix sort performs
comment|// worse when there are long common prefixes (probably because of cache
comment|// locality)
DECL|field|LEVEL_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|LEVEL_THRESHOLD
init|=
literal|8
decl_stmt|;
comment|// size of histograms: 256 + 1 to indicate that the string is finished
DECL|field|HISTOGRAM_SIZE
specifier|private
specifier|static
specifier|final
name|int
name|HISTOGRAM_SIZE
init|=
literal|257
decl_stmt|;
comment|// buckets below this size will be sorted with introselect
DECL|field|LENGTH_THRESHOLD
specifier|private
specifier|static
specifier|final
name|int
name|LENGTH_THRESHOLD
init|=
literal|100
decl_stmt|;
comment|// we store one histogram per recursion level
DECL|field|histogram
specifier|private
specifier|final
name|int
index|[]
name|histogram
init|=
operator|new
name|int
index|[
name|HISTOGRAM_SIZE
index|]
decl_stmt|;
DECL|field|commonPrefix
specifier|private
specifier|final
name|int
index|[]
name|commonPrefix
decl_stmt|;
DECL|field|maxLength
specifier|private
specifier|final
name|int
name|maxLength
decl_stmt|;
comment|/**    * Sole constructor.    * @param maxLength the maximum length of keys, pass {@link Integer#MAX_VALUE} if unknown.    */
DECL|method|RadixSelector
specifier|protected
name|RadixSelector
parameter_list|(
name|int
name|maxLength
parameter_list|)
block|{
name|this
operator|.
name|maxLength
operator|=
name|maxLength
expr_stmt|;
name|this
operator|.
name|commonPrefix
operator|=
operator|new
name|int
index|[
name|Math
operator|.
name|min
argument_list|(
literal|24
argument_list|,
name|maxLength
argument_list|)
index|]
expr_stmt|;
block|}
comment|/** Return the k-th byte of the entry at index {@code i}, or {@code -1} if    * its length is less than or equal to {@code k}. This may only be called    * with a value of {@code i} between {@code 0} included and    * {@code maxLength} excluded. */
DECL|method|byteAt
specifier|protected
specifier|abstract
name|int
name|byteAt
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
function_decl|;
comment|/** Get a fall-back selector which may assume that the first {@code d} bytes    *  of all compared strings are equal. This fallback selector is used when    *  the range becomes narrow or when the maximum level of recursion has    *  been exceeded. */
DECL|method|getFallbackSelector
specifier|protected
name|Selector
name|getFallbackSelector
parameter_list|(
name|int
name|d
parameter_list|)
block|{
return|return
operator|new
name|IntroSelector
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|void
name|swap
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
name|RadixSelector
operator|.
name|this
operator|.
name|swap
argument_list|(
name|i
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|compare
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|j
parameter_list|)
block|{
for|for
control|(
name|int
name|o
init|=
name|d
init|;
name|o
operator|<
name|maxLength
condition|;
operator|++
name|o
control|)
block|{
specifier|final
name|int
name|b1
init|=
name|byteAt
argument_list|(
name|i
argument_list|,
name|o
argument_list|)
decl_stmt|;
specifier|final
name|int
name|b2
init|=
name|byteAt
argument_list|(
name|j
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
return|return
name|b1
operator|-
name|b2
return|;
block|}
elseif|else
if|if
condition|(
name|b1
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setPivot
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|pivot
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|o
init|=
name|d
init|;
name|o
operator|<
name|maxLength
condition|;
operator|++
name|o
control|)
block|{
specifier|final
name|int
name|b
init|=
name|byteAt
argument_list|(
name|i
argument_list|,
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|pivot
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|int
name|comparePivot
parameter_list|(
name|int
name|j
parameter_list|)
block|{
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|pivot
operator|.
name|length
argument_list|()
condition|;
operator|++
name|o
control|)
block|{
specifier|final
name|int
name|b1
init|=
name|pivot
operator|.
name|byteAt
argument_list|(
name|o
argument_list|)
operator|&
literal|0xff
decl_stmt|;
specifier|final
name|int
name|b2
init|=
name|byteAt
argument_list|(
name|j
argument_list|,
name|d
operator|+
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
return|return
name|b1
operator|-
name|b2
return|;
block|}
block|}
if|if
condition|(
name|d
operator|+
name|pivot
operator|.
name|length
argument_list|()
operator|==
name|maxLength
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
operator|-
literal|1
operator|-
name|byteAt
argument_list|(
name|j
argument_list|,
name|d
operator|+
name|pivot
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|BytesRefBuilder
name|pivot
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|select
specifier|public
name|void
name|select
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|checkArgs
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|select
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|method|select
specifier|private
name|void
name|select
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|l
parameter_list|)
block|{
if|if
condition|(
name|to
operator|-
name|from
operator|<=
name|LENGTH_THRESHOLD
operator|||
name|d
operator|>=
name|LEVEL_THRESHOLD
condition|)
block|{
name|getFallbackSelector
argument_list|(
name|d
argument_list|)
operator|.
name|select
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|radixSelect
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|,
name|d
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param d the character number to compare    * @param l the level of recursion    */
DECL|method|radixSelect
specifier|private
name|void
name|radixSelect
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|,
name|int
name|d
parameter_list|,
name|int
name|l
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|histogram
init|=
name|this
operator|.
name|histogram
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|histogram
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|int
name|commonPrefixLength
init|=
name|computeCommonPrefixLengthAndBuildHistogram
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|d
argument_list|,
name|histogram
argument_list|)
decl_stmt|;
if|if
condition|(
name|commonPrefixLength
operator|>
literal|0
condition|)
block|{
comment|// if there are no more chars to compare or if all entries fell into the
comment|// first bucket (which means strings are shorter than d) then we are done
comment|// otherwise recurse
if|if
condition|(
name|d
operator|+
name|commonPrefixLength
operator|<
name|maxLength
operator|&&
name|histogram
index|[
literal|0
index|]
operator|<
name|to
operator|-
name|from
condition|)
block|{
name|radixSelect
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|k
argument_list|,
name|d
operator|+
name|commonPrefixLength
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
assert|assert
name|assertHistogram
argument_list|(
name|commonPrefixLength
argument_list|,
name|histogram
argument_list|)
assert|;
name|int
name|bucketFrom
init|=
name|from
decl_stmt|;
for|for
control|(
name|int
name|bucket
init|=
literal|0
init|;
name|bucket
operator|<
name|HISTOGRAM_SIZE
condition|;
operator|++
name|bucket
control|)
block|{
specifier|final
name|int
name|bucketTo
init|=
name|bucketFrom
operator|+
name|histogram
index|[
name|bucket
index|]
decl_stmt|;
if|if
condition|(
name|bucketTo
operator|>
name|k
condition|)
block|{
name|partition
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|bucket
argument_list|,
name|bucketFrom
argument_list|,
name|bucketTo
argument_list|,
name|d
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|!=
literal|0
operator|&&
name|d
operator|+
literal|1
operator|<
name|maxLength
condition|)
block|{
comment|// all elements in bucket 0 are equal so we only need to recurse if bucket != 0
name|select
argument_list|(
name|bucketFrom
argument_list|,
name|bucketTo
argument_list|,
name|k
argument_list|,
name|d
operator|+
literal|1
argument_list|,
name|l
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|bucketFrom
operator|=
name|bucketTo
expr_stmt|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Unreachable code"
argument_list|)
throw|;
block|}
comment|// only used from assert
DECL|method|assertHistogram
specifier|private
name|boolean
name|assertHistogram
parameter_list|(
name|int
name|commonPrefixLength
parameter_list|,
name|int
index|[]
name|histogram
parameter_list|)
block|{
name|int
name|numberOfUniqueBytes
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|freq
range|:
name|histogram
control|)
block|{
if|if
condition|(
name|freq
operator|>
literal|0
condition|)
block|{
name|numberOfUniqueBytes
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numberOfUniqueBytes
operator|==
literal|1
condition|)
block|{
assert|assert
name|commonPrefixLength
operator|>=
literal|1
assert|;
block|}
else|else
block|{
assert|assert
name|commonPrefixLength
operator|==
literal|0
assert|;
block|}
return|return
literal|true
return|;
block|}
comment|/** Return a number for the k-th character between 0 and {@link #HISTOGRAM_SIZE}. */
DECL|method|getBucket
specifier|private
name|int
name|getBucket
parameter_list|(
name|int
name|i
parameter_list|,
name|int
name|k
parameter_list|)
block|{
return|return
name|byteAt
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
operator|+
literal|1
return|;
block|}
comment|/** Build a histogram of the number of values per {@link #getBucket(int, int) bucket}    *  and return a common prefix length for all visited values.    *  @see #buildHistogram */
DECL|method|computeCommonPrefixLengthAndBuildHistogram
specifier|private
name|int
name|computeCommonPrefixLengthAndBuildHistogram
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|,
name|int
index|[]
name|histogram
parameter_list|)
block|{
specifier|final
name|int
index|[]
name|commonPrefix
init|=
name|this
operator|.
name|commonPrefix
decl_stmt|;
name|int
name|commonPrefixLength
init|=
name|Math
operator|.
name|min
argument_list|(
name|commonPrefix
operator|.
name|length
argument_list|,
name|maxLength
operator|-
name|k
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|commonPrefixLength
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|int
name|b
init|=
name|byteAt
argument_list|(
name|from
argument_list|,
name|k
operator|+
name|j
argument_list|)
decl_stmt|;
name|commonPrefix
index|[
name|j
index|]
operator|=
name|b
expr_stmt|;
if|if
condition|(
name|b
operator|==
operator|-
literal|1
condition|)
block|{
name|commonPrefixLength
operator|=
name|j
operator|+
literal|1
expr_stmt|;
break|break;
block|}
block|}
name|int
name|i
decl_stmt|;
name|outer
label|:
for|for
control|(
name|i
operator|=
name|from
operator|+
literal|1
init|;
name|i
operator|<
name|to
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|commonPrefixLength
condition|;
operator|++
name|j
control|)
block|{
specifier|final
name|int
name|b
init|=
name|byteAt
argument_list|(
name|i
argument_list|,
name|k
operator|+
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
name|commonPrefix
index|[
name|j
index|]
condition|)
block|{
name|commonPrefixLength
operator|=
name|j
expr_stmt|;
if|if
condition|(
name|commonPrefixLength
operator|==
literal|0
condition|)
block|{
comment|// we have no common prefix
name|histogram
index|[
name|commonPrefix
index|[
literal|0
index|]
operator|+
literal|1
index|]
operator|=
name|i
operator|-
name|from
expr_stmt|;
name|histogram
index|[
name|b
operator|+
literal|1
index|]
operator|=
literal|1
expr_stmt|;
break|break
name|outer
break|;
block|}
break|break;
block|}
block|}
block|}
if|if
condition|(
name|i
operator|<
name|to
condition|)
block|{
comment|// the loop got broken because there is no common prefix
assert|assert
name|commonPrefixLength
operator|==
literal|0
assert|;
name|buildHistogram
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|to
argument_list|,
name|k
argument_list|,
name|histogram
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|commonPrefixLength
operator|>
literal|0
assert|;
name|histogram
index|[
name|commonPrefix
index|[
literal|0
index|]
operator|+
literal|1
index|]
operator|=
name|to
operator|-
name|from
expr_stmt|;
block|}
return|return
name|commonPrefixLength
return|;
block|}
comment|/** Build an histogram of the k-th characters of values occurring between    *  offsets {@code from} and {@code to}, using {@link #getBucket}. */
DECL|method|buildHistogram
specifier|private
name|void
name|buildHistogram
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|k
parameter_list|,
name|int
index|[]
name|histogram
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|to
condition|;
operator|++
name|i
control|)
block|{
name|histogram
index|[
name|getBucket
argument_list|(
name|i
argument_list|,
name|k
argument_list|)
index|]
operator|++
expr_stmt|;
block|}
block|}
comment|/** Reorder elements so that all of them that fall into {@code bucket} are    *  between offsets {@code bucketFrom} and {@code bucketTo}. */
DECL|method|partition
specifier|private
name|void
name|partition
parameter_list|(
name|int
name|from
parameter_list|,
name|int
name|to
parameter_list|,
name|int
name|bucket
parameter_list|,
name|int
name|bucketFrom
parameter_list|,
name|int
name|bucketTo
parameter_list|,
name|int
name|d
parameter_list|)
block|{
name|int
name|left
init|=
name|from
decl_stmt|;
name|int
name|right
init|=
name|to
operator|-
literal|1
decl_stmt|;
name|int
name|slot
init|=
name|bucketFrom
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|leftBucket
init|=
name|getBucket
argument_list|(
name|left
argument_list|,
name|d
argument_list|)
decl_stmt|;
name|int
name|rightBucket
init|=
name|getBucket
argument_list|(
name|right
argument_list|,
name|d
argument_list|)
decl_stmt|;
while|while
condition|(
name|leftBucket
operator|<=
name|bucket
operator|&&
name|left
operator|<
name|bucketFrom
condition|)
block|{
if|if
condition|(
name|leftBucket
operator|==
name|bucket
condition|)
block|{
name|swap
argument_list|(
name|left
argument_list|,
name|slot
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|left
expr_stmt|;
block|}
name|leftBucket
operator|=
name|getBucket
argument_list|(
name|left
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|rightBucket
operator|>=
name|bucket
operator|&&
name|right
operator|>=
name|bucketTo
condition|)
block|{
if|if
condition|(
name|rightBucket
operator|==
name|bucket
condition|)
block|{
name|swap
argument_list|(
name|right
argument_list|,
name|slot
operator|++
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|--
name|right
expr_stmt|;
block|}
name|rightBucket
operator|=
name|getBucket
argument_list|(
name|right
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|left
operator|<
name|bucketFrom
operator|&&
name|right
operator|>=
name|bucketTo
condition|)
block|{
name|swap
argument_list|(
name|left
operator|++
argument_list|,
name|right
operator|--
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
name|left
operator|==
name|bucketFrom
assert|;
assert|assert
name|right
operator|==
name|bucketTo
operator|-
literal|1
assert|;
break|break;
block|}
block|}
block|}
block|}
end_class

end_unit

