begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_comment
comment|/**  * A {@code FilterWeight} contains another {@code Weight} and implements  * all abstract methods by calling the contained weight's method.  *  * Note that {@code FilterWeight} does not override the non-abstract  * {@link Weight#bulkScorer(LeafReaderContext)} method and subclasses of  * {@code FilterWeight} must provide their bulkScorer implementation  * if required.  *  * @lucene.internal  */
end_comment

begin_class
DECL|class|FilterWeight
specifier|public
specifier|abstract
class|class
name|FilterWeight
extends|extends
name|Weight
block|{
DECL|field|in
specifier|final
specifier|protected
name|Weight
name|in
decl_stmt|;
comment|/**    * Default constructor.    */
DECL|method|FilterWeight
specifier|protected
name|FilterWeight
parameter_list|(
name|Weight
name|weight
parameter_list|)
block|{
name|this
argument_list|(
name|weight
operator|.
name|getQuery
argument_list|()
argument_list|,
name|weight
argument_list|)
expr_stmt|;
block|}
comment|/**    * Alternative constructor.    * Use this variant only if the<code>weight</code> was not obtained    * via the {@link Query#createWeight(IndexSearcher, boolean, float)}    * method of the<code>query</code> object.    */
DECL|method|FilterWeight
specifier|protected
name|FilterWeight
parameter_list|(
name|Query
name|query
parameter_list|,
name|Weight
name|weight
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|in
operator|=
name|weight
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|in
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|explain
argument_list|(
name|context
argument_list|,
name|doc
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|in
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
end_class

end_unit

