begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FrequencyTrackingRingBuffer
import|;
end_import

begin_comment
comment|/**  * A {@link QueryCachingPolicy} that tracks usage statistics of recently-used  * filters in order to decide on which filters are worth caching.  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|UsageTrackingQueryCachingPolicy
specifier|public
class|class
name|UsageTrackingQueryCachingPolicy
implements|implements
name|QueryCachingPolicy
block|{
comment|// the hash code that we use as a sentinel in the ring buffer.
DECL|field|SENTINEL
specifier|private
specifier|static
specifier|final
name|int
name|SENTINEL
init|=
name|Integer
operator|.
name|MIN_VALUE
decl_stmt|;
DECL|method|isPointQuery
specifier|private
specifier|static
name|boolean
name|isPointQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
comment|// we need to check for super classes because we occasionally use anonymous
comment|// sub classes of eg. PointRangeQuery
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|query
operator|.
name|getClass
argument_list|()
init|;
name|clazz
operator|!=
name|Query
operator|.
name|class
condition|;
name|clazz
operator|=
name|clazz
operator|.
name|getSuperclass
argument_list|()
control|)
block|{
specifier|final
name|String
name|simpleName
init|=
name|clazz
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
if|if
condition|(
name|simpleName
operator|.
name|startsWith
argument_list|(
literal|"Point"
argument_list|)
operator|&&
name|simpleName
operator|.
name|endsWith
argument_list|(
literal|"Query"
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|method|isCostly
specifier|static
name|boolean
name|isCostly
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
comment|// This does not measure the cost of iterating over the filter (for this we
comment|// already have the DocIdSetIterator#cost API) but the cost to build the
comment|// DocIdSet in the first place
return|return
name|query
operator|instanceof
name|MultiTermQuery
operator|||
name|query
operator|instanceof
name|MultiTermQueryConstantScoreWrapper
operator|||
name|query
operator|instanceof
name|TermInSetQuery
operator|||
name|isPointQuery
argument_list|(
name|query
argument_list|)
return|;
block|}
DECL|method|shouldNeverCache
specifier|private
specifier|static
name|boolean
name|shouldNeverCache
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|TermQuery
condition|)
block|{
comment|// We do not bother caching term queries since they are already plenty fast.
return|return
literal|true
return|;
block|}
if|if
condition|(
name|query
operator|instanceof
name|MatchAllDocsQuery
condition|)
block|{
comment|// MatchAllDocsQuery has an iterator that is faster than what a bit set could do.
return|return
literal|true
return|;
block|}
comment|// For the below queries, it's cheap to notice they cannot match any docs so
comment|// we do not bother caching them.
if|if
condition|(
name|query
operator|instanceof
name|MatchNoDocsQuery
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|BooleanQuery
name|bq
init|=
operator|(
name|BooleanQuery
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|bq
operator|.
name|clauses
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|query
operator|instanceof
name|DisjunctionMaxQuery
condition|)
block|{
name|DisjunctionMaxQuery
name|dmq
init|=
operator|(
name|DisjunctionMaxQuery
operator|)
name|query
decl_stmt|;
if|if
condition|(
name|dmq
operator|.
name|getDisjuncts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
DECL|field|recentlyUsedFilters
specifier|private
specifier|final
name|FrequencyTrackingRingBuffer
name|recentlyUsedFilters
decl_stmt|;
comment|/**    * Expert: Create a new instance with a configurable history size. Beware of    * passing too large values for the size of the history, either    * {@link #minFrequencyToCache} returns low values and this means some filters    * that are rarely used will be cached, which would hurt performance. Or    * {@link #minFrequencyToCache} returns high values that are function of the    * size of the history but then filters will be slow to make it to the cache.    *    * @param historySize               the number of recently used filters to track    */
DECL|method|UsageTrackingQueryCachingPolicy
specifier|public
name|UsageTrackingQueryCachingPolicy
parameter_list|(
name|int
name|historySize
parameter_list|)
block|{
name|this
operator|.
name|recentlyUsedFilters
operator|=
operator|new
name|FrequencyTrackingRingBuffer
argument_list|(
name|historySize
argument_list|,
name|SENTINEL
argument_list|)
expr_stmt|;
block|}
comment|/** Create a new instance with an history size of 256. This should be a good    *  default for most cases. */
DECL|method|UsageTrackingQueryCachingPolicy
specifier|public
name|UsageTrackingQueryCachingPolicy
parameter_list|()
block|{
name|this
argument_list|(
literal|256
argument_list|)
expr_stmt|;
block|}
comment|/**    * For a given filter, return how many times it should appear in the history    * before being cached. The default implementation returns 2 for filters that    * need to evaluate against the entire index to build a {@link DocIdSetIterator},    * like {@link MultiTermQuery}, point-based queries or {@link TermInSetQuery},    * and 5 for other filters.    */
DECL|method|minFrequencyToCache
specifier|protected
name|int
name|minFrequencyToCache
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|isCostly
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return
literal|2
return|;
block|}
else|else
block|{
comment|// default: cache after the filter has been seen 5 times
name|int
name|minFrequency
init|=
literal|5
decl_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
operator|||
name|query
operator|instanceof
name|DisjunctionMaxQuery
condition|)
block|{
comment|// Say you keep reusing a boolean query that looks like "A OR B" and
comment|// never use the A and B queries out of that context. 5 times after it
comment|// has been used, we would cache both A, B and A OR B, which is
comment|// wasteful. So instead we cache compound queries a bit earlier so that
comment|// we would only cache "A OR B" in that case.
name|minFrequency
operator|--
expr_stmt|;
block|}
return|return
name|minFrequency
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|onUse
specifier|public
name|void
name|onUse
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
assert|assert
name|query
operator|instanceof
name|BoostQuery
operator|==
literal|false
assert|;
assert|assert
name|query
operator|instanceof
name|ConstantScoreQuery
operator|==
literal|false
assert|;
if|if
condition|(
name|shouldNeverCache
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// call hashCode outside of sync block
comment|// in case it's somewhat expensive:
name|int
name|hashCode
init|=
name|query
operator|.
name|hashCode
argument_list|()
decl_stmt|;
comment|// we only track hash codes to avoid holding references to possible
comment|// large queries; this may cause rare false positives, but at worse
comment|// this just means we cache a query that was not in fact used enough:
synchronized|synchronized
init|(
name|this
init|)
block|{
name|recentlyUsedFilters
operator|.
name|add
argument_list|(
name|hashCode
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|frequency
name|int
name|frequency
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
assert|assert
name|query
operator|instanceof
name|BoostQuery
operator|==
literal|false
assert|;
assert|assert
name|query
operator|instanceof
name|ConstantScoreQuery
operator|==
literal|false
assert|;
comment|// call hashCode outside of sync block
comment|// in case it's somewhat expensive:
name|int
name|hashCode
init|=
name|query
operator|.
name|hashCode
argument_list|()
decl_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
return|return
name|recentlyUsedFilters
operator|.
name|frequency
argument_list|(
name|hashCode
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|shouldCache
specifier|public
name|boolean
name|shouldCache
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|shouldNeverCache
argument_list|(
name|query
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|frequency
init|=
name|frequency
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|int
name|minFrequency
init|=
name|minFrequencyToCache
argument_list|(
name|query
argument_list|)
decl_stmt|;
return|return
name|frequency
operator|>=
name|minFrequency
return|;
block|}
block|}
end_class

end_unit

