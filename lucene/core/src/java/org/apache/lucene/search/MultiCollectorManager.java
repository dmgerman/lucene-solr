begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A {@link CollectorManager} implements which wrap a set of {@link CollectorManager}  * as {@link MultiCollector} acts for {@link Collector}.  */
end_comment

begin_class
DECL|class|MultiCollectorManager
specifier|public
class|class
name|MultiCollectorManager
implements|implements
name|CollectorManager
argument_list|<
name|MultiCollectorManager
operator|.
name|Collectors
argument_list|,
name|Object
index|[]
argument_list|>
block|{
DECL|field|collectorManagers
specifier|final
specifier|private
name|CollectorManager
argument_list|<
name|Collector
argument_list|,
name|?
argument_list|>
index|[]
name|collectorManagers
decl_stmt|;
DECL|method|MultiCollectorManager
specifier|public
name|MultiCollectorManager
parameter_list|(
specifier|final
name|CollectorManager
modifier|...
name|collectorManagers
parameter_list|)
block|{
name|this
operator|.
name|collectorManagers
operator|=
name|collectorManagers
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|newCollector
specifier|public
name|Collectors
name|newCollector
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|Collectors
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|reduce
specifier|public
name|Object
index|[]
name|reduce
parameter_list|(
name|Collection
argument_list|<
name|Collectors
argument_list|>
name|reducableCollectors
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|size
init|=
name|reducableCollectors
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|Object
index|[]
name|results
init|=
operator|new
name|Object
index|[
name|collectorManagers
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectorManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|List
argument_list|<
name|Collector
argument_list|>
name|reducableCollector
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|Collectors
name|collectors
range|:
name|reducableCollectors
control|)
name|reducableCollector
operator|.
name|add
argument_list|(
name|collectors
operator|.
name|collectors
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|results
index|[
name|i
index|]
operator|=
name|collectorManagers
index|[
name|i
index|]
operator|.
name|reduce
argument_list|(
name|reducableCollector
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
DECL|class|Collectors
specifier|public
class|class
name|Collectors
implements|implements
name|Collector
block|{
DECL|field|collectors
specifier|private
specifier|final
name|Collector
index|[]
name|collectors
decl_stmt|;
DECL|method|Collectors
specifier|private
name|Collectors
parameter_list|()
throws|throws
name|IOException
block|{
name|collectors
operator|=
operator|new
name|Collector
index|[
name|collectorManagers
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|collectors
index|[
name|i
index|]
operator|=
name|collectorManagers
index|[
name|i
index|]
operator|.
name|newCollector
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getLeafCollector
specifier|final
specifier|public
name|LeafCollector
name|getLeafCollector
parameter_list|(
specifier|final
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|LeafCollectors
argument_list|(
name|context
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|needsScores
specifier|final
specifier|public
name|boolean
name|needsScores
parameter_list|()
block|{
for|for
control|(
name|Collector
name|collector
range|:
name|collectors
control|)
if|if
condition|(
name|collector
operator|.
name|needsScores
argument_list|()
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
DECL|class|LeafCollectors
specifier|public
class|class
name|LeafCollectors
implements|implements
name|LeafCollector
block|{
DECL|field|leafCollectors
specifier|private
specifier|final
name|LeafCollector
index|[]
name|leafCollectors
decl_stmt|;
DECL|method|LeafCollectors
specifier|private
name|LeafCollectors
parameter_list|(
specifier|final
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|leafCollectors
operator|=
operator|new
name|LeafCollector
index|[
name|collectors
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectors
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|leafCollectors
index|[
name|i
index|]
operator|=
name|collectors
index|[
name|i
index|]
operator|.
name|getLeafCollector
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setScorer
specifier|final
specifier|public
name|void
name|setScorer
parameter_list|(
specifier|final
name|Scorer
name|scorer
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafCollector
name|leafCollector
range|:
name|leafCollectors
control|)
if|if
condition|(
name|leafCollector
operator|!=
literal|null
condition|)
name|leafCollector
operator|.
name|setScorer
argument_list|(
name|scorer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|final
specifier|public
name|void
name|collect
parameter_list|(
specifier|final
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|LeafCollector
name|leafCollector
range|:
name|leafCollectors
control|)
if|if
condition|(
name|leafCollector
operator|!=
literal|null
condition|)
name|leafCollector
operator|.
name|collect
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

