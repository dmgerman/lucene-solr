begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
operator|.
name|Spans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|ArrayUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|CollectionUtil
import|;
end_import

begin_comment
comment|/** A conjunction of DocIdSetIterators.  * This iterates over the doc ids that are present in each given DocIdSetIterator.  *<br>Public only for use in {@link org.apache.lucene.search.spans}.  * @lucene.internal  */
end_comment

begin_class
DECL|class|ConjunctionDISI
specifier|public
specifier|final
class|class
name|ConjunctionDISI
extends|extends
name|DocIdSetIterator
block|{
comment|/** Create a conjunction over the provided {@link Scorer}s. Note that the    * returned {@link DocIdSetIterator} might leverage two-phase iteration in    * which case it is possible to retrieve the {@link TwoPhaseIterator} using    * {@link TwoPhaseIterator#unwrap}. */
DECL|method|intersectScorers
specifier|public
specifier|static
name|DocIdSetIterator
name|intersectScorers
parameter_list|(
name|Collection
argument_list|<
name|Scorer
argument_list|>
name|scorers
parameter_list|)
block|{
if|if
condition|(
name|scorers
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot make a ConjunctionDISI of less than 2 iterators"
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Scorer
name|scorer
range|:
name|scorers
control|)
block|{
name|addScorer
argument_list|(
name|scorer
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
return|return
name|createConjunction
argument_list|(
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
return|;
block|}
comment|/** Create a conjunction over the provided DocIdSetIterators. Note that the    * returned {@link DocIdSetIterator} might leverage two-phase iteration in    * which case it is possible to retrieve the {@link TwoPhaseIterator} using    * {@link TwoPhaseIterator#unwrap}. */
DECL|method|intersectIterators
specifier|public
specifier|static
name|DocIdSetIterator
name|intersectIterators
parameter_list|(
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|iterators
parameter_list|)
block|{
if|if
condition|(
name|iterators
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot make a ConjunctionDISI of less than 2 iterators"
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocIdSetIterator
name|iterator
range|:
name|iterators
control|)
block|{
name|addIterator
argument_list|(
name|iterator
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
return|return
name|createConjunction
argument_list|(
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
return|;
block|}
comment|/** Create a conjunction over the provided {@link Spans}. Note that the    * returned {@link DocIdSetIterator} might leverage two-phase iteration in    * which case it is possible to retrieve the {@link TwoPhaseIterator} using    * {@link TwoPhaseIterator#unwrap}. */
DECL|method|intersectSpans
specifier|public
specifier|static
name|DocIdSetIterator
name|intersectSpans
parameter_list|(
name|List
argument_list|<
name|Spans
argument_list|>
name|spanList
parameter_list|)
block|{
if|if
condition|(
name|spanList
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Cannot make a ConjunctionDISI of less than 2 iterators"
argument_list|)
throw|;
block|}
specifier|final
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Spans
name|spans
range|:
name|spanList
control|)
block|{
name|addSpans
argument_list|(
name|spans
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
return|return
name|createConjunction
argument_list|(
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
return|;
block|}
comment|/** Adds the scorer, possibly splitting up into two phases or collapsing if it is another conjunction */
DECL|method|addScorer
specifier|private
specifier|static
name|void
name|addScorer
parameter_list|(
name|Scorer
name|scorer
parameter_list|,
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
parameter_list|,
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
parameter_list|)
block|{
name|TwoPhaseIterator
name|twoPhaseIter
init|=
name|scorer
operator|.
name|twoPhaseIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|twoPhaseIter
operator|!=
literal|null
condition|)
block|{
name|addTwoPhaseIterator
argument_list|(
name|twoPhaseIter
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no approximation support, use the iterator as-is
name|addIterator
argument_list|(
name|scorer
operator|.
name|iterator
argument_list|()
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Adds the Spans. */
DECL|method|addSpans
specifier|private
specifier|static
name|void
name|addSpans
parameter_list|(
name|Spans
name|spans
parameter_list|,
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
parameter_list|,
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
parameter_list|)
block|{
name|TwoPhaseIterator
name|twoPhaseIter
init|=
name|spans
operator|.
name|asTwoPhaseIterator
argument_list|()
decl_stmt|;
if|if
condition|(
name|twoPhaseIter
operator|!=
literal|null
condition|)
block|{
name|addTwoPhaseIterator
argument_list|(
name|twoPhaseIter
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no approximation support, use the iterator as-is
name|addIterator
argument_list|(
name|spans
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addIterator
specifier|private
specifier|static
name|void
name|addIterator
parameter_list|(
name|DocIdSetIterator
name|disi
parameter_list|,
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
parameter_list|,
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
parameter_list|)
block|{
name|TwoPhaseIterator
name|twoPhase
init|=
name|TwoPhaseIterator
operator|.
name|unwrap
argument_list|(
name|disi
argument_list|)
decl_stmt|;
if|if
condition|(
name|twoPhase
operator|!=
literal|null
condition|)
block|{
name|addTwoPhaseIterator
argument_list|(
name|twoPhase
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|disi
operator|.
name|getClass
argument_list|()
operator|==
name|ConjunctionDISI
operator|.
name|class
condition|)
block|{
comment|// Check for exactly this class for collapsing
name|ConjunctionDISI
name|conjunction
init|=
operator|(
name|ConjunctionDISI
operator|)
name|disi
decl_stmt|;
comment|// subconjuctions have already split themselves into two phase iterators and others, so we can take those
comment|// iterators as they are and move them up to this conjunction
name|allIterators
operator|.
name|add
argument_list|(
name|conjunction
operator|.
name|lead1
argument_list|)
expr_stmt|;
name|allIterators
operator|.
name|add
argument_list|(
name|conjunction
operator|.
name|lead2
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|allIterators
argument_list|,
name|conjunction
operator|.
name|others
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|disi
operator|.
name|getClass
argument_list|()
operator|==
name|BitSetConjunctionDISI
operator|.
name|class
condition|)
block|{
name|BitSetConjunctionDISI
name|conjunction
init|=
operator|(
name|BitSetConjunctionDISI
operator|)
name|disi
decl_stmt|;
name|allIterators
operator|.
name|add
argument_list|(
name|conjunction
operator|.
name|lead
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|allIterators
argument_list|,
name|conjunction
operator|.
name|bitSetIterators
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|allIterators
operator|.
name|add
argument_list|(
name|disi
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|addTwoPhaseIterator
specifier|private
specifier|static
name|void
name|addTwoPhaseIterator
parameter_list|(
name|TwoPhaseIterator
name|twoPhaseIter
parameter_list|,
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
parameter_list|,
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
parameter_list|)
block|{
name|addIterator
argument_list|(
name|twoPhaseIter
operator|.
name|approximation
argument_list|()
argument_list|,
name|allIterators
argument_list|,
name|twoPhaseIterators
argument_list|)
expr_stmt|;
if|if
condition|(
name|twoPhaseIter
operator|.
name|getClass
argument_list|()
operator|==
name|ConjunctionTwoPhaseIterator
operator|.
name|class
condition|)
block|{
comment|// Check for exactly this class for collapsing
name|Collections
operator|.
name|addAll
argument_list|(
name|twoPhaseIterators
argument_list|,
operator|(
operator|(
name|ConjunctionTwoPhaseIterator
operator|)
name|twoPhaseIter
operator|)
operator|.
name|twoPhaseIterators
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|twoPhaseIterators
operator|.
name|add
argument_list|(
name|twoPhaseIter
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|createConjunction
specifier|private
specifier|static
name|DocIdSetIterator
name|createConjunction
parameter_list|(
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|allIterators
parameter_list|,
name|List
argument_list|<
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
parameter_list|)
block|{
name|long
name|minCost
init|=
name|allIterators
operator|.
name|stream
argument_list|()
operator|.
name|mapToLong
argument_list|(
name|DocIdSetIterator
operator|::
name|cost
argument_list|)
operator|.
name|min
argument_list|()
operator|.
name|getAsLong
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BitSetIterator
argument_list|>
name|bitSetIterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DocIdSetIterator
argument_list|>
name|iterators
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|DocIdSetIterator
name|iterator
range|:
name|allIterators
control|)
block|{
if|if
condition|(
name|iterator
operator|.
name|cost
argument_list|()
operator|>
name|minCost
operator|&&
name|iterator
operator|instanceof
name|BitSetIterator
condition|)
block|{
comment|// we put all bitset iterators into bitSetIterators
comment|// except if they have the minimum cost, since we need
comment|// them to lead the iteration in that case
name|bitSetIterators
operator|.
name|add
argument_list|(
operator|(
name|BitSetIterator
operator|)
name|iterator
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|iterators
operator|.
name|add
argument_list|(
name|iterator
argument_list|)
expr_stmt|;
block|}
block|}
name|DocIdSetIterator
name|disi
decl_stmt|;
if|if
condition|(
name|iterators
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|disi
operator|=
name|iterators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|disi
operator|=
operator|new
name|ConjunctionDISI
argument_list|(
name|iterators
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bitSetIterators
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|disi
operator|=
operator|new
name|BitSetConjunctionDISI
argument_list|(
name|disi
argument_list|,
name|bitSetIterators
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|twoPhaseIterators
operator|.
name|isEmpty
argument_list|()
operator|==
literal|false
condition|)
block|{
name|disi
operator|=
name|TwoPhaseIterator
operator|.
name|asDocIdSetIterator
argument_list|(
operator|new
name|ConjunctionTwoPhaseIterator
argument_list|(
name|disi
argument_list|,
name|twoPhaseIterators
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|disi
return|;
block|}
DECL|field|lead1
DECL|field|lead2
specifier|final
name|DocIdSetIterator
name|lead1
decl_stmt|,
name|lead2
decl_stmt|;
DECL|field|others
specifier|final
name|DocIdSetIterator
index|[]
name|others
decl_stmt|;
DECL|method|ConjunctionDISI
specifier|private
name|ConjunctionDISI
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|DocIdSetIterator
argument_list|>
name|iterators
parameter_list|)
block|{
assert|assert
name|iterators
operator|.
name|size
argument_list|()
operator|>=
literal|2
assert|;
comment|// Sort the array the first time to allow the least frequent DocsEnum to
comment|// lead the matching.
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|iterators
argument_list|,
operator|new
name|Comparator
argument_list|<
name|DocIdSetIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|DocIdSetIterator
name|o1
parameter_list|,
name|DocIdSetIterator
name|o2
parameter_list|)
block|{
return|return
name|Long
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|cost
argument_list|()
argument_list|,
name|o2
operator|.
name|cost
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|lead1
operator|=
name|iterators
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|lead2
operator|=
name|iterators
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|others
operator|=
name|iterators
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
name|iterators
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|toArray
argument_list|(
operator|new
name|DocIdSetIterator
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
DECL|method|doNext
specifier|private
name|int
name|doNext
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|advanceHead
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
assert|assert
name|doc
operator|==
name|lead1
operator|.
name|docID
argument_list|()
assert|;
comment|// find agreement between the two iterators with the lower costs
comment|// we special case them because they do not need the
comment|// 'other.docID()< doc' check that the 'others' iterators need
specifier|final
name|int
name|next2
init|=
name|lead2
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|next2
operator|!=
name|doc
condition|)
block|{
name|doc
operator|=
name|lead1
operator|.
name|advance
argument_list|(
name|next2
argument_list|)
expr_stmt|;
if|if
condition|(
name|next2
operator|!=
name|doc
condition|)
block|{
continue|continue;
block|}
block|}
comment|// then find agreement with other iterators
for|for
control|(
name|DocIdSetIterator
name|other
range|:
name|others
control|)
block|{
comment|// other.doc may already be equal to doc if we "continued advanceHead"
comment|// on the previous iteration and the advance on the lead scorer exactly matched.
if|if
condition|(
name|other
operator|.
name|docID
argument_list|()
operator|<
name|doc
condition|)
block|{
specifier|final
name|int
name|next
init|=
name|other
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|next
operator|>
name|doc
condition|)
block|{
comment|// iterator beyond the current doc - advance lead and continue to the new highest doc.
name|doc
operator|=
name|lead1
operator|.
name|advance
argument_list|(
name|next
argument_list|)
expr_stmt|;
continue|continue
name|advanceHead
continue|;
block|}
block|}
block|}
comment|// success - all iterators are on the same doc
return|return
name|doc
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|lead1
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|lead1
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|lead1
operator|.
name|nextDoc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|lead1
operator|.
name|cost
argument_list|()
return|;
comment|// overestimate
block|}
comment|/** Conjunction between a {@link DocIdSetIterator} and one or more {@link BitSetIterator}s. */
DECL|class|BitSetConjunctionDISI
specifier|private
specifier|static
class|class
name|BitSetConjunctionDISI
extends|extends
name|DocIdSetIterator
block|{
DECL|field|lead
specifier|private
specifier|final
name|DocIdSetIterator
name|lead
decl_stmt|;
DECL|field|bitSetIterators
specifier|private
specifier|final
name|BitSetIterator
index|[]
name|bitSetIterators
decl_stmt|;
DECL|field|bitSets
specifier|private
specifier|final
name|BitSet
index|[]
name|bitSets
decl_stmt|;
DECL|field|minLength
specifier|private
specifier|final
name|int
name|minLength
decl_stmt|;
DECL|method|BitSetConjunctionDISI
name|BitSetConjunctionDISI
parameter_list|(
name|DocIdSetIterator
name|lead
parameter_list|,
name|Collection
argument_list|<
name|BitSetIterator
argument_list|>
name|bitSetIterators
parameter_list|)
block|{
name|this
operator|.
name|lead
operator|=
name|lead
expr_stmt|;
assert|assert
name|bitSetIterators
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
name|this
operator|.
name|bitSetIterators
operator|=
name|bitSetIterators
operator|.
name|toArray
argument_list|(
operator|new
name|BitSetIterator
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Put the least costly iterators first so that we exit as soon as possible
name|ArrayUtil
operator|.
name|timSort
argument_list|(
name|this
operator|.
name|bitSetIterators
argument_list|,
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
lambda|->
name|Long
operator|.
name|compare
argument_list|(
name|a
operator|.
name|cost
argument_list|()
argument_list|,
name|b
operator|.
name|cost
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|bitSets
operator|=
operator|new
name|BitSet
index|[
name|this
operator|.
name|bitSetIterators
operator|.
name|length
index|]
expr_stmt|;
name|int
name|minLen
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|bitSetIterators
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|BitSet
name|bitSet
init|=
name|this
operator|.
name|bitSetIterators
index|[
name|i
index|]
operator|.
name|getBitSet
argument_list|()
decl_stmt|;
name|this
operator|.
name|bitSets
index|[
name|i
index|]
operator|=
name|bitSet
expr_stmt|;
name|minLen
operator|=
name|Math
operator|.
name|min
argument_list|(
name|minLen
argument_list|,
name|bitSet
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|minLength
operator|=
name|minLen
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|lead
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|lead
operator|.
name|nextDoc
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|doNext
argument_list|(
name|lead
operator|.
name|advance
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
DECL|method|doNext
specifier|private
name|int
name|doNext
parameter_list|(
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|advanceLead
label|:
for|for
control|(
init|;
condition|;
name|doc
operator|=
name|lead
operator|.
name|nextDoc
argument_list|()
control|)
block|{
if|if
condition|(
name|doc
operator|>=
name|minLength
condition|)
block|{
return|return
name|NO_MORE_DOCS
return|;
block|}
for|for
control|(
name|BitSet
name|bitSet
range|:
name|bitSets
control|)
block|{
if|if
condition|(
name|bitSet
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|==
literal|false
condition|)
block|{
continue|continue
name|advanceLead
continue|;
block|}
block|}
for|for
control|(
name|BitSetIterator
name|iterator
range|:
name|bitSetIterators
control|)
block|{
name|iterator
operator|.
name|setDocId
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
return|return
name|doc
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|lead
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
comment|/**    * {@link TwoPhaseIterator} implementing a conjunction.    */
DECL|class|ConjunctionTwoPhaseIterator
specifier|private
specifier|static
specifier|final
class|class
name|ConjunctionTwoPhaseIterator
extends|extends
name|TwoPhaseIterator
block|{
DECL|field|twoPhaseIterators
specifier|private
specifier|final
name|TwoPhaseIterator
index|[]
name|twoPhaseIterators
decl_stmt|;
DECL|field|matchCost
specifier|private
specifier|final
name|float
name|matchCost
decl_stmt|;
DECL|method|ConjunctionTwoPhaseIterator
specifier|private
name|ConjunctionTwoPhaseIterator
parameter_list|(
name|DocIdSetIterator
name|approximation
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|TwoPhaseIterator
argument_list|>
name|twoPhaseIterators
parameter_list|)
block|{
name|super
argument_list|(
name|approximation
argument_list|)
expr_stmt|;
assert|assert
name|twoPhaseIterators
operator|.
name|size
argument_list|()
operator|>
literal|0
assert|;
name|CollectionUtil
operator|.
name|timSort
argument_list|(
name|twoPhaseIterators
argument_list|,
operator|new
name|Comparator
argument_list|<
name|TwoPhaseIterator
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
name|TwoPhaseIterator
name|o1
parameter_list|,
name|TwoPhaseIterator
name|o2
parameter_list|)
block|{
return|return
name|Float
operator|.
name|compare
argument_list|(
name|o1
operator|.
name|matchCost
argument_list|()
argument_list|,
name|o2
operator|.
name|matchCost
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|twoPhaseIterators
operator|=
name|twoPhaseIterators
operator|.
name|toArray
argument_list|(
operator|new
name|TwoPhaseIterator
index|[
name|twoPhaseIterators
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
comment|// Compute the matchCost as the total matchCost of the sub iterators.
comment|// TODO: This could be too high because the matching is done cheapest first: give the lower matchCosts a higher weight.
name|float
name|totalMatchCost
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TwoPhaseIterator
name|tpi
range|:
name|twoPhaseIterators
control|)
block|{
name|totalMatchCost
operator|+=
name|tpi
operator|.
name|matchCost
argument_list|()
expr_stmt|;
block|}
name|matchCost
operator|=
name|totalMatchCost
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|matches
specifier|public
name|boolean
name|matches
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|TwoPhaseIterator
name|twoPhaseIterator
range|:
name|twoPhaseIterators
control|)
block|{
comment|// match cheapest first
if|if
condition|(
name|twoPhaseIterator
operator|.
name|matches
argument_list|()
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|matchCost
specifier|public
name|float
name|matchCost
parameter_list|()
block|{
return|return
name|matchCost
return|;
block|}
block|}
block|}
end_class

end_unit

