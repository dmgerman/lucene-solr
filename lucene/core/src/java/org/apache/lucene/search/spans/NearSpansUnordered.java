begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.spans
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|spans
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|PriorityQueue
import|;
end_import

begin_comment
comment|/**  * Similar to {@link NearSpansOrdered}, but for the unordered case.  *  * Expert:  * Only public for subclassing.  Most implementations should not need this class  */
end_comment

begin_class
DECL|class|NearSpansUnordered
specifier|public
class|class
name|NearSpansUnordered
extends|extends
name|ConjunctionSpans
block|{
DECL|field|allowedSlop
specifier|private
specifier|final
name|int
name|allowedSlop
decl_stmt|;
DECL|field|spanWindow
specifier|private
name|SpanTotalLengthEndPositionWindow
name|spanWindow
decl_stmt|;
DECL|method|NearSpansUnordered
specifier|public
name|NearSpansUnordered
parameter_list|(
name|int
name|allowedSlop
parameter_list|,
name|List
argument_list|<
name|Spans
argument_list|>
name|subSpans
parameter_list|)
throws|throws
name|IOException
block|{
name|super
argument_list|(
name|subSpans
argument_list|)
expr_stmt|;
name|this
operator|.
name|allowedSlop
operator|=
name|allowedSlop
expr_stmt|;
name|this
operator|.
name|spanWindow
operator|=
operator|new
name|SpanTotalLengthEndPositionWindow
argument_list|()
expr_stmt|;
block|}
comment|/** Maintain totalSpanLength and maxEndPosition */
DECL|class|SpanTotalLengthEndPositionWindow
specifier|private
class|class
name|SpanTotalLengthEndPositionWindow
extends|extends
name|PriorityQueue
argument_list|<
name|Spans
argument_list|>
block|{
DECL|field|totalSpanLength
name|int
name|totalSpanLength
decl_stmt|;
DECL|field|maxEndPosition
name|int
name|maxEndPosition
decl_stmt|;
DECL|method|SpanTotalLengthEndPositionWindow
specifier|public
name|SpanTotalLengthEndPositionWindow
parameter_list|()
block|{
name|super
argument_list|(
name|subSpans
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|lessThan
specifier|protected
specifier|final
name|boolean
name|lessThan
parameter_list|(
name|Spans
name|spans1
parameter_list|,
name|Spans
name|spans2
parameter_list|)
block|{
return|return
name|positionsOrdered
argument_list|(
name|spans1
argument_list|,
name|spans2
argument_list|)
return|;
block|}
DECL|method|startDocument
name|void
name|startDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|clear
argument_list|()
expr_stmt|;
name|totalSpanLength
operator|=
literal|0
expr_stmt|;
name|maxEndPosition
operator|=
operator|-
literal|1
expr_stmt|;
for|for
control|(
name|Spans
name|spans
range|:
name|subSpans
control|)
block|{
assert|assert
name|spans
operator|.
name|startPosition
argument_list|()
operator|==
operator|-
literal|1
assert|;
name|spans
operator|.
name|nextStartPosition
argument_list|()
expr_stmt|;
assert|assert
name|spans
operator|.
name|startPosition
argument_list|()
operator|!=
name|NO_MORE_POSITIONS
assert|;
name|add
argument_list|(
name|spans
argument_list|)
expr_stmt|;
if|if
condition|(
name|spans
operator|.
name|endPosition
argument_list|()
operator|>
name|maxEndPosition
condition|)
block|{
name|maxEndPosition
operator|=
name|spans
operator|.
name|endPosition
argument_list|()
expr_stmt|;
block|}
name|int
name|spanLength
init|=
name|spans
operator|.
name|endPosition
argument_list|()
operator|-
name|spans
operator|.
name|startPosition
argument_list|()
decl_stmt|;
assert|assert
name|spanLength
operator|>=
literal|0
assert|;
name|totalSpanLength
operator|+=
name|spanLength
expr_stmt|;
block|}
block|}
DECL|method|nextPosition
name|boolean
name|nextPosition
parameter_list|()
throws|throws
name|IOException
block|{
name|Spans
name|topSpans
init|=
name|top
argument_list|()
decl_stmt|;
assert|assert
name|topSpans
operator|.
name|startPosition
argument_list|()
operator|!=
name|NO_MORE_POSITIONS
assert|;
name|int
name|spanLength
init|=
name|topSpans
operator|.
name|endPosition
argument_list|()
operator|-
name|topSpans
operator|.
name|startPosition
argument_list|()
decl_stmt|;
name|int
name|nextStartPos
init|=
name|topSpans
operator|.
name|nextStartPosition
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextStartPos
operator|==
name|NO_MORE_POSITIONS
condition|)
block|{
return|return
literal|false
return|;
block|}
name|totalSpanLength
operator|-=
name|spanLength
expr_stmt|;
name|spanLength
operator|=
name|topSpans
operator|.
name|endPosition
argument_list|()
operator|-
name|topSpans
operator|.
name|startPosition
argument_list|()
expr_stmt|;
name|totalSpanLength
operator|+=
name|spanLength
expr_stmt|;
if|if
condition|(
name|topSpans
operator|.
name|endPosition
argument_list|()
operator|>
name|maxEndPosition
condition|)
block|{
name|maxEndPosition
operator|=
name|topSpans
operator|.
name|endPosition
argument_list|()
expr_stmt|;
block|}
name|updateTop
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|method|atMatch
name|boolean
name|atMatch
parameter_list|()
block|{
name|boolean
name|res
init|=
operator|(
name|maxEndPosition
operator|-
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
operator|-
name|totalSpanLength
operator|)
operator|<=
name|allowedSlop
decl_stmt|;
return|return
name|res
return|;
block|}
block|}
comment|/** Check whether two Spans in the same document are ordered with possible overlap.    * @return true iff spans1 starts before spans2    *              or the spans start at the same position,    *              and spans1 ends before spans2.    */
DECL|method|positionsOrdered
specifier|static
name|boolean
name|positionsOrdered
parameter_list|(
name|Spans
name|spans1
parameter_list|,
name|Spans
name|spans2
parameter_list|)
block|{
assert|assert
name|spans1
operator|.
name|docID
argument_list|()
operator|==
name|spans2
operator|.
name|docID
argument_list|()
operator|:
literal|"doc1 "
operator|+
name|spans1
operator|.
name|docID
argument_list|()
operator|+
literal|" != doc2 "
operator|+
name|spans2
operator|.
name|docID
argument_list|()
assert|;
name|int
name|start1
init|=
name|spans1
operator|.
name|startPosition
argument_list|()
decl_stmt|;
name|int
name|start2
init|=
name|spans2
operator|.
name|startPosition
argument_list|()
decl_stmt|;
return|return
operator|(
name|start1
operator|==
name|start2
operator|)
condition|?
operator|(
name|spans1
operator|.
name|endPosition
argument_list|()
operator|<
name|spans2
operator|.
name|endPosition
argument_list|()
operator|)
else|:
operator|(
name|start1
operator|<
name|start2
operator|)
return|;
block|}
annotation|@
name|Override
DECL|method|twoPhaseCurrentDocMatches
name|boolean
name|twoPhaseCurrentDocMatches
parameter_list|()
throws|throws
name|IOException
block|{
comment|// at doc with all subSpans
name|spanWindow
operator|.
name|startDocument
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|spanWindow
operator|.
name|atMatch
argument_list|()
condition|)
block|{
name|atFirstInCurrentDoc
operator|=
literal|true
expr_stmt|;
name|oneExhaustedInCurrentDoc
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|spanWindow
operator|.
name|nextPosition
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|nextStartPosition
specifier|public
name|int
name|nextStartPosition
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|atFirstInCurrentDoc
condition|)
block|{
name|atFirstInCurrentDoc
operator|=
literal|false
expr_stmt|;
return|return
name|spanWindow
operator|.
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
return|;
block|}
assert|assert
name|spanWindow
operator|.
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
operator|!=
operator|-
literal|1
assert|;
assert|assert
name|spanWindow
operator|.
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
operator|!=
name|NO_MORE_POSITIONS
assert|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|!
name|spanWindow
operator|.
name|nextPosition
argument_list|()
condition|)
block|{
name|oneExhaustedInCurrentDoc
operator|=
literal|true
expr_stmt|;
return|return
name|NO_MORE_POSITIONS
return|;
block|}
if|if
condition|(
name|spanWindow
operator|.
name|atMatch
argument_list|()
condition|)
block|{
return|return
name|spanWindow
operator|.
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|startPosition
specifier|public
name|int
name|startPosition
parameter_list|()
block|{
assert|assert
name|spanWindow
operator|.
name|top
argument_list|()
operator|!=
literal|null
assert|;
return|return
name|atFirstInCurrentDoc
condition|?
operator|-
literal|1
else|:
name|oneExhaustedInCurrentDoc
condition|?
name|NO_MORE_POSITIONS
else|:
name|spanWindow
operator|.
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|endPosition
specifier|public
name|int
name|endPosition
parameter_list|()
block|{
return|return
name|atFirstInCurrentDoc
condition|?
operator|-
literal|1
else|:
name|oneExhaustedInCurrentDoc
condition|?
name|NO_MORE_POSITIONS
else|:
name|spanWindow
operator|.
name|maxEndPosition
return|;
block|}
annotation|@
name|Override
DECL|method|width
specifier|public
name|int
name|width
parameter_list|()
block|{
return|return
name|spanWindow
operator|.
name|maxEndPosition
operator|-
name|spanWindow
operator|.
name|top
argument_list|()
operator|.
name|startPosition
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|collect
specifier|public
name|void
name|collect
parameter_list|(
name|SpanCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|Spans
name|spans
range|:
name|subSpans
control|)
block|{
name|spans
operator|.
name|collect
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

