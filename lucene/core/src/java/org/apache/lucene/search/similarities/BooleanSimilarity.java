begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInvertState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|CollectionStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * Simple similarity that gives terms a score that is equal to their query  * boost. This similarity is typically used with disabled norms since neither  * document statistics nor index statistics are used for scoring. That said,  * if norms are enabled, they will be computed the same way as  * {@link SimilarityBase} and {@link BM25Similarity} with  * {@link SimilarityBase#setDiscountOverlaps(boolean) discounted overlaps}  * so that the {@link Similarity} can be changed after the index has been  * created.  */
end_comment

begin_class
DECL|class|BooleanSimilarity
specifier|public
class|class
name|BooleanSimilarity
extends|extends
name|Similarity
block|{
DECL|field|BM25_SIM
specifier|private
specifier|static
specifier|final
name|Similarity
name|BM25_SIM
init|=
operator|new
name|BM25Similarity
argument_list|()
decl_stmt|;
comment|/** Sole constructor */
DECL|method|BooleanSimilarity
specifier|public
name|BooleanSimilarity
parameter_list|()
block|{}
annotation|@
name|Override
DECL|method|computeNorm
specifier|public
name|long
name|computeNorm
parameter_list|(
name|FieldInvertState
name|state
parameter_list|)
block|{
return|return
name|BM25_SIM
operator|.
name|computeNorm
argument_list|(
name|state
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|computeWeight
specifier|public
name|SimWeight
name|computeWeight
parameter_list|(
name|float
name|boost
parameter_list|,
name|CollectionStatistics
name|collectionStats
parameter_list|,
name|TermStatistics
modifier|...
name|termStats
parameter_list|)
block|{
return|return
operator|new
name|BooleanWeight
argument_list|(
name|boost
argument_list|)
return|;
block|}
DECL|class|BooleanWeight
specifier|private
specifier|static
class|class
name|BooleanWeight
extends|extends
name|SimWeight
block|{
DECL|field|boost
specifier|final
name|float
name|boost
decl_stmt|;
DECL|method|BooleanWeight
name|BooleanWeight
parameter_list|(
name|float
name|boost
parameter_list|)
block|{
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|simScorer
specifier|public
name|SimScorer
name|simScorer
parameter_list|(
name|SimWeight
name|weight
parameter_list|,
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|float
name|boost
init|=
operator|(
operator|(
name|BooleanWeight
operator|)
name|weight
operator|)
operator|.
name|boost
decl_stmt|;
return|return
operator|new
name|SimScorer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|(
name|int
name|doc
parameter_list|,
name|float
name|freq
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|boost
return|;
block|}
annotation|@
name|Override
specifier|public
name|Explanation
name|explain
parameter_list|(
name|int
name|doc
parameter_list|,
name|Explanation
name|freq
parameter_list|)
throws|throws
name|IOException
block|{
name|Explanation
name|queryBoostExpl
init|=
name|Explanation
operator|.
name|match
argument_list|(
name|boost
argument_list|,
literal|"query boost"
argument_list|)
decl_stmt|;
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|queryBoostExpl
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"score("
operator|+
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|", doc="
operator|+
name|doc
operator|+
literal|"), computed from:"
argument_list|,
name|queryBoostExpl
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|computeSlopFactor
parameter_list|(
name|int
name|distance
parameter_list|)
block|{
return|return
literal|1f
return|;
block|}
annotation|@
name|Override
specifier|public
name|float
name|computePayloadFactor
parameter_list|(
name|int
name|doc
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|BytesRef
name|payload
parameter_list|)
block|{
return|return
literal|1f
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

