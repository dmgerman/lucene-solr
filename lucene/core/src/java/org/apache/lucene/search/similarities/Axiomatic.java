begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search.similarities
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|similarities
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_comment
comment|/**  * Axiomatic approaches for IR. From Hui Fang and Chengxiang Zhai  * 2005. An Exploration of Axiomatic Approaches to Information Retrieval.  * In Proceedings of the 28th annual international ACM SIGIR  * conference on Research and development in information retrieval  * (SIGIR '05). ACM, New York, NY, USA, 480-487.  *<p>  * There are a family of models. All of them are based on BM25,  * Pivoted Document Length Normalization and Language model with  * Dirichlet prior. Some components (e.g. Term Frequency,  * Inverted Document Frequency) in the original models are modified  * so that they follow some axiomatic constraints.  *</p>  *  * @lucene.experimental  */
end_comment

begin_class
DECL|class|Axiomatic
specifier|public
specifier|abstract
class|class
name|Axiomatic
extends|extends
name|SimilarityBase
block|{
comment|/**    * hyperparam for the growth function    */
DECL|field|s
specifier|protected
specifier|final
name|float
name|s
decl_stmt|;
comment|/**    * hyperparam for the primitive weighthing function    */
DECL|field|k
specifier|protected
specifier|final
name|float
name|k
decl_stmt|;
comment|/**    * the query length    */
DECL|field|queryLen
specifier|protected
specifier|final
name|int
name|queryLen
decl_stmt|;
comment|/**    * Constructor setting all Axiomatic hyperparameters    * @param s hyperparam for the growth function    * @param queryLen the query length    * @param k hyperparam for the primitive weighting function    */
DECL|method|Axiomatic
specifier|public
name|Axiomatic
parameter_list|(
name|float
name|s
parameter_list|,
name|int
name|queryLen
parameter_list|,
name|float
name|k
parameter_list|)
block|{
if|if
condition|(
name|Float
operator|.
name|isFinite
argument_list|(
name|s
argument_list|)
operator|==
literal|false
operator|||
name|Float
operator|.
name|isNaN
argument_list|(
name|s
argument_list|)
operator|||
name|s
argument_list|<
literal|0
operator|||
name|s
argument_list|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal s value: "
operator|+
name|s
operator|+
literal|", must be between 0 and 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Float
operator|.
name|isFinite
argument_list|(
name|k
argument_list|)
operator|==
literal|false
operator|||
name|Float
operator|.
name|isNaN
argument_list|(
name|k
argument_list|)
operator|||
name|k
argument_list|<
literal|0
operator|||
name|k
argument_list|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal k value: "
operator|+
name|k
operator|+
literal|", must be between 0 and 1"
argument_list|)
throw|;
block|}
if|if
condition|(
name|queryLen
argument_list|<
literal|0
operator|||
name|queryLen
argument_list|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"illegal query length value: "
operator|+
name|queryLen
operator|+
literal|", must be larger 0 and smaller than MAX_INT"
argument_list|)
throw|;
block|}
name|this
operator|.
name|s
operator|=
name|s
expr_stmt|;
name|this
operator|.
name|queryLen
operator|=
name|queryLen
expr_stmt|;
name|this
operator|.
name|k
operator|=
name|k
expr_stmt|;
block|}
comment|/**    * Constructor setting only s, letting k and queryLen to default    * @param s hyperparam for the growth function    */
DECL|method|Axiomatic
specifier|public
name|Axiomatic
parameter_list|(
name|float
name|s
parameter_list|)
block|{
name|this
argument_list|(
name|s
argument_list|,
literal|1
argument_list|,
literal|0.35f
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor setting s and queryLen, letting k to default    * @param s hyperparam for the growth function    * @param queryLen the query length    */
DECL|method|Axiomatic
specifier|public
name|Axiomatic
parameter_list|(
name|float
name|s
parameter_list|,
name|int
name|queryLen
parameter_list|)
block|{
name|this
argument_list|(
name|s
argument_list|,
name|queryLen
argument_list|,
literal|0.35f
argument_list|)
expr_stmt|;
block|}
comment|/**    * Default constructor    */
DECL|method|Axiomatic
specifier|public
name|Axiomatic
parameter_list|()
block|{
name|this
argument_list|(
literal|0.25f
argument_list|,
literal|1
argument_list|,
literal|0.35f
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|score
specifier|public
name|float
name|score
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
block|{
return|return
name|tf
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
operator|*
name|ln
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
operator|*
name|tfln
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
operator|*
name|idf
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
operator|-
name|gamma
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|protected
name|void
name|explain
parameter_list|(
name|List
argument_list|<
name|Explanation
argument_list|>
name|subs
parameter_list|,
name|BasicStats
name|stats
parameter_list|,
name|int
name|doc
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
block|{
if|if
condition|(
name|stats
operator|.
name|getBoost
argument_list|()
operator|!=
literal|1.0f
condition|)
block|{
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|stats
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|"boost"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|this
operator|.
name|k
argument_list|,
literal|"k"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|this
operator|.
name|s
argument_list|,
literal|"s"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|this
operator|.
name|queryLen
argument_list|,
literal|"queryLen"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|tf
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
argument_list|,
literal|"tf"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|ln
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
argument_list|,
literal|"ln"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|tfln
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
argument_list|,
literal|"tfln"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|idf
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
argument_list|,
literal|"idf"
argument_list|)
argument_list|)
expr_stmt|;
name|subs
operator|.
name|add
argument_list|(
name|Explanation
operator|.
name|match
argument_list|(
name|gamma
argument_list|(
name|stats
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
argument_list|,
literal|"gamma"
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|explain
argument_list|(
name|subs
argument_list|,
name|stats
argument_list|,
name|doc
argument_list|,
name|freq
argument_list|,
name|docLen
argument_list|)
expr_stmt|;
block|}
comment|/**    * Name of the axiomatic method.    */
annotation|@
name|Override
DECL|method|toString
specifier|public
specifier|abstract
name|String
name|toString
parameter_list|()
function_decl|;
comment|/**    * compute the term frequency component    */
DECL|method|tf
specifier|protected
specifier|abstract
name|float
name|tf
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
function_decl|;
comment|/**    * compute the document length component    */
DECL|method|ln
specifier|protected
specifier|abstract
name|float
name|ln
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
function_decl|;
comment|/**    * compute the mixed term frequency and document length component    */
DECL|method|tfln
specifier|protected
specifier|abstract
name|float
name|tfln
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
function_decl|;
comment|/**    * compute the inverted document frequency component    */
DECL|method|idf
specifier|protected
specifier|abstract
name|float
name|idf
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
function_decl|;
comment|/**    * compute the gamma component (only for F3EXp and F3LOG)    */
DECL|method|gamma
specifier|protected
specifier|abstract
name|float
name|gamma
parameter_list|(
name|BasicStats
name|stats
parameter_list|,
name|float
name|freq
parameter_list|,
name|float
name|docLen
parameter_list|)
function_decl|;
block|}
end_class

end_unit

