begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.search
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_comment
comment|/**  * A query that wraps multiple sub-queries generated from a graph token stream.  */
end_comment

begin_class
DECL|class|GraphQuery
specifier|public
specifier|final
class|class
name|GraphQuery
extends|extends
name|Query
block|{
DECL|field|queries
specifier|private
specifier|final
name|Query
index|[]
name|queries
decl_stmt|;
DECL|field|hasBoolean
specifier|private
name|boolean
name|hasBoolean
init|=
literal|false
decl_stmt|;
DECL|field|hasPhrase
specifier|private
name|boolean
name|hasPhrase
init|=
literal|false
decl_stmt|;
comment|/**    * Constructor sets the queries and checks if any of them are    * a boolean query.    *    * @param queries the non-null array of queries    */
DECL|method|GraphQuery
specifier|public
name|GraphQuery
parameter_list|(
name|Query
modifier|...
name|queries
parameter_list|)
block|{
name|this
operator|.
name|queries
operator|=
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|queries
argument_list|)
operator|.
name|clone
argument_list|()
expr_stmt|;
for|for
control|(
name|Query
name|query
range|:
name|queries
control|)
block|{
if|if
condition|(
name|query
operator|instanceof
name|BooleanQuery
condition|)
block|{
name|hasBoolean
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|instanceof
name|PhraseQuery
condition|)
block|{
name|hasPhrase
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Gets the queries    *    * @return unmodifiable list of Query    */
DECL|method|getQueries
specifier|public
name|List
argument_list|<
name|Query
argument_list|>
name|getQueries
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|queries
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * If there is at least one boolean query or not.    *    * @return true if there is a boolean, false if not    */
DECL|method|hasBoolean
specifier|public
name|boolean
name|hasBoolean
parameter_list|()
block|{
return|return
name|hasBoolean
return|;
block|}
comment|/**    * If there is at least one phrase query or not.    *    * @return true if there is a phrase query, false if not    */
DECL|method|hasPhrase
specifier|public
name|boolean
name|hasPhrase
parameter_list|()
block|{
return|return
name|hasPhrase
return|;
block|}
comment|/**    * Rewrites to a single query or a boolean query where each query is a SHOULD clause.    */
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|queries
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
operator|.
name|build
argument_list|()
return|;
block|}
if|if
condition|(
name|queries
operator|.
name|length
operator|==
literal|1
condition|)
block|{
return|return
name|queries
index|[
literal|0
index|]
return|;
block|}
name|BooleanQuery
operator|.
name|Builder
name|q
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
for|for
control|(
name|Query
name|clause
range|:
name|queries
control|)
block|{
name|q
operator|.
name|add
argument_list|(
name|clause
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
block|}
return|return
name|q
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Graph("
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|queries
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|Objects
operator|.
name|toString
argument_list|(
name|queries
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queries
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|"hasBoolean="
argument_list|)
operator|.
name|append
argument_list|(
name|hasBoolean
argument_list|)
operator|.
name|append
argument_list|(
literal|", hasPhrase="
argument_list|)
operator|.
name|append
argument_list|(
name|hasPhrase
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
return|return
name|sameClassAs
argument_list|(
name|other
argument_list|)
operator|&&
name|hasBoolean
operator|==
operator|(
operator|(
name|GraphQuery
operator|)
name|other
operator|)
operator|.
name|hasBoolean
operator|&&
name|hasPhrase
operator|==
operator|(
operator|(
name|GraphQuery
operator|)
name|other
operator|)
operator|.
name|hasPhrase
operator|&&
name|Arrays
operator|.
name|equals
argument_list|(
name|queries
argument_list|,
operator|(
operator|(
name|GraphQuery
operator|)
name|other
operator|)
operator|.
name|queries
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
name|classHash
argument_list|()
operator|+
name|Arrays
operator|.
name|deepHashCode
argument_list|(
operator|new
name|Object
index|[]
block|{
name|hasBoolean
block|,
name|hasPhrase
block|,
name|queries
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

