begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.analysis.standard
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|standard
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|CharArraySet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|LowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|StopwordAnalyzerBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|WordlistLoader
import|;
end_import

begin_comment
comment|/**  * Filters {@link StandardTokenizer} with {@link StandardFilter}, {@link  * LowerCaseFilter} and {@link StopFilter}, using a list of  * English stop words.  */
end_comment

begin_class
DECL|class|StandardAnalyzer
specifier|public
specifier|final
class|class
name|StandardAnalyzer
extends|extends
name|StopwordAnalyzerBase
block|{
comment|/** An unmodifiable set containing some common English words that are not usually useful   for searching.*/
DECL|field|ENGLISH_STOP_WORDS_SET
specifier|public
specifier|static
specifier|final
name|CharArraySet
name|ENGLISH_STOP_WORDS_SET
decl_stmt|;
static|static
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|stopWords
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"a"
argument_list|,
literal|"an"
argument_list|,
literal|"and"
argument_list|,
literal|"are"
argument_list|,
literal|"as"
argument_list|,
literal|"at"
argument_list|,
literal|"be"
argument_list|,
literal|"but"
argument_list|,
literal|"by"
argument_list|,
literal|"for"
argument_list|,
literal|"if"
argument_list|,
literal|"in"
argument_list|,
literal|"into"
argument_list|,
literal|"is"
argument_list|,
literal|"it"
argument_list|,
literal|"no"
argument_list|,
literal|"not"
argument_list|,
literal|"of"
argument_list|,
literal|"on"
argument_list|,
literal|"or"
argument_list|,
literal|"such"
argument_list|,
literal|"that"
argument_list|,
literal|"the"
argument_list|,
literal|"their"
argument_list|,
literal|"then"
argument_list|,
literal|"there"
argument_list|,
literal|"these"
argument_list|,
literal|"they"
argument_list|,
literal|"this"
argument_list|,
literal|"to"
argument_list|,
literal|"was"
argument_list|,
literal|"will"
argument_list|,
literal|"with"
argument_list|)
decl_stmt|;
specifier|final
name|CharArraySet
name|stopSet
init|=
operator|new
name|CharArraySet
argument_list|(
name|stopWords
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ENGLISH_STOP_WORDS_SET
operator|=
name|CharArraySet
operator|.
name|unmodifiableSet
argument_list|(
name|stopSet
argument_list|)
expr_stmt|;
block|}
comment|/** Default maximum allowed token length */
DECL|field|DEFAULT_MAX_TOKEN_LENGTH
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_TOKEN_LENGTH
init|=
literal|255
decl_stmt|;
DECL|field|maxTokenLength
specifier|private
name|int
name|maxTokenLength
init|=
name|DEFAULT_MAX_TOKEN_LENGTH
decl_stmt|;
comment|/** An unmodifiable set containing some common English words that are usually not   useful for searching. */
DECL|field|STOP_WORDS_SET
specifier|public
specifier|static
specifier|final
name|CharArraySet
name|STOP_WORDS_SET
init|=
name|ENGLISH_STOP_WORDS_SET
decl_stmt|;
comment|/** Builds an analyzer with the given stop words.    * @param stopWords stop words */
DECL|method|StandardAnalyzer
specifier|public
name|StandardAnalyzer
parameter_list|(
name|CharArraySet
name|stopWords
parameter_list|)
block|{
name|super
argument_list|(
name|stopWords
argument_list|)
expr_stmt|;
block|}
comment|/** Builds an analyzer with the default stop words ({@link #STOP_WORDS_SET}).    */
DECL|method|StandardAnalyzer
specifier|public
name|StandardAnalyzer
parameter_list|()
block|{
name|this
argument_list|(
name|STOP_WORDS_SET
argument_list|)
expr_stmt|;
block|}
comment|/** Builds an analyzer with the stop words from the given reader.    * @see WordlistLoader#getWordSet(Reader)    * @param stopwords Reader to read stop words from */
DECL|method|StandardAnalyzer
specifier|public
name|StandardAnalyzer
parameter_list|(
name|Reader
name|stopwords
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|loadStopwordSet
argument_list|(
name|stopwords
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set maximum allowed token length.  If a token is seen    * that exceeds this length then it is discarded.  This    * setting only takes effect the next time tokenStream or    * tokenStream is called.    */
DECL|method|setMaxTokenLength
specifier|public
name|void
name|setMaxTokenLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|maxTokenLength
operator|=
name|length
expr_stmt|;
block|}
comment|/** Returns the current maximum token length    *     *  @see #setMaxTokenLength */
DECL|method|getMaxTokenLength
specifier|public
name|int
name|getMaxTokenLength
parameter_list|()
block|{
return|return
name|maxTokenLength
return|;
block|}
annotation|@
name|Override
DECL|method|createComponents
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
specifier|final
name|String
name|fieldName
parameter_list|)
block|{
specifier|final
name|StandardTokenizer
name|src
init|=
operator|new
name|StandardTokenizer
argument_list|()
decl_stmt|;
name|src
operator|.
name|setMaxTokenLength
argument_list|(
name|maxTokenLength
argument_list|)
expr_stmt|;
name|TokenStream
name|tok
init|=
operator|new
name|StandardFilter
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|tok
operator|=
operator|new
name|LowerCaseFilter
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|tok
operator|=
operator|new
name|StopFilter
argument_list|(
name|tok
argument_list|,
name|stopwords
argument_list|)
expr_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|src
argument_list|,
name|tok
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|setReader
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|)
block|{
name|src
operator|.
name|setMaxTokenLength
argument_list|(
name|StandardAnalyzer
operator|.
name|this
operator|.
name|maxTokenLength
argument_list|)
expr_stmt|;
name|super
operator|.
name|setReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|protected
name|TokenStream
name|normalize
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStream
name|in
parameter_list|)
block|{
name|TokenStream
name|result
init|=
operator|new
name|StandardFilter
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|LowerCaseFilter
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

