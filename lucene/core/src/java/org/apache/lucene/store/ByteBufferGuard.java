begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.store
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_comment
comment|/**  * A guard that is created for every {@link ByteBufferIndexInput} that tries on best effort  * to reject any access to the {@link ByteBuffer} behind, once it is unmapped. A single instance  * of this is used for the original and all clones, so once the original is closed and unmapped  * all clones also throw {@link AlreadyClosedException}, triggered by a {@link NullPointerException}.  *<p>  * This code uses the trick that is also used in  * {@link java.lang.invoke.MutableCallSite#syncAll(java.lang.invoke.MutableCallSite[])} to  * invalidate switch points. It also yields the current thread to give other threads a chance  * to finish in-flight requests...  */
end_comment

begin_class
DECL|class|ByteBufferGuard
specifier|final
class|class
name|ByteBufferGuard
block|{
comment|/**    * Pass in an implementation of this interface to cleanup ByteBuffers.    * MMapDirectory implements this to allow unmapping of bytebuffers with private Java APIs.    */
annotation|@
name|FunctionalInterface
DECL|interface|BufferCleaner
specifier|static
interface|interface
name|BufferCleaner
block|{
DECL|method|freeBuffer
name|void
name|freeBuffer
parameter_list|(
name|String
name|resourceDescription
parameter_list|,
name|ByteBuffer
name|b
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
DECL|field|resourceDescription
specifier|private
specifier|final
name|String
name|resourceDescription
decl_stmt|;
DECL|field|cleaner
specifier|private
specifier|final
name|BufferCleaner
name|cleaner
decl_stmt|;
comment|/** not volatile, we use store-store barrier! */
DECL|field|invalidated
specifier|private
name|boolean
name|invalidated
init|=
literal|false
decl_stmt|;
comment|/** the actual store-store barrier. */
DECL|field|barrier
specifier|private
specifier|final
name|AtomicInteger
name|barrier
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
comment|/**    * Creates an instance to be used for a single {@link ByteBufferIndexInput} which    * must be shared by all of its clones.    */
DECL|method|ByteBufferGuard
specifier|public
name|ByteBufferGuard
parameter_list|(
name|String
name|resourceDescription
parameter_list|,
name|BufferCleaner
name|cleaner
parameter_list|)
block|{
name|this
operator|.
name|resourceDescription
operator|=
name|resourceDescription
expr_stmt|;
name|this
operator|.
name|cleaner
operator|=
name|cleaner
expr_stmt|;
block|}
comment|/**    * Invalidates this guard and unmaps (if supported).    */
DECL|method|invalidateAndUnmap
specifier|public
name|void
name|invalidateAndUnmap
parameter_list|(
name|ByteBuffer
modifier|...
name|bufs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cleaner
operator|!=
literal|null
condition|)
block|{
name|invalidated
operator|=
literal|true
expr_stmt|;
comment|// this should trigger a happens-before - so flushes all caches
name|barrier
operator|.
name|lazySet
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|yield
argument_list|()
expr_stmt|;
for|for
control|(
name|ByteBuffer
name|b
range|:
name|bufs
control|)
block|{
name|cleaner
operator|.
name|freeBuffer
argument_list|(
name|resourceDescription
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|ensureValid
specifier|private
name|void
name|ensureValid
parameter_list|()
block|{
if|if
condition|(
name|invalidated
condition|)
block|{
comment|// this triggers an AlreadyClosedException in ByteBufferIndexInput:
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
block|}
DECL|method|getBytes
specifier|public
name|void
name|getBytes
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|,
name|byte
index|[]
name|dst
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|get
argument_list|(
name|dst
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
DECL|method|getByte
specifier|public
name|byte
name|getByte
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|get
argument_list|()
return|;
block|}
DECL|method|getShort
specifier|public
name|short
name|getShort
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|getShort
argument_list|()
return|;
block|}
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|getInt
argument_list|()
return|;
block|}
DECL|method|getLong
specifier|public
name|long
name|getLong
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|getLong
argument_list|()
return|;
block|}
DECL|method|getByte
specifier|public
name|byte
name|getByte
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
DECL|method|getShort
specifier|public
name|short
name|getShort
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|getShort
argument_list|(
name|pos
argument_list|)
return|;
block|}
DECL|method|getInt
specifier|public
name|int
name|getInt
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|getInt
argument_list|(
name|pos
argument_list|)
return|;
block|}
DECL|method|getLong
specifier|public
name|long
name|getLong
parameter_list|(
name|ByteBuffer
name|receiver
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|ensureValid
argument_list|()
expr_stmt|;
return|return
name|receiver
operator|.
name|getLong
argument_list|(
name|pos
argument_list|)
return|;
block|}
block|}
end_class

end_unit

