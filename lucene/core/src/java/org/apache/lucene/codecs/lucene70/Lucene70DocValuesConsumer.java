begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.lucene70
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
operator|.
name|Lucene70DocValuesFormat
operator|.
name|DIRECT_MONOTONIC_BLOCK_SHIFT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
operator|.
name|Lucene70DocValuesFormat
operator|.
name|NUMERIC_BLOCK_SHIFT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
operator|.
name|Lucene70DocValuesFormat
operator|.
name|NUMERIC_BLOCK_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_comment
comment|// javadocs
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|EmptyDocValuesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedSetSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|GrowableByteArrayDataOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RAMOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRefBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|MathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|StringHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|DirectMonotonicWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|DirectWriter
import|;
end_import

begin_comment
comment|/** writer for {@link Lucene70DocValuesFormat} */
end_comment

begin_class
DECL|class|Lucene70DocValuesConsumer
specifier|final
class|class
name|Lucene70DocValuesConsumer
extends|extends
name|DocValuesConsumer
implements|implements
name|Closeable
block|{
DECL|field|data
DECL|field|meta
name|IndexOutput
name|data
decl_stmt|,
name|meta
decl_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
comment|/** expert: Creates a new writer */
DECL|method|Lucene70DocValuesConsumer
specifier|public
name|Lucene70DocValuesConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|String
name|dataCodec
parameter_list|,
name|String
name|dataExtension
parameter_list|,
name|String
name|metaCodec
parameter_list|,
name|String
name|metaExtension
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|dataExtension
argument_list|)
decl_stmt|;
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|data
argument_list|,
name|dataCodec
argument_list|,
name|Lucene70DocValuesFormat
operator|.
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|String
name|metaName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|metaExtension
argument_list|)
decl_stmt|;
name|meta
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|metaName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|meta
argument_list|,
name|metaCodec
argument_list|,
name|Lucene70DocValuesFormat
operator|.
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|meta
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// write EOF marker
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|meta
argument_list|)
expr_stmt|;
comment|// write checksum
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write checksum
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
name|meta
operator|=
name|data
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addNumericField
specifier|public
name|void
name|addNumericField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|NUMERIC
argument_list|)
expr_stmt|;
name|writeValues
argument_list|(
name|field
argument_list|,
operator|new
name|EmptyDocValuesProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|DocValues
operator|.
name|singleton
argument_list|(
name|valuesProducer
operator|.
name|getNumeric
argument_list|(
name|field
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
DECL|class|MinMaxTracker
specifier|private
specifier|static
class|class
name|MinMaxTracker
block|{
DECL|field|min
DECL|field|max
DECL|field|numValues
DECL|field|spaceInBits
name|long
name|min
decl_stmt|,
name|max
decl_stmt|,
name|numValues
decl_stmt|,
name|spaceInBits
decl_stmt|;
DECL|method|MinMaxTracker
name|MinMaxTracker
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|spaceInBits
operator|=
literal|0
expr_stmt|;
block|}
DECL|method|reset
specifier|private
name|void
name|reset
parameter_list|()
block|{
name|min
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|max
operator|=
name|Long
operator|.
name|MIN_VALUE
expr_stmt|;
name|numValues
operator|=
literal|0
expr_stmt|;
block|}
comment|/** Accumulate a new value. */
DECL|method|update
name|void
name|update
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|v
argument_list|)
expr_stmt|;
operator|++
name|numValues
expr_stmt|;
block|}
comment|/** Update the required space. */
DECL|method|finish
name|void
name|finish
parameter_list|()
block|{
if|if
condition|(
name|max
operator|>
name|min
condition|)
block|{
name|spaceInBits
operator|+=
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|max
operator|-
name|min
argument_list|)
operator|*
name|numValues
expr_stmt|;
block|}
block|}
comment|/** Update space usage and get ready for accumulating values for the next block. */
DECL|method|nextBlock
name|void
name|nextBlock
parameter_list|()
block|{
name|finish
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
DECL|method|writeValues
specifier|private
name|long
index|[]
name|writeValues
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedNumericDocValues
name|values
init|=
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|int
name|numDocsWithValue
init|=
literal|0
decl_stmt|;
name|MinMaxTracker
name|minMax
init|=
operator|new
name|MinMaxTracker
argument_list|()
decl_stmt|;
name|MinMaxTracker
name|blockMinMax
init|=
operator|new
name|MinMaxTracker
argument_list|()
decl_stmt|;
name|long
name|gcd
init|=
literal|0
decl_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|uniqueValues
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|values
operator|.
name|docValueCount
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|long
name|v
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|gcd
operator|!=
literal|1
condition|)
block|{
if|if
condition|(
name|v
argument_list|<
name|Long
operator|.
name|MIN_VALUE
operator|/
literal|2
operator|||
name|v
argument_list|>
name|Long
operator|.
name|MAX_VALUE
operator|/
literal|2
condition|)
block|{
comment|// in that case v - minValue might overflow and make the GCD computation return
comment|// wrong results. Since these extreme values are unlikely, we just discard
comment|// GCD computation for them
name|gcd
operator|=
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|minMax
operator|.
name|numValues
operator|!=
literal|0
condition|)
block|{
comment|// minValue needs to be set first
name|gcd
operator|=
name|MathUtil
operator|.
name|gcd
argument_list|(
name|gcd
argument_list|,
name|v
operator|-
name|minMax
operator|.
name|min
argument_list|)
expr_stmt|;
block|}
block|}
name|minMax
operator|.
name|update
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|blockMinMax
operator|.
name|update
argument_list|(
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|blockMinMax
operator|.
name|numValues
operator|==
name|NUMERIC_BLOCK_SIZE
condition|)
block|{
name|blockMinMax
operator|.
name|nextBlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|uniqueValues
operator|!=
literal|null
operator|&&
name|uniqueValues
operator|.
name|add
argument_list|(
name|v
argument_list|)
operator|&&
name|uniqueValues
operator|.
name|size
argument_list|()
operator|>
literal|256
condition|)
block|{
name|uniqueValues
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|numDocsWithValue
operator|++
expr_stmt|;
block|}
name|minMax
operator|.
name|finish
argument_list|()
expr_stmt|;
name|blockMinMax
operator|.
name|finish
argument_list|()
expr_stmt|;
specifier|final
name|long
name|numValues
init|=
name|minMax
operator|.
name|numValues
decl_stmt|;
name|long
name|min
init|=
name|minMax
operator|.
name|min
decl_stmt|;
specifier|final
name|long
name|max
init|=
name|minMax
operator|.
name|max
decl_stmt|;
assert|assert
name|blockMinMax
operator|.
name|spaceInBits
operator|<=
name|minMax
operator|.
name|spaceInBits
assert|;
if|if
condition|(
name|numDocsWithValue
operator|==
literal|0
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numDocsWithValue
operator|==
name|maxDoc
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|offset
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
name|values
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|writeLong
argument_list|(
name|numValues
argument_list|)
expr_stmt|;
specifier|final
name|int
name|numBitsPerValue
decl_stmt|;
name|boolean
name|doBlocks
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|encode
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|min
operator|>=
name|max
condition|)
block|{
name|numBitsPerValue
operator|=
literal|0
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|uniqueValues
operator|!=
literal|null
operator|&&
name|uniqueValues
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|uniqueValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|<
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
operator|(
name|max
operator|-
name|min
operator|)
operator|/
name|gcd
argument_list|)
condition|)
block|{
name|numBitsPerValue
operator|=
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|uniqueValues
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|Long
index|[]
name|sortedUniqueValues
init|=
name|uniqueValues
operator|.
name|toArray
argument_list|(
operator|new
name|Long
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|sortedUniqueValues
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|sortedUniqueValues
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Long
name|v
range|:
name|sortedUniqueValues
control|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|encode
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sortedUniqueValues
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|encode
operator|.
name|put
argument_list|(
name|sortedUniqueValues
index|[
name|i
index|]
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|min
operator|=
literal|0
expr_stmt|;
name|gcd
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
name|uniqueValues
operator|=
literal|null
expr_stmt|;
comment|// we do blocks if that appears to save 10+% storage
name|doBlocks
operator|=
name|minMax
operator|.
name|spaceInBits
operator|>
literal|0
operator|&&
operator|(
name|double
operator|)
name|blockMinMax
operator|.
name|spaceInBits
operator|/
name|minMax
operator|.
name|spaceInBits
operator|<=
literal|0.9
expr_stmt|;
if|if
condition|(
name|doBlocks
condition|)
block|{
name|numBitsPerValue
operator|=
literal|0xFF
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
operator|-
literal|2
operator|-
name|NUMERIC_BLOCK_SHIFT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|numBitsPerValue
operator|=
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
operator|(
name|max
operator|-
name|min
operator|)
operator|/
name|gcd
argument_list|)
expr_stmt|;
if|if
condition|(
name|gcd
operator|==
literal|1
operator|&&
name|min
operator|>
literal|0
operator|&&
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|max
argument_list|)
operator|==
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|max
operator|-
name|min
argument_list|)
condition|)
block|{
name|min
operator|=
literal|0
expr_stmt|;
block|}
name|meta
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|numBitsPerValue
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|gcd
argument_list|)
expr_stmt|;
name|long
name|startOffset
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
if|if
condition|(
name|doBlocks
condition|)
block|{
name|writeValuesMultipleBlocks
argument_list|(
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
argument_list|,
name|gcd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numBitsPerValue
operator|!=
literal|0
condition|)
block|{
name|writeValuesSingleBlock
argument_list|(
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
argument_list|,
name|numValues
argument_list|,
name|numBitsPerValue
argument_list|,
name|min
argument_list|,
name|gcd
argument_list|,
name|encode
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|startOffset
argument_list|)
expr_stmt|;
return|return
operator|new
name|long
index|[]
block|{
name|numDocsWithValue
block|,
name|numValues
block|}
return|;
block|}
DECL|method|writeValuesSingleBlock
specifier|private
name|void
name|writeValuesSingleBlock
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|numValues
parameter_list|,
name|int
name|numBitsPerValue
parameter_list|,
name|long
name|min
parameter_list|,
name|long
name|gcd
parameter_list|,
name|Map
argument_list|<
name|Long
argument_list|,
name|Integer
argument_list|>
name|encode
parameter_list|)
throws|throws
name|IOException
block|{
name|DirectWriter
name|writer
init|=
name|DirectWriter
operator|.
name|getInstance
argument_list|(
name|data
argument_list|,
name|numValues
argument_list|,
name|numBitsPerValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|values
operator|.
name|docValueCount
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|long
name|v
init|=
name|values
operator|.
name|nextValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|encode
operator|==
literal|null
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
operator|(
name|v
operator|-
name|min
operator|)
operator|/
name|gcd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|add
argument_list|(
name|encode
operator|.
name|get
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
block|}
DECL|method|writeValuesMultipleBlocks
specifier|private
name|void
name|writeValuesMultipleBlocks
parameter_list|(
name|SortedNumericDocValues
name|values
parameter_list|,
name|long
name|gcd
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
index|[]
name|buffer
init|=
operator|new
name|long
index|[
name|NUMERIC_BLOCK_SIZE
index|]
decl_stmt|;
specifier|final
name|GrowableByteArrayDataOutput
name|encodeBuffer
init|=
operator|new
name|GrowableByteArrayDataOutput
argument_list|(
name|NUMERIC_BLOCK_SIZE
argument_list|)
decl_stmt|;
name|int
name|upTo
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
name|values
operator|.
name|docValueCount
argument_list|()
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|buffer
index|[
name|upTo
operator|++
index|]
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|upTo
operator|==
name|NUMERIC_BLOCK_SIZE
condition|)
block|{
name|writeBlock
argument_list|(
name|buffer
argument_list|,
name|NUMERIC_BLOCK_SIZE
argument_list|,
name|gcd
argument_list|,
name|encodeBuffer
argument_list|)
expr_stmt|;
name|upTo
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|upTo
operator|>
literal|0
condition|)
block|{
name|writeBlock
argument_list|(
name|buffer
argument_list|,
name|upTo
argument_list|,
name|gcd
argument_list|,
name|encodeBuffer
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|writeBlock
specifier|private
name|void
name|writeBlock
parameter_list|(
name|long
index|[]
name|values
parameter_list|,
name|int
name|length
parameter_list|,
name|long
name|gcd
parameter_list|,
name|GrowableByteArrayDataOutput
name|buffer
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|length
operator|>
literal|0
assert|;
name|long
name|min
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
name|long
name|max
init|=
name|values
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
specifier|final
name|long
name|v
init|=
name|values
index|[
name|i
index|]
decl_stmt|;
assert|assert
name|Math
operator|.
name|floorMod
argument_list|(
name|values
index|[
name|i
index|]
operator|-
name|min
argument_list|,
name|gcd
argument_list|)
operator|==
literal|0
assert|;
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|min
operator|==
name|max
condition|)
block|{
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeLong
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|bitsPerValue
init|=
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|max
operator|-
name|min
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|reset
argument_list|()
expr_stmt|;
assert|assert
name|buffer
operator|.
name|getPosition
argument_list|()
operator|==
literal|0
assert|;
specifier|final
name|DirectWriter
name|w
init|=
name|DirectWriter
operator|.
name|getInstance
argument_list|(
name|buffer
argument_list|,
name|length
argument_list|,
name|bitsPerValue
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|w
operator|.
name|add
argument_list|(
operator|(
name|values
index|[
name|i
index|]
operator|-
name|min
operator|)
operator|/
name|gcd
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|finish
argument_list|()
expr_stmt|;
name|data
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|bitsPerValue
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeLong
argument_list|(
name|min
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeInt
argument_list|(
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeBytes
argument_list|(
name|buffer
operator|.
name|getBytes
argument_list|()
argument_list|,
name|buffer
operator|.
name|getPosition
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addBinaryField
specifier|public
name|void
name|addBinaryField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|BINARY
argument_list|)
expr_stmt|;
name|BinaryDocValues
name|values
init|=
name|valuesProducer
operator|.
name|getBinary
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|int
name|numDocsWithField
init|=
literal|0
decl_stmt|;
name|int
name|minLength
init|=
name|Integer
operator|.
name|MAX_VALUE
decl_stmt|;
name|int
name|maxLength
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|numDocsWithField
operator|++
expr_stmt|;
name|BytesRef
name|v
init|=
name|values
operator|.
name|binaryValue
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|v
operator|.
name|length
decl_stmt|;
name|data
operator|.
name|writeBytes
argument_list|(
name|v
operator|.
name|bytes
argument_list|,
name|v
operator|.
name|offset
argument_list|,
name|v
operator|.
name|length
argument_list|)
expr_stmt|;
name|minLength
operator|=
name|Math
operator|.
name|min
argument_list|(
name|length
argument_list|,
name|minLength
argument_list|)
expr_stmt|;
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|length
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
block|}
assert|assert
name|numDocsWithField
operator|<=
name|maxDoc
assert|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|numDocsWithField
operator|==
literal|0
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numDocsWithField
operator|==
name|maxDoc
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|offset
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getBinary
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
name|values
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|writeInt
argument_list|(
name|numDocsWithField
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|minLength
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxLength
operator|>
name|minLength
condition|)
block|{
name|start
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeVInt
argument_list|(
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
expr_stmt|;
specifier|final
name|DirectMonotonicWriter
name|writer
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|data
argument_list|,
name|numDocsWithField
operator|+
literal|1
argument_list|,
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
decl_stmt|;
name|long
name|addr
init|=
literal|0
decl_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getBinary
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|addr
operator|+=
name|values
operator|.
name|binaryValue
argument_list|()
operator|.
name|length
expr_stmt|;
name|writer
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addSortedField
specifier|public
name|void
name|addSortedField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|SORTED
argument_list|)
expr_stmt|;
name|doAddSortedField
argument_list|(
name|field
argument_list|,
name|valuesProducer
argument_list|)
expr_stmt|;
block|}
DECL|method|doAddSortedField
specifier|private
name|void
name|doAddSortedField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedDocValues
name|values
init|=
name|valuesProducer
operator|.
name|getSorted
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|int
name|numDocsWithField
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|numDocsWithField
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|numDocsWithField
operator|==
literal|0
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numDocsWithField
operator|==
name|maxDoc
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|offset
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getSorted
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
name|values
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|writeInt
argument_list|(
name|numDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|getValueCount
argument_list|()
operator|<=
literal|1
condition|)
block|{
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|numberOfBitsPerOrd
init|=
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|values
operator|.
name|getValueCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|numberOfBitsPerOrd
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|DirectWriter
name|writer
init|=
name|DirectWriter
operator|.
name|getInstance
argument_list|(
name|data
argument_list|,
name|numDocsWithField
argument_list|,
name|numberOfBitsPerOrd
argument_list|)
decl_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getSorted
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|values
operator|.
name|ordValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
name|addTermsDict
argument_list|(
name|DocValues
operator|.
name|singleton
argument_list|(
name|valuesProducer
operator|.
name|getSorted
argument_list|(
name|field
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|addTermsDict
specifier|private
name|void
name|addTermsDict
parameter_list|(
name|SortedSetDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|size
init|=
name|values
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeVLong
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_BLOCK_SHIFT
argument_list|)
expr_stmt|;
name|RAMOutputStream
name|addressBuffer
init|=
operator|new
name|RAMOutputStream
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
expr_stmt|;
name|long
name|numBlocks
init|=
operator|(
name|size
operator|+
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_BLOCK_MASK
operator|)
operator|>>>
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_BLOCK_SHIFT
decl_stmt|;
name|DirectMonotonicWriter
name|writer
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|addressBuffer
argument_list|,
name|numBlocks
argument_list|,
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
decl_stmt|;
name|BytesRefBuilder
name|previous
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|long
name|ord
init|=
literal|0
decl_stmt|;
name|long
name|start
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|int
name|maxLength
init|=
literal|0
decl_stmt|;
name|TermsEnum
name|iterator
init|=
name|values
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
for|for
control|(
name|BytesRef
name|term
init|=
name|iterator
operator|.
name|next
argument_list|()
init|;
name|term
operator|!=
literal|null
condition|;
name|term
operator|=
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|ord
operator|&
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_BLOCK_MASK
operator|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeVInt
argument_list|(
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|writeBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|prefixLength
init|=
name|StringHelper
operator|.
name|bytesDifference
argument_list|(
name|previous
operator|.
name|get
argument_list|()
argument_list|,
name|term
argument_list|)
decl_stmt|;
specifier|final
name|int
name|suffixLength
init|=
name|term
operator|.
name|length
operator|-
name|prefixLength
decl_stmt|;
assert|assert
name|suffixLength
operator|>
literal|0
assert|;
comment|// terms are unique
name|data
operator|.
name|writeByte
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|prefixLength
argument_list|,
literal|15
argument_list|)
operator||
operator|(
name|Math
operator|.
name|min
argument_list|(
literal|15
argument_list|,
name|suffixLength
operator|-
literal|1
argument_list|)
operator|<<
literal|4
operator|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefixLength
operator|>=
literal|15
condition|)
block|{
name|data
operator|.
name|writeVInt
argument_list|(
name|prefixLength
operator|-
literal|15
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|suffixLength
operator|>=
literal|16
condition|)
block|{
name|data
operator|.
name|writeVInt
argument_list|(
name|suffixLength
operator|-
literal|16
argument_list|)
expr_stmt|;
block|}
name|data
operator|.
name|writeBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
operator|+
name|prefixLength
argument_list|,
name|term
operator|.
name|length
operator|-
name|prefixLength
argument_list|)
expr_stmt|;
block|}
name|maxLength
operator|=
name|Math
operator|.
name|max
argument_list|(
name|maxLength
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
name|previous
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
operator|++
name|ord
expr_stmt|;
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|addressBuffer
operator|.
name|writeTo
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
comment|// Now write the reverse terms index
name|writeTermsIndex
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
DECL|method|writeTermsIndex
specifier|private
name|void
name|writeTermsIndex
parameter_list|(
name|SortedSetDocValues
name|values
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|size
init|=
name|values
operator|.
name|getValueCount
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_REVERSE_INDEX_SHIFT
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|long
name|numBlocks
init|=
literal|1L
operator|+
operator|(
operator|(
name|size
operator|+
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_REVERSE_INDEX_MASK
operator|)
operator|>>>
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_REVERSE_INDEX_SHIFT
operator|)
decl_stmt|;
name|RAMOutputStream
name|addressBuffer
init|=
operator|new
name|RAMOutputStream
argument_list|()
decl_stmt|;
name|DirectMonotonicWriter
name|writer
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|addressBuffer
argument_list|,
name|numBlocks
argument_list|,
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
decl_stmt|;
name|TermsEnum
name|iterator
init|=
name|values
operator|.
name|termsEnum
argument_list|()
decl_stmt|;
name|BytesRefBuilder
name|previous
init|=
operator|new
name|BytesRefBuilder
argument_list|()
decl_stmt|;
name|long
name|offset
init|=
literal|0
decl_stmt|;
name|long
name|ord
init|=
literal|0
decl_stmt|;
for|for
control|(
name|BytesRef
name|term
init|=
name|iterator
operator|.
name|next
argument_list|()
init|;
name|term
operator|!=
literal|null
condition|;
name|term
operator|=
name|iterator
operator|.
name|next
argument_list|()
control|)
block|{
if|if
condition|(
operator|(
name|ord
operator|&
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_REVERSE_INDEX_MASK
operator|)
operator|==
literal|0
condition|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|int
name|sortKeyLength
init|=
name|StringHelper
operator|.
name|sortKeyLength
argument_list|(
name|previous
operator|.
name|get
argument_list|()
argument_list|,
name|term
argument_list|)
decl_stmt|;
name|offset
operator|+=
name|sortKeyLength
expr_stmt|;
name|data
operator|.
name|writeBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|term
operator|.
name|offset
argument_list|,
name|sortKeyLength
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|ord
operator|&
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_REVERSE_INDEX_MASK
operator|)
operator|==
name|Lucene70DocValuesFormat
operator|.
name|TERMS_DICT_REVERSE_INDEX_MASK
condition|)
block|{
name|previous
operator|.
name|copyBytes
argument_list|(
name|term
argument_list|)
expr_stmt|;
block|}
operator|++
name|ord
expr_stmt|;
block|}
name|writer
operator|.
name|add
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|start
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|addressBuffer
operator|.
name|writeTo
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|addSortedNumericField
specifier|public
name|void
name|addSortedNumericField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|SORTED_NUMERIC
argument_list|)
expr_stmt|;
name|long
index|[]
name|stats
init|=
name|writeValues
argument_list|(
name|field
argument_list|,
name|valuesProducer
argument_list|)
decl_stmt|;
name|int
name|numDocsWithField
init|=
name|Math
operator|.
name|toIntExact
argument_list|(
name|stats
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|long
name|numValues
init|=
name|stats
index|[
literal|1
index|]
decl_stmt|;
assert|assert
name|numValues
operator|>=
name|numDocsWithField
assert|;
name|meta
operator|.
name|writeInt
argument_list|(
name|numDocsWithField
argument_list|)
expr_stmt|;
if|if
condition|(
name|numValues
operator|>
name|numDocsWithField
condition|)
block|{
name|long
name|start
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeVInt
argument_list|(
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
expr_stmt|;
specifier|final
name|DirectMonotonicWriter
name|addressesWriter
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|data
argument_list|,
name|numDocsWithField
operator|+
literal|1L
argument_list|,
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
decl_stmt|;
name|long
name|addr
init|=
literal|0
decl_stmt|;
name|addressesWriter
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|SortedNumericDocValues
name|values
init|=
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|field
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|addr
operator|+=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
name|addressesWriter
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
name|addressesWriter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addSortedSetField
specifier|public
name|void
name|addSortedSetField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|DocValuesProducer
name|valuesProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|meta
operator|.
name|writeInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
name|Lucene70DocValuesFormat
operator|.
name|SORTED_SET
argument_list|)
expr_stmt|;
name|SortedSetDocValues
name|values
init|=
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|int
name|numDocsWithField
init|=
literal|0
decl_stmt|;
name|long
name|numOrds
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|numDocsWithField
operator|++
expr_stmt|;
for|for
control|(
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
init|;
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
control|)
block|{
name|numOrds
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|numDocsWithField
operator|==
name|numOrds
condition|)
block|{
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|doAddSortedField
argument_list|(
name|field
argument_list|,
operator|new
name|EmptyDocValuesProducer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|SortedSetSelector
operator|.
name|wrap
argument_list|(
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|field
argument_list|)
argument_list|,
name|SortedSetSelector
operator|.
name|Type
operator|.
name|MIN
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return;
block|}
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
assert|assert
name|numDocsWithField
operator|!=
literal|0
assert|;
if|if
condition|(
name|numDocsWithField
operator|==
name|maxDoc
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|offset
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
name|values
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|int
name|numberOfBitsPerOrd
init|=
name|DirectWriter
operator|.
name|unsignedBitsRequired
argument_list|(
name|values
operator|.
name|getValueCount
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|numberOfBitsPerOrd
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|DirectWriter
name|writer
init|=
name|DirectWriter
operator|.
name|getInstance
argument_list|(
name|data
argument_list|,
name|numOrds
argument_list|,
name|numberOfBitsPerOrd
argument_list|)
decl_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
for|for
control|(
name|long
name|ord
init|=
name|values
operator|.
name|nextOrd
argument_list|()
init|;
name|ord
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|;
name|ord
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
control|)
block|{
name|writer
operator|.
name|add
argument_list|(
name|ord
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeInt
argument_list|(
name|numDocsWithField
argument_list|)
expr_stmt|;
name|start
operator|=
name|data
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeVInt
argument_list|(
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
expr_stmt|;
specifier|final
name|DirectMonotonicWriter
name|addressesWriter
init|=
name|DirectMonotonicWriter
operator|.
name|getInstance
argument_list|(
name|meta
argument_list|,
name|data
argument_list|,
name|numDocsWithField
operator|+
literal|1
argument_list|,
name|DIRECT_MONOTONIC_BLOCK_SHIFT
argument_list|)
decl_stmt|;
name|long
name|addr
init|=
literal|0
decl_stmt|;
name|addressesWriter
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|field
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
name|addr
operator|++
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|nextOrd
argument_list|()
operator|!=
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
condition|)
block|{
name|addr
operator|++
expr_stmt|;
block|}
name|addressesWriter
operator|.
name|add
argument_list|(
name|addr
argument_list|)
expr_stmt|;
block|}
name|addressesWriter
operator|.
name|finish
argument_list|()
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
name|addTermsDict
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

