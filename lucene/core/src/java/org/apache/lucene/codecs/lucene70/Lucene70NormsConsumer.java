begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.lucene70
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
operator|.
name|Lucene70NormsFormat
operator|.
name|VERSION_CURRENT
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NormsConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|NormsProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentWriteState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * Writer for {@link Lucene70NormsFormat}  */
end_comment

begin_class
DECL|class|Lucene70NormsConsumer
specifier|final
class|class
name|Lucene70NormsConsumer
extends|extends
name|NormsConsumer
block|{
DECL|field|data
DECL|field|meta
name|IndexOutput
name|data
decl_stmt|,
name|meta
decl_stmt|;
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|method|Lucene70NormsConsumer
name|Lucene70NormsConsumer
parameter_list|(
name|SegmentWriteState
name|state
parameter_list|,
name|String
name|dataCodec
parameter_list|,
name|String
name|dataExtension
parameter_list|,
name|String
name|metaCodec
parameter_list|,
name|String
name|metaExtension
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|dataExtension
argument_list|)
decl_stmt|;
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|data
argument_list|,
name|dataCodec
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|String
name|metaName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|metaExtension
argument_list|)
decl_stmt|;
name|meta
operator|=
name|state
operator|.
name|directory
operator|.
name|createOutput
argument_list|(
name|metaName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|CodecUtil
operator|.
name|writeIndexHeader
argument_list|(
name|meta
argument_list|,
name|metaCodec
argument_list|,
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|meta
operator|!=
literal|null
condition|)
block|{
name|meta
operator|.
name|writeInt
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// write EOF marker
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|meta
argument_list|)
expr_stmt|;
comment|// write checksum
block|}
if|if
condition|(
name|data
operator|!=
literal|null
condition|)
block|{
name|CodecUtil
operator|.
name|writeFooter
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// write checksum
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|success
condition|)
block|{
name|IOUtils
operator|.
name|close
argument_list|(
name|data
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|data
argument_list|,
name|meta
argument_list|)
expr_stmt|;
block|}
name|meta
operator|=
name|data
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|addNormsField
specifier|public
name|void
name|addNormsField
parameter_list|(
name|FieldInfo
name|field
parameter_list|,
name|NormsProducer
name|normsProducer
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericDocValues
name|values
init|=
name|normsProducer
operator|.
name|getNorms
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|int
name|numDocsWithValue
init|=
literal|0
decl_stmt|;
name|long
name|min
init|=
name|Long
operator|.
name|MAX_VALUE
decl_stmt|;
name|long
name|max
init|=
name|Long
operator|.
name|MIN_VALUE
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|numDocsWithValue
operator|++
expr_stmt|;
name|long
name|v
init|=
name|values
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|min
operator|=
name|Math
operator|.
name|min
argument_list|(
name|min
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|max
operator|=
name|Math
operator|.
name|max
argument_list|(
name|max
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
assert|assert
name|numDocsWithValue
operator|<=
name|maxDoc
assert|;
name|meta
operator|.
name|writeInt
argument_list|(
name|field
operator|.
name|number
argument_list|)
expr_stmt|;
if|if
condition|(
name|numDocsWithValue
operator|==
literal|0
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|2
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numDocsWithValue
operator|==
name|maxDoc
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|offset
init|=
name|data
operator|.
name|getFilePointer
argument_list|()
decl_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|values
operator|=
name|normsProducer
operator|.
name|getNorms
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|IndexedDISI
operator|.
name|writeBitSet
argument_list|(
name|values
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
operator|-
name|offset
argument_list|)
expr_stmt|;
block|}
name|meta
operator|.
name|writeInt
argument_list|(
name|numDocsWithValue
argument_list|)
expr_stmt|;
name|int
name|numBytesPerValue
init|=
name|numBytesPerValue
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|meta
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|numBytesPerValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|numBytesPerValue
operator|==
literal|0
condition|)
block|{
name|meta
operator|.
name|writeLong
argument_list|(
name|min
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meta
operator|.
name|writeLong
argument_list|(
name|data
operator|.
name|getFilePointer
argument_list|()
argument_list|)
expr_stmt|;
name|values
operator|=
name|normsProducer
operator|.
name|getNorms
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writeValues
argument_list|(
name|values
argument_list|,
name|numBytesPerValue
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
DECL|method|numBytesPerValue
specifier|private
name|int
name|numBytesPerValue
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
block|{
if|if
condition|(
name|min
operator|>=
name|max
condition|)
block|{
return|return
literal|0
return|;
block|}
elseif|else
if|if
condition|(
name|min
operator|>=
name|Byte
operator|.
name|MIN_VALUE
operator|&&
name|max
operator|<=
name|Byte
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|min
operator|>=
name|Short
operator|.
name|MIN_VALUE
operator|&&
name|max
operator|<=
name|Short
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|2
return|;
block|}
elseif|else
if|if
condition|(
name|min
operator|>=
name|Integer
operator|.
name|MIN_VALUE
operator|&&
name|max
operator|<=
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
literal|4
return|;
block|}
else|else
block|{
return|return
literal|8
return|;
block|}
block|}
DECL|method|writeValues
specifier|private
name|void
name|writeValues
parameter_list|(
name|NumericDocValues
name|values
parameter_list|,
name|int
name|numBytesPerValue
parameter_list|,
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
throws|,
name|AssertionError
block|{
for|for
control|(
name|int
name|doc
init|=
name|values
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|values
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|long
name|value
init|=
name|values
operator|.
name|longValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|numBytesPerValue
condition|)
block|{
case|case
literal|1
case|:
name|out
operator|.
name|writeByte
argument_list|(
operator|(
name|byte
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|out
operator|.
name|writeInt
argument_list|(
operator|(
name|int
operator|)
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|out
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|AssertionError
argument_list|()
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

