begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.lucene70
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BitSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|FixedBitSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RoaringDocIdSet
import|;
end_import

begin_comment
comment|/**  * Disk-based implementation of a {@link DocIdSetIterator} which can return  * the index of the current document, i.e. the ordinal of the current document  * among the list of documents that this iterator can return. This is useful  * to implement sparse doc values by only having to encode values for documents  * that actually have a value.  *<p>Implementation-wise, this {@link DocIdSetIterator} is inspired of  * {@link RoaringDocIdSet roaring bitmaps} and encodes ranges of {@code 65536}  * documents independently and picks between 3 encodings depending on the  * density of the range:<ul>  *<li>{@code ALL} if the range contains 65536 documents exactly,  *<li>{@code DENSE} if the range contains 4096 documents or more; in that  *       case documents are stored in a bit set,  *<li>{@code SPARSE} otherwise, and the lower 16 bits of the doc IDs are  *       stored in a {@link DataInput#readShort() short}.  *</ul>  *<p>Only ranges that contain at least one value are encoded.  *<p>This implementation uses 6 bytes per document in the worst-case, which happens  * in the case that all ranges contain exactly one document.  * @lucene.internal  */
end_comment

begin_class
DECL|class|IndexedDISI
specifier|final
class|class
name|IndexedDISI
extends|extends
name|DocIdSetIterator
block|{
DECL|field|MAX_ARRAY_LENGTH
specifier|static
specifier|final
name|int
name|MAX_ARRAY_LENGTH
init|=
operator|(
literal|1
operator|<<
literal|12
operator|)
operator|-
literal|1
decl_stmt|;
DECL|method|flush
specifier|private
specifier|static
name|void
name|flush
parameter_list|(
name|int
name|block
parameter_list|,
name|FixedBitSet
name|buffer
parameter_list|,
name|int
name|cardinality
parameter_list|,
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|block
operator|>=
literal|0
operator|&&
name|block
operator|<
literal|65536
assert|;
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|block
argument_list|)
expr_stmt|;
assert|assert
name|cardinality
operator|>
literal|0
operator|&&
name|cardinality
operator|<=
literal|65536
assert|;
name|out
operator|.
name|writeShort
argument_list|(
call|(
name|short
call|)
argument_list|(
name|cardinality
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|cardinality
operator|>
name|MAX_ARRAY_LENGTH
condition|)
block|{
if|if
condition|(
name|cardinality
operator|!=
literal|65536
condition|)
block|{
comment|// all docs are set
for|for
control|(
name|long
name|word
range|:
name|buffer
operator|.
name|getBits
argument_list|()
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|BitSetIterator
name|it
init|=
operator|new
name|BitSetIterator
argument_list|(
name|buffer
argument_list|,
name|cardinality
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
control|)
block|{
name|out
operator|.
name|writeShort
argument_list|(
operator|(
name|short
operator|)
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|writeBitSet
specifier|static
name|void
name|writeBitSet
parameter_list|(
name|DocIdSetIterator
name|it
parameter_list|,
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|final
name|FixedBitSet
name|buffer
init|=
operator|new
name|FixedBitSet
argument_list|(
literal|1
operator|<<
literal|16
argument_list|)
decl_stmt|;
name|int
name|prevBlock
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|int
name|block
init|=
name|doc
operator|>>>
literal|16
decl_stmt|;
if|if
condition|(
name|prevBlock
operator|!=
operator|-
literal|1
operator|&&
name|block
operator|!=
name|prevBlock
condition|)
block|{
name|flush
argument_list|(
name|prevBlock
argument_list|,
name|buffer
argument_list|,
name|i
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|prevBlock
operator|=
name|block
expr_stmt|;
name|i
operator|=
literal|0
expr_stmt|;
block|}
name|buffer
operator|.
name|set
argument_list|(
name|doc
operator|&
literal|0xFFFF
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
name|prevBlock
operator|=
name|block
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|flush
argument_list|(
name|prevBlock
argument_list|,
name|buffer
argument_list|,
name|i
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// NO_MORE_DOCS is stored explicitly
name|buffer
operator|.
name|set
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|&
literal|0xFFFF
argument_list|)
expr_stmt|;
name|flush
argument_list|(
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
operator|>>>
literal|16
argument_list|,
name|buffer
argument_list|,
literal|1
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|/** The slice that stores the {@link DocIdSetIterator}. */
DECL|field|slice
specifier|private
specifier|final
name|IndexInput
name|slice
decl_stmt|;
DECL|field|cost
specifier|private
specifier|final
name|long
name|cost
decl_stmt|;
DECL|method|IndexedDISI
name|IndexedDISI
parameter_list|(
name|IndexInput
name|in
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|length
parameter_list|,
name|long
name|cost
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|slice
operator|=
name|in
operator|.
name|slice
argument_list|(
literal|"docs"
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
block|}
DECL|field|block
specifier|private
name|int
name|block
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|blockEnd
specifier|private
name|long
name|blockEnd
decl_stmt|;
DECL|field|nextBlockIndex
specifier|private
name|int
name|nextBlockIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|method
name|Method
name|method
decl_stmt|;
DECL|field|doc
specifier|private
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|index
specifier|private
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
comment|// SPARSE variables
DECL|field|exists
name|boolean
name|exists
decl_stmt|;
comment|// DENSE variables
DECL|field|word
specifier|private
name|long
name|word
decl_stmt|;
DECL|field|wordIndex
specifier|private
name|int
name|wordIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// number of one bits encountered so far, including those of `word`
DECL|field|numberOfOnes
specifier|private
name|int
name|numberOfOnes
decl_stmt|;
comment|// ALL variables
DECL|field|gap
specifier|private
name|int
name|gap
decl_stmt|;
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetBlock
init|=
name|target
operator|&
literal|0xFFFF0000
decl_stmt|;
if|if
condition|(
name|block
operator|<
name|targetBlock
condition|)
block|{
name|advanceBlock
argument_list|(
name|targetBlock
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|block
operator|==
name|targetBlock
condition|)
block|{
if|if
condition|(
name|method
operator|.
name|advanceWithinBlock
argument_list|(
name|this
argument_list|,
name|target
argument_list|)
condition|)
block|{
return|return
name|doc
return|;
block|}
name|readBlockHeader
argument_list|()
expr_stmt|;
block|}
name|boolean
name|found
init|=
name|method
operator|.
name|advanceWithinBlock
argument_list|(
name|this
argument_list|,
name|block
argument_list|)
decl_stmt|;
assert|assert
name|found
assert|;
return|return
name|doc
return|;
block|}
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetBlock
init|=
name|target
operator|&
literal|0xFFFF0000
decl_stmt|;
if|if
condition|(
name|block
operator|<
name|targetBlock
condition|)
block|{
name|advanceBlock
argument_list|(
name|targetBlock
argument_list|)
expr_stmt|;
block|}
name|boolean
name|found
init|=
name|block
operator|==
name|targetBlock
operator|&&
name|method
operator|.
name|advanceExactWithinBlock
argument_list|(
name|this
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|this
operator|.
name|doc
operator|=
name|target
expr_stmt|;
return|return
name|found
return|;
block|}
DECL|method|advanceBlock
specifier|private
name|void
name|advanceBlock
parameter_list|(
name|int
name|targetBlock
parameter_list|)
throws|throws
name|IOException
block|{
do|do
block|{
name|slice
operator|.
name|seek
argument_list|(
name|blockEnd
argument_list|)
expr_stmt|;
name|readBlockHeader
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|block
operator|<
name|targetBlock
condition|)
do|;
block|}
DECL|method|readBlockHeader
specifier|private
name|void
name|readBlockHeader
parameter_list|()
throws|throws
name|IOException
block|{
name|block
operator|=
name|Short
operator|.
name|toUnsignedInt
argument_list|(
name|slice
operator|.
name|readShort
argument_list|()
argument_list|)
operator|<<
literal|16
expr_stmt|;
assert|assert
name|block
operator|>=
literal|0
assert|;
specifier|final
name|int
name|numValues
init|=
literal|1
operator|+
name|Short
operator|.
name|toUnsignedInt
argument_list|(
name|slice
operator|.
name|readShort
argument_list|()
argument_list|)
decl_stmt|;
name|index
operator|=
name|nextBlockIndex
expr_stmt|;
name|nextBlockIndex
operator|=
name|index
operator|+
name|numValues
expr_stmt|;
if|if
condition|(
name|numValues
operator|<=
name|MAX_ARRAY_LENGTH
condition|)
block|{
name|method
operator|=
name|Method
operator|.
name|SPARSE
expr_stmt|;
name|blockEnd
operator|=
name|slice
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
name|numValues
operator|<<
literal|1
operator|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|numValues
operator|==
literal|65536
condition|)
block|{
name|method
operator|=
name|Method
operator|.
name|ALL
expr_stmt|;
name|blockEnd
operator|=
name|slice
operator|.
name|getFilePointer
argument_list|()
expr_stmt|;
name|gap
operator|=
name|block
operator|-
name|index
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|method
operator|=
name|Method
operator|.
name|DENSE
expr_stmt|;
name|blockEnd
operator|=
name|slice
operator|.
name|getFilePointer
argument_list|()
operator|+
operator|(
literal|1
operator|<<
literal|13
operator|)
expr_stmt|;
name|wordIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|numberOfOnes
operator|=
name|index
operator|+
literal|1
expr_stmt|;
block|}
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
DECL|method|index
specifier|public
name|int
name|index
parameter_list|()
block|{
return|return
name|index
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
DECL|enum|Method
enum|enum
name|Method
block|{
DECL|enum constant|SPARSE
name|SPARSE
block|{
annotation|@
name|Override
name|boolean
name|advanceWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetInBlock
init|=
name|target
operator|&
literal|0xFFFF
decl_stmt|;
comment|// TODO: binary search
for|for
control|(
init|;
name|disi
operator|.
name|index
operator|<
name|disi
operator|.
name|nextBlockIndex
condition|;
control|)
block|{
name|int
name|doc
init|=
name|Short
operator|.
name|toUnsignedInt
argument_list|(
name|disi
operator|.
name|slice
operator|.
name|readShort
argument_list|()
argument_list|)
decl_stmt|;
name|disi
operator|.
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|targetInBlock
condition|)
block|{
name|disi
operator|.
name|doc
operator|=
name|disi
operator|.
name|block
operator||
name|doc
expr_stmt|;
name|disi
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|advanceExactWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetInBlock
init|=
name|target
operator|&
literal|0xFFFF
decl_stmt|;
comment|// TODO: binary search
if|if
condition|(
name|target
operator|==
name|disi
operator|.
name|doc
condition|)
block|{
return|return
name|disi
operator|.
name|exists
return|;
block|}
for|for
control|(
init|;
name|disi
operator|.
name|index
operator|<
name|disi
operator|.
name|nextBlockIndex
condition|;
control|)
block|{
name|int
name|doc
init|=
name|Short
operator|.
name|toUnsignedInt
argument_list|(
name|disi
operator|.
name|slice
operator|.
name|readShort
argument_list|()
argument_list|)
decl_stmt|;
name|disi
operator|.
name|index
operator|++
expr_stmt|;
if|if
condition|(
name|doc
operator|>=
name|targetInBlock
condition|)
block|{
if|if
condition|(
name|doc
operator|!=
name|targetInBlock
condition|)
block|{
name|disi
operator|.
name|index
operator|--
expr_stmt|;
name|disi
operator|.
name|slice
operator|.
name|seek
argument_list|(
name|disi
operator|.
name|slice
operator|.
name|getFilePointer
argument_list|()
operator|-
name|Short
operator|.
name|BYTES
argument_list|)
expr_stmt|;
break|break;
block|}
name|disi
operator|.
name|exists
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|disi
operator|.
name|exists
operator|=
literal|false
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|,
DECL|enum constant|DENSE
name|DENSE
block|{
annotation|@
name|Override
name|boolean
name|advanceWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetInBlock
init|=
name|target
operator|&
literal|0xFFFF
decl_stmt|;
specifier|final
name|int
name|targetWordIndex
init|=
name|targetInBlock
operator|>>>
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|disi
operator|.
name|wordIndex
operator|+
literal|1
init|;
name|i
operator|<=
name|targetWordIndex
condition|;
operator|++
name|i
control|)
block|{
name|disi
operator|.
name|word
operator|=
name|disi
operator|.
name|slice
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|disi
operator|.
name|numberOfOnes
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|disi
operator|.
name|word
argument_list|)
expr_stmt|;
block|}
name|disi
operator|.
name|wordIndex
operator|=
name|targetWordIndex
expr_stmt|;
name|long
name|leftBits
init|=
name|disi
operator|.
name|word
operator|>>>
name|target
decl_stmt|;
if|if
condition|(
name|leftBits
operator|!=
literal|0L
condition|)
block|{
name|disi
operator|.
name|doc
operator|=
name|target
operator|+
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|leftBits
argument_list|)
expr_stmt|;
name|disi
operator|.
name|index
operator|=
name|disi
operator|.
name|numberOfOnes
operator|-
name|Long
operator|.
name|bitCount
argument_list|(
name|leftBits
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
while|while
condition|(
operator|++
name|disi
operator|.
name|wordIndex
operator|<
literal|1024
condition|)
block|{
name|disi
operator|.
name|word
operator|=
name|disi
operator|.
name|slice
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|disi
operator|.
name|word
operator|!=
literal|0
condition|)
block|{
name|disi
operator|.
name|index
operator|=
name|disi
operator|.
name|numberOfOnes
expr_stmt|;
name|disi
operator|.
name|numberOfOnes
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|disi
operator|.
name|word
argument_list|)
expr_stmt|;
name|disi
operator|.
name|doc
operator|=
name|disi
operator|.
name|block
operator||
operator|(
name|disi
operator|.
name|wordIndex
operator|<<
literal|6
operator|)
operator||
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|disi
operator|.
name|word
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
name|boolean
name|advanceExactWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|targetInBlock
init|=
name|target
operator|&
literal|0xFFFF
decl_stmt|;
specifier|final
name|int
name|targetWordIndex
init|=
name|targetInBlock
operator|>>>
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|disi
operator|.
name|wordIndex
operator|+
literal|1
init|;
name|i
operator|<=
name|targetWordIndex
condition|;
operator|++
name|i
control|)
block|{
name|disi
operator|.
name|word
operator|=
name|disi
operator|.
name|slice
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|disi
operator|.
name|numberOfOnes
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|disi
operator|.
name|word
argument_list|)
expr_stmt|;
block|}
name|disi
operator|.
name|wordIndex
operator|=
name|targetWordIndex
expr_stmt|;
name|long
name|leftBits
init|=
name|disi
operator|.
name|word
operator|>>>
name|target
decl_stmt|;
name|disi
operator|.
name|index
operator|=
name|disi
operator|.
name|numberOfOnes
operator|-
name|Long
operator|.
name|bitCount
argument_list|(
name|leftBits
argument_list|)
expr_stmt|;
return|return
operator|(
name|leftBits
operator|&
literal|1L
operator|)
operator|!=
literal|0
return|;
block|}
block|}
block|,
DECL|enum constant|ALL
name|ALL
block|{
annotation|@
name|Override
name|boolean
name|advanceWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|disi
operator|.
name|doc
operator|=
name|target
expr_stmt|;
name|disi
operator|.
name|index
operator|=
name|target
operator|-
name|disi
operator|.
name|gap
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|boolean
name|advanceExactWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|disi
operator|.
name|index
operator|=
name|target
operator|-
name|disi
operator|.
name|gap
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|;
comment|/** Advance to the first doc from the block that is equal to or greater than {@code target}.      *  Return true if there is such a doc and false otherwise. */
DECL|method|advanceWithinBlock
specifier|abstract
name|boolean
name|advanceWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/** Advance the iterator exactly to the position corresponding to the given {@code target}      * and return whether this document exists. */
DECL|method|advanceExactWithinBlock
specifier|abstract
name|boolean
name|advanceExactWithinBlock
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|,
name|int
name|target
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
block|}
end_class

end_unit

