begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.lucene70
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|CodecUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|DocValuesProducer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|CorruptIndexException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexFileNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|PostingsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SegmentReadState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|TermsEnum
operator|.
name|SeekStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|ChecksumIndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|RandomAccessInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|LongValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|RamUsageEstimator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|DirectMonotonicReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|packed
operator|.
name|DirectReader
import|;
end_import

begin_comment
comment|/** reader for {@link Lucene70DocValuesFormat} */
end_comment

begin_class
DECL|class|Lucene70DocValuesProducer
specifier|final
class|class
name|Lucene70DocValuesProducer
extends|extends
name|DocValuesProducer
implements|implements
name|Closeable
block|{
DECL|field|numerics
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NumericEntry
argument_list|>
name|numerics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|binaries
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|BinaryEntry
argument_list|>
name|binaries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sorted
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedEntry
argument_list|>
name|sorted
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sortedSets
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedSetEntry
argument_list|>
name|sortedSets
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|sortedNumerics
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|SortedNumericEntry
argument_list|>
name|sortedNumerics
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
DECL|field|ramBytesUsed
specifier|private
name|long
name|ramBytesUsed
decl_stmt|;
DECL|field|data
specifier|private
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|maxDoc
specifier|private
specifier|final
name|int
name|maxDoc
decl_stmt|;
comment|/** expert: instantiates a new reader */
DECL|method|Lucene70DocValuesProducer
name|Lucene70DocValuesProducer
parameter_list|(
name|SegmentReadState
name|state
parameter_list|,
name|String
name|dataCodec
parameter_list|,
name|String
name|dataExtension
parameter_list|,
name|String
name|metaCodec
parameter_list|,
name|String
name|metaExtension
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|metaName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|metaExtension
argument_list|)
decl_stmt|;
name|this
operator|.
name|maxDoc
operator|=
name|state
operator|.
name|segmentInfo
operator|.
name|maxDoc
argument_list|()
expr_stmt|;
name|ramBytesUsed
operator|=
name|RamUsageEstimator
operator|.
name|shallowSizeOfInstance
argument_list|(
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
comment|// read in the entries from the metadata file.
try|try
init|(
name|ChecksumIndexInput
name|in
init|=
name|state
operator|.
name|directory
operator|.
name|openChecksumInput
argument_list|(
name|metaName
argument_list|,
name|state
operator|.
name|context
argument_list|)
init|)
block|{
name|Throwable
name|priorE
init|=
literal|null
decl_stmt|;
try|try
block|{
name|version
operator|=
name|CodecUtil
operator|.
name|checkIndexHeader
argument_list|(
name|in
argument_list|,
name|metaCodec
argument_list|,
name|Lucene70DocValuesFormat
operator|.
name|VERSION_START
argument_list|,
name|Lucene70DocValuesFormat
operator|.
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
expr_stmt|;
name|readFields
argument_list|(
name|in
argument_list|,
name|state
operator|.
name|fieldInfos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|exception
parameter_list|)
block|{
name|priorE
operator|=
name|exception
expr_stmt|;
block|}
finally|finally
block|{
name|CodecUtil
operator|.
name|checkFooter
argument_list|(
name|in
argument_list|,
name|priorE
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|dataName
init|=
name|IndexFileNames
operator|.
name|segmentFileName
argument_list|(
name|state
operator|.
name|segmentInfo
operator|.
name|name
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|,
name|dataExtension
argument_list|)
decl_stmt|;
name|this
operator|.
name|data
operator|=
name|state
operator|.
name|directory
operator|.
name|openInput
argument_list|(
name|dataName
argument_list|,
name|state
operator|.
name|context
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|version2
init|=
name|CodecUtil
operator|.
name|checkIndexHeader
argument_list|(
name|data
argument_list|,
name|dataCodec
argument_list|,
name|Lucene70DocValuesFormat
operator|.
name|VERSION_START
argument_list|,
name|Lucene70DocValuesFormat
operator|.
name|VERSION_CURRENT
argument_list|,
name|state
operator|.
name|segmentInfo
operator|.
name|getId
argument_list|()
argument_list|,
name|state
operator|.
name|segmentSuffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|version
operator|!=
name|version2
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Format versions mismatch: meta="
operator|+
name|version
operator|+
literal|", data="
operator|+
name|version2
argument_list|,
name|data
argument_list|)
throw|;
block|}
comment|// NOTE: data file is too costly to verify checksum against all the bytes on open,
comment|// but for now we at least verify proper structure of the checksum footer: which looks
comment|// for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption
comment|// such as file truncation.
name|CodecUtil
operator|.
name|retrieveChecksum
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|IOUtils
operator|.
name|closeWhileHandlingException
argument_list|(
name|this
operator|.
name|data
argument_list|)
expr_stmt|;
block|}
block|}
block|}
DECL|method|readFields
specifier|private
name|void
name|readFields
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|,
name|FieldInfos
name|infos
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|int
name|fieldNumber
init|=
name|meta
operator|.
name|readInt
argument_list|()
init|;
name|fieldNumber
operator|!=
operator|-
literal|1
condition|;
name|fieldNumber
operator|=
name|meta
operator|.
name|readInt
argument_list|()
control|)
block|{
name|FieldInfo
name|info
init|=
name|infos
operator|.
name|fieldInfo
argument_list|(
name|fieldNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Invalid field number: "
operator|+
name|fieldNumber
argument_list|,
name|meta
argument_list|)
throw|;
block|}
name|byte
name|type
init|=
name|meta
operator|.
name|readByte
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|Lucene70DocValuesFormat
operator|.
name|NUMERIC
condition|)
block|{
name|numerics
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|readNumeric
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene70DocValuesFormat
operator|.
name|BINARY
condition|)
block|{
name|binaries
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|readBinary
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene70DocValuesFormat
operator|.
name|SORTED
condition|)
block|{
name|sorted
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|readSorted
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene70DocValuesFormat
operator|.
name|SORTED_SET
condition|)
block|{
name|sortedSets
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|readSortedSet
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|Lucene70DocValuesFormat
operator|.
name|SORTED_NUMERIC
condition|)
block|{
name|sortedNumerics
operator|.
name|put
argument_list|(
name|info
operator|.
name|name
argument_list|,
name|readSortedNumeric
argument_list|(
name|meta
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid type: "
operator|+
name|type
argument_list|,
name|meta
argument_list|)
throw|;
block|}
block|}
block|}
DECL|method|readNumeric
specifier|private
name|NumericEntry
name|readNumeric
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericEntry
name|entry
init|=
operator|new
name|NumericEntry
argument_list|()
decl_stmt|;
name|readNumeric
argument_list|(
name|meta
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|readNumeric
specifier|private
name|void
name|readNumeric
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|,
name|NumericEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|entry
operator|.
name|docsWithFieldOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|docsWithFieldLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|numValues
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|int
name|tableSize
init|=
name|meta
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|tableSize
argument_list|<
operator|-
literal|1
operator|||
name|tableSize
argument_list|>
literal|256
condition|)
block|{
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"invalid table size: "
operator|+
name|tableSize
argument_list|,
name|meta
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableSize
operator|>=
literal|0
condition|)
block|{
name|entry
operator|.
name|table
operator|=
operator|new
name|long
index|[
name|tableSize
index|]
expr_stmt|;
name|ramBytesUsed
operator|+=
name|RamUsageEstimator
operator|.
name|sizeOf
argument_list|(
name|entry
operator|.
name|table
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tableSize
condition|;
operator|++
name|i
control|)
block|{
name|entry
operator|.
name|table
index|[
name|i
index|]
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
block|}
name|entry
operator|.
name|bitsPerValue
operator|=
name|meta
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|entry
operator|.
name|minValue
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|gcd
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|valuesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|valuesLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
DECL|method|readBinary
specifier|private
name|BinaryEntry
name|readBinary
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryEntry
name|entry
init|=
operator|new
name|BinaryEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|dataOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|dataLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|docsWithFieldOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|docsWithFieldLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|numDocsWithField
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|minLength
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|maxLength
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|minLength
operator|<
name|entry
operator|.
name|maxLength
condition|)
block|{
name|entry
operator|.
name|addressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|meta
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|entry
operator|.
name|addressesMeta
operator|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|meta
argument_list|,
name|entry
operator|.
name|numDocsWithField
operator|+
literal|1L
argument_list|,
name|blockShift
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|+=
name|entry
operator|.
name|addressesMeta
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addressesLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
DECL|method|readSorted
specifier|private
name|SortedEntry
name|readSorted
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedEntry
name|entry
init|=
operator|new
name|SortedEntry
argument_list|()
decl_stmt|;
name|entry
operator|.
name|docsWithFieldOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|docsWithFieldLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|numDocsWithField
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|bitsPerValue
operator|=
name|meta
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|entry
operator|.
name|ordsOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|ordsLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|readTermDict
argument_list|(
name|meta
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|readSortedSet
specifier|private
name|SortedSetEntry
name|readSortedSet
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetEntry
name|entry
init|=
operator|new
name|SortedSetEntry
argument_list|()
decl_stmt|;
name|byte
name|multiValued
init|=
name|meta
operator|.
name|readByte
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|multiValued
condition|)
block|{
case|case
literal|0
case|:
comment|// singlevalued
name|entry
operator|.
name|singleValueEntry
operator|=
name|readSorted
argument_list|(
name|meta
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
case|case
literal|1
case|:
comment|// multivalued
break|break;
default|default:
throw|throw
operator|new
name|CorruptIndexException
argument_list|(
literal|"Invalid multiValued flag: "
operator|+
name|multiValued
argument_list|,
name|meta
argument_list|)
throw|;
block|}
name|entry
operator|.
name|docsWithFieldOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|docsWithFieldLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|bitsPerValue
operator|=
name|meta
operator|.
name|readByte
argument_list|()
expr_stmt|;
name|entry
operator|.
name|ordsOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|ordsLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|numDocsWithField
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|meta
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|entry
operator|.
name|addressesMeta
operator|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|meta
argument_list|,
name|entry
operator|.
name|numDocsWithField
operator|+
literal|1
argument_list|,
name|blockShift
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|+=
name|entry
operator|.
name|addressesMeta
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addressesLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|readTermDict
argument_list|(
name|meta
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
DECL|method|readTermDict
specifier|private
specifier|static
name|void
name|readTermDict
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|,
name|TermsDictEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
name|entry
operator|.
name|termsDictSize
operator|=
name|meta
operator|.
name|readVLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsDictBlockShift
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|meta
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|long
name|addressesSize
init|=
operator|(
name|entry
operator|.
name|termsDictSize
operator|+
operator|(
literal|1L
operator|<<
name|entry
operator|.
name|termsDictBlockShift
operator|)
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictBlockShift
decl_stmt|;
name|entry
operator|.
name|termsAddressesMeta
operator|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|meta
argument_list|,
name|addressesSize
argument_list|,
name|blockShift
argument_list|)
expr_stmt|;
name|entry
operator|.
name|maxTermLength
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsDataOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsDataLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsAddressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsAddressesLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsDictIndexShift
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
specifier|final
name|long
name|indexSize
init|=
operator|(
name|entry
operator|.
name|termsDictSize
operator|+
operator|(
literal|1L
operator|<<
name|entry
operator|.
name|termsDictIndexShift
operator|)
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictIndexShift
decl_stmt|;
name|entry
operator|.
name|termsIndexAddressesMeta
operator|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|meta
argument_list|,
literal|1
operator|+
name|indexSize
argument_list|,
name|blockShift
argument_list|)
expr_stmt|;
name|entry
operator|.
name|termsIndexOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsIndexLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsIndexAddressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|entry
operator|.
name|termsIndexAddressesLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
DECL|method|readSortedNumeric
specifier|private
name|SortedNumericEntry
name|readSortedNumeric
parameter_list|(
name|ChecksumIndexInput
name|meta
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedNumericEntry
name|entry
init|=
operator|new
name|SortedNumericEntry
argument_list|()
decl_stmt|;
name|readNumeric
argument_list|(
name|meta
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|entry
operator|.
name|numDocsWithField
operator|=
name|meta
operator|.
name|readInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|numDocsWithField
operator|!=
name|entry
operator|.
name|numValues
condition|)
block|{
name|entry
operator|.
name|addressesOffset
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
specifier|final
name|int
name|blockShift
init|=
name|meta
operator|.
name|readVInt
argument_list|()
decl_stmt|;
name|entry
operator|.
name|addressesMeta
operator|=
name|DirectMonotonicReader
operator|.
name|loadMeta
argument_list|(
name|meta
argument_list|,
name|entry
operator|.
name|numDocsWithField
operator|+
literal|1
argument_list|,
name|blockShift
argument_list|)
expr_stmt|;
name|ramBytesUsed
operator|+=
name|entry
operator|.
name|addressesMeta
operator|.
name|ramBytesUsed
argument_list|()
expr_stmt|;
name|entry
operator|.
name|addressesLength
operator|=
name|meta
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
annotation|@
name|Override
DECL|method|close
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|data
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
DECL|class|NumericEntry
specifier|private
specifier|static
class|class
name|NumericEntry
block|{
DECL|field|table
name|long
index|[]
name|table
decl_stmt|;
DECL|field|bitsPerValue
name|byte
name|bitsPerValue
decl_stmt|;
DECL|field|docsWithFieldOffset
name|long
name|docsWithFieldOffset
decl_stmt|;
DECL|field|docsWithFieldLength
name|long
name|docsWithFieldLength
decl_stmt|;
DECL|field|numValues
name|long
name|numValues
decl_stmt|;
DECL|field|minValue
name|long
name|minValue
decl_stmt|;
DECL|field|gcd
name|long
name|gcd
decl_stmt|;
DECL|field|valuesOffset
name|long
name|valuesOffset
decl_stmt|;
DECL|field|valuesLength
name|long
name|valuesLength
decl_stmt|;
block|}
DECL|class|BinaryEntry
specifier|private
specifier|static
class|class
name|BinaryEntry
block|{
DECL|field|dataOffset
name|long
name|dataOffset
decl_stmt|;
DECL|field|dataLength
name|long
name|dataLength
decl_stmt|;
DECL|field|docsWithFieldOffset
name|long
name|docsWithFieldOffset
decl_stmt|;
DECL|field|docsWithFieldLength
name|long
name|docsWithFieldLength
decl_stmt|;
DECL|field|numDocsWithField
name|int
name|numDocsWithField
decl_stmt|;
DECL|field|minLength
name|int
name|minLength
decl_stmt|;
DECL|field|maxLength
name|int
name|maxLength
decl_stmt|;
DECL|field|addressesOffset
name|long
name|addressesOffset
decl_stmt|;
DECL|field|addressesLength
name|long
name|addressesLength
decl_stmt|;
DECL|field|addressesMeta
name|DirectMonotonicReader
operator|.
name|Meta
name|addressesMeta
decl_stmt|;
block|}
DECL|class|TermsDictEntry
specifier|private
specifier|static
class|class
name|TermsDictEntry
block|{
DECL|field|termsDictSize
name|long
name|termsDictSize
decl_stmt|;
DECL|field|termsDictBlockShift
name|int
name|termsDictBlockShift
decl_stmt|;
DECL|field|termsAddressesMeta
name|DirectMonotonicReader
operator|.
name|Meta
name|termsAddressesMeta
decl_stmt|;
DECL|field|maxTermLength
name|int
name|maxTermLength
decl_stmt|;
DECL|field|termsDataOffset
name|long
name|termsDataOffset
decl_stmt|;
DECL|field|termsDataLength
name|long
name|termsDataLength
decl_stmt|;
DECL|field|termsAddressesOffset
name|long
name|termsAddressesOffset
decl_stmt|;
DECL|field|termsAddressesLength
name|long
name|termsAddressesLength
decl_stmt|;
DECL|field|termsDictIndexShift
name|int
name|termsDictIndexShift
decl_stmt|;
DECL|field|termsIndexAddressesMeta
name|DirectMonotonicReader
operator|.
name|Meta
name|termsIndexAddressesMeta
decl_stmt|;
DECL|field|termsIndexOffset
name|long
name|termsIndexOffset
decl_stmt|;
DECL|field|termsIndexLength
name|long
name|termsIndexLength
decl_stmt|;
DECL|field|termsIndexAddressesOffset
name|long
name|termsIndexAddressesOffset
decl_stmt|;
DECL|field|termsIndexAddressesLength
name|long
name|termsIndexAddressesLength
decl_stmt|;
block|}
DECL|class|SortedEntry
specifier|private
specifier|static
class|class
name|SortedEntry
extends|extends
name|TermsDictEntry
block|{
DECL|field|docsWithFieldOffset
name|long
name|docsWithFieldOffset
decl_stmt|;
DECL|field|docsWithFieldLength
name|long
name|docsWithFieldLength
decl_stmt|;
DECL|field|numDocsWithField
name|int
name|numDocsWithField
decl_stmt|;
DECL|field|bitsPerValue
name|byte
name|bitsPerValue
decl_stmt|;
DECL|field|ordsOffset
name|long
name|ordsOffset
decl_stmt|;
DECL|field|ordsLength
name|long
name|ordsLength
decl_stmt|;
block|}
DECL|class|SortedSetEntry
specifier|private
specifier|static
class|class
name|SortedSetEntry
extends|extends
name|TermsDictEntry
block|{
DECL|field|singleValueEntry
name|SortedEntry
name|singleValueEntry
decl_stmt|;
DECL|field|docsWithFieldOffset
name|long
name|docsWithFieldOffset
decl_stmt|;
DECL|field|docsWithFieldLength
name|long
name|docsWithFieldLength
decl_stmt|;
DECL|field|numDocsWithField
name|int
name|numDocsWithField
decl_stmt|;
DECL|field|bitsPerValue
name|byte
name|bitsPerValue
decl_stmt|;
DECL|field|ordsOffset
name|long
name|ordsOffset
decl_stmt|;
DECL|field|ordsLength
name|long
name|ordsLength
decl_stmt|;
DECL|field|addressesMeta
name|DirectMonotonicReader
operator|.
name|Meta
name|addressesMeta
decl_stmt|;
DECL|field|addressesOffset
name|long
name|addressesOffset
decl_stmt|;
DECL|field|addressesLength
name|long
name|addressesLength
decl_stmt|;
block|}
DECL|class|SortedNumericEntry
specifier|private
specifier|static
class|class
name|SortedNumericEntry
extends|extends
name|NumericEntry
block|{
DECL|field|numDocsWithField
name|int
name|numDocsWithField
decl_stmt|;
DECL|field|addressesMeta
name|DirectMonotonicReader
operator|.
name|Meta
name|addressesMeta
decl_stmt|;
DECL|field|addressesOffset
name|long
name|addressesOffset
decl_stmt|;
DECL|field|addressesLength
name|long
name|addressesLength
decl_stmt|;
block|}
annotation|@
name|Override
DECL|method|ramBytesUsed
specifier|public
name|long
name|ramBytesUsed
parameter_list|()
block|{
return|return
name|ramBytesUsed
return|;
block|}
annotation|@
name|Override
DECL|method|getNumeric
specifier|public
name|NumericDocValues
name|getNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|NumericEntry
name|entry
init|=
name|numerics
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
return|return
name|getNumeric
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|class|DenseNumericDocValues
specifier|private
specifier|static
specifier|abstract
class|class
name|DenseNumericDocValues
extends|extends
name|NumericDocValues
block|{
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|DenseNumericDocValues
name|DenseNumericDocValues
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
return|return
name|doc
operator|=
name|target
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
block|{
name|doc
operator|=
name|target
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
block|}
DECL|class|SparseNumericDocValues
specifier|private
specifier|static
specifier|abstract
class|class
name|SparseNumericDocValues
extends|extends
name|NumericDocValues
block|{
DECL|field|disi
specifier|final
name|IndexedDISI
name|disi
decl_stmt|;
DECL|method|SparseNumericDocValues
name|SparseNumericDocValues
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|)
block|{
name|this
operator|.
name|disi
operator|=
name|disi
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|disi
operator|.
name|cost
argument_list|()
return|;
block|}
block|}
DECL|method|getNumeric
specifier|private
name|NumericDocValues
name|getNumeric
parameter_list|(
name|NumericEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|2
condition|)
block|{
comment|// empty
return|return
name|DocValues
operator|.
name|emptyNumeric
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|1
condition|)
block|{
comment|// dense
if|if
condition|(
name|entry
operator|.
name|bitsPerValue
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|DenseNumericDocValues
argument_list|(
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|entry
operator|.
name|minValue
return|;
block|}
block|}
return|;
block|}
else|else
block|{
specifier|final
name|RandomAccessInput
name|slice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|valuesOffset
argument_list|,
name|entry
operator|.
name|valuesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|values
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|table
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
index|[]
name|table
init|=
name|entry
operator|.
name|table
decl_stmt|;
return|return
operator|new
name|DenseNumericDocValues
argument_list|(
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|table
index|[
operator|(
name|int
operator|)
name|values
operator|.
name|get
argument_list|(
name|doc
argument_list|)
index|]
return|;
block|}
block|}
return|;
block|}
else|else
block|{
specifier|final
name|long
name|mul
init|=
name|entry
operator|.
name|gcd
decl_stmt|;
specifier|final
name|long
name|delta
init|=
name|entry
operator|.
name|minValue
decl_stmt|;
return|return
operator|new
name|DenseNumericDocValues
argument_list|(
name|maxDoc
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|mul
operator|*
name|values
operator|.
name|get
argument_list|(
name|doc
argument_list|)
operator|+
name|delta
return|;
block|}
block|}
return|;
block|}
block|}
block|}
else|else
block|{
comment|// sparse
specifier|final
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|docsWithFieldOffset
argument_list|,
name|entry
operator|.
name|docsWithFieldLength
argument_list|,
name|entry
operator|.
name|numValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|bitsPerValue
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|SparseNumericDocValues
argument_list|(
name|disi
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|entry
operator|.
name|minValue
return|;
block|}
block|}
return|;
block|}
else|else
block|{
specifier|final
name|RandomAccessInput
name|slice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|valuesOffset
argument_list|,
name|entry
operator|.
name|valuesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|values
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|table
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
index|[]
name|table
init|=
name|entry
operator|.
name|table
decl_stmt|;
return|return
operator|new
name|SparseNumericDocValues
argument_list|(
name|disi
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|table
index|[
operator|(
name|int
operator|)
name|values
operator|.
name|get
argument_list|(
name|disi
operator|.
name|index
argument_list|()
argument_list|)
index|]
return|;
block|}
block|}
return|;
block|}
else|else
block|{
specifier|final
name|long
name|mul
init|=
name|entry
operator|.
name|gcd
decl_stmt|;
specifier|final
name|long
name|delta
init|=
name|entry
operator|.
name|minValue
decl_stmt|;
return|return
operator|new
name|SparseNumericDocValues
argument_list|(
name|disi
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|long
name|longValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|mul
operator|*
name|values
operator|.
name|get
argument_list|(
name|disi
operator|.
name|index
argument_list|()
argument_list|)
operator|+
name|delta
return|;
block|}
block|}
return|;
block|}
block|}
block|}
block|}
DECL|method|getNumericValues
specifier|private
name|LongValues
name|getNumericValues
parameter_list|(
name|NumericEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entry
operator|.
name|bitsPerValue
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|entry
operator|.
name|minValue
return|;
block|}
block|}
return|;
block|}
else|else
block|{
specifier|final
name|RandomAccessInput
name|slice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|valuesOffset
argument_list|,
name|entry
operator|.
name|valuesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|values
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|table
operator|!=
literal|null
condition|)
block|{
specifier|final
name|long
index|[]
name|table
init|=
name|entry
operator|.
name|table
decl_stmt|;
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|table
index|[
operator|(
name|int
operator|)
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
index|]
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|gcd
operator|!=
literal|1
condition|)
block|{
specifier|final
name|long
name|gcd
init|=
name|entry
operator|.
name|gcd
decl_stmt|;
specifier|final
name|long
name|minValue
init|=
name|entry
operator|.
name|minValue
decl_stmt|;
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|*
name|gcd
operator|+
name|minValue
return|;
block|}
block|}
return|;
block|}
elseif|else
if|if
condition|(
name|entry
operator|.
name|minValue
operator|!=
literal|0
condition|)
block|{
specifier|final
name|long
name|minValue
init|=
name|entry
operator|.
name|minValue
decl_stmt|;
return|return
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|+
name|minValue
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|values
return|;
block|}
block|}
block|}
DECL|class|DenseBinaryDocValues
specifier|private
specifier|static
specifier|abstract
class|class
name|DenseBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|DenseBinaryDocValues
name|DenseBinaryDocValues
parameter_list|(
name|int
name|maxDoc
parameter_list|)
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
return|return
name|doc
operator|=
name|target
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|doc
operator|=
name|target
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
DECL|class|SparseBinaryDocValues
specifier|private
specifier|static
specifier|abstract
class|class
name|SparseBinaryDocValues
extends|extends
name|BinaryDocValues
block|{
DECL|field|disi
specifier|final
name|IndexedDISI
name|disi
decl_stmt|;
DECL|method|SparseBinaryDocValues
name|SparseBinaryDocValues
parameter_list|(
name|IndexedDISI
name|disi
parameter_list|)
block|{
name|this
operator|.
name|disi
operator|=
name|disi
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|disi
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|advanceExact
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getBinary
specifier|public
name|BinaryDocValues
name|getBinary
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|BinaryEntry
name|entry
init|=
name|binaries
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|2
condition|)
block|{
return|return
name|DocValues
operator|.
name|emptyBinary
argument_list|()
return|;
block|}
specifier|final
name|IndexInput
name|bytesSlice
init|=
name|data
operator|.
name|slice
argument_list|(
literal|"fixed-binary"
argument_list|,
name|entry
operator|.
name|dataOffset
argument_list|,
name|entry
operator|.
name|dataLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|1
condition|)
block|{
comment|// dense
if|if
condition|(
name|entry
operator|.
name|minLength
operator|==
name|entry
operator|.
name|maxLength
condition|)
block|{
comment|// fixed length
specifier|final
name|int
name|length
init|=
name|entry
operator|.
name|maxLength
decl_stmt|;
return|return
operator|new
name|DenseBinaryDocValues
argument_list|(
name|maxDoc
argument_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|length
index|]
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
throws|throws
name|IOException
block|{
name|bytesSlice
operator|.
name|seek
argument_list|(
operator|(
name|long
operator|)
name|doc
operator|*
name|length
argument_list|)
expr_stmt|;
name|bytesSlice
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// variable length
specifier|final
name|RandomAccessInput
name|addressesData
init|=
name|this
operator|.
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|addressesOffset
argument_list|,
name|entry
operator|.
name|addressesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|addresses
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|addressesMeta
argument_list|,
name|addressesData
argument_list|)
decl_stmt|;
return|return
operator|new
name|DenseBinaryDocValues
argument_list|(
name|maxDoc
argument_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|entry
operator|.
name|maxLength
index|]
argument_list|,
literal|0
argument_list|,
name|entry
operator|.
name|maxLength
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|startOffset
init|=
name|addresses
operator|.
name|get
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|length
operator|=
call|(
name|int
call|)
argument_list|(
name|addresses
operator|.
name|get
argument_list|(
name|doc
operator|+
literal|1L
argument_list|)
operator|-
name|startOffset
argument_list|)
expr_stmt|;
name|bytesSlice
operator|.
name|seek
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|bytesSlice
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
return|;
block|}
block|}
else|else
block|{
comment|// sparse
specifier|final
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|docsWithFieldOffset
argument_list|,
name|entry
operator|.
name|docsWithFieldLength
argument_list|,
name|entry
operator|.
name|numDocsWithField
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|minLength
operator|==
name|entry
operator|.
name|maxLength
condition|)
block|{
comment|// fixed length
specifier|final
name|int
name|length
init|=
name|entry
operator|.
name|maxLength
decl_stmt|;
return|return
operator|new
name|SparseBinaryDocValues
argument_list|(
name|disi
argument_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|length
index|]
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
throws|throws
name|IOException
block|{
name|bytesSlice
operator|.
name|seek
argument_list|(
operator|(
name|long
operator|)
name|disi
operator|.
name|index
argument_list|()
operator|*
name|length
argument_list|)
expr_stmt|;
name|bytesSlice
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// variable length
specifier|final
name|RandomAccessInput
name|addressesData
init|=
name|this
operator|.
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|addressesOffset
argument_list|,
name|entry
operator|.
name|addressesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|addresses
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|addressesMeta
argument_list|,
name|addressesData
argument_list|)
decl_stmt|;
return|return
operator|new
name|SparseBinaryDocValues
argument_list|(
name|disi
argument_list|)
block|{
specifier|final
name|BytesRef
name|bytes
init|=
operator|new
name|BytesRef
argument_list|(
operator|new
name|byte
index|[
name|entry
operator|.
name|maxLength
index|]
argument_list|,
literal|0
argument_list|,
name|entry
operator|.
name|maxLength
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|BytesRef
name|binaryValue
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|index
init|=
name|disi
operator|.
name|index
argument_list|()
decl_stmt|;
name|long
name|startOffset
init|=
name|addresses
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|length
operator|=
call|(
name|int
call|)
argument_list|(
name|addresses
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1L
argument_list|)
operator|-
name|startOffset
argument_list|)
expr_stmt|;
name|bytesSlice
operator|.
name|seek
argument_list|(
name|startOffset
argument_list|)
expr_stmt|;
name|bytesSlice
operator|.
name|readBytes
argument_list|(
name|bytes
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|bytes
return|;
block|}
block|}
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|getSorted
specifier|public
name|SortedDocValues
name|getSorted
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedEntry
name|entry
init|=
name|sorted
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
return|return
name|getSorted
argument_list|(
name|entry
argument_list|)
return|;
block|}
DECL|method|getSorted
specifier|private
name|SortedDocValues
name|getSorted
parameter_list|(
name|SortedEntry
name|entry
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|2
condition|)
block|{
return|return
name|DocValues
operator|.
name|emptySorted
argument_list|()
return|;
block|}
specifier|final
name|LongValues
name|ords
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|bitsPerValue
operator|==
literal|0
condition|)
block|{
name|ords
operator|=
operator|new
name|LongValues
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|long
name|get
parameter_list|(
name|long
name|index
parameter_list|)
block|{
return|return
literal|0L
return|;
block|}
block|}
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|RandomAccessInput
name|slice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|ordsOffset
argument_list|,
name|entry
operator|.
name|ordsLength
argument_list|)
decl_stmt|;
name|ords
operator|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|1
condition|)
block|{
comment|// dense
return|return
operator|new
name|BaseSortedDocValues
argument_list|(
name|entry
argument_list|,
name|data
argument_list|)
block|{
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
return|return
name|doc
operator|=
name|target
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
block|{
name|doc
operator|=
name|target
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|ordValue
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|ords
operator|.
name|get
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// sparse
specifier|final
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|docsWithFieldOffset
argument_list|,
name|entry
operator|.
name|docsWithFieldLength
argument_list|,
name|entry
operator|.
name|numDocsWithField
argument_list|)
decl_stmt|;
return|return
operator|new
name|BaseSortedDocValues
argument_list|(
name|entry
argument_list|,
name|data
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|disi
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|disi
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|ordValue
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|ords
operator|.
name|get
argument_list|(
name|disi
operator|.
name|index
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
DECL|class|BaseSortedDocValues
specifier|private
specifier|static
specifier|abstract
class|class
name|BaseSortedDocValues
extends|extends
name|SortedDocValues
block|{
DECL|field|entry
specifier|final
name|SortedEntry
name|entry
decl_stmt|;
DECL|field|data
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|termsEnum
specifier|final
name|TermsEnum
name|termsEnum
decl_stmt|;
DECL|method|BaseSortedDocValues
name|BaseSortedDocValues
parameter_list|(
name|SortedEntry
name|entry
parameter_list|,
name|IndexInput
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|termsEnum
operator|=
name|termsEnum
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|int
name|getValueCount
parameter_list|()
block|{
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|entry
operator|.
name|termsDictSize
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|int
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
return|return
name|termsEnum
operator|.
name|term
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|int
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|key
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|FOUND
case|:
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
name|termsEnum
operator|.
name|ord
argument_list|()
argument_list|)
return|;
default|default:
return|return
name|Math
operator|.
name|toIntExact
argument_list|(
operator|-
literal|1L
operator|-
name|termsEnum
operator|.
name|ord
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|termsEnum
specifier|public
name|TermsEnum
name|termsEnum
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TermsDict
argument_list|(
name|entry
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
DECL|class|BaseSortedSetDocValues
specifier|private
specifier|static
specifier|abstract
class|class
name|BaseSortedSetDocValues
extends|extends
name|SortedSetDocValues
block|{
DECL|field|entry
specifier|final
name|SortedSetEntry
name|entry
decl_stmt|;
DECL|field|data
specifier|final
name|IndexInput
name|data
decl_stmt|;
DECL|field|termsEnum
specifier|final
name|TermsEnum
name|termsEnum
decl_stmt|;
DECL|method|BaseSortedSetDocValues
name|BaseSortedSetDocValues
parameter_list|(
name|SortedSetEntry
name|entry
parameter_list|,
name|IndexInput
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|termsEnum
operator|=
name|termsEnum
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getValueCount
specifier|public
name|long
name|getValueCount
parameter_list|()
block|{
return|return
name|entry
operator|.
name|termsDictSize
return|;
block|}
annotation|@
name|Override
DECL|method|lookupOrd
specifier|public
name|BytesRef
name|lookupOrd
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
name|termsEnum
operator|.
name|seekExact
argument_list|(
name|ord
argument_list|)
expr_stmt|;
return|return
name|termsEnum
operator|.
name|term
argument_list|()
return|;
block|}
annotation|@
name|Override
DECL|method|lookupTerm
specifier|public
name|long
name|lookupTerm
parameter_list|(
name|BytesRef
name|key
parameter_list|)
throws|throws
name|IOException
block|{
name|SeekStatus
name|status
init|=
name|termsEnum
operator|.
name|seekCeil
argument_list|(
name|key
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|FOUND
case|:
return|return
name|termsEnum
operator|.
name|ord
argument_list|()
return|;
default|default:
return|return
operator|-
literal|1L
operator|-
name|termsEnum
operator|.
name|ord
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|termsEnum
specifier|public
name|TermsEnum
name|termsEnum
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TermsDict
argument_list|(
name|entry
argument_list|,
name|data
argument_list|)
return|;
block|}
block|}
DECL|class|TermsDict
specifier|private
specifier|static
class|class
name|TermsDict
extends|extends
name|TermsEnum
block|{
DECL|field|entry
specifier|final
name|TermsDictEntry
name|entry
decl_stmt|;
DECL|field|blockAddresses
specifier|final
name|LongValues
name|blockAddresses
decl_stmt|;
DECL|field|bytes
specifier|final
name|IndexInput
name|bytes
decl_stmt|;
DECL|field|blockMask
specifier|final
name|long
name|blockMask
decl_stmt|;
DECL|field|indexAddresses
specifier|final
name|LongValues
name|indexAddresses
decl_stmt|;
DECL|field|indexBytes
specifier|final
name|IndexInput
name|indexBytes
decl_stmt|;
DECL|field|term
specifier|final
name|BytesRef
name|term
decl_stmt|;
DECL|field|ord
name|long
name|ord
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|TermsDict
name|TermsDict
parameter_list|(
name|TermsDictEntry
name|entry
parameter_list|,
name|IndexInput
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|entry
operator|=
name|entry
expr_stmt|;
name|RandomAccessInput
name|addressesSlice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|termsAddressesOffset
argument_list|,
name|entry
operator|.
name|termsAddressesLength
argument_list|)
decl_stmt|;
name|blockAddresses
operator|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|termsAddressesMeta
argument_list|,
name|addressesSlice
argument_list|)
expr_stmt|;
name|bytes
operator|=
name|data
operator|.
name|slice
argument_list|(
literal|"terms"
argument_list|,
name|entry
operator|.
name|termsDataOffset
argument_list|,
name|entry
operator|.
name|termsDataLength
argument_list|)
expr_stmt|;
name|blockMask
operator|=
operator|(
literal|1L
operator|<<
name|entry
operator|.
name|termsDictBlockShift
operator|)
operator|-
literal|1
expr_stmt|;
name|RandomAccessInput
name|indexAddressesSlice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|termsIndexAddressesOffset
argument_list|,
name|entry
operator|.
name|termsIndexAddressesLength
argument_list|)
decl_stmt|;
name|indexAddresses
operator|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|termsIndexAddressesMeta
argument_list|,
name|indexAddressesSlice
argument_list|)
expr_stmt|;
name|indexBytes
operator|=
name|data
operator|.
name|slice
argument_list|(
literal|"terms-index"
argument_list|,
name|entry
operator|.
name|termsIndexOffset
argument_list|,
name|entry
operator|.
name|termsIndexLength
argument_list|)
expr_stmt|;
name|term
operator|=
operator|new
name|BytesRef
argument_list|(
name|entry
operator|.
name|maxTermLength
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|next
specifier|public
name|BytesRef
name|next
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|++
name|ord
operator|>=
name|entry
operator|.
name|termsDictSize
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|(
name|ord
operator|&
name|blockMask
operator|)
operator|==
literal|0L
condition|)
block|{
name|term
operator|.
name|length
operator|=
name|bytes
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|token
init|=
name|Byte
operator|.
name|toUnsignedInt
argument_list|(
name|bytes
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|prefixLength
init|=
name|token
operator|&
literal|0x0F
decl_stmt|;
name|int
name|suffixLength
init|=
literal|1
operator|+
operator|(
name|token
operator|>>>
literal|4
operator|)
decl_stmt|;
if|if
condition|(
name|prefixLength
operator|==
literal|15
condition|)
block|{
name|prefixLength
operator|+=
name|bytes
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|suffixLength
operator|==
literal|16
condition|)
block|{
name|suffixLength
operator|+=
name|bytes
operator|.
name|readVInt
argument_list|()
expr_stmt|;
block|}
name|term
operator|.
name|length
operator|=
name|prefixLength
operator|+
name|suffixLength
expr_stmt|;
name|bytes
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
name|prefixLength
argument_list|,
name|suffixLength
argument_list|)
expr_stmt|;
block|}
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|seekExact
specifier|public
name|void
name|seekExact
parameter_list|(
name|long
name|ord
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|ord
operator|<
literal|0
operator|||
name|ord
operator|>=
name|entry
operator|.
name|termsDictSize
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
specifier|final
name|long
name|blockIndex
init|=
name|ord
operator|>>>
name|entry
operator|.
name|termsDictBlockShift
decl_stmt|;
specifier|final
name|long
name|blockAddress
init|=
name|blockAddresses
operator|.
name|get
argument_list|(
name|blockIndex
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|seek
argument_list|(
name|blockAddress
argument_list|)
expr_stmt|;
name|this
operator|.
name|ord
operator|=
operator|(
name|blockIndex
operator|<<
name|entry
operator|.
name|termsDictBlockShift
operator|)
operator|-
literal|1
expr_stmt|;
do|do
block|{
name|next
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|this
operator|.
name|ord
operator|<
name|ord
condition|)
do|;
block|}
DECL|method|getTermFromIndex
specifier|private
name|BytesRef
name|getTermFromIndex
parameter_list|(
name|long
name|index
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<=
operator|(
name|entry
operator|.
name|termsDictSize
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictIndexShift
assert|;
specifier|final
name|long
name|start
init|=
name|indexAddresses
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|term
operator|.
name|length
operator|=
call|(
name|int
call|)
argument_list|(
name|indexAddresses
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1
argument_list|)
operator|-
name|start
argument_list|)
expr_stmt|;
name|indexBytes
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|indexBytes
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
DECL|method|seekTermsIndex
specifier|private
name|long
name|seekTermsIndex
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|lo
init|=
literal|0L
decl_stmt|;
name|long
name|hi
init|=
operator|(
name|entry
operator|.
name|termsDictSize
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictIndexShift
decl_stmt|;
while|while
condition|(
name|lo
operator|<=
name|hi
condition|)
block|{
specifier|final
name|long
name|mid
init|=
operator|(
name|lo
operator|+
name|hi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|getTermFromIndex
argument_list|(
name|mid
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cmp
init|=
name|term
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
name|lo
operator|=
name|mid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|hi
operator|=
name|mid
operator|-
literal|1
expr_stmt|;
block|}
block|}
assert|assert
name|hi
operator|<
literal|0
operator|||
name|getTermFromIndex
argument_list|(
name|hi
argument_list|)
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|<=
literal|0
assert|;
assert|assert
name|hi
operator|==
operator|(
operator|(
name|entry
operator|.
name|termsDictSize
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictIndexShift
operator|)
operator|||
name|getTermFromIndex
argument_list|(
name|hi
operator|+
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|>
literal|0
assert|;
return|return
name|hi
return|;
block|}
DECL|method|getFirstTermFromBlock
specifier|private
name|BytesRef
name|getFirstTermFromBlock
parameter_list|(
name|long
name|block
parameter_list|)
throws|throws
name|IOException
block|{
assert|assert
name|block
operator|>=
literal|0
operator|&&
name|block
operator|<=
operator|(
name|entry
operator|.
name|termsDictSize
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictBlockShift
assert|;
specifier|final
name|long
name|blockAddress
init|=
name|blockAddresses
operator|.
name|get
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|bytes
operator|.
name|seek
argument_list|(
name|blockAddress
argument_list|)
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|bytes
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|term
return|;
block|}
DECL|method|seekBlock
specifier|private
name|long
name|seekBlock
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|index
init|=
name|seekTermsIndex
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1L
condition|)
block|{
return|return
operator|-
literal|1L
return|;
block|}
name|long
name|ordLo
init|=
name|index
operator|<<
name|entry
operator|.
name|termsDictIndexShift
decl_stmt|;
name|long
name|ordHi
init|=
name|Math
operator|.
name|min
argument_list|(
name|entry
operator|.
name|termsDictSize
argument_list|,
name|ordLo
operator|+
operator|(
literal|1L
operator|<<
name|entry
operator|.
name|termsDictIndexShift
operator|)
argument_list|)
operator|-
literal|1L
decl_stmt|;
name|long
name|blockLo
init|=
name|ordLo
operator|>>>
name|entry
operator|.
name|termsDictBlockShift
decl_stmt|;
name|long
name|blockHi
init|=
name|ordHi
operator|>>>
name|entry
operator|.
name|termsDictBlockShift
decl_stmt|;
while|while
condition|(
name|blockLo
operator|<=
name|blockHi
condition|)
block|{
specifier|final
name|long
name|blockMid
init|=
operator|(
name|blockLo
operator|+
name|blockHi
operator|)
operator|>>>
literal|1
decl_stmt|;
name|getFirstTermFromBlock
argument_list|(
name|blockMid
argument_list|)
expr_stmt|;
specifier|final
name|int
name|cmp
init|=
name|term
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|<=
literal|0
condition|)
block|{
name|blockLo
operator|=
name|blockMid
operator|+
literal|1
expr_stmt|;
block|}
else|else
block|{
name|blockHi
operator|=
name|blockMid
operator|-
literal|1
expr_stmt|;
block|}
block|}
assert|assert
name|blockHi
operator|<
literal|0
operator|||
name|getFirstTermFromBlock
argument_list|(
name|blockHi
argument_list|)
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|<=
literal|0
assert|;
assert|assert
name|blockHi
operator|==
operator|(
operator|(
name|entry
operator|.
name|termsDictSize
operator|-
literal|1
operator|)
operator|>>>
name|entry
operator|.
name|termsDictBlockShift
operator|)
operator|||
name|getFirstTermFromBlock
argument_list|(
name|blockHi
operator|+
literal|1
argument_list|)
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
operator|>
literal|0
assert|;
return|return
name|blockHi
return|;
block|}
annotation|@
name|Override
DECL|method|seekCeil
specifier|public
name|SeekStatus
name|seekCeil
parameter_list|(
name|BytesRef
name|text
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|long
name|block
init|=
name|seekBlock
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|block
operator|==
operator|-
literal|1
condition|)
block|{
comment|// before the first term
name|seekExact
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
specifier|final
name|long
name|blockAddress
init|=
name|blockAddresses
operator|.
name|get
argument_list|(
name|block
argument_list|)
decl_stmt|;
name|this
operator|.
name|ord
operator|=
name|block
operator|<<
name|entry
operator|.
name|termsDictBlockShift
expr_stmt|;
name|bytes
operator|.
name|seek
argument_list|(
name|blockAddress
argument_list|)
expr_stmt|;
name|term
operator|.
name|length
operator|=
name|bytes
operator|.
name|readVInt
argument_list|()
expr_stmt|;
name|bytes
operator|.
name|readBytes
argument_list|(
name|term
operator|.
name|bytes
argument_list|,
literal|0
argument_list|,
name|term
operator|.
name|length
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|cmp
init|=
name|term
operator|.
name|compareTo
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|FOUND
return|;
block|}
elseif|else
if|if
condition|(
name|cmp
operator|>
literal|0
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|NOT_FOUND
return|;
block|}
if|if
condition|(
name|next
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|SeekStatus
operator|.
name|END
return|;
block|}
block|}
block|}
annotation|@
name|Override
DECL|method|term
specifier|public
name|BytesRef
name|term
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|term
return|;
block|}
annotation|@
name|Override
DECL|method|ord
specifier|public
name|long
name|ord
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|ord
return|;
block|}
annotation|@
name|Override
DECL|method|totalTermFreq
specifier|public
name|long
name|totalTermFreq
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1L
return|;
block|}
annotation|@
name|Override
DECL|method|postings
specifier|public
name|PostingsEnum
name|postings
parameter_list|(
name|PostingsEnum
name|reuse
parameter_list|,
name|int
name|flags
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
DECL|method|docFreq
specifier|public
name|int
name|docFreq
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedNumeric
specifier|public
name|SortedNumericDocValues
name|getSortedNumeric
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedNumericEntry
name|entry
init|=
name|sortedNumerics
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|numValues
operator|==
name|entry
operator|.
name|numDocsWithField
condition|)
block|{
return|return
name|DocValues
operator|.
name|singleton
argument_list|(
name|getNumeric
argument_list|(
name|entry
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|RandomAccessInput
name|addressesInput
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|addressesOffset
argument_list|,
name|entry
operator|.
name|addressesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|addresses
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|addressesMeta
argument_list|,
name|addressesInput
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|values
init|=
name|getNumericValues
argument_list|(
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|1
condition|)
block|{
comment|// dense
return|return
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|start
decl_stmt|,
name|end
decl_stmt|;
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|start
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|end
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|count
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
return|return
name|doc
operator|=
name|target
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|start
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|end
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|count
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|doc
operator|=
name|target
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|start
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// sparse
specifier|final
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|docsWithFieldOffset
argument_list|,
name|entry
operator|.
name|docsWithFieldLength
argument_list|,
name|entry
operator|.
name|numDocsWithField
argument_list|)
decl_stmt|;
return|return
operator|new
name|SortedNumericDocValues
argument_list|()
block|{
name|boolean
name|set
decl_stmt|;
name|long
name|start
decl_stmt|,
name|end
decl_stmt|;
name|int
name|count
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|set
operator|=
literal|false
expr_stmt|;
return|return
name|disi
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|disi
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|set
operator|=
literal|false
expr_stmt|;
return|return
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|set
operator|=
literal|false
expr_stmt|;
return|return
name|disi
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextValue
parameter_list|()
throws|throws
name|IOException
block|{
name|set
argument_list|()
expr_stmt|;
return|return
name|values
operator|.
name|get
argument_list|(
name|start
operator|++
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docValueCount
parameter_list|()
block|{
name|set
argument_list|()
expr_stmt|;
return|return
name|count
return|;
block|}
specifier|private
name|void
name|set
parameter_list|()
block|{
if|if
condition|(
name|set
operator|==
literal|false
condition|)
block|{
specifier|final
name|int
name|index
init|=
name|disi
operator|.
name|index
argument_list|()
decl_stmt|;
name|start
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|end
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|count
operator|=
call|(
name|int
call|)
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|set
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|getSortedSet
specifier|public
name|SortedSetDocValues
name|getSortedSet
parameter_list|(
name|FieldInfo
name|field
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedSetEntry
name|entry
init|=
name|sortedSets
operator|.
name|get
argument_list|(
name|field
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|singleValueEntry
operator|!=
literal|null
condition|)
block|{
return|return
name|DocValues
operator|.
name|singleton
argument_list|(
name|getSorted
argument_list|(
name|entry
operator|.
name|singleValueEntry
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|RandomAccessInput
name|slice
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|ordsOffset
argument_list|,
name|entry
operator|.
name|ordsLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|ords
init|=
name|DirectReader
operator|.
name|getInstance
argument_list|(
name|slice
argument_list|,
name|entry
operator|.
name|bitsPerValue
argument_list|)
decl_stmt|;
specifier|final
name|RandomAccessInput
name|addressesInput
init|=
name|data
operator|.
name|randomAccessSlice
argument_list|(
name|entry
operator|.
name|addressesOffset
argument_list|,
name|entry
operator|.
name|addressesLength
argument_list|)
decl_stmt|;
specifier|final
name|LongValues
name|addresses
init|=
name|DirectMonotonicReader
operator|.
name|getInstance
argument_list|(
name|entry
operator|.
name|addressesMeta
argument_list|,
name|addressesInput
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|docsWithFieldOffset
operator|==
operator|-
literal|1
condition|)
block|{
comment|// dense
return|return
operator|new
name|BaseSortedSetDocValues
argument_list|(
name|entry
argument_list|,
name|data
argument_list|)
block|{
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|end
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
name|start
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|end
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
operator|+
literal|1L
argument_list|)
expr_stmt|;
return|return
name|doc
operator|=
name|target
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|start
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|end
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|target
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|doc
operator|=
name|target
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|start
operator|==
name|end
condition|)
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
return|return
name|ords
operator|.
name|get
argument_list|(
name|start
operator|++
argument_list|)
return|;
block|}
block|}
return|;
block|}
else|else
block|{
comment|// sparse
specifier|final
name|IndexedDISI
name|disi
init|=
operator|new
name|IndexedDISI
argument_list|(
name|data
argument_list|,
name|entry
operator|.
name|docsWithFieldOffset
argument_list|,
name|entry
operator|.
name|docsWithFieldLength
argument_list|,
name|entry
operator|.
name|numDocsWithField
argument_list|)
decl_stmt|;
return|return
operator|new
name|BaseSortedSetDocValues
argument_list|(
name|entry
argument_list|,
name|data
argument_list|)
block|{
name|boolean
name|set
decl_stmt|;
name|long
name|start
decl_stmt|;
name|long
name|end
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
name|set
operator|=
literal|false
expr_stmt|;
return|return
name|disi
operator|.
name|nextDoc
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|disi
operator|.
name|docID
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|disi
operator|.
name|cost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|set
operator|=
literal|false
expr_stmt|;
return|return
name|disi
operator|.
name|advance
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|advanceExact
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|set
operator|=
literal|false
expr_stmt|;
return|return
name|disi
operator|.
name|advanceExact
argument_list|(
name|target
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|nextOrd
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|set
operator|==
literal|false
condition|)
block|{
specifier|final
name|int
name|index
init|=
name|disi
operator|.
name|index
argument_list|()
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|addresses
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|this
operator|.
name|start
operator|=
name|start
operator|+
literal|1
expr_stmt|;
name|end
operator|=
name|addresses
operator|.
name|get
argument_list|(
name|index
operator|+
literal|1L
argument_list|)
expr_stmt|;
name|set
operator|=
literal|true
expr_stmt|;
return|return
name|ords
operator|.
name|get
argument_list|(
name|start
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|start
operator|==
name|end
condition|)
block|{
return|return
name|NO_MORE_ORDS
return|;
block|}
else|else
block|{
return|return
name|ords
operator|.
name|get
argument_list|(
name|start
operator|++
argument_list|)
return|;
block|}
block|}
block|}
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|checkIntegrity
specifier|public
name|void
name|checkIntegrity
parameter_list|()
throws|throws
name|IOException
block|{
name|CodecUtil
operator|.
name|checksumEntireFile
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

