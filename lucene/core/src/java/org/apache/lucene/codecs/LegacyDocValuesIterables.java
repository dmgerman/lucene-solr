begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|BinaryDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|FieldInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedSetDocValues
operator|.
name|NO_MORE_ORDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
import|;
end_import

begin_comment
comment|/** Bridge helper methods for legacy codecs to map sorted doc values to iterables. */
end_comment

begin_class
DECL|class|LegacyDocValuesIterables
specifier|public
class|class
name|LegacyDocValuesIterables
block|{
DECL|method|LegacyDocValuesIterables
specifier|private
name|LegacyDocValuesIterables
parameter_list|()
block|{
comment|// no
block|}
comment|/** Converts {@link SortedDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.    *    * @deprecated Consume {@link SortedDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|valuesIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|valuesIterable
parameter_list|(
specifier|final
name|SortedDocValues
name|values
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|nextOrd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextOrd
operator|<
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|nextOrd
operator|++
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts {@link SortedSetDocValues} into an {@code Iterable&lt;BytesRef&gt;} for all the values.    *    * @deprecated Consume {@link SortedSetDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|valuesIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|valuesIterable
parameter_list|(
specifier|final
name|SortedSetDocValues
name|values
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
specifier|private
name|long
name|nextOrd
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextOrd
operator|<
name|values
operator|.
name|getValueCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
return|return
name|values
operator|.
name|lookupOrd
argument_list|(
name|nextOrd
operator|++
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts {@link SortedDocValues} into the ord for each document as an {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link SortedDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|sortedOrdIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|sortedOrdIterable
parameter_list|(
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
name|FieldInfo
name|fieldInfo
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|SortedDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getSorted
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|nextDocID
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextDocID
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|nextDocID
operator|>
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
name|int
name|result
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|result
operator|=
name|values
operator|.
name|ordValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|nextDocID
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts number-of-ords per document from {@link SortedSetDocValues} into {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link SortedSetDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|sortedSetOrdCountIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|sortedSetOrdCountIterable
parameter_list|(
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|,
specifier|final
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|SortedSetDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|nextDocID
decl_stmt|;
specifier|private
name|int
name|ordCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextDocID
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|nextDocID
operator|>
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|nextDoc
argument_list|()
operator|!=
name|NO_MORE_DOCS
condition|)
block|{
name|ordCount
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|values
operator|.
name|nextOrd
argument_list|()
operator|!=
name|NO_MORE_ORDS
condition|)
block|{
name|ordCount
operator|++
expr_stmt|;
block|}
block|}
block|}
name|int
name|result
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|result
operator|=
name|ordCount
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
name|nextDocID
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts all concatenated ords (in docID order) from {@link SortedSetDocValues} into {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link SortedSetDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|sortedSetOrdsIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|sortedSetOrdsIterable
parameter_list|(
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|SortedSetDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedSet
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|nextIsSet
decl_stmt|;
specifier|private
name|long
name|nextOrd
decl_stmt|;
specifier|private
name|void
name|setNext
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|nextIsSet
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|docID
argument_list|()
operator|==
operator|-
literal|1
condition|)
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|values
operator|.
name|docID
argument_list|()
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|nextOrd
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
name|nextOrd
operator|=
name|values
operator|.
name|nextOrd
argument_list|()
expr_stmt|;
if|if
condition|(
name|nextOrd
operator|!=
operator|-
literal|1
condition|)
block|{
break|break;
block|}
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
name|nextIsSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|setNext
argument_list|()
expr_stmt|;
return|return
name|nextOrd
operator|!=
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
name|setNext
argument_list|()
expr_stmt|;
assert|assert
name|nextOrd
operator|!=
operator|-
literal|1
assert|;
name|nextIsSet
operator|=
literal|false
expr_stmt|;
return|return
name|nextOrd
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts number-of-values per document from {@link SortedNumericDocValues} into {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link SortedDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|sortedNumericToDocCount
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|sortedNumericToDocCount
parameter_list|(
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|,
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|SortedNumericDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|nextDocID
decl_stmt|;
specifier|private
name|int
name|nextCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|nextDocID
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|nextDocID
operator|>
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
name|int
name|result
decl_stmt|;
if|if
condition|(
name|nextDocID
operator|==
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|result
operator|=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|0
expr_stmt|;
block|}
name|nextDocID
operator|++
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts all concatenated values (in docID order) from {@link SortedNumericDocValues} into {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link SortedDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|sortedNumericToValues
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|sortedNumericToValues
parameter_list|(
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
specifier|final
name|FieldInfo
name|fieldInfo
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|SortedNumericDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getSortedNumeric
argument_list|(
name|fieldInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|nextIsSet
decl_stmt|;
specifier|private
name|int
name|nextCount
decl_stmt|;
specifier|private
name|int
name|upto
decl_stmt|;
specifier|private
name|long
name|nextValue
decl_stmt|;
specifier|private
name|void
name|setNext
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|nextIsSet
operator|==
literal|false
condition|)
block|{
if|if
condition|(
name|upto
operator|==
name|nextCount
condition|)
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
if|if
condition|(
name|values
operator|.
name|docID
argument_list|()
operator|==
name|NO_MORE_DOCS
condition|)
block|{
name|nextCount
operator|=
literal|0
expr_stmt|;
name|nextIsSet
operator|=
literal|false
expr_stmt|;
return|return;
block|}
else|else
block|{
name|nextCount
operator|=
name|values
operator|.
name|docValueCount
argument_list|()
expr_stmt|;
block|}
name|upto
operator|=
literal|0
expr_stmt|;
block|}
name|nextValue
operator|=
name|values
operator|.
name|nextValue
argument_list|()
expr_stmt|;
name|upto
operator|++
expr_stmt|;
name|nextIsSet
operator|=
literal|true
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|setNext
argument_list|()
expr_stmt|;
return|return
name|nextCount
operator|!=
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
name|setNext
argument_list|()
expr_stmt|;
assert|assert
name|nextCount
operator|!=
literal|0
assert|;
name|nextIsSet
operator|=
literal|false
expr_stmt|;
return|return
name|nextValue
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts norms into {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link NumericDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|normsIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|normsIterable
parameter_list|(
specifier|final
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|NormsProducer
name|normsProducer
parameter_list|,
specifier|final
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|NumericDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|normsProducer
operator|.
name|getNorms
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|docIDUpto
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|docIDUpto
operator|+
literal|1
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
name|docIDUpto
operator|++
expr_stmt|;
if|if
condition|(
name|docIDUpto
operator|>
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
try|try
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
name|Number
name|result
decl_stmt|;
if|if
condition|(
name|docIDUpto
operator|==
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|result
operator|=
name|values
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Unlike NumericDocValues, norms should return for missing values:
name|result
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts values from {@link BinaryDocValues} into {@code Iterable&lt;BytesRef&gt;}.    *    * @deprecated Consume {@link BinaryDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|binaryIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
name|binaryIterable
parameter_list|(
specifier|final
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
specifier|final
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|BinaryDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getBinary
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|BytesRef
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|docIDUpto
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|docIDUpto
operator|+
literal|1
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|BytesRef
name|next
parameter_list|()
block|{
name|docIDUpto
operator|++
expr_stmt|;
if|if
condition|(
name|docIDUpto
operator|>
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
try|try
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
name|BytesRef
name|result
decl_stmt|;
if|if
condition|(
name|docIDUpto
operator|==
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|result
operator|=
name|values
operator|.
name|binaryValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|/** Converts values from {@link NumericDocValues} into {@code Iterable&lt;Number&gt;}.    *    * @deprecated Consume {@link NumericDocValues} instead. */
annotation|@
name|Deprecated
DECL|method|numericIterable
specifier|public
specifier|static
name|Iterable
argument_list|<
name|Number
argument_list|>
name|numericIterable
parameter_list|(
specifier|final
name|FieldInfo
name|field
parameter_list|,
specifier|final
name|DocValuesProducer
name|valuesProducer
parameter_list|,
specifier|final
name|int
name|maxDoc
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Number
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|NumericDocValues
name|values
decl_stmt|;
try|try
block|{
name|values
operator|=
name|valuesProducer
operator|.
name|getNumeric
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
return|return
operator|new
name|Iterator
argument_list|<
name|Number
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|docIDUpto
init|=
operator|-
literal|1
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|docIDUpto
operator|+
literal|1
operator|<
name|maxDoc
return|;
block|}
annotation|@
name|Override
specifier|public
name|Number
name|next
parameter_list|()
block|{
name|docIDUpto
operator|++
expr_stmt|;
if|if
condition|(
name|docIDUpto
operator|>
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
try|try
block|{
name|values
operator|.
name|nextDoc
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
name|Number
name|result
decl_stmt|;
if|if
condition|(
name|docIDUpto
operator|==
name|values
operator|.
name|docID
argument_list|()
condition|)
block|{
name|result
operator|=
name|values
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

