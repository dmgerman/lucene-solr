begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.codecs.lucene70
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|codecs
operator|.
name|lucene70
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DocIdSetIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|IndexOutput
import|;
end_import

begin_class
DECL|class|SparseDISI
specifier|final
class|class
name|SparseDISI
extends|extends
name|DocIdSetIterator
block|{
DECL|method|writeBitSet
specifier|static
name|void
name|writeBitSet
parameter_list|(
name|DocIdSetIterator
name|it
parameter_list|,
name|int
name|maxDoc
parameter_list|,
name|IndexOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|currentIndex
init|=
literal|0
decl_stmt|;
name|long
name|currentBits
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|doc
init|=
name|it
operator|.
name|nextDoc
argument_list|()
init|;
name|doc
operator|!=
name|DocIdSetIterator
operator|.
name|NO_MORE_DOCS
condition|;
name|doc
operator|=
name|it
operator|.
name|nextDoc
argument_list|()
control|)
block|{
specifier|final
name|int
name|index
init|=
name|doc
operator|>>>
literal|6
decl_stmt|;
if|if
condition|(
name|index
operator|>
name|currentIndex
condition|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
name|currentBits
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|currentIndex
operator|+
literal|1
init|;
name|i
operator|<
name|index
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
name|currentIndex
operator|=
name|index
expr_stmt|;
name|currentBits
operator|=
literal|0L
expr_stmt|;
block|}
name|currentBits
operator||=
literal|1L
operator|<<
name|doc
expr_stmt|;
block|}
name|out
operator|.
name|writeLong
argument_list|(
name|currentBits
argument_list|)
expr_stmt|;
specifier|final
name|int
name|maxIndex
init|=
operator|(
name|maxDoc
operator|-
literal|1
operator|)
operator|>>>
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|currentIndex
operator|+
literal|1
init|;
name|i
operator|<=
name|maxIndex
condition|;
operator|++
name|i
control|)
block|{
name|out
operator|.
name|writeLong
argument_list|(
literal|0L
argument_list|)
expr_stmt|;
block|}
block|}
DECL|field|maxDoc
specifier|final
name|int
name|maxDoc
decl_stmt|;
DECL|field|numWords
specifier|final
name|int
name|numWords
decl_stmt|;
DECL|field|cost
specifier|final
name|long
name|cost
decl_stmt|;
DECL|field|slice
specifier|final
name|IndexInput
name|slice
decl_stmt|;
DECL|field|doc
name|int
name|doc
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|wordIndex
name|int
name|wordIndex
init|=
operator|-
literal|1
decl_stmt|;
DECL|field|word
name|long
name|word
decl_stmt|;
DECL|field|index
name|int
name|index
init|=
operator|-
literal|1
decl_stmt|;
DECL|method|SparseDISI
name|SparseDISI
parameter_list|(
name|int
name|maxDoc
parameter_list|,
name|IndexInput
name|in
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|cost
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|maxDoc
operator|=
name|maxDoc
expr_stmt|;
name|this
operator|.
name|numWords
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|maxDoc
operator|+
literal|63L
operator|)
operator|>>>
literal|6
argument_list|)
expr_stmt|;
name|this
operator|.
name|slice
operator|=
name|in
operator|.
name|slice
argument_list|(
literal|"docs"
argument_list|,
name|offset
argument_list|,
name|numWords
operator|*
literal|8L
argument_list|)
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|cost
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|advance
specifier|public
name|int
name|advance
parameter_list|(
name|int
name|target
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|target
operator|>=
name|maxDoc
condition|)
block|{
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
specifier|final
name|int
name|targetWordIndex
init|=
name|target
operator|>>>
literal|6
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|wordIndex
operator|+
literal|1
init|;
name|i
operator|<=
name|targetWordIndex
condition|;
operator|++
name|i
control|)
block|{
name|word
operator|=
name|slice
operator|.
name|readLong
argument_list|()
expr_stmt|;
name|index
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
name|wordIndex
operator|=
name|targetWordIndex
expr_stmt|;
name|long
name|leftBits
init|=
name|word
operator|>>>
name|target
decl_stmt|;
if|if
condition|(
name|leftBits
operator|!=
literal|0L
condition|)
block|{
return|return
name|doc
operator|=
name|target
operator|+
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|leftBits
argument_list|)
return|;
block|}
while|while
condition|(
operator|++
name|wordIndex
operator|<
name|numWords
condition|)
block|{
name|word
operator|=
name|slice
operator|.
name|readLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|word
operator|!=
literal|0
condition|)
block|{
name|index
operator|+=
name|Long
operator|.
name|bitCount
argument_list|(
name|word
argument_list|)
expr_stmt|;
return|return
name|doc
operator|=
operator|(
name|wordIndex
operator|<<
literal|6
operator|)
operator|+
name|Long
operator|.
name|numberOfTrailingZeros
argument_list|(
name|word
argument_list|)
return|;
block|}
block|}
return|return
name|doc
operator|=
name|NO_MORE_DOCS
return|;
block|}
annotation|@
name|Override
DECL|method|nextDoc
specifier|public
name|int
name|nextDoc
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|advance
argument_list|(
name|doc
operator|+
literal|1
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|docID
specifier|public
name|int
name|docID
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
DECL|method|cost
specifier|public
name|long
name|cost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
DECL|method|index
specifier|public
name|int
name|index
parameter_list|()
block|{
return|return
name|index
operator|-
name|Long
operator|.
name|bitCount
argument_list|(
name|word
operator|>>>
name|doc
argument_list|)
operator|+
literal|1
return|;
block|}
block|}
end_class

end_unit

