begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.document
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|RangeFieldQuery
operator|.
name|QueryType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|NumericUtils
import|;
end_import

begin_comment
comment|/**  * An indexed Integer Range field.  *<p>  * This field indexes dimensional ranges defined as min/max pairs. It supports  * up to a maximum of 4 dimensions (indexed as 8 numeric values). With 1 dimension representing a single integer range,  * 2 dimensions representing a bounding box, 3 dimensions a bounding cube, and 4 dimensions a tesseract.  *<p>  * Multiple values for the same field in one document is supported, and open ended ranges can be defined using  * {@code Integer.MIN_VALUE} and {@code Integer.MAX_VALUE}.  *  *<p>  * This field defines the following static factory methods for common search operations over integer ranges:  *<ul>  *<li>{@link #newIntersectsQuery newIntersectsQuery()} matches ranges that intersect the defined search range.  *<li>{@link #newWithinQuery newWithinQuery()} matches ranges that are within the defined search range.  *<li>{@link #newContainsQuery newContainsQuery()} matches ranges that contain the defined search range.  *</ul>  */
end_comment

begin_class
DECL|class|IntRange
specifier|public
class|class
name|IntRange
extends|extends
name|Field
block|{
comment|/** stores integer values so number of bytes is 4 */
DECL|field|BYTES
specifier|public
specifier|static
specifier|final
name|int
name|BYTES
init|=
name|Integer
operator|.
name|BYTES
decl_stmt|;
comment|/**    * Create a new IntRange type, from min/max parallel arrays    *    * @param name field name. must not be null.    * @param min range min values; each entry is the min value for the dimension    * @param max range max values; each entry is the max value for the dimension    */
DECL|method|IntRange
specifier|public
name|IntRange
parameter_list|(
name|String
name|name
parameter_list|,
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|,
name|getType
argument_list|(
name|min
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|setRangeValues
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
block|}
comment|/** set the field type */
DECL|method|getType
specifier|private
specifier|static
name|FieldType
name|getType
parameter_list|(
name|int
name|dimensions
parameter_list|)
block|{
if|if
condition|(
name|dimensions
operator|>
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"IntRange does not support greater than 4 dimensions"
argument_list|)
throw|;
block|}
name|FieldType
name|ft
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
comment|// dimensions is set as 2*dimension size (min/max per dimension)
name|ft
operator|.
name|setDimensions
argument_list|(
name|dimensions
operator|*
literal|2
argument_list|,
name|BYTES
argument_list|)
expr_stmt|;
name|ft
operator|.
name|freeze
argument_list|()
expr_stmt|;
return|return
name|ft
return|;
block|}
comment|/**    * Changes the values of the field.    * @param min array of min values. (accepts {@code Integer.NEGATIVE_INFINITY})    * @param max array of max values. (accepts {@code Integer.POSITIVE_INFINITY})    * @throws IllegalArgumentException if {@code min} or {@code max} is invalid    */
DECL|method|setRangeValues
specifier|public
name|void
name|setRangeValues
parameter_list|(
name|int
index|[]
name|min
parameter_list|,
name|int
index|[]
name|max
parameter_list|)
block|{
name|checkArgs
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
if|if
condition|(
name|min
operator|.
name|length
operator|*
literal|2
operator|!=
name|type
operator|.
name|pointDimensionCount
argument_list|()
operator|||
name|max
operator|.
name|length
operator|*
literal|2
operator|!=
name|type
operator|.
name|pointDimensionCount
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"field (name="
operator|+
name|name
operator|+
literal|") uses "
operator|+
name|type
operator|.
name|pointDimensionCount
argument_list|()
operator|/
literal|2
operator|+
literal|" dimensions; cannot change to (incoming) "
operator|+
name|min
operator|.
name|length
operator|+
literal|" dimensions"
argument_list|)
throw|;
block|}
specifier|final
name|byte
index|[]
name|bytes
decl_stmt|;
if|if
condition|(
name|fieldsData
operator|==
literal|null
condition|)
block|{
name|bytes
operator|=
operator|new
name|byte
index|[
name|BYTES
operator|*
literal|2
operator|*
name|min
operator|.
name|length
index|]
expr_stmt|;
name|fieldsData
operator|=
operator|new
name|BytesRef
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bytes
operator|=
operator|(
operator|(
name|BytesRef
operator|)
name|fieldsData
operator|)
operator|.
name|bytes
expr_stmt|;
block|}
name|verifyAndEncode
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|bytes
argument_list|)
expr_stmt|;
block|}
comment|/** validate the arguments */
DECL|method|checkArgs
specifier|private
specifier|static
name|void
name|checkArgs
parameter_list|(
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|)
block|{
if|if
condition|(
name|min
operator|==
literal|null
operator|||
name|max
operator|==
literal|null
operator|||
name|min
operator|.
name|length
operator|==
literal|0
operator|||
name|max
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"min/max range values cannot be null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|min
operator|.
name|length
operator|!=
name|max
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"min/max ranges must agree"
argument_list|)
throw|;
block|}
if|if
condition|(
name|min
operator|.
name|length
operator|>
literal|4
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"IntRange does not support greater than 4 dimensions"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Encodes the min, max ranges into a byte array    */
DECL|method|encode
specifier|private
specifier|static
name|byte
index|[]
name|encode
parameter_list|(
name|int
index|[]
name|min
parameter_list|,
name|int
index|[]
name|max
parameter_list|)
block|{
name|checkArgs
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|BYTES
operator|*
literal|2
operator|*
name|min
operator|.
name|length
index|]
decl_stmt|;
name|verifyAndEncode
argument_list|(
name|min
argument_list|,
name|max
argument_list|,
name|b
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * encode the ranges into a sortable byte array ({@code Double.NaN} not allowed)    *<p>    * example for 4 dimensions (8 bytes per dimension value):    * minD1 ... minD4 | maxD1 ... maxD4    */
DECL|method|verifyAndEncode
specifier|static
name|void
name|verifyAndEncode
parameter_list|(
name|int
index|[]
name|min
parameter_list|,
name|int
index|[]
name|max
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
block|{
for|for
control|(
name|int
name|d
init|=
literal|0
init|,
name|i
init|=
literal|0
init|,
name|j
init|=
name|min
operator|.
name|length
operator|*
name|BYTES
init|;
name|d
operator|<
name|min
operator|.
name|length
condition|;
operator|++
name|d
operator|,
name|i
operator|+=
name|BYTES
operator|,
name|j
operator|+=
name|BYTES
control|)
block|{
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|min
index|[
name|d
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid min value ("
operator|+
name|Double
operator|.
name|NaN
operator|+
literal|")"
operator|+
literal|" in IntRange"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Double
operator|.
name|isNaN
argument_list|(
name|max
index|[
name|d
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid max value ("
operator|+
name|Double
operator|.
name|NaN
operator|+
literal|")"
operator|+
literal|" in IntRange"
argument_list|)
throw|;
block|}
if|if
condition|(
name|min
index|[
name|d
index|]
operator|>
name|max
index|[
name|d
index|]
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"min value ("
operator|+
name|min
index|[
name|d
index|]
operator|+
literal|") is greater than max value ("
operator|+
name|max
index|[
name|d
index|]
operator|+
literal|")"
argument_list|)
throw|;
block|}
name|encode
argument_list|(
name|min
index|[
name|d
index|]
argument_list|,
name|bytes
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|encode
argument_list|(
name|max
index|[
name|d
index|]
argument_list|,
name|bytes
argument_list|,
name|j
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** encode the given value into the byte array at the defined offset */
DECL|method|encode
specifier|private
specifier|static
name|void
name|encode
parameter_list|(
name|int
name|val
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|NumericUtils
operator|.
name|intToSortableBytes
argument_list|(
name|val
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the min value for the given dimension    * @param dimension the dimension, always positive    * @return the decoded min value    */
DECL|method|getMin
specifier|public
name|int
name|getMin
parameter_list|(
name|int
name|dimension
parameter_list|)
block|{
if|if
condition|(
name|dimension
operator|<
literal|0
operator|||
name|dimension
operator|>=
name|type
operator|.
name|pointDimensionCount
argument_list|()
operator|/
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dimension request ("
operator|+
name|dimension
operator|+
literal|") out of bounds for field (name="
operator|+
name|name
operator|+
literal|" dimensions="
operator|+
name|type
operator|.
name|pointDimensionCount
argument_list|()
operator|/
literal|2
operator|+
literal|"). "
argument_list|)
throw|;
block|}
return|return
name|decodeMin
argument_list|(
operator|(
operator|(
name|BytesRef
operator|)
name|fieldsData
operator|)
operator|.
name|bytes
argument_list|,
name|dimension
argument_list|)
return|;
block|}
comment|/**    * Get the max value for the given dimension    * @param dimension the dimension, always positive    * @return the decoded max value    */
DECL|method|getMax
specifier|public
name|int
name|getMax
parameter_list|(
name|int
name|dimension
parameter_list|)
block|{
if|if
condition|(
name|dimension
operator|<
literal|0
operator|||
name|dimension
operator|>=
name|type
operator|.
name|pointDimensionCount
argument_list|()
operator|/
literal|2
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"dimension request ("
operator|+
name|dimension
operator|+
literal|") out of bounds for field (name="
operator|+
name|name
operator|+
literal|" dimensions="
operator|+
name|type
operator|.
name|pointDimensionCount
argument_list|()
operator|/
literal|2
operator|+
literal|"). "
argument_list|)
throw|;
block|}
return|return
name|decodeMax
argument_list|(
operator|(
operator|(
name|BytesRef
operator|)
name|fieldsData
operator|)
operator|.
name|bytes
argument_list|,
name|dimension
argument_list|)
return|;
block|}
comment|/** decodes the min value (for the defined dimension) from the encoded input byte array */
DECL|method|decodeMin
specifier|static
name|int
name|decodeMin
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
name|int
name|offset
init|=
name|dimension
operator|*
name|BYTES
decl_stmt|;
return|return
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|b
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/** decodes the max value (for the defined dimension) from the encoded input byte array */
DECL|method|decodeMax
specifier|static
name|int
name|decodeMax
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
name|int
name|offset
init|=
name|b
operator|.
name|length
operator|/
literal|2
operator|+
name|dimension
operator|*
name|BYTES
decl_stmt|;
return|return
name|NumericUtils
operator|.
name|sortableBytesToInt
argument_list|(
name|b
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ranges that intersect the defined range.    * @param field field name. must not be null.    * @param min array of min values. (accepts {@code Integer.MIN_VALUE})    * @param max array of max values. (accepts {@code Integer.MAX_VALUE})    * @return query for matching intersecting ranges (overlap, within, or contains)    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newIntersectsQuery
specifier|public
specifier|static
name|Query
name|newIntersectsQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|INTERSECTS
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ranges that contain the defined range.    * @param field field name. must not be null.    * @param min array of min values. (accepts {@code Integer.MIN_VALUE})    * @param max array of max values. (accepts {@code Integer.MAX_VALUE})    * @return query for matching ranges that contain the defined range    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newContainsQuery
specifier|public
specifier|static
name|Query
name|newContainsQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|CONTAINS
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ranges that are within the defined range.    * @param field field name. must not be null.    * @param min array of min values. (accepts {@code Integer.MIN_VALUE})    * @param max array of max values. (accepts {@code Integer.MAX_VALUE})    * @return query for matching ranges within the defined range    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newWithinQuery
specifier|public
specifier|static
name|Query
name|newWithinQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|WITHIN
argument_list|)
return|;
block|}
comment|/**    * Create a query for matching indexed ranges that cross the defined range.    * A CROSSES is defined as any set of ranges that are not disjoint and not wholly contained by    * the query. Effectively, its the complement of union(WITHIN, DISJOINT).    * @param field field name. must not be null.    * @param min array of min values. (accepts {@code Integer.MIN_VALUE})    * @param max array of max values. (accepts {@code Integer.MAX_VALUE})    * @return query for matching ranges within the defined range    * @throws IllegalArgumentException if {@code field} is null, {@code min} or {@code max} is invalid    */
DECL|method|newCrossesQuery
specifier|public
specifier|static
name|Query
name|newCrossesQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|)
block|{
return|return
name|newRelationQuery
argument_list|(
name|field
argument_list|,
name|min
argument_list|,
name|max
argument_list|,
name|QueryType
operator|.
name|CROSSES
argument_list|)
return|;
block|}
comment|/** helper method for creating the desired relational query */
DECL|method|newRelationQuery
specifier|private
specifier|static
name|Query
name|newRelationQuery
parameter_list|(
name|String
name|field
parameter_list|,
specifier|final
name|int
index|[]
name|min
parameter_list|,
specifier|final
name|int
index|[]
name|max
parameter_list|,
name|QueryType
name|relation
parameter_list|)
block|{
name|checkArgs
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
expr_stmt|;
return|return
operator|new
name|RangeFieldQuery
argument_list|(
name|field
argument_list|,
name|encode
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
argument_list|,
name|min
operator|.
name|length
argument_list|,
name|relation
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|ranges
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
return|return
name|IntRange
operator|.
name|toString
argument_list|(
name|ranges
argument_list|,
name|dimension
argument_list|)
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|byte
index|[]
name|b
init|=
operator|(
operator|(
name|BytesRef
operator|)
name|fieldsData
operator|)
operator|.
name|bytes
decl_stmt|;
name|toString
argument_list|(
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|d
init|=
literal|1
init|;
name|d
operator|<
name|type
operator|.
name|pointDimensionCount
argument_list|()
condition|;
operator|++
name|d
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|toString
argument_list|(
name|b
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Returns the String representation for the range at the given dimension    * @param ranges the encoded ranges, never null    * @param dimension the dimension of interest    * @return The string representation for the range at the provided dimension    */
DECL|method|toString
specifier|private
specifier|static
name|String
name|toString
parameter_list|(
name|byte
index|[]
name|ranges
parameter_list|,
name|int
name|dimension
parameter_list|)
block|{
return|return
literal|"["
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|decodeMin
argument_list|(
name|ranges
argument_list|,
name|dimension
argument_list|)
argument_list|)
operator|+
literal|" : "
operator|+
name|Integer
operator|.
name|toString
argument_list|(
name|decodeMax
argument_list|(
name|ranges
argument_list|,
name|dimension
argument_list|)
argument_list|)
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

