begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queries.function
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DoubleValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|DoubleValuesSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Explanation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|FilterScorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Scorer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Weight
import|;
end_import

begin_comment
comment|/**  * A query that wraps another query, and uses a DoubleValuesSource to  * replace or modify the wrapped query's score  *  * If the DoubleValuesSource doesn't return a value for a particular document,  * then that document will be given a score of 0.  */
end_comment

begin_class
DECL|class|FunctionScoreQuery
specifier|public
specifier|final
class|class
name|FunctionScoreQuery
extends|extends
name|Query
block|{
DECL|field|in
specifier|private
specifier|final
name|Query
name|in
decl_stmt|;
DECL|field|source
specifier|private
specifier|final
name|DoubleValuesSource
name|source
decl_stmt|;
comment|/**    * Create a new FunctionScoreQuery    * @param in      the query to wrap    * @param source  a source of scores    */
DECL|method|FunctionScoreQuery
specifier|public
name|FunctionScoreQuery
parameter_list|(
name|Query
name|in
parameter_list|,
name|DoubleValuesSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|in
operator|=
name|in
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|createWeight
specifier|public
name|Weight
name|createWeight
parameter_list|(
name|IndexSearcher
name|searcher
parameter_list|,
name|boolean
name|needsScores
parameter_list|,
name|float
name|boost
parameter_list|)
throws|throws
name|IOException
block|{
name|Weight
name|inner
init|=
name|in
operator|.
name|createWeight
argument_list|(
name|searcher
argument_list|,
name|needsScores
operator|&&
name|source
operator|.
name|needsScores
argument_list|()
argument_list|,
literal|1f
argument_list|)
decl_stmt|;
if|if
condition|(
name|needsScores
operator|==
literal|false
condition|)
return|return
name|inner
return|;
return|return
operator|new
name|FunctionScoreWeight
argument_list|(
name|this
argument_list|,
name|inner
argument_list|,
name|source
argument_list|,
name|boost
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|rewrite
specifier|public
name|Query
name|rewrite
parameter_list|(
name|IndexReader
name|reader
parameter_list|)
throws|throws
name|IOException
block|{
name|Query
name|rewritten
init|=
name|in
operator|.
name|rewrite
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|rewritten
operator|==
name|in
condition|)
return|return
name|this
return|;
return|return
operator|new
name|FunctionScoreQuery
argument_list|(
name|rewritten
argument_list|,
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|toString
specifier|public
name|String
name|toString
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
literal|"FunctionScoreQuery("
operator|+
name|in
operator|.
name|toString
argument_list|(
name|field
argument_list|)
operator|+
literal|", scored by "
operator|+
name|source
operator|.
name|toString
argument_list|()
operator|+
literal|")"
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|FunctionScoreQuery
name|that
init|=
operator|(
name|FunctionScoreQuery
operator|)
name|o
decl_stmt|;
return|return
name|Objects
operator|.
name|equals
argument_list|(
name|in
argument_list|,
name|that
operator|.
name|in
argument_list|)
operator|&&
name|Objects
operator|.
name|equals
argument_list|(
name|source
argument_list|,
name|that
operator|.
name|source
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|Objects
operator|.
name|hash
argument_list|(
name|in
argument_list|,
name|source
argument_list|)
return|;
block|}
DECL|class|FunctionScoreWeight
specifier|private
specifier|static
class|class
name|FunctionScoreWeight
extends|extends
name|Weight
block|{
DECL|field|inner
specifier|final
name|Weight
name|inner
decl_stmt|;
DECL|field|valueSource
specifier|final
name|DoubleValuesSource
name|valueSource
decl_stmt|;
DECL|field|boost
specifier|final
name|float
name|boost
decl_stmt|;
DECL|method|FunctionScoreWeight
name|FunctionScoreWeight
parameter_list|(
name|Query
name|query
parameter_list|,
name|Weight
name|inner
parameter_list|,
name|DoubleValuesSource
name|valueSource
parameter_list|,
name|float
name|boost
parameter_list|)
block|{
name|super
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|this
operator|.
name|inner
operator|=
name|inner
expr_stmt|;
name|this
operator|.
name|valueSource
operator|=
name|valueSource
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|boost
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|extractTerms
specifier|public
name|void
name|extractTerms
parameter_list|(
name|Set
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|this
operator|.
name|inner
operator|.
name|extractTerms
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|explain
specifier|public
name|Explanation
name|explain
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|scorer
init|=
name|inner
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|scorer
operator|.
name|iterator
argument_list|()
operator|.
name|advance
argument_list|(
name|doc
argument_list|)
operator|!=
name|doc
condition|)
return|return
name|Explanation
operator|.
name|noMatch
argument_list|(
literal|"No match"
argument_list|)
return|;
name|DoubleValues
name|scores
init|=
name|valueSource
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|DoubleValuesSource
operator|.
name|fromScorer
argument_list|(
name|scorer
argument_list|)
argument_list|)
decl_stmt|;
name|scores
operator|.
name|advanceExact
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|Explanation
name|scoreExpl
init|=
name|scoreExplanation
argument_list|(
name|context
argument_list|,
name|doc
argument_list|,
name|scores
argument_list|)
decl_stmt|;
if|if
condition|(
name|boost
operator|==
literal|1f
condition|)
return|return
name|scoreExpl
return|;
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|scoreExpl
operator|.
name|getValue
argument_list|()
operator|*
name|boost
argument_list|,
literal|"product of:"
argument_list|,
name|Explanation
operator|.
name|match
argument_list|(
name|boost
argument_list|,
literal|"boost"
argument_list|)
argument_list|,
name|scoreExpl
argument_list|)
return|;
block|}
DECL|method|scoreExplanation
specifier|private
name|Explanation
name|scoreExplanation
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|,
name|int
name|doc
parameter_list|,
name|DoubleValues
name|scores
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|valueSource
operator|.
name|needsScores
argument_list|()
operator|==
literal|false
condition|)
return|return
name|Explanation
operator|.
name|match
argument_list|(
operator|(
name|float
operator|)
name|scores
operator|.
name|doubleValue
argument_list|()
argument_list|,
name|valueSource
operator|.
name|toString
argument_list|()
argument_list|)
return|;
name|float
name|score
init|=
operator|(
name|float
operator|)
name|scores
operator|.
name|doubleValue
argument_list|()
decl_stmt|;
return|return
name|Explanation
operator|.
name|match
argument_list|(
name|score
argument_list|,
literal|"computed from:"
argument_list|,
name|Explanation
operator|.
name|match
argument_list|(
name|score
argument_list|,
name|valueSource
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|inner
operator|.
name|explain
argument_list|(
name|context
argument_list|,
name|doc
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|scorer
specifier|public
name|Scorer
name|scorer
parameter_list|(
name|LeafReaderContext
name|context
parameter_list|)
throws|throws
name|IOException
block|{
name|Scorer
name|in
init|=
name|inner
operator|.
name|scorer
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|DoubleValues
name|scores
init|=
name|valueSource
operator|.
name|getValues
argument_list|(
name|context
argument_list|,
name|DoubleValuesSource
operator|.
name|fromScorer
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|FilterScorer
argument_list|(
name|in
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|float
name|score
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|scores
operator|.
name|advanceExact
argument_list|(
name|docID
argument_list|()
argument_list|)
condition|)
return|return
call|(
name|float
call|)
argument_list|(
name|scores
operator|.
name|doubleValue
argument_list|()
operator|*
name|boost
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
block|}
return|;
block|}
block|}
block|}
end_class

end_unit

