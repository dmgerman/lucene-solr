begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queries.function.valuesource
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
operator|.
name|function
operator|.
name|valuesource
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|LeafReaderContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|NumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|SortedNumericDocValues
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSelector
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SortedNumericSortField
import|;
end_import

begin_comment
comment|/**  * Obtains int field values from {@link org.apache.lucene.index.LeafReader#getSortedNumericDocValues} and using a   * {@link org.apache.lucene.search.SortedNumericSelector} it gives a single-valued ValueSource view of a field.  */
end_comment

begin_class
DECL|class|MultiValuedIntFieldSource
specifier|public
class|class
name|MultiValuedIntFieldSource
extends|extends
name|IntFieldSource
block|{
DECL|field|selector
specifier|protected
specifier|final
name|SortedNumericSelector
operator|.
name|Type
name|selector
decl_stmt|;
DECL|method|MultiValuedIntFieldSource
specifier|public
name|MultiValuedIntFieldSource
parameter_list|(
name|String
name|field
parameter_list|,
name|Type
name|selector
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|selector
operator|=
name|selector
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|field
argument_list|,
literal|"Field is required to create a MultiValuedIntFieldSource"
argument_list|)
expr_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|selector
argument_list|,
literal|"SortedNumericSelector is required to create a MultiValuedIntFieldSource"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getSortField
specifier|public
name|SortField
name|getSortField
parameter_list|(
name|boolean
name|reverse
parameter_list|)
block|{
return|return
operator|new
name|SortedNumericSortField
argument_list|(
name|field
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|,
name|reverse
argument_list|,
name|selector
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|description
specifier|public
name|String
name|description
parameter_list|()
block|{
return|return
literal|"int("
operator|+
name|field
operator|+
literal|','
operator|+
name|selector
operator|.
name|name
argument_list|()
operator|+
literal|')'
return|;
block|}
annotation|@
name|Override
DECL|method|getNumericDocValues
specifier|protected
name|NumericDocValues
name|getNumericDocValues
parameter_list|(
name|Map
name|context
parameter_list|,
name|LeafReaderContext
name|readerContext
parameter_list|)
throws|throws
name|IOException
block|{
name|SortedNumericDocValues
name|sortedDv
init|=
name|DocValues
operator|.
name|getSortedNumeric
argument_list|(
name|readerContext
operator|.
name|reader
argument_list|()
argument_list|,
name|field
argument_list|)
decl_stmt|;
return|return
name|SortedNumericSelector
operator|.
name|wrap
argument_list|(
name|sortedDv
argument_list|,
name|selector
argument_list|,
name|SortField
operator|.
name|Type
operator|.
name|INT
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|equals
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|.
name|getClass
argument_list|()
operator|!=
name|MultiValuedIntFieldSource
operator|.
name|class
condition|)
return|return
literal|false
return|;
name|MultiValuedIntFieldSource
name|other
init|=
operator|(
name|MultiValuedIntFieldSource
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|selector
operator|!=
name|other
operator|.
name|selector
condition|)
return|return
literal|false
return|;
return|return
name|this
operator|.
name|field
operator|.
name|equals
argument_list|(
name|other
operator|.
name|field
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|hashCode
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|h
init|=
name|super
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|h
operator|+=
name|selector
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|h
return|;
block|}
block|}
end_class

end_unit

