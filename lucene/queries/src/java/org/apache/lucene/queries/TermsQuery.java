begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queries
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queries
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermInSetQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|BytesRef
import|;
end_import

begin_comment
comment|/**  * @deprecated Use {@link org.apache.lucene.search.TermInSetQuery}  */
end_comment

begin_class
annotation|@
name|Deprecated
DECL|class|TermsQuery
specifier|public
class|class
name|TermsQuery
extends|extends
name|TermInSetQuery
block|{
comment|/**    * Creates a new {@link TermsQuery} from the given collection. It    * can contain duplicate terms and multiple fields.    */
DECL|method|TermsQuery
specifier|public
name|TermsQuery
parameter_list|(
name|Collection
argument_list|<
name|Term
argument_list|>
name|terms
parameter_list|)
block|{
name|super
argument_list|(
name|terms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new {@link TermsQuery} from the given collection for    * a single field. It can contain duplicate terms.    */
DECL|method|TermsQuery
specifier|public
name|TermsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|Collection
argument_list|<
name|BytesRef
argument_list|>
name|terms
parameter_list|)
block|{
name|super
argument_list|(
name|field
argument_list|,
name|terms
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new {@link TermsQuery} from the given {@link BytesRef} array for    * a single field.    */
DECL|method|TermsQuery
specifier|public
name|TermsQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|BytesRef
modifier|...
name|terms
parameter_list|)
block|{
name|this
argument_list|(
name|field
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a new {@link TermsQuery} from the given array. The array can    * contain duplicate terms and multiple fields.    */
DECL|method|TermsQuery
specifier|public
name|TermsQuery
parameter_list|(
specifier|final
name|Term
modifier|...
name|terms
parameter_list|)
block|{
name|this
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|terms
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

