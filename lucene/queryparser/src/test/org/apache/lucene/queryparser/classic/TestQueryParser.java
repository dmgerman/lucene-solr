begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
DECL|package|org.apache.lucene.queryparser.classic
package|package
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockBytesAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockLowerCaseFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockSynonymAnalyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|MockTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|CharTermAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|tokenattributes
operator|.
name|PositionIncrementAttribute
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|DateTools
operator|.
name|Resolution
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|document
operator|.
name|FieldType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|DirectoryReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|IndexOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|RandomIndexWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|index
operator|.
name|Term
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|classic
operator|.
name|QueryParser
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|flexible
operator|.
name|standard
operator|.
name|CommonQueryParserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|queryparser
operator|.
name|util
operator|.
name|QueryParserTestBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanClause
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BooleanQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|BoostQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|GraphQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|IndexSearcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MatchAllDocsQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|MultiPhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|PhraseQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|SynonymQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|TermQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|util
operator|.
name|automaton
operator|.
name|TooComplexToDeterminizeException
import|;
end_import

begin_comment
comment|/**  * Tests QueryParser.  */
end_comment

begin_class
DECL|class|TestQueryParser
specifier|public
class|class
name|TestQueryParser
extends|extends
name|QueryParserTestBase
block|{
DECL|field|splitOnWhitespace
specifier|protected
name|boolean
name|splitOnWhitespace
init|=
name|QueryParser
operator|.
name|DEFAULT_SPLIT_ON_WHITESPACE
decl_stmt|;
DECL|field|FIELD
specifier|private
specifier|static
specifier|final
name|String
name|FIELD
init|=
literal|"field"
decl_stmt|;
DECL|class|QPTestParser
specifier|public
specifier|static
class|class
name|QPTestParser
extends|extends
name|QueryParser
block|{
DECL|method|QPTestParser
specifier|public
name|QPTestParser
parameter_list|(
name|String
name|f
parameter_list|,
name|Analyzer
name|a
parameter_list|)
block|{
name|super
argument_list|(
name|f
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFuzzyQuery
specifier|protected
name|Query
name|getFuzzyQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|,
name|float
name|minSimilarity
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Fuzzy queries not allowed"
argument_list|)
throw|;
block|}
annotation|@
name|Override
DECL|method|getWildcardQuery
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
throws|throws
name|ParseException
block|{
throw|throw
operator|new
name|ParseException
argument_list|(
literal|"Wildcard queries not allowed"
argument_list|)
throw|;
block|}
block|}
DECL|method|getParser
specifier|public
name|QueryParser
name|getParser
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|a
operator|==
literal|null
condition|)
name|a
operator|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|SIMPLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|getDefaultField
argument_list|()
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|QueryParserBase
operator|.
name|OR_OPERATOR
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setSplitOnWhitespace
argument_list|(
name|splitOnWhitespace
argument_list|)
expr_stmt|;
return|return
name|qp
return|;
block|}
annotation|@
name|Override
DECL|method|getParserConfig
specifier|public
name|CommonQueryParserConfiguration
name|getParserConfig
parameter_list|(
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getParser
argument_list|(
name|a
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
throws|throws
name|Exception
block|{
assert|assert
name|cqpC
operator|!=
literal|null
operator|:
literal|"Parameter must not be null"
assert|;
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
operator|:
literal|"Parameter must be instance of QueryParser"
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
return|return
name|qp
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|getQuery
specifier|public
name|Query
name|getQuery
parameter_list|(
name|String
name|query
parameter_list|,
name|Analyzer
name|a
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getParser
argument_list|(
name|a
argument_list|)
operator|.
name|parse
argument_list|(
name|query
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|isQueryParserException
specifier|public
name|boolean
name|isQueryParserException
parameter_list|(
name|Exception
name|exception
parameter_list|)
block|{
return|return
name|exception
operator|instanceof
name|ParseException
return|;
block|}
annotation|@
name|Override
DECL|method|setDefaultOperatorOR
specifier|public
name|void
name|setDefaultOperatorOR
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|OR
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDefaultOperatorAND
specifier|public
name|void
name|setDefaultOperatorAND
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setAutoGeneratePhraseQueries
specifier|public
name|void
name|setAutoGeneratePhraseQueries
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setAutoGeneratePhraseQueries
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|setDateResolution
specifier|public
name|void
name|setDateResolution
parameter_list|(
name|CommonQueryParserConfiguration
name|cqpC
parameter_list|,
name|CharSequence
name|field
parameter_list|,
name|Resolution
name|value
parameter_list|)
block|{
assert|assert
operator|(
name|cqpC
operator|instanceof
name|QueryParser
operator|)
assert|;
name|QueryParser
name|qp
init|=
operator|(
name|QueryParser
operator|)
name|cqpC
decl_stmt|;
name|qp
operator|.
name|setDateResolution
argument_list|(
name|field
operator|.
name|toString
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testDefaultOperator
specifier|public
name|void
name|testDefaultOperator
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryParser
name|qp
init|=
name|getParser
argument_list|(
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// make sure OR is the default:
name|assertEquals
argument_list|(
name|QueryParserBase
operator|.
name|OR_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultOperatorAND
argument_list|(
name|qp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryParserBase
operator|.
name|AND_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultOperatorOR
argument_list|(
name|qp
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|QueryParserBase
operator|.
name|OR_OPERATOR
argument_list|,
name|qp
operator|.
name|getDefaultOperator
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-2002: when we run javacc to regen QueryParser,
comment|// we also run a replaceregexp step to fix 2 of the public
comment|// ctors (change them to protected):
comment|//
comment|// protected QueryParser(CharStream stream)
comment|//
comment|// protected QueryParser(QueryParserTokenManager tm)
comment|//
comment|// This test is here as a safety, in case that ant step
comment|// doesn't work for some reason.
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtype"
argument_list|)
DECL|method|testProtectedCtors
specifier|public
name|void
name|testProtectedCtors
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|QueryParser
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|CharStream
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"please switch public QueryParser(CharStream) to be protected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|QueryParser
operator|.
name|class
operator|.
name|getConstructor
argument_list|(
name|QueryParserTokenManager
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"please switch public QueryParser(QueryParserTokenManager) to be protected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// expected
block|}
block|}
DECL|method|testFuzzySlopeExtendability
specifier|public
name|void
name|testFuzzySlopeExtendability
parameter_list|()
throws|throws
name|ParseException
block|{
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
literal|"a"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
name|Query
name|handleBareFuzzy
parameter_list|(
name|String
name|qfield
parameter_list|,
name|Token
name|fuzzySlop
parameter_list|,
name|String
name|termImage
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|fuzzySlop
operator|.
name|image
operator|.
name|endsWith
argument_list|(
literal|"â¬"
argument_list|)
condition|)
block|{
name|float
name|fms
init|=
name|fuzzyMinSim
decl_stmt|;
try|try
block|{
name|fms
operator|=
name|Float
operator|.
name|valueOf
argument_list|(
name|fuzzySlop
operator|.
name|image
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|fuzzySlop
operator|.
name|image
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|floatValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignored
parameter_list|)
block|{ }
name|float
name|value
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|termImage
argument_list|)
decl_stmt|;
return|return
name|getRangeQuery
argument_list|(
name|qfield
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|value
operator|-
name|fms
operator|/
literal|2.f
argument_list|)
argument_list|,
name|Float
operator|.
name|toString
argument_list|(
name|value
operator|+
name|fms
operator|/
literal|2.f
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
name|super
operator|.
name|handleBareFuzzy
argument_list|(
name|qfield
argument_list|,
name|fuzzySlop
argument_list|,
name|termImage
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|assertEquals
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"a:[11.95 TO 12.95]"
argument_list|)
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"12.45~1â¬"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|testStarParsing
specifier|public
name|void
name|testStarParsing
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|int
index|[]
name|type
init|=
operator|new
name|int
index|[
literal|1
index|]
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Query
name|getWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
block|{
comment|// override error checking of superclass
name|type
index|[
literal|0
index|]
operator|=
literal|1
expr_stmt|;
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|getPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|termStr
parameter_list|)
block|{
comment|// override error checking of superclass
name|type
index|[
literal|0
index|]
operator|=
literal|2
expr_stmt|;
return|return
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|field
argument_list|,
name|termStr
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|ParseException
block|{
name|type
index|[
literal|0
index|]
operator|=
literal|3
expr_stmt|;
return|return
name|super
operator|.
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|TermQuery
name|tq
decl_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:zoo*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zoo"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|BoostQuery
name|bq
init|=
operator|(
name|BoostQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:zoo*^2"
argument_list|)
decl_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|bq
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"zoo"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bq
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// could be a valid prefix query in the future too
name|bq
operator|=
operator|(
name|BoostQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"foo:*^2"
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|bq
operator|.
name|getQuery
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bq
operator|.
name|getBoost
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"*:foo"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"*:*"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// could be handled as a prefix query in the
comment|// future
name|tq
operator|=
operator|(
name|TermQuery
operator|)
name|qp
operator|.
name|parse
argument_list|(
literal|"(*:*)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|field
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*"
argument_list|,
name|tq
operator|.
name|getTerm
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|type
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Wildcard queries should not be allowed
DECL|method|testCustomQueryParserWildcard
specifier|public
name|void
name|testCustomQueryParserWildcard
parameter_list|()
block|{
name|expectThrows
argument_list|(
name|ParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|QPTestParser
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
literal|"a?t"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// Fuzzy queries should not be allowed
DECL|method|testCustomQueryParserFuzzy
specifier|public
name|void
name|testCustomQueryParserFuzzy
parameter_list|()
throws|throws
name|Exception
block|{
name|expectThrows
argument_list|(
name|ParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
operator|new
name|QPTestParser
argument_list|(
literal|"contents"
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|,
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|.
name|parse
argument_list|(
literal|"xunit~"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/** query parser that doesn't expand synonyms when users use double quotes */
DECL|class|SmartQueryParser
specifier|private
class|class
name|SmartQueryParser
extends|extends
name|QueryParser
block|{
DECL|field|morePrecise
name|Analyzer
name|morePrecise
init|=
operator|new
name|Analyzer2
argument_list|()
decl_stmt|;
DECL|method|SmartQueryParser
specifier|public
name|SmartQueryParser
parameter_list|()
block|{
name|super
argument_list|(
name|FIELD
argument_list|,
operator|new
name|Analyzer1
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|getFieldQuery
specifier|protected
name|Query
name|getFieldQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|String
name|queryText
parameter_list|,
name|boolean
name|quoted
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|quoted
condition|)
return|return
name|newFieldQuery
argument_list|(
name|morePrecise
argument_list|,
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
else|else
return|return
name|super
operator|.
name|getFieldQuery
argument_list|(
name|field
argument_list|,
name|queryText
argument_list|,
name|quoted
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
DECL|method|testNewFieldQuery
specifier|public
name|void
name|testNewFieldQuery
parameter_list|()
throws|throws
name|Exception
block|{
comment|/** ordinary behavior, synonyms form uncoordinated boolean query */
name|QueryParser
name|dumb
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|Analyzer1
argument_list|()
argument_list|)
decl_stmt|;
name|Query
name|expanded
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dogs"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expanded
argument_list|,
name|dumb
operator|.
name|parse
argument_list|(
literal|"\"dogs\""
argument_list|)
argument_list|)
expr_stmt|;
comment|/** even with the phrase operator the behavior is the same */
name|assertEquals
argument_list|(
name|expanded
argument_list|,
name|dumb
operator|.
name|parse
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
comment|/**      * custom behavior, the synonyms are expanded, unless you use quote operator      */
name|QueryParser
name|smart
init|=
operator|new
name|SmartQueryParser
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|expanded
argument_list|,
name|smart
operator|.
name|parse
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|unexpanded
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dogs"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|unexpanded
argument_list|,
name|smart
operator|.
name|parse
argument_list|(
literal|"\"dogs\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** simple synonyms test */
DECL|method|testSynonyms
specifier|public
name|void
name|testSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dogs"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dog"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"dogs\""
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"dogs"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"dogs\""
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expected
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"dogs^2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"dogs\"^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** forms multiphrase query */
DECL|method|testSynonymsPhrase
specifier|public
name|void
name|testSynonymsPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
operator|.
name|Builder
name|expectedQBuilder
init|=
operator|new
name|MultiPhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedQBuilder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"old"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQBuilder
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dogs"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"dog"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"old dogs\""
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"old dogs\""
argument_list|)
argument_list|)
expr_stmt|;
name|BoostQuery
name|expected
init|=
operator|new
name|BoostQuery
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|2f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"old dogs\"^2"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQBuilder
operator|.
name|setSlop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"old dogs\"~3^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * adds synonym of "å" for "å½".    */
DECL|class|MockCJKSynonymFilter
specifier|protected
specifier|static
class|class
name|MockCJKSynonymFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|posIncAtt
name|PositionIncrementAttribute
name|posIncAtt
init|=
name|addAttribute
argument_list|(
name|PositionIncrementAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|field|addSynonym
name|boolean
name|addSynonym
init|=
literal|false
decl_stmt|;
DECL|method|MockCJKSynonymFilter
specifier|public
name|MockCJKSynonymFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
specifier|final
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|addSynonym
condition|)
block|{
comment|// inject our synonym
name|clearAttributes
argument_list|()
expr_stmt|;
name|termAtt
operator|.
name|setEmpty
argument_list|()
operator|.
name|append
argument_list|(
literal|"å"
argument_list|)
expr_stmt|;
name|posIncAtt
operator|.
name|setPositionIncrement
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|addSynonym
operator|=
literal|false
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|addSynonym
operator|=
name|termAtt
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"å½"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|MockCJKSynonymAnalyzer
specifier|static
class|class
name|MockCJKSynonymAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|protected
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|tokenizer
init|=
operator|new
name|SimpleCJKTokenizer
argument_list|()
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|tokenizer
argument_list|,
operator|new
name|MockCJKSynonymFilter
argument_list|(
name|tokenizer
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** simple CJK synonym test */
DECL|method|testCJKSynonym
specifier|public
name|void
name|testCJKSynonym
parameter_list|()
throws|throws
name|Exception
block|{
name|Query
name|expected
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"å½"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expected
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"å½^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** synonyms with default OR operator */
DECL|method|testCJKSynonymsOR
specifier|public
name|void
name|testCJKSynonymsOR
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expectedB
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|expectedB
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expected
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** more complex synonyms with default OR operator */
DECL|method|testCJKSynonymsOR2
specifier|public
name|void
name|testCJKSynonymsOR2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expectedB
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|SynonymQuery
name|inner2
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|expectedB
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½å½"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expected
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½å½^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** synonyms with default AND operator */
DECL|method|testCJKSynonymsAND
specifier|public
name|void
name|testCJKSynonymsAND
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expectedB
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|expectedB
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expected
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** more complex synonyms with default AND operator */
DECL|method|testCJKSynonymsAND2
specifier|public
name|void
name|testCJKSynonymsAND2
parameter_list|()
throws|throws
name|Exception
block|{
name|BooleanQuery
operator|.
name|Builder
name|expectedB
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|inner
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
name|inner
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|inner2
init|=
operator|new
name|SynonymQuery
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
argument_list|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
argument_list|)
decl_stmt|;
name|expectedB
operator|.
name|add
argument_list|(
name|inner2
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|MUST
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
name|expectedB
operator|.
name|build
argument_list|()
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½å½"
argument_list|)
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expected
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"ä¸­å½å½^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** forms multiphrase query */
DECL|method|testCJKSynonymsPhrase
specifier|public
name|void
name|testCJKSynonymsPhrase
parameter_list|()
throws|throws
name|Exception
block|{
name|MultiPhraseQuery
operator|.
name|Builder
name|expectedQBuilder
init|=
operator|new
name|MultiPhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|expectedQBuilder
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"ä¸­"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQBuilder
operator|.
name|add
argument_list|(
operator|new
name|Term
index|[]
block|{
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å½"
argument_list|)
block|,
operator|new
name|Term
argument_list|(
name|FIELD
argument_list|,
literal|"å"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockCJKSynonymAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setDefaultOperator
argument_list|(
name|Operator
operator|.
name|AND
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"ä¸­å½\""
argument_list|)
argument_list|)
expr_stmt|;
name|Query
name|expected
init|=
operator|new
name|BoostQuery
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|2f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"ä¸­å½\"^2"
argument_list|)
argument_list|)
expr_stmt|;
name|expectedQBuilder
operator|.
name|setSlop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|expected
operator|=
operator|new
name|BoostQuery
argument_list|(
name|expectedQBuilder
operator|.
name|build
argument_list|()
argument_list|,
literal|2f
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|qp
operator|.
name|parse
argument_list|(
literal|"\"ä¸­å½\"~3^2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** LUCENE-6677: make sure wildcard query respects maxDeterminizedStates. */
DECL|method|testWildcardMaxDeterminizedStates
specifier|public
name|void
name|testWildcardMaxDeterminizedStates
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|qp
operator|.
name|setMaxDeterminizedStates
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|TooComplexToDeterminizeException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|qp
operator|.
name|parse
argument_list|(
literal|"a*aaaaaaa"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Remove this specialization once the flexible standard parser gets multi-word synonym support
annotation|@
name|Override
DECL|method|testQPA
specifier|public
name|void
name|testQPA
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|oldSplitOnWhitespace
init|=
name|splitOnWhitespace
decl_stmt|;
name|splitOnWhitespace
operator|=
literal|false
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"term phrase term"
argument_list|,
name|qpAnalyzer
argument_list|,
literal|"term phrase1 phrase2 term"
argument_list|)
expr_stmt|;
name|CommonQueryParserConfiguration
name|cqpc
init|=
name|getParserConfig
argument_list|(
name|qpAnalyzer
argument_list|)
decl_stmt|;
name|setDefaultOperatorAND
argument_list|(
name|cqpc
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
name|cqpc
argument_list|,
literal|"field"
argument_list|,
literal|"term phrase term"
argument_list|,
literal|"+term +phrase1 +phrase2 +term"
argument_list|)
expr_stmt|;
name|splitOnWhitespace
operator|=
name|oldSplitOnWhitespace
expr_stmt|;
block|}
comment|// TODO: Move to QueryParserTestBase once standard flexible parser gets this capability
DECL|method|testMultiWordSynonyms
specifier|public
name|void
name|testMultiWordSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryParser
name|dumb
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Analyzer1
argument_list|()
argument_list|)
decl_stmt|;
name|dumb
operator|.
name|setSplitOnWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|TermQuery
name|guinea
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"guinea"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|pig
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"pig"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|cavy
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"cavy"
argument_list|)
argument_list|)
decl_stmt|;
comment|// A multi-word synonym source will form a graph query for synonyms that formed the graph token stream
name|BooleanQuery
operator|.
name|Builder
name|synonym
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|synonym
operator|.
name|add
argument_list|(
name|guinea
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|synonym
operator|.
name|add
argument_list|(
name|pig
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|guineaPig
init|=
name|synonym
operator|.
name|build
argument_list|()
decl_stmt|;
name|GraphQuery
name|graphQuery
init|=
operator|new
name|GraphQuery
argument_list|(
name|guineaPig
argument_list|,
name|cavy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|graphQuery
argument_list|,
name|dumb
operator|.
name|parse
argument_list|(
literal|"guinea pig"
argument_list|)
argument_list|)
expr_stmt|;
comment|// With the phrase operator, a multi-word synonym source will form a graph query with inner phrase queries.
name|PhraseQuery
operator|.
name|Builder
name|phraseSynonym
init|=
operator|new
name|PhraseQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|phraseSynonym
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"guinea"
argument_list|)
argument_list|)
expr_stmt|;
name|phraseSynonym
operator|.
name|add
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"pig"
argument_list|)
argument_list|)
expr_stmt|;
name|PhraseQuery
name|guineaPigPhrase
init|=
name|phraseSynonym
operator|.
name|build
argument_list|()
decl_stmt|;
name|graphQuery
operator|=
operator|new
name|GraphQuery
argument_list|(
name|guineaPigPhrase
argument_list|,
name|cavy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|graphQuery
argument_list|,
name|dumb
operator|.
name|parse
argument_list|(
literal|"\"guinea pig\""
argument_list|)
argument_list|)
expr_stmt|;
comment|// custom behavior, the synonyms are expanded, unless you use quote operator
name|QueryParser
name|smart
init|=
operator|new
name|SmartQueryParser
argument_list|()
decl_stmt|;
name|smart
operator|.
name|setSplitOnWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|graphQuery
operator|=
operator|new
name|GraphQuery
argument_list|(
name|guineaPig
argument_list|,
name|cavy
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|graphQuery
argument_list|,
name|smart
operator|.
name|parse
argument_list|(
literal|"guinea pig"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|guineaPigPhrase
argument_list|,
name|smart
operator|.
name|parse
argument_list|(
literal|"\"guinea pig\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: Move to QueryParserTestBase once standard flexible parser gets this capability
DECL|method|testOperatorsAndMultiWordSynonyms
specifier|public
name|void
name|testOperatorsAndMultiWordSynonyms
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockSynonymAnalyzer
argument_list|()
decl_stmt|;
name|boolean
name|oldSplitOnWhitespace
init|=
name|splitOnWhitespace
decl_stmt|;
name|splitOnWhitespace
operator|=
literal|false
expr_stmt|;
comment|// Operators should interrupt multiword analysis of adjacent words if they associate
name|assertQueryEquals
argument_list|(
literal|"+guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"-guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"!guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea* pig"
argument_list|,
name|a
argument_list|,
literal|"guinea* pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea? pig"
argument_list|,
name|a
argument_list|,
literal|"guinea? pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea~2 pig"
argument_list|,
name|a
argument_list|,
literal|"guinea~2 pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea^2 pig"
argument_list|,
name|a
argument_list|,
literal|"(guinea)^2.0 pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea +pig"
argument_list|,
name|a
argument_list|,
literal|"guinea +pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea -pig"
argument_list|,
name|a
argument_list|,
literal|"guinea -pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea !pig"
argument_list|,
name|a
argument_list|,
literal|"guinea -pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig*"
argument_list|,
name|a
argument_list|,
literal|"guinea pig*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig?"
argument_list|,
name|a
argument_list|,
literal|"guinea pig?"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig~2"
argument_list|,
name|a
argument_list|,
literal|"guinea pig~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig^2"
argument_list|,
name|a
argument_list|,
literal|"guinea (pig)^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"field:guinea pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea field:pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea NOT pig"
argument_list|,
name|a
argument_list|,
literal|"guinea -pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig AND dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea +pig +Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs AND guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+Synonym(dog dogs) +guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig&& dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea +pig +Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs&& guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+Synonym(dog dogs) +guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig OR dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea pig Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs OR guinea pig"
argument_list|,
name|a
argument_list|,
literal|"Synonym(dog dogs) guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig || dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea pig Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs || guinea pig"
argument_list|,
name|a
argument_list|,
literal|"Synonym(dog dogs) guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"guinea\" pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea \"pig\""
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(guinea) pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea (pig)"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"/guinea/ pig"
argument_list|,
name|a
argument_list|,
literal|"/guinea/ pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea /pig/"
argument_list|,
name|a
argument_list|,
literal|"guinea /pig/"
argument_list|)
expr_stmt|;
comment|// Operators should not interrupt multiword analysis if not don't associate
name|assertQueryEquals
argument_list|(
literal|"(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"+Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"-(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"-Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"!(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"-Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT (guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"-Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(guinea pig)^2"
argument_list|,
name|a
argument_list|,
literal|"(Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false))^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"field:(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+small Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"-small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-small Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"!small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-small Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-small Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"small* guinea pig"
argument_list|,
name|a
argument_list|,
literal|"small* Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"small? guinea pig"
argument_list|,
name|a
argument_list|,
literal|"small? Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"small\" guinea pig"
argument_list|,
name|a
argument_list|,
literal|"small Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig +running"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) +running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig -running"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) -running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig !running"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) -running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig NOT running"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) -running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig running*"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) running*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig running?"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) running?"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig \"running\""
argument_list|,
name|a
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false) running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"guinea pig\"~2"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:\"guinea pig\"~2, field:cavy, hasBoolean=false, hasPhrase=true)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"field:\"guinea pig\""
argument_list|,
name|a
argument_list|,
literal|"Graph(field:\"guinea pig\", field:cavy, hasBoolean=false, hasPhrase=true)"
argument_list|)
expr_stmt|;
name|splitOnWhitespace
operator|=
name|oldSplitOnWhitespace
expr_stmt|;
block|}
DECL|method|testOperatorsAndMultiWordSynonymsSplitOnWhitespace
specifier|public
name|void
name|testOperatorsAndMultiWordSynonymsSplitOnWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|a
init|=
operator|new
name|MockSynonymAnalyzer
argument_list|()
decl_stmt|;
name|boolean
name|oldSplitOnWhitespace
init|=
name|splitOnWhitespace
decl_stmt|;
name|splitOnWhitespace
operator|=
literal|true
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"-guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"!guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea* pig"
argument_list|,
name|a
argument_list|,
literal|"guinea* pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea? pig"
argument_list|,
name|a
argument_list|,
literal|"guinea? pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea~2 pig"
argument_list|,
name|a
argument_list|,
literal|"guinea~2 pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea^2 pig"
argument_list|,
name|a
argument_list|,
literal|"(guinea)^2.0 pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea +pig"
argument_list|,
name|a
argument_list|,
literal|"guinea +pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea -pig"
argument_list|,
name|a
argument_list|,
literal|"guinea -pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea !pig"
argument_list|,
name|a
argument_list|,
literal|"guinea -pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig*"
argument_list|,
name|a
argument_list|,
literal|"guinea pig*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig?"
argument_list|,
name|a
argument_list|,
literal|"guinea pig?"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig~2"
argument_list|,
name|a
argument_list|,
literal|"guinea pig~2"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig^2"
argument_list|,
name|a
argument_list|,
literal|"guinea (pig)^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"field:guinea pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea field:pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea NOT pig"
argument_list|,
name|a
argument_list|,
literal|"guinea -pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig AND dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea +pig +Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs AND guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+Synonym(dog dogs) +guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig&& dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea +pig +Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs&& guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+Synonym(dog dogs) +guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig OR dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea pig Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs OR guinea pig"
argument_list|,
name|a
argument_list|,
literal|"Synonym(dog dogs) guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig || dogs"
argument_list|,
name|a
argument_list|,
literal|"guinea pig Synonym(dog dogs)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"dogs || guinea pig"
argument_list|,
name|a
argument_list|,
literal|"Synonym(dog dogs) guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"guinea\" pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea \"pig\""
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(guinea) pig"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea (pig)"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"/guinea/ pig"
argument_list|,
name|a
argument_list|,
literal|"/guinea/ pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea /pig/"
argument_list|,
name|a
argument_list|,
literal|"guinea /pig/"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"+(guinea pig)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"-(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"-(guinea pig)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"!(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"-(guinea pig)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT (guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"-(guinea pig)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"(guinea pig)^2"
argument_list|,
name|a
argument_list|,
literal|"(guinea pig)^2.0"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"field:(guinea pig)"
argument_list|,
name|a
argument_list|,
literal|"guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"+small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"+small guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"-small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-small guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"!small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-small guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"NOT small guinea pig"
argument_list|,
name|a
argument_list|,
literal|"-small guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"small* guinea pig"
argument_list|,
name|a
argument_list|,
literal|"small* guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"small? guinea pig"
argument_list|,
name|a
argument_list|,
literal|"small? guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"small\" guinea pig"
argument_list|,
name|a
argument_list|,
literal|"small guinea pig"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig +running"
argument_list|,
name|a
argument_list|,
literal|"guinea pig +running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig -running"
argument_list|,
name|a
argument_list|,
literal|"guinea pig -running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig !running"
argument_list|,
name|a
argument_list|,
literal|"guinea pig -running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig NOT running"
argument_list|,
name|a
argument_list|,
literal|"guinea pig -running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig running*"
argument_list|,
name|a
argument_list|,
literal|"guinea pig running*"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig running?"
argument_list|,
name|a
argument_list|,
literal|"guinea pig running?"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig \"running\""
argument_list|,
name|a
argument_list|,
literal|"guinea pig running"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"\"guinea pig\"~2"
argument_list|,
name|a
argument_list|,
literal|"Graph(field:\"guinea pig\"~2, field:cavy, hasBoolean=false, hasPhrase=true)"
argument_list|)
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"field:\"guinea pig\""
argument_list|,
name|a
argument_list|,
literal|"Graph(field:\"guinea pig\", field:cavy, hasBoolean=false, hasPhrase=true)"
argument_list|)
expr_stmt|;
name|splitOnWhitespace
operator|=
name|oldSplitOnWhitespace
expr_stmt|;
block|}
DECL|method|testDefaultSplitOnWhitespace
specifier|public
name|void
name|testDefaultSplitOnWhitespace
parameter_list|()
throws|throws
name|Exception
block|{
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
literal|"field"
argument_list|,
operator|new
name|Analyzer1
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|parser
operator|.
name|getSplitOnWhitespace
argument_list|()
argument_list|)
expr_stmt|;
comment|// default is false
comment|// A multi-word synonym source will form a synonym query for the same-starting-position tokens
name|TermQuery
name|guinea
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"guinea"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|pig
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"pig"
argument_list|)
argument_list|)
decl_stmt|;
name|TermQuery
name|cavy
init|=
operator|new
name|TermQuery
argument_list|(
operator|new
name|Term
argument_list|(
literal|"field"
argument_list|,
literal|"cavy"
argument_list|)
argument_list|)
decl_stmt|;
comment|// A multi-word synonym source will form a graph query for synonyms that formed the graph token stream
name|BooleanQuery
operator|.
name|Builder
name|synonym
init|=
operator|new
name|BooleanQuery
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|synonym
operator|.
name|add
argument_list|(
name|guinea
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|synonym
operator|.
name|add
argument_list|(
name|pig
argument_list|,
name|BooleanClause
operator|.
name|Occur
operator|.
name|SHOULD
argument_list|)
expr_stmt|;
name|BooleanQuery
name|guineaPig
init|=
name|synonym
operator|.
name|build
argument_list|()
decl_stmt|;
name|GraphQuery
name|graphQuery
init|=
operator|new
name|GraphQuery
argument_list|(
name|guineaPig
argument_list|,
name|cavy
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|graphQuery
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"guinea pig"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|oldSplitOnWhitespace
init|=
name|splitOnWhitespace
decl_stmt|;
name|splitOnWhitespace
operator|=
name|QueryParser
operator|.
name|DEFAULT_SPLIT_ON_WHITESPACE
expr_stmt|;
name|assertQueryEquals
argument_list|(
literal|"guinea pig"
argument_list|,
operator|new
name|MockSynonymAnalyzer
argument_list|()
argument_list|,
literal|"Graph(field:guinea field:pig, field:cavy, hasBoolean=true, hasPhrase=false)"
argument_list|)
expr_stmt|;
name|splitOnWhitespace
operator|=
name|oldSplitOnWhitespace
expr_stmt|;
block|}
DECL|method|testWildcardAlone
specifier|public
name|void
name|testWildcardAlone
parameter_list|()
throws|throws
name|ParseException
block|{
comment|//seems like crazy edge case, but can be useful in concordance
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|ASCIIAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|expectThrows
argument_list|(
name|ParseException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|parser
operator|.
name|parse
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|QueryParser
name|parser2
init|=
operator|new
name|QueryParser
argument_list|(
literal|"*"
argument_list|,
operator|new
name|ASCIIAnalyzer
argument_list|()
argument_list|)
decl_stmt|;
name|parser2
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|MatchAllDocsQuery
argument_list|()
argument_list|,
name|parser2
operator|.
name|parse
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildCardEscapes
specifier|public
name|void
name|testWildCardEscapes
parameter_list|()
throws|throws
name|ParseException
throws|,
name|IOException
block|{
name|Analyzer
name|a
init|=
operator|new
name|ASCIIAnalyzer
argument_list|()
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"mÃ¶*tley"
argument_list|)
argument_list|,
literal|"moatley"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// need to have at least one genuine wildcard to trigger the wildcard analysis
comment|// hence the * before the y
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"mÃ¶\\*tl*y"
argument_list|)
argument_list|,
literal|"mo*tley"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// escaped backslash then true wildcard
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"mÃ¶\\\\*tley"
argument_list|)
argument_list|,
literal|"mo\\atley"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// escaped wildcard then true wildcard
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"mÃ¶\\??ley"
argument_list|)
argument_list|,
literal|"mo?tley"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// the first is an escaped * which should yield a miss
name|assertFalse
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"mÃ¶\\*tl*y"
argument_list|)
argument_list|,
literal|"moatley"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildcardDoesNotNormalizeEscapedChars
specifier|public
name|void
name|testWildcardDoesNotNormalizeEscapedChars
parameter_list|()
throws|throws
name|Exception
block|{
name|Analyzer
name|asciiAnalyzer
init|=
operator|new
name|ASCIIAnalyzer
argument_list|()
decl_stmt|;
name|Analyzer
name|keywordAnalyzer
init|=
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|asciiAnalyzer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"e*e"
argument_list|)
argument_list|,
literal|"Ã©tude"
argument_list|,
name|asciiAnalyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"Ã©*e"
argument_list|)
argument_list|,
literal|"etude"
argument_list|,
name|asciiAnalyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"\\Ã©*e"
argument_list|)
argument_list|,
literal|"etude"
argument_list|,
name|asciiAnalyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|parser
operator|.
name|parse
argument_list|(
literal|"\\Ã©*e"
argument_list|)
argument_list|,
literal|"Ã©tude"
argument_list|,
name|keywordAnalyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testWildCardQuery
specifier|public
name|void
name|testWildCardQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|Analyzer
name|a
init|=
operator|new
name|ASCIIAnalyzer
argument_list|()
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|parser
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"*bersetzung uber*ung"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"*bersetzung Ã¼ber*ung"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setAllowLeadingWildcard
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"motley crue motl?* cru?"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"MÃ¶tley Cr\u00fce MÃ¶tl?* CrÃ¼?"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renee zellweger ren?? zellw?ger"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"RenÃ©e Zellweger Ren?? Zellw?ger"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testPrefixQuery
specifier|public
name|void
name|testPrefixQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|Analyzer
name|a
init|=
operator|new
name|ASCIIAnalyzer
argument_list|()
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ubersetzung ubersetz*"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"Ã¼bersetzung Ã¼bersetz*"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"motley crue motl* cru*"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"MÃ¶tley CrÃ¼e MÃ¶tl* crÃ¼*"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"rene? zellw*"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"RenÃ©? Zellw*"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testRangeQuery
specifier|public
name|void
name|testRangeQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|Analyzer
name|a
init|=
operator|new
name|ASCIIAnalyzer
argument_list|()
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"[aa TO bb]"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"[aa TO bb]"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{anais TO zoe}"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"{AnaÃ¯s TO ZoÃ©}"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|method|testFuzzyQuery
specifier|public
name|void
name|testFuzzyQuery
parameter_list|()
throws|throws
name|ParseException
block|{
name|Analyzer
name|a
init|=
operator|new
name|ASCIIAnalyzer
argument_list|()
decl_stmt|;
name|QueryParser
name|parser
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ubersetzung ubersetzung~1"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"Ãbersetzung Ãbersetzung~0.9"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"motley crue motley~1 crue~2"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"MÃ¶tley CrÃ¼e MÃ¶tley~0.75 CrÃ¼e~0.5"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"renee zellweger renee~0 zellweger~2"
argument_list|,
name|parser
operator|.
name|parse
argument_list|(
literal|"RenÃ©e Zellweger RenÃ©e~0.9 Zellweger~"
argument_list|)
operator|.
name|toString
argument_list|(
name|FIELD
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|class|FoldingFilter
specifier|final
specifier|static
class|class
name|FoldingFilter
extends|extends
name|TokenFilter
block|{
DECL|field|termAtt
specifier|final
name|CharTermAttribute
name|termAtt
init|=
name|addAttribute
argument_list|(
name|CharTermAttribute
operator|.
name|class
argument_list|)
decl_stmt|;
DECL|method|FoldingFilter
specifier|public
name|FoldingFilter
parameter_list|(
name|TokenStream
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
DECL|method|incrementToken
specifier|public
name|boolean
name|incrementToken
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|input
operator|.
name|incrementToken
argument_list|()
condition|)
block|{
name|char
name|term
index|[]
init|=
name|termAtt
operator|.
name|buffer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|term
operator|.
name|length
condition|;
name|i
operator|++
control|)
switch|switch
condition|(
name|term
index|[
name|i
index|]
condition|)
block|{
case|case
literal|'Ã¼'
case|:
name|term
index|[
name|i
index|]
operator|=
literal|'u'
expr_stmt|;
break|break;
case|case
literal|'Ã¶'
case|:
name|term
index|[
name|i
index|]
operator|=
literal|'o'
expr_stmt|;
break|break;
case|case
literal|'Ã©'
case|:
name|term
index|[
name|i
index|]
operator|=
literal|'e'
expr_stmt|;
break|break;
case|case
literal|'Ã¯'
case|:
name|term
index|[
name|i
index|]
operator|=
literal|'i'
expr_stmt|;
break|break;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
DECL|class|ASCIIAnalyzer
specifier|final
specifier|static
class|class
name|ASCIIAnalyzer
extends|extends
name|Analyzer
block|{
annotation|@
name|Override
DECL|method|createComponents
specifier|public
name|TokenStreamComponents
name|createComponents
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
name|Tokenizer
name|result
init|=
operator|new
name|MockTokenizer
argument_list|(
name|MockTokenizer
operator|.
name|WHITESPACE
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
operator|new
name|TokenStreamComponents
argument_list|(
name|result
argument_list|,
operator|new
name|FoldingFilter
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
DECL|method|normalize
specifier|protected
name|TokenStream
name|normalize
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TokenStream
name|in
parameter_list|)
block|{
return|return
operator|new
name|FoldingFilter
argument_list|(
operator|new
name|MockLowerCaseFilter
argument_list|(
name|in
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// LUCENE-4176
DECL|method|testByteTerms
specifier|public
name|void
name|testByteTerms
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|s
init|=
literal|"à¹à¸"
decl_stmt|;
name|Analyzer
name|analyzer
init|=
operator|new
name|MockBytesAnalyzer
argument_list|()
decl_stmt|;
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"[à¹à¸ TO à¹à¸]"
argument_list|)
argument_list|,
name|s
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"à¹à¸~1"
argument_list|)
argument_list|,
name|s
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"à¹à¸*"
argument_list|)
argument_list|,
name|s
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"à¹*"
argument_list|)
argument_list|,
name|s
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|isAHit
argument_list|(
name|qp
operator|.
name|parse
argument_list|(
literal|"à¹??"
argument_list|)
argument_list|,
name|s
argument_list|,
name|analyzer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LUCENE-7533
DECL|method|test_splitOnWhitespace_with_autoGeneratePhraseQueries
specifier|public
name|void
name|test_splitOnWhitespace_with_autoGeneratePhraseQueries
parameter_list|()
block|{
specifier|final
name|QueryParser
name|qp
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|qp
operator|.
name|setSplitOnWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qp
operator|.
name|setAutoGeneratePhraseQueries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
specifier|final
name|QueryParser
name|qp2
init|=
operator|new
name|QueryParser
argument_list|(
name|FIELD
argument_list|,
operator|new
name|MockAnalyzer
argument_list|(
name|random
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|expectThrows
argument_list|(
name|IllegalArgumentException
operator|.
name|class
argument_list|,
parameter_list|()
lambda|->
block|{
name|qp2
operator|.
name|setSplitOnWhitespace
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qp2
operator|.
name|setAutoGeneratePhraseQueries
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qp2
operator|.
name|setSplitOnWhitespace
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
DECL|method|isAHit
specifier|private
name|boolean
name|isAHit
parameter_list|(
name|Query
name|q
parameter_list|,
name|String
name|content
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|)
throws|throws
name|IOException
block|{
name|Directory
name|ramDir
init|=
name|newDirectory
argument_list|()
decl_stmt|;
name|RandomIndexWriter
name|writer
init|=
operator|new
name|RandomIndexWriter
argument_list|(
name|random
argument_list|()
argument_list|,
name|ramDir
argument_list|,
name|analyzer
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
name|FieldType
name|fieldType
init|=
operator|new
name|FieldType
argument_list|()
decl_stmt|;
name|fieldType
operator|.
name|setIndexOptions
argument_list|(
name|IndexOptions
operator|.
name|DOCS_AND_FREQS_AND_POSITIONS
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setTokenized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fieldType
operator|.
name|setStored
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|Field
name|field
init|=
operator|new
name|Field
argument_list|(
name|FIELD
argument_list|,
name|content
argument_list|,
name|fieldType
argument_list|)
decl_stmt|;
name|doc
operator|.
name|add
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|writer
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|DirectoryReader
name|ir
init|=
name|DirectoryReader
operator|.
name|open
argument_list|(
name|ramDir
argument_list|)
decl_stmt|;
name|IndexSearcher
name|is
init|=
operator|new
name|IndexSearcher
argument_list|(
name|ir
argument_list|)
decl_stmt|;
name|int
name|hits
init|=
name|is
operator|.
name|search
argument_list|(
name|q
argument_list|,
literal|10
argument_list|)
operator|.
name|totalHits
decl_stmt|;
name|ir
operator|.
name|close
argument_list|()
expr_stmt|;
name|ramDir
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|hits
operator|==
literal|1
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

